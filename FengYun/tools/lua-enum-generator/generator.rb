#! /usr/bin/env ruby

Namespace = Struct.new(:name, :parent, :children)
Enum = Struct.new(:name, :values, :last_vid)
Table = Struct.new(:name, :values, :last_vid)
Const = Struct.new(:name, :value)

class String
  def underscore
    self.gsub(/::/, '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub(/([a-z\d])([A-Z])/,'\1_\2').
    tr("-", "_").
    downcase
  end

  def camelcase
    elems = self.split "_"
    newelems = [ elems[0] ]
    elems.drop(1).each { |v| v[0] = v[0].upcase; newelems << v }
    newelems.join
  end
end

class Generator < BasicObject
  def initialize()
    @last = nil
    @ns = ::Namespace.new(nil, nil, [])
    @space = " " * 3
  end

  def set_space(space)
    @space = " " * space
  end

  def namespace(name)
    @ns = ::Namespace.new(name, @ns, [])
    yield
    @ns.parent.children << @ns
    @ns = @ns.parent
  end

  def enum(name)
    e = ::Enum.new(name, {}, 0)
    @ns.children << e
    @last = e
    yield
    @last = nil
  end

  def table(name)
    t = ::Table.new(name, {}, 0)
    @ns.children << t
    @last = t
    yield
    @last = nil
  end

  def value(name, i = nil)
    if i.nil? then
      i = @last.last_vid
    end
    @last.values[i] = name
    @last.last_vid = i + 1
  end

  def const(name, i)
    @ns.children << ::Const.new(name, i)
  end

  def output(fn)
    ::Builder.write(::Writer.new(@ns, @space), fn)
  end
end

module Builder
  def self.define(&block)
    gen = Generator.new
    gen.instance_eval(&block)
  end

  def self.load(fn)
    @source = fn
    eval(File.open(fn).read)
  end

  def self.write(writer, fn)
    writer.write(@source, fn)
  end

  def self.const_missing(name)
    name
  end
end

class Writer
  def initialize(ns, space)
    @ns = ns
    @space = space
    @content = []
  end

  def is_global_ns?(ns)
    ns.name.nil? && ns.parent.nil?
  end

  def full_ns_name(ns)
    if is_global_ns? ns then
      ""
    else
      if is_global_ns? ns.parent then
        ns.name
      else
        full_ns_name(ns.parent) + "." + ns.name
      end
    end
  end

  def format_ns(ns)
    unless is_global_ns?(ns) then
      @content << "#{full_ns_name(ns)} = #{full_ns_name(ns)} or \{\}\n"
      @content << "\n"
    end

    ns.children.each_index do |i|
      c = ns.children[i]
      case c
      when Namespace
        format_ns(c)
      when Enum
        format_enum(ns, c)
      when Table
        format_table(ns, c)
      when Const
        format_const(ns, c)
      end

      if i != (ns.children.size - 1) then
        @content <<  "\n"
      end
    end
  end

  def format_const(ns, c)
    @content << "#{full_ns_name(ns)}.#{c.name.to_s.underscore.upcase} = #{c.value}\n"
  end

  def format_enum(ns, e)
    e.values.each do |k, v|
      @content << "#{full_ns_name(ns)}.#{e.name.to_s.underscore.upcase}_#{v.to_s.upcase} = #{k}\n"
    end
  end

  def format_table(ns, t)
    @content << "#{full_ns_name(ns)}.#{t.name.to_s.underscore.upcase} = \{\n"
    keys = t.values.keys
    keys.each_index do |i|
      k = keys[i]
      v = t.values[k]
      if i == keys.size - 1 then
        @content << "#{@space}[#{k+1}] = #{v.inspect}\n"
      else
        @content << "#{@space}[#{k+1}] = #{v.inspect},\n"
      end
    end
    @content << "\}\n"
  end

  def write(source, fn)
    @content = []
    @content << "-- This file is auto generated by #{source},\n-- please do NOT edit it by manual!\n\n"
    format_ns(@ns)
    File.open(fn, "w") { |f| f.write( @content.join("")) }
  end
end

Builder.load(ARGV[0])
