// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prize_draw.proto

#ifndef PROTOBUF_prize_5fdraw_2eproto__INCLUDED
#define PROTOBUF_prize_5fdraw_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "goods.pb.h"
#include "config.pb.h"
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_prize_5fdraw_2eproto();
void protobuf_AssignDesc_prize_5fdraw_2eproto();
void protobuf_ShutdownFile_prize_5fdraw_2eproto();

class PointExchangeRuleProto;
class PrizeDrawInfoProto;
class PrizeDrawConfig;

// ===================================================================

class PointExchangeRuleProto : public ::google::protobuf::Message {
 public:
  PointExchangeRuleProto();
  virtual ~PointExchangeRuleProto();

  PointExchangeRuleProto(const PointExchangeRuleProto& from);

  inline PointExchangeRuleProto& operator=(const PointExchangeRuleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointExchangeRuleProto& default_instance();

  void Swap(PointExchangeRuleProto* other);

  // implements Message ----------------------------------------------

  PointExchangeRuleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointExchangeRuleProto& from);
  void MergeFrom(const PointExchangeRuleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 point_cost = 2;
  inline bool has_point_cost() const;
  inline void clear_point_cost();
  static const int kPointCostFieldNumber = 2;
  inline ::google::protobuf::int32 point_cost() const;
  inline void set_point_cost(::google::protobuf::int32 value);

  // optional int32 count_limit = 3;
  inline bool has_count_limit() const;
  inline void clear_count_limit();
  static const int kCountLimitFieldNumber = 3;
  inline ::google::protobuf::int32 count_limit() const;
  inline void set_count_limit(::google::protobuf::int32 value);

  // repeated .app.message.GoodsWrapperProto obtain_goods = 4;
  inline int obtain_goods_size() const;
  inline void clear_obtain_goods();
  static const int kObtainGoodsFieldNumber = 4;
  inline const ::app::message::GoodsWrapperProto& obtain_goods(int index) const;
  inline ::app::message::GoodsWrapperProto* mutable_obtain_goods(int index);
  inline ::app::message::GoodsWrapperProto* add_obtain_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >&
      obtain_goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >*
      mutable_obtain_goods();

  // @@protoc_insertion_point(class_scope:app.message.PointExchangeRuleProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_point_cost();
  inline void clear_has_point_cost();
  inline void set_has_count_limit();
  inline void clear_has_count_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 point_cost_;
  ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto > obtain_goods_;
  ::google::protobuf::int32 count_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_prize_5fdraw_2eproto();
  friend void protobuf_AssignDesc_prize_5fdraw_2eproto();
  friend void protobuf_ShutdownFile_prize_5fdraw_2eproto();

  void InitAsDefaultInstance();
  static PointExchangeRuleProto* default_instance_;
};
// -------------------------------------------------------------------

class PrizeDrawInfoProto : public ::google::protobuf::Message {
 public:
  PrizeDrawInfoProto();
  virtual ~PrizeDrawInfoProto();

  PrizeDrawInfoProto(const PrizeDrawInfoProto& from);

  inline PrizeDrawInfoProto& operator=(const PrizeDrawInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrizeDrawInfoProto& default_instance();

  void Swap(PrizeDrawInfoProto* other);

  // implements Message ----------------------------------------------

  PrizeDrawInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrizeDrawInfoProto& from);
  void MergeFrom(const PrizeDrawInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string icon = 6;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 6;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 quality = 7;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 7;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PrizeDrawInfoProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::int32 rate_;
  ::google::protobuf::int32 quality_;
  ::std::string* icon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_prize_5fdraw_2eproto();
  friend void protobuf_AssignDesc_prize_5fdraw_2eproto();
  friend void protobuf_ShutdownFile_prize_5fdraw_2eproto();

  void InitAsDefaultInstance();
  static PrizeDrawInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class PrizeDrawConfig : public ::google::protobuf::Message {
 public:
  PrizeDrawConfig();
  virtual ~PrizeDrawConfig();

  PrizeDrawConfig(const PrizeDrawConfig& from);

  inline PrizeDrawConfig& operator=(const PrizeDrawConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrizeDrawConfig& default_instance();

  void Swap(PrizeDrawConfig* other);

  // implements Message ----------------------------------------------

  PrizeDrawConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrizeDrawConfig& from);
  void MergeFrom(const PrizeDrawConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.UpgradeProto upgrade_data = 1;
  inline bool has_upgrade_data() const;
  inline void clear_upgrade_data();
  static const int kUpgradeDataFieldNumber = 1;
  inline const ::app::message::UpgradeProto& upgrade_data() const;
  inline ::app::message::UpgradeProto* mutable_upgrade_data();
  inline ::app::message::UpgradeProto* release_upgrade_data();
  inline void set_allocated_upgrade_data(::app::message::UpgradeProto* upgrade_data);

  // optional int32 prize_draw_storage_capcity = 2;
  inline bool has_prize_draw_storage_capcity() const;
  inline void clear_prize_draw_storage_capcity();
  static const int kPrizeDrawStorageCapcityFieldNumber = 2;
  inline ::google::protobuf::int32 prize_draw_storage_capcity() const;
  inline void set_prize_draw_storage_capcity(::google::protobuf::int32 value);

  // optional int32 log_max_count = 3;
  inline bool has_log_max_count() const;
  inline void clear_log_max_count();
  static const int kLogMaxCountFieldNumber = 3;
  inline ::google::protobuf::int32 log_max_count() const;
  inline void set_log_max_count(::google::protobuf::int32 value);

  // repeated .app.message.PrizeDrawInfoProto prize_draw_infos = 4;
  inline int prize_draw_infos_size() const;
  inline void clear_prize_draw_infos();
  static const int kPrizeDrawInfosFieldNumber = 4;
  inline const ::app::message::PrizeDrawInfoProto& prize_draw_infos(int index) const;
  inline ::app::message::PrizeDrawInfoProto* mutable_prize_draw_infos(int index);
  inline ::app::message::PrizeDrawInfoProto* add_prize_draw_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::PrizeDrawInfoProto >&
      prize_draw_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::PrizeDrawInfoProto >*
      mutable_prize_draw_infos();

  // repeated .app.message.PointExchangeRuleProto point_exchange_infos = 5;
  inline int point_exchange_infos_size() const;
  inline void clear_point_exchange_infos();
  static const int kPointExchangeInfosFieldNumber = 5;
  inline const ::app::message::PointExchangeRuleProto& point_exchange_infos(int index) const;
  inline ::app::message::PointExchangeRuleProto* mutable_point_exchange_infos(int index);
  inline ::app::message::PointExchangeRuleProto* add_point_exchange_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::PointExchangeRuleProto >&
      point_exchange_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::PointExchangeRuleProto >*
      mutable_point_exchange_infos();

  // optional int64 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 7;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::int64 end_time() const;
  inline void set_end_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.PrizeDrawConfig)
 private:
  inline void set_has_upgrade_data();
  inline void clear_has_upgrade_data();
  inline void set_has_prize_draw_storage_capcity();
  inline void clear_has_prize_draw_storage_capcity();
  inline void set_has_log_max_count();
  inline void clear_has_log_max_count();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::UpgradeProto* upgrade_data_;
  ::google::protobuf::int32 prize_draw_storage_capcity_;
  ::google::protobuf::int32 log_max_count_;
  ::google::protobuf::RepeatedPtrField< ::app::message::PrizeDrawInfoProto > prize_draw_infos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::PointExchangeRuleProto > point_exchange_infos_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_prize_5fdraw_2eproto();
  friend void protobuf_AssignDesc_prize_5fdraw_2eproto();
  friend void protobuf_ShutdownFile_prize_5fdraw_2eproto();

  void InitAsDefaultInstance();
  static PrizeDrawConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// PointExchangeRuleProto

// optional int32 id = 1;
inline bool PointExchangeRuleProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointExchangeRuleProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointExchangeRuleProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointExchangeRuleProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PointExchangeRuleProto::id() const {
  return id_;
}
inline void PointExchangeRuleProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 point_cost = 2;
inline bool PointExchangeRuleProto::has_point_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointExchangeRuleProto::set_has_point_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointExchangeRuleProto::clear_has_point_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointExchangeRuleProto::clear_point_cost() {
  point_cost_ = 0;
  clear_has_point_cost();
}
inline ::google::protobuf::int32 PointExchangeRuleProto::point_cost() const {
  return point_cost_;
}
inline void PointExchangeRuleProto::set_point_cost(::google::protobuf::int32 value) {
  set_has_point_cost();
  point_cost_ = value;
}

// optional int32 count_limit = 3;
inline bool PointExchangeRuleProto::has_count_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointExchangeRuleProto::set_has_count_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointExchangeRuleProto::clear_has_count_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointExchangeRuleProto::clear_count_limit() {
  count_limit_ = 0;
  clear_has_count_limit();
}
inline ::google::protobuf::int32 PointExchangeRuleProto::count_limit() const {
  return count_limit_;
}
inline void PointExchangeRuleProto::set_count_limit(::google::protobuf::int32 value) {
  set_has_count_limit();
  count_limit_ = value;
}

// repeated .app.message.GoodsWrapperProto obtain_goods = 4;
inline int PointExchangeRuleProto::obtain_goods_size() const {
  return obtain_goods_.size();
}
inline void PointExchangeRuleProto::clear_obtain_goods() {
  obtain_goods_.Clear();
}
inline const ::app::message::GoodsWrapperProto& PointExchangeRuleProto::obtain_goods(int index) const {
  return obtain_goods_.Get(index);
}
inline ::app::message::GoodsWrapperProto* PointExchangeRuleProto::mutable_obtain_goods(int index) {
  return obtain_goods_.Mutable(index);
}
inline ::app::message::GoodsWrapperProto* PointExchangeRuleProto::add_obtain_goods() {
  return obtain_goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >&
PointExchangeRuleProto::obtain_goods() const {
  return obtain_goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >*
PointExchangeRuleProto::mutable_obtain_goods() {
  return &obtain_goods_;
}

// -------------------------------------------------------------------

// PrizeDrawInfoProto

// optional int32 id = 1;
inline bool PrizeDrawInfoProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrizeDrawInfoProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrizeDrawInfoProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrizeDrawInfoProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrizeDrawInfoProto::id() const {
  return id_;
}
inline void PrizeDrawInfoProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool PrizeDrawInfoProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrizeDrawInfoProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrizeDrawInfoProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrizeDrawInfoProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PrizeDrawInfoProto::type() const {
  return type_;
}
inline void PrizeDrawInfoProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 rate = 3;
inline bool PrizeDrawInfoProto::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrizeDrawInfoProto::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrizeDrawInfoProto::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrizeDrawInfoProto::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 PrizeDrawInfoProto::rate() const {
  return rate_;
}
inline void PrizeDrawInfoProto::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// optional bytes name = 4;
inline bool PrizeDrawInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrizeDrawInfoProto::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrizeDrawInfoProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrizeDrawInfoProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrizeDrawInfoProto::name() const {
  return *name_;
}
inline void PrizeDrawInfoProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrizeDrawInfoProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrizeDrawInfoProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrizeDrawInfoProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrizeDrawInfoProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrizeDrawInfoProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes desc = 5;
inline bool PrizeDrawInfoProto::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrizeDrawInfoProto::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrizeDrawInfoProto::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrizeDrawInfoProto::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& PrizeDrawInfoProto::desc() const {
  return *desc_;
}
inline void PrizeDrawInfoProto::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PrizeDrawInfoProto::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PrizeDrawInfoProto::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrizeDrawInfoProto::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* PrizeDrawInfoProto::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrizeDrawInfoProto::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string icon = 6;
inline bool PrizeDrawInfoProto::has_icon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrizeDrawInfoProto::set_has_icon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrizeDrawInfoProto::clear_has_icon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrizeDrawInfoProto::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& PrizeDrawInfoProto::icon() const {
  return *icon_;
}
inline void PrizeDrawInfoProto::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PrizeDrawInfoProto::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PrizeDrawInfoProto::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrizeDrawInfoProto::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* PrizeDrawInfoProto::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrizeDrawInfoProto::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 quality = 7;
inline bool PrizeDrawInfoProto::has_quality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrizeDrawInfoProto::set_has_quality() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrizeDrawInfoProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrizeDrawInfoProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 PrizeDrawInfoProto::quality() const {
  return quality_;
}
inline void PrizeDrawInfoProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// PrizeDrawConfig

// optional .app.message.UpgradeProto upgrade_data = 1;
inline bool PrizeDrawConfig::has_upgrade_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrizeDrawConfig::set_has_upgrade_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrizeDrawConfig::clear_has_upgrade_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrizeDrawConfig::clear_upgrade_data() {
  if (upgrade_data_ != NULL) upgrade_data_->::app::message::UpgradeProto::Clear();
  clear_has_upgrade_data();
}
inline const ::app::message::UpgradeProto& PrizeDrawConfig::upgrade_data() const {
  return upgrade_data_ != NULL ? *upgrade_data_ : *default_instance_->upgrade_data_;
}
inline ::app::message::UpgradeProto* PrizeDrawConfig::mutable_upgrade_data() {
  set_has_upgrade_data();
  if (upgrade_data_ == NULL) upgrade_data_ = new ::app::message::UpgradeProto;
  return upgrade_data_;
}
inline ::app::message::UpgradeProto* PrizeDrawConfig::release_upgrade_data() {
  clear_has_upgrade_data();
  ::app::message::UpgradeProto* temp = upgrade_data_;
  upgrade_data_ = NULL;
  return temp;
}
inline void PrizeDrawConfig::set_allocated_upgrade_data(::app::message::UpgradeProto* upgrade_data) {
  delete upgrade_data_;
  upgrade_data_ = upgrade_data;
  if (upgrade_data) {
    set_has_upgrade_data();
  } else {
    clear_has_upgrade_data();
  }
}

// optional int32 prize_draw_storage_capcity = 2;
inline bool PrizeDrawConfig::has_prize_draw_storage_capcity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrizeDrawConfig::set_has_prize_draw_storage_capcity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrizeDrawConfig::clear_has_prize_draw_storage_capcity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrizeDrawConfig::clear_prize_draw_storage_capcity() {
  prize_draw_storage_capcity_ = 0;
  clear_has_prize_draw_storage_capcity();
}
inline ::google::protobuf::int32 PrizeDrawConfig::prize_draw_storage_capcity() const {
  return prize_draw_storage_capcity_;
}
inline void PrizeDrawConfig::set_prize_draw_storage_capcity(::google::protobuf::int32 value) {
  set_has_prize_draw_storage_capcity();
  prize_draw_storage_capcity_ = value;
}

// optional int32 log_max_count = 3;
inline bool PrizeDrawConfig::has_log_max_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrizeDrawConfig::set_has_log_max_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrizeDrawConfig::clear_has_log_max_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrizeDrawConfig::clear_log_max_count() {
  log_max_count_ = 0;
  clear_has_log_max_count();
}
inline ::google::protobuf::int32 PrizeDrawConfig::log_max_count() const {
  return log_max_count_;
}
inline void PrizeDrawConfig::set_log_max_count(::google::protobuf::int32 value) {
  set_has_log_max_count();
  log_max_count_ = value;
}

// repeated .app.message.PrizeDrawInfoProto prize_draw_infos = 4;
inline int PrizeDrawConfig::prize_draw_infos_size() const {
  return prize_draw_infos_.size();
}
inline void PrizeDrawConfig::clear_prize_draw_infos() {
  prize_draw_infos_.Clear();
}
inline const ::app::message::PrizeDrawInfoProto& PrizeDrawConfig::prize_draw_infos(int index) const {
  return prize_draw_infos_.Get(index);
}
inline ::app::message::PrizeDrawInfoProto* PrizeDrawConfig::mutable_prize_draw_infos(int index) {
  return prize_draw_infos_.Mutable(index);
}
inline ::app::message::PrizeDrawInfoProto* PrizeDrawConfig::add_prize_draw_infos() {
  return prize_draw_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::PrizeDrawInfoProto >&
PrizeDrawConfig::prize_draw_infos() const {
  return prize_draw_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::PrizeDrawInfoProto >*
PrizeDrawConfig::mutable_prize_draw_infos() {
  return &prize_draw_infos_;
}

// repeated .app.message.PointExchangeRuleProto point_exchange_infos = 5;
inline int PrizeDrawConfig::point_exchange_infos_size() const {
  return point_exchange_infos_.size();
}
inline void PrizeDrawConfig::clear_point_exchange_infos() {
  point_exchange_infos_.Clear();
}
inline const ::app::message::PointExchangeRuleProto& PrizeDrawConfig::point_exchange_infos(int index) const {
  return point_exchange_infos_.Get(index);
}
inline ::app::message::PointExchangeRuleProto* PrizeDrawConfig::mutable_point_exchange_infos(int index) {
  return point_exchange_infos_.Mutable(index);
}
inline ::app::message::PointExchangeRuleProto* PrizeDrawConfig::add_point_exchange_infos() {
  return point_exchange_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::PointExchangeRuleProto >&
PrizeDrawConfig::point_exchange_infos() const {
  return point_exchange_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::PointExchangeRuleProto >*
PrizeDrawConfig::mutable_point_exchange_infos() {
  return &point_exchange_infos_;
}

// optional int64 start_time = 6;
inline bool PrizeDrawConfig::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrizeDrawConfig::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrizeDrawConfig::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrizeDrawConfig::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 PrizeDrawConfig::start_time() const {
  return start_time_;
}
inline void PrizeDrawConfig::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int64 end_time = 7;
inline bool PrizeDrawConfig::has_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrizeDrawConfig::set_has_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrizeDrawConfig::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrizeDrawConfig::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 PrizeDrawConfig::end_time() const {
  return end_time_;
}
inline void PrizeDrawConfig::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_prize_5fdraw_2eproto__INCLUDED
