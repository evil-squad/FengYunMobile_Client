// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recharge_gold_tree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recharge_gold_tree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* RechargePrizeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargePrizeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaterPrizeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaterPrizeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FruitPrizeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FruitPrizeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeGoldTreeInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeGoldTreeInfoProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_recharge_5fgold_5ftree_2eproto() {
  protobuf_AddDesc_recharge_5fgold_5ftree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "recharge_gold_tree.proto");
  GOOGLE_CHECK(file != NULL);
  RechargePrizeProto_descriptor_ = file->message_type(0);
  static const int RechargePrizeProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargePrizeProto, prize_),
  };
  RechargePrizeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargePrizeProto_descriptor_,
      RechargePrizeProto::default_instance_,
      RechargePrizeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargePrizeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargePrizeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargePrizeProto));
  WaterPrizeProto_descriptor_ = file->message_type(1);
  static const int WaterPrizeProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterPrizeProto, prize_),
  };
  WaterPrizeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaterPrizeProto_descriptor_,
      WaterPrizeProto::default_instance_,
      WaterPrizeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterPrizeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterPrizeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaterPrizeProto));
  FruitPrizeProto_descriptor_ = file->message_type(2);
  static const int FruitPrizeProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitPrizeProto, prize_),
  };
  FruitPrizeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FruitPrizeProto_descriptor_,
      FruitPrizeProto::default_instance_,
      FruitPrizeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitPrizeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitPrizeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FruitPrizeProto));
  RechargeGoldTreeInfoProto_descriptor_ = file->message_type(3);
  static const int RechargeGoldTreeInfoProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, recharge_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, can_collect_recharge_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, finished_collect_recharge_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, water_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, tree_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, remaining_water_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, mature_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, fruit_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, start_mature_time_),
  };
  RechargeGoldTreeInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeGoldTreeInfoProto_descriptor_,
      RechargeGoldTreeInfoProto::default_instance_,
      RechargeGoldTreeInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeGoldTreeInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeGoldTreeInfoProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_recharge_5fgold_5ftree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargePrizeProto_descriptor_, &RechargePrizeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaterPrizeProto_descriptor_, &WaterPrizeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FruitPrizeProto_descriptor_, &FruitPrizeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeGoldTreeInfoProto_descriptor_, &RechargeGoldTreeInfoProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_recharge_5fgold_5ftree_2eproto() {
  delete RechargePrizeProto::default_instance_;
  delete RechargePrizeProto_reflection_;
  delete WaterPrizeProto::default_instance_;
  delete WaterPrizeProto_reflection_;
  delete FruitPrizeProto::default_instance_;
  delete FruitPrizeProto_reflection_;
  delete RechargeGoldTreeInfoProto::default_instance_;
  delete RechargeGoldTreeInfoProto_reflection_;
}

void protobuf_AddDesc_recharge_5fgold_5ftree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030recharge_gold_tree.proto\022\013app.message\032"
    "\013goods.proto\"C\n\022RechargePrizeProto\022-\n\005pr"
    "ize\030\001 \003(\0132\036.app.message.GoodsWrapperProt"
    "o\"@\n\017WaterPrizeProto\022-\n\005prize\030\001 \003(\0132\036.ap"
    "p.message.GoodsWrapperProto\"@\n\017FruitPriz"
    "eProto\022-\n\005prize\030\001 \003(\0132\036.app.message.Good"
    "sWrapperProto\"\352\002\n\031RechargeGoldTreeInfoPr"
    "oto\0227\n\016recharge_prize\030\001 \001(\0132\037.app.messag"
    "e.RechargePrizeProto\022\"\n\032can_collect_rech"
    "arge_prize\030\002 \001(\010\022\'\n\037finished_collect_rec"
    "harge_prize\030\003 \001(\010\0221\n\013water_prize\030\004 \001(\0132\034"
    ".app.message.WaterPrizeProto\022\022\n\ntree_lev"
    "el\030\005 \001(\005\022\035\n\025remaining_water_count\030\006 \001(\005\022"
    "\023\n\013mature_time\030\007 \001(\003\0221\n\013fruit_prize\030\010 \001("
    "\0132\034.app.message.FruitPrizeProto\022\031\n\021start"
    "_mature_time\030\t \001(\003B)\n\014app.protobufB\027Rech"
    "argeGoldTreeContentH\001", 661);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recharge_gold_tree.proto", &protobuf_RegisterTypes);
  RechargePrizeProto::default_instance_ = new RechargePrizeProto();
  WaterPrizeProto::default_instance_ = new WaterPrizeProto();
  FruitPrizeProto::default_instance_ = new FruitPrizeProto();
  RechargeGoldTreeInfoProto::default_instance_ = new RechargeGoldTreeInfoProto();
  RechargePrizeProto::default_instance_->InitAsDefaultInstance();
  WaterPrizeProto::default_instance_->InitAsDefaultInstance();
  FruitPrizeProto::default_instance_->InitAsDefaultInstance();
  RechargeGoldTreeInfoProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_recharge_5fgold_5ftree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_recharge_5fgold_5ftree_2eproto {
  StaticDescriptorInitializer_recharge_5fgold_5ftree_2eproto() {
    protobuf_AddDesc_recharge_5fgold_5ftree_2eproto();
  }
} static_descriptor_initializer_recharge_5fgold_5ftree_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RechargePrizeProto::kPrizeFieldNumber;
#endif  // !_MSC_VER

RechargePrizeProto::RechargePrizeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargePrizeProto::InitAsDefaultInstance() {
}

RechargePrizeProto::RechargePrizeProto(const RechargePrizeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargePrizeProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargePrizeProto::~RechargePrizeProto() {
  SharedDtor();
}

void RechargePrizeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargePrizeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargePrizeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargePrizeProto_descriptor_;
}

const RechargePrizeProto& RechargePrizeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_5fgold_5ftree_2eproto();
  return *default_instance_;
}

RechargePrizeProto* RechargePrizeProto::default_instance_ = NULL;

RechargePrizeProto* RechargePrizeProto::New() const {
  return new RechargePrizeProto;
}

void RechargePrizeProto::Clear() {
  prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargePrizeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.GoodsWrapperProto prize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prize;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargePrizeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.GoodsWrapperProto prize = 1;
  for (int i = 0; i < this->prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargePrizeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.GoodsWrapperProto prize = 1;
  for (int i = 0; i < this->prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargePrizeProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.GoodsWrapperProto prize = 1;
  total_size += 1 * this->prize_size();
  for (int i = 0; i < this->prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargePrizeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargePrizeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargePrizeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargePrizeProto::MergeFrom(const RechargePrizeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_.MergeFrom(from.prize_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargePrizeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargePrizeProto::CopyFrom(const RechargePrizeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargePrizeProto::IsInitialized() const {

  return true;
}

void RechargePrizeProto::Swap(RechargePrizeProto* other) {
  if (other != this) {
    prize_.Swap(&other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargePrizeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargePrizeProto_descriptor_;
  metadata.reflection = RechargePrizeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaterPrizeProto::kPrizeFieldNumber;
#endif  // !_MSC_VER

WaterPrizeProto::WaterPrizeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaterPrizeProto::InitAsDefaultInstance() {
}

WaterPrizeProto::WaterPrizeProto(const WaterPrizeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaterPrizeProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaterPrizeProto::~WaterPrizeProto() {
  SharedDtor();
}

void WaterPrizeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaterPrizeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaterPrizeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaterPrizeProto_descriptor_;
}

const WaterPrizeProto& WaterPrizeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_5fgold_5ftree_2eproto();
  return *default_instance_;
}

WaterPrizeProto* WaterPrizeProto::default_instance_ = NULL;

WaterPrizeProto* WaterPrizeProto::New() const {
  return new WaterPrizeProto;
}

void WaterPrizeProto::Clear() {
  prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaterPrizeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.GoodsWrapperProto prize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prize;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaterPrizeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.GoodsWrapperProto prize = 1;
  for (int i = 0; i < this->prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaterPrizeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.GoodsWrapperProto prize = 1;
  for (int i = 0; i < this->prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaterPrizeProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.GoodsWrapperProto prize = 1;
  total_size += 1 * this->prize_size();
  for (int i = 0; i < this->prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaterPrizeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaterPrizeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaterPrizeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaterPrizeProto::MergeFrom(const WaterPrizeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_.MergeFrom(from.prize_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaterPrizeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaterPrizeProto::CopyFrom(const WaterPrizeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaterPrizeProto::IsInitialized() const {

  return true;
}

void WaterPrizeProto::Swap(WaterPrizeProto* other) {
  if (other != this) {
    prize_.Swap(&other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaterPrizeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaterPrizeProto_descriptor_;
  metadata.reflection = WaterPrizeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FruitPrizeProto::kPrizeFieldNumber;
#endif  // !_MSC_VER

FruitPrizeProto::FruitPrizeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FruitPrizeProto::InitAsDefaultInstance() {
}

FruitPrizeProto::FruitPrizeProto(const FruitPrizeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FruitPrizeProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FruitPrizeProto::~FruitPrizeProto() {
  SharedDtor();
}

void FruitPrizeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FruitPrizeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FruitPrizeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FruitPrizeProto_descriptor_;
}

const FruitPrizeProto& FruitPrizeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_5fgold_5ftree_2eproto();
  return *default_instance_;
}

FruitPrizeProto* FruitPrizeProto::default_instance_ = NULL;

FruitPrizeProto* FruitPrizeProto::New() const {
  return new FruitPrizeProto;
}

void FruitPrizeProto::Clear() {
  prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FruitPrizeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.GoodsWrapperProto prize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prize;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FruitPrizeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.GoodsWrapperProto prize = 1;
  for (int i = 0; i < this->prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FruitPrizeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.GoodsWrapperProto prize = 1;
  for (int i = 0; i < this->prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FruitPrizeProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.GoodsWrapperProto prize = 1;
  total_size += 1 * this->prize_size();
  for (int i = 0; i < this->prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FruitPrizeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FruitPrizeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FruitPrizeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FruitPrizeProto::MergeFrom(const FruitPrizeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_.MergeFrom(from.prize_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FruitPrizeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FruitPrizeProto::CopyFrom(const FruitPrizeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FruitPrizeProto::IsInitialized() const {

  return true;
}

void FruitPrizeProto::Swap(FruitPrizeProto* other) {
  if (other != this) {
    prize_.Swap(&other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FruitPrizeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FruitPrizeProto_descriptor_;
  metadata.reflection = FruitPrizeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeGoldTreeInfoProto::kRechargePrizeFieldNumber;
const int RechargeGoldTreeInfoProto::kCanCollectRechargePrizeFieldNumber;
const int RechargeGoldTreeInfoProto::kFinishedCollectRechargePrizeFieldNumber;
const int RechargeGoldTreeInfoProto::kWaterPrizeFieldNumber;
const int RechargeGoldTreeInfoProto::kTreeLevelFieldNumber;
const int RechargeGoldTreeInfoProto::kRemainingWaterCountFieldNumber;
const int RechargeGoldTreeInfoProto::kMatureTimeFieldNumber;
const int RechargeGoldTreeInfoProto::kFruitPrizeFieldNumber;
const int RechargeGoldTreeInfoProto::kStartMatureTimeFieldNumber;
#endif  // !_MSC_VER

RechargeGoldTreeInfoProto::RechargeGoldTreeInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeGoldTreeInfoProto::InitAsDefaultInstance() {
  recharge_prize_ = const_cast< ::app::message::RechargePrizeProto*>(&::app::message::RechargePrizeProto::default_instance());
  water_prize_ = const_cast< ::app::message::WaterPrizeProto*>(&::app::message::WaterPrizeProto::default_instance());
  fruit_prize_ = const_cast< ::app::message::FruitPrizeProto*>(&::app::message::FruitPrizeProto::default_instance());
}

RechargeGoldTreeInfoProto::RechargeGoldTreeInfoProto(const RechargeGoldTreeInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeGoldTreeInfoProto::SharedCtor() {
  _cached_size_ = 0;
  recharge_prize_ = NULL;
  can_collect_recharge_prize_ = false;
  finished_collect_recharge_prize_ = false;
  water_prize_ = NULL;
  tree_level_ = 0;
  remaining_water_count_ = 0;
  mature_time_ = GOOGLE_LONGLONG(0);
  fruit_prize_ = NULL;
  start_mature_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeGoldTreeInfoProto::~RechargeGoldTreeInfoProto() {
  SharedDtor();
}

void RechargeGoldTreeInfoProto::SharedDtor() {
  if (this != default_instance_) {
    delete recharge_prize_;
    delete water_prize_;
    delete fruit_prize_;
  }
}

void RechargeGoldTreeInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeGoldTreeInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeGoldTreeInfoProto_descriptor_;
}

const RechargeGoldTreeInfoProto& RechargeGoldTreeInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_5fgold_5ftree_2eproto();
  return *default_instance_;
}

RechargeGoldTreeInfoProto* RechargeGoldTreeInfoProto::default_instance_ = NULL;

RechargeGoldTreeInfoProto* RechargeGoldTreeInfoProto::New() const {
  return new RechargeGoldTreeInfoProto;
}

void RechargeGoldTreeInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recharge_prize()) {
      if (recharge_prize_ != NULL) recharge_prize_->::app::message::RechargePrizeProto::Clear();
    }
    can_collect_recharge_prize_ = false;
    finished_collect_recharge_prize_ = false;
    if (has_water_prize()) {
      if (water_prize_ != NULL) water_prize_->::app::message::WaterPrizeProto::Clear();
    }
    tree_level_ = 0;
    remaining_water_count_ = 0;
    mature_time_ = GOOGLE_LONGLONG(0);
    if (has_fruit_prize()) {
      if (fruit_prize_ != NULL) fruit_prize_->::app::message::FruitPrizeProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    start_mature_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeGoldTreeInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.RechargePrizeProto recharge_prize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_collect_recharge_prize;
        break;
      }

      // optional bool can_collect_recharge_prize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_collect_recharge_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_collect_recharge_prize_)));
          set_has_can_collect_recharge_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished_collect_recharge_prize;
        break;
      }

      // optional bool finished_collect_recharge_prize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_collect_recharge_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_collect_recharge_prize_)));
          set_has_finished_collect_recharge_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_water_prize;
        break;
      }

      // optional .app.message.WaterPrizeProto water_prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_water_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_water_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tree_level;
        break;
      }

      // optional int32 tree_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tree_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tree_level_)));
          set_has_tree_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remaining_water_count;
        break;
      }

      // optional int32 remaining_water_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaining_water_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_water_count_)));
          set_has_remaining_water_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mature_time;
        break;
      }

      // optional int64 mature_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mature_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mature_time_)));
          set_has_mature_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fruit_prize;
        break;
      }

      // optional .app.message.FruitPrizeProto fruit_prize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fruit_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fruit_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_start_mature_time;
        break;
      }

      // optional int64 start_mature_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_mature_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_mature_time_)));
          set_has_start_mature_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeGoldTreeInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.RechargePrizeProto recharge_prize = 1;
  if (has_recharge_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recharge_prize(), output);
  }

  // optional bool can_collect_recharge_prize = 2;
  if (has_can_collect_recharge_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_collect_recharge_prize(), output);
  }

  // optional bool finished_collect_recharge_prize = 3;
  if (has_finished_collect_recharge_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished_collect_recharge_prize(), output);
  }

  // optional .app.message.WaterPrizeProto water_prize = 4;
  if (has_water_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->water_prize(), output);
  }

  // optional int32 tree_level = 5;
  if (has_tree_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tree_level(), output);
  }

  // optional int32 remaining_water_count = 6;
  if (has_remaining_water_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remaining_water_count(), output);
  }

  // optional int64 mature_time = 7;
  if (has_mature_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->mature_time(), output);
  }

  // optional .app.message.FruitPrizeProto fruit_prize = 8;
  if (has_fruit_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fruit_prize(), output);
  }

  // optional int64 start_mature_time = 9;
  if (has_start_mature_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->start_mature_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeGoldTreeInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.RechargePrizeProto recharge_prize = 1;
  if (has_recharge_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recharge_prize(), target);
  }

  // optional bool can_collect_recharge_prize = 2;
  if (has_can_collect_recharge_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_collect_recharge_prize(), target);
  }

  // optional bool finished_collect_recharge_prize = 3;
  if (has_finished_collect_recharge_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished_collect_recharge_prize(), target);
  }

  // optional .app.message.WaterPrizeProto water_prize = 4;
  if (has_water_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->water_prize(), target);
  }

  // optional int32 tree_level = 5;
  if (has_tree_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tree_level(), target);
  }

  // optional int32 remaining_water_count = 6;
  if (has_remaining_water_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remaining_water_count(), target);
  }

  // optional int64 mature_time = 7;
  if (has_mature_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->mature_time(), target);
  }

  // optional .app.message.FruitPrizeProto fruit_prize = 8;
  if (has_fruit_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fruit_prize(), target);
  }

  // optional int64 start_mature_time = 9;
  if (has_start_mature_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->start_mature_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeGoldTreeInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.RechargePrizeProto recharge_prize = 1;
    if (has_recharge_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge_prize());
    }

    // optional bool can_collect_recharge_prize = 2;
    if (has_can_collect_recharge_prize()) {
      total_size += 1 + 1;
    }

    // optional bool finished_collect_recharge_prize = 3;
    if (has_finished_collect_recharge_prize()) {
      total_size += 1 + 1;
    }

    // optional .app.message.WaterPrizeProto water_prize = 4;
    if (has_water_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->water_prize());
    }

    // optional int32 tree_level = 5;
    if (has_tree_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tree_level());
    }

    // optional int32 remaining_water_count = 6;
    if (has_remaining_water_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaining_water_count());
    }

    // optional int64 mature_time = 7;
    if (has_mature_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mature_time());
    }

    // optional .app.message.FruitPrizeProto fruit_prize = 8;
    if (has_fruit_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fruit_prize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 start_mature_time = 9;
    if (has_start_mature_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_mature_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeGoldTreeInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeGoldTreeInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeGoldTreeInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeGoldTreeInfoProto::MergeFrom(const RechargeGoldTreeInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recharge_prize()) {
      mutable_recharge_prize()->::app::message::RechargePrizeProto::MergeFrom(from.recharge_prize());
    }
    if (from.has_can_collect_recharge_prize()) {
      set_can_collect_recharge_prize(from.can_collect_recharge_prize());
    }
    if (from.has_finished_collect_recharge_prize()) {
      set_finished_collect_recharge_prize(from.finished_collect_recharge_prize());
    }
    if (from.has_water_prize()) {
      mutable_water_prize()->::app::message::WaterPrizeProto::MergeFrom(from.water_prize());
    }
    if (from.has_tree_level()) {
      set_tree_level(from.tree_level());
    }
    if (from.has_remaining_water_count()) {
      set_remaining_water_count(from.remaining_water_count());
    }
    if (from.has_mature_time()) {
      set_mature_time(from.mature_time());
    }
    if (from.has_fruit_prize()) {
      mutable_fruit_prize()->::app::message::FruitPrizeProto::MergeFrom(from.fruit_prize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_mature_time()) {
      set_start_mature_time(from.start_mature_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeGoldTreeInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeGoldTreeInfoProto::CopyFrom(const RechargeGoldTreeInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeGoldTreeInfoProto::IsInitialized() const {

  return true;
}

void RechargeGoldTreeInfoProto::Swap(RechargeGoldTreeInfoProto* other) {
  if (other != this) {
    std::swap(recharge_prize_, other->recharge_prize_);
    std::swap(can_collect_recharge_prize_, other->can_collect_recharge_prize_);
    std::swap(finished_collect_recharge_prize_, other->finished_collect_recharge_prize_);
    std::swap(water_prize_, other->water_prize_);
    std::swap(tree_level_, other->tree_level_);
    std::swap(remaining_water_count_, other->remaining_water_count_);
    std::swap(mature_time_, other->mature_time_);
    std::swap(fruit_prize_, other->fruit_prize_);
    std::swap(start_mature_time_, other->start_mature_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeGoldTreeInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeGoldTreeInfoProto_descriptor_;
  metadata.reflection = RechargeGoldTreeInfoProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
