// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: credits_draw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "credits_draw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* CreditsDrawInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreditsDrawInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreditsDrawConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreditsDrawConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_credits_5fdraw_2eproto() {
  protobuf_AddDesc_credits_5fdraw_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "credits_draw.proto");
  GOOGLE_CHECK(file != NULL);
  CreditsDrawInfoProto_descriptor_ = file->message_type(0);
  static const int CreditsDrawInfoProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawInfoProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawInfoProto, goods_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawInfoProto, is_special_effect_),
  };
  CreditsDrawInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreditsDrawInfoProto_descriptor_,
      CreditsDrawInfoProto::default_instance_,
      CreditsDrawInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreditsDrawInfoProto));
  CreditsDrawConfig_descriptor_ = file->message_type(1);
  static const int CreditsDrawConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, credits_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, draw_storage_capcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, log_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, draw_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, exchange_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, end_time_),
  };
  CreditsDrawConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreditsDrawConfig_descriptor_,
      CreditsDrawConfig::default_instance_,
      CreditsDrawConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditsDrawConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreditsDrawConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_credits_5fdraw_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreditsDrawInfoProto_descriptor_, &CreditsDrawInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreditsDrawConfig_descriptor_, &CreditsDrawConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_credits_5fdraw_2eproto() {
  delete CreditsDrawInfoProto::default_instance_;
  delete CreditsDrawInfoProto_reflection_;
  delete CreditsDrawConfig::default_instance_;
  delete CreditsDrawConfig_reflection_;
}

void protobuf_AddDesc_credits_5fdraw_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::app::message::protobuf_AddDesc_config_2eproto();
  ::app::message::protobuf_AddDesc_promotion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022credits_draw.proto\022\013app.message\032\013goods"
    ".proto\032\014config.proto\032\017promotion.proto\"q\n"
    "\024CreditsDrawInfoProto\022\n\n\002id\030\001 \001(\005\0222\n\ngoo"
    "ds_data\030\002 \001(\0132\036.app.message.GoodsWrapper"
    "Proto\022\031\n\021is_special_effect\030\003 \001(\010\"\366\001\n\021Cre"
    "ditsDrawConfig\022\024\n\014credits_cost\030\001 \001(\005\022\034\n\024"
    "draw_storage_capcity\030\002 \001(\005\022\025\n\rlog_max_co"
    "unt\030\003 \001(\005\0225\n\ndraw_infos\030\004 \003(\0132!.app.mess"
    "age.CreditsDrawInfoProto\0229\n\016exchange_inf"
    "os\030\005 \003(\0132!.app.message.CreditsShopDataPr"
    "oto\022\022\n\nstart_time\030\006 \001(\003\022\020\n\010end_time\030\007 \001("
    "\003B$\n\014app.protobufB\022CreditsDrawContentH\001", 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "credits_draw.proto", &protobuf_RegisterTypes);
  CreditsDrawInfoProto::default_instance_ = new CreditsDrawInfoProto();
  CreditsDrawConfig::default_instance_ = new CreditsDrawConfig();
  CreditsDrawInfoProto::default_instance_->InitAsDefaultInstance();
  CreditsDrawConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_credits_5fdraw_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_credits_5fdraw_2eproto {
  StaticDescriptorInitializer_credits_5fdraw_2eproto() {
    protobuf_AddDesc_credits_5fdraw_2eproto();
  }
} static_descriptor_initializer_credits_5fdraw_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreditsDrawInfoProto::kIdFieldNumber;
const int CreditsDrawInfoProto::kGoodsDataFieldNumber;
const int CreditsDrawInfoProto::kIsSpecialEffectFieldNumber;
#endif  // !_MSC_VER

CreditsDrawInfoProto::CreditsDrawInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreditsDrawInfoProto::InitAsDefaultInstance() {
  goods_data_ = const_cast< ::app::message::GoodsWrapperProto*>(&::app::message::GoodsWrapperProto::default_instance());
}

CreditsDrawInfoProto::CreditsDrawInfoProto(const CreditsDrawInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreditsDrawInfoProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  goods_data_ = NULL;
  is_special_effect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreditsDrawInfoProto::~CreditsDrawInfoProto() {
  SharedDtor();
}

void CreditsDrawInfoProto::SharedDtor() {
  if (this != default_instance_) {
    delete goods_data_;
  }
}

void CreditsDrawInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreditsDrawInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreditsDrawInfoProto_descriptor_;
}

const CreditsDrawInfoProto& CreditsDrawInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_credits_5fdraw_2eproto();
  return *default_instance_;
}

CreditsDrawInfoProto* CreditsDrawInfoProto::default_instance_ = NULL;

CreditsDrawInfoProto* CreditsDrawInfoProto::New() const {
  return new CreditsDrawInfoProto;
}

void CreditsDrawInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_goods_data()) {
      if (goods_data_ != NULL) goods_data_->::app::message::GoodsWrapperProto::Clear();
    }
    is_special_effect_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreditsDrawInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods_data;
        break;
      }

      // optional .app.message.GoodsWrapperProto goods_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goods_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_special_effect;
        break;
      }

      // optional bool is_special_effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_special_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_special_effect_)));
          set_has_is_special_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreditsDrawInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .app.message.GoodsWrapperProto goods_data = 2;
  if (has_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods_data(), output);
  }

  // optional bool is_special_effect = 3;
  if (has_is_special_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_special_effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreditsDrawInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .app.message.GoodsWrapperProto goods_data = 2;
  if (has_goods_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods_data(), target);
  }

  // optional bool is_special_effect = 3;
  if (has_is_special_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_special_effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreditsDrawInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .app.message.GoodsWrapperProto goods_data = 2;
    if (has_goods_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goods_data());
    }

    // optional bool is_special_effect = 3;
    if (has_is_special_effect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreditsDrawInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreditsDrawInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreditsDrawInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreditsDrawInfoProto::MergeFrom(const CreditsDrawInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_goods_data()) {
      mutable_goods_data()->::app::message::GoodsWrapperProto::MergeFrom(from.goods_data());
    }
    if (from.has_is_special_effect()) {
      set_is_special_effect(from.is_special_effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreditsDrawInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreditsDrawInfoProto::CopyFrom(const CreditsDrawInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditsDrawInfoProto::IsInitialized() const {

  return true;
}

void CreditsDrawInfoProto::Swap(CreditsDrawInfoProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(goods_data_, other->goods_data_);
    std::swap(is_special_effect_, other->is_special_effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreditsDrawInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreditsDrawInfoProto_descriptor_;
  metadata.reflection = CreditsDrawInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreditsDrawConfig::kCreditsCostFieldNumber;
const int CreditsDrawConfig::kDrawStorageCapcityFieldNumber;
const int CreditsDrawConfig::kLogMaxCountFieldNumber;
const int CreditsDrawConfig::kDrawInfosFieldNumber;
const int CreditsDrawConfig::kExchangeInfosFieldNumber;
const int CreditsDrawConfig::kStartTimeFieldNumber;
const int CreditsDrawConfig::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CreditsDrawConfig::CreditsDrawConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreditsDrawConfig::InitAsDefaultInstance() {
}

CreditsDrawConfig::CreditsDrawConfig(const CreditsDrawConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreditsDrawConfig::SharedCtor() {
  _cached_size_ = 0;
  credits_cost_ = 0;
  draw_storage_capcity_ = 0;
  log_max_count_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreditsDrawConfig::~CreditsDrawConfig() {
  SharedDtor();
}

void CreditsDrawConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreditsDrawConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreditsDrawConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreditsDrawConfig_descriptor_;
}

const CreditsDrawConfig& CreditsDrawConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_credits_5fdraw_2eproto();
  return *default_instance_;
}

CreditsDrawConfig* CreditsDrawConfig::default_instance_ = NULL;

CreditsDrawConfig* CreditsDrawConfig::New() const {
  return new CreditsDrawConfig;
}

void CreditsDrawConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    credits_cost_ = 0;
    draw_storage_capcity_ = 0;
    log_max_count_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  draw_infos_.Clear();
  exchange_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreditsDrawConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 credits_cost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_cost_)));
          set_has_credits_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_draw_storage_capcity;
        break;
      }

      // optional int32 draw_storage_capcity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_storage_capcity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_storage_capcity_)));
          set_has_draw_storage_capcity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_log_max_count;
        break;
      }

      // optional int32 log_max_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_max_count_)));
          set_has_log_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_draw_infos;
        break;
      }

      // repeated .app.message.CreditsDrawInfoProto draw_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draw_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_draw_infos;
        if (input->ExpectTag(42)) goto parse_exchange_infos;
        break;
      }

      // repeated .app.message.CreditsShopDataProto exchange_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchange_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exchange_infos;
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreditsDrawConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 credits_cost = 1;
  if (has_credits_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->credits_cost(), output);
  }

  // optional int32 draw_storage_capcity = 2;
  if (has_draw_storage_capcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->draw_storage_capcity(), output);
  }

  // optional int32 log_max_count = 3;
  if (has_log_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->log_max_count(), output);
  }

  // repeated .app.message.CreditsDrawInfoProto draw_infos = 4;
  for (int i = 0; i < this->draw_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->draw_infos(i), output);
  }

  // repeated .app.message.CreditsShopDataProto exchange_infos = 5;
  for (int i = 0; i < this->exchange_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exchange_infos(i), output);
  }

  // optional int64 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->start_time(), output);
  }

  // optional int64 end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreditsDrawConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 credits_cost = 1;
  if (has_credits_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->credits_cost(), target);
  }

  // optional int32 draw_storage_capcity = 2;
  if (has_draw_storage_capcity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->draw_storage_capcity(), target);
  }

  // optional int32 log_max_count = 3;
  if (has_log_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->log_max_count(), target);
  }

  // repeated .app.message.CreditsDrawInfoProto draw_infos = 4;
  for (int i = 0; i < this->draw_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->draw_infos(i), target);
  }

  // repeated .app.message.CreditsShopDataProto exchange_infos = 5;
  for (int i = 0; i < this->exchange_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->exchange_infos(i), target);
  }

  // optional int64 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->start_time(), target);
  }

  // optional int64 end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreditsDrawConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 credits_cost = 1;
    if (has_credits_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits_cost());
    }

    // optional int32 draw_storage_capcity = 2;
    if (has_draw_storage_capcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_storage_capcity());
    }

    // optional int32 log_max_count = 3;
    if (has_log_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_max_count());
    }

    // optional int64 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  // repeated .app.message.CreditsDrawInfoProto draw_infos = 4;
  total_size += 1 * this->draw_infos_size();
  for (int i = 0; i < this->draw_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draw_infos(i));
  }

  // repeated .app.message.CreditsShopDataProto exchange_infos = 5;
  total_size += 1 * this->exchange_infos_size();
  for (int i = 0; i < this->exchange_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchange_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreditsDrawConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreditsDrawConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreditsDrawConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreditsDrawConfig::MergeFrom(const CreditsDrawConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  draw_infos_.MergeFrom(from.draw_infos_);
  exchange_infos_.MergeFrom(from.exchange_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credits_cost()) {
      set_credits_cost(from.credits_cost());
    }
    if (from.has_draw_storage_capcity()) {
      set_draw_storage_capcity(from.draw_storage_capcity());
    }
    if (from.has_log_max_count()) {
      set_log_max_count(from.log_max_count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreditsDrawConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreditsDrawConfig::CopyFrom(const CreditsDrawConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditsDrawConfig::IsInitialized() const {

  return true;
}

void CreditsDrawConfig::Swap(CreditsDrawConfig* other) {
  if (other != this) {
    std::swap(credits_cost_, other->credits_cost_);
    std::swap(draw_storage_capcity_, other->draw_storage_capcity_);
    std::swap(log_max_count_, other->log_max_count_);
    draw_infos_.Swap(&other->draw_infos_);
    exchange_infos_.Swap(&other->exchange_infos_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreditsDrawConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreditsDrawConfig_descriptor_;
  metadata.reflection = CreditsDrawConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
