// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DungeonBatchInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonBatchInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DamageRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DamageRecordProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupDungeonFinishStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupDungeonFinishStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupDungeonCollectablePrizeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupDungeonCollectablePrizeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaResultProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaResultProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaEachHeroResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaEachHeroResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DotaInitInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DotaInitInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DotaEachHeroInitProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DotaEachHeroInitProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DotaFinalInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DotaFinalInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DotaEachHeroFinalProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DotaEachHeroFinalProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HtzWorldRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HtzWorldRecordProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HtzTimeRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HtzTimeRecordProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HtzDestroyRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HtzDestroyRecordProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WuLinProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WuLinProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WuLinGroupProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WuLinGroupProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WuLinMatchProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WuLinMatchProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WuLinHeroProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WuLinHeroProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WuLinMatchResultProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WuLinMatchResultProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeleeInitProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeleeInitProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeleeEachHeroInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeleeEachHeroInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeleeFinalInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeleeFinalInfoProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WuLinMatchType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dungeon_2eproto() {
  protobuf_AddDesc_dungeon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dungeon.proto");
  GOOGLE_CHECK(file != NULL);
  DungeonBatchInfoProto_descriptor_ = file->message_type(0);
  static const int DungeonBatchInfoProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBatchInfoProto, batch_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBatchInfoProto, current_monster_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBatchInfoProto, next_monster_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBatchInfoProto, current_batch_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBatchInfoProto, expire_duration_),
  };
  DungeonBatchInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonBatchInfoProto_descriptor_,
      DungeonBatchInfoProto::default_instance_,
      DungeonBatchInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBatchInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBatchInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonBatchInfoProto));
  DamageRecordProto_descriptor_ = file->message_type(1);
  static const int DamageRecordProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageRecordProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageRecordProto, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageRecordProto, damage_divided_by_1000_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageRecordProto, is_offline_),
  };
  DamageRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DamageRecordProto_descriptor_,
      DamageRecordProto::default_instance_,
      DamageRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DamageRecordProto));
  GroupDungeonFinishStatProto_descriptor_ = file->message_type(2);
  static const int GroupDungeonFinishStatProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, dead_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, monster_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, score_s_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, vip_prize_),
  };
  GroupDungeonFinishStatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupDungeonFinishStatProto_descriptor_,
      GroupDungeonFinishStatProto::default_instance_,
      GroupDungeonFinishStatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonFinishStatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupDungeonFinishStatProto));
  GroupDungeonCollectablePrizeProto_descriptor_ = file->message_type(3);
  static const int GroupDungeonCollectablePrizeProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonCollectablePrizeProto, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonCollectablePrizeProto, no_score_s_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonCollectablePrizeProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonCollectablePrizeProto, randomed_s_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonCollectablePrizeProto, randomed_vip_prize_),
  };
  GroupDungeonCollectablePrizeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupDungeonCollectablePrizeProto_descriptor_,
      GroupDungeonCollectablePrizeProto::default_instance_,
      GroupDungeonCollectablePrizeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonCollectablePrizeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDungeonCollectablePrizeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupDungeonCollectablePrizeProto));
  ArenaResultProto_descriptor_ = file->message_type(4);
  static const int ArenaResultProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, win_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, lose_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, is_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, win_fighting_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, lose_fighting_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, win_fighting_team_pair_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, win_fighting_team_changed_pair_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, lose_fighting_team_pair_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, lose_fighting_team_changed_pair_point_),
  };
  ArenaResultProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaResultProto_descriptor_,
      ArenaResultProto::default_instance_,
      ArenaResultProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaResultProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaResultProto));
  ArenaEachHeroResult_descriptor_ = file->message_type(5);
  static const int ArenaEachHeroResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, old_pair_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, pair_point_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, win_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, race_id_),
  };
  ArenaEachHeroResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaEachHeroResult_descriptor_,
      ArenaEachHeroResult::default_instance_,
      ArenaEachHeroResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaEachHeroResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaEachHeroResult));
  DotaInitInfoProto_descriptor_ = file->message_type(6);
  static const int DotaInitInfoProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, party_1_tower_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, party_2_tower_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, party_1_home_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, party_2_home_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, end_time_),
  };
  DotaInitInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DotaInitInfoProto_descriptor_,
      DotaInitInfoProto::default_instance_,
      DotaInitInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaInitInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DotaInitInfoProto));
  DotaEachHeroInitProto_descriptor_ = file->message_type(7);
  static const int DotaEachHeroInitProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroInitProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroInitProto, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroInitProto, party_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroInitProto, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroInitProto, point_change_time_),
  };
  DotaEachHeroInitProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DotaEachHeroInitProto_descriptor_,
      DotaEachHeroInitProto::default_instance_,
      DotaEachHeroInitProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroInitProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroInitProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DotaEachHeroInitProto));
  DotaFinalInfoProto_descriptor_ = file->message_type(8);
  static const int DotaFinalInfoProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaFinalInfoProto, party_1_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaFinalInfoProto, party_2_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaFinalInfoProto, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaFinalInfoProto, prize_),
  };
  DotaFinalInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DotaFinalInfoProto_descriptor_,
      DotaFinalInfoProto::default_instance_,
      DotaFinalInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaFinalInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaFinalInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DotaFinalInfoProto));
  DotaEachHeroFinalProto_descriptor_ = file->message_type(9);
  static const int DotaEachHeroFinalProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, dead_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, level_),
  };
  DotaEachHeroFinalProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DotaEachHeroFinalProto_descriptor_,
      DotaEachHeroFinalProto::default_instance_,
      DotaEachHeroFinalProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotaEachHeroFinalProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DotaEachHeroFinalProto));
  HtzWorldRecordProto_descriptor_ = file->message_type(10);
  static const int HtzWorldRecordProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzWorldRecordProto, time_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzWorldRecordProto, destroy_record_),
  };
  HtzWorldRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HtzWorldRecordProto_descriptor_,
      HtzWorldRecordProto::default_instance_,
      HtzWorldRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzWorldRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzWorldRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HtzWorldRecordProto));
  HtzTimeRecordProto_descriptor_ = file->message_type(11);
  static const int HtzTimeRecordProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzTimeRecordProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzTimeRecordProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzTimeRecordProto, time_),
  };
  HtzTimeRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HtzTimeRecordProto_descriptor_,
      HtzTimeRecordProto::default_instance_,
      HtzTimeRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzTimeRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzTimeRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HtzTimeRecordProto));
  HtzDestroyRecordProto_descriptor_ = file->message_type(12);
  static const int HtzDestroyRecordProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzDestroyRecordProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzDestroyRecordProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzDestroyRecordProto, max_destory_),
  };
  HtzDestroyRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HtzDestroyRecordProto_descriptor_,
      HtzDestroyRecordProto::default_instance_,
      HtzDestroyRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzDestroyRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtzDestroyRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HtzDestroyRecordProto));
  WuLinProto_descriptor_ = file->message_type(13);
  static const int WuLinProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, group_match_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, match_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, match_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, match_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, match_2_),
  };
  WuLinProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WuLinProto_descriptor_,
      WuLinProto::default_instance_,
      WuLinProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WuLinProto));
  WuLinGroupProto_descriptor_ = file->message_type(14);
  static const int WuLinGroupProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinGroupProto, hero_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinGroupProto, match_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinGroupProto, hero_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinGroupProto, match_b_),
  };
  WuLinGroupProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WuLinGroupProto_descriptor_,
      WuLinGroupProto::default_instance_,
      WuLinGroupProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinGroupProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinGroupProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WuLinGroupProto));
  WuLinMatchProto_descriptor_ = file->message_type(15);
  static const int WuLinMatchProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, hero_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, hero_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, combat_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, match_type_),
  };
  WuLinMatchProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WuLinMatchProto_descriptor_,
      WuLinMatchProto::default_instance_,
      WuLinMatchProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WuLinMatchProto));
  WuLinHeroProto_descriptor_ = file->message_type(16);
  static const int WuLinHeroProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinHeroProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinHeroProto, hero_race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinHeroProto, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinHeroProto, pair_point_),
  };
  WuLinHeroProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WuLinHeroProto_descriptor_,
      WuLinHeroProto::default_instance_,
      WuLinHeroProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinHeroProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinHeroProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WuLinHeroProto));
  WuLinMatchResultProto_descriptor_ = file->message_type(17);
  static const int WuLinMatchResultProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, win_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, win_hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, win_hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, lose_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, lose_hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, lose_hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, match_type_),
  };
  WuLinMatchResultProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WuLinMatchResultProto_descriptor_,
      WuLinMatchResultProto::default_instance_,
      WuLinMatchResultProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuLinMatchResultProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WuLinMatchResultProto));
  MeleeInitProto_descriptor_ = file->message_type(18);
  static const int MeleeInitProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeInitProto, heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeInitProto, battle_start_time_),
  };
  MeleeInitProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeleeInitProto_descriptor_,
      MeleeInitProto::default_instance_,
      MeleeInitProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeInitProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeInitProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeleeInitProto));
  MeleeEachHeroInfoProto_descriptor_ = file->message_type(19);
  static const int MeleeEachHeroInfoProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeEachHeroInfoProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeEachHeroInfoProto, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeEachHeroInfoProto, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeEachHeroInfoProto, assist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeEachHeroInfoProto, kill_change_time_),
  };
  MeleeEachHeroInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeleeEachHeroInfoProto_descriptor_,
      MeleeEachHeroInfoProto::default_instance_,
      MeleeEachHeroInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeEachHeroInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeEachHeroInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeleeEachHeroInfoProto));
  MeleeFinalInfoProto_descriptor_ = file->message_type(20);
  static const int MeleeFinalInfoProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeFinalInfoProto, heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeFinalInfoProto, win_hero_id_),
  };
  MeleeFinalInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeleeFinalInfoProto_descriptor_,
      MeleeFinalInfoProto::default_instance_,
      MeleeFinalInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeFinalInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeleeFinalInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeleeFinalInfoProto));
  WuLinMatchType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dungeon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonBatchInfoProto_descriptor_, &DungeonBatchInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DamageRecordProto_descriptor_, &DamageRecordProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupDungeonFinishStatProto_descriptor_, &GroupDungeonFinishStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupDungeonCollectablePrizeProto_descriptor_, &GroupDungeonCollectablePrizeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaResultProto_descriptor_, &ArenaResultProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaEachHeroResult_descriptor_, &ArenaEachHeroResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DotaInitInfoProto_descriptor_, &DotaInitInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DotaEachHeroInitProto_descriptor_, &DotaEachHeroInitProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DotaFinalInfoProto_descriptor_, &DotaFinalInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DotaEachHeroFinalProto_descriptor_, &DotaEachHeroFinalProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HtzWorldRecordProto_descriptor_, &HtzWorldRecordProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HtzTimeRecordProto_descriptor_, &HtzTimeRecordProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HtzDestroyRecordProto_descriptor_, &HtzDestroyRecordProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WuLinProto_descriptor_, &WuLinProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WuLinGroupProto_descriptor_, &WuLinGroupProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WuLinMatchProto_descriptor_, &WuLinMatchProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WuLinHeroProto_descriptor_, &WuLinHeroProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WuLinMatchResultProto_descriptor_, &WuLinMatchResultProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeleeInitProto_descriptor_, &MeleeInitProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeleeEachHeroInfoProto_descriptor_, &MeleeEachHeroInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeleeFinalInfoProto_descriptor_, &MeleeFinalInfoProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dungeon_2eproto() {
  delete DungeonBatchInfoProto::default_instance_;
  delete DungeonBatchInfoProto_reflection_;
  delete DamageRecordProto::default_instance_;
  delete DamageRecordProto_reflection_;
  delete GroupDungeonFinishStatProto::default_instance_;
  delete GroupDungeonFinishStatProto_reflection_;
  delete GroupDungeonCollectablePrizeProto::default_instance_;
  delete GroupDungeonCollectablePrizeProto_reflection_;
  delete ArenaResultProto::default_instance_;
  delete ArenaResultProto_reflection_;
  delete ArenaEachHeroResult::default_instance_;
  delete ArenaEachHeroResult_reflection_;
  delete DotaInitInfoProto::default_instance_;
  delete DotaInitInfoProto_reflection_;
  delete DotaEachHeroInitProto::default_instance_;
  delete DotaEachHeroInitProto_reflection_;
  delete DotaFinalInfoProto::default_instance_;
  delete DotaFinalInfoProto_reflection_;
  delete DotaEachHeroFinalProto::default_instance_;
  delete DotaEachHeroFinalProto_reflection_;
  delete HtzWorldRecordProto::default_instance_;
  delete HtzWorldRecordProto_reflection_;
  delete HtzTimeRecordProto::default_instance_;
  delete HtzTimeRecordProto_reflection_;
  delete HtzDestroyRecordProto::default_instance_;
  delete HtzDestroyRecordProto_reflection_;
  delete WuLinProto::default_instance_;
  delete WuLinProto_reflection_;
  delete WuLinGroupProto::default_instance_;
  delete WuLinGroupProto_reflection_;
  delete WuLinMatchProto::default_instance_;
  delete WuLinMatchProto_reflection_;
  delete WuLinHeroProto::default_instance_;
  delete WuLinHeroProto_reflection_;
  delete WuLinMatchResultProto::default_instance_;
  delete WuLinMatchResultProto_reflection_;
  delete MeleeInitProto::default_instance_;
  delete MeleeInitProto_reflection_;
  delete MeleeEachHeroInfoProto::default_instance_;
  delete MeleeEachHeroInfoProto_reflection_;
  delete MeleeFinalInfoProto::default_instance_;
  delete MeleeFinalInfoProto_reflection_;
}

void protobuf_AddDesc_dungeon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::app::message::protobuf_AddDesc_prize_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdungeon.proto\022\013app.message\032\013goods.prot"
    "o\032\013prize.proto\"\273\001\n\025DungeonBatchInfoProto"
    "\022\024\n\014batch_number\030\001 \001(\005\022\037\n\027current_monste"
    "r_type_id\030\002 \001(\005\022\034\n\024next_monster_type_id\030"
    "\003 \001(\005\0224\n\023current_batch_prize\030\004 \001(\0132\027.app"
    ".message.PrizeProto\022\027\n\017expire_duration\030\005"
    " \001(\003\"k\n\021DamageRecordProto\022\017\n\007hero_id\030\001 \003"
    "(\003\022\021\n\thero_name\030\002 \003(\014\022\036\n\026damage_divided_"
    "by_1000\030\003 \003(\003\022\022\n\nis_offline\030\004 \003(\010\"\323\001\n\033Gr"
    "oupDungeonFinishStatProto\022\022\n\ntotal_time\030"
    "\001 \001(\005\022\022\n\ndead_count\030\002 \001(\005\022\023\n\013monster_exp"
    "\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\0225\n\rscore_s_prize\030\005"
    " \003(\0132\036.app.message.GoodsWrapperProto\0221\n\t"
    "vip_prize\030\006 \003(\0132\036.app.message.GoodsWrapp"
    "erProto\"\234\001\n!GroupDungeonCollectablePrize"
    "Proto\022\022\n\ndungeon_id\030\001 \001(\005\022\030\n\020no_score_s_"
    "prize\030\002 \001(\010\022\023\n\013expire_time\030\004 \001(\003\022\030\n\020rand"
    "omed_s_prize\030\005 \001(\014\022\032\n\022randomed_vip_prize"
    "\030\006 \001(\014\"\367\002\n\020ArenaResultProto\0222\n\010win_hero\030"
    "\001 \003(\0132 .app.message.ArenaEachHeroResult\022"
    "3\n\tlose_hero\030\002 \003(\0132 .app.message.ArenaEa"
    "chHeroResult\022\017\n\007is_draw\030\003 \001(\010\022\036\n\026win_fig"
    "hting_team_name\030\004 \001(\014\022\037\n\027lose_fighting_t"
    "eam_name\030\005 \001(\014\022$\n\034win_fighting_team_pair"
    "_point\030\006 \001(\005\022,\n$win_fighting_team_change"
    "d_pair_point\030\007 \001(\005\022%\n\035lose_fighting_team"
    "_pair_point\030\010 \001(\005\022-\n%lose_fighting_team_"
    "changed_pair_point\030\t \001(\005\"\221\001\n\023ArenaEachHe"
    "roResult\022\017\n\007hero_id\030\001 \001(\003\022\021\n\thero_name\030\002"
    " \001(\t\022\026\n\016old_pair_point\030\003 \001(\005\022\031\n\021pair_poi"
    "nt_change\030\004 \001(\021\022\022\n\nwin_damage\030\005 \001(\005\022\017\n\007r"
    "ace_id\030\006 \001(\005\"\277\001\n\021DotaInitInfoProto\0222\n\006he"
    "roes\030\001 \003(\0132\".app.message.DotaEachHeroIni"
    "tProto\022\030\n\020party_1_tower_id\030\002 \003(\003\022\030\n\020part"
    "y_2_tower_id\030\003 \003(\003\022\027\n\017party_1_home_id\030\004 "
    "\001(\003\022\027\n\017party_2_home_id\030\005 \001(\003\022\020\n\010end_time"
    "\030\006 \001(\003\"t\n\025DotaEachHeroInitProto\022\017\n\007hero_"
    "id\030\001 \001(\003\022\021\n\thero_name\030\002 \001(\t\022\r\n\005party\030\003 \001"
    "(\005\022\r\n\005point\030\004 \001(\005\022\031\n\021point_change_time\030\005"
    " \001(\003\"\306\001\n\022DotaFinalInfoProto\022;\n\016party_1_h"
    "eroes\030\001 \003(\0132#.app.message.DotaEachHeroFi"
    "nalProto\022;\n\016party_2_heroes\030\002 \003(\0132#.app.m"
    "essage.DotaEachHeroFinalProto\022\016\n\006result\030"
    "\003 \001(\005\022&\n\005prize\030\004 \001(\0132\027.app.message.Prize"
    "Proto\"\202\001\n\026DotaEachHeroFinalProto\022\017\n\007hero"
    "_id\030\001 \001(\003\022\021\n\thero_name\030\002 \001(\t\022\r\n\005point\030\003 "
    "\001(\005\022\022\n\nkill_count\030\004 \001(\005\022\022\n\ndead_count\030\005 "
    "\001(\005\022\r\n\005level\030\006 \001(\005\"\207\001\n\023HtzWorldRecordPro"
    "to\0224\n\013time_record\030\001 \001(\0132\037.app.message.Ht"
    "zTimeRecordProto\022:\n\016destroy_record\030\002 \001(\013"
    "2\".app.message.HtzDestroyRecordProto\"<\n\022"
    "HtzTimeRecordProto\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002"
    " \001(\t\022\014\n\004time\030\003 \001(\003\"F\n\025HtzDestroyRecordPr"
    "oto\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\023\n\013max_des"
    "tory\030\003 \001(\005\"\220\002\n\nWuLinProto\022\030\n\020group_match"
    "_time\030\001 \001(\003\022+\n\005group\030\002 \003(\0132\034.app.message"
    ".WuLinGroupProto\022.\n\010match_16\030\003 \003(\0132\034.app"
    ".message.WuLinMatchProto\022-\n\007match_8\030\004 \003("
    "\0132\034.app.message.WuLinMatchProto\022-\n\007match"
    "_4\030\005 \003(\0132\034.app.message.WuLinMatchProto\022-"
    "\n\007match_2\030\006 \003(\0132\034.app.message.WuLinMatch"
    "Proto\"\311\001\n\017WuLinGroupProto\022+\n\006hero_a\030\001 \003("
    "\0132\033.app.message.WuLinHeroProto\022-\n\007match_"
    "a\030\002 \003(\0132\034.app.message.WuLinMatchProto\022+\n"
    "\006hero_b\030\003 \003(\0132\033.app.message.WuLinHeroPro"
    "to\022-\n\007match_b\030\004 \003(\0132\034.app.message.WuLinM"
    "atchProto\"\214\002\n\017WuLinMatchProto\022\022\n\nstart_t"
    "ime\030\001 \001(\003\022\020\n\010end_time\030\n \001(\003\022\016\n\006result\030\010 "
    "\001(\005\022\020\n\010match_id\030\t \001(\005\022+\n\006hero_1\030\002 \001(\0132\033."
    "app.message.WuLinHeroProto\022+\n\006hero_2\030\003 \001"
    "(\0132\033.app.message.WuLinHeroProto\022\014\n\004uuid\030"
    "\004 \001(\005\022\030\n\020combat_server_id\030\005 \001(\003\022/\n\nmatch"
    "_type\030\006 \001(\0162\033.app.message.WuLinMatchType"
    "\"[\n\016WuLinHeroProto\022\017\n\007hero_id\030\001 \001(\003\022\021\n\th"
    "ero_race\030\002 \001(\005\022\021\n\thero_name\030\003 \001(\t\022\022\n\npai"
    "r_point\030\004 \001(\005\"\325\001\n\025WuLinMatchResultProto\022"
    "\023\n\013win_hero_id\030\001 \001(\003\022\025\n\rwin_hero_name\030\002 "
    "\001(\t\022\027\n\017win_hero_damage\030\003 \001(\005\022\024\n\014lose_her"
    "o_id\030\004 \001(\003\022\026\n\016lose_hero_name\030\005 \001(\t\022\030\n\020lo"
    "se_hero_damage\030\006 \001(\005\022/\n\nmatch_type\030\007 \001(\016"
    "2\033.app.message.WuLinMatchType\"`\n\016MeleeIn"
    "itProto\0223\n\006heroes\030\001 \003(\0132#.app.message.Me"
    "leeEachHeroInfoProto\022\031\n\021battle_start_tim"
    "e\030\002 \001(\003\"t\n\026MeleeEachHeroInfoProto\022\017\n\007her"
    "o_id\030\001 \001(\003\022\021\n\thero_name\030\002 \001(\t\022\014\n\004kill\030\003 "
    "\001(\005\022\016\n\006assist\030\004 \001(\005\022\030\n\020kill_change_time\030"
    "\005 \001(\003\"_\n\023MeleeFinalInfoProto\0223\n\006heroes\030\001"
    " \003(\0132#.app.message.MeleeEachHeroInfoProt"
    "o\022\023\n\013win_hero_id\030\002 \001(\003*@\n\016WuLinMatchType"
    "\022\t\n\005GROUP\020\001\022\010\n\004M_16\020\002\022\007\n\003M_8\020\003\022\007\n\003M_4\020\004\022"
    "\007\n\003M_2\020\005B \n\014app.protobufB\016DungeonContent"
    "H\001", 3642);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dungeon.proto", &protobuf_RegisterTypes);
  DungeonBatchInfoProto::default_instance_ = new DungeonBatchInfoProto();
  DamageRecordProto::default_instance_ = new DamageRecordProto();
  GroupDungeonFinishStatProto::default_instance_ = new GroupDungeonFinishStatProto();
  GroupDungeonCollectablePrizeProto::default_instance_ = new GroupDungeonCollectablePrizeProto();
  ArenaResultProto::default_instance_ = new ArenaResultProto();
  ArenaEachHeroResult::default_instance_ = new ArenaEachHeroResult();
  DotaInitInfoProto::default_instance_ = new DotaInitInfoProto();
  DotaEachHeroInitProto::default_instance_ = new DotaEachHeroInitProto();
  DotaFinalInfoProto::default_instance_ = new DotaFinalInfoProto();
  DotaEachHeroFinalProto::default_instance_ = new DotaEachHeroFinalProto();
  HtzWorldRecordProto::default_instance_ = new HtzWorldRecordProto();
  HtzTimeRecordProto::default_instance_ = new HtzTimeRecordProto();
  HtzDestroyRecordProto::default_instance_ = new HtzDestroyRecordProto();
  WuLinProto::default_instance_ = new WuLinProto();
  WuLinGroupProto::default_instance_ = new WuLinGroupProto();
  WuLinMatchProto::default_instance_ = new WuLinMatchProto();
  WuLinHeroProto::default_instance_ = new WuLinHeroProto();
  WuLinMatchResultProto::default_instance_ = new WuLinMatchResultProto();
  MeleeInitProto::default_instance_ = new MeleeInitProto();
  MeleeEachHeroInfoProto::default_instance_ = new MeleeEachHeroInfoProto();
  MeleeFinalInfoProto::default_instance_ = new MeleeFinalInfoProto();
  DungeonBatchInfoProto::default_instance_->InitAsDefaultInstance();
  DamageRecordProto::default_instance_->InitAsDefaultInstance();
  GroupDungeonFinishStatProto::default_instance_->InitAsDefaultInstance();
  GroupDungeonCollectablePrizeProto::default_instance_->InitAsDefaultInstance();
  ArenaResultProto::default_instance_->InitAsDefaultInstance();
  ArenaEachHeroResult::default_instance_->InitAsDefaultInstance();
  DotaInitInfoProto::default_instance_->InitAsDefaultInstance();
  DotaEachHeroInitProto::default_instance_->InitAsDefaultInstance();
  DotaFinalInfoProto::default_instance_->InitAsDefaultInstance();
  DotaEachHeroFinalProto::default_instance_->InitAsDefaultInstance();
  HtzWorldRecordProto::default_instance_->InitAsDefaultInstance();
  HtzTimeRecordProto::default_instance_->InitAsDefaultInstance();
  HtzDestroyRecordProto::default_instance_->InitAsDefaultInstance();
  WuLinProto::default_instance_->InitAsDefaultInstance();
  WuLinGroupProto::default_instance_->InitAsDefaultInstance();
  WuLinMatchProto::default_instance_->InitAsDefaultInstance();
  WuLinHeroProto::default_instance_->InitAsDefaultInstance();
  WuLinMatchResultProto::default_instance_->InitAsDefaultInstance();
  MeleeInitProto::default_instance_->InitAsDefaultInstance();
  MeleeEachHeroInfoProto::default_instance_->InitAsDefaultInstance();
  MeleeFinalInfoProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dungeon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dungeon_2eproto {
  StaticDescriptorInitializer_dungeon_2eproto() {
    protobuf_AddDesc_dungeon_2eproto();
  }
} static_descriptor_initializer_dungeon_2eproto_;
const ::google::protobuf::EnumDescriptor* WuLinMatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WuLinMatchType_descriptor_;
}
bool WuLinMatchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonBatchInfoProto::kBatchNumberFieldNumber;
const int DungeonBatchInfoProto::kCurrentMonsterTypeIdFieldNumber;
const int DungeonBatchInfoProto::kNextMonsterTypeIdFieldNumber;
const int DungeonBatchInfoProto::kCurrentBatchPrizeFieldNumber;
const int DungeonBatchInfoProto::kExpireDurationFieldNumber;
#endif  // !_MSC_VER

DungeonBatchInfoProto::DungeonBatchInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonBatchInfoProto::InitAsDefaultInstance() {
  current_batch_prize_ = const_cast< ::app::message::PrizeProto*>(&::app::message::PrizeProto::default_instance());
}

DungeonBatchInfoProto::DungeonBatchInfoProto(const DungeonBatchInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonBatchInfoProto::SharedCtor() {
  _cached_size_ = 0;
  batch_number_ = 0;
  current_monster_type_id_ = 0;
  next_monster_type_id_ = 0;
  current_batch_prize_ = NULL;
  expire_duration_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonBatchInfoProto::~DungeonBatchInfoProto() {
  SharedDtor();
}

void DungeonBatchInfoProto::SharedDtor() {
  if (this != default_instance_) {
    delete current_batch_prize_;
  }
}

void DungeonBatchInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonBatchInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonBatchInfoProto_descriptor_;
}

const DungeonBatchInfoProto& DungeonBatchInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

DungeonBatchInfoProto* DungeonBatchInfoProto::default_instance_ = NULL;

DungeonBatchInfoProto* DungeonBatchInfoProto::New() const {
  return new DungeonBatchInfoProto;
}

void DungeonBatchInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    batch_number_ = 0;
    current_monster_type_id_ = 0;
    next_monster_type_id_ = 0;
    if (has_current_batch_prize()) {
      if (current_batch_prize_ != NULL) current_batch_prize_->::app::message::PrizeProto::Clear();
    }
    expire_duration_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonBatchInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 batch_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_number_)));
          set_has_batch_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_monster_type_id;
        break;
      }

      // optional int32 current_monster_type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_monster_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_monster_type_id_)));
          set_has_current_monster_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next_monster_type_id;
        break;
      }

      // optional int32 next_monster_type_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_monster_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_monster_type_id_)));
          set_has_next_monster_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_current_batch_prize;
        break;
      }

      // optional .app.message.PrizeProto current_batch_prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_batch_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_batch_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expire_duration;
        break;
      }

      // optional int64 expire_duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_duration_)));
          set_has_expire_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonBatchInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 batch_number = 1;
  if (has_batch_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->batch_number(), output);
  }

  // optional int32 current_monster_type_id = 2;
  if (has_current_monster_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_monster_type_id(), output);
  }

  // optional int32 next_monster_type_id = 3;
  if (has_next_monster_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->next_monster_type_id(), output);
  }

  // optional .app.message.PrizeProto current_batch_prize = 4;
  if (has_current_batch_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->current_batch_prize(), output);
  }

  // optional int64 expire_duration = 5;
  if (has_expire_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expire_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonBatchInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 batch_number = 1;
  if (has_batch_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->batch_number(), target);
  }

  // optional int32 current_monster_type_id = 2;
  if (has_current_monster_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_monster_type_id(), target);
  }

  // optional int32 next_monster_type_id = 3;
  if (has_next_monster_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->next_monster_type_id(), target);
  }

  // optional .app.message.PrizeProto current_batch_prize = 4;
  if (has_current_batch_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->current_batch_prize(), target);
  }

  // optional int64 expire_duration = 5;
  if (has_expire_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expire_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonBatchInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 batch_number = 1;
    if (has_batch_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_number());
    }

    // optional int32 current_monster_type_id = 2;
    if (has_current_monster_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_monster_type_id());
    }

    // optional int32 next_monster_type_id = 3;
    if (has_next_monster_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_monster_type_id());
    }

    // optional .app.message.PrizeProto current_batch_prize = 4;
    if (has_current_batch_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_batch_prize());
    }

    // optional int64 expire_duration = 5;
    if (has_expire_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonBatchInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonBatchInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonBatchInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonBatchInfoProto::MergeFrom(const DungeonBatchInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_number()) {
      set_batch_number(from.batch_number());
    }
    if (from.has_current_monster_type_id()) {
      set_current_monster_type_id(from.current_monster_type_id());
    }
    if (from.has_next_monster_type_id()) {
      set_next_monster_type_id(from.next_monster_type_id());
    }
    if (from.has_current_batch_prize()) {
      mutable_current_batch_prize()->::app::message::PrizeProto::MergeFrom(from.current_batch_prize());
    }
    if (from.has_expire_duration()) {
      set_expire_duration(from.expire_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonBatchInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonBatchInfoProto::CopyFrom(const DungeonBatchInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonBatchInfoProto::IsInitialized() const {

  return true;
}

void DungeonBatchInfoProto::Swap(DungeonBatchInfoProto* other) {
  if (other != this) {
    std::swap(batch_number_, other->batch_number_);
    std::swap(current_monster_type_id_, other->current_monster_type_id_);
    std::swap(next_monster_type_id_, other->next_monster_type_id_);
    std::swap(current_batch_prize_, other->current_batch_prize_);
    std::swap(expire_duration_, other->expire_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonBatchInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonBatchInfoProto_descriptor_;
  metadata.reflection = DungeonBatchInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DamageRecordProto::kHeroIdFieldNumber;
const int DamageRecordProto::kHeroNameFieldNumber;
const int DamageRecordProto::kDamageDividedBy1000FieldNumber;
const int DamageRecordProto::kIsOfflineFieldNumber;
#endif  // !_MSC_VER

DamageRecordProto::DamageRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DamageRecordProto::InitAsDefaultInstance() {
}

DamageRecordProto::DamageRecordProto(const DamageRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DamageRecordProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DamageRecordProto::~DamageRecordProto() {
  SharedDtor();
}

void DamageRecordProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DamageRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DamageRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageRecordProto_descriptor_;
}

const DamageRecordProto& DamageRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

DamageRecordProto* DamageRecordProto::default_instance_ = NULL;

DamageRecordProto* DamageRecordProto::New() const {
  return new DamageRecordProto;
}

void DamageRecordProto::Clear() {
  hero_id_.Clear();
  hero_name_.Clear();
  damage_divided_by_1000_.Clear();
  is_offline_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DamageRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hero_id;
        if (input->ExpectTag(18)) goto parse_hero_name;
        break;
      }

      // repeated bytes hero_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hero_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name;
        if (input->ExpectTag(24)) goto parse_damage_divided_by_1000;
        break;
      }

      // repeated int64 damage_divided_by_1000 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_divided_by_1000:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_damage_divided_by_1000())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_damage_divided_by_1000())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage_divided_by_1000;
        if (input->ExpectTag(32)) goto parse_is_offline;
        break;
      }

      // repeated bool is_offline = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_is_offline())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_offline())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_offline;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DamageRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 hero_id = 1;
  for (int i = 0; i < this->hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->hero_id(i), output);
  }

  // repeated bytes hero_name = 2;
  for (int i = 0; i < this->hero_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hero_name(i), output);
  }

  // repeated int64 damage_divided_by_1000 = 3;
  for (int i = 0; i < this->damage_divided_by_1000_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->damage_divided_by_1000(i), output);
  }

  // repeated bool is_offline = 4;
  for (int i = 0; i < this->is_offline_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->is_offline(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DamageRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 hero_id = 1;
  for (int i = 0; i < this->hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->hero_id(i), target);
  }

  // repeated bytes hero_name = 2;
  for (int i = 0; i < this->hero_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->hero_name(i), target);
  }

  // repeated int64 damage_divided_by_1000 = 3;
  for (int i = 0; i < this->damage_divided_by_1000_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->damage_divided_by_1000(i), target);
  }

  // repeated bool is_offline = 4;
  for (int i = 0; i < this->is_offline_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->is_offline(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DamageRecordProto::ByteSize() const {
  int total_size = 0;

  // repeated int64 hero_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->hero_id(i));
    }
    total_size += 1 * this->hero_id_size() + data_size;
  }

  // repeated bytes hero_name = 2;
  total_size += 1 * this->hero_name_size();
  for (int i = 0; i < this->hero_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hero_name(i));
  }

  // repeated int64 damage_divided_by_1000 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->damage_divided_by_1000_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->damage_divided_by_1000(i));
    }
    total_size += 1 * this->damage_divided_by_1000_size() + data_size;
  }

  // repeated bool is_offline = 4;
  {
    int data_size = 0;
    data_size = 1 * this->is_offline_size();
    total_size += 1 * this->is_offline_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DamageRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DamageRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DamageRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DamageRecordProto::MergeFrom(const DamageRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_id_.MergeFrom(from.hero_id_);
  hero_name_.MergeFrom(from.hero_name_);
  damage_divided_by_1000_.MergeFrom(from.damage_divided_by_1000_);
  is_offline_.MergeFrom(from.is_offline_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DamageRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DamageRecordProto::CopyFrom(const DamageRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DamageRecordProto::IsInitialized() const {

  return true;
}

void DamageRecordProto::Swap(DamageRecordProto* other) {
  if (other != this) {
    hero_id_.Swap(&other->hero_id_);
    hero_name_.Swap(&other->hero_name_);
    damage_divided_by_1000_.Swap(&other->damage_divided_by_1000_);
    is_offline_.Swap(&other->is_offline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DamageRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DamageRecordProto_descriptor_;
  metadata.reflection = DamageRecordProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupDungeonFinishStatProto::kTotalTimeFieldNumber;
const int GroupDungeonFinishStatProto::kDeadCountFieldNumber;
const int GroupDungeonFinishStatProto::kMonsterExpFieldNumber;
const int GroupDungeonFinishStatProto::kScoreFieldNumber;
const int GroupDungeonFinishStatProto::kScoreSPrizeFieldNumber;
const int GroupDungeonFinishStatProto::kVipPrizeFieldNumber;
#endif  // !_MSC_VER

GroupDungeonFinishStatProto::GroupDungeonFinishStatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupDungeonFinishStatProto::InitAsDefaultInstance() {
}

GroupDungeonFinishStatProto::GroupDungeonFinishStatProto(const GroupDungeonFinishStatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupDungeonFinishStatProto::SharedCtor() {
  _cached_size_ = 0;
  total_time_ = 0;
  dead_count_ = 0;
  monster_exp_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDungeonFinishStatProto::~GroupDungeonFinishStatProto() {
  SharedDtor();
}

void GroupDungeonFinishStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupDungeonFinishStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupDungeonFinishStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupDungeonFinishStatProto_descriptor_;
}

const GroupDungeonFinishStatProto& GroupDungeonFinishStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

GroupDungeonFinishStatProto* GroupDungeonFinishStatProto::default_instance_ = NULL;

GroupDungeonFinishStatProto* GroupDungeonFinishStatProto::New() const {
  return new GroupDungeonFinishStatProto;
}

void GroupDungeonFinishStatProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_time_ = 0;
    dead_count_ = 0;
    monster_exp_ = 0;
    score_ = 0;
  }
  score_s_prize_.Clear();
  vip_prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupDungeonFinishStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dead_count;
        break;
      }

      // optional int32 dead_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_count_)));
          set_has_dead_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_exp;
        break;
      }

      // optional int32 monster_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_exp_)));
          set_has_monster_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_score_s_prize;
        break;
      }

      // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_s_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_s_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_score_s_prize;
        if (input->ExpectTag(50)) goto parse_vip_prize;
        break;
      }

      // repeated .app.message.GoodsWrapperProto vip_prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vip_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vip_prize;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupDungeonFinishStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_time = 1;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_time(), output);
  }

  // optional int32 dead_count = 2;
  if (has_dead_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dead_count(), output);
  }

  // optional int32 monster_exp = 3;
  if (has_monster_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monster_exp(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
  for (int i = 0; i < this->score_s_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->score_s_prize(i), output);
  }

  // repeated .app.message.GoodsWrapperProto vip_prize = 6;
  for (int i = 0; i < this->vip_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vip_prize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupDungeonFinishStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_time = 1;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_time(), target);
  }

  // optional int32 dead_count = 2;
  if (has_dead_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dead_count(), target);
  }

  // optional int32 monster_exp = 3;
  if (has_monster_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monster_exp(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
  for (int i = 0; i < this->score_s_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->score_s_prize(i), target);
  }

  // repeated .app.message.GoodsWrapperProto vip_prize = 6;
  for (int i = 0; i < this->vip_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vip_prize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupDungeonFinishStatProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_time = 1;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_time());
    }

    // optional int32 dead_count = 2;
    if (has_dead_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_count());
    }

    // optional int32 monster_exp = 3;
    if (has_monster_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_exp());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
  total_size += 1 * this->score_s_prize_size();
  for (int i = 0; i < this->score_s_prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_s_prize(i));
  }

  // repeated .app.message.GoodsWrapperProto vip_prize = 6;
  total_size += 1 * this->vip_prize_size();
  for (int i = 0; i < this->vip_prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vip_prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDungeonFinishStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupDungeonFinishStatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupDungeonFinishStatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupDungeonFinishStatProto::MergeFrom(const GroupDungeonFinishStatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_s_prize_.MergeFrom(from.score_s_prize_);
  vip_prize_.MergeFrom(from.vip_prize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_dead_count()) {
      set_dead_count(from.dead_count());
    }
    if (from.has_monster_exp()) {
      set_monster_exp(from.monster_exp());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupDungeonFinishStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDungeonFinishStatProto::CopyFrom(const GroupDungeonFinishStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDungeonFinishStatProto::IsInitialized() const {

  return true;
}

void GroupDungeonFinishStatProto::Swap(GroupDungeonFinishStatProto* other) {
  if (other != this) {
    std::swap(total_time_, other->total_time_);
    std::swap(dead_count_, other->dead_count_);
    std::swap(monster_exp_, other->monster_exp_);
    std::swap(score_, other->score_);
    score_s_prize_.Swap(&other->score_s_prize_);
    vip_prize_.Swap(&other->vip_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupDungeonFinishStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupDungeonFinishStatProto_descriptor_;
  metadata.reflection = GroupDungeonFinishStatProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupDungeonCollectablePrizeProto::kDungeonIdFieldNumber;
const int GroupDungeonCollectablePrizeProto::kNoScoreSPrizeFieldNumber;
const int GroupDungeonCollectablePrizeProto::kExpireTimeFieldNumber;
const int GroupDungeonCollectablePrizeProto::kRandomedSPrizeFieldNumber;
const int GroupDungeonCollectablePrizeProto::kRandomedVipPrizeFieldNumber;
#endif  // !_MSC_VER

GroupDungeonCollectablePrizeProto::GroupDungeonCollectablePrizeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupDungeonCollectablePrizeProto::InitAsDefaultInstance() {
}

GroupDungeonCollectablePrizeProto::GroupDungeonCollectablePrizeProto(const GroupDungeonCollectablePrizeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupDungeonCollectablePrizeProto::SharedCtor() {
  _cached_size_ = 0;
  dungeon_id_ = 0;
  no_score_s_prize_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  randomed_s_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  randomed_vip_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDungeonCollectablePrizeProto::~GroupDungeonCollectablePrizeProto() {
  SharedDtor();
}

void GroupDungeonCollectablePrizeProto::SharedDtor() {
  if (randomed_s_prize_ != &::google::protobuf::internal::kEmptyString) {
    delete randomed_s_prize_;
  }
  if (randomed_vip_prize_ != &::google::protobuf::internal::kEmptyString) {
    delete randomed_vip_prize_;
  }
  if (this != default_instance_) {
  }
}

void GroupDungeonCollectablePrizeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupDungeonCollectablePrizeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupDungeonCollectablePrizeProto_descriptor_;
}

const GroupDungeonCollectablePrizeProto& GroupDungeonCollectablePrizeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

GroupDungeonCollectablePrizeProto* GroupDungeonCollectablePrizeProto::default_instance_ = NULL;

GroupDungeonCollectablePrizeProto* GroupDungeonCollectablePrizeProto::New() const {
  return new GroupDungeonCollectablePrizeProto;
}

void GroupDungeonCollectablePrizeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeon_id_ = 0;
    no_score_s_prize_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    if (has_randomed_s_prize()) {
      if (randomed_s_prize_ != &::google::protobuf::internal::kEmptyString) {
        randomed_s_prize_->clear();
      }
    }
    if (has_randomed_vip_prize()) {
      if (randomed_vip_prize_ != &::google::protobuf::internal::kEmptyString) {
        randomed_vip_prize_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupDungeonCollectablePrizeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dungeon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_no_score_s_prize;
        break;
      }

      // optional bool no_score_s_prize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_score_s_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_score_s_prize_)));
          set_has_no_score_s_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_randomed_s_prize;
        break;
      }

      // optional bytes randomed_s_prize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randomed_s_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randomed_s_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_randomed_vip_prize;
        break;
      }

      // optional bytes randomed_vip_prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randomed_vip_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randomed_vip_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupDungeonCollectablePrizeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeon_id(), output);
  }

  // optional bool no_score_s_prize = 2;
  if (has_no_score_s_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->no_score_s_prize(), output);
  }

  // optional int64 expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expire_time(), output);
  }

  // optional bytes randomed_s_prize = 5;
  if (has_randomed_s_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->randomed_s_prize(), output);
  }

  // optional bytes randomed_vip_prize = 6;
  if (has_randomed_vip_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->randomed_vip_prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupDungeonCollectablePrizeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeon_id(), target);
  }

  // optional bool no_score_s_prize = 2;
  if (has_no_score_s_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->no_score_s_prize(), target);
  }

  // optional int64 expire_time = 4;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expire_time(), target);
  }

  // optional bytes randomed_s_prize = 5;
  if (has_randomed_s_prize()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->randomed_s_prize(), target);
  }

  // optional bytes randomed_vip_prize = 6;
  if (has_randomed_vip_prize()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->randomed_vip_prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupDungeonCollectablePrizeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dungeon_id = 1;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // optional bool no_score_s_prize = 2;
    if (has_no_score_s_prize()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional bytes randomed_s_prize = 5;
    if (has_randomed_s_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randomed_s_prize());
    }

    // optional bytes randomed_vip_prize = 6;
    if (has_randomed_vip_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randomed_vip_prize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDungeonCollectablePrizeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupDungeonCollectablePrizeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupDungeonCollectablePrizeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupDungeonCollectablePrizeProto::MergeFrom(const GroupDungeonCollectablePrizeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_no_score_s_prize()) {
      set_no_score_s_prize(from.no_score_s_prize());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_randomed_s_prize()) {
      set_randomed_s_prize(from.randomed_s_prize());
    }
    if (from.has_randomed_vip_prize()) {
      set_randomed_vip_prize(from.randomed_vip_prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupDungeonCollectablePrizeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDungeonCollectablePrizeProto::CopyFrom(const GroupDungeonCollectablePrizeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDungeonCollectablePrizeProto::IsInitialized() const {

  return true;
}

void GroupDungeonCollectablePrizeProto::Swap(GroupDungeonCollectablePrizeProto* other) {
  if (other != this) {
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(no_score_s_prize_, other->no_score_s_prize_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(randomed_s_prize_, other->randomed_s_prize_);
    std::swap(randomed_vip_prize_, other->randomed_vip_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupDungeonCollectablePrizeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupDungeonCollectablePrizeProto_descriptor_;
  metadata.reflection = GroupDungeonCollectablePrizeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaResultProto::kWinHeroFieldNumber;
const int ArenaResultProto::kLoseHeroFieldNumber;
const int ArenaResultProto::kIsDrawFieldNumber;
const int ArenaResultProto::kWinFightingTeamNameFieldNumber;
const int ArenaResultProto::kLoseFightingTeamNameFieldNumber;
const int ArenaResultProto::kWinFightingTeamPairPointFieldNumber;
const int ArenaResultProto::kWinFightingTeamChangedPairPointFieldNumber;
const int ArenaResultProto::kLoseFightingTeamPairPointFieldNumber;
const int ArenaResultProto::kLoseFightingTeamChangedPairPointFieldNumber;
#endif  // !_MSC_VER

ArenaResultProto::ArenaResultProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaResultProto::InitAsDefaultInstance() {
}

ArenaResultProto::ArenaResultProto(const ArenaResultProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaResultProto::SharedCtor() {
  _cached_size_ = 0;
  is_draw_ = false;
  win_fighting_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lose_fighting_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_fighting_team_pair_point_ = 0;
  win_fighting_team_changed_pair_point_ = 0;
  lose_fighting_team_pair_point_ = 0;
  lose_fighting_team_changed_pair_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaResultProto::~ArenaResultProto() {
  SharedDtor();
}

void ArenaResultProto::SharedDtor() {
  if (win_fighting_team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete win_fighting_team_name_;
  }
  if (lose_fighting_team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lose_fighting_team_name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaResultProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaResultProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaResultProto_descriptor_;
}

const ArenaResultProto& ArenaResultProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

ArenaResultProto* ArenaResultProto::default_instance_ = NULL;

ArenaResultProto* ArenaResultProto::New() const {
  return new ArenaResultProto;
}

void ArenaResultProto::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    is_draw_ = false;
    if (has_win_fighting_team_name()) {
      if (win_fighting_team_name_ != &::google::protobuf::internal::kEmptyString) {
        win_fighting_team_name_->clear();
      }
    }
    if (has_lose_fighting_team_name()) {
      if (lose_fighting_team_name_ != &::google::protobuf::internal::kEmptyString) {
        lose_fighting_team_name_->clear();
      }
    }
    win_fighting_team_pair_point_ = 0;
    win_fighting_team_changed_pair_point_ = 0;
    lose_fighting_team_pair_point_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lose_fighting_team_changed_pair_point_ = 0;
  }
  win_hero_.Clear();
  lose_hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaResultProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.ArenaEachHeroResult win_hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_win_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_win_hero;
        if (input->ExpectTag(18)) goto parse_lose_hero;
        break;
      }

      // repeated .app.message.ArenaEachHeroResult lose_hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lose_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lose_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lose_hero;
        if (input->ExpectTag(24)) goto parse_is_draw;
        break;
      }

      // optional bool is_draw = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_draw_)));
          set_has_is_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_win_fighting_team_name;
        break;
      }

      // optional bytes win_fighting_team_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_fighting_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_win_fighting_team_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lose_fighting_team_name;
        break;
      }

      // optional bytes lose_fighting_team_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lose_fighting_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lose_fighting_team_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_fighting_team_pair_point;
        break;
      }

      // optional int32 win_fighting_team_pair_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_fighting_team_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_fighting_team_pair_point_)));
          set_has_win_fighting_team_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win_fighting_team_changed_pair_point;
        break;
      }

      // optional int32 win_fighting_team_changed_pair_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_fighting_team_changed_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_fighting_team_changed_pair_point_)));
          set_has_win_fighting_team_changed_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lose_fighting_team_pair_point;
        break;
      }

      // optional int32 lose_fighting_team_pair_point = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_fighting_team_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_fighting_team_pair_point_)));
          set_has_lose_fighting_team_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lose_fighting_team_changed_pair_point;
        break;
      }

      // optional int32 lose_fighting_team_changed_pair_point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_fighting_team_changed_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_fighting_team_changed_pair_point_)));
          set_has_lose_fighting_team_changed_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaResultProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.ArenaEachHeroResult win_hero = 1;
  for (int i = 0; i < this->win_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->win_hero(i), output);
  }

  // repeated .app.message.ArenaEachHeroResult lose_hero = 2;
  for (int i = 0; i < this->lose_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lose_hero(i), output);
  }

  // optional bool is_draw = 3;
  if (has_is_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_draw(), output);
  }

  // optional bytes win_fighting_team_name = 4;
  if (has_win_fighting_team_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->win_fighting_team_name(), output);
  }

  // optional bytes lose_fighting_team_name = 5;
  if (has_lose_fighting_team_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->lose_fighting_team_name(), output);
  }

  // optional int32 win_fighting_team_pair_point = 6;
  if (has_win_fighting_team_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_fighting_team_pair_point(), output);
  }

  // optional int32 win_fighting_team_changed_pair_point = 7;
  if (has_win_fighting_team_changed_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->win_fighting_team_changed_pair_point(), output);
  }

  // optional int32 lose_fighting_team_pair_point = 8;
  if (has_lose_fighting_team_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lose_fighting_team_pair_point(), output);
  }

  // optional int32 lose_fighting_team_changed_pair_point = 9;
  if (has_lose_fighting_team_changed_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lose_fighting_team_changed_pair_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaResultProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.ArenaEachHeroResult win_hero = 1;
  for (int i = 0; i < this->win_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->win_hero(i), target);
  }

  // repeated .app.message.ArenaEachHeroResult lose_hero = 2;
  for (int i = 0; i < this->lose_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lose_hero(i), target);
  }

  // optional bool is_draw = 3;
  if (has_is_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_draw(), target);
  }

  // optional bytes win_fighting_team_name = 4;
  if (has_win_fighting_team_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->win_fighting_team_name(), target);
  }

  // optional bytes lose_fighting_team_name = 5;
  if (has_lose_fighting_team_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->lose_fighting_team_name(), target);
  }

  // optional int32 win_fighting_team_pair_point = 6;
  if (has_win_fighting_team_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_fighting_team_pair_point(), target);
  }

  // optional int32 win_fighting_team_changed_pair_point = 7;
  if (has_win_fighting_team_changed_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->win_fighting_team_changed_pair_point(), target);
  }

  // optional int32 lose_fighting_team_pair_point = 8;
  if (has_lose_fighting_team_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lose_fighting_team_pair_point(), target);
  }

  // optional int32 lose_fighting_team_changed_pair_point = 9;
  if (has_lose_fighting_team_changed_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lose_fighting_team_changed_pair_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaResultProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool is_draw = 3;
    if (has_is_draw()) {
      total_size += 1 + 1;
    }

    // optional bytes win_fighting_team_name = 4;
    if (has_win_fighting_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->win_fighting_team_name());
    }

    // optional bytes lose_fighting_team_name = 5;
    if (has_lose_fighting_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lose_fighting_team_name());
    }

    // optional int32 win_fighting_team_pair_point = 6;
    if (has_win_fighting_team_pair_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_fighting_team_pair_point());
    }

    // optional int32 win_fighting_team_changed_pair_point = 7;
    if (has_win_fighting_team_changed_pair_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_fighting_team_changed_pair_point());
    }

    // optional int32 lose_fighting_team_pair_point = 8;
    if (has_lose_fighting_team_pair_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_fighting_team_pair_point());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lose_fighting_team_changed_pair_point = 9;
    if (has_lose_fighting_team_changed_pair_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_fighting_team_changed_pair_point());
    }

  }
  // repeated .app.message.ArenaEachHeroResult win_hero = 1;
  total_size += 1 * this->win_hero_size();
  for (int i = 0; i < this->win_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->win_hero(i));
  }

  // repeated .app.message.ArenaEachHeroResult lose_hero = 2;
  total_size += 1 * this->lose_hero_size();
  for (int i = 0; i < this->lose_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lose_hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaResultProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaResultProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaResultProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaResultProto::MergeFrom(const ArenaResultProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_hero_.MergeFrom(from.win_hero_);
  lose_hero_.MergeFrom(from.lose_hero_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_is_draw()) {
      set_is_draw(from.is_draw());
    }
    if (from.has_win_fighting_team_name()) {
      set_win_fighting_team_name(from.win_fighting_team_name());
    }
    if (from.has_lose_fighting_team_name()) {
      set_lose_fighting_team_name(from.lose_fighting_team_name());
    }
    if (from.has_win_fighting_team_pair_point()) {
      set_win_fighting_team_pair_point(from.win_fighting_team_pair_point());
    }
    if (from.has_win_fighting_team_changed_pair_point()) {
      set_win_fighting_team_changed_pair_point(from.win_fighting_team_changed_pair_point());
    }
    if (from.has_lose_fighting_team_pair_point()) {
      set_lose_fighting_team_pair_point(from.lose_fighting_team_pair_point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lose_fighting_team_changed_pair_point()) {
      set_lose_fighting_team_changed_pair_point(from.lose_fighting_team_changed_pair_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaResultProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaResultProto::CopyFrom(const ArenaResultProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaResultProto::IsInitialized() const {

  return true;
}

void ArenaResultProto::Swap(ArenaResultProto* other) {
  if (other != this) {
    win_hero_.Swap(&other->win_hero_);
    lose_hero_.Swap(&other->lose_hero_);
    std::swap(is_draw_, other->is_draw_);
    std::swap(win_fighting_team_name_, other->win_fighting_team_name_);
    std::swap(lose_fighting_team_name_, other->lose_fighting_team_name_);
    std::swap(win_fighting_team_pair_point_, other->win_fighting_team_pair_point_);
    std::swap(win_fighting_team_changed_pair_point_, other->win_fighting_team_changed_pair_point_);
    std::swap(lose_fighting_team_pair_point_, other->lose_fighting_team_pair_point_);
    std::swap(lose_fighting_team_changed_pair_point_, other->lose_fighting_team_changed_pair_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaResultProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaResultProto_descriptor_;
  metadata.reflection = ArenaResultProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaEachHeroResult::kHeroIdFieldNumber;
const int ArenaEachHeroResult::kHeroNameFieldNumber;
const int ArenaEachHeroResult::kOldPairPointFieldNumber;
const int ArenaEachHeroResult::kPairPointChangeFieldNumber;
const int ArenaEachHeroResult::kWinDamageFieldNumber;
const int ArenaEachHeroResult::kRaceIdFieldNumber;
#endif  // !_MSC_VER

ArenaEachHeroResult::ArenaEachHeroResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaEachHeroResult::InitAsDefaultInstance() {
}

ArenaEachHeroResult::ArenaEachHeroResult(const ArenaEachHeroResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaEachHeroResult::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_pair_point_ = 0;
  pair_point_change_ = 0;
  win_damage_ = 0;
  race_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaEachHeroResult::~ArenaEachHeroResult() {
  SharedDtor();
}

void ArenaEachHeroResult::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaEachHeroResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaEachHeroResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaEachHeroResult_descriptor_;
}

const ArenaEachHeroResult& ArenaEachHeroResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

ArenaEachHeroResult* ArenaEachHeroResult::default_instance_ = NULL;

ArenaEachHeroResult* ArenaEachHeroResult::New() const {
  return new ArenaEachHeroResult;
}

void ArenaEachHeroResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    old_pair_point_ = 0;
    pair_point_change_ = 0;
    win_damage_ = 0;
    race_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaEachHeroResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_pair_point;
        break;
      }

      // optional int32 old_pair_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_pair_point_)));
          set_has_old_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pair_point_change;
        break;
      }

      // optional sint32 pair_point_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pair_point_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pair_point_change_)));
          set_has_pair_point_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_damage;
        break;
      }

      // optional int32 win_damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_damage_)));
          set_has_win_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_race_id;
        break;
      }

      // optional int32 race_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_id_)));
          set_has_race_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaEachHeroResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hero_name(), output);
  }

  // optional int32 old_pair_point = 3;
  if (has_old_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->old_pair_point(), output);
  }

  // optional sint32 pair_point_change = 4;
  if (has_pair_point_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->pair_point_change(), output);
  }

  // optional int32 win_damage = 5;
  if (has_win_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_damage(), output);
  }

  // optional int32 race_id = 6;
  if (has_race_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->race_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaEachHeroResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hero_name(), target);
  }

  // optional int32 old_pair_point = 3;
  if (has_old_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->old_pair_point(), target);
  }

  // optional sint32 pair_point_change = 4;
  if (has_pair_point_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->pair_point_change(), target);
  }

  // optional int32 win_damage = 5;
  if (has_win_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_damage(), target);
  }

  // optional int32 race_id = 6;
  if (has_race_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->race_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaEachHeroResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional string hero_name = 2;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional int32 old_pair_point = 3;
    if (has_old_pair_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_pair_point());
    }

    // optional sint32 pair_point_change = 4;
    if (has_pair_point_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->pair_point_change());
    }

    // optional int32 win_damage = 5;
    if (has_win_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_damage());
    }

    // optional int32 race_id = 6;
    if (has_race_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaEachHeroResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaEachHeroResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaEachHeroResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaEachHeroResult::MergeFrom(const ArenaEachHeroResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_old_pair_point()) {
      set_old_pair_point(from.old_pair_point());
    }
    if (from.has_pair_point_change()) {
      set_pair_point_change(from.pair_point_change());
    }
    if (from.has_win_damage()) {
      set_win_damage(from.win_damage());
    }
    if (from.has_race_id()) {
      set_race_id(from.race_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaEachHeroResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaEachHeroResult::CopyFrom(const ArenaEachHeroResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaEachHeroResult::IsInitialized() const {

  return true;
}

void ArenaEachHeroResult::Swap(ArenaEachHeroResult* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(old_pair_point_, other->old_pair_point_);
    std::swap(pair_point_change_, other->pair_point_change_);
    std::swap(win_damage_, other->win_damage_);
    std::swap(race_id_, other->race_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaEachHeroResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaEachHeroResult_descriptor_;
  metadata.reflection = ArenaEachHeroResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DotaInitInfoProto::kHeroesFieldNumber;
const int DotaInitInfoProto::kParty1TowerIdFieldNumber;
const int DotaInitInfoProto::kParty2TowerIdFieldNumber;
const int DotaInitInfoProto::kParty1HomeIdFieldNumber;
const int DotaInitInfoProto::kParty2HomeIdFieldNumber;
const int DotaInitInfoProto::kEndTimeFieldNumber;
#endif  // !_MSC_VER

DotaInitInfoProto::DotaInitInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DotaInitInfoProto::InitAsDefaultInstance() {
}

DotaInitInfoProto::DotaInitInfoProto(const DotaInitInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DotaInitInfoProto::SharedCtor() {
  _cached_size_ = 0;
  party_1_home_id_ = GOOGLE_LONGLONG(0);
  party_2_home_id_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotaInitInfoProto::~DotaInitInfoProto() {
  SharedDtor();
}

void DotaInitInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DotaInitInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DotaInitInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DotaInitInfoProto_descriptor_;
}

const DotaInitInfoProto& DotaInitInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

DotaInitInfoProto* DotaInitInfoProto::default_instance_ = NULL;

DotaInitInfoProto* DotaInitInfoProto::New() const {
  return new DotaInitInfoProto;
}

void DotaInitInfoProto::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    party_1_home_id_ = GOOGLE_LONGLONG(0);
    party_2_home_id_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  heroes_.Clear();
  party_1_tower_id_.Clear();
  party_2_tower_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DotaInitInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.DotaEachHeroInitProto heroes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroes;
        if (input->ExpectTag(16)) goto parse_party_1_tower_id;
        break;
      }

      // repeated int64 party_1_tower_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_1_tower_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_party_1_tower_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_party_1_tower_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_party_1_tower_id;
        if (input->ExpectTag(24)) goto parse_party_2_tower_id;
        break;
      }

      // repeated int64 party_2_tower_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_2_tower_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_party_2_tower_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_party_2_tower_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_party_2_tower_id;
        if (input->ExpectTag(32)) goto parse_party_1_home_id;
        break;
      }

      // optional int64 party_1_home_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_1_home_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &party_1_home_id_)));
          set_has_party_1_home_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_party_2_home_id;
        break;
      }

      // optional int64 party_2_home_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_2_home_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &party_2_home_id_)));
          set_has_party_2_home_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotaInitInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.DotaEachHeroInitProto heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroes(i), output);
  }

  // repeated int64 party_1_tower_id = 2;
  for (int i = 0; i < this->party_1_tower_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->party_1_tower_id(i), output);
  }

  // repeated int64 party_2_tower_id = 3;
  for (int i = 0; i < this->party_2_tower_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->party_2_tower_id(i), output);
  }

  // optional int64 party_1_home_id = 4;
  if (has_party_1_home_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->party_1_home_id(), output);
  }

  // optional int64 party_2_home_id = 5;
  if (has_party_2_home_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->party_2_home_id(), output);
  }

  // optional int64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DotaInitInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.DotaEachHeroInitProto heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroes(i), target);
  }

  // repeated int64 party_1_tower_id = 2;
  for (int i = 0; i < this->party_1_tower_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->party_1_tower_id(i), target);
  }

  // repeated int64 party_2_tower_id = 3;
  for (int i = 0; i < this->party_2_tower_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->party_2_tower_id(i), target);
  }

  // optional int64 party_1_home_id = 4;
  if (has_party_1_home_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->party_1_home_id(), target);
  }

  // optional int64 party_2_home_id = 5;
  if (has_party_2_home_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->party_2_home_id(), target);
  }

  // optional int64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DotaInitInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int64 party_1_home_id = 4;
    if (has_party_1_home_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->party_1_home_id());
    }

    // optional int64 party_2_home_id = 5;
    if (has_party_2_home_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->party_2_home_id());
    }

    // optional int64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  // repeated .app.message.DotaEachHeroInitProto heroes = 1;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  // repeated int64 party_1_tower_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->party_1_tower_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->party_1_tower_id(i));
    }
    total_size += 1 * this->party_1_tower_id_size() + data_size;
  }

  // repeated int64 party_2_tower_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->party_2_tower_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->party_2_tower_id(i));
    }
    total_size += 1 * this->party_2_tower_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotaInitInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DotaInitInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DotaInitInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DotaInitInfoProto::MergeFrom(const DotaInitInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  party_1_tower_id_.MergeFrom(from.party_1_tower_id_);
  party_2_tower_id_.MergeFrom(from.party_2_tower_id_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_party_1_home_id()) {
      set_party_1_home_id(from.party_1_home_id());
    }
    if (from.has_party_2_home_id()) {
      set_party_2_home_id(from.party_2_home_id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DotaInitInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotaInitInfoProto::CopyFrom(const DotaInitInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotaInitInfoProto::IsInitialized() const {

  return true;
}

void DotaInitInfoProto::Swap(DotaInitInfoProto* other) {
  if (other != this) {
    heroes_.Swap(&other->heroes_);
    party_1_tower_id_.Swap(&other->party_1_tower_id_);
    party_2_tower_id_.Swap(&other->party_2_tower_id_);
    std::swap(party_1_home_id_, other->party_1_home_id_);
    std::swap(party_2_home_id_, other->party_2_home_id_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DotaInitInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DotaInitInfoProto_descriptor_;
  metadata.reflection = DotaInitInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DotaEachHeroInitProto::kHeroIdFieldNumber;
const int DotaEachHeroInitProto::kHeroNameFieldNumber;
const int DotaEachHeroInitProto::kPartyFieldNumber;
const int DotaEachHeroInitProto::kPointFieldNumber;
const int DotaEachHeroInitProto::kPointChangeTimeFieldNumber;
#endif  // !_MSC_VER

DotaEachHeroInitProto::DotaEachHeroInitProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DotaEachHeroInitProto::InitAsDefaultInstance() {
}

DotaEachHeroInitProto::DotaEachHeroInitProto(const DotaEachHeroInitProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DotaEachHeroInitProto::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  party_ = 0;
  point_ = 0;
  point_change_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotaEachHeroInitProto::~DotaEachHeroInitProto() {
  SharedDtor();
}

void DotaEachHeroInitProto::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void DotaEachHeroInitProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DotaEachHeroInitProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DotaEachHeroInitProto_descriptor_;
}

const DotaEachHeroInitProto& DotaEachHeroInitProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

DotaEachHeroInitProto* DotaEachHeroInitProto::default_instance_ = NULL;

DotaEachHeroInitProto* DotaEachHeroInitProto::New() const {
  return new DotaEachHeroInitProto;
}

void DotaEachHeroInitProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    party_ = 0;
    point_ = 0;
    point_change_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DotaEachHeroInitProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_party;
        break;
      }

      // optional int32 party = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_)));
          set_has_party();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }

      // optional int32 point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_point_change_time;
        break;
      }

      // optional int64 point_change_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point_change_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &point_change_time_)));
          set_has_point_change_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotaEachHeroInitProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hero_name(), output);
  }

  // optional int32 party = 3;
  if (has_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->party(), output);
  }

  // optional int32 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->point(), output);
  }

  // optional int64 point_change_time = 5;
  if (has_point_change_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->point_change_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DotaEachHeroInitProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hero_name(), target);
  }

  // optional int32 party = 3;
  if (has_party()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->party(), target);
  }

  // optional int32 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->point(), target);
  }

  // optional int64 point_change_time = 5;
  if (has_point_change_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->point_change_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DotaEachHeroInitProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional string hero_name = 2;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional int32 party = 3;
    if (has_party()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->party());
    }

    // optional int32 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int64 point_change_time = 5;
    if (has_point_change_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->point_change_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotaEachHeroInitProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DotaEachHeroInitProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DotaEachHeroInitProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DotaEachHeroInitProto::MergeFrom(const DotaEachHeroInitProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_party()) {
      set_party(from.party());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_point_change_time()) {
      set_point_change_time(from.point_change_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DotaEachHeroInitProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotaEachHeroInitProto::CopyFrom(const DotaEachHeroInitProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotaEachHeroInitProto::IsInitialized() const {

  return true;
}

void DotaEachHeroInitProto::Swap(DotaEachHeroInitProto* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(party_, other->party_);
    std::swap(point_, other->point_);
    std::swap(point_change_time_, other->point_change_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DotaEachHeroInitProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DotaEachHeroInitProto_descriptor_;
  metadata.reflection = DotaEachHeroInitProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DotaFinalInfoProto::kParty1HeroesFieldNumber;
const int DotaFinalInfoProto::kParty2HeroesFieldNumber;
const int DotaFinalInfoProto::kResultFieldNumber;
const int DotaFinalInfoProto::kPrizeFieldNumber;
#endif  // !_MSC_VER

DotaFinalInfoProto::DotaFinalInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DotaFinalInfoProto::InitAsDefaultInstance() {
  prize_ = const_cast< ::app::message::PrizeProto*>(&::app::message::PrizeProto::default_instance());
}

DotaFinalInfoProto::DotaFinalInfoProto(const DotaFinalInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DotaFinalInfoProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  prize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotaFinalInfoProto::~DotaFinalInfoProto() {
  SharedDtor();
}

void DotaFinalInfoProto::SharedDtor() {
  if (this != default_instance_) {
    delete prize_;
  }
}

void DotaFinalInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DotaFinalInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DotaFinalInfoProto_descriptor_;
}

const DotaFinalInfoProto& DotaFinalInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

DotaFinalInfoProto* DotaFinalInfoProto::default_instance_ = NULL;

DotaFinalInfoProto* DotaFinalInfoProto::New() const {
  return new DotaFinalInfoProto;
}

void DotaFinalInfoProto::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    result_ = 0;
    if (has_prize()) {
      if (prize_ != NULL) prize_->::app::message::PrizeProto::Clear();
    }
  }
  party_1_heroes_.Clear();
  party_2_heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DotaFinalInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.DotaEachHeroFinalProto party_1_heroes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_party_1_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_party_1_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_party_1_heroes;
        if (input->ExpectTag(18)) goto parse_party_2_heroes;
        break;
      }

      // repeated .app.message.DotaEachHeroFinalProto party_2_heroes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_party_2_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_party_2_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_party_2_heroes;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize;
        break;
      }

      // optional .app.message.PrizeProto prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotaFinalInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.DotaEachHeroFinalProto party_1_heroes = 1;
  for (int i = 0; i < this->party_1_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->party_1_heroes(i), output);
  }

  // repeated .app.message.DotaEachHeroFinalProto party_2_heroes = 2;
  for (int i = 0; i < this->party_2_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->party_2_heroes(i), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional .app.message.PrizeProto prize = 4;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DotaFinalInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.DotaEachHeroFinalProto party_1_heroes = 1;
  for (int i = 0; i < this->party_1_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->party_1_heroes(i), target);
  }

  // repeated .app.message.DotaEachHeroFinalProto party_2_heroes = 2;
  for (int i = 0; i < this->party_2_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->party_2_heroes(i), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional .app.message.PrizeProto prize = 4;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DotaFinalInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .app.message.PrizeProto prize = 4;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }

  }
  // repeated .app.message.DotaEachHeroFinalProto party_1_heroes = 1;
  total_size += 1 * this->party_1_heroes_size();
  for (int i = 0; i < this->party_1_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->party_1_heroes(i));
  }

  // repeated .app.message.DotaEachHeroFinalProto party_2_heroes = 2;
  total_size += 1 * this->party_2_heroes_size();
  for (int i = 0; i < this->party_2_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->party_2_heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotaFinalInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DotaFinalInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DotaFinalInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DotaFinalInfoProto::MergeFrom(const DotaFinalInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  party_1_heroes_.MergeFrom(from.party_1_heroes_);
  party_2_heroes_.MergeFrom(from.party_2_heroes_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_prize()) {
      mutable_prize()->::app::message::PrizeProto::MergeFrom(from.prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DotaFinalInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotaFinalInfoProto::CopyFrom(const DotaFinalInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotaFinalInfoProto::IsInitialized() const {

  return true;
}

void DotaFinalInfoProto::Swap(DotaFinalInfoProto* other) {
  if (other != this) {
    party_1_heroes_.Swap(&other->party_1_heroes_);
    party_2_heroes_.Swap(&other->party_2_heroes_);
    std::swap(result_, other->result_);
    std::swap(prize_, other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DotaFinalInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DotaFinalInfoProto_descriptor_;
  metadata.reflection = DotaFinalInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DotaEachHeroFinalProto::kHeroIdFieldNumber;
const int DotaEachHeroFinalProto::kHeroNameFieldNumber;
const int DotaEachHeroFinalProto::kPointFieldNumber;
const int DotaEachHeroFinalProto::kKillCountFieldNumber;
const int DotaEachHeroFinalProto::kDeadCountFieldNumber;
const int DotaEachHeroFinalProto::kLevelFieldNumber;
#endif  // !_MSC_VER

DotaEachHeroFinalProto::DotaEachHeroFinalProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DotaEachHeroFinalProto::InitAsDefaultInstance() {
}

DotaEachHeroFinalProto::DotaEachHeroFinalProto(const DotaEachHeroFinalProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DotaEachHeroFinalProto::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  point_ = 0;
  kill_count_ = 0;
  dead_count_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotaEachHeroFinalProto::~DotaEachHeroFinalProto() {
  SharedDtor();
}

void DotaEachHeroFinalProto::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void DotaEachHeroFinalProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DotaEachHeroFinalProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DotaEachHeroFinalProto_descriptor_;
}

const DotaEachHeroFinalProto& DotaEachHeroFinalProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

DotaEachHeroFinalProto* DotaEachHeroFinalProto::default_instance_ = NULL;

DotaEachHeroFinalProto* DotaEachHeroFinalProto::New() const {
  return new DotaEachHeroFinalProto;
}

void DotaEachHeroFinalProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    point_ = 0;
    kill_count_ = 0;
    dead_count_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DotaEachHeroFinalProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional int32 point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_count;
        break;
      }

      // optional int32 kill_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dead_count;
        break;
      }

      // optional int32 dead_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_count_)));
          set_has_dead_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotaEachHeroFinalProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hero_name(), output);
  }

  // optional int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  // optional int32 kill_count = 4;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill_count(), output);
  }

  // optional int32 dead_count = 5;
  if (has_dead_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dead_count(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DotaEachHeroFinalProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hero_name(), target);
  }

  // optional int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  // optional int32 kill_count = 4;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill_count(), target);
  }

  // optional int32 dead_count = 5;
  if (has_dead_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dead_count(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DotaEachHeroFinalProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional string hero_name = 2;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 kill_count = 4;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_count());
    }

    // optional int32 dead_count = 5;
    if (has_dead_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_count());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotaEachHeroFinalProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DotaEachHeroFinalProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DotaEachHeroFinalProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DotaEachHeroFinalProto::MergeFrom(const DotaEachHeroFinalProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
    if (from.has_dead_count()) {
      set_dead_count(from.dead_count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DotaEachHeroFinalProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotaEachHeroFinalProto::CopyFrom(const DotaEachHeroFinalProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotaEachHeroFinalProto::IsInitialized() const {

  return true;
}

void DotaEachHeroFinalProto::Swap(DotaEachHeroFinalProto* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(point_, other->point_);
    std::swap(kill_count_, other->kill_count_);
    std::swap(dead_count_, other->dead_count_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DotaEachHeroFinalProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DotaEachHeroFinalProto_descriptor_;
  metadata.reflection = DotaEachHeroFinalProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HtzWorldRecordProto::kTimeRecordFieldNumber;
const int HtzWorldRecordProto::kDestroyRecordFieldNumber;
#endif  // !_MSC_VER

HtzWorldRecordProto::HtzWorldRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HtzWorldRecordProto::InitAsDefaultInstance() {
  time_record_ = const_cast< ::app::message::HtzTimeRecordProto*>(&::app::message::HtzTimeRecordProto::default_instance());
  destroy_record_ = const_cast< ::app::message::HtzDestroyRecordProto*>(&::app::message::HtzDestroyRecordProto::default_instance());
}

HtzWorldRecordProto::HtzWorldRecordProto(const HtzWorldRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HtzWorldRecordProto::SharedCtor() {
  _cached_size_ = 0;
  time_record_ = NULL;
  destroy_record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtzWorldRecordProto::~HtzWorldRecordProto() {
  SharedDtor();
}

void HtzWorldRecordProto::SharedDtor() {
  if (this != default_instance_) {
    delete time_record_;
    delete destroy_record_;
  }
}

void HtzWorldRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HtzWorldRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HtzWorldRecordProto_descriptor_;
}

const HtzWorldRecordProto& HtzWorldRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

HtzWorldRecordProto* HtzWorldRecordProto::default_instance_ = NULL;

HtzWorldRecordProto* HtzWorldRecordProto::New() const {
  return new HtzWorldRecordProto;
}

void HtzWorldRecordProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time_record()) {
      if (time_record_ != NULL) time_record_->::app::message::HtzTimeRecordProto::Clear();
    }
    if (has_destroy_record()) {
      if (destroy_record_ != NULL) destroy_record_->::app::message::HtzDestroyRecordProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HtzWorldRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.HtzTimeRecordProto time_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destroy_record;
        break;
      }

      // optional .app.message.HtzDestroyRecordProto destroy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destroy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HtzWorldRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.HtzTimeRecordProto time_record = 1;
  if (has_time_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time_record(), output);
  }

  // optional .app.message.HtzDestroyRecordProto destroy_record = 2;
  if (has_destroy_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->destroy_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HtzWorldRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.HtzTimeRecordProto time_record = 1;
  if (has_time_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time_record(), target);
  }

  // optional .app.message.HtzDestroyRecordProto destroy_record = 2;
  if (has_destroy_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->destroy_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HtzWorldRecordProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.HtzTimeRecordProto time_record = 1;
    if (has_time_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_record());
    }

    // optional .app.message.HtzDestroyRecordProto destroy_record = 2;
    if (has_destroy_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtzWorldRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HtzWorldRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HtzWorldRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HtzWorldRecordProto::MergeFrom(const HtzWorldRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_record()) {
      mutable_time_record()->::app::message::HtzTimeRecordProto::MergeFrom(from.time_record());
    }
    if (from.has_destroy_record()) {
      mutable_destroy_record()->::app::message::HtzDestroyRecordProto::MergeFrom(from.destroy_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HtzWorldRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtzWorldRecordProto::CopyFrom(const HtzWorldRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtzWorldRecordProto::IsInitialized() const {

  return true;
}

void HtzWorldRecordProto::Swap(HtzWorldRecordProto* other) {
  if (other != this) {
    std::swap(time_record_, other->time_record_);
    std::swap(destroy_record_, other->destroy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HtzWorldRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HtzWorldRecordProto_descriptor_;
  metadata.reflection = HtzWorldRecordProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HtzTimeRecordProto::kIdFieldNumber;
const int HtzTimeRecordProto::kNameFieldNumber;
const int HtzTimeRecordProto::kTimeFieldNumber;
#endif  // !_MSC_VER

HtzTimeRecordProto::HtzTimeRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HtzTimeRecordProto::InitAsDefaultInstance() {
}

HtzTimeRecordProto::HtzTimeRecordProto(const HtzTimeRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HtzTimeRecordProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtzTimeRecordProto::~HtzTimeRecordProto() {
  SharedDtor();
}

void HtzTimeRecordProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HtzTimeRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HtzTimeRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HtzTimeRecordProto_descriptor_;
}

const HtzTimeRecordProto& HtzTimeRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

HtzTimeRecordProto* HtzTimeRecordProto::default_instance_ = NULL;

HtzTimeRecordProto* HtzTimeRecordProto::New() const {
  return new HtzTimeRecordProto;
}

void HtzTimeRecordProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HtzTimeRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HtzTimeRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HtzTimeRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HtzTimeRecordProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtzTimeRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HtzTimeRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HtzTimeRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HtzTimeRecordProto::MergeFrom(const HtzTimeRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HtzTimeRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtzTimeRecordProto::CopyFrom(const HtzTimeRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtzTimeRecordProto::IsInitialized() const {

  return true;
}

void HtzTimeRecordProto::Swap(HtzTimeRecordProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HtzTimeRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HtzTimeRecordProto_descriptor_;
  metadata.reflection = HtzTimeRecordProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HtzDestroyRecordProto::kIdFieldNumber;
const int HtzDestroyRecordProto::kNameFieldNumber;
const int HtzDestroyRecordProto::kMaxDestoryFieldNumber;
#endif  // !_MSC_VER

HtzDestroyRecordProto::HtzDestroyRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HtzDestroyRecordProto::InitAsDefaultInstance() {
}

HtzDestroyRecordProto::HtzDestroyRecordProto(const HtzDestroyRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HtzDestroyRecordProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_destory_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtzDestroyRecordProto::~HtzDestroyRecordProto() {
  SharedDtor();
}

void HtzDestroyRecordProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HtzDestroyRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HtzDestroyRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HtzDestroyRecordProto_descriptor_;
}

const HtzDestroyRecordProto& HtzDestroyRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

HtzDestroyRecordProto* HtzDestroyRecordProto::default_instance_ = NULL;

HtzDestroyRecordProto* HtzDestroyRecordProto::New() const {
  return new HtzDestroyRecordProto;
}

void HtzDestroyRecordProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    max_destory_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HtzDestroyRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_destory;
        break;
      }

      // optional int32 max_destory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_destory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_destory_)));
          set_has_max_destory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HtzDestroyRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 max_destory = 3;
  if (has_max_destory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_destory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HtzDestroyRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 max_destory = 3;
  if (has_max_destory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_destory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HtzDestroyRecordProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 max_destory = 3;
    if (has_max_destory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_destory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtzDestroyRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HtzDestroyRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HtzDestroyRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HtzDestroyRecordProto::MergeFrom(const HtzDestroyRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_max_destory()) {
      set_max_destory(from.max_destory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HtzDestroyRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtzDestroyRecordProto::CopyFrom(const HtzDestroyRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtzDestroyRecordProto::IsInitialized() const {

  return true;
}

void HtzDestroyRecordProto::Swap(HtzDestroyRecordProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(max_destory_, other->max_destory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HtzDestroyRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HtzDestroyRecordProto_descriptor_;
  metadata.reflection = HtzDestroyRecordProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WuLinProto::kGroupMatchTimeFieldNumber;
const int WuLinProto::kGroupFieldNumber;
const int WuLinProto::kMatch16FieldNumber;
const int WuLinProto::kMatch8FieldNumber;
const int WuLinProto::kMatch4FieldNumber;
const int WuLinProto::kMatch2FieldNumber;
#endif  // !_MSC_VER

WuLinProto::WuLinProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WuLinProto::InitAsDefaultInstance() {
}

WuLinProto::WuLinProto(const WuLinProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WuLinProto::SharedCtor() {
  _cached_size_ = 0;
  group_match_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WuLinProto::~WuLinProto() {
  SharedDtor();
}

void WuLinProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WuLinProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WuLinProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WuLinProto_descriptor_;
}

const WuLinProto& WuLinProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

WuLinProto* WuLinProto::default_instance_ = NULL;

WuLinProto* WuLinProto::New() const {
  return new WuLinProto;
}

void WuLinProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_match_time_ = GOOGLE_LONGLONG(0);
  }
  group_.Clear();
  match_16_.Clear();
  match_8_.Clear();
  match_4_.Clear();
  match_2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WuLinProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 group_match_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_match_time_)));
          set_has_group_match_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // repeated .app.message.WuLinGroupProto group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        if (input->ExpectTag(26)) goto parse_match_16;
        break;
      }

      // repeated .app.message.WuLinMatchProto match_16 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_16:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_16()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_match_16;
        if (input->ExpectTag(34)) goto parse_match_8;
        break;
      }

      // repeated .app.message.WuLinMatchProto match_8 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_8()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match_8;
        if (input->ExpectTag(42)) goto parse_match_4;
        break;
      }

      // repeated .app.message.WuLinMatchProto match_4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_match_4;
        if (input->ExpectTag(50)) goto parse_match_2;
        break;
      }

      // repeated .app.message.WuLinMatchProto match_2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_match_2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WuLinProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 group_match_time = 1;
  if (has_group_match_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_match_time(), output);
  }

  // repeated .app.message.WuLinGroupProto group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(i), output);
  }

  // repeated .app.message.WuLinMatchProto match_16 = 3;
  for (int i = 0; i < this->match_16_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->match_16(i), output);
  }

  // repeated .app.message.WuLinMatchProto match_8 = 4;
  for (int i = 0; i < this->match_8_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->match_8(i), output);
  }

  // repeated .app.message.WuLinMatchProto match_4 = 5;
  for (int i = 0; i < this->match_4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->match_4(i), output);
  }

  // repeated .app.message.WuLinMatchProto match_2 = 6;
  for (int i = 0; i < this->match_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->match_2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WuLinProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 group_match_time = 1;
  if (has_group_match_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->group_match_time(), target);
  }

  // repeated .app.message.WuLinGroupProto group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group(i), target);
  }

  // repeated .app.message.WuLinMatchProto match_16 = 3;
  for (int i = 0; i < this->match_16_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->match_16(i), target);
  }

  // repeated .app.message.WuLinMatchProto match_8 = 4;
  for (int i = 0; i < this->match_8_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->match_8(i), target);
  }

  // repeated .app.message.WuLinMatchProto match_4 = 5;
  for (int i = 0; i < this->match_4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->match_4(i), target);
  }

  // repeated .app.message.WuLinMatchProto match_2 = 6;
  for (int i = 0; i < this->match_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->match_2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WuLinProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 group_match_time = 1;
    if (has_group_match_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_match_time());
    }

  }
  // repeated .app.message.WuLinGroupProto group = 2;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  // repeated .app.message.WuLinMatchProto match_16 = 3;
  total_size += 1 * this->match_16_size();
  for (int i = 0; i < this->match_16_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_16(i));
  }

  // repeated .app.message.WuLinMatchProto match_8 = 4;
  total_size += 1 * this->match_8_size();
  for (int i = 0; i < this->match_8_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_8(i));
  }

  // repeated .app.message.WuLinMatchProto match_4 = 5;
  total_size += 1 * this->match_4_size();
  for (int i = 0; i < this->match_4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_4(i));
  }

  // repeated .app.message.WuLinMatchProto match_2 = 6;
  total_size += 1 * this->match_2_size();
  for (int i = 0; i < this->match_2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WuLinProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WuLinProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WuLinProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WuLinProto::MergeFrom(const WuLinProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_.MergeFrom(from.group_);
  match_16_.MergeFrom(from.match_16_);
  match_8_.MergeFrom(from.match_8_);
  match_4_.MergeFrom(from.match_4_);
  match_2_.MergeFrom(from.match_2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_match_time()) {
      set_group_match_time(from.group_match_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WuLinProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WuLinProto::CopyFrom(const WuLinProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WuLinProto::IsInitialized() const {

  return true;
}

void WuLinProto::Swap(WuLinProto* other) {
  if (other != this) {
    std::swap(group_match_time_, other->group_match_time_);
    group_.Swap(&other->group_);
    match_16_.Swap(&other->match_16_);
    match_8_.Swap(&other->match_8_);
    match_4_.Swap(&other->match_4_);
    match_2_.Swap(&other->match_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WuLinProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WuLinProto_descriptor_;
  metadata.reflection = WuLinProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WuLinGroupProto::kHeroAFieldNumber;
const int WuLinGroupProto::kMatchAFieldNumber;
const int WuLinGroupProto::kHeroBFieldNumber;
const int WuLinGroupProto::kMatchBFieldNumber;
#endif  // !_MSC_VER

WuLinGroupProto::WuLinGroupProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WuLinGroupProto::InitAsDefaultInstance() {
}

WuLinGroupProto::WuLinGroupProto(const WuLinGroupProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WuLinGroupProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WuLinGroupProto::~WuLinGroupProto() {
  SharedDtor();
}

void WuLinGroupProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WuLinGroupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WuLinGroupProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WuLinGroupProto_descriptor_;
}

const WuLinGroupProto& WuLinGroupProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

WuLinGroupProto* WuLinGroupProto::default_instance_ = NULL;

WuLinGroupProto* WuLinGroupProto::New() const {
  return new WuLinGroupProto;
}

void WuLinGroupProto::Clear() {
  hero_a_.Clear();
  match_a_.Clear();
  hero_b_.Clear();
  match_b_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WuLinGroupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.WuLinHeroProto hero_a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hero_a;
        if (input->ExpectTag(18)) goto parse_match_a;
        break;
      }

      // repeated .app.message.WuLinMatchProto match_a = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_match_a;
        if (input->ExpectTag(26)) goto parse_hero_b;
        break;
      }

      // repeated .app.message.WuLinHeroProto hero_b = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_b;
        if (input->ExpectTag(34)) goto parse_match_b;
        break;
      }

      // repeated .app.message.WuLinMatchProto match_b = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match_b;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WuLinGroupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.WuLinHeroProto hero_a = 1;
  for (int i = 0; i < this->hero_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_a(i), output);
  }

  // repeated .app.message.WuLinMatchProto match_a = 2;
  for (int i = 0; i < this->match_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->match_a(i), output);
  }

  // repeated .app.message.WuLinHeroProto hero_b = 3;
  for (int i = 0; i < this->hero_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero_b(i), output);
  }

  // repeated .app.message.WuLinMatchProto match_b = 4;
  for (int i = 0; i < this->match_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->match_b(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WuLinGroupProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.WuLinHeroProto hero_a = 1;
  for (int i = 0; i < this->hero_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_a(i), target);
  }

  // repeated .app.message.WuLinMatchProto match_a = 2;
  for (int i = 0; i < this->match_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->match_a(i), target);
  }

  // repeated .app.message.WuLinHeroProto hero_b = 3;
  for (int i = 0; i < this->hero_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero_b(i), target);
  }

  // repeated .app.message.WuLinMatchProto match_b = 4;
  for (int i = 0; i < this->match_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->match_b(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WuLinGroupProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.WuLinHeroProto hero_a = 1;
  total_size += 1 * this->hero_a_size();
  for (int i = 0; i < this->hero_a_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_a(i));
  }

  // repeated .app.message.WuLinMatchProto match_a = 2;
  total_size += 1 * this->match_a_size();
  for (int i = 0; i < this->match_a_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_a(i));
  }

  // repeated .app.message.WuLinHeroProto hero_b = 3;
  total_size += 1 * this->hero_b_size();
  for (int i = 0; i < this->hero_b_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_b(i));
  }

  // repeated .app.message.WuLinMatchProto match_b = 4;
  total_size += 1 * this->match_b_size();
  for (int i = 0; i < this->match_b_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_b(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WuLinGroupProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WuLinGroupProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WuLinGroupProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WuLinGroupProto::MergeFrom(const WuLinGroupProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_a_.MergeFrom(from.hero_a_);
  match_a_.MergeFrom(from.match_a_);
  hero_b_.MergeFrom(from.hero_b_);
  match_b_.MergeFrom(from.match_b_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WuLinGroupProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WuLinGroupProto::CopyFrom(const WuLinGroupProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WuLinGroupProto::IsInitialized() const {

  return true;
}

void WuLinGroupProto::Swap(WuLinGroupProto* other) {
  if (other != this) {
    hero_a_.Swap(&other->hero_a_);
    match_a_.Swap(&other->match_a_);
    hero_b_.Swap(&other->hero_b_);
    match_b_.Swap(&other->match_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WuLinGroupProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WuLinGroupProto_descriptor_;
  metadata.reflection = WuLinGroupProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WuLinMatchProto::kStartTimeFieldNumber;
const int WuLinMatchProto::kEndTimeFieldNumber;
const int WuLinMatchProto::kResultFieldNumber;
const int WuLinMatchProto::kMatchIdFieldNumber;
const int WuLinMatchProto::kHero1FieldNumber;
const int WuLinMatchProto::kHero2FieldNumber;
const int WuLinMatchProto::kUuidFieldNumber;
const int WuLinMatchProto::kCombatServerIdFieldNumber;
const int WuLinMatchProto::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

WuLinMatchProto::WuLinMatchProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WuLinMatchProto::InitAsDefaultInstance() {
  hero_1_ = const_cast< ::app::message::WuLinHeroProto*>(&::app::message::WuLinHeroProto::default_instance());
  hero_2_ = const_cast< ::app::message::WuLinHeroProto*>(&::app::message::WuLinHeroProto::default_instance());
}

WuLinMatchProto::WuLinMatchProto(const WuLinMatchProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WuLinMatchProto::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  match_id_ = 0;
  hero_1_ = NULL;
  hero_2_ = NULL;
  uuid_ = 0;
  combat_server_id_ = GOOGLE_LONGLONG(0);
  match_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WuLinMatchProto::~WuLinMatchProto() {
  SharedDtor();
}

void WuLinMatchProto::SharedDtor() {
  if (this != default_instance_) {
    delete hero_1_;
    delete hero_2_;
  }
}

void WuLinMatchProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WuLinMatchProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WuLinMatchProto_descriptor_;
}

const WuLinMatchProto& WuLinMatchProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

WuLinMatchProto* WuLinMatchProto::default_instance_ = NULL;

WuLinMatchProto* WuLinMatchProto::New() const {
  return new WuLinMatchProto;
}

void WuLinMatchProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    result_ = 0;
    match_id_ = 0;
    if (has_hero_1()) {
      if (hero_1_ != NULL) hero_1_->::app::message::WuLinHeroProto::Clear();
    }
    if (has_hero_2()) {
      if (hero_2_ != NULL) hero_2_->::app::message::WuLinHeroProto::Clear();
    }
    uuid_ = 0;
    combat_server_id_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    match_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WuLinMatchProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_1;
        break;
      }

      // optional .app.message.WuLinHeroProto hero_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_2;
        break;
      }

      // optional .app.message.WuLinHeroProto hero_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uuid;
        break;
      }

      // optional int32 uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_combat_server_id;
        break;
      }

      // optional int64 combat_server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &combat_server_id_)));
          set_has_combat_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_match_type;
        break;
      }

      // optional .app.message.WuLinMatchType match_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::WuLinMatchType_IsValid(value)) {
            set_match_type(static_cast< ::app::message::WuLinMatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional int32 result = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_match_id;
        break;
      }

      // optional int32 match_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WuLinMatchProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  // optional .app.message.WuLinHeroProto hero_1 = 2;
  if (has_hero_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_1(), output);
  }

  // optional .app.message.WuLinHeroProto hero_2 = 3;
  if (has_hero_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero_2(), output);
  }

  // optional int32 uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uuid(), output);
  }

  // optional int64 combat_server_id = 5;
  if (has_combat_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->combat_server_id(), output);
  }

  // optional .app.message.WuLinMatchType match_type = 6;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->match_type(), output);
  }

  // optional int32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->result(), output);
  }

  // optional int32 match_id = 9;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->match_id(), output);
  }

  // optional int64 end_time = 10;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WuLinMatchProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time(), target);
  }

  // optional .app.message.WuLinHeroProto hero_1 = 2;
  if (has_hero_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_1(), target);
  }

  // optional .app.message.WuLinHeroProto hero_2 = 3;
  if (has_hero_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero_2(), target);
  }

  // optional int32 uuid = 4;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uuid(), target);
  }

  // optional int64 combat_server_id = 5;
  if (has_combat_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->combat_server_id(), target);
  }

  // optional .app.message.WuLinMatchType match_type = 6;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->match_type(), target);
  }

  // optional int32 result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->result(), target);
  }

  // optional int32 match_id = 9;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->match_id(), target);
  }

  // optional int64 end_time = 10;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WuLinMatchProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 10;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 match_id = 9;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_id());
    }

    // optional .app.message.WuLinHeroProto hero_1 = 2;
    if (has_hero_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_1());
    }

    // optional .app.message.WuLinHeroProto hero_2 = 3;
    if (has_hero_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_2());
    }

    // optional int32 uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }

    // optional int64 combat_server_id = 5;
    if (has_combat_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->combat_server_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.message.WuLinMatchType match_type = 6;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WuLinMatchProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WuLinMatchProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WuLinMatchProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WuLinMatchProto::MergeFrom(const WuLinMatchProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_hero_1()) {
      mutable_hero_1()->::app::message::WuLinHeroProto::MergeFrom(from.hero_1());
    }
    if (from.has_hero_2()) {
      mutable_hero_2()->::app::message::WuLinHeroProto::MergeFrom(from.hero_2());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_combat_server_id()) {
      set_combat_server_id(from.combat_server_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WuLinMatchProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WuLinMatchProto::CopyFrom(const WuLinMatchProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WuLinMatchProto::IsInitialized() const {

  return true;
}

void WuLinMatchProto::Swap(WuLinMatchProto* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(result_, other->result_);
    std::swap(match_id_, other->match_id_);
    std::swap(hero_1_, other->hero_1_);
    std::swap(hero_2_, other->hero_2_);
    std::swap(uuid_, other->uuid_);
    std::swap(combat_server_id_, other->combat_server_id_);
    std::swap(match_type_, other->match_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WuLinMatchProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WuLinMatchProto_descriptor_;
  metadata.reflection = WuLinMatchProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WuLinHeroProto::kHeroIdFieldNumber;
const int WuLinHeroProto::kHeroRaceFieldNumber;
const int WuLinHeroProto::kHeroNameFieldNumber;
const int WuLinHeroProto::kPairPointFieldNumber;
#endif  // !_MSC_VER

WuLinHeroProto::WuLinHeroProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WuLinHeroProto::InitAsDefaultInstance() {
}

WuLinHeroProto::WuLinHeroProto(const WuLinHeroProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WuLinHeroProto::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_race_ = 0;
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pair_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WuLinHeroProto::~WuLinHeroProto() {
  SharedDtor();
}

void WuLinHeroProto::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void WuLinHeroProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WuLinHeroProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WuLinHeroProto_descriptor_;
}

const WuLinHeroProto& WuLinHeroProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

WuLinHeroProto* WuLinHeroProto::default_instance_ = NULL;

WuLinHeroProto* WuLinHeroProto::New() const {
  return new WuLinHeroProto;
}

void WuLinHeroProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    hero_race_ = 0;
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    pair_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WuLinHeroProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_race;
        break;
      }

      // optional int32 hero_race = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_race_)));
          set_has_hero_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pair_point;
        break;
      }

      // optional int32 pair_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pair_point_)));
          set_has_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WuLinHeroProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional int32 hero_race = 2;
  if (has_hero_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_race(), output);
  }

  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hero_name(), output);
  }

  // optional int32 pair_point = 4;
  if (has_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pair_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WuLinHeroProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional int32 hero_race = 2;
  if (has_hero_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_race(), target);
  }

  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }

  // optional int32 pair_point = 4;
  if (has_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pair_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WuLinHeroProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional int32 hero_race = 2;
    if (has_hero_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_race());
    }

    // optional string hero_name = 3;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional int32 pair_point = 4;
    if (has_pair_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pair_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WuLinHeroProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WuLinHeroProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WuLinHeroProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WuLinHeroProto::MergeFrom(const WuLinHeroProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_race()) {
      set_hero_race(from.hero_race());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_pair_point()) {
      set_pair_point(from.pair_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WuLinHeroProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WuLinHeroProto::CopyFrom(const WuLinHeroProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WuLinHeroProto::IsInitialized() const {

  return true;
}

void WuLinHeroProto::Swap(WuLinHeroProto* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_race_, other->hero_race_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(pair_point_, other->pair_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WuLinHeroProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WuLinHeroProto_descriptor_;
  metadata.reflection = WuLinHeroProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WuLinMatchResultProto::kWinHeroIdFieldNumber;
const int WuLinMatchResultProto::kWinHeroNameFieldNumber;
const int WuLinMatchResultProto::kWinHeroDamageFieldNumber;
const int WuLinMatchResultProto::kLoseHeroIdFieldNumber;
const int WuLinMatchResultProto::kLoseHeroNameFieldNumber;
const int WuLinMatchResultProto::kLoseHeroDamageFieldNumber;
const int WuLinMatchResultProto::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

WuLinMatchResultProto::WuLinMatchResultProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WuLinMatchResultProto::InitAsDefaultInstance() {
}

WuLinMatchResultProto::WuLinMatchResultProto(const WuLinMatchResultProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WuLinMatchResultProto::SharedCtor() {
  _cached_size_ = 0;
  win_hero_id_ = GOOGLE_LONGLONG(0);
  win_hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_hero_damage_ = 0;
  lose_hero_id_ = GOOGLE_LONGLONG(0);
  lose_hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lose_hero_damage_ = 0;
  match_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WuLinMatchResultProto::~WuLinMatchResultProto() {
  SharedDtor();
}

void WuLinMatchResultProto::SharedDtor() {
  if (win_hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete win_hero_name_;
  }
  if (lose_hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lose_hero_name_;
  }
  if (this != default_instance_) {
  }
}

void WuLinMatchResultProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WuLinMatchResultProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WuLinMatchResultProto_descriptor_;
}

const WuLinMatchResultProto& WuLinMatchResultProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

WuLinMatchResultProto* WuLinMatchResultProto::default_instance_ = NULL;

WuLinMatchResultProto* WuLinMatchResultProto::New() const {
  return new WuLinMatchResultProto;
}

void WuLinMatchResultProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_hero_id_ = GOOGLE_LONGLONG(0);
    if (has_win_hero_name()) {
      if (win_hero_name_ != &::google::protobuf::internal::kEmptyString) {
        win_hero_name_->clear();
      }
    }
    win_hero_damage_ = 0;
    lose_hero_id_ = GOOGLE_LONGLONG(0);
    if (has_lose_hero_name()) {
      if (lose_hero_name_ != &::google::protobuf::internal::kEmptyString) {
        lose_hero_name_->clear();
      }
    }
    lose_hero_damage_ = 0;
    match_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WuLinMatchResultProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 win_hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_hero_id_)));
          set_has_win_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_win_hero_name;
        break;
      }

      // optional string win_hero_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_win_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->win_hero_name().data(), this->win_hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_hero_damage;
        break;
      }

      // optional int32 win_hero_damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_hero_damage_)));
          set_has_win_hero_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lose_hero_id;
        break;
      }

      // optional int64 lose_hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lose_hero_id_)));
          set_has_lose_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lose_hero_name;
        break;
      }

      // optional string lose_hero_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lose_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lose_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lose_hero_name().data(), this->lose_hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lose_hero_damage;
        break;
      }

      // optional int32 lose_hero_damage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_hero_damage_)));
          set_has_lose_hero_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_match_type;
        break;
      }

      // optional .app.message.WuLinMatchType match_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::WuLinMatchType_IsValid(value)) {
            set_match_type(static_cast< ::app::message::WuLinMatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WuLinMatchResultProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 win_hero_id = 1;
  if (has_win_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->win_hero_id(), output);
  }

  // optional string win_hero_name = 2;
  if (has_win_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_hero_name().data(), this->win_hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->win_hero_name(), output);
  }

  // optional int32 win_hero_damage = 3;
  if (has_win_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_hero_damage(), output);
  }

  // optional int64 lose_hero_id = 4;
  if (has_lose_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lose_hero_id(), output);
  }

  // optional string lose_hero_name = 5;
  if (has_lose_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lose_hero_name().data(), this->lose_hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lose_hero_name(), output);
  }

  // optional int32 lose_hero_damage = 6;
  if (has_lose_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lose_hero_damage(), output);
  }

  // optional .app.message.WuLinMatchType match_type = 7;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->match_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WuLinMatchResultProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 win_hero_id = 1;
  if (has_win_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->win_hero_id(), target);
  }

  // optional string win_hero_name = 2;
  if (has_win_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_hero_name().data(), this->win_hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->win_hero_name(), target);
  }

  // optional int32 win_hero_damage = 3;
  if (has_win_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_hero_damage(), target);
  }

  // optional int64 lose_hero_id = 4;
  if (has_lose_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lose_hero_id(), target);
  }

  // optional string lose_hero_name = 5;
  if (has_lose_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lose_hero_name().data(), this->lose_hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lose_hero_name(), target);
  }

  // optional int32 lose_hero_damage = 6;
  if (has_lose_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lose_hero_damage(), target);
  }

  // optional .app.message.WuLinMatchType match_type = 7;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->match_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WuLinMatchResultProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 win_hero_id = 1;
    if (has_win_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_hero_id());
    }

    // optional string win_hero_name = 2;
    if (has_win_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->win_hero_name());
    }

    // optional int32 win_hero_damage = 3;
    if (has_win_hero_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_hero_damage());
    }

    // optional int64 lose_hero_id = 4;
    if (has_lose_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lose_hero_id());
    }

    // optional string lose_hero_name = 5;
    if (has_lose_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lose_hero_name());
    }

    // optional int32 lose_hero_damage = 6;
    if (has_lose_hero_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_hero_damage());
    }

    // optional .app.message.WuLinMatchType match_type = 7;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WuLinMatchResultProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WuLinMatchResultProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WuLinMatchResultProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WuLinMatchResultProto::MergeFrom(const WuLinMatchResultProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_hero_id()) {
      set_win_hero_id(from.win_hero_id());
    }
    if (from.has_win_hero_name()) {
      set_win_hero_name(from.win_hero_name());
    }
    if (from.has_win_hero_damage()) {
      set_win_hero_damage(from.win_hero_damage());
    }
    if (from.has_lose_hero_id()) {
      set_lose_hero_id(from.lose_hero_id());
    }
    if (from.has_lose_hero_name()) {
      set_lose_hero_name(from.lose_hero_name());
    }
    if (from.has_lose_hero_damage()) {
      set_lose_hero_damage(from.lose_hero_damage());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WuLinMatchResultProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WuLinMatchResultProto::CopyFrom(const WuLinMatchResultProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WuLinMatchResultProto::IsInitialized() const {

  return true;
}

void WuLinMatchResultProto::Swap(WuLinMatchResultProto* other) {
  if (other != this) {
    std::swap(win_hero_id_, other->win_hero_id_);
    std::swap(win_hero_name_, other->win_hero_name_);
    std::swap(win_hero_damage_, other->win_hero_damage_);
    std::swap(lose_hero_id_, other->lose_hero_id_);
    std::swap(lose_hero_name_, other->lose_hero_name_);
    std::swap(lose_hero_damage_, other->lose_hero_damage_);
    std::swap(match_type_, other->match_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WuLinMatchResultProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WuLinMatchResultProto_descriptor_;
  metadata.reflection = WuLinMatchResultProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeleeInitProto::kHeroesFieldNumber;
const int MeleeInitProto::kBattleStartTimeFieldNumber;
#endif  // !_MSC_VER

MeleeInitProto::MeleeInitProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeleeInitProto::InitAsDefaultInstance() {
}

MeleeInitProto::MeleeInitProto(const MeleeInitProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeleeInitProto::SharedCtor() {
  _cached_size_ = 0;
  battle_start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeleeInitProto::~MeleeInitProto() {
  SharedDtor();
}

void MeleeInitProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeleeInitProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeleeInitProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeleeInitProto_descriptor_;
}

const MeleeInitProto& MeleeInitProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

MeleeInitProto* MeleeInitProto::default_instance_ = NULL;

MeleeInitProto* MeleeInitProto::New() const {
  return new MeleeInitProto;
}

void MeleeInitProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    battle_start_time_ = GOOGLE_LONGLONG(0);
  }
  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeleeInitProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroes;
        if (input->ExpectTag(16)) goto parse_battle_start_time;
        break;
      }

      // optional int64 battle_start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_start_time_)));
          set_has_battle_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeleeInitProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroes(i), output);
  }

  // optional int64 battle_start_time = 2;
  if (has_battle_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->battle_start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeleeInitProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroes(i), target);
  }

  // optional int64 battle_start_time = 2;
  if (has_battle_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->battle_start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeleeInitProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 battle_start_time = 2;
    if (has_battle_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_start_time());
    }

  }
  // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeleeInitProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeleeInitProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeleeInitProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeleeInitProto::MergeFrom(const MeleeInitProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battle_start_time()) {
      set_battle_start_time(from.battle_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeleeInitProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeleeInitProto::CopyFrom(const MeleeInitProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeleeInitProto::IsInitialized() const {

  return true;
}

void MeleeInitProto::Swap(MeleeInitProto* other) {
  if (other != this) {
    heroes_.Swap(&other->heroes_);
    std::swap(battle_start_time_, other->battle_start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeleeInitProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeleeInitProto_descriptor_;
  metadata.reflection = MeleeInitProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeleeEachHeroInfoProto::kHeroIdFieldNumber;
const int MeleeEachHeroInfoProto::kHeroNameFieldNumber;
const int MeleeEachHeroInfoProto::kKillFieldNumber;
const int MeleeEachHeroInfoProto::kAssistFieldNumber;
const int MeleeEachHeroInfoProto::kKillChangeTimeFieldNumber;
#endif  // !_MSC_VER

MeleeEachHeroInfoProto::MeleeEachHeroInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeleeEachHeroInfoProto::InitAsDefaultInstance() {
}

MeleeEachHeroInfoProto::MeleeEachHeroInfoProto(const MeleeEachHeroInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeleeEachHeroInfoProto::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kill_ = 0;
  assist_ = 0;
  kill_change_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeleeEachHeroInfoProto::~MeleeEachHeroInfoProto() {
  SharedDtor();
}

void MeleeEachHeroInfoProto::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void MeleeEachHeroInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeleeEachHeroInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeleeEachHeroInfoProto_descriptor_;
}

const MeleeEachHeroInfoProto& MeleeEachHeroInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

MeleeEachHeroInfoProto* MeleeEachHeroInfoProto::default_instance_ = NULL;

MeleeEachHeroInfoProto* MeleeEachHeroInfoProto::New() const {
  return new MeleeEachHeroInfoProto;
}

void MeleeEachHeroInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    kill_ = 0;
    assist_ = 0;
    kill_change_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeleeEachHeroInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill;
        break;
      }

      // optional int32 kill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_assist;
        break;
      }

      // optional int32 assist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assist_)));
          set_has_assist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kill_change_time;
        break;
      }

      // optional int64 kill_change_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_change_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kill_change_time_)));
          set_has_kill_change_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeleeEachHeroInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hero_name(), output);
  }

  // optional int32 kill = 3;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill(), output);
  }

  // optional int32 assist = 4;
  if (has_assist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->assist(), output);
  }

  // optional int64 kill_change_time = 5;
  if (has_kill_change_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->kill_change_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeleeEachHeroInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional string hero_name = 2;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hero_name(), target);
  }

  // optional int32 kill = 3;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill(), target);
  }

  // optional int32 assist = 4;
  if (has_assist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->assist(), target);
  }

  // optional int64 kill_change_time = 5;
  if (has_kill_change_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->kill_change_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeleeEachHeroInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional string hero_name = 2;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional int32 kill = 3;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

    // optional int32 assist = 4;
    if (has_assist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assist());
    }

    // optional int64 kill_change_time = 5;
    if (has_kill_change_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kill_change_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeleeEachHeroInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeleeEachHeroInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeleeEachHeroInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeleeEachHeroInfoProto::MergeFrom(const MeleeEachHeroInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_assist()) {
      set_assist(from.assist());
    }
    if (from.has_kill_change_time()) {
      set_kill_change_time(from.kill_change_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeleeEachHeroInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeleeEachHeroInfoProto::CopyFrom(const MeleeEachHeroInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeleeEachHeroInfoProto::IsInitialized() const {

  return true;
}

void MeleeEachHeroInfoProto::Swap(MeleeEachHeroInfoProto* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(kill_, other->kill_);
    std::swap(assist_, other->assist_);
    std::swap(kill_change_time_, other->kill_change_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeleeEachHeroInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeleeEachHeroInfoProto_descriptor_;
  metadata.reflection = MeleeEachHeroInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeleeFinalInfoProto::kHeroesFieldNumber;
const int MeleeFinalInfoProto::kWinHeroIdFieldNumber;
#endif  // !_MSC_VER

MeleeFinalInfoProto::MeleeFinalInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeleeFinalInfoProto::InitAsDefaultInstance() {
}

MeleeFinalInfoProto::MeleeFinalInfoProto(const MeleeFinalInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeleeFinalInfoProto::SharedCtor() {
  _cached_size_ = 0;
  win_hero_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeleeFinalInfoProto::~MeleeFinalInfoProto() {
  SharedDtor();
}

void MeleeFinalInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeleeFinalInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeleeFinalInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeleeFinalInfoProto_descriptor_;
}

const MeleeFinalInfoProto& MeleeFinalInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

MeleeFinalInfoProto* MeleeFinalInfoProto::default_instance_ = NULL;

MeleeFinalInfoProto* MeleeFinalInfoProto::New() const {
  return new MeleeFinalInfoProto;
}

void MeleeFinalInfoProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    win_hero_id_ = GOOGLE_LONGLONG(0);
  }
  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeleeFinalInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroes;
        if (input->ExpectTag(16)) goto parse_win_hero_id;
        break;
      }

      // optional int64 win_hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_hero_id_)));
          set_has_win_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeleeFinalInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroes(i), output);
  }

  // optional int64 win_hero_id = 2;
  if (has_win_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->win_hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeleeFinalInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroes(i), target);
  }

  // optional int64 win_hero_id = 2;
  if (has_win_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->win_hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeleeFinalInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 win_hero_id = 2;
    if (has_win_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_hero_id());
    }

  }
  // repeated .app.message.MeleeEachHeroInfoProto heroes = 1;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeleeFinalInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeleeFinalInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeleeFinalInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeleeFinalInfoProto::MergeFrom(const MeleeFinalInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_win_hero_id()) {
      set_win_hero_id(from.win_hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeleeFinalInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeleeFinalInfoProto::CopyFrom(const MeleeFinalInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeleeFinalInfoProto::IsInitialized() const {

  return true;
}

void MeleeFinalInfoProto::Swap(MeleeFinalInfoProto* other) {
  if (other != this) {
    heroes_.Swap(&other->heroes_);
    std::swap(win_hero_id_, other->win_hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeleeFinalInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeleeFinalInfoProto_descriptor_;
  metadata.reflection = MeleeFinalInfoProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
