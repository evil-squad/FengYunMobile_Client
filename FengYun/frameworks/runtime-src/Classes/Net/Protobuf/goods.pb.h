// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goods.proto

#ifndef PROTOBUF_goods_2eproto__INCLUDED
#define PROTOBUF_goods_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "spritestat.pb.h"
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_goods_2eproto();
void protobuf_AssignDesc_goods_2eproto();
void protobuf_ShutdownFile_goods_2eproto();

class GoodsDataProto;
class EquipmentDataProto;
class MountEquipmentDataProto;
class PetEquipmentDataProto;
class ShieldEquipmentDataProto;
class MedicineDataProto;
class MultiPrizeOnLimitedTimeGoodsDataProto;
class UpgradeGoodsDataProto;
class DailyCardDataProto;
class JinJieDanDataProto;
class JinJieLuckyCardDataProto;
class ChristmasGoodsDataProto;
class MarriageGiftDataProto;
class NiDaoQianKunDataProto;
class FireworkDataProto;
class QianNengHuanHuaLimitUpProto;
class GemDataProto;
class TransportationDataProto;
class BaoShiDataProto;
class ChipsGoodsDataProto;
class SpellBookDataProto;
class PetTongLingGiftSpellExpDataProto;
class ScriptGoodsDataProto;
class PanelGoodsDataProto;
class SpellXinfaDataProto;
class YuanbaoPackageDataProto;
class RefinedStatGoodsDataProto;
class BlessGoodsDataProto;
class SpellPracticeGoodsDataProto;
class GoodsProto;
class EquipmentProto;
class EquipmentBaoShiProto;
class MountEquipmentProto;
class ShieldEquipmentProto;
class PetEquipmentProto;
class BaoShiProto;
class SuperWeaponGemDataProto;
class GoodsWrapperProto;
class ExchangeGoodsWrapperProto;

enum SpellBookDataProto_SpellType {
  SpellBookDataProto_SpellType_HERO = 1,
  SpellBookDataProto_SpellType_MOUNT = 2,
  SpellBookDataProto_SpellType_SUPER_WEAPON = 3,
  SpellBookDataProto_SpellType_SUPER_ARM = 4,
  SpellBookDataProto_SpellType_BOW = 5,
  SpellBookDataProto_SpellType_PET = 6,
  SpellBookDataProto_SpellType_TIAN_JIE = 7,
  SpellBookDataProto_SpellType_TIAN_ZUI = 8,
  SpellBookDataProto_SpellType_CLOAK = 9,
  SpellBookDataProto_SpellType_SHIELD = 10,
  SpellBookDataProto_SpellType_LING_YU = 11,
  SpellBookDataProto_SpellType_MEI_REN_TONG_LING = 12
};
bool SpellBookDataProto_SpellType_IsValid(int value);
const SpellBookDataProto_SpellType SpellBookDataProto_SpellType_SpellType_MIN = SpellBookDataProto_SpellType_HERO;
const SpellBookDataProto_SpellType SpellBookDataProto_SpellType_SpellType_MAX = SpellBookDataProto_SpellType_MEI_REN_TONG_LING;
const int SpellBookDataProto_SpellType_SpellType_ARRAYSIZE = SpellBookDataProto_SpellType_SpellType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpellBookDataProto_SpellType_descriptor();
inline const ::std::string& SpellBookDataProto_SpellType_Name(SpellBookDataProto_SpellType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpellBookDataProto_SpellType_descriptor(), value);
}
inline bool SpellBookDataProto_SpellType_Parse(
    const ::std::string& name, SpellBookDataProto_SpellType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpellBookDataProto_SpellType>(
    SpellBookDataProto_SpellType_descriptor(), name, value);
}
enum PanelGoodsDataProto_PanelType {
  PanelGoodsDataProto_PanelType_MOUNT = 1,
  PanelGoodsDataProto_PanelType_BLACKSMITH = 2,
  PanelGoodsDataProto_PanelType_SUPER_WEAPON = 3,
  PanelGoodsDataProto_PanelType_SUPER_ARM = 4,
  PanelGoodsDataProto_PanelType_BOW = 5,
  PanelGoodsDataProto_PanelType_SPELL = 6,
  PanelGoodsDataProto_PanelType_GEM_PANEL = 7,
  PanelGoodsDataProto_PanelType_DIVINE = 8,
  PanelGoodsDataProto_PanelType_EQUIPMENT_LEVEL = 9,
  PanelGoodsDataProto_PanelType_PET = 10,
  PanelGoodsDataProto_PanelType_TIAN_ZUI = 11,
  PanelGoodsDataProto_PanelType_TIAN_JIE = 12,
  PanelGoodsDataProto_PanelType_SUPER_BLACKSMITH = 13,
  PanelGoodsDataProto_PanelType_WEAPON_XINFA = 14,
  PanelGoodsDataProto_PanelType_EQUIP_TI_PIN = 15,
  PanelGoodsDataProto_PanelType_DEMON = 16,
  PanelGoodsDataProto_PanelType_CLOAK = 17,
  PanelGoodsDataProto_PanelType_TRANSFER = 18,
  PanelGoodsDataProto_PanelType_QI_ZHEN_1 = 19,
  PanelGoodsDataProto_PanelType_QI_ZHEN_2 = 20,
  PanelGoodsDataProto_PanelType_QI_ZHEN_3 = 21,
  PanelGoodsDataProto_PanelType_QI_ZHEN_4 = 22,
  PanelGoodsDataProto_PanelType_QI_ZHEN_5 = 23,
  PanelGoodsDataProto_PanelType_QI_ZHEN_6 = 24,
  PanelGoodsDataProto_PanelType_QI_ZHEN_7 = 25,
  PanelGoodsDataProto_PanelType_QI_ZHEN_8 = 26,
  PanelGoodsDataProto_PanelType_QI_ZHEN_9 = 27,
  PanelGoodsDataProto_PanelType_QI_ZHEN_10 = 28,
  PanelGoodsDataProto_PanelType_QI_ZHEN_11 = 75,
  PanelGoodsDataProto_PanelType_QI_ZHEN_12 = 76,
  PanelGoodsDataProto_PanelType_QI_ZHEN_13 = 78,
  PanelGoodsDataProto_PanelType_QI_ZHEN_14 = 79,
  PanelGoodsDataProto_PanelType_QI_ZHEN_15 = 80,
  PanelGoodsDataProto_PanelType_QI_ZHEN_16 = 81,
  PanelGoodsDataProto_PanelType_QI_ZHEN_17 = 82,
  PanelGoodsDataProto_PanelType_QI_ZHEN_18 = 83,
  PanelGoodsDataProto_PanelType_QI_ZHEN_19 = 84,
  PanelGoodsDataProto_PanelType_QI_ZHEN_20 = 85,
  PanelGoodsDataProto_PanelType_MO_SHI = 30,
  PanelGoodsDataProto_PanelType_MO_SHI_0 = 31,
  PanelGoodsDataProto_PanelType_MO_SHI_1 = 32,
  PanelGoodsDataProto_PanelType_MO_SHI_2 = 33,
  PanelGoodsDataProto_PanelType_MO_SHI_3 = 34,
  PanelGoodsDataProto_PanelType_QIAN_QIU_DA_JIE_0 = 35,
  PanelGoodsDataProto_PanelType_QIAN_QIU_DA_JIE_1 = 36,
  PanelGoodsDataProto_PanelType_QIAN_QIU_DA_JIE = 37,
  PanelGoodsDataProto_PanelType_CHI_HUO_SHEN_GONG = 38,
  PanelGoodsDataProto_PanelType_CHANGE_NAME = 39,
  PanelGoodsDataProto_PanelType_CHANGE_RACE_CARD = 40,
  PanelGoodsDataProto_PanelType_NEW_DRAW_PRIZE = 41,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_1 = 42,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_2 = 43,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_3 = 44,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_4 = 45,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_5 = 46,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_6 = 47,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_7 = 48,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_8 = 49,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_9 = 50,
  PanelGoodsDataProto_PanelType_MOUNT_TONGLING_10 = 51,
  PanelGoodsDataProto_PanelType_MO_BING = 52,
  PanelGoodsDataProto_PanelType_MO_BING_0 = 53,
  PanelGoodsDataProto_PanelType_MO_BING_1 = 54,
  PanelGoodsDataProto_PanelType_MO_BING_2 = 55,
  PanelGoodsDataProto_PanelType_MO_BING_3 = 56,
  PanelGoodsDataProto_PanelType_MO_BING_4 = 57,
  PanelGoodsDataProto_PanelType_MO_BING_5 = 58,
  PanelGoodsDataProto_PanelType_MO_BING_6 = 59,
  PanelGoodsDataProto_PanelType_MO_BING_7 = 60,
  PanelGoodsDataProto_PanelType_MO_BING_8 = 61,
  PanelGoodsDataProto_PanelType_MO_BING_9 = 62,
  PanelGoodsDataProto_PanelType_MO_BING_10 = 63,
  PanelGoodsDataProto_PanelType_MO_BING_11 = 64,
  PanelGoodsDataProto_PanelType_WASH_XUNZHANF = 70,
  PanelGoodsDataProto_PanelType_TIAN_XIE = 71,
  PanelGoodsDataProto_PanelType_MONOPOLY = 72,
  PanelGoodsDataProto_PanelType_LOVE = 73,
  PanelGoodsDataProto_PanelType_WU_DAO = 74,
  PanelGoodsDataProto_PanelType_SHIELD = 86,
  PanelGoodsDataProto_PanelType_SHIELD_1 = 89,
  PanelGoodsDataProto_PanelType_SHIELD_2 = 90,
  PanelGoodsDataProto_PanelType_SHIELD_3 = 91,
  PanelGoodsDataProto_PanelType_SHIELD_4 = 92,
  PanelGoodsDataProto_PanelType_SHIELD_5 = 93,
  PanelGoodsDataProto_PanelType_HERO_BOSS_CARD = 87,
  PanelGoodsDataProto_PanelType_GUILD_BOSS_CARD = 88,
  PanelGoodsDataProto_PanelType_LING_YU = 99,
  PanelGoodsDataProto_PanelType_MOON_CAKE = 100,
  PanelGoodsDataProto_PanelType_BOW_TONG_LING = 101,
  PanelGoodsDataProto_PanelType_BOW_TONG_LING_2 = 102,
  PanelGoodsDataProto_PanelType_BOW_TONG_LING_3 = 103,
  PanelGoodsDataProto_PanelType_PET_TONG_LING = 111,
  PanelGoodsDataProto_PanelType_INLAY_BAO_SHI = 121,
  PanelGoodsDataProto_PanelType_MO_FANG = 131,
  PanelGoodsDataProto_PanelType_JIAN_DAO = 132
};
bool PanelGoodsDataProto_PanelType_IsValid(int value);
const PanelGoodsDataProto_PanelType PanelGoodsDataProto_PanelType_PanelType_MIN = PanelGoodsDataProto_PanelType_MOUNT;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto_PanelType_PanelType_MAX = PanelGoodsDataProto_PanelType_JIAN_DAO;
const int PanelGoodsDataProto_PanelType_PanelType_ARRAYSIZE = PanelGoodsDataProto_PanelType_PanelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PanelGoodsDataProto_PanelType_descriptor();
inline const ::std::string& PanelGoodsDataProto_PanelType_Name(PanelGoodsDataProto_PanelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PanelGoodsDataProto_PanelType_descriptor(), value);
}
inline bool PanelGoodsDataProto_PanelType_Parse(
    const ::std::string& name, PanelGoodsDataProto_PanelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PanelGoodsDataProto_PanelType>(
    PanelGoodsDataProto_PanelType_descriptor(), name, value);
}
enum XinfaType {
  CIRCLE = 1,
  RECTANGLE = 2,
  TRIANGLE = 3
};
bool XinfaType_IsValid(int value);
const XinfaType XinfaType_MIN = CIRCLE;
const XinfaType XinfaType_MAX = TRIANGLE;
const int XinfaType_ARRAYSIZE = XinfaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* XinfaType_descriptor();
inline const ::std::string& XinfaType_Name(XinfaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    XinfaType_descriptor(), value);
}
inline bool XinfaType_Parse(
    const ::std::string& name, XinfaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XinfaType>(
    XinfaType_descriptor(), name, value);
}
enum GoodsBornType {
  DIVINE = 1,
  EQUIP_GAOJI_MELT = 2,
  DRAW_PRIZE = 3,
  LUCKY_DRAW_PRIZE = 4,
  LUCKY_POINT_EXCHANGE = 5,
  DAILY_LUCKY_WHEEL = 6,
  NEW_DRAW_PRIZE = 7,
  NEW_POINT_EXCHANGE = 8,
  CREDITS_DRAW = 9,
  SECRET_SHOP = 10
};
bool GoodsBornType_IsValid(int value);
const GoodsBornType GoodsBornType_MIN = DIVINE;
const GoodsBornType GoodsBornType_MAX = SECRET_SHOP;
const int GoodsBornType_ARRAYSIZE = GoodsBornType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GoodsBornType_descriptor();
inline const ::std::string& GoodsBornType_Name(GoodsBornType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GoodsBornType_descriptor(), value);
}
inline bool GoodsBornType_Parse(
    const ::std::string& name, GoodsBornType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoodsBornType>(
    GoodsBornType_descriptor(), name, value);
}
// ===================================================================

class GoodsDataProto : public ::google::protobuf::Message {
 public:
  GoodsDataProto();
  virtual ~GoodsDataProto();

  GoodsDataProto(const GoodsDataProto& from);

  inline GoodsDataProto& operator=(const GoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsDataProto& default_instance();

  void Swap(GoodsDataProto* other);

  // implements Message ----------------------------------------------

  GoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsDataProto& from);
  void MergeFrom(const GoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int32 max_count = 5 [default = 1];
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 5;
  inline ::google::protobuf::int32 max_count() const;
  inline void set_max_count(::google::protobuf::int32 value);

  // optional int32 sell_price = 7;
  inline bool has_sell_price() const;
  inline void clear_sell_price();
  static const int kSellPriceFieldNumber = 7;
  inline ::google::protobuf::int32 sell_price() const;
  inline void set_sell_price(::google::protobuf::int32 value);

  // optional int32 quality = 9;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 9;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 require_level = 10 [default = 1];
  inline bool has_require_level() const;
  inline void clear_require_level();
  static const int kRequireLevelFieldNumber = 10;
  inline ::google::protobuf::int32 require_level() const;
  inline void set_require_level(::google::protobuf::int32 value);

  // optional int32 require_max_level = 24;
  inline bool has_require_max_level() const;
  inline void clear_require_max_level();
  static const int kRequireMaxLevelFieldNumber = 24;
  inline ::google::protobuf::int32 require_max_level() const;
  inline void set_require_max_level(::google::protobuf::int32 value);

  // optional string icon = 11;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 11;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional bool dropable = 15 [default = true];
  inline bool has_dropable() const;
  inline void clear_dropable();
  static const int kDropableFieldNumber = 15;
  inline bool dropable() const;
  inline void set_dropable(bool value);

  // optional bool verify_sell = 16;
  inline bool has_verify_sell() const;
  inline void clear_verify_sell();
  static const int kVerifySellFieldNumber = 16;
  inline bool verify_sell() const;
  inline void set_verify_sell(bool value);

  // optional bool verify_drop = 17;
  inline bool has_verify_drop() const;
  inline void clear_verify_drop();
  static const int kVerifyDropFieldNumber = 17;
  inline bool verify_drop() const;
  inline void set_verify_drop(bool value);

  // optional int32 cd_type = 18;
  inline bool has_cd_type() const;
  inline void clear_cd_type();
  static const int kCdTypeFieldNumber = 18;
  inline ::google::protobuf::int32 cd_type() const;
  inline void set_cd_type(::google::protobuf::int32 value);

  // optional bool useable = 19;
  inline bool has_useable() const;
  inline void clear_useable();
  static const int kUseableFieldNumber = 19;
  inline bool useable() const;
  inline void set_useable(bool value);

  // optional bool bulk_useable = 20;
  inline bool has_bulk_useable() const;
  inline void clear_bulk_useable();
  static const int kBulkUseableFieldNumber = 20;
  inline bool bulk_useable() const;
  inline void set_bulk_useable(bool value);

  // optional bool can_set_shortcut = 21;
  inline bool has_can_set_shortcut() const;
  inline void clear_can_set_shortcut();
  static const int kCanSetShortcutFieldNumber = 21;
  inline bool can_set_shortcut() const;
  inline void set_can_set_shortcut(bool value);

  // optional bool is_suggestion = 22;
  inline bool has_is_suggestion() const;
  inline void clear_is_suggestion();
  static const int kIsSuggestionFieldNumber = 22;
  inline bool is_suggestion() const;
  inline void set_is_suggestion(bool value);

  // optional int32 yitianshenjue_cuilian_value = 23;
  inline bool has_yitianshenjue_cuilian_value() const;
  inline void clear_yitianshenjue_cuilian_value();
  static const int kYitianshenjueCuilianValueFieldNumber = 23;
  inline ::google::protobuf::int32 yitianshenjue_cuilian_value() const;
  inline void set_yitianshenjue_cuilian_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.GoodsDataProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_max_count();
  inline void clear_has_max_count();
  inline void set_has_sell_price();
  inline void clear_has_sell_price();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_require_level();
  inline void clear_has_require_level();
  inline void set_has_require_max_level();
  inline void clear_has_require_max_level();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_dropable();
  inline void clear_has_dropable();
  inline void set_has_verify_sell();
  inline void clear_has_verify_sell();
  inline void set_has_verify_drop();
  inline void clear_has_verify_drop();
  inline void set_has_cd_type();
  inline void clear_has_cd_type();
  inline void set_has_useable();
  inline void clear_has_useable();
  inline void set_has_bulk_useable();
  inline void clear_has_bulk_useable();
  inline void set_has_can_set_shortcut();
  inline void clear_has_can_set_shortcut();
  inline void set_has_is_suggestion();
  inline void clear_has_is_suggestion();
  inline void set_has_yitianshenjue_cuilian_value();
  inline void clear_has_yitianshenjue_cuilian_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 max_count_;
  ::std::string* desc_;
  ::google::protobuf::int32 sell_price_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 require_level_;
  ::google::protobuf::int32 require_max_level_;
  ::std::string* icon_;
  bool dropable_;
  bool verify_sell_;
  bool verify_drop_;
  bool useable_;
  ::google::protobuf::int32 cd_type_;
  bool bulk_useable_;
  bool can_set_shortcut_;
  bool is_suggestion_;
  ::google::protobuf::int32 yitianshenjue_cuilian_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static GoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentDataProto : public ::google::protobuf::Message {
 public:
  EquipmentDataProto();
  virtual ~EquipmentDataProto();

  EquipmentDataProto(const EquipmentDataProto& from);

  inline EquipmentDataProto& operator=(const EquipmentDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentDataProto& default_instance();

  void Swap(EquipmentDataProto* other);

  // implements Message ----------------------------------------------

  EquipmentDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentDataProto& from);
  void MergeFrom(const EquipmentDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 equip_type = 2 [deprecated = true];
  inline bool has_equip_type() const PROTOBUF_DEPRECATED;
  inline void clear_equip_type() PROTOBUF_DEPRECATED;
  static const int kEquipTypeFieldNumber = 2;
  inline ::google::protobuf::int32 equip_type() const PROTOBUF_DEPRECATED;
  inline void set_equip_type(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional .app.message.SingleStatProto base_stat = 4 [deprecated = true];
  inline bool has_base_stat() const PROTOBUF_DEPRECATED;
  inline void clear_base_stat() PROTOBUF_DEPRECATED;
  static const int kBaseStatFieldNumber = 4;
  inline const ::app::message::SingleStatProto& base_stat() const PROTOBUF_DEPRECATED;
  inline ::app::message::SingleStatProto* mutable_base_stat() PROTOBUF_DEPRECATED;
  inline ::app::message::SingleStatProto* release_base_stat() PROTOBUF_DEPRECATED;
  inline void set_allocated_base_stat(::app::message::SingleStatProto* base_stat) PROTOBUF_DEPRECATED;

  // optional int32 refined_max_times = 5;
  inline bool has_refined_max_times() const;
  inline void clear_refined_max_times();
  static const int kRefinedMaxTimesFieldNumber = 5;
  inline ::google::protobuf::int32 refined_max_times() const;
  inline void set_refined_max_times(::google::protobuf::int32 value);

  // optional int32 added_stat_max_count = 6;
  inline bool has_added_stat_max_count() const;
  inline void clear_added_stat_max_count();
  static const int kAddedStatMaxCountFieldNumber = 6;
  inline ::google::protobuf::int32 added_stat_max_count() const;
  inline void set_added_stat_max_count(::google::protobuf::int32 value);

  // optional int32 race = 7;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 7;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 type = 8 [deprecated = true];
  inline bool has_type() const PROTOBUF_DEPRECATED;
  inline void clear_type() PROTOBUF_DEPRECATED;
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::int32 type() const PROTOBUF_DEPRECATED;
  inline void set_type(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 base_fighting_amount = 10 [deprecated = true];
  inline bool has_base_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_base_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kBaseFightingAmountFieldNumber = 10;
  inline ::google::protobuf::int32 base_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_base_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  inline bool has_best_refined_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_best_refined_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kBestRefinedFightingAmountFieldNumber = 11;
  inline ::google::protobuf::int32 best_refined_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_best_refined_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional bool can_refined = 12;
  inline bool has_can_refined() const;
  inline void clear_can_refined();
  static const int kCanRefinedFieldNumber = 12;
  inline bool can_refined() const;
  inline void set_can_refined(bool value);

  // optional int32 next_level_equipment = 14;
  inline bool has_next_level_equipment() const;
  inline void clear_next_level_equipment();
  static const int kNextLevelEquipmentFieldNumber = 14;
  inline ::google::protobuf::int32 next_level_equipment() const;
  inline void set_next_level_equipment(::google::protobuf::int32 value);

  // optional int32 taoz = 15;
  inline bool has_taoz() const;
  inline void clear_taoz();
  static const int kTaozFieldNumber = 15;
  inline ::google::protobuf::int32 taoz() const;
  inline void set_taoz(::google::protobuf::int32 value);

  // optional int32 hecheng_equipment = 16;
  inline bool has_hecheng_equipment() const;
  inline void clear_hecheng_equipment();
  static const int kHechengEquipmentFieldNumber = 16;
  inline ::google::protobuf::int32 hecheng_equipment() const;
  inline void set_hecheng_equipment(::google::protobuf::int32 value);

  // optional int32 hecheng_type = 17;
  inline bool has_hecheng_type() const;
  inline void clear_hecheng_type();
  static const int kHechengTypeFieldNumber = 17;
  inline ::google::protobuf::int32 hecheng_type() const;
  inline void set_hecheng_type(::google::protobuf::int32 value);

  // optional int32 normal_refined_max_times = 23;
  inline bool has_normal_refined_max_times() const;
  inline void clear_normal_refined_max_times();
  static const int kNormalRefinedMaxTimesFieldNumber = 23;
  inline ::google::protobuf::int32 normal_refined_max_times() const;
  inline void set_normal_refined_max_times(::google::protobuf::int32 value);

  // optional int32 resource = 24;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 24;
  inline ::google::protobuf::int32 resource() const;
  inline void set_resource(::google::protobuf::int32 value);

  // optional int64 fashion_expire_time = 25;
  inline bool has_fashion_expire_time() const;
  inline void clear_fashion_expire_time();
  static const int kFashionExpireTimeFieldNumber = 25;
  inline ::google::protobuf::int64 fashion_expire_time() const;
  inline void set_fashion_expire_time(::google::protobuf::int64 value);

  // optional int32 hecheng_limit = 26;
  inline bool has_hecheng_limit() const;
  inline void clear_hecheng_limit();
  static const int kHechengLimitFieldNumber = 26;
  inline ::google::protobuf::int32 hecheng_limit() const;
  inline void set_hecheng_limit(::google::protobuf::int32 value);

  // optional int32 yu_yi_ge_type = 27;
  inline bool has_yu_yi_ge_type() const;
  inline void clear_yu_yi_ge_type();
  static const int kYuYiGeTypeFieldNumber = 27;
  inline ::google::protobuf::int32 yu_yi_ge_type() const;
  inline void set_yu_yi_ge_type(::google::protobuf::int32 value);

  // optional int32 yu_yi_ge_bless_amount = 28;
  inline bool has_yu_yi_ge_bless_amount() const;
  inline void clear_yu_yi_ge_bless_amount();
  static const int kYuYiGeBlessAmountFieldNumber = 28;
  inline ::google::protobuf::int32 yu_yi_ge_bless_amount() const;
  inline void set_yu_yi_ge_bless_amount(::google::protobuf::int32 value);

  // optional int32 inlay_hole_count = 29;
  inline bool has_inlay_hole_count() const;
  inline void clear_inlay_hole_count();
  static const int kInlayHoleCountFieldNumber = 29;
  inline ::google::protobuf::int32 inlay_hole_count() const;
  inline void set_inlay_hole_count(::google::protobuf::int32 value);

  // optional int32 spell = 30;
  inline bool has_spell() const;
  inline void clear_spell();
  static const int kSpellFieldNumber = 30;
  inline ::google::protobuf::int32 spell() const;
  inline void set_spell(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.EquipmentDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_equip_type();
  inline void clear_has_equip_type();
  inline void set_has_base_stat();
  inline void clear_has_base_stat();
  inline void set_has_refined_max_times();
  inline void clear_has_refined_max_times();
  inline void set_has_added_stat_max_count();
  inline void clear_has_added_stat_max_count();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_best_refined_fighting_amount();
  inline void clear_has_best_refined_fighting_amount();
  inline void set_has_can_refined();
  inline void clear_has_can_refined();
  inline void set_has_next_level_equipment();
  inline void clear_has_next_level_equipment();
  inline void set_has_taoz();
  inline void clear_has_taoz();
  inline void set_has_hecheng_equipment();
  inline void clear_has_hecheng_equipment();
  inline void set_has_hecheng_type();
  inline void clear_has_hecheng_type();
  inline void set_has_normal_refined_max_times();
  inline void clear_has_normal_refined_max_times();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_fashion_expire_time();
  inline void clear_has_fashion_expire_time();
  inline void set_has_hecheng_limit();
  inline void clear_has_hecheng_limit();
  inline void set_has_yu_yi_ge_type();
  inline void clear_has_yu_yi_ge_type();
  inline void set_has_yu_yi_ge_bless_amount();
  inline void clear_has_yu_yi_ge_bless_amount();
  inline void set_has_inlay_hole_count();
  inline void clear_has_inlay_hole_count();
  inline void set_has_spell();
  inline void clear_has_spell();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::app::message::SingleStatProto* base_stat_;
  ::google::protobuf::int32 equip_type_;
  ::google::protobuf::int32 refined_max_times_;
  ::google::protobuf::int32 added_stat_max_count_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 best_refined_fighting_amount_;
  bool can_refined_;
  ::google::protobuf::int32 next_level_equipment_;
  ::google::protobuf::int32 taoz_;
  ::google::protobuf::int32 hecheng_equipment_;
  ::google::protobuf::int32 hecheng_type_;
  ::google::protobuf::int32 normal_refined_max_times_;
  ::google::protobuf::int64 fashion_expire_time_;
  ::google::protobuf::int32 resource_;
  ::google::protobuf::int32 hecheng_limit_;
  ::google::protobuf::int32 yu_yi_ge_type_;
  ::google::protobuf::int32 yu_yi_ge_bless_amount_;
  ::google::protobuf::int32 inlay_hole_count_;
  ::google::protobuf::int32 spell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static EquipmentDataProto* default_instance_;
};
// -------------------------------------------------------------------

class MountEquipmentDataProto : public ::google::protobuf::Message {
 public:
  MountEquipmentDataProto();
  virtual ~MountEquipmentDataProto();

  MountEquipmentDataProto(const MountEquipmentDataProto& from);

  inline MountEquipmentDataProto& operator=(const MountEquipmentDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MountEquipmentDataProto& default_instance();

  void Swap(MountEquipmentDataProto* other);

  // implements Message ----------------------------------------------

  MountEquipmentDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountEquipmentDataProto& from);
  void MergeFrom(const MountEquipmentDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
  inline bool has_base_stat() const PROTOBUF_DEPRECATED;
  inline void clear_base_stat() PROTOBUF_DEPRECATED;
  static const int kBaseStatFieldNumber = 3;
  inline const ::app::message::SingleStatProto& base_stat() const PROTOBUF_DEPRECATED;
  inline ::app::message::SingleStatProto* mutable_base_stat() PROTOBUF_DEPRECATED;
  inline ::app::message::SingleStatProto* release_base_stat() PROTOBUF_DEPRECATED;
  inline void set_allocated_base_stat(::app::message::SingleStatProto* base_stat) PROTOBUF_DEPRECATED;

  // optional int32 base_fighting_amount = 4 [deprecated = true];
  inline bool has_base_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_base_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kBaseFightingAmountFieldNumber = 4;
  inline ::google::protobuf::int32 base_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_base_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 refined_max_times = 5;
  inline bool has_refined_max_times() const;
  inline void clear_refined_max_times();
  static const int kRefinedMaxTimesFieldNumber = 5;
  inline ::google::protobuf::int32 refined_max_times() const;
  inline void set_refined_max_times(::google::protobuf::int32 value);

  // optional int32 added_stat_max_count = 6;
  inline bool has_added_stat_max_count() const;
  inline void clear_added_stat_max_count();
  static const int kAddedStatMaxCountFieldNumber = 6;
  inline ::google::protobuf::int32 added_stat_max_count() const;
  inline void set_added_stat_max_count(::google::protobuf::int32 value);

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  inline bool has_best_refined_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_best_refined_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kBestRefinedFightingAmountFieldNumber = 11;
  inline ::google::protobuf::int32 best_refined_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_best_refined_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 require_mount_level = 20;
  inline bool has_require_mount_level() const;
  inline void clear_require_mount_level();
  static const int kRequireMountLevelFieldNumber = 20;
  inline ::google::protobuf::int32 require_mount_level() const;
  inline void set_require_mount_level(::google::protobuf::int32 value);

  // optional bool can_refined = 21;
  inline bool has_can_refined() const;
  inline void clear_can_refined();
  static const int kCanRefinedFieldNumber = 21;
  inline bool can_refined() const;
  inline void set_can_refined(bool value);

  // optional int32 next_level_equipment = 22;
  inline bool has_next_level_equipment() const;
  inline void clear_next_level_equipment();
  static const int kNextLevelEquipmentFieldNumber = 22;
  inline ::google::protobuf::int32 next_level_equipment() const;
  inline void set_next_level_equipment(::google::protobuf::int32 value);

  // optional int32 normal_refined_max_times = 23;
  inline bool has_normal_refined_max_times() const;
  inline void clear_normal_refined_max_times();
  static const int kNormalRefinedMaxTimesFieldNumber = 23;
  inline ::google::protobuf::int32 normal_refined_max_times() const;
  inline void set_normal_refined_max_times(::google::protobuf::int32 value);

  // optional int32 hecheng_equipment = 24;
  inline bool has_hecheng_equipment() const;
  inline void clear_hecheng_equipment();
  static const int kHechengEquipmentFieldNumber = 24;
  inline ::google::protobuf::int32 hecheng_equipment() const;
  inline void set_hecheng_equipment(::google::protobuf::int32 value);

  // optional int32 hecheng_type = 25;
  inline bool has_hecheng_type() const;
  inline void clear_hecheng_type();
  static const int kHechengTypeFieldNumber = 25;
  inline ::google::protobuf::int32 hecheng_type() const;
  inline void set_hecheng_type(::google::protobuf::int32 value);

  // optional int32 hecheng_limit = 26;
  inline bool has_hecheng_limit() const;
  inline void clear_hecheng_limit();
  static const int kHechengLimitFieldNumber = 26;
  inline ::google::protobuf::int32 hecheng_limit() const;
  inline void set_hecheng_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MountEquipmentDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_base_stat();
  inline void clear_has_base_stat();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_refined_max_times();
  inline void clear_has_refined_max_times();
  inline void set_has_added_stat_max_count();
  inline void clear_has_added_stat_max_count();
  inline void set_has_best_refined_fighting_amount();
  inline void clear_has_best_refined_fighting_amount();
  inline void set_has_require_mount_level();
  inline void clear_has_require_mount_level();
  inline void set_has_can_refined();
  inline void clear_has_can_refined();
  inline void set_has_next_level_equipment();
  inline void clear_has_next_level_equipment();
  inline void set_has_normal_refined_max_times();
  inline void clear_has_normal_refined_max_times();
  inline void set_has_hecheng_equipment();
  inline void clear_has_hecheng_equipment();
  inline void set_has_hecheng_type();
  inline void clear_has_hecheng_type();
  inline void set_has_hecheng_limit();
  inline void clear_has_hecheng_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::app::message::SingleStatProto* base_stat_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 refined_max_times_;
  ::google::protobuf::int32 added_stat_max_count_;
  ::google::protobuf::int32 best_refined_fighting_amount_;
  ::google::protobuf::int32 require_mount_level_;
  bool can_refined_;
  ::google::protobuf::int32 next_level_equipment_;
  ::google::protobuf::int32 normal_refined_max_times_;
  ::google::protobuf::int32 hecheng_equipment_;
  ::google::protobuf::int32 hecheng_type_;
  ::google::protobuf::int32 hecheng_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static MountEquipmentDataProto* default_instance_;
};
// -------------------------------------------------------------------

class PetEquipmentDataProto : public ::google::protobuf::Message {
 public:
  PetEquipmentDataProto();
  virtual ~PetEquipmentDataProto();

  PetEquipmentDataProto(const PetEquipmentDataProto& from);

  inline PetEquipmentDataProto& operator=(const PetEquipmentDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetEquipmentDataProto& default_instance();

  void Swap(PetEquipmentDataProto* other);

  // implements Message ----------------------------------------------

  PetEquipmentDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetEquipmentDataProto& from);
  void MergeFrom(const PetEquipmentDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 refined_max_times = 3;
  inline bool has_refined_max_times() const;
  inline void clear_refined_max_times();
  static const int kRefinedMaxTimesFieldNumber = 3;
  inline ::google::protobuf::int32 refined_max_times() const;
  inline void set_refined_max_times(::google::protobuf::int32 value);

  // optional int32 added_stat_max_count = 4;
  inline bool has_added_stat_max_count() const;
  inline void clear_added_stat_max_count();
  static const int kAddedStatMaxCountFieldNumber = 4;
  inline ::google::protobuf::int32 added_stat_max_count() const;
  inline void set_added_stat_max_count(::google::protobuf::int32 value);

  // optional bool can_refined = 5;
  inline bool has_can_refined() const;
  inline void clear_can_refined();
  static const int kCanRefinedFieldNumber = 5;
  inline bool can_refined() const;
  inline void set_can_refined(bool value);

  // optional int32 next_level_equipment = 6;
  inline bool has_next_level_equipment() const;
  inline void clear_next_level_equipment();
  static const int kNextLevelEquipmentFieldNumber = 6;
  inline ::google::protobuf::int32 next_level_equipment() const;
  inline void set_next_level_equipment(::google::protobuf::int32 value);

  // optional int32 normal_refined_max_times = 7;
  inline bool has_normal_refined_max_times() const;
  inline void clear_normal_refined_max_times();
  static const int kNormalRefinedMaxTimesFieldNumber = 7;
  inline ::google::protobuf::int32 normal_refined_max_times() const;
  inline void set_normal_refined_max_times(::google::protobuf::int32 value);

  // optional int32 hecheng_equipment = 8;
  inline bool has_hecheng_equipment() const;
  inline void clear_hecheng_equipment();
  static const int kHechengEquipmentFieldNumber = 8;
  inline ::google::protobuf::int32 hecheng_equipment() const;
  inline void set_hecheng_equipment(::google::protobuf::int32 value);

  // optional int32 hecheng_type = 9;
  inline bool has_hecheng_type() const;
  inline void clear_hecheng_type();
  static const int kHechengTypeFieldNumber = 9;
  inline ::google::protobuf::int32 hecheng_type() const;
  inline void set_hecheng_type(::google::protobuf::int32 value);

  // optional int32 hecheng_limit = 10;
  inline bool has_hecheng_limit() const;
  inline void clear_hecheng_limit();
  static const int kHechengLimitFieldNumber = 10;
  inline ::google::protobuf::int32 hecheng_limit() const;
  inline void set_hecheng_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PetEquipmentDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_refined_max_times();
  inline void clear_has_refined_max_times();
  inline void set_has_added_stat_max_count();
  inline void clear_has_added_stat_max_count();
  inline void set_has_can_refined();
  inline void clear_has_can_refined();
  inline void set_has_next_level_equipment();
  inline void clear_has_next_level_equipment();
  inline void set_has_normal_refined_max_times();
  inline void clear_has_normal_refined_max_times();
  inline void set_has_hecheng_equipment();
  inline void clear_has_hecheng_equipment();
  inline void set_has_hecheng_type();
  inline void clear_has_hecheng_type();
  inline void set_has_hecheng_limit();
  inline void clear_has_hecheng_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 refined_max_times_;
  ::google::protobuf::int32 added_stat_max_count_;
  bool can_refined_;
  ::google::protobuf::int32 next_level_equipment_;
  ::google::protobuf::int32 normal_refined_max_times_;
  ::google::protobuf::int32 hecheng_equipment_;
  ::google::protobuf::int32 hecheng_type_;
  ::google::protobuf::int32 hecheng_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static PetEquipmentDataProto* default_instance_;
};
// -------------------------------------------------------------------

class ShieldEquipmentDataProto : public ::google::protobuf::Message {
 public:
  ShieldEquipmentDataProto();
  virtual ~ShieldEquipmentDataProto();

  ShieldEquipmentDataProto(const ShieldEquipmentDataProto& from);

  inline ShieldEquipmentDataProto& operator=(const ShieldEquipmentDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShieldEquipmentDataProto& default_instance();

  void Swap(ShieldEquipmentDataProto* other);

  // implements Message ----------------------------------------------

  ShieldEquipmentDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShieldEquipmentDataProto& from);
  void MergeFrom(const ShieldEquipmentDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
  inline bool has_base_stat() const PROTOBUF_DEPRECATED;
  inline void clear_base_stat() PROTOBUF_DEPRECATED;
  static const int kBaseStatFieldNumber = 3;
  inline const ::app::message::SingleStatProto& base_stat() const PROTOBUF_DEPRECATED;
  inline ::app::message::SingleStatProto* mutable_base_stat() PROTOBUF_DEPRECATED;
  inline ::app::message::SingleStatProto* release_base_stat() PROTOBUF_DEPRECATED;
  inline void set_allocated_base_stat(::app::message::SingleStatProto* base_stat) PROTOBUF_DEPRECATED;

  // optional int32 base_fighting_amount = 4 [deprecated = true];
  inline bool has_base_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_base_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kBaseFightingAmountFieldNumber = 4;
  inline ::google::protobuf::int32 base_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_base_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 refined_max_times = 5;
  inline bool has_refined_max_times() const;
  inline void clear_refined_max_times();
  static const int kRefinedMaxTimesFieldNumber = 5;
  inline ::google::protobuf::int32 refined_max_times() const;
  inline void set_refined_max_times(::google::protobuf::int32 value);

  // optional int32 added_stat_max_count = 6;
  inline bool has_added_stat_max_count() const;
  inline void clear_added_stat_max_count();
  static const int kAddedStatMaxCountFieldNumber = 6;
  inline ::google::protobuf::int32 added_stat_max_count() const;
  inline void set_added_stat_max_count(::google::protobuf::int32 value);

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  inline bool has_best_refined_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_best_refined_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kBestRefinedFightingAmountFieldNumber = 11;
  inline ::google::protobuf::int32 best_refined_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_best_refined_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 require_shield_level = 20;
  inline bool has_require_shield_level() const;
  inline void clear_require_shield_level();
  static const int kRequireShieldLevelFieldNumber = 20;
  inline ::google::protobuf::int32 require_shield_level() const;
  inline void set_require_shield_level(::google::protobuf::int32 value);

  // optional bool can_refined = 21;
  inline bool has_can_refined() const;
  inline void clear_can_refined();
  static const int kCanRefinedFieldNumber = 21;
  inline bool can_refined() const;
  inline void set_can_refined(bool value);

  // optional int32 next_level_equipment = 22;
  inline bool has_next_level_equipment() const;
  inline void clear_next_level_equipment();
  static const int kNextLevelEquipmentFieldNumber = 22;
  inline ::google::protobuf::int32 next_level_equipment() const;
  inline void set_next_level_equipment(::google::protobuf::int32 value);

  // optional int32 normal_refined_max_times = 23;
  inline bool has_normal_refined_max_times() const;
  inline void clear_normal_refined_max_times();
  static const int kNormalRefinedMaxTimesFieldNumber = 23;
  inline ::google::protobuf::int32 normal_refined_max_times() const;
  inline void set_normal_refined_max_times(::google::protobuf::int32 value);

  // optional int32 hecheng_equipment = 24;
  inline bool has_hecheng_equipment() const;
  inline void clear_hecheng_equipment();
  static const int kHechengEquipmentFieldNumber = 24;
  inline ::google::protobuf::int32 hecheng_equipment() const;
  inline void set_hecheng_equipment(::google::protobuf::int32 value);

  // optional int32 hecheng_type = 25;
  inline bool has_hecheng_type() const;
  inline void clear_hecheng_type();
  static const int kHechengTypeFieldNumber = 25;
  inline ::google::protobuf::int32 hecheng_type() const;
  inline void set_hecheng_type(::google::protobuf::int32 value);

  // optional int32 hecheng_limit = 26;
  inline bool has_hecheng_limit() const;
  inline void clear_hecheng_limit();
  static const int kHechengLimitFieldNumber = 26;
  inline ::google::protobuf::int32 hecheng_limit() const;
  inline void set_hecheng_limit(::google::protobuf::int32 value);

  // optional int32 shield_type = 27;
  inline bool has_shield_type() const;
  inline void clear_shield_type();
  static const int kShieldTypeFieldNumber = 27;
  inline ::google::protobuf::int32 shield_type() const;
  inline void set_shield_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ShieldEquipmentDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_base_stat();
  inline void clear_has_base_stat();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_refined_max_times();
  inline void clear_has_refined_max_times();
  inline void set_has_added_stat_max_count();
  inline void clear_has_added_stat_max_count();
  inline void set_has_best_refined_fighting_amount();
  inline void clear_has_best_refined_fighting_amount();
  inline void set_has_require_shield_level();
  inline void clear_has_require_shield_level();
  inline void set_has_can_refined();
  inline void clear_has_can_refined();
  inline void set_has_next_level_equipment();
  inline void clear_has_next_level_equipment();
  inline void set_has_normal_refined_max_times();
  inline void clear_has_normal_refined_max_times();
  inline void set_has_hecheng_equipment();
  inline void clear_has_hecheng_equipment();
  inline void set_has_hecheng_type();
  inline void clear_has_hecheng_type();
  inline void set_has_hecheng_limit();
  inline void clear_has_hecheng_limit();
  inline void set_has_shield_type();
  inline void clear_has_shield_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::app::message::SingleStatProto* base_stat_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 refined_max_times_;
  ::google::protobuf::int32 added_stat_max_count_;
  ::google::protobuf::int32 best_refined_fighting_amount_;
  ::google::protobuf::int32 require_shield_level_;
  bool can_refined_;
  ::google::protobuf::int32 next_level_equipment_;
  ::google::protobuf::int32 normal_refined_max_times_;
  ::google::protobuf::int32 hecheng_equipment_;
  ::google::protobuf::int32 hecheng_type_;
  ::google::protobuf::int32 hecheng_limit_;
  ::google::protobuf::int32 shield_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static ShieldEquipmentDataProto* default_instance_;
};
// -------------------------------------------------------------------

class MedicineDataProto : public ::google::protobuf::Message {
 public:
  MedicineDataProto();
  virtual ~MedicineDataProto();

  MedicineDataProto(const MedicineDataProto& from);

  inline MedicineDataProto& operator=(const MedicineDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MedicineDataProto& default_instance();

  void Swap(MedicineDataProto* other);

  // implements Message ----------------------------------------------

  MedicineDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MedicineDataProto& from);
  void MergeFrom(const MedicineDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 efficacy = 2;
  inline bool has_efficacy() const;
  inline void clear_efficacy();
  static const int kEfficacyFieldNumber = 2;
  inline ::google::protobuf::int32 efficacy() const;
  inline void set_efficacy(::google::protobuf::int32 value);

  // optional int32 max_use_count = 3;
  inline bool has_max_use_count() const;
  inline void clear_max_use_count();
  static const int kMaxUseCountFieldNumber = 3;
  inline ::google::protobuf::int32 max_use_count() const;
  inline void set_max_use_count(::google::protobuf::int32 value);

  // optional int32 exp_multiple_10 = 4;
  inline bool has_exp_multiple_10() const;
  inline void clear_exp_multiple_10();
  static const int kExpMultiple10FieldNumber = 4;
  inline ::google::protobuf::int32 exp_multiple_10() const;
  inline void set_exp_multiple_10(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MedicineDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_efficacy();
  inline void clear_has_efficacy();
  inline void set_has_max_use_count();
  inline void clear_has_max_use_count();
  inline void set_has_exp_multiple_10();
  inline void clear_has_exp_multiple_10();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 efficacy_;
  ::google::protobuf::int32 max_use_count_;
  ::google::protobuf::int32 exp_multiple_10_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static MedicineDataProto* default_instance_;
};
// -------------------------------------------------------------------

class MultiPrizeOnLimitedTimeGoodsDataProto : public ::google::protobuf::Message {
 public:
  MultiPrizeOnLimitedTimeGoodsDataProto();
  virtual ~MultiPrizeOnLimitedTimeGoodsDataProto();

  MultiPrizeOnLimitedTimeGoodsDataProto(const MultiPrizeOnLimitedTimeGoodsDataProto& from);

  inline MultiPrizeOnLimitedTimeGoodsDataProto& operator=(const MultiPrizeOnLimitedTimeGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiPrizeOnLimitedTimeGoodsDataProto& default_instance();

  void Swap(MultiPrizeOnLimitedTimeGoodsDataProto* other);

  // implements Message ----------------------------------------------

  MultiPrizeOnLimitedTimeGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiPrizeOnLimitedTimeGoodsDataProto& from);
  void MergeFrom(const MultiPrizeOnLimitedTimeGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 multi = 2;
  inline bool has_multi() const;
  inline void clear_multi();
  static const int kMultiFieldNumber = 2;
  inline ::google::protobuf::int32 multi() const;
  inline void set_multi(::google::protobuf::int32 value);

  // optional int64 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int64 end_time() const;
  inline void set_end_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.MultiPrizeOnLimitedTimeGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_multi();
  inline void clear_has_multi();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int32 multi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static MultiPrizeOnLimitedTimeGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class UpgradeGoodsDataProto : public ::google::protobuf::Message {
 public:
  UpgradeGoodsDataProto();
  virtual ~UpgradeGoodsDataProto();

  UpgradeGoodsDataProto(const UpgradeGoodsDataProto& from);

  inline UpgradeGoodsDataProto& operator=(const UpgradeGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeGoodsDataProto& default_instance();

  void Swap(UpgradeGoodsDataProto* other);

  // implements Message ----------------------------------------------

  UpgradeGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpgradeGoodsDataProto& from);
  void MergeFrom(const UpgradeGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 sub_type = 4;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sub_type() const;
  inline void set_sub_type(::google::protobuf::int32 value);

  // optional int32 big_level = 5;
  inline bool has_big_level() const;
  inline void clear_big_level();
  static const int kBigLevelFieldNumber = 5;
  inline ::google::protobuf::int32 big_level() const;
  inline void set_big_level(::google::protobuf::int32 value);

  // optional int32 small_level = 6;
  inline bool has_small_level() const;
  inline void clear_small_level();
  static const int kSmallLevelFieldNumber = 6;
  inline ::google::protobuf::int32 small_level() const;
  inline void set_small_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.UpgradeGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();
  inline void set_has_big_level();
  inline void clear_has_big_level();
  inline void set_has_small_level();
  inline void clear_has_small_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 sub_type_;
  ::google::protobuf::int32 big_level_;
  ::google::protobuf::int32 small_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static UpgradeGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class DailyCardDataProto : public ::google::protobuf::Message {
 public:
  DailyCardDataProto();
  virtual ~DailyCardDataProto();

  DailyCardDataProto(const DailyCardDataProto& from);

  inline DailyCardDataProto& operator=(const DailyCardDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyCardDataProto& default_instance();

  void Swap(DailyCardDataProto* other);

  // implements Message ----------------------------------------------

  DailyCardDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyCardDataProto& from);
  void MergeFrom(const DailyCardDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 max_use_count = 2;
  inline bool has_max_use_count() const;
  inline void clear_max_use_count();
  static const int kMaxUseCountFieldNumber = 2;
  inline ::google::protobuf::int32 max_use_count() const;
  inline void set_max_use_count(::google::protobuf::int32 value);

  // optional int32 free_use_count = 3;
  inline bool has_free_use_count() const;
  inline void clear_free_use_count();
  static const int kFreeUseCountFieldNumber = 3;
  inline ::google::protobuf::int32 free_use_count() const;
  inline void set_free_use_count(::google::protobuf::int32 value);

  // optional int32 yuanbao = 4;
  inline bool has_yuanbao() const;
  inline void clear_yuanbao();
  static const int kYuanbaoFieldNumber = 4;
  inline ::google::protobuf::int32 yuanbao() const;
  inline void set_yuanbao(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.DailyCardDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_max_use_count();
  inline void clear_has_max_use_count();
  inline void set_has_free_use_count();
  inline void clear_has_free_use_count();
  inline void set_has_yuanbao();
  inline void clear_has_yuanbao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 max_use_count_;
  ::google::protobuf::int32 free_use_count_;
  ::google::protobuf::int32 yuanbao_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static DailyCardDataProto* default_instance_;
};
// -------------------------------------------------------------------

class JinJieDanDataProto : public ::google::protobuf::Message {
 public:
  JinJieDanDataProto();
  virtual ~JinJieDanDataProto();

  JinJieDanDataProto(const JinJieDanDataProto& from);

  inline JinJieDanDataProto& operator=(const JinJieDanDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JinJieDanDataProto& default_instance();

  void Swap(JinJieDanDataProto* other);

  // implements Message ----------------------------------------------

  JinJieDanDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JinJieDanDataProto& from);
  void MergeFrom(const JinJieDanDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 level1 = 3;
  inline bool has_level1() const;
  inline void clear_level1();
  static const int kLevel1FieldNumber = 3;
  inline ::google::protobuf::int32 level1() const;
  inline void set_level1(::google::protobuf::int32 value);

  // optional int32 level2 = 4;
  inline bool has_level2() const;
  inline void clear_level2();
  static const int kLevel2FieldNumber = 4;
  inline ::google::protobuf::int32 level2() const;
  inline void set_level2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.JinJieDanDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level1();
  inline void clear_has_level1();
  inline void set_has_level2();
  inline void clear_has_level2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level1_;
  ::google::protobuf::int32 level2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static JinJieDanDataProto* default_instance_;
};
// -------------------------------------------------------------------

class JinJieLuckyCardDataProto : public ::google::protobuf::Message {
 public:
  JinJieLuckyCardDataProto();
  virtual ~JinJieLuckyCardDataProto();

  JinJieLuckyCardDataProto(const JinJieLuckyCardDataProto& from);

  inline JinJieLuckyCardDataProto& operator=(const JinJieLuckyCardDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JinJieLuckyCardDataProto& default_instance();

  void Swap(JinJieLuckyCardDataProto* other);

  // implements Message ----------------------------------------------

  JinJieLuckyCardDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JinJieLuckyCardDataProto& from);
  void MergeFrom(const JinJieLuckyCardDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional int32 rate = 4;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 4;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.JinJieLuckyCardDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static JinJieLuckyCardDataProto* default_instance_;
};
// -------------------------------------------------------------------

class ChristmasGoodsDataProto : public ::google::protobuf::Message {
 public:
  ChristmasGoodsDataProto();
  virtual ~ChristmasGoodsDataProto();

  ChristmasGoodsDataProto(const ChristmasGoodsDataProto& from);

  inline ChristmasGoodsDataProto& operator=(const ChristmasGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChristmasGoodsDataProto& default_instance();

  void Swap(ChristmasGoodsDataProto* other);

  // implements Message ----------------------------------------------

  ChristmasGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChristmasGoodsDataProto& from);
  void MergeFrom(const ChristmasGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 shop_point = 3;
  inline bool has_shop_point() const;
  inline void clear_shop_point();
  static const int kShopPointFieldNumber = 3;
  inline ::google::protobuf::int32 shop_point() const;
  inline void set_shop_point(::google::protobuf::int32 value);

  // optional int32 tree_point = 4;
  inline bool has_tree_point() const;
  inline void clear_tree_point();
  static const int kTreePointFieldNumber = 4;
  inline ::google::protobuf::int32 tree_point() const;
  inline void set_tree_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ChristmasGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_shop_point();
  inline void clear_has_shop_point();
  inline void set_has_tree_point();
  inline void clear_has_tree_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 shop_point_;
  ::google::protobuf::int32 tree_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static ChristmasGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class MarriageGiftDataProto : public ::google::protobuf::Message {
 public:
  MarriageGiftDataProto();
  virtual ~MarriageGiftDataProto();

  MarriageGiftDataProto(const MarriageGiftDataProto& from);

  inline MarriageGiftDataProto& operator=(const MarriageGiftDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarriageGiftDataProto& default_instance();

  void Swap(MarriageGiftDataProto* other);

  // implements Message ----------------------------------------------

  MarriageGiftDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarriageGiftDataProto& from);
  void MergeFrom(const MarriageGiftDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 add_hao_gan = 2;
  inline bool has_add_hao_gan() const;
  inline void clear_add_hao_gan();
  static const int kAddHaoGanFieldNumber = 2;
  inline ::google::protobuf::int32 add_hao_gan() const;
  inline void set_add_hao_gan(::google::protobuf::int32 value);

  // optional int32 add_exp = 3;
  inline bool has_add_exp() const;
  inline void clear_add_exp();
  static const int kAddExpFieldNumber = 3;
  inline ::google::protobuf::int32 add_exp() const;
  inline void set_add_exp(::google::protobuf::int32 value);

  // optional int32 add_real_air = 4;
  inline bool has_add_real_air() const;
  inline void clear_add_real_air();
  static const int kAddRealAirFieldNumber = 4;
  inline ::google::protobuf::int32 add_real_air() const;
  inline void set_add_real_air(::google::protobuf::int32 value);

  // optional int32 price_type = 5;
  inline bool has_price_type() const;
  inline void clear_price_type();
  static const int kPriceTypeFieldNumber = 5;
  inline ::google::protobuf::int32 price_type() const;
  inline void set_price_type(::google::protobuf::int32 value);

  // optional int32 price = 6;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 6;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MarriageGiftDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_add_hao_gan();
  inline void clear_has_add_hao_gan();
  inline void set_has_add_exp();
  inline void clear_has_add_exp();
  inline void set_has_add_real_air();
  inline void clear_has_add_real_air();
  inline void set_has_price_type();
  inline void clear_has_price_type();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 add_hao_gan_;
  ::google::protobuf::int32 add_exp_;
  ::google::protobuf::int32 add_real_air_;
  ::google::protobuf::int32 price_type_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static MarriageGiftDataProto* default_instance_;
};
// -------------------------------------------------------------------

class NiDaoQianKunDataProto : public ::google::protobuf::Message {
 public:
  NiDaoQianKunDataProto();
  virtual ~NiDaoQianKunDataProto();

  NiDaoQianKunDataProto(const NiDaoQianKunDataProto& from);

  inline NiDaoQianKunDataProto& operator=(const NiDaoQianKunDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NiDaoQianKunDataProto& default_instance();

  void Swap(NiDaoQianKunDataProto* other);

  // implements Message ----------------------------------------------

  NiDaoQianKunDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NiDaoQianKunDataProto& from);
  void MergeFrom(const NiDaoQianKunDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional .app.message.SpriteStatProto sprite_stat = 2;
  inline bool has_sprite_stat() const;
  inline void clear_sprite_stat();
  static const int kSpriteStatFieldNumber = 2;
  inline const ::app::message::SpriteStatProto& sprite_stat() const;
  inline ::app::message::SpriteStatProto* mutable_sprite_stat();
  inline ::app::message::SpriteStatProto* release_sprite_stat();
  inline void set_allocated_sprite_stat(::app::message::SpriteStatProto* sprite_stat);

  // optional int32 fighting_amount = 3;
  inline bool has_fighting_amount() const;
  inline void clear_fighting_amount();
  static const int kFightingAmountFieldNumber = 3;
  inline ::google::protobuf::int32 fighting_amount() const;
  inline void set_fighting_amount(::google::protobuf::int32 value);

  // optional int32 hao_gan = 4;
  inline bool has_hao_gan() const;
  inline void clear_hao_gan();
  static const int kHaoGanFieldNumber = 4;
  inline ::google::protobuf::int32 hao_gan() const;
  inline void set_hao_gan(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.NiDaoQianKunDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_sprite_stat();
  inline void clear_has_sprite_stat();
  inline void set_has_fighting_amount();
  inline void clear_has_fighting_amount();
  inline void set_has_hao_gan();
  inline void clear_has_hao_gan();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::app::message::SpriteStatProto* sprite_stat_;
  ::google::protobuf::int32 fighting_amount_;
  ::google::protobuf::int32 hao_gan_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static NiDaoQianKunDataProto* default_instance_;
};
// -------------------------------------------------------------------

class FireworkDataProto : public ::google::protobuf::Message {
 public:
  FireworkDataProto();
  virtual ~FireworkDataProto();

  FireworkDataProto(const FireworkDataProto& from);

  inline FireworkDataProto& operator=(const FireworkDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FireworkDataProto& default_instance();

  void Swap(FireworkDataProto* other);

  // implements Message ----------------------------------------------

  FireworkDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FireworkDataProto& from);
  void MergeFrom(const FireworkDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 color_type = 2;
  inline bool has_color_type() const;
  inline void clear_color_type();
  static const int kColorTypeFieldNumber = 2;
  inline ::google::protobuf::int32 color_type() const;
  inline void set_color_type(::google::protobuf::int32 value);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.FireworkDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_color_type();
  inline void clear_has_color_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 color_type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static FireworkDataProto* default_instance_;
};
// -------------------------------------------------------------------

class QianNengHuanHuaLimitUpProto : public ::google::protobuf::Message {
 public:
  QianNengHuanHuaLimitUpProto();
  virtual ~QianNengHuanHuaLimitUpProto();

  QianNengHuanHuaLimitUpProto(const QianNengHuanHuaLimitUpProto& from);

  inline QianNengHuanHuaLimitUpProto& operator=(const QianNengHuanHuaLimitUpProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QianNengHuanHuaLimitUpProto& default_instance();

  void Swap(QianNengHuanHuaLimitUpProto* other);

  // implements Message ----------------------------------------------

  QianNengHuanHuaLimitUpProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QianNengHuanHuaLimitUpProto& from);
  void MergeFrom(const QianNengHuanHuaLimitUpProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 main_type = 2;
  inline bool has_main_type() const;
  inline void clear_main_type();
  static const int kMainTypeFieldNumber = 2;
  inline ::google::protobuf::int32 main_type() const;
  inline void set_main_type(::google::protobuf::int32 value);

  // optional int32 required_object_level = 3;
  inline bool has_required_object_level() const;
  inline void clear_required_object_level();
  static const int kRequiredObjectLevelFieldNumber = 3;
  inline ::google::protobuf::int32 required_object_level() const;
  inline void set_required_object_level(::google::protobuf::int32 value);

  // optional int32 sub_type = 4;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sub_type() const;
  inline void set_sub_type(::google::protobuf::int32 value);

  // optional int32 amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.QianNengHuanHuaLimitUpProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_main_type();
  inline void clear_has_main_type();
  inline void set_has_required_object_level();
  inline void clear_has_required_object_level();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 main_type_;
  ::google::protobuf::int32 required_object_level_;
  ::google::protobuf::int32 sub_type_;
  ::google::protobuf::int32 amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static QianNengHuanHuaLimitUpProto* default_instance_;
};
// -------------------------------------------------------------------

class GemDataProto : public ::google::protobuf::Message {
 public:
  GemDataProto();
  virtual ~GemDataProto();

  GemDataProto(const GemDataProto& from);

  inline GemDataProto& operator=(const GemDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GemDataProto& default_instance();

  void Swap(GemDataProto* other);

  // implements Message ----------------------------------------------

  GemDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GemDataProto& from);
  void MergeFrom(const GemDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 gem_level = 2;
  inline bool has_gem_level() const;
  inline void clear_gem_level();
  static const int kGemLevelFieldNumber = 2;
  inline ::google::protobuf::int32 gem_level() const;
  inline void set_gem_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.GemDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_gem_level();
  inline void clear_has_gem_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 gem_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static GemDataProto* default_instance_;
};
// -------------------------------------------------------------------

class TransportationDataProto : public ::google::protobuf::Message {
 public:
  TransportationDataProto();
  virtual ~TransportationDataProto();

  TransportationDataProto(const TransportationDataProto& from);

  inline TransportationDataProto& operator=(const TransportationDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportationDataProto& default_instance();

  void Swap(TransportationDataProto* other);

  // implements Message ----------------------------------------------

  TransportationDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransportationDataProto& from);
  void MergeFrom(const TransportationDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 trans_type = 3;
  inline bool has_trans_type() const;
  inline void clear_trans_type();
  static const int kTransTypeFieldNumber = 3;
  inline ::google::protobuf::int32 trans_type() const;
  inline void set_trans_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.TransportationDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_trans_type();
  inline void clear_has_trans_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 trans_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static TransportationDataProto* default_instance_;
};
// -------------------------------------------------------------------

class BaoShiDataProto : public ::google::protobuf::Message {
 public:
  BaoShiDataProto();
  virtual ~BaoShiDataProto();

  BaoShiDataProto(const BaoShiDataProto& from);

  inline BaoShiDataProto& operator=(const BaoShiDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaoShiDataProto& default_instance();

  void Swap(BaoShiDataProto* other);

  // implements Message ----------------------------------------------

  BaoShiDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaoShiDataProto& from);
  void MergeFrom(const BaoShiDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // repeated int32 equip_type = 2;
  inline int equip_type_size() const;
  inline void clear_equip_type();
  static const int kEquipTypeFieldNumber = 2;
  inline ::google::protobuf::int32 equip_type(int index) const;
  inline void set_equip_type(int index, ::google::protobuf::int32 value);
  inline void add_equip_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equip_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equip_type();

  // optional .app.message.PanelGoodsDataProto.PanelType panel = 3;
  inline bool has_panel() const;
  inline void clear_panel();
  static const int kPanelFieldNumber = 3;
  inline ::app::message::PanelGoodsDataProto_PanelType panel() const;
  inline void set_panel(::app::message::PanelGoodsDataProto_PanelType value);

  // optional bool is_can_he_cheng = 4;
  inline bool has_is_can_he_cheng() const;
  inline void clear_is_can_he_cheng();
  static const int kIsCanHeChengFieldNumber = 4;
  inline bool is_can_he_cheng() const;
  inline void set_is_can_he_cheng(bool value);

  // @@protoc_insertion_point(class_scope:app.message.BaoShiDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_panel();
  inline void clear_has_panel();
  inline void set_has_is_can_he_cheng();
  inline void clear_has_is_can_he_cheng();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equip_type_;
  int panel_;
  bool is_can_he_cheng_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static BaoShiDataProto* default_instance_;
};
// -------------------------------------------------------------------

class ChipsGoodsDataProto : public ::google::protobuf::Message {
 public:
  ChipsGoodsDataProto();
  virtual ~ChipsGoodsDataProto();

  ChipsGoodsDataProto(const ChipsGoodsDataProto& from);

  inline ChipsGoodsDataProto& operator=(const ChipsGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChipsGoodsDataProto& default_instance();

  void Swap(ChipsGoodsDataProto* other);

  // implements Message ----------------------------------------------

  ChipsGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChipsGoodsDataProto& from);
  void MergeFrom(const ChipsGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 chips = 2;
  inline bool has_chips() const;
  inline void clear_chips();
  static const int kChipsFieldNumber = 2;
  inline ::google::protobuf::int32 chips() const;
  inline void set_chips(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ChipsGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_chips();
  inline void clear_has_chips();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 chips_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static ChipsGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class SpellBookDataProto : public ::google::protobuf::Message {
 public:
  SpellBookDataProto();
  virtual ~SpellBookDataProto();

  SpellBookDataProto(const SpellBookDataProto& from);

  inline SpellBookDataProto& operator=(const SpellBookDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpellBookDataProto& default_instance();

  void Swap(SpellBookDataProto* other);

  // implements Message ----------------------------------------------

  SpellBookDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpellBookDataProto& from);
  void MergeFrom(const SpellBookDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SpellBookDataProto_SpellType SpellType;
  static const SpellType HERO = SpellBookDataProto_SpellType_HERO;
  static const SpellType MOUNT = SpellBookDataProto_SpellType_MOUNT;
  static const SpellType SUPER_WEAPON = SpellBookDataProto_SpellType_SUPER_WEAPON;
  static const SpellType SUPER_ARM = SpellBookDataProto_SpellType_SUPER_ARM;
  static const SpellType BOW = SpellBookDataProto_SpellType_BOW;
  static const SpellType PET = SpellBookDataProto_SpellType_PET;
  static const SpellType TIAN_JIE = SpellBookDataProto_SpellType_TIAN_JIE;
  static const SpellType TIAN_ZUI = SpellBookDataProto_SpellType_TIAN_ZUI;
  static const SpellType CLOAK = SpellBookDataProto_SpellType_CLOAK;
  static const SpellType SHIELD = SpellBookDataProto_SpellType_SHIELD;
  static const SpellType LING_YU = SpellBookDataProto_SpellType_LING_YU;
  static const SpellType MEI_REN_TONG_LING = SpellBookDataProto_SpellType_MEI_REN_TONG_LING;
  static inline bool SpellType_IsValid(int value) {
    return SpellBookDataProto_SpellType_IsValid(value);
  }
  static const SpellType SpellType_MIN =
    SpellBookDataProto_SpellType_SpellType_MIN;
  static const SpellType SpellType_MAX =
    SpellBookDataProto_SpellType_SpellType_MAX;
  static const int SpellType_ARRAYSIZE =
    SpellBookDataProto_SpellType_SpellType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpellType_descriptor() {
    return SpellBookDataProto_SpellType_descriptor();
  }
  static inline const ::std::string& SpellType_Name(SpellType value) {
    return SpellBookDataProto_SpellType_Name(value);
  }
  static inline bool SpellType_Parse(const ::std::string& name,
      SpellType* value) {
    return SpellBookDataProto_SpellType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional .app.message.SpellBookDataProto.SpellType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::app::message::SpellBookDataProto_SpellType type() const;
  inline void set_type(::app::message::SpellBookDataProto_SpellType value);

  // optional int32 required_mount = 3 [deprecated = true];
  inline bool has_required_mount() const PROTOBUF_DEPRECATED;
  inline void clear_required_mount() PROTOBUF_DEPRECATED;
  static const int kRequiredMountFieldNumber = 3;
  inline ::google::protobuf::int32 required_mount() const PROTOBUF_DEPRECATED;
  inline void set_required_mount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 required_object_level = 4;
  inline bool has_required_object_level() const;
  inline void clear_required_object_level();
  static const int kRequiredObjectLevelFieldNumber = 4;
  inline ::google::protobuf::int32 required_object_level() const;
  inline void set_required_object_level(::google::protobuf::int32 value);

  // optional string output_desc = 5;
  inline bool has_output_desc() const;
  inline void clear_output_desc();
  static const int kOutputDescFieldNumber = 5;
  inline const ::std::string& output_desc() const;
  inline void set_output_desc(const ::std::string& value);
  inline void set_output_desc(const char* value);
  inline void set_output_desc(const char* value, size_t size);
  inline ::std::string* mutable_output_desc();
  inline ::std::string* release_output_desc();
  inline void set_allocated_output_desc(::std::string* output_desc);

  // @@protoc_insertion_point(class_scope:app.message.SpellBookDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_required_mount();
  inline void clear_has_required_mount();
  inline void set_has_required_object_level();
  inline void clear_has_required_object_level();
  inline void set_has_output_desc();
  inline void clear_has_output_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  int type_;
  ::google::protobuf::int32 required_mount_;
  ::std::string* output_desc_;
  ::google::protobuf::int32 required_object_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static SpellBookDataProto* default_instance_;
};
// -------------------------------------------------------------------

class PetTongLingGiftSpellExpDataProto : public ::google::protobuf::Message {
 public:
  PetTongLingGiftSpellExpDataProto();
  virtual ~PetTongLingGiftSpellExpDataProto();

  PetTongLingGiftSpellExpDataProto(const PetTongLingGiftSpellExpDataProto& from);

  inline PetTongLingGiftSpellExpDataProto& operator=(const PetTongLingGiftSpellExpDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetTongLingGiftSpellExpDataProto& default_instance();

  void Swap(PetTongLingGiftSpellExpDataProto* other);

  // implements Message ----------------------------------------------

  PetTongLingGiftSpellExpDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetTongLingGiftSpellExpDataProto& from);
  void MergeFrom(const PetTongLingGiftSpellExpDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 add_exp = 2;
  inline bool has_add_exp() const;
  inline void clear_add_exp();
  static const int kAddExpFieldNumber = 2;
  inline ::google::protobuf::int32 add_exp() const;
  inline void set_add_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PetTongLingGiftSpellExpDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_add_exp();
  inline void clear_has_add_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 add_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static PetTongLingGiftSpellExpDataProto* default_instance_;
};
// -------------------------------------------------------------------

class ScriptGoodsDataProto : public ::google::protobuf::Message {
 public:
  ScriptGoodsDataProto();
  virtual ~ScriptGoodsDataProto();

  ScriptGoodsDataProto(const ScriptGoodsDataProto& from);

  inline ScriptGoodsDataProto& operator=(const ScriptGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptGoodsDataProto& default_instance();

  void Swap(ScriptGoodsDataProto* other);

  // implements Message ----------------------------------------------

  ScriptGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScriptGoodsDataProto& from);
  void MergeFrom(const ScriptGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 script = 2;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 2;
  inline ::google::protobuf::int32 script() const;
  inline void set_script(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ScriptGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_script();
  inline void clear_has_script();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 script_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static ScriptGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class PanelGoodsDataProto : public ::google::protobuf::Message {
 public:
  PanelGoodsDataProto();
  virtual ~PanelGoodsDataProto();

  PanelGoodsDataProto(const PanelGoodsDataProto& from);

  inline PanelGoodsDataProto& operator=(const PanelGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PanelGoodsDataProto& default_instance();

  void Swap(PanelGoodsDataProto* other);

  // implements Message ----------------------------------------------

  PanelGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PanelGoodsDataProto& from);
  void MergeFrom(const PanelGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PanelGoodsDataProto_PanelType PanelType;
  static const PanelType MOUNT = PanelGoodsDataProto_PanelType_MOUNT;
  static const PanelType BLACKSMITH = PanelGoodsDataProto_PanelType_BLACKSMITH;
  static const PanelType SUPER_WEAPON = PanelGoodsDataProto_PanelType_SUPER_WEAPON;
  static const PanelType SUPER_ARM = PanelGoodsDataProto_PanelType_SUPER_ARM;
  static const PanelType BOW = PanelGoodsDataProto_PanelType_BOW;
  static const PanelType SPELL = PanelGoodsDataProto_PanelType_SPELL;
  static const PanelType GEM_PANEL = PanelGoodsDataProto_PanelType_GEM_PANEL;
  static const PanelType DIVINE = PanelGoodsDataProto_PanelType_DIVINE;
  static const PanelType EQUIPMENT_LEVEL = PanelGoodsDataProto_PanelType_EQUIPMENT_LEVEL;
  static const PanelType PET = PanelGoodsDataProto_PanelType_PET;
  static const PanelType TIAN_ZUI = PanelGoodsDataProto_PanelType_TIAN_ZUI;
  static const PanelType TIAN_JIE = PanelGoodsDataProto_PanelType_TIAN_JIE;
  static const PanelType SUPER_BLACKSMITH = PanelGoodsDataProto_PanelType_SUPER_BLACKSMITH;
  static const PanelType WEAPON_XINFA = PanelGoodsDataProto_PanelType_WEAPON_XINFA;
  static const PanelType EQUIP_TI_PIN = PanelGoodsDataProto_PanelType_EQUIP_TI_PIN;
  static const PanelType DEMON = PanelGoodsDataProto_PanelType_DEMON;
  static const PanelType CLOAK = PanelGoodsDataProto_PanelType_CLOAK;
  static const PanelType TRANSFER = PanelGoodsDataProto_PanelType_TRANSFER;
  static const PanelType QI_ZHEN_1 = PanelGoodsDataProto_PanelType_QI_ZHEN_1;
  static const PanelType QI_ZHEN_2 = PanelGoodsDataProto_PanelType_QI_ZHEN_2;
  static const PanelType QI_ZHEN_3 = PanelGoodsDataProto_PanelType_QI_ZHEN_3;
  static const PanelType QI_ZHEN_4 = PanelGoodsDataProto_PanelType_QI_ZHEN_4;
  static const PanelType QI_ZHEN_5 = PanelGoodsDataProto_PanelType_QI_ZHEN_5;
  static const PanelType QI_ZHEN_6 = PanelGoodsDataProto_PanelType_QI_ZHEN_6;
  static const PanelType QI_ZHEN_7 = PanelGoodsDataProto_PanelType_QI_ZHEN_7;
  static const PanelType QI_ZHEN_8 = PanelGoodsDataProto_PanelType_QI_ZHEN_8;
  static const PanelType QI_ZHEN_9 = PanelGoodsDataProto_PanelType_QI_ZHEN_9;
  static const PanelType QI_ZHEN_10 = PanelGoodsDataProto_PanelType_QI_ZHEN_10;
  static const PanelType QI_ZHEN_11 = PanelGoodsDataProto_PanelType_QI_ZHEN_11;
  static const PanelType QI_ZHEN_12 = PanelGoodsDataProto_PanelType_QI_ZHEN_12;
  static const PanelType QI_ZHEN_13 = PanelGoodsDataProto_PanelType_QI_ZHEN_13;
  static const PanelType QI_ZHEN_14 = PanelGoodsDataProto_PanelType_QI_ZHEN_14;
  static const PanelType QI_ZHEN_15 = PanelGoodsDataProto_PanelType_QI_ZHEN_15;
  static const PanelType QI_ZHEN_16 = PanelGoodsDataProto_PanelType_QI_ZHEN_16;
  static const PanelType QI_ZHEN_17 = PanelGoodsDataProto_PanelType_QI_ZHEN_17;
  static const PanelType QI_ZHEN_18 = PanelGoodsDataProto_PanelType_QI_ZHEN_18;
  static const PanelType QI_ZHEN_19 = PanelGoodsDataProto_PanelType_QI_ZHEN_19;
  static const PanelType QI_ZHEN_20 = PanelGoodsDataProto_PanelType_QI_ZHEN_20;
  static const PanelType MO_SHI = PanelGoodsDataProto_PanelType_MO_SHI;
  static const PanelType MO_SHI_0 = PanelGoodsDataProto_PanelType_MO_SHI_0;
  static const PanelType MO_SHI_1 = PanelGoodsDataProto_PanelType_MO_SHI_1;
  static const PanelType MO_SHI_2 = PanelGoodsDataProto_PanelType_MO_SHI_2;
  static const PanelType MO_SHI_3 = PanelGoodsDataProto_PanelType_MO_SHI_3;
  static const PanelType QIAN_QIU_DA_JIE_0 = PanelGoodsDataProto_PanelType_QIAN_QIU_DA_JIE_0;
  static const PanelType QIAN_QIU_DA_JIE_1 = PanelGoodsDataProto_PanelType_QIAN_QIU_DA_JIE_1;
  static const PanelType QIAN_QIU_DA_JIE = PanelGoodsDataProto_PanelType_QIAN_QIU_DA_JIE;
  static const PanelType CHI_HUO_SHEN_GONG = PanelGoodsDataProto_PanelType_CHI_HUO_SHEN_GONG;
  static const PanelType CHANGE_NAME = PanelGoodsDataProto_PanelType_CHANGE_NAME;
  static const PanelType CHANGE_RACE_CARD = PanelGoodsDataProto_PanelType_CHANGE_RACE_CARD;
  static const PanelType NEW_DRAW_PRIZE = PanelGoodsDataProto_PanelType_NEW_DRAW_PRIZE;
  static const PanelType MOUNT_TONGLING_1 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_1;
  static const PanelType MOUNT_TONGLING_2 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_2;
  static const PanelType MOUNT_TONGLING_3 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_3;
  static const PanelType MOUNT_TONGLING_4 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_4;
  static const PanelType MOUNT_TONGLING_5 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_5;
  static const PanelType MOUNT_TONGLING_6 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_6;
  static const PanelType MOUNT_TONGLING_7 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_7;
  static const PanelType MOUNT_TONGLING_8 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_8;
  static const PanelType MOUNT_TONGLING_9 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_9;
  static const PanelType MOUNT_TONGLING_10 = PanelGoodsDataProto_PanelType_MOUNT_TONGLING_10;
  static const PanelType MO_BING = PanelGoodsDataProto_PanelType_MO_BING;
  static const PanelType MO_BING_0 = PanelGoodsDataProto_PanelType_MO_BING_0;
  static const PanelType MO_BING_1 = PanelGoodsDataProto_PanelType_MO_BING_1;
  static const PanelType MO_BING_2 = PanelGoodsDataProto_PanelType_MO_BING_2;
  static const PanelType MO_BING_3 = PanelGoodsDataProto_PanelType_MO_BING_3;
  static const PanelType MO_BING_4 = PanelGoodsDataProto_PanelType_MO_BING_4;
  static const PanelType MO_BING_5 = PanelGoodsDataProto_PanelType_MO_BING_5;
  static const PanelType MO_BING_6 = PanelGoodsDataProto_PanelType_MO_BING_6;
  static const PanelType MO_BING_7 = PanelGoodsDataProto_PanelType_MO_BING_7;
  static const PanelType MO_BING_8 = PanelGoodsDataProto_PanelType_MO_BING_8;
  static const PanelType MO_BING_9 = PanelGoodsDataProto_PanelType_MO_BING_9;
  static const PanelType MO_BING_10 = PanelGoodsDataProto_PanelType_MO_BING_10;
  static const PanelType MO_BING_11 = PanelGoodsDataProto_PanelType_MO_BING_11;
  static const PanelType WASH_XUNZHANF = PanelGoodsDataProto_PanelType_WASH_XUNZHANF;
  static const PanelType TIAN_XIE = PanelGoodsDataProto_PanelType_TIAN_XIE;
  static const PanelType MONOPOLY = PanelGoodsDataProto_PanelType_MONOPOLY;
  static const PanelType LOVE = PanelGoodsDataProto_PanelType_LOVE;
  static const PanelType WU_DAO = PanelGoodsDataProto_PanelType_WU_DAO;
  static const PanelType SHIELD = PanelGoodsDataProto_PanelType_SHIELD;
  static const PanelType SHIELD_1 = PanelGoodsDataProto_PanelType_SHIELD_1;
  static const PanelType SHIELD_2 = PanelGoodsDataProto_PanelType_SHIELD_2;
  static const PanelType SHIELD_3 = PanelGoodsDataProto_PanelType_SHIELD_3;
  static const PanelType SHIELD_4 = PanelGoodsDataProto_PanelType_SHIELD_4;
  static const PanelType SHIELD_5 = PanelGoodsDataProto_PanelType_SHIELD_5;
  static const PanelType HERO_BOSS_CARD = PanelGoodsDataProto_PanelType_HERO_BOSS_CARD;
  static const PanelType GUILD_BOSS_CARD = PanelGoodsDataProto_PanelType_GUILD_BOSS_CARD;
  static const PanelType LING_YU = PanelGoodsDataProto_PanelType_LING_YU;
  static const PanelType MOON_CAKE = PanelGoodsDataProto_PanelType_MOON_CAKE;
  static const PanelType BOW_TONG_LING = PanelGoodsDataProto_PanelType_BOW_TONG_LING;
  static const PanelType BOW_TONG_LING_2 = PanelGoodsDataProto_PanelType_BOW_TONG_LING_2;
  static const PanelType BOW_TONG_LING_3 = PanelGoodsDataProto_PanelType_BOW_TONG_LING_3;
  static const PanelType PET_TONG_LING = PanelGoodsDataProto_PanelType_PET_TONG_LING;
  static const PanelType INLAY_BAO_SHI = PanelGoodsDataProto_PanelType_INLAY_BAO_SHI;
  static const PanelType MO_FANG = PanelGoodsDataProto_PanelType_MO_FANG;
  static const PanelType JIAN_DAO = PanelGoodsDataProto_PanelType_JIAN_DAO;
  static inline bool PanelType_IsValid(int value) {
    return PanelGoodsDataProto_PanelType_IsValid(value);
  }
  static const PanelType PanelType_MIN =
    PanelGoodsDataProto_PanelType_PanelType_MIN;
  static const PanelType PanelType_MAX =
    PanelGoodsDataProto_PanelType_PanelType_MAX;
  static const int PanelType_ARRAYSIZE =
    PanelGoodsDataProto_PanelType_PanelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PanelType_descriptor() {
    return PanelGoodsDataProto_PanelType_descriptor();
  }
  static inline const ::std::string& PanelType_Name(PanelType value) {
    return PanelGoodsDataProto_PanelType_Name(value);
  }
  static inline bool PanelType_Parse(const ::std::string& name,
      PanelType* value) {
    return PanelGoodsDataProto_PanelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional .app.message.PanelGoodsDataProto.PanelType panel = 2;
  inline bool has_panel() const;
  inline void clear_panel();
  static const int kPanelFieldNumber = 2;
  inline ::app::message::PanelGoodsDataProto_PanelType panel() const;
  inline void set_panel(::app::message::PanelGoodsDataProto_PanelType value);

  // @@protoc_insertion_point(class_scope:app.message.PanelGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_panel();
  inline void clear_has_panel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  int panel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static PanelGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class SpellXinfaDataProto : public ::google::protobuf::Message {
 public:
  SpellXinfaDataProto();
  virtual ~SpellXinfaDataProto();

  SpellXinfaDataProto(const SpellXinfaDataProto& from);

  inline SpellXinfaDataProto& operator=(const SpellXinfaDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpellXinfaDataProto& default_instance();

  void Swap(SpellXinfaDataProto* other);

  // implements Message ----------------------------------------------

  SpellXinfaDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpellXinfaDataProto& from);
  void MergeFrom(const SpellXinfaDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 require_spell_level = 2;
  inline bool has_require_spell_level() const;
  inline void clear_require_spell_level();
  static const int kRequireSpellLevelFieldNumber = 2;
  inline ::google::protobuf::int32 require_spell_level() const;
  inline void set_require_spell_level(::google::protobuf::int32 value);

  // optional .app.message.XinfaType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::app::message::XinfaType type() const;
  inline void set_type(::app::message::XinfaType value);

  // optional int32 release_range = 11;
  inline bool has_release_range() const;
  inline void clear_release_range();
  static const int kReleaseRangeFieldNumber = 11;
  inline ::google::protobuf::int32 release_range() const;
  inline void set_release_range(::google::protobuf::int32 value);

  // optional int32 hurt_range = 12;
  inline bool has_hurt_range() const;
  inline void clear_hurt_range();
  static const int kHurtRangeFieldNumber = 12;
  inline ::google::protobuf::int32 hurt_range() const;
  inline void set_hurt_range(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.SpellXinfaDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_require_spell_level();
  inline void clear_has_require_spell_level();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_release_range();
  inline void clear_has_release_range();
  inline void set_has_hurt_range();
  inline void clear_has_hurt_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 require_spell_level_;
  int type_;
  ::google::protobuf::int32 release_range_;
  ::google::protobuf::int32 hurt_range_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static SpellXinfaDataProto* default_instance_;
};
// -------------------------------------------------------------------

class YuanbaoPackageDataProto : public ::google::protobuf::Message {
 public:
  YuanbaoPackageDataProto();
  virtual ~YuanbaoPackageDataProto();

  YuanbaoPackageDataProto(const YuanbaoPackageDataProto& from);

  inline YuanbaoPackageDataProto& operator=(const YuanbaoPackageDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YuanbaoPackageDataProto& default_instance();

  void Swap(YuanbaoPackageDataProto* other);

  // implements Message ----------------------------------------------

  YuanbaoPackageDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YuanbaoPackageDataProto& from);
  void MergeFrom(const YuanbaoPackageDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 4 [deprecated = true];
  inline bool has_content() const PROTOBUF_DEPRECATED;
  inline void clear_content() PROTOBUF_DEPRECATED;
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const PROTOBUF_DEPRECATED;
  inline void set_content(const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void set_content(const char* value) PROTOBUF_DEPRECATED;
  inline void set_content(const char* value, size_t size) PROTOBUF_DEPRECATED;
  inline ::std::string* mutable_content() PROTOBUF_DEPRECATED;
  inline ::std::string* release_content() PROTOBUF_DEPRECATED;
  inline void set_allocated_content(::std::string* content) PROTOBUF_DEPRECATED;

  // optional int32 show_price = 5;
  inline bool has_show_price() const;
  inline void clear_show_price();
  static const int kShowPriceFieldNumber = 5;
  inline ::google::protobuf::int32 show_price() const;
  inline void set_show_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.YuanbaoPackageDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_show_price();
  inline void clear_has_show_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::std::string* title_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 show_price_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static YuanbaoPackageDataProto* default_instance_;
};
// -------------------------------------------------------------------

class RefinedStatGoodsDataProto : public ::google::protobuf::Message {
 public:
  RefinedStatGoodsDataProto();
  virtual ~RefinedStatGoodsDataProto();

  RefinedStatGoodsDataProto(const RefinedStatGoodsDataProto& from);

  inline RefinedStatGoodsDataProto& operator=(const RefinedStatGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefinedStatGoodsDataProto& default_instance();

  void Swap(RefinedStatGoodsDataProto* other);

  // implements Message ----------------------------------------------

  RefinedStatGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefinedStatGoodsDataProto& from);
  void MergeFrom(const RefinedStatGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 refined_type = 2;
  inline bool has_refined_type() const;
  inline void clear_refined_type();
  static const int kRefinedTypeFieldNumber = 2;
  inline ::google::protobuf::int32 refined_type() const;
  inline void set_refined_type(::google::protobuf::int32 value);

  // optional int32 required_object_level = 3;
  inline bool has_required_object_level() const;
  inline void clear_required_object_level();
  static const int kRequiredObjectLevelFieldNumber = 3;
  inline ::google::protobuf::int32 required_object_level() const;
  inline void set_required_object_level(::google::protobuf::int32 value);

  // optional int32 sub_type = 4;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sub_type() const;
  inline void set_sub_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.RefinedStatGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_refined_type();
  inline void clear_has_refined_type();
  inline void set_has_required_object_level();
  inline void clear_has_required_object_level();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 refined_type_;
  ::google::protobuf::int32 required_object_level_;
  ::google::protobuf::int32 sub_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static RefinedStatGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class BlessGoodsDataProto : public ::google::protobuf::Message {
 public:
  BlessGoodsDataProto();
  virtual ~BlessGoodsDataProto();

  BlessGoodsDataProto(const BlessGoodsDataProto& from);

  inline BlessGoodsDataProto& operator=(const BlessGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlessGoodsDataProto& default_instance();

  void Swap(BlessGoodsDataProto* other);

  // implements Message ----------------------------------------------

  BlessGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlessGoodsDataProto& from);
  void MergeFrom(const BlessGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 add_belss_type = 2;
  inline bool has_add_belss_type() const;
  inline void clear_add_belss_type();
  static const int kAddBelssTypeFieldNumber = 2;
  inline ::google::protobuf::int32 add_belss_type() const;
  inline void set_add_belss_type(::google::protobuf::int32 value);

  // optional int32 add_bless_percent = 3;
  inline bool has_add_bless_percent() const;
  inline void clear_add_bless_percent();
  static const int kAddBlessPercentFieldNumber = 3;
  inline ::google::protobuf::int32 add_bless_percent() const;
  inline void set_add_bless_percent(::google::protobuf::int32 value);

  // optional int32 add_bless_fix_amount = 4;
  inline bool has_add_bless_fix_amount() const;
  inline void clear_add_bless_fix_amount();
  static const int kAddBlessFixAmountFieldNumber = 4;
  inline ::google::protobuf::int32 add_bless_fix_amount() const;
  inline void set_add_bless_fix_amount(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 add_bless_clear_time = 6;
  inline bool has_add_bless_clear_time() const;
  inline void clear_add_bless_clear_time();
  static const int kAddBlessClearTimeFieldNumber = 6;
  inline ::google::protobuf::int32 add_bless_clear_time() const;
  inline void set_add_bless_clear_time(::google::protobuf::int32 value);

  // optional int32 add_bless_sub_type = 7;
  inline bool has_add_bless_sub_type() const;
  inline void clear_add_bless_sub_type();
  static const int kAddBlessSubTypeFieldNumber = 7;
  inline ::google::protobuf::int32 add_bless_sub_type() const;
  inline void set_add_bless_sub_type(::google::protobuf::int32 value);

  // optional int32 max_level = 8;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 8;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.BlessGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_add_belss_type();
  inline void clear_has_add_belss_type();
  inline void set_has_add_bless_percent();
  inline void clear_has_add_bless_percent();
  inline void set_has_add_bless_fix_amount();
  inline void clear_has_add_bless_fix_amount();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_add_bless_clear_time();
  inline void clear_has_add_bless_clear_time();
  inline void set_has_add_bless_sub_type();
  inline void clear_has_add_bless_sub_type();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 add_belss_type_;
  ::google::protobuf::int32 add_bless_percent_;
  ::google::protobuf::int32 add_bless_fix_amount_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 add_bless_clear_time_;
  ::google::protobuf::int32 add_bless_sub_type_;
  ::google::protobuf::int32 max_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static BlessGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class SpellPracticeGoodsDataProto : public ::google::protobuf::Message {
 public:
  SpellPracticeGoodsDataProto();
  virtual ~SpellPracticeGoodsDataProto();

  SpellPracticeGoodsDataProto(const SpellPracticeGoodsDataProto& from);

  inline SpellPracticeGoodsDataProto& operator=(const SpellPracticeGoodsDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpellPracticeGoodsDataProto& default_instance();

  void Swap(SpellPracticeGoodsDataProto* other);

  // implements Message ----------------------------------------------

  SpellPracticeGoodsDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpellPracticeGoodsDataProto& from);
  void MergeFrom(const SpellPracticeGoodsDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional int32 upgrade_level = 2;
  inline bool has_upgrade_level() const;
  inline void clear_upgrade_level();
  static const int kUpgradeLevelFieldNumber = 2;
  inline ::google::protobuf::int32 upgrade_level() const;
  inline void set_upgrade_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.SpellPracticeGoodsDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_upgrade_level();
  inline void clear_has_upgrade_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::google::protobuf::int32 upgrade_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static SpellPracticeGoodsDataProto* default_instance_;
};
// -------------------------------------------------------------------

class GoodsProto : public ::google::protobuf::Message {
 public:
  GoodsProto();
  virtual ~GoodsProto();

  GoodsProto(const GoodsProto& from);

  inline GoodsProto& operator=(const GoodsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsProto& default_instance();

  void Swap(GoodsProto* other);

  // implements Message ----------------------------------------------

  GoodsProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsProto& from);
  void MergeFrom(const GoodsProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional bool binded = 2;
  inline bool has_binded() const;
  inline void clear_binded();
  static const int kBindedFieldNumber = 2;
  inline bool binded() const;
  inline void set_binded(bool value);

  // optional int64 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // optional bool can_force_remove = 4;
  inline bool has_can_force_remove() const;
  inline void clear_can_force_remove();
  static const int kCanForceRemoveFieldNumber = 4;
  inline bool can_force_remove() const;
  inline void set_can_force_remove(bool value);

  // optional int64 can_use_time = 5;
  inline bool has_can_use_time() const;
  inline void clear_can_use_time();
  static const int kCanUseTimeFieldNumber = 5;
  inline ::google::protobuf::int64 can_use_time() const;
  inline void set_can_use_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.GoodsProto)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_binded();
  inline void clear_has_binded();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_can_force_remove();
  inline void clear_has_can_force_remove();
  inline void set_has_can_use_time();
  inline void clear_has_can_use_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 count_;
  bool binded_;
  bool can_force_remove_;
  ::google::protobuf::int64 expire_time_;
  ::google::protobuf::int64 can_use_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static GoodsProto* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentProto : public ::google::protobuf::Message {
 public:
  EquipmentProto();
  virtual ~EquipmentProto();

  EquipmentProto(const EquipmentProto& from);

  inline EquipmentProto& operator=(const EquipmentProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentProto& default_instance();

  void Swap(EquipmentProto* other);

  // implements Message ----------------------------------------------

  EquipmentProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentProto& from);
  void MergeFrom(const EquipmentProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool binded = 2;
  inline bool has_binded() const;
  inline void clear_binded();
  static const int kBindedFieldNumber = 2;
  inline bool binded() const;
  inline void set_binded(bool value);

  // optional int64 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto base_stat = 50;
  inline bool has_base_stat() const;
  inline void clear_base_stat();
  static const int kBaseStatFieldNumber = 50;
  inline const ::app::message::SingleStatProto& base_stat() const;
  inline ::app::message::SingleStatProto* mutable_base_stat();
  inline ::app::message::SingleStatProto* release_base_stat();
  inline void set_allocated_base_stat(::app::message::SingleStatProto* base_stat);

  // optional int32 base_fighting_amount = 51;
  inline bool has_base_fighting_amount() const;
  inline void clear_base_fighting_amount();
  static const int kBaseFightingAmountFieldNumber = 51;
  inline ::google::protobuf::int32 base_fighting_amount() const;
  inline void set_base_fighting_amount(::google::protobuf::int32 value);

  // optional int32 best_refined_fighting_amount = 52;
  inline bool has_best_refined_fighting_amount() const;
  inline void clear_best_refined_fighting_amount();
  static const int kBestRefinedFightingAmountFieldNumber = 52;
  inline ::google::protobuf::int32 best_refined_fighting_amount() const;
  inline void set_best_refined_fighting_amount(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  inline bool has_best_refined_stat() const;
  inline void clear_best_refined_stat();
  static const int kBestRefinedStatFieldNumber = 53;
  inline const ::app::message::SingleStatProto& best_refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_best_refined_stat();
  inline ::app::message::SingleStatProto* release_best_refined_stat();
  inline void set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat);

  // optional int32 refined_times = 61;
  inline bool has_refined_times() const;
  inline void clear_refined_times();
  static const int kRefinedTimesFieldNumber = 61;
  inline ::google::protobuf::int32 refined_times() const;
  inline void set_refined_times(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto refined_stat = 62;
  inline bool has_refined_stat() const;
  inline void clear_refined_stat();
  static const int kRefinedStatFieldNumber = 62;
  inline const ::app::message::SingleStatProto& refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_refined_stat();
  inline ::app::message::SingleStatProto* release_refined_stat();
  inline void set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat);

  // optional int32 refined_fighting_amount = 63;
  inline bool has_refined_fighting_amount() const;
  inline void clear_refined_fighting_amount();
  static const int kRefinedFightingAmountFieldNumber = 63;
  inline ::google::protobuf::int32 refined_fighting_amount() const;
  inline void set_refined_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_count = 64;
  inline bool has_added_stat_count() const;
  inline void clear_added_stat_count();
  static const int kAddedStatCountFieldNumber = 64;
  inline ::google::protobuf::int32 added_stat_count() const;
  inline void set_added_stat_count(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto added_stat = 65;
  inline bool has_added_stat() const;
  inline void clear_added_stat();
  static const int kAddedStatFieldNumber = 65;
  inline const ::app::message::SingleStatProto& added_stat() const;
  inline ::app::message::SingleStatProto* mutable_added_stat();
  inline ::app::message::SingleStatProto* release_added_stat();
  inline void set_allocated_added_stat(::app::message::SingleStatProto* added_stat);

  // optional int32 added_fighting_amount = 66;
  inline bool has_added_fighting_amount() const;
  inline void clear_added_fighting_amount();
  static const int kAddedFightingAmountFieldNumber = 66;
  inline ::google::protobuf::int32 added_fighting_amount() const;
  inline void set_added_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_type = 67;
  inline bool has_added_stat_type() const;
  inline void clear_added_stat_type();
  static const int kAddedStatTypeFieldNumber = 67;
  inline ::google::protobuf::int32 added_stat_type() const;
  inline void set_added_stat_type(::google::protobuf::int32 value);

  // optional bool is_unmeltable = 68;
  inline bool has_is_unmeltable() const;
  inline void clear_is_unmeltable();
  static const int kIsUnmeltableFieldNumber = 68;
  inline bool is_unmeltable() const;
  inline void set_is_unmeltable(bool value);

  // optional int32 ti_pin_val = 69;
  inline bool has_ti_pin_val() const;
  inline void clear_ti_pin_val();
  static const int kTiPinValFieldNumber = 69;
  inline ::google::protobuf::int32 ti_pin_val() const;
  inline void set_ti_pin_val(::google::protobuf::int32 value);

  // repeated .app.message.SingleStatProto xun_zhang_random_stat = 70;
  inline int xun_zhang_random_stat_size() const;
  inline void clear_xun_zhang_random_stat();
  static const int kXunZhangRandomStatFieldNumber = 70;
  inline const ::app::message::SingleStatProto& xun_zhang_random_stat(int index) const;
  inline ::app::message::SingleStatProto* mutable_xun_zhang_random_stat(int index);
  inline ::app::message::SingleStatProto* add_xun_zhang_random_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      xun_zhang_random_stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_xun_zhang_random_stat();

  // optional int32 xun_zhang_fighting_amount = 71;
  inline bool has_xun_zhang_fighting_amount() const;
  inline void clear_xun_zhang_fighting_amount();
  static const int kXunZhangFightingAmountFieldNumber = 71;
  inline ::google::protobuf::int32 xun_zhang_fighting_amount() const;
  inline void set_xun_zhang_fighting_amount(::google::protobuf::int32 value);

  // repeated .app.message.SingleStatProto fashion_random_stat = 72;
  inline int fashion_random_stat_size() const;
  inline void clear_fashion_random_stat();
  static const int kFashionRandomStatFieldNumber = 72;
  inline const ::app::message::SingleStatProto& fashion_random_stat(int index) const;
  inline ::app::message::SingleStatProto* mutable_fashion_random_stat(int index);
  inline ::app::message::SingleStatProto* add_fashion_random_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      fashion_random_stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_fashion_random_stat();

  // optional int32 fashion_fighting_amount = 73;
  inline bool has_fashion_fighting_amount() const;
  inline void clear_fashion_fighting_amount();
  static const int kFashionFightingAmountFieldNumber = 73;
  inline ::google::protobuf::int32 fashion_fighting_amount() const;
  inline void set_fashion_fighting_amount(::google::protobuf::int32 value);

  // optional int64 fashion_expire_time = 74;
  inline bool has_fashion_expire_time() const;
  inline void clear_fashion_expire_time();
  static const int kFashionExpireTimeFieldNumber = 74;
  inline ::google::protobuf::int64 fashion_expire_time() const;
  inline void set_fashion_expire_time(::google::protobuf::int64 value);

  // repeated .app.message.EquipmentBaoShiProto bao_shi = 75;
  inline int bao_shi_size() const;
  inline void clear_bao_shi();
  static const int kBaoShiFieldNumber = 75;
  inline const ::app::message::EquipmentBaoShiProto& bao_shi(int index) const;
  inline ::app::message::EquipmentBaoShiProto* mutable_bao_shi(int index);
  inline ::app::message::EquipmentBaoShiProto* add_bao_shi();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentBaoShiProto >&
      bao_shi() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentBaoShiProto >*
      mutable_bao_shi();

  // optional int64 bao_shi_version = 76;
  inline bool has_bao_shi_version() const;
  inline void clear_bao_shi_version();
  static const int kBaoShiVersionFieldNumber = 76;
  inline ::google::protobuf::int64 bao_shi_version() const;
  inline void set_bao_shi_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.EquipmentProto)
 private:
  inline void set_has_binded();
  inline void clear_has_binded();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_base_stat();
  inline void clear_has_base_stat();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_best_refined_fighting_amount();
  inline void clear_has_best_refined_fighting_amount();
  inline void set_has_best_refined_stat();
  inline void clear_has_best_refined_stat();
  inline void set_has_refined_times();
  inline void clear_has_refined_times();
  inline void set_has_refined_stat();
  inline void clear_has_refined_stat();
  inline void set_has_refined_fighting_amount();
  inline void clear_has_refined_fighting_amount();
  inline void set_has_added_stat_count();
  inline void clear_has_added_stat_count();
  inline void set_has_added_stat();
  inline void clear_has_added_stat();
  inline void set_has_added_fighting_amount();
  inline void clear_has_added_fighting_amount();
  inline void set_has_added_stat_type();
  inline void clear_has_added_stat_type();
  inline void set_has_is_unmeltable();
  inline void clear_has_is_unmeltable();
  inline void set_has_ti_pin_val();
  inline void clear_has_ti_pin_val();
  inline void set_has_xun_zhang_fighting_amount();
  inline void clear_has_xun_zhang_fighting_amount();
  inline void set_has_fashion_fighting_amount();
  inline void clear_has_fashion_fighting_amount();
  inline void set_has_fashion_expire_time();
  inline void clear_has_fashion_expire_time();
  inline void set_has_bao_shi_version();
  inline void clear_has_bao_shi_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expire_time_;
  ::app::message::SingleStatProto* base_stat_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::app::message::SingleStatProto* best_refined_stat_;
  ::google::protobuf::int32 best_refined_fighting_amount_;
  ::google::protobuf::int32 refined_times_;
  bool binded_;
  bool is_unmeltable_;
  ::google::protobuf::int32 refined_fighting_amount_;
  ::app::message::SingleStatProto* refined_stat_;
  ::app::message::SingleStatProto* added_stat_;
  ::google::protobuf::int32 added_stat_count_;
  ::google::protobuf::int32 added_fighting_amount_;
  ::google::protobuf::int32 added_stat_type_;
  ::google::protobuf::int32 ti_pin_val_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > xun_zhang_random_stat_;
  ::google::protobuf::int32 xun_zhang_fighting_amount_;
  ::google::protobuf::int32 fashion_fighting_amount_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > fashion_random_stat_;
  ::google::protobuf::int64 fashion_expire_time_;
  ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentBaoShiProto > bao_shi_;
  ::google::protobuf::int64 bao_shi_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static EquipmentProto* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentBaoShiProto : public ::google::protobuf::Message {
 public:
  EquipmentBaoShiProto();
  virtual ~EquipmentBaoShiProto();

  EquipmentBaoShiProto(const EquipmentBaoShiProto& from);

  inline EquipmentBaoShiProto& operator=(const EquipmentBaoShiProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentBaoShiProto& default_instance();

  void Swap(EquipmentBaoShiProto* other);

  // implements Message ----------------------------------------------

  EquipmentBaoShiProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentBaoShiProto& from);
  void MergeFrom(const EquipmentBaoShiProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string icon = 1;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 1;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .app.message.SingleStatProto baseStat = 3;
  inline int basestat_size() const;
  inline void clear_basestat();
  static const int kBaseStatFieldNumber = 3;
  inline const ::app::message::SingleStatProto& basestat(int index) const;
  inline ::app::message::SingleStatProto* mutable_basestat(int index);
  inline ::app::message::SingleStatProto* add_basestat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      basestat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_basestat();

  // optional .app.message.SingleStatProto attachStat = 4;
  inline bool has_attachstat() const;
  inline void clear_attachstat();
  static const int kAttachStatFieldNumber = 4;
  inline const ::app::message::SingleStatProto& attachstat() const;
  inline ::app::message::SingleStatProto* mutable_attachstat();
  inline ::app::message::SingleStatProto* release_attachstat();
  inline void set_allocated_attachstat(::app::message::SingleStatProto* attachstat);

  // optional int32 hole_num = 5;
  inline bool has_hole_num() const;
  inline void clear_hole_num();
  static const int kHoleNumFieldNumber = 5;
  inline ::google::protobuf::int32 hole_num() const;
  inline void set_hole_num(::google::protobuf::int32 value);

  // optional int32 quality = 6;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 6;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 fighting_amount = 7;
  inline bool has_fighting_amount() const;
  inline void clear_fighting_amount();
  static const int kFightingAmountFieldNumber = 7;
  inline ::google::protobuf::int32 fighting_amount() const;
  inline void set_fighting_amount(::google::protobuf::int32 value);

  // repeated int32 base_stat_min_and_max = 8;
  inline int base_stat_min_and_max_size() const;
  inline void clear_base_stat_min_and_max();
  static const int kBaseStatMinAndMaxFieldNumber = 8;
  inline ::google::protobuf::int32 base_stat_min_and_max(int index) const;
  inline void set_base_stat_min_and_max(int index, ::google::protobuf::int32 value);
  inline void add_base_stat_min_and_max(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      base_stat_min_and_max() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_base_stat_min_and_max();

  // repeated int32 attch_stat_min_and_max = 9;
  inline int attch_stat_min_and_max_size() const;
  inline void clear_attch_stat_min_and_max();
  static const int kAttchStatMinAndMaxFieldNumber = 9;
  inline ::google::protobuf::int32 attch_stat_min_and_max(int index) const;
  inline void set_attch_stat_min_and_max(int index, ::google::protobuf::int32 value);
  inline void add_attch_stat_min_and_max(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attch_stat_min_and_max() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attch_stat_min_and_max();

  // @@protoc_insertion_point(class_scope:app.message.EquipmentBaoShiProto)
 private:
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_attachstat();
  inline void clear_has_attachstat();
  inline void set_has_hole_num();
  inline void clear_has_hole_num();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_fighting_amount();
  inline void clear_has_fighting_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* icon_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > basestat_;
  ::app::message::SingleStatProto* attachstat_;
  ::google::protobuf::int32 hole_num_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > base_stat_min_and_max_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attch_stat_min_and_max_;
  ::google::protobuf::int32 fighting_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static EquipmentBaoShiProto* default_instance_;
};
// -------------------------------------------------------------------

class MountEquipmentProto : public ::google::protobuf::Message {
 public:
  MountEquipmentProto();
  virtual ~MountEquipmentProto();

  MountEquipmentProto(const MountEquipmentProto& from);

  inline MountEquipmentProto& operator=(const MountEquipmentProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MountEquipmentProto& default_instance();

  void Swap(MountEquipmentProto* other);

  // implements Message ----------------------------------------------

  MountEquipmentProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountEquipmentProto& from);
  void MergeFrom(const MountEquipmentProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool binded = 2;
  inline bool has_binded() const;
  inline void clear_binded();
  static const int kBindedFieldNumber = 2;
  inline bool binded() const;
  inline void set_binded(bool value);

  // optional int64 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto base_stat = 50;
  inline bool has_base_stat() const;
  inline void clear_base_stat();
  static const int kBaseStatFieldNumber = 50;
  inline const ::app::message::SingleStatProto& base_stat() const;
  inline ::app::message::SingleStatProto* mutable_base_stat();
  inline ::app::message::SingleStatProto* release_base_stat();
  inline void set_allocated_base_stat(::app::message::SingleStatProto* base_stat);

  // optional int32 base_fighting_amount = 51;
  inline bool has_base_fighting_amount() const;
  inline void clear_base_fighting_amount();
  static const int kBaseFightingAmountFieldNumber = 51;
  inline ::google::protobuf::int32 base_fighting_amount() const;
  inline void set_base_fighting_amount(::google::protobuf::int32 value);

  // optional int32 best_refined_fighting_amount = 52;
  inline bool has_best_refined_fighting_amount() const;
  inline void clear_best_refined_fighting_amount();
  static const int kBestRefinedFightingAmountFieldNumber = 52;
  inline ::google::protobuf::int32 best_refined_fighting_amount() const;
  inline void set_best_refined_fighting_amount(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  inline bool has_best_refined_stat() const;
  inline void clear_best_refined_stat();
  static const int kBestRefinedStatFieldNumber = 53;
  inline const ::app::message::SingleStatProto& best_refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_best_refined_stat();
  inline ::app::message::SingleStatProto* release_best_refined_stat();
  inline void set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat);

  // optional int32 refined_times = 61;
  inline bool has_refined_times() const;
  inline void clear_refined_times();
  static const int kRefinedTimesFieldNumber = 61;
  inline ::google::protobuf::int32 refined_times() const;
  inline void set_refined_times(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto refined_stat = 62;
  inline bool has_refined_stat() const;
  inline void clear_refined_stat();
  static const int kRefinedStatFieldNumber = 62;
  inline const ::app::message::SingleStatProto& refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_refined_stat();
  inline ::app::message::SingleStatProto* release_refined_stat();
  inline void set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat);

  // optional int32 refined_fighting_amount = 63;
  inline bool has_refined_fighting_amount() const;
  inline void clear_refined_fighting_amount();
  static const int kRefinedFightingAmountFieldNumber = 63;
  inline ::google::protobuf::int32 refined_fighting_amount() const;
  inline void set_refined_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_count = 64;
  inline bool has_added_stat_count() const;
  inline void clear_added_stat_count();
  static const int kAddedStatCountFieldNumber = 64;
  inline ::google::protobuf::int32 added_stat_count() const;
  inline void set_added_stat_count(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto added_stat = 65;
  inline bool has_added_stat() const;
  inline void clear_added_stat();
  static const int kAddedStatFieldNumber = 65;
  inline const ::app::message::SingleStatProto& added_stat() const;
  inline ::app::message::SingleStatProto* mutable_added_stat();
  inline ::app::message::SingleStatProto* release_added_stat();
  inline void set_allocated_added_stat(::app::message::SingleStatProto* added_stat);

  // optional int32 added_fighting_amount = 66;
  inline bool has_added_fighting_amount() const;
  inline void clear_added_fighting_amount();
  static const int kAddedFightingAmountFieldNumber = 66;
  inline ::google::protobuf::int32 added_fighting_amount() const;
  inline void set_added_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_type = 67;
  inline bool has_added_stat_type() const;
  inline void clear_added_stat_type();
  static const int kAddedStatTypeFieldNumber = 67;
  inline ::google::protobuf::int32 added_stat_type() const;
  inline void set_added_stat_type(::google::protobuf::int32 value);

  // optional int32 ti_pin_val = 69;
  inline bool has_ti_pin_val() const;
  inline void clear_ti_pin_val();
  static const int kTiPinValFieldNumber = 69;
  inline ::google::protobuf::int32 ti_pin_val() const;
  inline void set_ti_pin_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MountEquipmentProto)
 private:
  inline void set_has_binded();
  inline void clear_has_binded();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_base_stat();
  inline void clear_has_base_stat();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_best_refined_fighting_amount();
  inline void clear_has_best_refined_fighting_amount();
  inline void set_has_best_refined_stat();
  inline void clear_has_best_refined_stat();
  inline void set_has_refined_times();
  inline void clear_has_refined_times();
  inline void set_has_refined_stat();
  inline void clear_has_refined_stat();
  inline void set_has_refined_fighting_amount();
  inline void clear_has_refined_fighting_amount();
  inline void set_has_added_stat_count();
  inline void clear_has_added_stat_count();
  inline void set_has_added_stat();
  inline void clear_has_added_stat();
  inline void set_has_added_fighting_amount();
  inline void clear_has_added_fighting_amount();
  inline void set_has_added_stat_type();
  inline void clear_has_added_stat_type();
  inline void set_has_ti_pin_val();
  inline void clear_has_ti_pin_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expire_time_;
  bool binded_;
  ::google::protobuf::int32 quality_;
  ::app::message::SingleStatProto* base_stat_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 best_refined_fighting_amount_;
  ::app::message::SingleStatProto* best_refined_stat_;
  ::app::message::SingleStatProto* refined_stat_;
  ::google::protobuf::int32 refined_times_;
  ::google::protobuf::int32 refined_fighting_amount_;
  ::app::message::SingleStatProto* added_stat_;
  ::google::protobuf::int32 added_stat_count_;
  ::google::protobuf::int32 added_fighting_amount_;
  ::google::protobuf::int32 added_stat_type_;
  ::google::protobuf::int32 ti_pin_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static MountEquipmentProto* default_instance_;
};
// -------------------------------------------------------------------

class ShieldEquipmentProto : public ::google::protobuf::Message {
 public:
  ShieldEquipmentProto();
  virtual ~ShieldEquipmentProto();

  ShieldEquipmentProto(const ShieldEquipmentProto& from);

  inline ShieldEquipmentProto& operator=(const ShieldEquipmentProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShieldEquipmentProto& default_instance();

  void Swap(ShieldEquipmentProto* other);

  // implements Message ----------------------------------------------

  ShieldEquipmentProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShieldEquipmentProto& from);
  void MergeFrom(const ShieldEquipmentProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool binded = 2;
  inline bool has_binded() const;
  inline void clear_binded();
  static const int kBindedFieldNumber = 2;
  inline bool binded() const;
  inline void set_binded(bool value);

  // optional int64 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto base_stat = 50;
  inline bool has_base_stat() const;
  inline void clear_base_stat();
  static const int kBaseStatFieldNumber = 50;
  inline const ::app::message::SingleStatProto& base_stat() const;
  inline ::app::message::SingleStatProto* mutable_base_stat();
  inline ::app::message::SingleStatProto* release_base_stat();
  inline void set_allocated_base_stat(::app::message::SingleStatProto* base_stat);

  // optional int32 base_fighting_amount = 51;
  inline bool has_base_fighting_amount() const;
  inline void clear_base_fighting_amount();
  static const int kBaseFightingAmountFieldNumber = 51;
  inline ::google::protobuf::int32 base_fighting_amount() const;
  inline void set_base_fighting_amount(::google::protobuf::int32 value);

  // optional int32 best_refined_fighting_amount = 52;
  inline bool has_best_refined_fighting_amount() const;
  inline void clear_best_refined_fighting_amount();
  static const int kBestRefinedFightingAmountFieldNumber = 52;
  inline ::google::protobuf::int32 best_refined_fighting_amount() const;
  inline void set_best_refined_fighting_amount(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  inline bool has_best_refined_stat() const;
  inline void clear_best_refined_stat();
  static const int kBestRefinedStatFieldNumber = 53;
  inline const ::app::message::SingleStatProto& best_refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_best_refined_stat();
  inline ::app::message::SingleStatProto* release_best_refined_stat();
  inline void set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat);

  // optional int32 refined_times = 61;
  inline bool has_refined_times() const;
  inline void clear_refined_times();
  static const int kRefinedTimesFieldNumber = 61;
  inline ::google::protobuf::int32 refined_times() const;
  inline void set_refined_times(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto refined_stat = 62;
  inline bool has_refined_stat() const;
  inline void clear_refined_stat();
  static const int kRefinedStatFieldNumber = 62;
  inline const ::app::message::SingleStatProto& refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_refined_stat();
  inline ::app::message::SingleStatProto* release_refined_stat();
  inline void set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat);

  // optional int32 refined_fighting_amount = 63;
  inline bool has_refined_fighting_amount() const;
  inline void clear_refined_fighting_amount();
  static const int kRefinedFightingAmountFieldNumber = 63;
  inline ::google::protobuf::int32 refined_fighting_amount() const;
  inline void set_refined_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_count = 64;
  inline bool has_added_stat_count() const;
  inline void clear_added_stat_count();
  static const int kAddedStatCountFieldNumber = 64;
  inline ::google::protobuf::int32 added_stat_count() const;
  inline void set_added_stat_count(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto added_stat = 65;
  inline bool has_added_stat() const;
  inline void clear_added_stat();
  static const int kAddedStatFieldNumber = 65;
  inline const ::app::message::SingleStatProto& added_stat() const;
  inline ::app::message::SingleStatProto* mutable_added_stat();
  inline ::app::message::SingleStatProto* release_added_stat();
  inline void set_allocated_added_stat(::app::message::SingleStatProto* added_stat);

  // optional int32 added_fighting_amount = 66;
  inline bool has_added_fighting_amount() const;
  inline void clear_added_fighting_amount();
  static const int kAddedFightingAmountFieldNumber = 66;
  inline ::google::protobuf::int32 added_fighting_amount() const;
  inline void set_added_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_type = 67;
  inline bool has_added_stat_type() const;
  inline void clear_added_stat_type();
  static const int kAddedStatTypeFieldNumber = 67;
  inline ::google::protobuf::int32 added_stat_type() const;
  inline void set_added_stat_type(::google::protobuf::int32 value);

  // optional int32 ti_pin_val = 69;
  inline bool has_ti_pin_val() const;
  inline void clear_ti_pin_val();
  static const int kTiPinValFieldNumber = 69;
  inline ::google::protobuf::int32 ti_pin_val() const;
  inline void set_ti_pin_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ShieldEquipmentProto)
 private:
  inline void set_has_binded();
  inline void clear_has_binded();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_base_stat();
  inline void clear_has_base_stat();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_best_refined_fighting_amount();
  inline void clear_has_best_refined_fighting_amount();
  inline void set_has_best_refined_stat();
  inline void clear_has_best_refined_stat();
  inline void set_has_refined_times();
  inline void clear_has_refined_times();
  inline void set_has_refined_stat();
  inline void clear_has_refined_stat();
  inline void set_has_refined_fighting_amount();
  inline void clear_has_refined_fighting_amount();
  inline void set_has_added_stat_count();
  inline void clear_has_added_stat_count();
  inline void set_has_added_stat();
  inline void clear_has_added_stat();
  inline void set_has_added_fighting_amount();
  inline void clear_has_added_fighting_amount();
  inline void set_has_added_stat_type();
  inline void clear_has_added_stat_type();
  inline void set_has_ti_pin_val();
  inline void clear_has_ti_pin_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expire_time_;
  bool binded_;
  ::google::protobuf::int32 quality_;
  ::app::message::SingleStatProto* base_stat_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 best_refined_fighting_amount_;
  ::app::message::SingleStatProto* best_refined_stat_;
  ::app::message::SingleStatProto* refined_stat_;
  ::google::protobuf::int32 refined_times_;
  ::google::protobuf::int32 refined_fighting_amount_;
  ::app::message::SingleStatProto* added_stat_;
  ::google::protobuf::int32 added_stat_count_;
  ::google::protobuf::int32 added_fighting_amount_;
  ::google::protobuf::int32 added_stat_type_;
  ::google::protobuf::int32 ti_pin_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static ShieldEquipmentProto* default_instance_;
};
// -------------------------------------------------------------------

class PetEquipmentProto : public ::google::protobuf::Message {
 public:
  PetEquipmentProto();
  virtual ~PetEquipmentProto();

  PetEquipmentProto(const PetEquipmentProto& from);

  inline PetEquipmentProto& operator=(const PetEquipmentProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetEquipmentProto& default_instance();

  void Swap(PetEquipmentProto* other);

  // implements Message ----------------------------------------------

  PetEquipmentProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetEquipmentProto& from);
  void MergeFrom(const PetEquipmentProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool binded = 2;
  inline bool has_binded() const;
  inline void clear_binded();
  static const int kBindedFieldNumber = 2;
  inline bool binded() const;
  inline void set_binded(bool value);

  // optional int64 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto base_stat = 50;
  inline bool has_base_stat() const;
  inline void clear_base_stat();
  static const int kBaseStatFieldNumber = 50;
  inline const ::app::message::SingleStatProto& base_stat() const;
  inline ::app::message::SingleStatProto* mutable_base_stat();
  inline ::app::message::SingleStatProto* release_base_stat();
  inline void set_allocated_base_stat(::app::message::SingleStatProto* base_stat);

  // optional int32 base_fighting_amount = 51;
  inline bool has_base_fighting_amount() const;
  inline void clear_base_fighting_amount();
  static const int kBaseFightingAmountFieldNumber = 51;
  inline ::google::protobuf::int32 base_fighting_amount() const;
  inline void set_base_fighting_amount(::google::protobuf::int32 value);

  // optional int32 best_refined_fighting_amount = 52;
  inline bool has_best_refined_fighting_amount() const;
  inline void clear_best_refined_fighting_amount();
  static const int kBestRefinedFightingAmountFieldNumber = 52;
  inline ::google::protobuf::int32 best_refined_fighting_amount() const;
  inline void set_best_refined_fighting_amount(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  inline bool has_best_refined_stat() const;
  inline void clear_best_refined_stat();
  static const int kBestRefinedStatFieldNumber = 53;
  inline const ::app::message::SingleStatProto& best_refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_best_refined_stat();
  inline ::app::message::SingleStatProto* release_best_refined_stat();
  inline void set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat);

  // optional int32 refined_times = 61;
  inline bool has_refined_times() const;
  inline void clear_refined_times();
  static const int kRefinedTimesFieldNumber = 61;
  inline ::google::protobuf::int32 refined_times() const;
  inline void set_refined_times(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto refined_stat = 62;
  inline bool has_refined_stat() const;
  inline void clear_refined_stat();
  static const int kRefinedStatFieldNumber = 62;
  inline const ::app::message::SingleStatProto& refined_stat() const;
  inline ::app::message::SingleStatProto* mutable_refined_stat();
  inline ::app::message::SingleStatProto* release_refined_stat();
  inline void set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat);

  // optional int32 refined_fighting_amount = 63;
  inline bool has_refined_fighting_amount() const;
  inline void clear_refined_fighting_amount();
  static const int kRefinedFightingAmountFieldNumber = 63;
  inline ::google::protobuf::int32 refined_fighting_amount() const;
  inline void set_refined_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_count = 64;
  inline bool has_added_stat_count() const;
  inline void clear_added_stat_count();
  static const int kAddedStatCountFieldNumber = 64;
  inline ::google::protobuf::int32 added_stat_count() const;
  inline void set_added_stat_count(::google::protobuf::int32 value);

  // optional .app.message.SingleStatProto added_stat = 65;
  inline bool has_added_stat() const;
  inline void clear_added_stat();
  static const int kAddedStatFieldNumber = 65;
  inline const ::app::message::SingleStatProto& added_stat() const;
  inline ::app::message::SingleStatProto* mutable_added_stat();
  inline ::app::message::SingleStatProto* release_added_stat();
  inline void set_allocated_added_stat(::app::message::SingleStatProto* added_stat);

  // optional int32 added_fighting_amount = 66;
  inline bool has_added_fighting_amount() const;
  inline void clear_added_fighting_amount();
  static const int kAddedFightingAmountFieldNumber = 66;
  inline ::google::protobuf::int32 added_fighting_amount() const;
  inline void set_added_fighting_amount(::google::protobuf::int32 value);

  // optional int32 added_stat_type = 67;
  inline bool has_added_stat_type() const;
  inline void clear_added_stat_type();
  static const int kAddedStatTypeFieldNumber = 67;
  inline ::google::protobuf::int32 added_stat_type() const;
  inline void set_added_stat_type(::google::protobuf::int32 value);

  // optional int32 ti_pin_val = 69;
  inline bool has_ti_pin_val() const;
  inline void clear_ti_pin_val();
  static const int kTiPinValFieldNumber = 69;
  inline ::google::protobuf::int32 ti_pin_val() const;
  inline void set_ti_pin_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PetEquipmentProto)
 private:
  inline void set_has_binded();
  inline void clear_has_binded();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_base_stat();
  inline void clear_has_base_stat();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_best_refined_fighting_amount();
  inline void clear_has_best_refined_fighting_amount();
  inline void set_has_best_refined_stat();
  inline void clear_has_best_refined_stat();
  inline void set_has_refined_times();
  inline void clear_has_refined_times();
  inline void set_has_refined_stat();
  inline void clear_has_refined_stat();
  inline void set_has_refined_fighting_amount();
  inline void clear_has_refined_fighting_amount();
  inline void set_has_added_stat_count();
  inline void clear_has_added_stat_count();
  inline void set_has_added_stat();
  inline void clear_has_added_stat();
  inline void set_has_added_fighting_amount();
  inline void clear_has_added_fighting_amount();
  inline void set_has_added_stat_type();
  inline void clear_has_added_stat_type();
  inline void set_has_ti_pin_val();
  inline void clear_has_ti_pin_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expire_time_;
  bool binded_;
  ::google::protobuf::int32 quality_;
  ::app::message::SingleStatProto* base_stat_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 best_refined_fighting_amount_;
  ::app::message::SingleStatProto* best_refined_stat_;
  ::app::message::SingleStatProto* refined_stat_;
  ::google::protobuf::int32 refined_times_;
  ::google::protobuf::int32 refined_fighting_amount_;
  ::app::message::SingleStatProto* added_stat_;
  ::google::protobuf::int32 added_stat_count_;
  ::google::protobuf::int32 added_fighting_amount_;
  ::google::protobuf::int32 added_stat_type_;
  ::google::protobuf::int32 ti_pin_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static PetEquipmentProto* default_instance_;
};
// -------------------------------------------------------------------

class BaoShiProto : public ::google::protobuf::Message {
 public:
  BaoShiProto();
  virtual ~BaoShiProto();

  BaoShiProto(const BaoShiProto& from);

  inline BaoShiProto& operator=(const BaoShiProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaoShiProto& default_instance();

  void Swap(BaoShiProto* other);

  // implements Message ----------------------------------------------

  BaoShiProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaoShiProto& from);
  void MergeFrom(const BaoShiProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool binded = 2;
  inline bool has_binded() const;
  inline void clear_binded();
  static const int kBindedFieldNumber = 2;
  inline bool binded() const;
  inline void set_binded(bool value);

  // optional int64 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // repeated .app.message.SingleStatProto baseStat = 5;
  inline int basestat_size() const;
  inline void clear_basestat();
  static const int kBaseStatFieldNumber = 5;
  inline const ::app::message::SingleStatProto& basestat(int index) const;
  inline ::app::message::SingleStatProto* mutable_basestat(int index);
  inline ::app::message::SingleStatProto* add_basestat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      basestat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_basestat();

  // optional .app.message.SingleStatProto attachStat = 6;
  inline bool has_attachstat() const;
  inline void clear_attachstat();
  static const int kAttachStatFieldNumber = 6;
  inline const ::app::message::SingleStatProto& attachstat() const;
  inline ::app::message::SingleStatProto* mutable_attachstat();
  inline ::app::message::SingleStatProto* release_attachstat();
  inline void set_allocated_attachstat(::app::message::SingleStatProto* attachstat);

  // optional int32 fightingAmount = 7;
  inline bool has_fightingamount() const;
  inline void clear_fightingamount();
  static const int kFightingAmountFieldNumber = 7;
  inline ::google::protobuf::int32 fightingamount() const;
  inline void set_fightingamount(::google::protobuf::int32 value);

  // optional int64 bao_shi_version = 8;
  inline bool has_bao_shi_version() const;
  inline void clear_bao_shi_version();
  static const int kBaoShiVersionFieldNumber = 8;
  inline ::google::protobuf::int64 bao_shi_version() const;
  inline void set_bao_shi_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.BaoShiProto)
 private:
  inline void set_has_binded();
  inline void clear_has_binded();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_attachstat();
  inline void clear_has_attachstat();
  inline void set_has_fightingamount();
  inline void clear_has_fightingamount();
  inline void set_has_bao_shi_version();
  inline void clear_has_bao_shi_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expire_time_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > basestat_;
  bool binded_;
  ::google::protobuf::int32 fightingamount_;
  ::app::message::SingleStatProto* attachstat_;
  ::google::protobuf::int64 bao_shi_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static BaoShiProto* default_instance_;
};
// -------------------------------------------------------------------

class SuperWeaponGemDataProto : public ::google::protobuf::Message {
 public:
  SuperWeaponGemDataProto();
  virtual ~SuperWeaponGemDataProto();

  SuperWeaponGemDataProto(const SuperWeaponGemDataProto& from);

  inline SuperWeaponGemDataProto& operator=(const SuperWeaponGemDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuperWeaponGemDataProto& default_instance();

  void Swap(SuperWeaponGemDataProto* other);

  // implements Message ----------------------------------------------

  SuperWeaponGemDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuperWeaponGemDataProto& from);
  void MergeFrom(const SuperWeaponGemDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsDataProto base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::app::message::GoodsDataProto& base_data() const;
  inline ::app::message::GoodsDataProto* mutable_base_data();
  inline ::app::message::GoodsDataProto* release_base_data();
  inline void set_allocated_base_data(::app::message::GoodsDataProto* base_data);

  // optional .app.message.SpriteStatProto add_stat = 2;
  inline bool has_add_stat() const;
  inline void clear_add_stat();
  static const int kAddStatFieldNumber = 2;
  inline const ::app::message::SpriteStatProto& add_stat() const;
  inline ::app::message::SpriteStatProto* mutable_add_stat();
  inline ::app::message::SpriteStatProto* release_add_stat();
  inline void set_allocated_add_stat(::app::message::SpriteStatProto* add_stat);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.SuperWeaponGemDataProto)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_add_stat();
  inline void clear_has_add_stat();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsDataProto* base_data_;
  ::app::message::SpriteStatProto* add_stat_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static SuperWeaponGemDataProto* default_instance_;
};
// -------------------------------------------------------------------

class GoodsWrapperProto : public ::google::protobuf::Message {
 public:
  GoodsWrapperProto();
  virtual ~GoodsWrapperProto();

  GoodsWrapperProto(const GoodsWrapperProto& from);

  inline GoodsWrapperProto& operator=(const GoodsWrapperProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsWrapperProto& default_instance();

  void Swap(GoodsWrapperProto* other);

  // implements Message ----------------------------------------------

  GoodsWrapperProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsWrapperProto& from);
  void MergeFrom(const GoodsWrapperProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes static_data = 1;
  inline bool has_static_data() const;
  inline void clear_static_data();
  static const int kStaticDataFieldNumber = 1;
  inline const ::std::string& static_data() const;
  inline void set_static_data(const ::std::string& value);
  inline void set_static_data(const char* value);
  inline void set_static_data(const void* value, size_t size);
  inline ::std::string* mutable_static_data();
  inline ::std::string* release_static_data();
  inline void set_allocated_static_data(::std::string* static_data);

  // optional bytes dynamic_data = 2;
  inline bool has_dynamic_data() const;
  inline void clear_dynamic_data();
  static const int kDynamicDataFieldNumber = 2;
  inline const ::std::string& dynamic_data() const;
  inline void set_dynamic_data(const ::std::string& value);
  inline void set_dynamic_data(const char* value);
  inline void set_dynamic_data(const void* value, size_t size);
  inline ::std::string* mutable_dynamic_data();
  inline ::std::string* release_dynamic_data();
  inline void set_allocated_dynamic_data(::std::string* dynamic_data);

  // optional int32 count = 10 [default = 1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 10;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional bool binded = 11;
  inline bool has_binded() const;
  inline void clear_binded();
  static const int kBindedFieldNumber = 11;
  inline bool binded() const;
  inline void set_binded(bool value);

  // optional int64 expire_time = 12;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 12;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // optional int32 duration = 13;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 13;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional int32 tab = 14;
  inline bool has_tab() const;
  inline void clear_tab();
  static const int kTabFieldNumber = 14;
  inline ::google::protobuf::int32 tab() const;
  inline void set_tab(::google::protobuf::int32 value);

  // optional int64 can_use_time = 15;
  inline bool has_can_use_time() const;
  inline void clear_can_use_time();
  static const int kCanUseTimeFieldNumber = 15;
  inline ::google::protobuf::int64 can_use_time() const;
  inline void set_can_use_time(::google::protobuf::int64 value);

  // optional int64 can_use_after_millis = 16;
  inline bool has_can_use_after_millis() const;
  inline void clear_can_use_after_millis();
  static const int kCanUseAfterMillisFieldNumber = 16;
  inline ::google::protobuf::int64 can_use_after_millis() const;
  inline void set_can_use_after_millis(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.GoodsWrapperProto)
 private:
  inline void set_has_static_data();
  inline void clear_has_static_data();
  inline void set_has_dynamic_data();
  inline void clear_has_dynamic_data();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_binded();
  inline void clear_has_binded();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_tab();
  inline void clear_has_tab();
  inline void set_has_can_use_time();
  inline void clear_has_can_use_time();
  inline void set_has_can_use_after_millis();
  inline void clear_has_can_use_after_millis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* static_data_;
  ::std::string* dynamic_data_;
  ::google::protobuf::int32 count_;
  bool binded_;
  ::google::protobuf::int64 expire_time_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 tab_;
  ::google::protobuf::int64 can_use_time_;
  ::google::protobuf::int64 can_use_after_millis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static GoodsWrapperProto* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeGoodsWrapperProto : public ::google::protobuf::Message {
 public:
  ExchangeGoodsWrapperProto();
  virtual ~ExchangeGoodsWrapperProto();

  ExchangeGoodsWrapperProto(const ExchangeGoodsWrapperProto& from);

  inline ExchangeGoodsWrapperProto& operator=(const ExchangeGoodsWrapperProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeGoodsWrapperProto& default_instance();

  void Swap(ExchangeGoodsWrapperProto* other);

  // implements Message ----------------------------------------------

  ExchangeGoodsWrapperProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeGoodsWrapperProto& from);
  void MergeFrom(const ExchangeGoodsWrapperProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes static_data = 1;
  inline bool has_static_data() const;
  inline void clear_static_data();
  static const int kStaticDataFieldNumber = 1;
  inline const ::std::string& static_data() const;
  inline void set_static_data(const ::std::string& value);
  inline void set_static_data(const char* value);
  inline void set_static_data(const void* value, size_t size);
  inline ::std::string* mutable_static_data();
  inline ::std::string* release_static_data();
  inline void set_allocated_static_data(::std::string* static_data);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional bool canUsebinded = 3;
  inline bool has_canusebinded() const;
  inline void clear_canusebinded();
  static const int kCanUsebindedFieldNumber = 3;
  inline bool canusebinded() const;
  inline void set_canusebinded(bool value);

  // optional int32 tab = 4;
  inline bool has_tab() const;
  inline void clear_tab();
  static const int kTabFieldNumber = 4;
  inline ::google::protobuf::int32 tab() const;
  inline void set_tab(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ExchangeGoodsWrapperProto)
 private:
  inline void set_has_static_data();
  inline void clear_has_static_data();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_canusebinded();
  inline void clear_has_canusebinded();
  inline void set_has_tab();
  inline void clear_has_tab();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* static_data_;
  ::google::protobuf::int32 count_;
  bool canusebinded_;
  ::google::protobuf::int32 tab_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_goods_2eproto();
  friend void protobuf_AssignDesc_goods_2eproto();
  friend void protobuf_ShutdownFile_goods_2eproto();

  void InitAsDefaultInstance();
  static ExchangeGoodsWrapperProto* default_instance_;
};
// ===================================================================


// ===================================================================

// GoodsDataProto

// optional uint32 id = 1;
inline bool GoodsDataProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsDataProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsDataProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsDataProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GoodsDataProto::id() const {
  return id_;
}
inline void GoodsDataProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool GoodsDataProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsDataProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsDataProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsDataProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GoodsDataProto::name() const {
  return *name_;
}
inline void GoodsDataProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GoodsDataProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GoodsDataProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsDataProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GoodsDataProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsDataProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes desc = 3;
inline bool GoodsDataProto::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoodsDataProto::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoodsDataProto::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoodsDataProto::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& GoodsDataProto::desc() const {
  return *desc_;
}
inline void GoodsDataProto::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void GoodsDataProto::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void GoodsDataProto::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsDataProto::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* GoodsDataProto::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsDataProto::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 max_count = 5 [default = 1];
inline bool GoodsDataProto::has_max_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoodsDataProto::set_has_max_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoodsDataProto::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoodsDataProto::clear_max_count() {
  max_count_ = 1;
  clear_has_max_count();
}
inline ::google::protobuf::int32 GoodsDataProto::max_count() const {
  return max_count_;
}
inline void GoodsDataProto::set_max_count(::google::protobuf::int32 value) {
  set_has_max_count();
  max_count_ = value;
}

// optional int32 sell_price = 7;
inline bool GoodsDataProto::has_sell_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GoodsDataProto::set_has_sell_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GoodsDataProto::clear_has_sell_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GoodsDataProto::clear_sell_price() {
  sell_price_ = 0;
  clear_has_sell_price();
}
inline ::google::protobuf::int32 GoodsDataProto::sell_price() const {
  return sell_price_;
}
inline void GoodsDataProto::set_sell_price(::google::protobuf::int32 value) {
  set_has_sell_price();
  sell_price_ = value;
}

// optional int32 quality = 9;
inline bool GoodsDataProto::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GoodsDataProto::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GoodsDataProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GoodsDataProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 GoodsDataProto::quality() const {
  return quality_;
}
inline void GoodsDataProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 require_level = 10 [default = 1];
inline bool GoodsDataProto::has_require_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GoodsDataProto::set_has_require_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GoodsDataProto::clear_has_require_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GoodsDataProto::clear_require_level() {
  require_level_ = 1;
  clear_has_require_level();
}
inline ::google::protobuf::int32 GoodsDataProto::require_level() const {
  return require_level_;
}
inline void GoodsDataProto::set_require_level(::google::protobuf::int32 value) {
  set_has_require_level();
  require_level_ = value;
}

// optional int32 require_max_level = 24;
inline bool GoodsDataProto::has_require_max_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GoodsDataProto::set_has_require_max_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GoodsDataProto::clear_has_require_max_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GoodsDataProto::clear_require_max_level() {
  require_max_level_ = 0;
  clear_has_require_max_level();
}
inline ::google::protobuf::int32 GoodsDataProto::require_max_level() const {
  return require_max_level_;
}
inline void GoodsDataProto::set_require_max_level(::google::protobuf::int32 value) {
  set_has_require_max_level();
  require_max_level_ = value;
}

// optional string icon = 11;
inline bool GoodsDataProto::has_icon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GoodsDataProto::set_has_icon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GoodsDataProto::clear_has_icon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GoodsDataProto::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& GoodsDataProto::icon() const {
  return *icon_;
}
inline void GoodsDataProto::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GoodsDataProto::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GoodsDataProto::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsDataProto::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* GoodsDataProto::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsDataProto::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool dropable = 15 [default = true];
inline bool GoodsDataProto::has_dropable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GoodsDataProto::set_has_dropable() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GoodsDataProto::clear_has_dropable() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GoodsDataProto::clear_dropable() {
  dropable_ = true;
  clear_has_dropable();
}
inline bool GoodsDataProto::dropable() const {
  return dropable_;
}
inline void GoodsDataProto::set_dropable(bool value) {
  set_has_dropable();
  dropable_ = value;
}

// optional bool verify_sell = 16;
inline bool GoodsDataProto::has_verify_sell() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GoodsDataProto::set_has_verify_sell() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GoodsDataProto::clear_has_verify_sell() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GoodsDataProto::clear_verify_sell() {
  verify_sell_ = false;
  clear_has_verify_sell();
}
inline bool GoodsDataProto::verify_sell() const {
  return verify_sell_;
}
inline void GoodsDataProto::set_verify_sell(bool value) {
  set_has_verify_sell();
  verify_sell_ = value;
}

// optional bool verify_drop = 17;
inline bool GoodsDataProto::has_verify_drop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GoodsDataProto::set_has_verify_drop() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GoodsDataProto::clear_has_verify_drop() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GoodsDataProto::clear_verify_drop() {
  verify_drop_ = false;
  clear_has_verify_drop();
}
inline bool GoodsDataProto::verify_drop() const {
  return verify_drop_;
}
inline void GoodsDataProto::set_verify_drop(bool value) {
  set_has_verify_drop();
  verify_drop_ = value;
}

// optional int32 cd_type = 18;
inline bool GoodsDataProto::has_cd_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GoodsDataProto::set_has_cd_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GoodsDataProto::clear_has_cd_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GoodsDataProto::clear_cd_type() {
  cd_type_ = 0;
  clear_has_cd_type();
}
inline ::google::protobuf::int32 GoodsDataProto::cd_type() const {
  return cd_type_;
}
inline void GoodsDataProto::set_cd_type(::google::protobuf::int32 value) {
  set_has_cd_type();
  cd_type_ = value;
}

// optional bool useable = 19;
inline bool GoodsDataProto::has_useable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GoodsDataProto::set_has_useable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GoodsDataProto::clear_has_useable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GoodsDataProto::clear_useable() {
  useable_ = false;
  clear_has_useable();
}
inline bool GoodsDataProto::useable() const {
  return useable_;
}
inline void GoodsDataProto::set_useable(bool value) {
  set_has_useable();
  useable_ = value;
}

// optional bool bulk_useable = 20;
inline bool GoodsDataProto::has_bulk_useable() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GoodsDataProto::set_has_bulk_useable() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GoodsDataProto::clear_has_bulk_useable() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GoodsDataProto::clear_bulk_useable() {
  bulk_useable_ = false;
  clear_has_bulk_useable();
}
inline bool GoodsDataProto::bulk_useable() const {
  return bulk_useable_;
}
inline void GoodsDataProto::set_bulk_useable(bool value) {
  set_has_bulk_useable();
  bulk_useable_ = value;
}

// optional bool can_set_shortcut = 21;
inline bool GoodsDataProto::has_can_set_shortcut() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GoodsDataProto::set_has_can_set_shortcut() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GoodsDataProto::clear_has_can_set_shortcut() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GoodsDataProto::clear_can_set_shortcut() {
  can_set_shortcut_ = false;
  clear_has_can_set_shortcut();
}
inline bool GoodsDataProto::can_set_shortcut() const {
  return can_set_shortcut_;
}
inline void GoodsDataProto::set_can_set_shortcut(bool value) {
  set_has_can_set_shortcut();
  can_set_shortcut_ = value;
}

// optional bool is_suggestion = 22;
inline bool GoodsDataProto::has_is_suggestion() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GoodsDataProto::set_has_is_suggestion() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GoodsDataProto::clear_has_is_suggestion() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GoodsDataProto::clear_is_suggestion() {
  is_suggestion_ = false;
  clear_has_is_suggestion();
}
inline bool GoodsDataProto::is_suggestion() const {
  return is_suggestion_;
}
inline void GoodsDataProto::set_is_suggestion(bool value) {
  set_has_is_suggestion();
  is_suggestion_ = value;
}

// optional int32 yitianshenjue_cuilian_value = 23;
inline bool GoodsDataProto::has_yitianshenjue_cuilian_value() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GoodsDataProto::set_has_yitianshenjue_cuilian_value() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GoodsDataProto::clear_has_yitianshenjue_cuilian_value() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GoodsDataProto::clear_yitianshenjue_cuilian_value() {
  yitianshenjue_cuilian_value_ = 0;
  clear_has_yitianshenjue_cuilian_value();
}
inline ::google::protobuf::int32 GoodsDataProto::yitianshenjue_cuilian_value() const {
  return yitianshenjue_cuilian_value_;
}
inline void GoodsDataProto::set_yitianshenjue_cuilian_value(::google::protobuf::int32 value) {
  set_has_yitianshenjue_cuilian_value();
  yitianshenjue_cuilian_value_ = value;
}

// -------------------------------------------------------------------

// EquipmentDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool EquipmentDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& EquipmentDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* EquipmentDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* EquipmentDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void EquipmentDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 equip_type = 2 [deprecated = true];
inline bool EquipmentDataProto::has_equip_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentDataProto::set_has_equip_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentDataProto::clear_has_equip_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentDataProto::clear_equip_type() {
  equip_type_ = 0;
  clear_has_equip_type();
}
inline ::google::protobuf::int32 EquipmentDataProto::equip_type() const {
  return equip_type_;
}
inline void EquipmentDataProto::set_equip_type(::google::protobuf::int32 value) {
  set_has_equip_type();
  equip_type_ = value;
}

// optional .app.message.SingleStatProto base_stat = 4 [deprecated = true];
inline bool EquipmentDataProto::has_base_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentDataProto::set_has_base_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentDataProto::clear_has_base_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentDataProto::clear_base_stat() {
  if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
  clear_has_base_stat();
}
inline const ::app::message::SingleStatProto& EquipmentDataProto::base_stat() const {
  return base_stat_ != NULL ? *base_stat_ : *default_instance_->base_stat_;
}
inline ::app::message::SingleStatProto* EquipmentDataProto::mutable_base_stat() {
  set_has_base_stat();
  if (base_stat_ == NULL) base_stat_ = new ::app::message::SingleStatProto;
  return base_stat_;
}
inline ::app::message::SingleStatProto* EquipmentDataProto::release_base_stat() {
  clear_has_base_stat();
  ::app::message::SingleStatProto* temp = base_stat_;
  base_stat_ = NULL;
  return temp;
}
inline void EquipmentDataProto::set_allocated_base_stat(::app::message::SingleStatProto* base_stat) {
  delete base_stat_;
  base_stat_ = base_stat;
  if (base_stat) {
    set_has_base_stat();
  } else {
    clear_has_base_stat();
  }
}

// optional int32 refined_max_times = 5;
inline bool EquipmentDataProto::has_refined_max_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentDataProto::set_has_refined_max_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentDataProto::clear_has_refined_max_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentDataProto::clear_refined_max_times() {
  refined_max_times_ = 0;
  clear_has_refined_max_times();
}
inline ::google::protobuf::int32 EquipmentDataProto::refined_max_times() const {
  return refined_max_times_;
}
inline void EquipmentDataProto::set_refined_max_times(::google::protobuf::int32 value) {
  set_has_refined_max_times();
  refined_max_times_ = value;
}

// optional int32 added_stat_max_count = 6;
inline bool EquipmentDataProto::has_added_stat_max_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentDataProto::set_has_added_stat_max_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentDataProto::clear_has_added_stat_max_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentDataProto::clear_added_stat_max_count() {
  added_stat_max_count_ = 0;
  clear_has_added_stat_max_count();
}
inline ::google::protobuf::int32 EquipmentDataProto::added_stat_max_count() const {
  return added_stat_max_count_;
}
inline void EquipmentDataProto::set_added_stat_max_count(::google::protobuf::int32 value) {
  set_has_added_stat_max_count();
  added_stat_max_count_ = value;
}

// optional int32 race = 7;
inline bool EquipmentDataProto::has_race() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentDataProto::set_has_race() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentDataProto::clear_has_race() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentDataProto::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 EquipmentDataProto::race() const {
  return race_;
}
inline void EquipmentDataProto::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 type = 8 [deprecated = true];
inline bool EquipmentDataProto::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentDataProto::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentDataProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentDataProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 EquipmentDataProto::type() const {
  return type_;
}
inline void EquipmentDataProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 pos = 9;
inline bool EquipmentDataProto::has_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipmentDataProto::set_has_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipmentDataProto::clear_has_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipmentDataProto::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 EquipmentDataProto::pos() const {
  return pos_;
}
inline void EquipmentDataProto::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 base_fighting_amount = 10 [deprecated = true];
inline bool EquipmentDataProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipmentDataProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipmentDataProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipmentDataProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentDataProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void EquipmentDataProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 best_refined_fighting_amount = 11 [deprecated = true];
inline bool EquipmentDataProto::has_best_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipmentDataProto::set_has_best_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipmentDataProto::clear_has_best_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipmentDataProto::clear_best_refined_fighting_amount() {
  best_refined_fighting_amount_ = 0;
  clear_has_best_refined_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentDataProto::best_refined_fighting_amount() const {
  return best_refined_fighting_amount_;
}
inline void EquipmentDataProto::set_best_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_best_refined_fighting_amount();
  best_refined_fighting_amount_ = value;
}

// optional bool can_refined = 12;
inline bool EquipmentDataProto::has_can_refined() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipmentDataProto::set_has_can_refined() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipmentDataProto::clear_has_can_refined() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipmentDataProto::clear_can_refined() {
  can_refined_ = false;
  clear_has_can_refined();
}
inline bool EquipmentDataProto::can_refined() const {
  return can_refined_;
}
inline void EquipmentDataProto::set_can_refined(bool value) {
  set_has_can_refined();
  can_refined_ = value;
}

// optional int32 next_level_equipment = 14;
inline bool EquipmentDataProto::has_next_level_equipment() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipmentDataProto::set_has_next_level_equipment() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipmentDataProto::clear_has_next_level_equipment() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipmentDataProto::clear_next_level_equipment() {
  next_level_equipment_ = 0;
  clear_has_next_level_equipment();
}
inline ::google::protobuf::int32 EquipmentDataProto::next_level_equipment() const {
  return next_level_equipment_;
}
inline void EquipmentDataProto::set_next_level_equipment(::google::protobuf::int32 value) {
  set_has_next_level_equipment();
  next_level_equipment_ = value;
}

// optional int32 taoz = 15;
inline bool EquipmentDataProto::has_taoz() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipmentDataProto::set_has_taoz() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipmentDataProto::clear_has_taoz() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipmentDataProto::clear_taoz() {
  taoz_ = 0;
  clear_has_taoz();
}
inline ::google::protobuf::int32 EquipmentDataProto::taoz() const {
  return taoz_;
}
inline void EquipmentDataProto::set_taoz(::google::protobuf::int32 value) {
  set_has_taoz();
  taoz_ = value;
}

// optional int32 hecheng_equipment = 16;
inline bool EquipmentDataProto::has_hecheng_equipment() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EquipmentDataProto::set_has_hecheng_equipment() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EquipmentDataProto::clear_has_hecheng_equipment() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EquipmentDataProto::clear_hecheng_equipment() {
  hecheng_equipment_ = 0;
  clear_has_hecheng_equipment();
}
inline ::google::protobuf::int32 EquipmentDataProto::hecheng_equipment() const {
  return hecheng_equipment_;
}
inline void EquipmentDataProto::set_hecheng_equipment(::google::protobuf::int32 value) {
  set_has_hecheng_equipment();
  hecheng_equipment_ = value;
}

// optional int32 hecheng_type = 17;
inline bool EquipmentDataProto::has_hecheng_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipmentDataProto::set_has_hecheng_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipmentDataProto::clear_has_hecheng_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipmentDataProto::clear_hecheng_type() {
  hecheng_type_ = 0;
  clear_has_hecheng_type();
}
inline ::google::protobuf::int32 EquipmentDataProto::hecheng_type() const {
  return hecheng_type_;
}
inline void EquipmentDataProto::set_hecheng_type(::google::protobuf::int32 value) {
  set_has_hecheng_type();
  hecheng_type_ = value;
}

// optional int32 normal_refined_max_times = 23;
inline bool EquipmentDataProto::has_normal_refined_max_times() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EquipmentDataProto::set_has_normal_refined_max_times() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EquipmentDataProto::clear_has_normal_refined_max_times() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EquipmentDataProto::clear_normal_refined_max_times() {
  normal_refined_max_times_ = 0;
  clear_has_normal_refined_max_times();
}
inline ::google::protobuf::int32 EquipmentDataProto::normal_refined_max_times() const {
  return normal_refined_max_times_;
}
inline void EquipmentDataProto::set_normal_refined_max_times(::google::protobuf::int32 value) {
  set_has_normal_refined_max_times();
  normal_refined_max_times_ = value;
}

// optional int32 resource = 24;
inline bool EquipmentDataProto::has_resource() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EquipmentDataProto::set_has_resource() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EquipmentDataProto::clear_has_resource() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EquipmentDataProto::clear_resource() {
  resource_ = 0;
  clear_has_resource();
}
inline ::google::protobuf::int32 EquipmentDataProto::resource() const {
  return resource_;
}
inline void EquipmentDataProto::set_resource(::google::protobuf::int32 value) {
  set_has_resource();
  resource_ = value;
}

// optional int64 fashion_expire_time = 25;
inline bool EquipmentDataProto::has_fashion_expire_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EquipmentDataProto::set_has_fashion_expire_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EquipmentDataProto::clear_has_fashion_expire_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EquipmentDataProto::clear_fashion_expire_time() {
  fashion_expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_fashion_expire_time();
}
inline ::google::protobuf::int64 EquipmentDataProto::fashion_expire_time() const {
  return fashion_expire_time_;
}
inline void EquipmentDataProto::set_fashion_expire_time(::google::protobuf::int64 value) {
  set_has_fashion_expire_time();
  fashion_expire_time_ = value;
}

// optional int32 hecheng_limit = 26;
inline bool EquipmentDataProto::has_hecheng_limit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EquipmentDataProto::set_has_hecheng_limit() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EquipmentDataProto::clear_has_hecheng_limit() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EquipmentDataProto::clear_hecheng_limit() {
  hecheng_limit_ = 0;
  clear_has_hecheng_limit();
}
inline ::google::protobuf::int32 EquipmentDataProto::hecheng_limit() const {
  return hecheng_limit_;
}
inline void EquipmentDataProto::set_hecheng_limit(::google::protobuf::int32 value) {
  set_has_hecheng_limit();
  hecheng_limit_ = value;
}

// optional int32 yu_yi_ge_type = 27;
inline bool EquipmentDataProto::has_yu_yi_ge_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EquipmentDataProto::set_has_yu_yi_ge_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EquipmentDataProto::clear_has_yu_yi_ge_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EquipmentDataProto::clear_yu_yi_ge_type() {
  yu_yi_ge_type_ = 0;
  clear_has_yu_yi_ge_type();
}
inline ::google::protobuf::int32 EquipmentDataProto::yu_yi_ge_type() const {
  return yu_yi_ge_type_;
}
inline void EquipmentDataProto::set_yu_yi_ge_type(::google::protobuf::int32 value) {
  set_has_yu_yi_ge_type();
  yu_yi_ge_type_ = value;
}

// optional int32 yu_yi_ge_bless_amount = 28;
inline bool EquipmentDataProto::has_yu_yi_ge_bless_amount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EquipmentDataProto::set_has_yu_yi_ge_bless_amount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EquipmentDataProto::clear_has_yu_yi_ge_bless_amount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EquipmentDataProto::clear_yu_yi_ge_bless_amount() {
  yu_yi_ge_bless_amount_ = 0;
  clear_has_yu_yi_ge_bless_amount();
}
inline ::google::protobuf::int32 EquipmentDataProto::yu_yi_ge_bless_amount() const {
  return yu_yi_ge_bless_amount_;
}
inline void EquipmentDataProto::set_yu_yi_ge_bless_amount(::google::protobuf::int32 value) {
  set_has_yu_yi_ge_bless_amount();
  yu_yi_ge_bless_amount_ = value;
}

// optional int32 inlay_hole_count = 29;
inline bool EquipmentDataProto::has_inlay_hole_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void EquipmentDataProto::set_has_inlay_hole_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void EquipmentDataProto::clear_has_inlay_hole_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void EquipmentDataProto::clear_inlay_hole_count() {
  inlay_hole_count_ = 0;
  clear_has_inlay_hole_count();
}
inline ::google::protobuf::int32 EquipmentDataProto::inlay_hole_count() const {
  return inlay_hole_count_;
}
inline void EquipmentDataProto::set_inlay_hole_count(::google::protobuf::int32 value) {
  set_has_inlay_hole_count();
  inlay_hole_count_ = value;
}

// optional int32 spell = 30;
inline bool EquipmentDataProto::has_spell() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EquipmentDataProto::set_has_spell() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EquipmentDataProto::clear_has_spell() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EquipmentDataProto::clear_spell() {
  spell_ = 0;
  clear_has_spell();
}
inline ::google::protobuf::int32 EquipmentDataProto::spell() const {
  return spell_;
}
inline void EquipmentDataProto::set_spell(::google::protobuf::int32 value) {
  set_has_spell();
  spell_ = value;
}

// -------------------------------------------------------------------

// MountEquipmentDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool MountEquipmentDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MountEquipmentDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MountEquipmentDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MountEquipmentDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& MountEquipmentDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* MountEquipmentDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* MountEquipmentDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void MountEquipmentDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 pos = 2;
inline bool MountEquipmentDataProto::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MountEquipmentDataProto::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MountEquipmentDataProto::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MountEquipmentDataProto::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::pos() const {
  return pos_;
}
inline void MountEquipmentDataProto::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
inline bool MountEquipmentDataProto::has_base_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MountEquipmentDataProto::set_has_base_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MountEquipmentDataProto::clear_has_base_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MountEquipmentDataProto::clear_base_stat() {
  if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
  clear_has_base_stat();
}
inline const ::app::message::SingleStatProto& MountEquipmentDataProto::base_stat() const {
  return base_stat_ != NULL ? *base_stat_ : *default_instance_->base_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentDataProto::mutable_base_stat() {
  set_has_base_stat();
  if (base_stat_ == NULL) base_stat_ = new ::app::message::SingleStatProto;
  return base_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentDataProto::release_base_stat() {
  clear_has_base_stat();
  ::app::message::SingleStatProto* temp = base_stat_;
  base_stat_ = NULL;
  return temp;
}
inline void MountEquipmentDataProto::set_allocated_base_stat(::app::message::SingleStatProto* base_stat) {
  delete base_stat_;
  base_stat_ = base_stat;
  if (base_stat) {
    set_has_base_stat();
  } else {
    clear_has_base_stat();
  }
}

// optional int32 base_fighting_amount = 4 [deprecated = true];
inline bool MountEquipmentDataProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MountEquipmentDataProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MountEquipmentDataProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MountEquipmentDataProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void MountEquipmentDataProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 refined_max_times = 5;
inline bool MountEquipmentDataProto::has_refined_max_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MountEquipmentDataProto::set_has_refined_max_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MountEquipmentDataProto::clear_has_refined_max_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MountEquipmentDataProto::clear_refined_max_times() {
  refined_max_times_ = 0;
  clear_has_refined_max_times();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::refined_max_times() const {
  return refined_max_times_;
}
inline void MountEquipmentDataProto::set_refined_max_times(::google::protobuf::int32 value) {
  set_has_refined_max_times();
  refined_max_times_ = value;
}

// optional int32 added_stat_max_count = 6;
inline bool MountEquipmentDataProto::has_added_stat_max_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MountEquipmentDataProto::set_has_added_stat_max_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MountEquipmentDataProto::clear_has_added_stat_max_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MountEquipmentDataProto::clear_added_stat_max_count() {
  added_stat_max_count_ = 0;
  clear_has_added_stat_max_count();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::added_stat_max_count() const {
  return added_stat_max_count_;
}
inline void MountEquipmentDataProto::set_added_stat_max_count(::google::protobuf::int32 value) {
  set_has_added_stat_max_count();
  added_stat_max_count_ = value;
}

// optional int32 best_refined_fighting_amount = 11 [deprecated = true];
inline bool MountEquipmentDataProto::has_best_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MountEquipmentDataProto::set_has_best_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MountEquipmentDataProto::clear_has_best_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MountEquipmentDataProto::clear_best_refined_fighting_amount() {
  best_refined_fighting_amount_ = 0;
  clear_has_best_refined_fighting_amount();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::best_refined_fighting_amount() const {
  return best_refined_fighting_amount_;
}
inline void MountEquipmentDataProto::set_best_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_best_refined_fighting_amount();
  best_refined_fighting_amount_ = value;
}

// optional int32 require_mount_level = 20;
inline bool MountEquipmentDataProto::has_require_mount_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MountEquipmentDataProto::set_has_require_mount_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MountEquipmentDataProto::clear_has_require_mount_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MountEquipmentDataProto::clear_require_mount_level() {
  require_mount_level_ = 0;
  clear_has_require_mount_level();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::require_mount_level() const {
  return require_mount_level_;
}
inline void MountEquipmentDataProto::set_require_mount_level(::google::protobuf::int32 value) {
  set_has_require_mount_level();
  require_mount_level_ = value;
}

// optional bool can_refined = 21;
inline bool MountEquipmentDataProto::has_can_refined() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MountEquipmentDataProto::set_has_can_refined() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MountEquipmentDataProto::clear_has_can_refined() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MountEquipmentDataProto::clear_can_refined() {
  can_refined_ = false;
  clear_has_can_refined();
}
inline bool MountEquipmentDataProto::can_refined() const {
  return can_refined_;
}
inline void MountEquipmentDataProto::set_can_refined(bool value) {
  set_has_can_refined();
  can_refined_ = value;
}

// optional int32 next_level_equipment = 22;
inline bool MountEquipmentDataProto::has_next_level_equipment() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MountEquipmentDataProto::set_has_next_level_equipment() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MountEquipmentDataProto::clear_has_next_level_equipment() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MountEquipmentDataProto::clear_next_level_equipment() {
  next_level_equipment_ = 0;
  clear_has_next_level_equipment();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::next_level_equipment() const {
  return next_level_equipment_;
}
inline void MountEquipmentDataProto::set_next_level_equipment(::google::protobuf::int32 value) {
  set_has_next_level_equipment();
  next_level_equipment_ = value;
}

// optional int32 normal_refined_max_times = 23;
inline bool MountEquipmentDataProto::has_normal_refined_max_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MountEquipmentDataProto::set_has_normal_refined_max_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MountEquipmentDataProto::clear_has_normal_refined_max_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MountEquipmentDataProto::clear_normal_refined_max_times() {
  normal_refined_max_times_ = 0;
  clear_has_normal_refined_max_times();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::normal_refined_max_times() const {
  return normal_refined_max_times_;
}
inline void MountEquipmentDataProto::set_normal_refined_max_times(::google::protobuf::int32 value) {
  set_has_normal_refined_max_times();
  normal_refined_max_times_ = value;
}

// optional int32 hecheng_equipment = 24;
inline bool MountEquipmentDataProto::has_hecheng_equipment() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MountEquipmentDataProto::set_has_hecheng_equipment() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MountEquipmentDataProto::clear_has_hecheng_equipment() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MountEquipmentDataProto::clear_hecheng_equipment() {
  hecheng_equipment_ = 0;
  clear_has_hecheng_equipment();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::hecheng_equipment() const {
  return hecheng_equipment_;
}
inline void MountEquipmentDataProto::set_hecheng_equipment(::google::protobuf::int32 value) {
  set_has_hecheng_equipment();
  hecheng_equipment_ = value;
}

// optional int32 hecheng_type = 25;
inline bool MountEquipmentDataProto::has_hecheng_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MountEquipmentDataProto::set_has_hecheng_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MountEquipmentDataProto::clear_has_hecheng_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MountEquipmentDataProto::clear_hecheng_type() {
  hecheng_type_ = 0;
  clear_has_hecheng_type();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::hecheng_type() const {
  return hecheng_type_;
}
inline void MountEquipmentDataProto::set_hecheng_type(::google::protobuf::int32 value) {
  set_has_hecheng_type();
  hecheng_type_ = value;
}

// optional int32 hecheng_limit = 26;
inline bool MountEquipmentDataProto::has_hecheng_limit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MountEquipmentDataProto::set_has_hecheng_limit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MountEquipmentDataProto::clear_has_hecheng_limit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MountEquipmentDataProto::clear_hecheng_limit() {
  hecheng_limit_ = 0;
  clear_has_hecheng_limit();
}
inline ::google::protobuf::int32 MountEquipmentDataProto::hecheng_limit() const {
  return hecheng_limit_;
}
inline void MountEquipmentDataProto::set_hecheng_limit(::google::protobuf::int32 value) {
  set_has_hecheng_limit();
  hecheng_limit_ = value;
}

// -------------------------------------------------------------------

// PetEquipmentDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool PetEquipmentDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetEquipmentDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetEquipmentDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetEquipmentDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& PetEquipmentDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* PetEquipmentDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* PetEquipmentDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void PetEquipmentDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 pos = 2;
inline bool PetEquipmentDataProto::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetEquipmentDataProto::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetEquipmentDataProto::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetEquipmentDataProto::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::pos() const {
  return pos_;
}
inline void PetEquipmentDataProto::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 refined_max_times = 3;
inline bool PetEquipmentDataProto::has_refined_max_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetEquipmentDataProto::set_has_refined_max_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetEquipmentDataProto::clear_has_refined_max_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetEquipmentDataProto::clear_refined_max_times() {
  refined_max_times_ = 0;
  clear_has_refined_max_times();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::refined_max_times() const {
  return refined_max_times_;
}
inline void PetEquipmentDataProto::set_refined_max_times(::google::protobuf::int32 value) {
  set_has_refined_max_times();
  refined_max_times_ = value;
}

// optional int32 added_stat_max_count = 4;
inline bool PetEquipmentDataProto::has_added_stat_max_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetEquipmentDataProto::set_has_added_stat_max_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetEquipmentDataProto::clear_has_added_stat_max_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetEquipmentDataProto::clear_added_stat_max_count() {
  added_stat_max_count_ = 0;
  clear_has_added_stat_max_count();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::added_stat_max_count() const {
  return added_stat_max_count_;
}
inline void PetEquipmentDataProto::set_added_stat_max_count(::google::protobuf::int32 value) {
  set_has_added_stat_max_count();
  added_stat_max_count_ = value;
}

// optional bool can_refined = 5;
inline bool PetEquipmentDataProto::has_can_refined() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetEquipmentDataProto::set_has_can_refined() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetEquipmentDataProto::clear_has_can_refined() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetEquipmentDataProto::clear_can_refined() {
  can_refined_ = false;
  clear_has_can_refined();
}
inline bool PetEquipmentDataProto::can_refined() const {
  return can_refined_;
}
inline void PetEquipmentDataProto::set_can_refined(bool value) {
  set_has_can_refined();
  can_refined_ = value;
}

// optional int32 next_level_equipment = 6;
inline bool PetEquipmentDataProto::has_next_level_equipment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetEquipmentDataProto::set_has_next_level_equipment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetEquipmentDataProto::clear_has_next_level_equipment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetEquipmentDataProto::clear_next_level_equipment() {
  next_level_equipment_ = 0;
  clear_has_next_level_equipment();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::next_level_equipment() const {
  return next_level_equipment_;
}
inline void PetEquipmentDataProto::set_next_level_equipment(::google::protobuf::int32 value) {
  set_has_next_level_equipment();
  next_level_equipment_ = value;
}

// optional int32 normal_refined_max_times = 7;
inline bool PetEquipmentDataProto::has_normal_refined_max_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetEquipmentDataProto::set_has_normal_refined_max_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetEquipmentDataProto::clear_has_normal_refined_max_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetEquipmentDataProto::clear_normal_refined_max_times() {
  normal_refined_max_times_ = 0;
  clear_has_normal_refined_max_times();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::normal_refined_max_times() const {
  return normal_refined_max_times_;
}
inline void PetEquipmentDataProto::set_normal_refined_max_times(::google::protobuf::int32 value) {
  set_has_normal_refined_max_times();
  normal_refined_max_times_ = value;
}

// optional int32 hecheng_equipment = 8;
inline bool PetEquipmentDataProto::has_hecheng_equipment() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetEquipmentDataProto::set_has_hecheng_equipment() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetEquipmentDataProto::clear_has_hecheng_equipment() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetEquipmentDataProto::clear_hecheng_equipment() {
  hecheng_equipment_ = 0;
  clear_has_hecheng_equipment();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::hecheng_equipment() const {
  return hecheng_equipment_;
}
inline void PetEquipmentDataProto::set_hecheng_equipment(::google::protobuf::int32 value) {
  set_has_hecheng_equipment();
  hecheng_equipment_ = value;
}

// optional int32 hecheng_type = 9;
inline bool PetEquipmentDataProto::has_hecheng_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetEquipmentDataProto::set_has_hecheng_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetEquipmentDataProto::clear_has_hecheng_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetEquipmentDataProto::clear_hecheng_type() {
  hecheng_type_ = 0;
  clear_has_hecheng_type();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::hecheng_type() const {
  return hecheng_type_;
}
inline void PetEquipmentDataProto::set_hecheng_type(::google::protobuf::int32 value) {
  set_has_hecheng_type();
  hecheng_type_ = value;
}

// optional int32 hecheng_limit = 10;
inline bool PetEquipmentDataProto::has_hecheng_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetEquipmentDataProto::set_has_hecheng_limit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetEquipmentDataProto::clear_has_hecheng_limit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetEquipmentDataProto::clear_hecheng_limit() {
  hecheng_limit_ = 0;
  clear_has_hecheng_limit();
}
inline ::google::protobuf::int32 PetEquipmentDataProto::hecheng_limit() const {
  return hecheng_limit_;
}
inline void PetEquipmentDataProto::set_hecheng_limit(::google::protobuf::int32 value) {
  set_has_hecheng_limit();
  hecheng_limit_ = value;
}

// -------------------------------------------------------------------

// ShieldEquipmentDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool ShieldEquipmentDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShieldEquipmentDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShieldEquipmentDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& ShieldEquipmentDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* ShieldEquipmentDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* ShieldEquipmentDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void ShieldEquipmentDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 pos = 2;
inline bool ShieldEquipmentDataProto::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShieldEquipmentDataProto::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShieldEquipmentDataProto::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::pos() const {
  return pos_;
}
inline void ShieldEquipmentDataProto::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
inline bool ShieldEquipmentDataProto::has_base_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_base_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShieldEquipmentDataProto::clear_has_base_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShieldEquipmentDataProto::clear_base_stat() {
  if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
  clear_has_base_stat();
}
inline const ::app::message::SingleStatProto& ShieldEquipmentDataProto::base_stat() const {
  return base_stat_ != NULL ? *base_stat_ : *default_instance_->base_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentDataProto::mutable_base_stat() {
  set_has_base_stat();
  if (base_stat_ == NULL) base_stat_ = new ::app::message::SingleStatProto;
  return base_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentDataProto::release_base_stat() {
  clear_has_base_stat();
  ::app::message::SingleStatProto* temp = base_stat_;
  base_stat_ = NULL;
  return temp;
}
inline void ShieldEquipmentDataProto::set_allocated_base_stat(::app::message::SingleStatProto* base_stat) {
  delete base_stat_;
  base_stat_ = base_stat;
  if (base_stat) {
    set_has_base_stat();
  } else {
    clear_has_base_stat();
  }
}

// optional int32 base_fighting_amount = 4 [deprecated = true];
inline bool ShieldEquipmentDataProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShieldEquipmentDataProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShieldEquipmentDataProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void ShieldEquipmentDataProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 refined_max_times = 5;
inline bool ShieldEquipmentDataProto::has_refined_max_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_refined_max_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShieldEquipmentDataProto::clear_has_refined_max_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShieldEquipmentDataProto::clear_refined_max_times() {
  refined_max_times_ = 0;
  clear_has_refined_max_times();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::refined_max_times() const {
  return refined_max_times_;
}
inline void ShieldEquipmentDataProto::set_refined_max_times(::google::protobuf::int32 value) {
  set_has_refined_max_times();
  refined_max_times_ = value;
}

// optional int32 added_stat_max_count = 6;
inline bool ShieldEquipmentDataProto::has_added_stat_max_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_added_stat_max_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShieldEquipmentDataProto::clear_has_added_stat_max_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShieldEquipmentDataProto::clear_added_stat_max_count() {
  added_stat_max_count_ = 0;
  clear_has_added_stat_max_count();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::added_stat_max_count() const {
  return added_stat_max_count_;
}
inline void ShieldEquipmentDataProto::set_added_stat_max_count(::google::protobuf::int32 value) {
  set_has_added_stat_max_count();
  added_stat_max_count_ = value;
}

// optional int32 best_refined_fighting_amount = 11 [deprecated = true];
inline bool ShieldEquipmentDataProto::has_best_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_best_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShieldEquipmentDataProto::clear_has_best_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShieldEquipmentDataProto::clear_best_refined_fighting_amount() {
  best_refined_fighting_amount_ = 0;
  clear_has_best_refined_fighting_amount();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::best_refined_fighting_amount() const {
  return best_refined_fighting_amount_;
}
inline void ShieldEquipmentDataProto::set_best_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_best_refined_fighting_amount();
  best_refined_fighting_amount_ = value;
}

// optional int32 require_shield_level = 20;
inline bool ShieldEquipmentDataProto::has_require_shield_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_require_shield_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShieldEquipmentDataProto::clear_has_require_shield_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShieldEquipmentDataProto::clear_require_shield_level() {
  require_shield_level_ = 0;
  clear_has_require_shield_level();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::require_shield_level() const {
  return require_shield_level_;
}
inline void ShieldEquipmentDataProto::set_require_shield_level(::google::protobuf::int32 value) {
  set_has_require_shield_level();
  require_shield_level_ = value;
}

// optional bool can_refined = 21;
inline bool ShieldEquipmentDataProto::has_can_refined() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_can_refined() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShieldEquipmentDataProto::clear_has_can_refined() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShieldEquipmentDataProto::clear_can_refined() {
  can_refined_ = false;
  clear_has_can_refined();
}
inline bool ShieldEquipmentDataProto::can_refined() const {
  return can_refined_;
}
inline void ShieldEquipmentDataProto::set_can_refined(bool value) {
  set_has_can_refined();
  can_refined_ = value;
}

// optional int32 next_level_equipment = 22;
inline bool ShieldEquipmentDataProto::has_next_level_equipment() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_next_level_equipment() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShieldEquipmentDataProto::clear_has_next_level_equipment() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShieldEquipmentDataProto::clear_next_level_equipment() {
  next_level_equipment_ = 0;
  clear_has_next_level_equipment();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::next_level_equipment() const {
  return next_level_equipment_;
}
inline void ShieldEquipmentDataProto::set_next_level_equipment(::google::protobuf::int32 value) {
  set_has_next_level_equipment();
  next_level_equipment_ = value;
}

// optional int32 normal_refined_max_times = 23;
inline bool ShieldEquipmentDataProto::has_normal_refined_max_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_normal_refined_max_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShieldEquipmentDataProto::clear_has_normal_refined_max_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShieldEquipmentDataProto::clear_normal_refined_max_times() {
  normal_refined_max_times_ = 0;
  clear_has_normal_refined_max_times();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::normal_refined_max_times() const {
  return normal_refined_max_times_;
}
inline void ShieldEquipmentDataProto::set_normal_refined_max_times(::google::protobuf::int32 value) {
  set_has_normal_refined_max_times();
  normal_refined_max_times_ = value;
}

// optional int32 hecheng_equipment = 24;
inline bool ShieldEquipmentDataProto::has_hecheng_equipment() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_hecheng_equipment() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ShieldEquipmentDataProto::clear_has_hecheng_equipment() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ShieldEquipmentDataProto::clear_hecheng_equipment() {
  hecheng_equipment_ = 0;
  clear_has_hecheng_equipment();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::hecheng_equipment() const {
  return hecheng_equipment_;
}
inline void ShieldEquipmentDataProto::set_hecheng_equipment(::google::protobuf::int32 value) {
  set_has_hecheng_equipment();
  hecheng_equipment_ = value;
}

// optional int32 hecheng_type = 25;
inline bool ShieldEquipmentDataProto::has_hecheng_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_hecheng_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ShieldEquipmentDataProto::clear_has_hecheng_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ShieldEquipmentDataProto::clear_hecheng_type() {
  hecheng_type_ = 0;
  clear_has_hecheng_type();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::hecheng_type() const {
  return hecheng_type_;
}
inline void ShieldEquipmentDataProto::set_hecheng_type(::google::protobuf::int32 value) {
  set_has_hecheng_type();
  hecheng_type_ = value;
}

// optional int32 hecheng_limit = 26;
inline bool ShieldEquipmentDataProto::has_hecheng_limit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_hecheng_limit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ShieldEquipmentDataProto::clear_has_hecheng_limit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ShieldEquipmentDataProto::clear_hecheng_limit() {
  hecheng_limit_ = 0;
  clear_has_hecheng_limit();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::hecheng_limit() const {
  return hecheng_limit_;
}
inline void ShieldEquipmentDataProto::set_hecheng_limit(::google::protobuf::int32 value) {
  set_has_hecheng_limit();
  hecheng_limit_ = value;
}

// optional int32 shield_type = 27;
inline bool ShieldEquipmentDataProto::has_shield_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ShieldEquipmentDataProto::set_has_shield_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ShieldEquipmentDataProto::clear_has_shield_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ShieldEquipmentDataProto::clear_shield_type() {
  shield_type_ = 0;
  clear_has_shield_type();
}
inline ::google::protobuf::int32 ShieldEquipmentDataProto::shield_type() const {
  return shield_type_;
}
inline void ShieldEquipmentDataProto::set_shield_type(::google::protobuf::int32 value) {
  set_has_shield_type();
  shield_type_ = value;
}

// -------------------------------------------------------------------

// MedicineDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool MedicineDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MedicineDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MedicineDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MedicineDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& MedicineDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* MedicineDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* MedicineDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void MedicineDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 efficacy = 2;
inline bool MedicineDataProto::has_efficacy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MedicineDataProto::set_has_efficacy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MedicineDataProto::clear_has_efficacy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MedicineDataProto::clear_efficacy() {
  efficacy_ = 0;
  clear_has_efficacy();
}
inline ::google::protobuf::int32 MedicineDataProto::efficacy() const {
  return efficacy_;
}
inline void MedicineDataProto::set_efficacy(::google::protobuf::int32 value) {
  set_has_efficacy();
  efficacy_ = value;
}

// optional int32 max_use_count = 3;
inline bool MedicineDataProto::has_max_use_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MedicineDataProto::set_has_max_use_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MedicineDataProto::clear_has_max_use_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MedicineDataProto::clear_max_use_count() {
  max_use_count_ = 0;
  clear_has_max_use_count();
}
inline ::google::protobuf::int32 MedicineDataProto::max_use_count() const {
  return max_use_count_;
}
inline void MedicineDataProto::set_max_use_count(::google::protobuf::int32 value) {
  set_has_max_use_count();
  max_use_count_ = value;
}

// optional int32 exp_multiple_10 = 4;
inline bool MedicineDataProto::has_exp_multiple_10() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MedicineDataProto::set_has_exp_multiple_10() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MedicineDataProto::clear_has_exp_multiple_10() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MedicineDataProto::clear_exp_multiple_10() {
  exp_multiple_10_ = 0;
  clear_has_exp_multiple_10();
}
inline ::google::protobuf::int32 MedicineDataProto::exp_multiple_10() const {
  return exp_multiple_10_;
}
inline void MedicineDataProto::set_exp_multiple_10(::google::protobuf::int32 value) {
  set_has_exp_multiple_10();
  exp_multiple_10_ = value;
}

// -------------------------------------------------------------------

// MultiPrizeOnLimitedTimeGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool MultiPrizeOnLimitedTimeGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& MultiPrizeOnLimitedTimeGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* MultiPrizeOnLimitedTimeGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* MultiPrizeOnLimitedTimeGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 multi = 2;
inline bool MultiPrizeOnLimitedTimeGoodsDataProto::has_multi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_has_multi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_has_multi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_multi() {
  multi_ = 0;
  clear_has_multi();
}
inline ::google::protobuf::int32 MultiPrizeOnLimitedTimeGoodsDataProto::multi() const {
  return multi_;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_multi(::google::protobuf::int32 value) {
  set_has_multi();
  multi_ = value;
}

// optional int64 start_time = 3;
inline bool MultiPrizeOnLimitedTimeGoodsDataProto::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 MultiPrizeOnLimitedTimeGoodsDataProto::start_time() const {
  return start_time_;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int64 end_time = 4;
inline bool MultiPrizeOnLimitedTimeGoodsDataProto::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 MultiPrizeOnLimitedTimeGoodsDataProto::end_time() const {
  return end_time_;
}
inline void MultiPrizeOnLimitedTimeGoodsDataProto::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// UpgradeGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool UpgradeGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpgradeGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpgradeGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpgradeGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& UpgradeGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* UpgradeGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* UpgradeGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void UpgradeGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 type = 2;
inline bool UpgradeGoodsDataProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeGoodsDataProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeGoodsDataProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeGoodsDataProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UpgradeGoodsDataProto::type() const {
  return type_;
}
inline void UpgradeGoodsDataProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 sub_type = 4;
inline bool UpgradeGoodsDataProto::has_sub_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpgradeGoodsDataProto::set_has_sub_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpgradeGoodsDataProto::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpgradeGoodsDataProto::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
inline ::google::protobuf::int32 UpgradeGoodsDataProto::sub_type() const {
  return sub_type_;
}
inline void UpgradeGoodsDataProto::set_sub_type(::google::protobuf::int32 value) {
  set_has_sub_type();
  sub_type_ = value;
}

// optional int32 big_level = 5;
inline bool UpgradeGoodsDataProto::has_big_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpgradeGoodsDataProto::set_has_big_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpgradeGoodsDataProto::clear_has_big_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpgradeGoodsDataProto::clear_big_level() {
  big_level_ = 0;
  clear_has_big_level();
}
inline ::google::protobuf::int32 UpgradeGoodsDataProto::big_level() const {
  return big_level_;
}
inline void UpgradeGoodsDataProto::set_big_level(::google::protobuf::int32 value) {
  set_has_big_level();
  big_level_ = value;
}

// optional int32 small_level = 6;
inline bool UpgradeGoodsDataProto::has_small_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpgradeGoodsDataProto::set_has_small_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpgradeGoodsDataProto::clear_has_small_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpgradeGoodsDataProto::clear_small_level() {
  small_level_ = 0;
  clear_has_small_level();
}
inline ::google::protobuf::int32 UpgradeGoodsDataProto::small_level() const {
  return small_level_;
}
inline void UpgradeGoodsDataProto::set_small_level(::google::protobuf::int32 value) {
  set_has_small_level();
  small_level_ = value;
}

// -------------------------------------------------------------------

// DailyCardDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool DailyCardDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyCardDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyCardDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyCardDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& DailyCardDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* DailyCardDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* DailyCardDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void DailyCardDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 max_use_count = 2;
inline bool DailyCardDataProto::has_max_use_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyCardDataProto::set_has_max_use_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyCardDataProto::clear_has_max_use_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyCardDataProto::clear_max_use_count() {
  max_use_count_ = 0;
  clear_has_max_use_count();
}
inline ::google::protobuf::int32 DailyCardDataProto::max_use_count() const {
  return max_use_count_;
}
inline void DailyCardDataProto::set_max_use_count(::google::protobuf::int32 value) {
  set_has_max_use_count();
  max_use_count_ = value;
}

// optional int32 free_use_count = 3;
inline bool DailyCardDataProto::has_free_use_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyCardDataProto::set_has_free_use_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyCardDataProto::clear_has_free_use_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyCardDataProto::clear_free_use_count() {
  free_use_count_ = 0;
  clear_has_free_use_count();
}
inline ::google::protobuf::int32 DailyCardDataProto::free_use_count() const {
  return free_use_count_;
}
inline void DailyCardDataProto::set_free_use_count(::google::protobuf::int32 value) {
  set_has_free_use_count();
  free_use_count_ = value;
}

// optional int32 yuanbao = 4;
inline bool DailyCardDataProto::has_yuanbao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyCardDataProto::set_has_yuanbao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyCardDataProto::clear_has_yuanbao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyCardDataProto::clear_yuanbao() {
  yuanbao_ = 0;
  clear_has_yuanbao();
}
inline ::google::protobuf::int32 DailyCardDataProto::yuanbao() const {
  return yuanbao_;
}
inline void DailyCardDataProto::set_yuanbao(::google::protobuf::int32 value) {
  set_has_yuanbao();
  yuanbao_ = value;
}

// -------------------------------------------------------------------

// JinJieDanDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool JinJieDanDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JinJieDanDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JinJieDanDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JinJieDanDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& JinJieDanDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* JinJieDanDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* JinJieDanDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void JinJieDanDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 type = 2;
inline bool JinJieDanDataProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JinJieDanDataProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JinJieDanDataProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JinJieDanDataProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 JinJieDanDataProto::type() const {
  return type_;
}
inline void JinJieDanDataProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 level1 = 3;
inline bool JinJieDanDataProto::has_level1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JinJieDanDataProto::set_has_level1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JinJieDanDataProto::clear_has_level1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JinJieDanDataProto::clear_level1() {
  level1_ = 0;
  clear_has_level1();
}
inline ::google::protobuf::int32 JinJieDanDataProto::level1() const {
  return level1_;
}
inline void JinJieDanDataProto::set_level1(::google::protobuf::int32 value) {
  set_has_level1();
  level1_ = value;
}

// optional int32 level2 = 4;
inline bool JinJieDanDataProto::has_level2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JinJieDanDataProto::set_has_level2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JinJieDanDataProto::clear_has_level2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JinJieDanDataProto::clear_level2() {
  level2_ = 0;
  clear_has_level2();
}
inline ::google::protobuf::int32 JinJieDanDataProto::level2() const {
  return level2_;
}
inline void JinJieDanDataProto::set_level2(::google::protobuf::int32 value) {
  set_has_level2();
  level2_ = value;
}

// -------------------------------------------------------------------

// JinJieLuckyCardDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool JinJieLuckyCardDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JinJieLuckyCardDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JinJieLuckyCardDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JinJieLuckyCardDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& JinJieLuckyCardDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* JinJieLuckyCardDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* JinJieLuckyCardDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void JinJieLuckyCardDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 type = 2;
inline bool JinJieLuckyCardDataProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JinJieLuckyCardDataProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JinJieLuckyCardDataProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JinJieLuckyCardDataProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 JinJieLuckyCardDataProto::type() const {
  return type_;
}
inline void JinJieLuckyCardDataProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 duration = 3;
inline bool JinJieLuckyCardDataProto::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JinJieLuckyCardDataProto::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JinJieLuckyCardDataProto::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JinJieLuckyCardDataProto::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 JinJieLuckyCardDataProto::duration() const {
  return duration_;
}
inline void JinJieLuckyCardDataProto::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// optional int32 rate = 4;
inline bool JinJieLuckyCardDataProto::has_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JinJieLuckyCardDataProto::set_has_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JinJieLuckyCardDataProto::clear_has_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JinJieLuckyCardDataProto::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 JinJieLuckyCardDataProto::rate() const {
  return rate_;
}
inline void JinJieLuckyCardDataProto::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// -------------------------------------------------------------------

// ChristmasGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool ChristmasGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChristmasGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChristmasGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChristmasGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& ChristmasGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* ChristmasGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* ChristmasGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void ChristmasGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 type = 2;
inline bool ChristmasGoodsDataProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChristmasGoodsDataProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChristmasGoodsDataProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChristmasGoodsDataProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ChristmasGoodsDataProto::type() const {
  return type_;
}
inline void ChristmasGoodsDataProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 shop_point = 3;
inline bool ChristmasGoodsDataProto::has_shop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChristmasGoodsDataProto::set_has_shop_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChristmasGoodsDataProto::clear_has_shop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChristmasGoodsDataProto::clear_shop_point() {
  shop_point_ = 0;
  clear_has_shop_point();
}
inline ::google::protobuf::int32 ChristmasGoodsDataProto::shop_point() const {
  return shop_point_;
}
inline void ChristmasGoodsDataProto::set_shop_point(::google::protobuf::int32 value) {
  set_has_shop_point();
  shop_point_ = value;
}

// optional int32 tree_point = 4;
inline bool ChristmasGoodsDataProto::has_tree_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChristmasGoodsDataProto::set_has_tree_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChristmasGoodsDataProto::clear_has_tree_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChristmasGoodsDataProto::clear_tree_point() {
  tree_point_ = 0;
  clear_has_tree_point();
}
inline ::google::protobuf::int32 ChristmasGoodsDataProto::tree_point() const {
  return tree_point_;
}
inline void ChristmasGoodsDataProto::set_tree_point(::google::protobuf::int32 value) {
  set_has_tree_point();
  tree_point_ = value;
}

// -------------------------------------------------------------------

// MarriageGiftDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool MarriageGiftDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarriageGiftDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarriageGiftDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarriageGiftDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& MarriageGiftDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* MarriageGiftDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* MarriageGiftDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void MarriageGiftDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 add_hao_gan = 2;
inline bool MarriageGiftDataProto::has_add_hao_gan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarriageGiftDataProto::set_has_add_hao_gan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarriageGiftDataProto::clear_has_add_hao_gan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarriageGiftDataProto::clear_add_hao_gan() {
  add_hao_gan_ = 0;
  clear_has_add_hao_gan();
}
inline ::google::protobuf::int32 MarriageGiftDataProto::add_hao_gan() const {
  return add_hao_gan_;
}
inline void MarriageGiftDataProto::set_add_hao_gan(::google::protobuf::int32 value) {
  set_has_add_hao_gan();
  add_hao_gan_ = value;
}

// optional int32 add_exp = 3;
inline bool MarriageGiftDataProto::has_add_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarriageGiftDataProto::set_has_add_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarriageGiftDataProto::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarriageGiftDataProto::clear_add_exp() {
  add_exp_ = 0;
  clear_has_add_exp();
}
inline ::google::protobuf::int32 MarriageGiftDataProto::add_exp() const {
  return add_exp_;
}
inline void MarriageGiftDataProto::set_add_exp(::google::protobuf::int32 value) {
  set_has_add_exp();
  add_exp_ = value;
}

// optional int32 add_real_air = 4;
inline bool MarriageGiftDataProto::has_add_real_air() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarriageGiftDataProto::set_has_add_real_air() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarriageGiftDataProto::clear_has_add_real_air() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarriageGiftDataProto::clear_add_real_air() {
  add_real_air_ = 0;
  clear_has_add_real_air();
}
inline ::google::protobuf::int32 MarriageGiftDataProto::add_real_air() const {
  return add_real_air_;
}
inline void MarriageGiftDataProto::set_add_real_air(::google::protobuf::int32 value) {
  set_has_add_real_air();
  add_real_air_ = value;
}

// optional int32 price_type = 5;
inline bool MarriageGiftDataProto::has_price_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarriageGiftDataProto::set_has_price_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarriageGiftDataProto::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarriageGiftDataProto::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline ::google::protobuf::int32 MarriageGiftDataProto::price_type() const {
  return price_type_;
}
inline void MarriageGiftDataProto::set_price_type(::google::protobuf::int32 value) {
  set_has_price_type();
  price_type_ = value;
}

// optional int32 price = 6;
inline bool MarriageGiftDataProto::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarriageGiftDataProto::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarriageGiftDataProto::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarriageGiftDataProto::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 MarriageGiftDataProto::price() const {
  return price_;
}
inline void MarriageGiftDataProto::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// NiDaoQianKunDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool NiDaoQianKunDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NiDaoQianKunDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NiDaoQianKunDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NiDaoQianKunDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& NiDaoQianKunDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* NiDaoQianKunDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* NiDaoQianKunDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void NiDaoQianKunDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .app.message.SpriteStatProto sprite_stat = 2;
inline bool NiDaoQianKunDataProto::has_sprite_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NiDaoQianKunDataProto::set_has_sprite_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NiDaoQianKunDataProto::clear_has_sprite_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NiDaoQianKunDataProto::clear_sprite_stat() {
  if (sprite_stat_ != NULL) sprite_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_sprite_stat();
}
inline const ::app::message::SpriteStatProto& NiDaoQianKunDataProto::sprite_stat() const {
  return sprite_stat_ != NULL ? *sprite_stat_ : *default_instance_->sprite_stat_;
}
inline ::app::message::SpriteStatProto* NiDaoQianKunDataProto::mutable_sprite_stat() {
  set_has_sprite_stat();
  if (sprite_stat_ == NULL) sprite_stat_ = new ::app::message::SpriteStatProto;
  return sprite_stat_;
}
inline ::app::message::SpriteStatProto* NiDaoQianKunDataProto::release_sprite_stat() {
  clear_has_sprite_stat();
  ::app::message::SpriteStatProto* temp = sprite_stat_;
  sprite_stat_ = NULL;
  return temp;
}
inline void NiDaoQianKunDataProto::set_allocated_sprite_stat(::app::message::SpriteStatProto* sprite_stat) {
  delete sprite_stat_;
  sprite_stat_ = sprite_stat;
  if (sprite_stat) {
    set_has_sprite_stat();
  } else {
    clear_has_sprite_stat();
  }
}

// optional int32 fighting_amount = 3;
inline bool NiDaoQianKunDataProto::has_fighting_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NiDaoQianKunDataProto::set_has_fighting_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NiDaoQianKunDataProto::clear_has_fighting_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NiDaoQianKunDataProto::clear_fighting_amount() {
  fighting_amount_ = 0;
  clear_has_fighting_amount();
}
inline ::google::protobuf::int32 NiDaoQianKunDataProto::fighting_amount() const {
  return fighting_amount_;
}
inline void NiDaoQianKunDataProto::set_fighting_amount(::google::protobuf::int32 value) {
  set_has_fighting_amount();
  fighting_amount_ = value;
}

// optional int32 hao_gan = 4;
inline bool NiDaoQianKunDataProto::has_hao_gan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NiDaoQianKunDataProto::set_has_hao_gan() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NiDaoQianKunDataProto::clear_has_hao_gan() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NiDaoQianKunDataProto::clear_hao_gan() {
  hao_gan_ = 0;
  clear_has_hao_gan();
}
inline ::google::protobuf::int32 NiDaoQianKunDataProto::hao_gan() const {
  return hao_gan_;
}
inline void NiDaoQianKunDataProto::set_hao_gan(::google::protobuf::int32 value) {
  set_has_hao_gan();
  hao_gan_ = value;
}

// -------------------------------------------------------------------

// FireworkDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool FireworkDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FireworkDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FireworkDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FireworkDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& FireworkDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* FireworkDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* FireworkDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void FireworkDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 color_type = 2;
inline bool FireworkDataProto::has_color_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FireworkDataProto::set_has_color_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FireworkDataProto::clear_has_color_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FireworkDataProto::clear_color_type() {
  color_type_ = 0;
  clear_has_color_type();
}
inline ::google::protobuf::int32 FireworkDataProto::color_type() const {
  return color_type_;
}
inline void FireworkDataProto::set_color_type(::google::protobuf::int32 value) {
  set_has_color_type();
  color_type_ = value;
}

// optional int32 value = 3;
inline bool FireworkDataProto::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FireworkDataProto::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FireworkDataProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FireworkDataProto::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 FireworkDataProto::value() const {
  return value_;
}
inline void FireworkDataProto::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// QianNengHuanHuaLimitUpProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool QianNengHuanHuaLimitUpProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QianNengHuanHuaLimitUpProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QianNengHuanHuaLimitUpProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QianNengHuanHuaLimitUpProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& QianNengHuanHuaLimitUpProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* QianNengHuanHuaLimitUpProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* QianNengHuanHuaLimitUpProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void QianNengHuanHuaLimitUpProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 main_type = 2;
inline bool QianNengHuanHuaLimitUpProto::has_main_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QianNengHuanHuaLimitUpProto::set_has_main_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QianNengHuanHuaLimitUpProto::clear_has_main_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QianNengHuanHuaLimitUpProto::clear_main_type() {
  main_type_ = 0;
  clear_has_main_type();
}
inline ::google::protobuf::int32 QianNengHuanHuaLimitUpProto::main_type() const {
  return main_type_;
}
inline void QianNengHuanHuaLimitUpProto::set_main_type(::google::protobuf::int32 value) {
  set_has_main_type();
  main_type_ = value;
}

// optional int32 required_object_level = 3;
inline bool QianNengHuanHuaLimitUpProto::has_required_object_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QianNengHuanHuaLimitUpProto::set_has_required_object_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QianNengHuanHuaLimitUpProto::clear_has_required_object_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QianNengHuanHuaLimitUpProto::clear_required_object_level() {
  required_object_level_ = 0;
  clear_has_required_object_level();
}
inline ::google::protobuf::int32 QianNengHuanHuaLimitUpProto::required_object_level() const {
  return required_object_level_;
}
inline void QianNengHuanHuaLimitUpProto::set_required_object_level(::google::protobuf::int32 value) {
  set_has_required_object_level();
  required_object_level_ = value;
}

// optional int32 sub_type = 4;
inline bool QianNengHuanHuaLimitUpProto::has_sub_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QianNengHuanHuaLimitUpProto::set_has_sub_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QianNengHuanHuaLimitUpProto::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QianNengHuanHuaLimitUpProto::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
inline ::google::protobuf::int32 QianNengHuanHuaLimitUpProto::sub_type() const {
  return sub_type_;
}
inline void QianNengHuanHuaLimitUpProto::set_sub_type(::google::protobuf::int32 value) {
  set_has_sub_type();
  sub_type_ = value;
}

// optional int32 amount = 5;
inline bool QianNengHuanHuaLimitUpProto::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QianNengHuanHuaLimitUpProto::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QianNengHuanHuaLimitUpProto::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QianNengHuanHuaLimitUpProto::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 QianNengHuanHuaLimitUpProto::amount() const {
  return amount_;
}
inline void QianNengHuanHuaLimitUpProto::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// GemDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool GemDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GemDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GemDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GemDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& GemDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* GemDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* GemDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void GemDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 gem_level = 2;
inline bool GemDataProto::has_gem_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GemDataProto::set_has_gem_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GemDataProto::clear_has_gem_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GemDataProto::clear_gem_level() {
  gem_level_ = 0;
  clear_has_gem_level();
}
inline ::google::protobuf::int32 GemDataProto::gem_level() const {
  return gem_level_;
}
inline void GemDataProto::set_gem_level(::google::protobuf::int32 value) {
  set_has_gem_level();
  gem_level_ = value;
}

// -------------------------------------------------------------------

// TransportationDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool TransportationDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransportationDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransportationDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransportationDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& TransportationDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* TransportationDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* TransportationDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void TransportationDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 trans_type = 3;
inline bool TransportationDataProto::has_trans_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransportationDataProto::set_has_trans_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransportationDataProto::clear_has_trans_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransportationDataProto::clear_trans_type() {
  trans_type_ = 0;
  clear_has_trans_type();
}
inline ::google::protobuf::int32 TransportationDataProto::trans_type() const {
  return trans_type_;
}
inline void TransportationDataProto::set_trans_type(::google::protobuf::int32 value) {
  set_has_trans_type();
  trans_type_ = value;
}

// -------------------------------------------------------------------

// BaoShiDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool BaoShiDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaoShiDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaoShiDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaoShiDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& BaoShiDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* BaoShiDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* BaoShiDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void BaoShiDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// repeated int32 equip_type = 2;
inline int BaoShiDataProto::equip_type_size() const {
  return equip_type_.size();
}
inline void BaoShiDataProto::clear_equip_type() {
  equip_type_.Clear();
}
inline ::google::protobuf::int32 BaoShiDataProto::equip_type(int index) const {
  return equip_type_.Get(index);
}
inline void BaoShiDataProto::set_equip_type(int index, ::google::protobuf::int32 value) {
  equip_type_.Set(index, value);
}
inline void BaoShiDataProto::add_equip_type(::google::protobuf::int32 value) {
  equip_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaoShiDataProto::equip_type() const {
  return equip_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaoShiDataProto::mutable_equip_type() {
  return &equip_type_;
}

// optional .app.message.PanelGoodsDataProto.PanelType panel = 3;
inline bool BaoShiDataProto::has_panel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaoShiDataProto::set_has_panel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaoShiDataProto::clear_has_panel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaoShiDataProto::clear_panel() {
  panel_ = 1;
  clear_has_panel();
}
inline ::app::message::PanelGoodsDataProto_PanelType BaoShiDataProto::panel() const {
  return static_cast< ::app::message::PanelGoodsDataProto_PanelType >(panel_);
}
inline void BaoShiDataProto::set_panel(::app::message::PanelGoodsDataProto_PanelType value) {
  assert(::app::message::PanelGoodsDataProto_PanelType_IsValid(value));
  set_has_panel();
  panel_ = value;
}

// optional bool is_can_he_cheng = 4;
inline bool BaoShiDataProto::has_is_can_he_cheng() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaoShiDataProto::set_has_is_can_he_cheng() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaoShiDataProto::clear_has_is_can_he_cheng() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaoShiDataProto::clear_is_can_he_cheng() {
  is_can_he_cheng_ = false;
  clear_has_is_can_he_cheng();
}
inline bool BaoShiDataProto::is_can_he_cheng() const {
  return is_can_he_cheng_;
}
inline void BaoShiDataProto::set_is_can_he_cheng(bool value) {
  set_has_is_can_he_cheng();
  is_can_he_cheng_ = value;
}

// -------------------------------------------------------------------

// ChipsGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool ChipsGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChipsGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChipsGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChipsGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& ChipsGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* ChipsGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* ChipsGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void ChipsGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 chips = 2;
inline bool ChipsGoodsDataProto::has_chips() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChipsGoodsDataProto::set_has_chips() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChipsGoodsDataProto::clear_has_chips() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChipsGoodsDataProto::clear_chips() {
  chips_ = 0;
  clear_has_chips();
}
inline ::google::protobuf::int32 ChipsGoodsDataProto::chips() const {
  return chips_;
}
inline void ChipsGoodsDataProto::set_chips(::google::protobuf::int32 value) {
  set_has_chips();
  chips_ = value;
}

// -------------------------------------------------------------------

// SpellBookDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool SpellBookDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpellBookDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpellBookDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpellBookDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& SpellBookDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* SpellBookDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* SpellBookDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void SpellBookDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .app.message.SpellBookDataProto.SpellType type = 2;
inline bool SpellBookDataProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpellBookDataProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpellBookDataProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpellBookDataProto::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::app::message::SpellBookDataProto_SpellType SpellBookDataProto::type() const {
  return static_cast< ::app::message::SpellBookDataProto_SpellType >(type_);
}
inline void SpellBookDataProto::set_type(::app::message::SpellBookDataProto_SpellType value) {
  assert(::app::message::SpellBookDataProto_SpellType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 required_mount = 3 [deprecated = true];
inline bool SpellBookDataProto::has_required_mount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpellBookDataProto::set_has_required_mount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpellBookDataProto::clear_has_required_mount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpellBookDataProto::clear_required_mount() {
  required_mount_ = 0;
  clear_has_required_mount();
}
inline ::google::protobuf::int32 SpellBookDataProto::required_mount() const {
  return required_mount_;
}
inline void SpellBookDataProto::set_required_mount(::google::protobuf::int32 value) {
  set_has_required_mount();
  required_mount_ = value;
}

// optional int32 required_object_level = 4;
inline bool SpellBookDataProto::has_required_object_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpellBookDataProto::set_has_required_object_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpellBookDataProto::clear_has_required_object_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpellBookDataProto::clear_required_object_level() {
  required_object_level_ = 0;
  clear_has_required_object_level();
}
inline ::google::protobuf::int32 SpellBookDataProto::required_object_level() const {
  return required_object_level_;
}
inline void SpellBookDataProto::set_required_object_level(::google::protobuf::int32 value) {
  set_has_required_object_level();
  required_object_level_ = value;
}

// optional string output_desc = 5;
inline bool SpellBookDataProto::has_output_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpellBookDataProto::set_has_output_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpellBookDataProto::clear_has_output_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpellBookDataProto::clear_output_desc() {
  if (output_desc_ != &::google::protobuf::internal::kEmptyString) {
    output_desc_->clear();
  }
  clear_has_output_desc();
}
inline const ::std::string& SpellBookDataProto::output_desc() const {
  return *output_desc_;
}
inline void SpellBookDataProto::set_output_desc(const ::std::string& value) {
  set_has_output_desc();
  if (output_desc_ == &::google::protobuf::internal::kEmptyString) {
    output_desc_ = new ::std::string;
  }
  output_desc_->assign(value);
}
inline void SpellBookDataProto::set_output_desc(const char* value) {
  set_has_output_desc();
  if (output_desc_ == &::google::protobuf::internal::kEmptyString) {
    output_desc_ = new ::std::string;
  }
  output_desc_->assign(value);
}
inline void SpellBookDataProto::set_output_desc(const char* value, size_t size) {
  set_has_output_desc();
  if (output_desc_ == &::google::protobuf::internal::kEmptyString) {
    output_desc_ = new ::std::string;
  }
  output_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpellBookDataProto::mutable_output_desc() {
  set_has_output_desc();
  if (output_desc_ == &::google::protobuf::internal::kEmptyString) {
    output_desc_ = new ::std::string;
  }
  return output_desc_;
}
inline ::std::string* SpellBookDataProto::release_output_desc() {
  clear_has_output_desc();
  if (output_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_desc_;
    output_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpellBookDataProto::set_allocated_output_desc(::std::string* output_desc) {
  if (output_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete output_desc_;
  }
  if (output_desc) {
    set_has_output_desc();
    output_desc_ = output_desc;
  } else {
    clear_has_output_desc();
    output_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PetTongLingGiftSpellExpDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool PetTongLingGiftSpellExpDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetTongLingGiftSpellExpDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetTongLingGiftSpellExpDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetTongLingGiftSpellExpDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& PetTongLingGiftSpellExpDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* PetTongLingGiftSpellExpDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* PetTongLingGiftSpellExpDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void PetTongLingGiftSpellExpDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 add_exp = 2;
inline bool PetTongLingGiftSpellExpDataProto::has_add_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetTongLingGiftSpellExpDataProto::set_has_add_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetTongLingGiftSpellExpDataProto::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetTongLingGiftSpellExpDataProto::clear_add_exp() {
  add_exp_ = 0;
  clear_has_add_exp();
}
inline ::google::protobuf::int32 PetTongLingGiftSpellExpDataProto::add_exp() const {
  return add_exp_;
}
inline void PetTongLingGiftSpellExpDataProto::set_add_exp(::google::protobuf::int32 value) {
  set_has_add_exp();
  add_exp_ = value;
}

// -------------------------------------------------------------------

// ScriptGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool ScriptGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScriptGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScriptGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScriptGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& ScriptGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* ScriptGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* ScriptGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void ScriptGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 script = 2;
inline bool ScriptGoodsDataProto::has_script() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScriptGoodsDataProto::set_has_script() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScriptGoodsDataProto::clear_has_script() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScriptGoodsDataProto::clear_script() {
  script_ = 0;
  clear_has_script();
}
inline ::google::protobuf::int32 ScriptGoodsDataProto::script() const {
  return script_;
}
inline void ScriptGoodsDataProto::set_script(::google::protobuf::int32 value) {
  set_has_script();
  script_ = value;
}

// -------------------------------------------------------------------

// PanelGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool PanelGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PanelGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PanelGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PanelGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& PanelGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* PanelGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* PanelGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void PanelGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .app.message.PanelGoodsDataProto.PanelType panel = 2;
inline bool PanelGoodsDataProto::has_panel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PanelGoodsDataProto::set_has_panel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PanelGoodsDataProto::clear_has_panel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PanelGoodsDataProto::clear_panel() {
  panel_ = 1;
  clear_has_panel();
}
inline ::app::message::PanelGoodsDataProto_PanelType PanelGoodsDataProto::panel() const {
  return static_cast< ::app::message::PanelGoodsDataProto_PanelType >(panel_);
}
inline void PanelGoodsDataProto::set_panel(::app::message::PanelGoodsDataProto_PanelType value) {
  assert(::app::message::PanelGoodsDataProto_PanelType_IsValid(value));
  set_has_panel();
  panel_ = value;
}

// -------------------------------------------------------------------

// SpellXinfaDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool SpellXinfaDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpellXinfaDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpellXinfaDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpellXinfaDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& SpellXinfaDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* SpellXinfaDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* SpellXinfaDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void SpellXinfaDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 require_spell_level = 2;
inline bool SpellXinfaDataProto::has_require_spell_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpellXinfaDataProto::set_has_require_spell_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpellXinfaDataProto::clear_has_require_spell_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpellXinfaDataProto::clear_require_spell_level() {
  require_spell_level_ = 0;
  clear_has_require_spell_level();
}
inline ::google::protobuf::int32 SpellXinfaDataProto::require_spell_level() const {
  return require_spell_level_;
}
inline void SpellXinfaDataProto::set_require_spell_level(::google::protobuf::int32 value) {
  set_has_require_spell_level();
  require_spell_level_ = value;
}

// optional .app.message.XinfaType type = 3;
inline bool SpellXinfaDataProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpellXinfaDataProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpellXinfaDataProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpellXinfaDataProto::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::app::message::XinfaType SpellXinfaDataProto::type() const {
  return static_cast< ::app::message::XinfaType >(type_);
}
inline void SpellXinfaDataProto::set_type(::app::message::XinfaType value) {
  assert(::app::message::XinfaType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 release_range = 11;
inline bool SpellXinfaDataProto::has_release_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpellXinfaDataProto::set_has_release_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpellXinfaDataProto::clear_has_release_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpellXinfaDataProto::clear_release_range() {
  release_range_ = 0;
  clear_has_release_range();
}
inline ::google::protobuf::int32 SpellXinfaDataProto::release_range() const {
  return release_range_;
}
inline void SpellXinfaDataProto::set_release_range(::google::protobuf::int32 value) {
  set_has_release_range();
  release_range_ = value;
}

// optional int32 hurt_range = 12;
inline bool SpellXinfaDataProto::has_hurt_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpellXinfaDataProto::set_has_hurt_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpellXinfaDataProto::clear_has_hurt_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpellXinfaDataProto::clear_hurt_range() {
  hurt_range_ = 0;
  clear_has_hurt_range();
}
inline ::google::protobuf::int32 SpellXinfaDataProto::hurt_range() const {
  return hurt_range_;
}
inline void SpellXinfaDataProto::set_hurt_range(::google::protobuf::int32 value) {
  set_has_hurt_range();
  hurt_range_ = value;
}

// -------------------------------------------------------------------

// YuanbaoPackageDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool YuanbaoPackageDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YuanbaoPackageDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YuanbaoPackageDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YuanbaoPackageDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& YuanbaoPackageDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* YuanbaoPackageDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* YuanbaoPackageDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void YuanbaoPackageDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 cost = 2;
inline bool YuanbaoPackageDataProto::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YuanbaoPackageDataProto::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YuanbaoPackageDataProto::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YuanbaoPackageDataProto::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 YuanbaoPackageDataProto::cost() const {
  return cost_;
}
inline void YuanbaoPackageDataProto::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional string title = 3;
inline bool YuanbaoPackageDataProto::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YuanbaoPackageDataProto::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YuanbaoPackageDataProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YuanbaoPackageDataProto::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& YuanbaoPackageDataProto::title() const {
  return *title_;
}
inline void YuanbaoPackageDataProto::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void YuanbaoPackageDataProto::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void YuanbaoPackageDataProto::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* YuanbaoPackageDataProto::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* YuanbaoPackageDataProto::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void YuanbaoPackageDataProto::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 4 [deprecated = true];
inline bool YuanbaoPackageDataProto::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YuanbaoPackageDataProto::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YuanbaoPackageDataProto::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YuanbaoPackageDataProto::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& YuanbaoPackageDataProto::content() const {
  return *content_;
}
inline void YuanbaoPackageDataProto::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void YuanbaoPackageDataProto::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void YuanbaoPackageDataProto::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* YuanbaoPackageDataProto::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* YuanbaoPackageDataProto::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void YuanbaoPackageDataProto::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 show_price = 5;
inline bool YuanbaoPackageDataProto::has_show_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YuanbaoPackageDataProto::set_has_show_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YuanbaoPackageDataProto::clear_has_show_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YuanbaoPackageDataProto::clear_show_price() {
  show_price_ = 0;
  clear_has_show_price();
}
inline ::google::protobuf::int32 YuanbaoPackageDataProto::show_price() const {
  return show_price_;
}
inline void YuanbaoPackageDataProto::set_show_price(::google::protobuf::int32 value) {
  set_has_show_price();
  show_price_ = value;
}

// -------------------------------------------------------------------

// RefinedStatGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool RefinedStatGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefinedStatGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefinedStatGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefinedStatGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& RefinedStatGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* RefinedStatGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* RefinedStatGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void RefinedStatGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 refined_type = 2;
inline bool RefinedStatGoodsDataProto::has_refined_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefinedStatGoodsDataProto::set_has_refined_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefinedStatGoodsDataProto::clear_has_refined_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefinedStatGoodsDataProto::clear_refined_type() {
  refined_type_ = 0;
  clear_has_refined_type();
}
inline ::google::protobuf::int32 RefinedStatGoodsDataProto::refined_type() const {
  return refined_type_;
}
inline void RefinedStatGoodsDataProto::set_refined_type(::google::protobuf::int32 value) {
  set_has_refined_type();
  refined_type_ = value;
}

// optional int32 required_object_level = 3;
inline bool RefinedStatGoodsDataProto::has_required_object_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefinedStatGoodsDataProto::set_has_required_object_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefinedStatGoodsDataProto::clear_has_required_object_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefinedStatGoodsDataProto::clear_required_object_level() {
  required_object_level_ = 0;
  clear_has_required_object_level();
}
inline ::google::protobuf::int32 RefinedStatGoodsDataProto::required_object_level() const {
  return required_object_level_;
}
inline void RefinedStatGoodsDataProto::set_required_object_level(::google::protobuf::int32 value) {
  set_has_required_object_level();
  required_object_level_ = value;
}

// optional int32 sub_type = 4;
inline bool RefinedStatGoodsDataProto::has_sub_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RefinedStatGoodsDataProto::set_has_sub_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RefinedStatGoodsDataProto::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RefinedStatGoodsDataProto::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
inline ::google::protobuf::int32 RefinedStatGoodsDataProto::sub_type() const {
  return sub_type_;
}
inline void RefinedStatGoodsDataProto::set_sub_type(::google::protobuf::int32 value) {
  set_has_sub_type();
  sub_type_ = value;
}

// -------------------------------------------------------------------

// BlessGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool BlessGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlessGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlessGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlessGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& BlessGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* BlessGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* BlessGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void BlessGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 add_belss_type = 2;
inline bool BlessGoodsDataProto::has_add_belss_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlessGoodsDataProto::set_has_add_belss_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlessGoodsDataProto::clear_has_add_belss_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlessGoodsDataProto::clear_add_belss_type() {
  add_belss_type_ = 0;
  clear_has_add_belss_type();
}
inline ::google::protobuf::int32 BlessGoodsDataProto::add_belss_type() const {
  return add_belss_type_;
}
inline void BlessGoodsDataProto::set_add_belss_type(::google::protobuf::int32 value) {
  set_has_add_belss_type();
  add_belss_type_ = value;
}

// optional int32 add_bless_percent = 3;
inline bool BlessGoodsDataProto::has_add_bless_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlessGoodsDataProto::set_has_add_bless_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlessGoodsDataProto::clear_has_add_bless_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlessGoodsDataProto::clear_add_bless_percent() {
  add_bless_percent_ = 0;
  clear_has_add_bless_percent();
}
inline ::google::protobuf::int32 BlessGoodsDataProto::add_bless_percent() const {
  return add_bless_percent_;
}
inline void BlessGoodsDataProto::set_add_bless_percent(::google::protobuf::int32 value) {
  set_has_add_bless_percent();
  add_bless_percent_ = value;
}

// optional int32 add_bless_fix_amount = 4;
inline bool BlessGoodsDataProto::has_add_bless_fix_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlessGoodsDataProto::set_has_add_bless_fix_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlessGoodsDataProto::clear_has_add_bless_fix_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlessGoodsDataProto::clear_add_bless_fix_amount() {
  add_bless_fix_amount_ = 0;
  clear_has_add_bless_fix_amount();
}
inline ::google::protobuf::int32 BlessGoodsDataProto::add_bless_fix_amount() const {
  return add_bless_fix_amount_;
}
inline void BlessGoodsDataProto::set_add_bless_fix_amount(::google::protobuf::int32 value) {
  set_has_add_bless_fix_amount();
  add_bless_fix_amount_ = value;
}

// optional int32 level = 5;
inline bool BlessGoodsDataProto::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlessGoodsDataProto::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlessGoodsDataProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlessGoodsDataProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BlessGoodsDataProto::level() const {
  return level_;
}
inline void BlessGoodsDataProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 add_bless_clear_time = 6;
inline bool BlessGoodsDataProto::has_add_bless_clear_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlessGoodsDataProto::set_has_add_bless_clear_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlessGoodsDataProto::clear_has_add_bless_clear_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlessGoodsDataProto::clear_add_bless_clear_time() {
  add_bless_clear_time_ = 0;
  clear_has_add_bless_clear_time();
}
inline ::google::protobuf::int32 BlessGoodsDataProto::add_bless_clear_time() const {
  return add_bless_clear_time_;
}
inline void BlessGoodsDataProto::set_add_bless_clear_time(::google::protobuf::int32 value) {
  set_has_add_bless_clear_time();
  add_bless_clear_time_ = value;
}

// optional int32 add_bless_sub_type = 7;
inline bool BlessGoodsDataProto::has_add_bless_sub_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlessGoodsDataProto::set_has_add_bless_sub_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlessGoodsDataProto::clear_has_add_bless_sub_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlessGoodsDataProto::clear_add_bless_sub_type() {
  add_bless_sub_type_ = 0;
  clear_has_add_bless_sub_type();
}
inline ::google::protobuf::int32 BlessGoodsDataProto::add_bless_sub_type() const {
  return add_bless_sub_type_;
}
inline void BlessGoodsDataProto::set_add_bless_sub_type(::google::protobuf::int32 value) {
  set_has_add_bless_sub_type();
  add_bless_sub_type_ = value;
}

// optional int32 max_level = 8;
inline bool BlessGoodsDataProto::has_max_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlessGoodsDataProto::set_has_max_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlessGoodsDataProto::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlessGoodsDataProto::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 BlessGoodsDataProto::max_level() const {
  return max_level_;
}
inline void BlessGoodsDataProto::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
}

// -------------------------------------------------------------------

// SpellPracticeGoodsDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool SpellPracticeGoodsDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpellPracticeGoodsDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpellPracticeGoodsDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpellPracticeGoodsDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& SpellPracticeGoodsDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* SpellPracticeGoodsDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* SpellPracticeGoodsDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void SpellPracticeGoodsDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional int32 upgrade_level = 2;
inline bool SpellPracticeGoodsDataProto::has_upgrade_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpellPracticeGoodsDataProto::set_has_upgrade_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpellPracticeGoodsDataProto::clear_has_upgrade_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpellPracticeGoodsDataProto::clear_upgrade_level() {
  upgrade_level_ = 0;
  clear_has_upgrade_level();
}
inline ::google::protobuf::int32 SpellPracticeGoodsDataProto::upgrade_level() const {
  return upgrade_level_;
}
inline void SpellPracticeGoodsDataProto::set_upgrade_level(::google::protobuf::int32 value) {
  set_has_upgrade_level();
  upgrade_level_ = value;
}

// -------------------------------------------------------------------

// GoodsProto

// optional int32 count = 1;
inline bool GoodsProto::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsProto::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GoodsProto::count() const {
  return count_;
}
inline void GoodsProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional bool binded = 2;
inline bool GoodsProto::has_binded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsProto::set_has_binded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsProto::clear_has_binded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsProto::clear_binded() {
  binded_ = false;
  clear_has_binded();
}
inline bool GoodsProto::binded() const {
  return binded_;
}
inline void GoodsProto::set_binded(bool value) {
  set_has_binded();
  binded_ = value;
}

// optional int64 expire_time = 3;
inline bool GoodsProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoodsProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoodsProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoodsProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 GoodsProto::expire_time() const {
  return expire_time_;
}
inline void GoodsProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional bool can_force_remove = 4;
inline bool GoodsProto::has_can_force_remove() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoodsProto::set_has_can_force_remove() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoodsProto::clear_has_can_force_remove() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoodsProto::clear_can_force_remove() {
  can_force_remove_ = false;
  clear_has_can_force_remove();
}
inline bool GoodsProto::can_force_remove() const {
  return can_force_remove_;
}
inline void GoodsProto::set_can_force_remove(bool value) {
  set_has_can_force_remove();
  can_force_remove_ = value;
}

// optional int64 can_use_time = 5;
inline bool GoodsProto::has_can_use_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GoodsProto::set_has_can_use_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GoodsProto::clear_has_can_use_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GoodsProto::clear_can_use_time() {
  can_use_time_ = GOOGLE_LONGLONG(0);
  clear_has_can_use_time();
}
inline ::google::protobuf::int64 GoodsProto::can_use_time() const {
  return can_use_time_;
}
inline void GoodsProto::set_can_use_time(::google::protobuf::int64 value) {
  set_has_can_use_time();
  can_use_time_ = value;
}

// -------------------------------------------------------------------

// EquipmentProto

// optional bool binded = 2;
inline bool EquipmentProto::has_binded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentProto::set_has_binded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentProto::clear_has_binded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentProto::clear_binded() {
  binded_ = false;
  clear_has_binded();
}
inline bool EquipmentProto::binded() const {
  return binded_;
}
inline void EquipmentProto::set_binded(bool value) {
  set_has_binded();
  binded_ = value;
}

// optional int64 expire_time = 3;
inline bool EquipmentProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 EquipmentProto::expire_time() const {
  return expire_time_;
}
inline void EquipmentProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional int32 quality = 4;
inline bool EquipmentProto::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentProto::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 EquipmentProto::quality() const {
  return quality_;
}
inline void EquipmentProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional .app.message.SingleStatProto base_stat = 50;
inline bool EquipmentProto::has_base_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentProto::set_has_base_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentProto::clear_has_base_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentProto::clear_base_stat() {
  if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
  clear_has_base_stat();
}
inline const ::app::message::SingleStatProto& EquipmentProto::base_stat() const {
  return base_stat_ != NULL ? *base_stat_ : *default_instance_->base_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::mutable_base_stat() {
  set_has_base_stat();
  if (base_stat_ == NULL) base_stat_ = new ::app::message::SingleStatProto;
  return base_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::release_base_stat() {
  clear_has_base_stat();
  ::app::message::SingleStatProto* temp = base_stat_;
  base_stat_ = NULL;
  return temp;
}
inline void EquipmentProto::set_allocated_base_stat(::app::message::SingleStatProto* base_stat) {
  delete base_stat_;
  base_stat_ = base_stat;
  if (base_stat) {
    set_has_base_stat();
  } else {
    clear_has_base_stat();
  }
}

// optional int32 base_fighting_amount = 51;
inline bool EquipmentProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void EquipmentProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 best_refined_fighting_amount = 52;
inline bool EquipmentProto::has_best_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentProto::set_has_best_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentProto::clear_has_best_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentProto::clear_best_refined_fighting_amount() {
  best_refined_fighting_amount_ = 0;
  clear_has_best_refined_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentProto::best_refined_fighting_amount() const {
  return best_refined_fighting_amount_;
}
inline void EquipmentProto::set_best_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_best_refined_fighting_amount();
  best_refined_fighting_amount_ = value;
}

// optional .app.message.SingleStatProto best_refined_stat = 53;
inline bool EquipmentProto::has_best_refined_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentProto::set_has_best_refined_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentProto::clear_has_best_refined_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentProto::clear_best_refined_stat() {
  if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_best_refined_stat();
}
inline const ::app::message::SingleStatProto& EquipmentProto::best_refined_stat() const {
  return best_refined_stat_ != NULL ? *best_refined_stat_ : *default_instance_->best_refined_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::mutable_best_refined_stat() {
  set_has_best_refined_stat();
  if (best_refined_stat_ == NULL) best_refined_stat_ = new ::app::message::SingleStatProto;
  return best_refined_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::release_best_refined_stat() {
  clear_has_best_refined_stat();
  ::app::message::SingleStatProto* temp = best_refined_stat_;
  best_refined_stat_ = NULL;
  return temp;
}
inline void EquipmentProto::set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat) {
  delete best_refined_stat_;
  best_refined_stat_ = best_refined_stat;
  if (best_refined_stat) {
    set_has_best_refined_stat();
  } else {
    clear_has_best_refined_stat();
  }
}

// optional int32 refined_times = 61;
inline bool EquipmentProto::has_refined_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipmentProto::set_has_refined_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipmentProto::clear_has_refined_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipmentProto::clear_refined_times() {
  refined_times_ = 0;
  clear_has_refined_times();
}
inline ::google::protobuf::int32 EquipmentProto::refined_times() const {
  return refined_times_;
}
inline void EquipmentProto::set_refined_times(::google::protobuf::int32 value) {
  set_has_refined_times();
  refined_times_ = value;
}

// optional .app.message.SingleStatProto refined_stat = 62;
inline bool EquipmentProto::has_refined_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipmentProto::set_has_refined_stat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipmentProto::clear_has_refined_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipmentProto::clear_refined_stat() {
  if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_refined_stat();
}
inline const ::app::message::SingleStatProto& EquipmentProto::refined_stat() const {
  return refined_stat_ != NULL ? *refined_stat_ : *default_instance_->refined_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::mutable_refined_stat() {
  set_has_refined_stat();
  if (refined_stat_ == NULL) refined_stat_ = new ::app::message::SingleStatProto;
  return refined_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::release_refined_stat() {
  clear_has_refined_stat();
  ::app::message::SingleStatProto* temp = refined_stat_;
  refined_stat_ = NULL;
  return temp;
}
inline void EquipmentProto::set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat) {
  delete refined_stat_;
  refined_stat_ = refined_stat;
  if (refined_stat) {
    set_has_refined_stat();
  } else {
    clear_has_refined_stat();
  }
}

// optional int32 refined_fighting_amount = 63;
inline bool EquipmentProto::has_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipmentProto::set_has_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipmentProto::clear_has_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipmentProto::clear_refined_fighting_amount() {
  refined_fighting_amount_ = 0;
  clear_has_refined_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentProto::refined_fighting_amount() const {
  return refined_fighting_amount_;
}
inline void EquipmentProto::set_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_refined_fighting_amount();
  refined_fighting_amount_ = value;
}

// optional int32 added_stat_count = 64;
inline bool EquipmentProto::has_added_stat_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipmentProto::set_has_added_stat_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipmentProto::clear_has_added_stat_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipmentProto::clear_added_stat_count() {
  added_stat_count_ = 0;
  clear_has_added_stat_count();
}
inline ::google::protobuf::int32 EquipmentProto::added_stat_count() const {
  return added_stat_count_;
}
inline void EquipmentProto::set_added_stat_count(::google::protobuf::int32 value) {
  set_has_added_stat_count();
  added_stat_count_ = value;
}

// optional .app.message.SingleStatProto added_stat = 65;
inline bool EquipmentProto::has_added_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipmentProto::set_has_added_stat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipmentProto::clear_has_added_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipmentProto::clear_added_stat() {
  if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
  clear_has_added_stat();
}
inline const ::app::message::SingleStatProto& EquipmentProto::added_stat() const {
  return added_stat_ != NULL ? *added_stat_ : *default_instance_->added_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::mutable_added_stat() {
  set_has_added_stat();
  if (added_stat_ == NULL) added_stat_ = new ::app::message::SingleStatProto;
  return added_stat_;
}
inline ::app::message::SingleStatProto* EquipmentProto::release_added_stat() {
  clear_has_added_stat();
  ::app::message::SingleStatProto* temp = added_stat_;
  added_stat_ = NULL;
  return temp;
}
inline void EquipmentProto::set_allocated_added_stat(::app::message::SingleStatProto* added_stat) {
  delete added_stat_;
  added_stat_ = added_stat;
  if (added_stat) {
    set_has_added_stat();
  } else {
    clear_has_added_stat();
  }
}

// optional int32 added_fighting_amount = 66;
inline bool EquipmentProto::has_added_fighting_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipmentProto::set_has_added_fighting_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipmentProto::clear_has_added_fighting_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipmentProto::clear_added_fighting_amount() {
  added_fighting_amount_ = 0;
  clear_has_added_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentProto::added_fighting_amount() const {
  return added_fighting_amount_;
}
inline void EquipmentProto::set_added_fighting_amount(::google::protobuf::int32 value) {
  set_has_added_fighting_amount();
  added_fighting_amount_ = value;
}

// optional int32 added_stat_type = 67;
inline bool EquipmentProto::has_added_stat_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EquipmentProto::set_has_added_stat_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EquipmentProto::clear_has_added_stat_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EquipmentProto::clear_added_stat_type() {
  added_stat_type_ = 0;
  clear_has_added_stat_type();
}
inline ::google::protobuf::int32 EquipmentProto::added_stat_type() const {
  return added_stat_type_;
}
inline void EquipmentProto::set_added_stat_type(::google::protobuf::int32 value) {
  set_has_added_stat_type();
  added_stat_type_ = value;
}

// optional bool is_unmeltable = 68;
inline bool EquipmentProto::has_is_unmeltable() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipmentProto::set_has_is_unmeltable() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipmentProto::clear_has_is_unmeltable() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipmentProto::clear_is_unmeltable() {
  is_unmeltable_ = false;
  clear_has_is_unmeltable();
}
inline bool EquipmentProto::is_unmeltable() const {
  return is_unmeltable_;
}
inline void EquipmentProto::set_is_unmeltable(bool value) {
  set_has_is_unmeltable();
  is_unmeltable_ = value;
}

// optional int32 ti_pin_val = 69;
inline bool EquipmentProto::has_ti_pin_val() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EquipmentProto::set_has_ti_pin_val() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EquipmentProto::clear_has_ti_pin_val() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EquipmentProto::clear_ti_pin_val() {
  ti_pin_val_ = 0;
  clear_has_ti_pin_val();
}
inline ::google::protobuf::int32 EquipmentProto::ti_pin_val() const {
  return ti_pin_val_;
}
inline void EquipmentProto::set_ti_pin_val(::google::protobuf::int32 value) {
  set_has_ti_pin_val();
  ti_pin_val_ = value;
}

// repeated .app.message.SingleStatProto xun_zhang_random_stat = 70;
inline int EquipmentProto::xun_zhang_random_stat_size() const {
  return xun_zhang_random_stat_.size();
}
inline void EquipmentProto::clear_xun_zhang_random_stat() {
  xun_zhang_random_stat_.Clear();
}
inline const ::app::message::SingleStatProto& EquipmentProto::xun_zhang_random_stat(int index) const {
  return xun_zhang_random_stat_.Get(index);
}
inline ::app::message::SingleStatProto* EquipmentProto::mutable_xun_zhang_random_stat(int index) {
  return xun_zhang_random_stat_.Mutable(index);
}
inline ::app::message::SingleStatProto* EquipmentProto::add_xun_zhang_random_stat() {
  return xun_zhang_random_stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
EquipmentProto::xun_zhang_random_stat() const {
  return xun_zhang_random_stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
EquipmentProto::mutable_xun_zhang_random_stat() {
  return &xun_zhang_random_stat_;
}

// optional int32 xun_zhang_fighting_amount = 71;
inline bool EquipmentProto::has_xun_zhang_fighting_amount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EquipmentProto::set_has_xun_zhang_fighting_amount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EquipmentProto::clear_has_xun_zhang_fighting_amount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EquipmentProto::clear_xun_zhang_fighting_amount() {
  xun_zhang_fighting_amount_ = 0;
  clear_has_xun_zhang_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentProto::xun_zhang_fighting_amount() const {
  return xun_zhang_fighting_amount_;
}
inline void EquipmentProto::set_xun_zhang_fighting_amount(::google::protobuf::int32 value) {
  set_has_xun_zhang_fighting_amount();
  xun_zhang_fighting_amount_ = value;
}

// repeated .app.message.SingleStatProto fashion_random_stat = 72;
inline int EquipmentProto::fashion_random_stat_size() const {
  return fashion_random_stat_.size();
}
inline void EquipmentProto::clear_fashion_random_stat() {
  fashion_random_stat_.Clear();
}
inline const ::app::message::SingleStatProto& EquipmentProto::fashion_random_stat(int index) const {
  return fashion_random_stat_.Get(index);
}
inline ::app::message::SingleStatProto* EquipmentProto::mutable_fashion_random_stat(int index) {
  return fashion_random_stat_.Mutable(index);
}
inline ::app::message::SingleStatProto* EquipmentProto::add_fashion_random_stat() {
  return fashion_random_stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
EquipmentProto::fashion_random_stat() const {
  return fashion_random_stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
EquipmentProto::mutable_fashion_random_stat() {
  return &fashion_random_stat_;
}

// optional int32 fashion_fighting_amount = 73;
inline bool EquipmentProto::has_fashion_fighting_amount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EquipmentProto::set_has_fashion_fighting_amount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EquipmentProto::clear_has_fashion_fighting_amount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EquipmentProto::clear_fashion_fighting_amount() {
  fashion_fighting_amount_ = 0;
  clear_has_fashion_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentProto::fashion_fighting_amount() const {
  return fashion_fighting_amount_;
}
inline void EquipmentProto::set_fashion_fighting_amount(::google::protobuf::int32 value) {
  set_has_fashion_fighting_amount();
  fashion_fighting_amount_ = value;
}

// optional int64 fashion_expire_time = 74;
inline bool EquipmentProto::has_fashion_expire_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EquipmentProto::set_has_fashion_expire_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EquipmentProto::clear_has_fashion_expire_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EquipmentProto::clear_fashion_expire_time() {
  fashion_expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_fashion_expire_time();
}
inline ::google::protobuf::int64 EquipmentProto::fashion_expire_time() const {
  return fashion_expire_time_;
}
inline void EquipmentProto::set_fashion_expire_time(::google::protobuf::int64 value) {
  set_has_fashion_expire_time();
  fashion_expire_time_ = value;
}

// repeated .app.message.EquipmentBaoShiProto bao_shi = 75;
inline int EquipmentProto::bao_shi_size() const {
  return bao_shi_.size();
}
inline void EquipmentProto::clear_bao_shi() {
  bao_shi_.Clear();
}
inline const ::app::message::EquipmentBaoShiProto& EquipmentProto::bao_shi(int index) const {
  return bao_shi_.Get(index);
}
inline ::app::message::EquipmentBaoShiProto* EquipmentProto::mutable_bao_shi(int index) {
  return bao_shi_.Mutable(index);
}
inline ::app::message::EquipmentBaoShiProto* EquipmentProto::add_bao_shi() {
  return bao_shi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentBaoShiProto >&
EquipmentProto::bao_shi() const {
  return bao_shi_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentBaoShiProto >*
EquipmentProto::mutable_bao_shi() {
  return &bao_shi_;
}

// optional int64 bao_shi_version = 76;
inline bool EquipmentProto::has_bao_shi_version() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EquipmentProto::set_has_bao_shi_version() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EquipmentProto::clear_has_bao_shi_version() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EquipmentProto::clear_bao_shi_version() {
  bao_shi_version_ = GOOGLE_LONGLONG(0);
  clear_has_bao_shi_version();
}
inline ::google::protobuf::int64 EquipmentProto::bao_shi_version() const {
  return bao_shi_version_;
}
inline void EquipmentProto::set_bao_shi_version(::google::protobuf::int64 value) {
  set_has_bao_shi_version();
  bao_shi_version_ = value;
}

// -------------------------------------------------------------------

// EquipmentBaoShiProto

// optional string icon = 1;
inline bool EquipmentBaoShiProto::has_icon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentBaoShiProto::set_has_icon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentBaoShiProto::clear_has_icon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentBaoShiProto::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& EquipmentBaoShiProto::icon() const {
  return *icon_;
}
inline void EquipmentBaoShiProto::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void EquipmentBaoShiProto::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void EquipmentBaoShiProto::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentBaoShiProto::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* EquipmentBaoShiProto::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentBaoShiProto::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool EquipmentBaoShiProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentBaoShiProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentBaoShiProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentBaoShiProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EquipmentBaoShiProto::name() const {
  return *name_;
}
inline void EquipmentBaoShiProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EquipmentBaoShiProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EquipmentBaoShiProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentBaoShiProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EquipmentBaoShiProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentBaoShiProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .app.message.SingleStatProto baseStat = 3;
inline int EquipmentBaoShiProto::basestat_size() const {
  return basestat_.size();
}
inline void EquipmentBaoShiProto::clear_basestat() {
  basestat_.Clear();
}
inline const ::app::message::SingleStatProto& EquipmentBaoShiProto::basestat(int index) const {
  return basestat_.Get(index);
}
inline ::app::message::SingleStatProto* EquipmentBaoShiProto::mutable_basestat(int index) {
  return basestat_.Mutable(index);
}
inline ::app::message::SingleStatProto* EquipmentBaoShiProto::add_basestat() {
  return basestat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
EquipmentBaoShiProto::basestat() const {
  return basestat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
EquipmentBaoShiProto::mutable_basestat() {
  return &basestat_;
}

// optional .app.message.SingleStatProto attachStat = 4;
inline bool EquipmentBaoShiProto::has_attachstat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentBaoShiProto::set_has_attachstat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentBaoShiProto::clear_has_attachstat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentBaoShiProto::clear_attachstat() {
  if (attachstat_ != NULL) attachstat_->::app::message::SingleStatProto::Clear();
  clear_has_attachstat();
}
inline const ::app::message::SingleStatProto& EquipmentBaoShiProto::attachstat() const {
  return attachstat_ != NULL ? *attachstat_ : *default_instance_->attachstat_;
}
inline ::app::message::SingleStatProto* EquipmentBaoShiProto::mutable_attachstat() {
  set_has_attachstat();
  if (attachstat_ == NULL) attachstat_ = new ::app::message::SingleStatProto;
  return attachstat_;
}
inline ::app::message::SingleStatProto* EquipmentBaoShiProto::release_attachstat() {
  clear_has_attachstat();
  ::app::message::SingleStatProto* temp = attachstat_;
  attachstat_ = NULL;
  return temp;
}
inline void EquipmentBaoShiProto::set_allocated_attachstat(::app::message::SingleStatProto* attachstat) {
  delete attachstat_;
  attachstat_ = attachstat;
  if (attachstat) {
    set_has_attachstat();
  } else {
    clear_has_attachstat();
  }
}

// optional int32 hole_num = 5;
inline bool EquipmentBaoShiProto::has_hole_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentBaoShiProto::set_has_hole_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentBaoShiProto::clear_has_hole_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentBaoShiProto::clear_hole_num() {
  hole_num_ = 0;
  clear_has_hole_num();
}
inline ::google::protobuf::int32 EquipmentBaoShiProto::hole_num() const {
  return hole_num_;
}
inline void EquipmentBaoShiProto::set_hole_num(::google::protobuf::int32 value) {
  set_has_hole_num();
  hole_num_ = value;
}

// optional int32 quality = 6;
inline bool EquipmentBaoShiProto::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentBaoShiProto::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentBaoShiProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentBaoShiProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 EquipmentBaoShiProto::quality() const {
  return quality_;
}
inline void EquipmentBaoShiProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 fighting_amount = 7;
inline bool EquipmentBaoShiProto::has_fighting_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentBaoShiProto::set_has_fighting_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentBaoShiProto::clear_has_fighting_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentBaoShiProto::clear_fighting_amount() {
  fighting_amount_ = 0;
  clear_has_fighting_amount();
}
inline ::google::protobuf::int32 EquipmentBaoShiProto::fighting_amount() const {
  return fighting_amount_;
}
inline void EquipmentBaoShiProto::set_fighting_amount(::google::protobuf::int32 value) {
  set_has_fighting_amount();
  fighting_amount_ = value;
}

// repeated int32 base_stat_min_and_max = 8;
inline int EquipmentBaoShiProto::base_stat_min_and_max_size() const {
  return base_stat_min_and_max_.size();
}
inline void EquipmentBaoShiProto::clear_base_stat_min_and_max() {
  base_stat_min_and_max_.Clear();
}
inline ::google::protobuf::int32 EquipmentBaoShiProto::base_stat_min_and_max(int index) const {
  return base_stat_min_and_max_.Get(index);
}
inline void EquipmentBaoShiProto::set_base_stat_min_and_max(int index, ::google::protobuf::int32 value) {
  base_stat_min_and_max_.Set(index, value);
}
inline void EquipmentBaoShiProto::add_base_stat_min_and_max(::google::protobuf::int32 value) {
  base_stat_min_and_max_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentBaoShiProto::base_stat_min_and_max() const {
  return base_stat_min_and_max_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentBaoShiProto::mutable_base_stat_min_and_max() {
  return &base_stat_min_and_max_;
}

// repeated int32 attch_stat_min_and_max = 9;
inline int EquipmentBaoShiProto::attch_stat_min_and_max_size() const {
  return attch_stat_min_and_max_.size();
}
inline void EquipmentBaoShiProto::clear_attch_stat_min_and_max() {
  attch_stat_min_and_max_.Clear();
}
inline ::google::protobuf::int32 EquipmentBaoShiProto::attch_stat_min_and_max(int index) const {
  return attch_stat_min_and_max_.Get(index);
}
inline void EquipmentBaoShiProto::set_attch_stat_min_and_max(int index, ::google::protobuf::int32 value) {
  attch_stat_min_and_max_.Set(index, value);
}
inline void EquipmentBaoShiProto::add_attch_stat_min_and_max(::google::protobuf::int32 value) {
  attch_stat_min_and_max_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentBaoShiProto::attch_stat_min_and_max() const {
  return attch_stat_min_and_max_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentBaoShiProto::mutable_attch_stat_min_and_max() {
  return &attch_stat_min_and_max_;
}

// -------------------------------------------------------------------

// MountEquipmentProto

// optional bool binded = 2;
inline bool MountEquipmentProto::has_binded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MountEquipmentProto::set_has_binded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MountEquipmentProto::clear_has_binded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MountEquipmentProto::clear_binded() {
  binded_ = false;
  clear_has_binded();
}
inline bool MountEquipmentProto::binded() const {
  return binded_;
}
inline void MountEquipmentProto::set_binded(bool value) {
  set_has_binded();
  binded_ = value;
}

// optional int64 expire_time = 3;
inline bool MountEquipmentProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MountEquipmentProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MountEquipmentProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MountEquipmentProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 MountEquipmentProto::expire_time() const {
  return expire_time_;
}
inline void MountEquipmentProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional int32 quality = 4;
inline bool MountEquipmentProto::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MountEquipmentProto::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MountEquipmentProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MountEquipmentProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 MountEquipmentProto::quality() const {
  return quality_;
}
inline void MountEquipmentProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional .app.message.SingleStatProto base_stat = 50;
inline bool MountEquipmentProto::has_base_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MountEquipmentProto::set_has_base_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MountEquipmentProto::clear_has_base_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MountEquipmentProto::clear_base_stat() {
  if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
  clear_has_base_stat();
}
inline const ::app::message::SingleStatProto& MountEquipmentProto::base_stat() const {
  return base_stat_ != NULL ? *base_stat_ : *default_instance_->base_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::mutable_base_stat() {
  set_has_base_stat();
  if (base_stat_ == NULL) base_stat_ = new ::app::message::SingleStatProto;
  return base_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::release_base_stat() {
  clear_has_base_stat();
  ::app::message::SingleStatProto* temp = base_stat_;
  base_stat_ = NULL;
  return temp;
}
inline void MountEquipmentProto::set_allocated_base_stat(::app::message::SingleStatProto* base_stat) {
  delete base_stat_;
  base_stat_ = base_stat;
  if (base_stat) {
    set_has_base_stat();
  } else {
    clear_has_base_stat();
  }
}

// optional int32 base_fighting_amount = 51;
inline bool MountEquipmentProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MountEquipmentProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MountEquipmentProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MountEquipmentProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 MountEquipmentProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void MountEquipmentProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 best_refined_fighting_amount = 52;
inline bool MountEquipmentProto::has_best_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MountEquipmentProto::set_has_best_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MountEquipmentProto::clear_has_best_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MountEquipmentProto::clear_best_refined_fighting_amount() {
  best_refined_fighting_amount_ = 0;
  clear_has_best_refined_fighting_amount();
}
inline ::google::protobuf::int32 MountEquipmentProto::best_refined_fighting_amount() const {
  return best_refined_fighting_amount_;
}
inline void MountEquipmentProto::set_best_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_best_refined_fighting_amount();
  best_refined_fighting_amount_ = value;
}

// optional .app.message.SingleStatProto best_refined_stat = 53;
inline bool MountEquipmentProto::has_best_refined_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MountEquipmentProto::set_has_best_refined_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MountEquipmentProto::clear_has_best_refined_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MountEquipmentProto::clear_best_refined_stat() {
  if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_best_refined_stat();
}
inline const ::app::message::SingleStatProto& MountEquipmentProto::best_refined_stat() const {
  return best_refined_stat_ != NULL ? *best_refined_stat_ : *default_instance_->best_refined_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::mutable_best_refined_stat() {
  set_has_best_refined_stat();
  if (best_refined_stat_ == NULL) best_refined_stat_ = new ::app::message::SingleStatProto;
  return best_refined_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::release_best_refined_stat() {
  clear_has_best_refined_stat();
  ::app::message::SingleStatProto* temp = best_refined_stat_;
  best_refined_stat_ = NULL;
  return temp;
}
inline void MountEquipmentProto::set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat) {
  delete best_refined_stat_;
  best_refined_stat_ = best_refined_stat;
  if (best_refined_stat) {
    set_has_best_refined_stat();
  } else {
    clear_has_best_refined_stat();
  }
}

// optional int32 refined_times = 61;
inline bool MountEquipmentProto::has_refined_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MountEquipmentProto::set_has_refined_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MountEquipmentProto::clear_has_refined_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MountEquipmentProto::clear_refined_times() {
  refined_times_ = 0;
  clear_has_refined_times();
}
inline ::google::protobuf::int32 MountEquipmentProto::refined_times() const {
  return refined_times_;
}
inline void MountEquipmentProto::set_refined_times(::google::protobuf::int32 value) {
  set_has_refined_times();
  refined_times_ = value;
}

// optional .app.message.SingleStatProto refined_stat = 62;
inline bool MountEquipmentProto::has_refined_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MountEquipmentProto::set_has_refined_stat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MountEquipmentProto::clear_has_refined_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MountEquipmentProto::clear_refined_stat() {
  if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_refined_stat();
}
inline const ::app::message::SingleStatProto& MountEquipmentProto::refined_stat() const {
  return refined_stat_ != NULL ? *refined_stat_ : *default_instance_->refined_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::mutable_refined_stat() {
  set_has_refined_stat();
  if (refined_stat_ == NULL) refined_stat_ = new ::app::message::SingleStatProto;
  return refined_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::release_refined_stat() {
  clear_has_refined_stat();
  ::app::message::SingleStatProto* temp = refined_stat_;
  refined_stat_ = NULL;
  return temp;
}
inline void MountEquipmentProto::set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat) {
  delete refined_stat_;
  refined_stat_ = refined_stat;
  if (refined_stat) {
    set_has_refined_stat();
  } else {
    clear_has_refined_stat();
  }
}

// optional int32 refined_fighting_amount = 63;
inline bool MountEquipmentProto::has_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MountEquipmentProto::set_has_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MountEquipmentProto::clear_has_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MountEquipmentProto::clear_refined_fighting_amount() {
  refined_fighting_amount_ = 0;
  clear_has_refined_fighting_amount();
}
inline ::google::protobuf::int32 MountEquipmentProto::refined_fighting_amount() const {
  return refined_fighting_amount_;
}
inline void MountEquipmentProto::set_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_refined_fighting_amount();
  refined_fighting_amount_ = value;
}

// optional int32 added_stat_count = 64;
inline bool MountEquipmentProto::has_added_stat_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MountEquipmentProto::set_has_added_stat_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MountEquipmentProto::clear_has_added_stat_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MountEquipmentProto::clear_added_stat_count() {
  added_stat_count_ = 0;
  clear_has_added_stat_count();
}
inline ::google::protobuf::int32 MountEquipmentProto::added_stat_count() const {
  return added_stat_count_;
}
inline void MountEquipmentProto::set_added_stat_count(::google::protobuf::int32 value) {
  set_has_added_stat_count();
  added_stat_count_ = value;
}

// optional .app.message.SingleStatProto added_stat = 65;
inline bool MountEquipmentProto::has_added_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MountEquipmentProto::set_has_added_stat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MountEquipmentProto::clear_has_added_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MountEquipmentProto::clear_added_stat() {
  if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
  clear_has_added_stat();
}
inline const ::app::message::SingleStatProto& MountEquipmentProto::added_stat() const {
  return added_stat_ != NULL ? *added_stat_ : *default_instance_->added_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::mutable_added_stat() {
  set_has_added_stat();
  if (added_stat_ == NULL) added_stat_ = new ::app::message::SingleStatProto;
  return added_stat_;
}
inline ::app::message::SingleStatProto* MountEquipmentProto::release_added_stat() {
  clear_has_added_stat();
  ::app::message::SingleStatProto* temp = added_stat_;
  added_stat_ = NULL;
  return temp;
}
inline void MountEquipmentProto::set_allocated_added_stat(::app::message::SingleStatProto* added_stat) {
  delete added_stat_;
  added_stat_ = added_stat;
  if (added_stat) {
    set_has_added_stat();
  } else {
    clear_has_added_stat();
  }
}

// optional int32 added_fighting_amount = 66;
inline bool MountEquipmentProto::has_added_fighting_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MountEquipmentProto::set_has_added_fighting_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MountEquipmentProto::clear_has_added_fighting_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MountEquipmentProto::clear_added_fighting_amount() {
  added_fighting_amount_ = 0;
  clear_has_added_fighting_amount();
}
inline ::google::protobuf::int32 MountEquipmentProto::added_fighting_amount() const {
  return added_fighting_amount_;
}
inline void MountEquipmentProto::set_added_fighting_amount(::google::protobuf::int32 value) {
  set_has_added_fighting_amount();
  added_fighting_amount_ = value;
}

// optional int32 added_stat_type = 67;
inline bool MountEquipmentProto::has_added_stat_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MountEquipmentProto::set_has_added_stat_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MountEquipmentProto::clear_has_added_stat_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MountEquipmentProto::clear_added_stat_type() {
  added_stat_type_ = 0;
  clear_has_added_stat_type();
}
inline ::google::protobuf::int32 MountEquipmentProto::added_stat_type() const {
  return added_stat_type_;
}
inline void MountEquipmentProto::set_added_stat_type(::google::protobuf::int32 value) {
  set_has_added_stat_type();
  added_stat_type_ = value;
}

// optional int32 ti_pin_val = 69;
inline bool MountEquipmentProto::has_ti_pin_val() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MountEquipmentProto::set_has_ti_pin_val() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MountEquipmentProto::clear_has_ti_pin_val() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MountEquipmentProto::clear_ti_pin_val() {
  ti_pin_val_ = 0;
  clear_has_ti_pin_val();
}
inline ::google::protobuf::int32 MountEquipmentProto::ti_pin_val() const {
  return ti_pin_val_;
}
inline void MountEquipmentProto::set_ti_pin_val(::google::protobuf::int32 value) {
  set_has_ti_pin_val();
  ti_pin_val_ = value;
}

// -------------------------------------------------------------------

// ShieldEquipmentProto

// optional bool binded = 2;
inline bool ShieldEquipmentProto::has_binded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShieldEquipmentProto::set_has_binded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShieldEquipmentProto::clear_has_binded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShieldEquipmentProto::clear_binded() {
  binded_ = false;
  clear_has_binded();
}
inline bool ShieldEquipmentProto::binded() const {
  return binded_;
}
inline void ShieldEquipmentProto::set_binded(bool value) {
  set_has_binded();
  binded_ = value;
}

// optional int64 expire_time = 3;
inline bool ShieldEquipmentProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShieldEquipmentProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShieldEquipmentProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShieldEquipmentProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 ShieldEquipmentProto::expire_time() const {
  return expire_time_;
}
inline void ShieldEquipmentProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional int32 quality = 4;
inline bool ShieldEquipmentProto::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShieldEquipmentProto::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShieldEquipmentProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShieldEquipmentProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::quality() const {
  return quality_;
}
inline void ShieldEquipmentProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional .app.message.SingleStatProto base_stat = 50;
inline bool ShieldEquipmentProto::has_base_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShieldEquipmentProto::set_has_base_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShieldEquipmentProto::clear_has_base_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShieldEquipmentProto::clear_base_stat() {
  if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
  clear_has_base_stat();
}
inline const ::app::message::SingleStatProto& ShieldEquipmentProto::base_stat() const {
  return base_stat_ != NULL ? *base_stat_ : *default_instance_->base_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::mutable_base_stat() {
  set_has_base_stat();
  if (base_stat_ == NULL) base_stat_ = new ::app::message::SingleStatProto;
  return base_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::release_base_stat() {
  clear_has_base_stat();
  ::app::message::SingleStatProto* temp = base_stat_;
  base_stat_ = NULL;
  return temp;
}
inline void ShieldEquipmentProto::set_allocated_base_stat(::app::message::SingleStatProto* base_stat) {
  delete base_stat_;
  base_stat_ = base_stat;
  if (base_stat) {
    set_has_base_stat();
  } else {
    clear_has_base_stat();
  }
}

// optional int32 base_fighting_amount = 51;
inline bool ShieldEquipmentProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShieldEquipmentProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShieldEquipmentProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShieldEquipmentProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void ShieldEquipmentProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 best_refined_fighting_amount = 52;
inline bool ShieldEquipmentProto::has_best_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShieldEquipmentProto::set_has_best_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShieldEquipmentProto::clear_has_best_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShieldEquipmentProto::clear_best_refined_fighting_amount() {
  best_refined_fighting_amount_ = 0;
  clear_has_best_refined_fighting_amount();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::best_refined_fighting_amount() const {
  return best_refined_fighting_amount_;
}
inline void ShieldEquipmentProto::set_best_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_best_refined_fighting_amount();
  best_refined_fighting_amount_ = value;
}

// optional .app.message.SingleStatProto best_refined_stat = 53;
inline bool ShieldEquipmentProto::has_best_refined_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShieldEquipmentProto::set_has_best_refined_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShieldEquipmentProto::clear_has_best_refined_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShieldEquipmentProto::clear_best_refined_stat() {
  if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_best_refined_stat();
}
inline const ::app::message::SingleStatProto& ShieldEquipmentProto::best_refined_stat() const {
  return best_refined_stat_ != NULL ? *best_refined_stat_ : *default_instance_->best_refined_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::mutable_best_refined_stat() {
  set_has_best_refined_stat();
  if (best_refined_stat_ == NULL) best_refined_stat_ = new ::app::message::SingleStatProto;
  return best_refined_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::release_best_refined_stat() {
  clear_has_best_refined_stat();
  ::app::message::SingleStatProto* temp = best_refined_stat_;
  best_refined_stat_ = NULL;
  return temp;
}
inline void ShieldEquipmentProto::set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat) {
  delete best_refined_stat_;
  best_refined_stat_ = best_refined_stat;
  if (best_refined_stat) {
    set_has_best_refined_stat();
  } else {
    clear_has_best_refined_stat();
  }
}

// optional int32 refined_times = 61;
inline bool ShieldEquipmentProto::has_refined_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShieldEquipmentProto::set_has_refined_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShieldEquipmentProto::clear_has_refined_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShieldEquipmentProto::clear_refined_times() {
  refined_times_ = 0;
  clear_has_refined_times();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::refined_times() const {
  return refined_times_;
}
inline void ShieldEquipmentProto::set_refined_times(::google::protobuf::int32 value) {
  set_has_refined_times();
  refined_times_ = value;
}

// optional .app.message.SingleStatProto refined_stat = 62;
inline bool ShieldEquipmentProto::has_refined_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShieldEquipmentProto::set_has_refined_stat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShieldEquipmentProto::clear_has_refined_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShieldEquipmentProto::clear_refined_stat() {
  if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_refined_stat();
}
inline const ::app::message::SingleStatProto& ShieldEquipmentProto::refined_stat() const {
  return refined_stat_ != NULL ? *refined_stat_ : *default_instance_->refined_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::mutable_refined_stat() {
  set_has_refined_stat();
  if (refined_stat_ == NULL) refined_stat_ = new ::app::message::SingleStatProto;
  return refined_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::release_refined_stat() {
  clear_has_refined_stat();
  ::app::message::SingleStatProto* temp = refined_stat_;
  refined_stat_ = NULL;
  return temp;
}
inline void ShieldEquipmentProto::set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat) {
  delete refined_stat_;
  refined_stat_ = refined_stat;
  if (refined_stat) {
    set_has_refined_stat();
  } else {
    clear_has_refined_stat();
  }
}

// optional int32 refined_fighting_amount = 63;
inline bool ShieldEquipmentProto::has_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShieldEquipmentProto::set_has_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShieldEquipmentProto::clear_has_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShieldEquipmentProto::clear_refined_fighting_amount() {
  refined_fighting_amount_ = 0;
  clear_has_refined_fighting_amount();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::refined_fighting_amount() const {
  return refined_fighting_amount_;
}
inline void ShieldEquipmentProto::set_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_refined_fighting_amount();
  refined_fighting_amount_ = value;
}

// optional int32 added_stat_count = 64;
inline bool ShieldEquipmentProto::has_added_stat_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShieldEquipmentProto::set_has_added_stat_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShieldEquipmentProto::clear_has_added_stat_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShieldEquipmentProto::clear_added_stat_count() {
  added_stat_count_ = 0;
  clear_has_added_stat_count();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::added_stat_count() const {
  return added_stat_count_;
}
inline void ShieldEquipmentProto::set_added_stat_count(::google::protobuf::int32 value) {
  set_has_added_stat_count();
  added_stat_count_ = value;
}

// optional .app.message.SingleStatProto added_stat = 65;
inline bool ShieldEquipmentProto::has_added_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ShieldEquipmentProto::set_has_added_stat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ShieldEquipmentProto::clear_has_added_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ShieldEquipmentProto::clear_added_stat() {
  if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
  clear_has_added_stat();
}
inline const ::app::message::SingleStatProto& ShieldEquipmentProto::added_stat() const {
  return added_stat_ != NULL ? *added_stat_ : *default_instance_->added_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::mutable_added_stat() {
  set_has_added_stat();
  if (added_stat_ == NULL) added_stat_ = new ::app::message::SingleStatProto;
  return added_stat_;
}
inline ::app::message::SingleStatProto* ShieldEquipmentProto::release_added_stat() {
  clear_has_added_stat();
  ::app::message::SingleStatProto* temp = added_stat_;
  added_stat_ = NULL;
  return temp;
}
inline void ShieldEquipmentProto::set_allocated_added_stat(::app::message::SingleStatProto* added_stat) {
  delete added_stat_;
  added_stat_ = added_stat;
  if (added_stat) {
    set_has_added_stat();
  } else {
    clear_has_added_stat();
  }
}

// optional int32 added_fighting_amount = 66;
inline bool ShieldEquipmentProto::has_added_fighting_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ShieldEquipmentProto::set_has_added_fighting_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ShieldEquipmentProto::clear_has_added_fighting_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ShieldEquipmentProto::clear_added_fighting_amount() {
  added_fighting_amount_ = 0;
  clear_has_added_fighting_amount();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::added_fighting_amount() const {
  return added_fighting_amount_;
}
inline void ShieldEquipmentProto::set_added_fighting_amount(::google::protobuf::int32 value) {
  set_has_added_fighting_amount();
  added_fighting_amount_ = value;
}

// optional int32 added_stat_type = 67;
inline bool ShieldEquipmentProto::has_added_stat_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ShieldEquipmentProto::set_has_added_stat_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ShieldEquipmentProto::clear_has_added_stat_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ShieldEquipmentProto::clear_added_stat_type() {
  added_stat_type_ = 0;
  clear_has_added_stat_type();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::added_stat_type() const {
  return added_stat_type_;
}
inline void ShieldEquipmentProto::set_added_stat_type(::google::protobuf::int32 value) {
  set_has_added_stat_type();
  added_stat_type_ = value;
}

// optional int32 ti_pin_val = 69;
inline bool ShieldEquipmentProto::has_ti_pin_val() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ShieldEquipmentProto::set_has_ti_pin_val() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ShieldEquipmentProto::clear_has_ti_pin_val() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ShieldEquipmentProto::clear_ti_pin_val() {
  ti_pin_val_ = 0;
  clear_has_ti_pin_val();
}
inline ::google::protobuf::int32 ShieldEquipmentProto::ti_pin_val() const {
  return ti_pin_val_;
}
inline void ShieldEquipmentProto::set_ti_pin_val(::google::protobuf::int32 value) {
  set_has_ti_pin_val();
  ti_pin_val_ = value;
}

// -------------------------------------------------------------------

// PetEquipmentProto

// optional bool binded = 2;
inline bool PetEquipmentProto::has_binded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetEquipmentProto::set_has_binded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetEquipmentProto::clear_has_binded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetEquipmentProto::clear_binded() {
  binded_ = false;
  clear_has_binded();
}
inline bool PetEquipmentProto::binded() const {
  return binded_;
}
inline void PetEquipmentProto::set_binded(bool value) {
  set_has_binded();
  binded_ = value;
}

// optional int64 expire_time = 3;
inline bool PetEquipmentProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetEquipmentProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetEquipmentProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetEquipmentProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 PetEquipmentProto::expire_time() const {
  return expire_time_;
}
inline void PetEquipmentProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional int32 quality = 4;
inline bool PetEquipmentProto::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetEquipmentProto::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetEquipmentProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetEquipmentProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 PetEquipmentProto::quality() const {
  return quality_;
}
inline void PetEquipmentProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional .app.message.SingleStatProto base_stat = 50;
inline bool PetEquipmentProto::has_base_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetEquipmentProto::set_has_base_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetEquipmentProto::clear_has_base_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetEquipmentProto::clear_base_stat() {
  if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
  clear_has_base_stat();
}
inline const ::app::message::SingleStatProto& PetEquipmentProto::base_stat() const {
  return base_stat_ != NULL ? *base_stat_ : *default_instance_->base_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::mutable_base_stat() {
  set_has_base_stat();
  if (base_stat_ == NULL) base_stat_ = new ::app::message::SingleStatProto;
  return base_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::release_base_stat() {
  clear_has_base_stat();
  ::app::message::SingleStatProto* temp = base_stat_;
  base_stat_ = NULL;
  return temp;
}
inline void PetEquipmentProto::set_allocated_base_stat(::app::message::SingleStatProto* base_stat) {
  delete base_stat_;
  base_stat_ = base_stat;
  if (base_stat) {
    set_has_base_stat();
  } else {
    clear_has_base_stat();
  }
}

// optional int32 base_fighting_amount = 51;
inline bool PetEquipmentProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetEquipmentProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetEquipmentProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetEquipmentProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 PetEquipmentProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void PetEquipmentProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 best_refined_fighting_amount = 52;
inline bool PetEquipmentProto::has_best_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetEquipmentProto::set_has_best_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetEquipmentProto::clear_has_best_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetEquipmentProto::clear_best_refined_fighting_amount() {
  best_refined_fighting_amount_ = 0;
  clear_has_best_refined_fighting_amount();
}
inline ::google::protobuf::int32 PetEquipmentProto::best_refined_fighting_amount() const {
  return best_refined_fighting_amount_;
}
inline void PetEquipmentProto::set_best_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_best_refined_fighting_amount();
  best_refined_fighting_amount_ = value;
}

// optional .app.message.SingleStatProto best_refined_stat = 53;
inline bool PetEquipmentProto::has_best_refined_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetEquipmentProto::set_has_best_refined_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetEquipmentProto::clear_has_best_refined_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetEquipmentProto::clear_best_refined_stat() {
  if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_best_refined_stat();
}
inline const ::app::message::SingleStatProto& PetEquipmentProto::best_refined_stat() const {
  return best_refined_stat_ != NULL ? *best_refined_stat_ : *default_instance_->best_refined_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::mutable_best_refined_stat() {
  set_has_best_refined_stat();
  if (best_refined_stat_ == NULL) best_refined_stat_ = new ::app::message::SingleStatProto;
  return best_refined_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::release_best_refined_stat() {
  clear_has_best_refined_stat();
  ::app::message::SingleStatProto* temp = best_refined_stat_;
  best_refined_stat_ = NULL;
  return temp;
}
inline void PetEquipmentProto::set_allocated_best_refined_stat(::app::message::SingleStatProto* best_refined_stat) {
  delete best_refined_stat_;
  best_refined_stat_ = best_refined_stat;
  if (best_refined_stat) {
    set_has_best_refined_stat();
  } else {
    clear_has_best_refined_stat();
  }
}

// optional int32 refined_times = 61;
inline bool PetEquipmentProto::has_refined_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetEquipmentProto::set_has_refined_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetEquipmentProto::clear_has_refined_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetEquipmentProto::clear_refined_times() {
  refined_times_ = 0;
  clear_has_refined_times();
}
inline ::google::protobuf::int32 PetEquipmentProto::refined_times() const {
  return refined_times_;
}
inline void PetEquipmentProto::set_refined_times(::google::protobuf::int32 value) {
  set_has_refined_times();
  refined_times_ = value;
}

// optional .app.message.SingleStatProto refined_stat = 62;
inline bool PetEquipmentProto::has_refined_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetEquipmentProto::set_has_refined_stat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetEquipmentProto::clear_has_refined_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetEquipmentProto::clear_refined_stat() {
  if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
  clear_has_refined_stat();
}
inline const ::app::message::SingleStatProto& PetEquipmentProto::refined_stat() const {
  return refined_stat_ != NULL ? *refined_stat_ : *default_instance_->refined_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::mutable_refined_stat() {
  set_has_refined_stat();
  if (refined_stat_ == NULL) refined_stat_ = new ::app::message::SingleStatProto;
  return refined_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::release_refined_stat() {
  clear_has_refined_stat();
  ::app::message::SingleStatProto* temp = refined_stat_;
  refined_stat_ = NULL;
  return temp;
}
inline void PetEquipmentProto::set_allocated_refined_stat(::app::message::SingleStatProto* refined_stat) {
  delete refined_stat_;
  refined_stat_ = refined_stat;
  if (refined_stat) {
    set_has_refined_stat();
  } else {
    clear_has_refined_stat();
  }
}

// optional int32 refined_fighting_amount = 63;
inline bool PetEquipmentProto::has_refined_fighting_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetEquipmentProto::set_has_refined_fighting_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetEquipmentProto::clear_has_refined_fighting_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetEquipmentProto::clear_refined_fighting_amount() {
  refined_fighting_amount_ = 0;
  clear_has_refined_fighting_amount();
}
inline ::google::protobuf::int32 PetEquipmentProto::refined_fighting_amount() const {
  return refined_fighting_amount_;
}
inline void PetEquipmentProto::set_refined_fighting_amount(::google::protobuf::int32 value) {
  set_has_refined_fighting_amount();
  refined_fighting_amount_ = value;
}

// optional int32 added_stat_count = 64;
inline bool PetEquipmentProto::has_added_stat_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PetEquipmentProto::set_has_added_stat_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PetEquipmentProto::clear_has_added_stat_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PetEquipmentProto::clear_added_stat_count() {
  added_stat_count_ = 0;
  clear_has_added_stat_count();
}
inline ::google::protobuf::int32 PetEquipmentProto::added_stat_count() const {
  return added_stat_count_;
}
inline void PetEquipmentProto::set_added_stat_count(::google::protobuf::int32 value) {
  set_has_added_stat_count();
  added_stat_count_ = value;
}

// optional .app.message.SingleStatProto added_stat = 65;
inline bool PetEquipmentProto::has_added_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PetEquipmentProto::set_has_added_stat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PetEquipmentProto::clear_has_added_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PetEquipmentProto::clear_added_stat() {
  if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
  clear_has_added_stat();
}
inline const ::app::message::SingleStatProto& PetEquipmentProto::added_stat() const {
  return added_stat_ != NULL ? *added_stat_ : *default_instance_->added_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::mutable_added_stat() {
  set_has_added_stat();
  if (added_stat_ == NULL) added_stat_ = new ::app::message::SingleStatProto;
  return added_stat_;
}
inline ::app::message::SingleStatProto* PetEquipmentProto::release_added_stat() {
  clear_has_added_stat();
  ::app::message::SingleStatProto* temp = added_stat_;
  added_stat_ = NULL;
  return temp;
}
inline void PetEquipmentProto::set_allocated_added_stat(::app::message::SingleStatProto* added_stat) {
  delete added_stat_;
  added_stat_ = added_stat;
  if (added_stat) {
    set_has_added_stat();
  } else {
    clear_has_added_stat();
  }
}

// optional int32 added_fighting_amount = 66;
inline bool PetEquipmentProto::has_added_fighting_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PetEquipmentProto::set_has_added_fighting_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PetEquipmentProto::clear_has_added_fighting_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PetEquipmentProto::clear_added_fighting_amount() {
  added_fighting_amount_ = 0;
  clear_has_added_fighting_amount();
}
inline ::google::protobuf::int32 PetEquipmentProto::added_fighting_amount() const {
  return added_fighting_amount_;
}
inline void PetEquipmentProto::set_added_fighting_amount(::google::protobuf::int32 value) {
  set_has_added_fighting_amount();
  added_fighting_amount_ = value;
}

// optional int32 added_stat_type = 67;
inline bool PetEquipmentProto::has_added_stat_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PetEquipmentProto::set_has_added_stat_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PetEquipmentProto::clear_has_added_stat_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PetEquipmentProto::clear_added_stat_type() {
  added_stat_type_ = 0;
  clear_has_added_stat_type();
}
inline ::google::protobuf::int32 PetEquipmentProto::added_stat_type() const {
  return added_stat_type_;
}
inline void PetEquipmentProto::set_added_stat_type(::google::protobuf::int32 value) {
  set_has_added_stat_type();
  added_stat_type_ = value;
}

// optional int32 ti_pin_val = 69;
inline bool PetEquipmentProto::has_ti_pin_val() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PetEquipmentProto::set_has_ti_pin_val() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PetEquipmentProto::clear_has_ti_pin_val() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PetEquipmentProto::clear_ti_pin_val() {
  ti_pin_val_ = 0;
  clear_has_ti_pin_val();
}
inline ::google::protobuf::int32 PetEquipmentProto::ti_pin_val() const {
  return ti_pin_val_;
}
inline void PetEquipmentProto::set_ti_pin_val(::google::protobuf::int32 value) {
  set_has_ti_pin_val();
  ti_pin_val_ = value;
}

// -------------------------------------------------------------------

// BaoShiProto

// optional bool binded = 2;
inline bool BaoShiProto::has_binded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaoShiProto::set_has_binded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaoShiProto::clear_has_binded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaoShiProto::clear_binded() {
  binded_ = false;
  clear_has_binded();
}
inline bool BaoShiProto::binded() const {
  return binded_;
}
inline void BaoShiProto::set_binded(bool value) {
  set_has_binded();
  binded_ = value;
}

// optional int64 expire_time = 3;
inline bool BaoShiProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaoShiProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaoShiProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaoShiProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 BaoShiProto::expire_time() const {
  return expire_time_;
}
inline void BaoShiProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// repeated .app.message.SingleStatProto baseStat = 5;
inline int BaoShiProto::basestat_size() const {
  return basestat_.size();
}
inline void BaoShiProto::clear_basestat() {
  basestat_.Clear();
}
inline const ::app::message::SingleStatProto& BaoShiProto::basestat(int index) const {
  return basestat_.Get(index);
}
inline ::app::message::SingleStatProto* BaoShiProto::mutable_basestat(int index) {
  return basestat_.Mutable(index);
}
inline ::app::message::SingleStatProto* BaoShiProto::add_basestat() {
  return basestat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
BaoShiProto::basestat() const {
  return basestat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
BaoShiProto::mutable_basestat() {
  return &basestat_;
}

// optional .app.message.SingleStatProto attachStat = 6;
inline bool BaoShiProto::has_attachstat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaoShiProto::set_has_attachstat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaoShiProto::clear_has_attachstat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaoShiProto::clear_attachstat() {
  if (attachstat_ != NULL) attachstat_->::app::message::SingleStatProto::Clear();
  clear_has_attachstat();
}
inline const ::app::message::SingleStatProto& BaoShiProto::attachstat() const {
  return attachstat_ != NULL ? *attachstat_ : *default_instance_->attachstat_;
}
inline ::app::message::SingleStatProto* BaoShiProto::mutable_attachstat() {
  set_has_attachstat();
  if (attachstat_ == NULL) attachstat_ = new ::app::message::SingleStatProto;
  return attachstat_;
}
inline ::app::message::SingleStatProto* BaoShiProto::release_attachstat() {
  clear_has_attachstat();
  ::app::message::SingleStatProto* temp = attachstat_;
  attachstat_ = NULL;
  return temp;
}
inline void BaoShiProto::set_allocated_attachstat(::app::message::SingleStatProto* attachstat) {
  delete attachstat_;
  attachstat_ = attachstat;
  if (attachstat) {
    set_has_attachstat();
  } else {
    clear_has_attachstat();
  }
}

// optional int32 fightingAmount = 7;
inline bool BaoShiProto::has_fightingamount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaoShiProto::set_has_fightingamount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaoShiProto::clear_has_fightingamount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaoShiProto::clear_fightingamount() {
  fightingamount_ = 0;
  clear_has_fightingamount();
}
inline ::google::protobuf::int32 BaoShiProto::fightingamount() const {
  return fightingamount_;
}
inline void BaoShiProto::set_fightingamount(::google::protobuf::int32 value) {
  set_has_fightingamount();
  fightingamount_ = value;
}

// optional int64 bao_shi_version = 8;
inline bool BaoShiProto::has_bao_shi_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaoShiProto::set_has_bao_shi_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaoShiProto::clear_has_bao_shi_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaoShiProto::clear_bao_shi_version() {
  bao_shi_version_ = GOOGLE_LONGLONG(0);
  clear_has_bao_shi_version();
}
inline ::google::protobuf::int64 BaoShiProto::bao_shi_version() const {
  return bao_shi_version_;
}
inline void BaoShiProto::set_bao_shi_version(::google::protobuf::int64 value) {
  set_has_bao_shi_version();
  bao_shi_version_ = value;
}

// -------------------------------------------------------------------

// SuperWeaponGemDataProto

// optional .app.message.GoodsDataProto base_data = 1;
inline bool SuperWeaponGemDataProto::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuperWeaponGemDataProto::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuperWeaponGemDataProto::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuperWeaponGemDataProto::clear_base_data() {
  if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
  clear_has_base_data();
}
inline const ::app::message::GoodsDataProto& SuperWeaponGemDataProto::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::app::message::GoodsDataProto* SuperWeaponGemDataProto::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::app::message::GoodsDataProto;
  return base_data_;
}
inline ::app::message::GoodsDataProto* SuperWeaponGemDataProto::release_base_data() {
  clear_has_base_data();
  ::app::message::GoodsDataProto* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void SuperWeaponGemDataProto::set_allocated_base_data(::app::message::GoodsDataProto* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .app.message.SpriteStatProto add_stat = 2;
inline bool SuperWeaponGemDataProto::has_add_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuperWeaponGemDataProto::set_has_add_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuperWeaponGemDataProto::clear_has_add_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuperWeaponGemDataProto::clear_add_stat() {
  if (add_stat_ != NULL) add_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_add_stat();
}
inline const ::app::message::SpriteStatProto& SuperWeaponGemDataProto::add_stat() const {
  return add_stat_ != NULL ? *add_stat_ : *default_instance_->add_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponGemDataProto::mutable_add_stat() {
  set_has_add_stat();
  if (add_stat_ == NULL) add_stat_ = new ::app::message::SpriteStatProto;
  return add_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponGemDataProto::release_add_stat() {
  clear_has_add_stat();
  ::app::message::SpriteStatProto* temp = add_stat_;
  add_stat_ = NULL;
  return temp;
}
inline void SuperWeaponGemDataProto::set_allocated_add_stat(::app::message::SpriteStatProto* add_stat) {
  delete add_stat_;
  add_stat_ = add_stat;
  if (add_stat) {
    set_has_add_stat();
  } else {
    clear_has_add_stat();
  }
}

// optional int32 level = 3;
inline bool SuperWeaponGemDataProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuperWeaponGemDataProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuperWeaponGemDataProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuperWeaponGemDataProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SuperWeaponGemDataProto::level() const {
  return level_;
}
inline void SuperWeaponGemDataProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// GoodsWrapperProto

// optional bytes static_data = 1;
inline bool GoodsWrapperProto::has_static_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsWrapperProto::set_has_static_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsWrapperProto::clear_has_static_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsWrapperProto::clear_static_data() {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    static_data_->clear();
  }
  clear_has_static_data();
}
inline const ::std::string& GoodsWrapperProto::static_data() const {
  return *static_data_;
}
inline void GoodsWrapperProto::set_static_data(const ::std::string& value) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(value);
}
inline void GoodsWrapperProto::set_static_data(const char* value) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(value);
}
inline void GoodsWrapperProto::set_static_data(const void* value, size_t size) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsWrapperProto::mutable_static_data() {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  return static_data_;
}
inline ::std::string* GoodsWrapperProto::release_static_data() {
  clear_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = static_data_;
    static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsWrapperProto::set_allocated_static_data(::std::string* static_data) {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    delete static_data_;
  }
  if (static_data) {
    set_has_static_data();
    static_data_ = static_data;
  } else {
    clear_has_static_data();
    static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes dynamic_data = 2;
inline bool GoodsWrapperProto::has_dynamic_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsWrapperProto::set_has_dynamic_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsWrapperProto::clear_has_dynamic_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsWrapperProto::clear_dynamic_data() {
  if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
    dynamic_data_->clear();
  }
  clear_has_dynamic_data();
}
inline const ::std::string& GoodsWrapperProto::dynamic_data() const {
  return *dynamic_data_;
}
inline void GoodsWrapperProto::set_dynamic_data(const ::std::string& value) {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  dynamic_data_->assign(value);
}
inline void GoodsWrapperProto::set_dynamic_data(const char* value) {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  dynamic_data_->assign(value);
}
inline void GoodsWrapperProto::set_dynamic_data(const void* value, size_t size) {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  dynamic_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsWrapperProto::mutable_dynamic_data() {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  return dynamic_data_;
}
inline ::std::string* GoodsWrapperProto::release_dynamic_data() {
  clear_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dynamic_data_;
    dynamic_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsWrapperProto::set_allocated_dynamic_data(::std::string* dynamic_data) {
  if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_data_;
  }
  if (dynamic_data) {
    set_has_dynamic_data();
    dynamic_data_ = dynamic_data;
  } else {
    clear_has_dynamic_data();
    dynamic_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 10 [default = 1];
inline bool GoodsWrapperProto::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoodsWrapperProto::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoodsWrapperProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoodsWrapperProto::clear_count() {
  count_ = 1;
  clear_has_count();
}
inline ::google::protobuf::int32 GoodsWrapperProto::count() const {
  return count_;
}
inline void GoodsWrapperProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional bool binded = 11;
inline bool GoodsWrapperProto::has_binded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoodsWrapperProto::set_has_binded() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoodsWrapperProto::clear_has_binded() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoodsWrapperProto::clear_binded() {
  binded_ = false;
  clear_has_binded();
}
inline bool GoodsWrapperProto::binded() const {
  return binded_;
}
inline void GoodsWrapperProto::set_binded(bool value) {
  set_has_binded();
  binded_ = value;
}

// optional int64 expire_time = 12;
inline bool GoodsWrapperProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GoodsWrapperProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GoodsWrapperProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GoodsWrapperProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 GoodsWrapperProto::expire_time() const {
  return expire_time_;
}
inline void GoodsWrapperProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional int32 duration = 13;
inline bool GoodsWrapperProto::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GoodsWrapperProto::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GoodsWrapperProto::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GoodsWrapperProto::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 GoodsWrapperProto::duration() const {
  return duration_;
}
inline void GoodsWrapperProto::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// optional int32 tab = 14;
inline bool GoodsWrapperProto::has_tab() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GoodsWrapperProto::set_has_tab() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GoodsWrapperProto::clear_has_tab() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GoodsWrapperProto::clear_tab() {
  tab_ = 0;
  clear_has_tab();
}
inline ::google::protobuf::int32 GoodsWrapperProto::tab() const {
  return tab_;
}
inline void GoodsWrapperProto::set_tab(::google::protobuf::int32 value) {
  set_has_tab();
  tab_ = value;
}

// optional int64 can_use_time = 15;
inline bool GoodsWrapperProto::has_can_use_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GoodsWrapperProto::set_has_can_use_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GoodsWrapperProto::clear_has_can_use_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GoodsWrapperProto::clear_can_use_time() {
  can_use_time_ = GOOGLE_LONGLONG(0);
  clear_has_can_use_time();
}
inline ::google::protobuf::int64 GoodsWrapperProto::can_use_time() const {
  return can_use_time_;
}
inline void GoodsWrapperProto::set_can_use_time(::google::protobuf::int64 value) {
  set_has_can_use_time();
  can_use_time_ = value;
}

// optional int64 can_use_after_millis = 16;
inline bool GoodsWrapperProto::has_can_use_after_millis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GoodsWrapperProto::set_has_can_use_after_millis() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GoodsWrapperProto::clear_has_can_use_after_millis() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GoodsWrapperProto::clear_can_use_after_millis() {
  can_use_after_millis_ = GOOGLE_LONGLONG(0);
  clear_has_can_use_after_millis();
}
inline ::google::protobuf::int64 GoodsWrapperProto::can_use_after_millis() const {
  return can_use_after_millis_;
}
inline void GoodsWrapperProto::set_can_use_after_millis(::google::protobuf::int64 value) {
  set_has_can_use_after_millis();
  can_use_after_millis_ = value;
}

// -------------------------------------------------------------------

// ExchangeGoodsWrapperProto

// optional bytes static_data = 1;
inline bool ExchangeGoodsWrapperProto::has_static_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeGoodsWrapperProto::set_has_static_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeGoodsWrapperProto::clear_has_static_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeGoodsWrapperProto::clear_static_data() {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    static_data_->clear();
  }
  clear_has_static_data();
}
inline const ::std::string& ExchangeGoodsWrapperProto::static_data() const {
  return *static_data_;
}
inline void ExchangeGoodsWrapperProto::set_static_data(const ::std::string& value) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(value);
}
inline void ExchangeGoodsWrapperProto::set_static_data(const char* value) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(value);
}
inline void ExchangeGoodsWrapperProto::set_static_data(const void* value, size_t size) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeGoodsWrapperProto::mutable_static_data() {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  return static_data_;
}
inline ::std::string* ExchangeGoodsWrapperProto::release_static_data() {
  clear_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = static_data_;
    static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeGoodsWrapperProto::set_allocated_static_data(::std::string* static_data) {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    delete static_data_;
  }
  if (static_data) {
    set_has_static_data();
    static_data_ = static_data;
  } else {
    clear_has_static_data();
    static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 2;
inline bool ExchangeGoodsWrapperProto::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeGoodsWrapperProto::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeGoodsWrapperProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeGoodsWrapperProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ExchangeGoodsWrapperProto::count() const {
  return count_;
}
inline void ExchangeGoodsWrapperProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional bool canUsebinded = 3;
inline bool ExchangeGoodsWrapperProto::has_canusebinded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeGoodsWrapperProto::set_has_canusebinded() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeGoodsWrapperProto::clear_has_canusebinded() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeGoodsWrapperProto::clear_canusebinded() {
  canusebinded_ = false;
  clear_has_canusebinded();
}
inline bool ExchangeGoodsWrapperProto::canusebinded() const {
  return canusebinded_;
}
inline void ExchangeGoodsWrapperProto::set_canusebinded(bool value) {
  set_has_canusebinded();
  canusebinded_ = value;
}

// optional int32 tab = 4;
inline bool ExchangeGoodsWrapperProto::has_tab() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExchangeGoodsWrapperProto::set_has_tab() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExchangeGoodsWrapperProto::clear_has_tab() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExchangeGoodsWrapperProto::clear_tab() {
  tab_ = 0;
  clear_has_tab();
}
inline ::google::protobuf::int32 ExchangeGoodsWrapperProto::tab() const {
  return tab_;
}
inline void ExchangeGoodsWrapperProto::set_tab(::google::protobuf::int32 value) {
  set_has_tab();
  tab_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::SpellBookDataProto_SpellType>() {
  return ::app::message::SpellBookDataProto_SpellType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::PanelGoodsDataProto_PanelType>() {
  return ::app::message::PanelGoodsDataProto_PanelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::XinfaType>() {
  return ::app::message::XinfaType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::GoodsBornType>() {
  return ::app::message::GoodsBornType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_goods_2eproto__INCLUDED
