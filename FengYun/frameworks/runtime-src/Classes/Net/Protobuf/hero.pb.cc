// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hero.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* HeroProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoFangClientProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoFangClientProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetTongLingClientProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetTongLingClientProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetTongLingGiftSpellClientProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetTongLingGiftSpellClientProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetTongLingSingleSpellClientProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetTongLingSingleSpellClientProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BowTongLingClientProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BowTongLingClientProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FengYunDaoRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FengYunDaoRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FengYunDaoRankProto_FengYunDaoRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FengYunDaoRankProto_FengYunDaoRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FengYunDaoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FengYunDaoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroYuYiGeProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroYuYiGeProtos_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroYuYiGeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroYuYiGeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroWelfareCompensationProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroWelfareCompensationProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroWelfareCompensationProto_WelfareCompensationProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroWelfareCompensationProto_WelfareCompensationProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LingYuProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LingYuProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TongTianBaoJianTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TongTianBaoJianTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefenceDungeonStateClientProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefenceDungeonStateClientProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NiDaoQianKunClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NiDaoQianKunClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoBingProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoBingProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoBingStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoBingStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoBingBlessProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoBingBlessProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DaoShiProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DaoShiProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroJingJieProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroJingJieProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroJingJieDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroJingJieDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDungeonCollectedPrizeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDungeonCollectedPrizeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShouCangProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShouCangProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroSuperArmProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroSuperArmProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetLevelProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetLevelProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemonProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemonProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TianZuiProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TianZuiProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TianJieProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TianJieProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BowProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BowProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineXinfaSpellProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineXinfaSpellProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightingAmountProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightingAmountProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsContainerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsContainerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsContainerUnlockProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsContainerUnlockProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroClearedProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroClearedProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeResultProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeResultProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherHeroProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherHeroProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRelationDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRelationDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_ChatGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_ChatGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* JianDaoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JianDaoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TianXieProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TianXieProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WuDaoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WuDaoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloakProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloakProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* YitianshenjueProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YitianshenjueProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountAddedDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountAddedDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperWeaponProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperWeaponProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoryDungeonStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoryDungeonStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoryDungeonFinishStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoryDungeonFinishStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoryDungeonCollectablePrizeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoryDungeonCollectablePrizeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroMarriageProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroMarriageProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarriageStorageProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarriageStorageProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarriageStorageLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarriageStorageLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroLoveProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroLoveProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroLoveExchangeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroLoveExchangeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaFightingTeamRankTeamInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaFightingTeamRankTeamInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaFightingTeamRankMemberInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaFightingTeamRankMemberInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientYuanbaoCostLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientYuanbaoCostLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSingleYuanbaoCostLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSingleYuanbaoCostLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroAnniversaryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroAnniversaryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroAnniversaryTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroAnniversaryTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleHeroAnniversaryDailyTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleHeroAnniversaryDailyTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShieldProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShieldProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleShieldProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleShieldProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroBossCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroBossCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaidiProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaidiProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaidiProto_HaidiLeftTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaidiProto_HaidiLeftTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaidiInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaidiInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaidiInfoProto_HaidiOverTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaidiInfoProto_HaidiOverTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroComebackProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroComebackProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hero_2eproto() {
  protobuf_AddDesc_hero_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hero.proto");
  GOOGLE_CHECK(file != NULL);
  HeroProto_descriptor_ = file->message_type(0);
  static const int HeroProto_offsets_[291] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, lijin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, depot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, real_air_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, total_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, equiped_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, equipment_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, upgrade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, equipment_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, has_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, buy_back_goods_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, buy_back_goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, team_auto_accept_invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, team_auto_accept_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, team_forbid_other_invite_me_join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, trade_auto_reject_invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, client_only_config_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, client_only_int_configs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, guild_auto_accept_invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, guild_forbid_other_invite_me_join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, guild_flag_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, guild_li_lian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, guild_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, friend_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, enemy_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_ws_city_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_long_city_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_guild_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_territory_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, accumulated_offline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, story_dungeon_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, story_dungeon_collectable_prize_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, auto_finish_story_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, auto_finish_story_complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_challenge_dungeon_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_vip_dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, defence_today_finished_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, defence_history_max_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, defence_today_reset_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, defence_collected_first_pass_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, defence_collectable_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sou_shen_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sou_shen_today_passed_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sou_shen_life_passed_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, ling_yun_today_entered_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, ling_yun_today_finish_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, group_collectable_prize_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, long_mai_today_first_passed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, wu_jue_today_entered_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, wu_jue_today_collected_first_try_transport_prize_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, territory_today_collected_prize_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, daily_activity_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sheng_wang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sheng_wang_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, use_free_chat_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, gems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, bow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, admired_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, collected_vip_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, next_collect_vip_weekly_prize_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, using_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, super_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, super_weapon_max_level_add_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, has_magic_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, magic_added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, magic_not_saved_added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, has_unlock_magic_weapon_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, magic_weapon_gem_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, magic_weapon_gem_binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, divine_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, divine_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, divine_storage_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, lottery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, daily_online_acc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sign_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, replenish_sign_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, next_reduce_pk_amount_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, pk_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, relive_protected_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, total_sign_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, total_recharge_yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, lottery_goods_static_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, lottery_goods_dynamic_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, has_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, spell_added_upgrade_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, combine_spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, passive_spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, active_spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, active_spell_used_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, shortcut_spell_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, shortcut_spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, default_spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, jump_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, client_relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, func_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, rage_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_collect_local_login_first_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_collect_local_login_daily_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, phoenix_refine_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_cross_single_story_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, phoenix_money_refine_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, phoenix_lijin_refine_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, phoenix_yuanbao_refine_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tu_long_today_entered_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, melt_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, challenge_dungeon_daily_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, challenge_dungeon_assist_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, challenge_dungeon_use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tian_zui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tian_jie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, first_recharge_collect_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, login_prize_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, invest_upgrade_bank_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, collect_upgrade_bank_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, collect_upgrade_bank_lijin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, invest_monthly_bank_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, invest_monthly_bank_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monthly_bank_prev_collect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monthly_bank_prev_collect_time2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monthly_bank_online_lijin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monthly_bank_base_lijin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monthly_bank_online_hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, total_online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, shou_cang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, zhong_hua_ge_today_first_passed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, gaoji_melt_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, left_ya_biao_times_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, left_jie_biao_times_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, has_safe_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, safe_code_question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, jin_jie_lucky_card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, jin_jie_lucky_card_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, jin_jie_lucky_card_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, daily_card_use_stat_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, daily_card_use_stat_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_spell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_is_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_is_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, qian_qiu_da_jie_huan_hua_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, long_yuan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, jing_jie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_shi_huan_hua_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_jie_shu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_ceng_shu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_huan_hua_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, chi_huo_shen_gong_is_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, draw_prize_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, draw_prize_storage_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, draw_prize_exchange_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, lucky_draw_prize_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, lucky_draw_prize_storage_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, new_draw_prize_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, new_draw_prize_storage_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, yitianshenjue_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, daily_wheel_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_xin_mo_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, collected_recharge_rank_promotion_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, collected_rank_promotion_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_pair_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, today_finished_arena_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_shop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_collectable_shop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_yesterday_finish_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_yesterday_pair_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_yesterday_original_shop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_shop_point_added_today_by_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, next_can_use_guild_lilian_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, guild_dungeon_collected_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, super_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, demon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, cloak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, pet_combine_added_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, pet_next_can_combine_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, gallup_answered_question_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, gallup_today_answered_question_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, marriage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, wash_super_weapon_bless_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tian_men_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, has_collect_guild_plant_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, hide_city_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, hide_long_city_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, p37_vip_prize_count_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, last_change_name_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, next_can_change_race_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, htz_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, htz_max_destroy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, htz_time_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, limit_count_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, limit_count_goods_use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, single_wash_super_weapon_bless_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, single_wash_super_weapon_bless_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_fighting_team_name_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_fighting_team_shop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, arena_fighting_team_shop_point_added_today_by_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_bing_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, use_mount_tongling_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, active_mount_tongling_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, change_use_mount_tongling_id_cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mount_tongling_wake_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, not_save_xun_zhang_random_stat1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, not_save_xun_zhang_random_stat2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_collected_fight_amout_changed_value_rank_daily_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_yy_purple_dungeon_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, he_cheng_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, he_cheng_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, christmas_storage_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monopoly_now_cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monopoly_now_roll_times_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monopoly_roll_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, monopoly_buy_roll_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, credits_draw_storage_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, love_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, wu_dao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, ni_dao_qian_kun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_tong_tian_ta_dungeon_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tong_tian_ta_dungeon_daily_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tong_tian_ta_dungeon_use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tong_tian_ta_dungeon_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, anniversary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, firework_color_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, firework_promotion_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, firework_promotion_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, anniversary_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, is_gain_huege_data_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_ling_yun_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_long_mai_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, finished_zhong_hua_ge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, defence_dungeon_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, ling_guang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, ling_guang_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mystery_dungeon_use_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, boss_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, haidi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, bow_tong_ling_display_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, bow_tong_ling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, sys_hong_bao_colleted_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, tian_xie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, jiandao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, lingyu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, fengyundao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, pet_tong_ling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, pet_tong_ling_display_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, pet_tong_ling_single_spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, mo_fang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, hell_dungeon_enter_count_),
  };
  HeroProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroProto_descriptor_,
      HeroProto::default_instance_,
      HeroProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroProto));
  MoFangClientProto_descriptor_ = file->message_type(1);
  static const int MoFangClientProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, jie_shu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, ceng_shu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, huan_hua_max_use_count_extra_times_),
  };
  MoFangClientProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoFangClientProto_descriptor_,
      MoFangClientProto::default_instance_,
      MoFangClientProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoFangClientProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoFangClientProto));
  PetTongLingClientProto_descriptor_ = file->message_type(2);
  static const int PetTongLingClientProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingClientProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingClientProto, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingClientProto, fightamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingClientProto, upgradetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingClientProto, gift_spell_),
  };
  PetTongLingClientProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetTongLingClientProto_descriptor_,
      PetTongLingClientProto::default_instance_,
      PetTongLingClientProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingClientProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingClientProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetTongLingClientProto));
  PetTongLingGiftSpellClientProto_descriptor_ = file->message_type(3);
  static const int PetTongLingGiftSpellClientProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellClientProto, passive_spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellClientProto, passive_spell_exp_),
  };
  PetTongLingGiftSpellClientProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetTongLingGiftSpellClientProto_descriptor_,
      PetTongLingGiftSpellClientProto::default_instance_,
      PetTongLingGiftSpellClientProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellClientProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellClientProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetTongLingGiftSpellClientProto));
  PetTongLingSingleSpellClientProto_descriptor_ = file->message_type(4);
  static const int PetTongLingSingleSpellClientProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingSingleSpellClientProto, spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingSingleSpellClientProto, sequence_),
  };
  PetTongLingSingleSpellClientProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetTongLingSingleSpellClientProto_descriptor_,
      PetTongLingSingleSpellClientProto::default_instance_,
      PetTongLingSingleSpellClientProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingSingleSpellClientProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingSingleSpellClientProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetTongLingSingleSpellClientProto));
  BowTongLingClientProto_descriptor_ = file->message_type(5);
  static const int BowTongLingClientProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowTongLingClientProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowTongLingClientProto, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowTongLingClientProto, fightamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowTongLingClientProto, upgradetimes_),
  };
  BowTongLingClientProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BowTongLingClientProto_descriptor_,
      BowTongLingClientProto::default_instance_,
      BowTongLingClientProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowTongLingClientProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowTongLingClientProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BowTongLingClientProto));
  FengYunDaoRankProto_descriptor_ = file->message_type(6);
  static const int FengYunDaoRankProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto, rank_),
  };
  FengYunDaoRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FengYunDaoRankProto_descriptor_,
      FengYunDaoRankProto::default_instance_,
      FengYunDaoRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FengYunDaoRankProto));
  FengYunDaoRankProto_FengYunDaoRankData_descriptor_ = FengYunDaoRankProto_descriptor_->nested_type(0);
  static const int FengYunDaoRankProto_FengYunDaoRankData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto_FengYunDaoRankData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto_FengYunDaoRankData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto_FengYunDaoRankData, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto_FengYunDaoRankData, usetime_),
  };
  FengYunDaoRankProto_FengYunDaoRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FengYunDaoRankProto_FengYunDaoRankData_descriptor_,
      FengYunDaoRankProto_FengYunDaoRankData::default_instance_,
      FengYunDaoRankProto_FengYunDaoRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto_FengYunDaoRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoRankProto_FengYunDaoRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FengYunDaoRankProto_FengYunDaoRankData));
  FengYunDaoProto_descriptor_ = file->message_type(7);
  static const int FengYunDaoProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoProto, dailytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoProto, dailybuytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoProto, firstindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoProto, curindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoProto, challengekeep_),
  };
  FengYunDaoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FengYunDaoProto_descriptor_,
      FengYunDaoProto::default_instance_,
      FengYunDaoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FengYunDaoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FengYunDaoProto));
  HeroYuYiGeProtos_descriptor_ = file->message_type(8);
  static const int HeroYuYiGeProtos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProtos, on_show_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProtos, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProtos, is_hide_),
  };
  HeroYuYiGeProtos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroYuYiGeProtos_descriptor_,
      HeroYuYiGeProtos::default_instance_,
      HeroYuYiGeProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProtos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProtos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroYuYiGeProtos));
  HeroYuYiGeProto_descriptor_ = file->message_type(9);
  static const int HeroYuYiGeProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, fashion_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, is_use_bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, blesslv_),
  };
  HeroYuYiGeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroYuYiGeProto_descriptor_,
      HeroYuYiGeProto::default_instance_,
      HeroYuYiGeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroYuYiGeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroYuYiGeProto));
  HeroWelfareCompensationProto_descriptor_ = file->message_type(10);
  static const int HeroWelfareCompensationProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto, welfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto, expiretime_),
  };
  HeroWelfareCompensationProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroWelfareCompensationProto_descriptor_,
      HeroWelfareCompensationProto::default_instance_,
      HeroWelfareCompensationProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroWelfareCompensationProto));
  HeroWelfareCompensationProto_WelfareCompensationProto_descriptor_ = HeroWelfareCompensationProto_descriptor_->nested_type(0);
  static const int HeroWelfareCompensationProto_WelfareCompensationProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto_WelfareCompensationProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto_WelfareCompensationProto, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto_WelfareCompensationProto, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto_WelfareCompensationProto, prize_),
  };
  HeroWelfareCompensationProto_WelfareCompensationProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroWelfareCompensationProto_WelfareCompensationProto_descriptor_,
      HeroWelfareCompensationProto_WelfareCompensationProto::default_instance_,
      HeroWelfareCompensationProto_WelfareCompensationProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto_WelfareCompensationProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWelfareCompensationProto_WelfareCompensationProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroWelfareCompensationProto_WelfareCompensationProto));
  LingYuProto_descriptor_ = file->message_type(11);
  static const int LingYuProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, typelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, usingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, huan_hua_max_use_count_extra_times_),
  };
  LingYuProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LingYuProto_descriptor_,
      LingYuProto::default_instance_,
      LingYuProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingYuProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LingYuProto));
  TongTianBaoJianTaskProto_descriptor_ = file->message_type(12);
  static const int TongTianBaoJianTaskProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianBaoJianTaskProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianBaoJianTaskProto, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianBaoJianTaskProto, goal_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianBaoJianTaskProto, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianBaoJianTaskProto, type_),
  };
  TongTianBaoJianTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TongTianBaoJianTaskProto_descriptor_,
      TongTianBaoJianTaskProto::default_instance_,
      TongTianBaoJianTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianBaoJianTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianBaoJianTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TongTianBaoJianTaskProto));
  DefenceDungeonStateClientProto_descriptor_ = file->message_type(13);
  static const int DefenceDungeonStateClientProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefenceDungeonStateClientProto, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefenceDungeonStateClientProto, defence_today_finished_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefenceDungeonStateClientProto, defence_history_max_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefenceDungeonStateClientProto, defence_collected_first_pass_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefenceDungeonStateClientProto, defence_collectable_prize_),
  };
  DefenceDungeonStateClientProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefenceDungeonStateClientProto_descriptor_,
      DefenceDungeonStateClientProto::default_instance_,
      DefenceDungeonStateClientProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefenceDungeonStateClientProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefenceDungeonStateClientProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefenceDungeonStateClientProto));
  HugeDataProto_descriptor_ = file->message_type(14);
  static const int HugeDataProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, total_login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, total_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, total_auction_yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, total_long_cheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, total_wu_shuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, enemy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, total_ling_di_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, huge_data_prize_),
  };
  HugeDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDataProto_descriptor_,
      HugeDataProto::default_instance_,
      HugeDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDataProto));
  NiDaoQianKunClient_descriptor_ = file->message_type(15);
  static const int NiDaoQianKunClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunClient, sprite_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunClient, total_use_count_),
  };
  NiDaoQianKunClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NiDaoQianKunClient_descriptor_,
      NiDaoQianKunClient::default_instance_,
      NiDaoQianKunClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NiDaoQianKunClient));
  MoBingProto_descriptor_ = file->message_type(16);
  static const int MoBingProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, mo_bing_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, mo_bing_equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, spell_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, has_collect_prize_today_),
  };
  MoBingProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoBingProto_descriptor_,
      MoBingProto::default_instance_,
      MoBingProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoBingProto));
  MoBingStatProto_descriptor_ = file->message_type(17);
  static const int MoBingStatProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingStatProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingStatProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingStatProto, spell_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingStatProto, spell_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingStatProto, bless_proto_),
  };
  MoBingStatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoBingStatProto_descriptor_,
      MoBingStatProto::default_instance_,
      MoBingStatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingStatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingStatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoBingStatProto));
  MoBingBlessProto_descriptor_ = file->message_type(18);
  static const int MoBingBlessProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingBlessProto, upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingBlessProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingBlessProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingBlessProto, bless_his_max_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingBlessProto, add_bless_clear_time_count_),
  };
  MoBingBlessProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoBingBlessProto_descriptor_,
      MoBingBlessProto::default_instance_,
      MoBingBlessProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingBlessProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoBingBlessProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoBingBlessProto));
  DaoShiProto_descriptor_ = file->message_type(19);
  static const int DaoShiProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, redis_big_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, has_applied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, is_dao_shi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, login_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, has_collected_login_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, can_collect_wu_shuang_city_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, has_collected_wu_shuang_city_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, can_collect_long_city_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, has_collected_long_city_prize_),
  };
  DaoShiProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DaoShiProto_descriptor_,
      DaoShiProto::default_instance_,
      DaoShiProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaoShiProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DaoShiProto));
  HeroJingJieProto_descriptor_ = file->message_type(20);
  static const int HeroJingJieProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieProto, jing_jie_),
  };
  HeroJingJieProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroJingJieProto_descriptor_,
      HeroJingJieProto::default_instance_,
      HeroJingJieProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroJingJieProto));
  HeroJingJieDataProto_descriptor_ = file->message_type(21);
  static const int HeroJingJieDataProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieDataProto, jing_jie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieDataProto, jing_jie_big_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieDataProto, jing_jie_small_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieDataProto, today_collect_long_yuan_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieDataProto, next_collect_long_yuan_time_),
  };
  HeroJingJieDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroJingJieDataProto_descriptor_,
      HeroJingJieDataProto::default_instance_,
      HeroJingJieDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroJingJieDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroJingJieDataProto));
  GuildDungeonCollectedPrizeProto_descriptor_ = file->message_type(22);
  static const int GuildDungeonCollectedPrizeProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonCollectedPrizeProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonCollectedPrizeProto, collected_prize_),
  };
  GuildDungeonCollectedPrizeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDungeonCollectedPrizeProto_descriptor_,
      GuildDungeonCollectedPrizeProto::default_instance_,
      GuildDungeonCollectedPrizeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonCollectedPrizeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonCollectedPrizeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDungeonCollectedPrizeProto));
  ShouCangProto_descriptor_ = file->message_type(23);
  static const int ShouCangProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShouCangProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShouCangProto, level_),
  };
  ShouCangProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShouCangProto_descriptor_,
      ShouCangProto::default_instance_,
      ShouCangProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShouCangProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShouCangProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShouCangProto));
  AchievementProto_descriptor_ = file->message_type(24);
  static const int AchievementProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementProto, achieved_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementProto, achieved_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementProto, progress_),
  };
  AchievementProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementProto_descriptor_,
      AchievementProto::default_instance_,
      AchievementProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementProto));
  AchievementInfoProto_descriptor_ = file->message_type(25);
  static const int AchievementInfoProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementInfoProto, achieved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementInfoProto, achievement_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementInfoProto, nickname_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementInfoProto, using_nickname_),
  };
  AchievementInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementInfoProto_descriptor_,
      AchievementInfoProto::default_instance_,
      AchievementInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementInfoProto));
  HeroSuperArmProto_descriptor_ = file->message_type(26);
  static const int HeroSuperArmProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, is_hide_huan_hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, huan_hua_max_use_count_extra_times_),
  };
  HeroSuperArmProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroSuperArmProto_descriptor_,
      HeroSuperArmProto::default_instance_,
      HeroSuperArmProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSuperArmProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroSuperArmProto));
  PetProto_descriptor_ = file->message_type(27);
  static const int PetProto_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, added_max_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, added_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, added_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, equipment_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, equipment_static_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, equipment_dynamic_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, relive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, use_zizhidan_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, use_meirenzhixin_count_),
  };
  PetProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetProto_descriptor_,
      PetProto::default_instance_,
      PetProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetProto));
  PetLevelProto_descriptor_ = file->message_type(28);
  static const int PetLevelProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, default_added_max_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, default_added_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, default_added_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, max_added_max_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, max_added_max_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, max_added_max_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, fixed_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, percent_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, static_hurt_),
  };
  PetLevelProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetLevelProto_descriptor_,
      PetLevelProto::default_instance_,
      PetLevelProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLevelProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetLevelProto));
  DemonProto_descriptor_ = file->message_type(29);
  static const int DemonProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, demon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, is_in_demon_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, next_can_turn_demon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, is_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, huan_hua_max_use_count_extra_times_),
  };
  DemonProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemonProto_descriptor_,
      DemonProto::default_instance_,
      DemonProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemonProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemonProto));
  TianZuiProto_descriptor_ = file->message_type(30);
  static const int TianZuiProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, is_hide_huan_hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, huan_hua_max_use_count_extra_times_),
  };
  TianZuiProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TianZuiProto_descriptor_,
      TianZuiProto::default_instance_,
      TianZuiProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianZuiProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TianZuiProto));
  TianJieProto_descriptor_ = file->message_type(31);
  static const int TianJieProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, is_hide_huan_hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, huan_hua_max_use_count_extra_times_),
  };
  TianJieProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TianJieProto_descriptor_,
      TianJieProto::default_instance_,
      TianJieProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianJieProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TianJieProto));
  BowProto_descriptor_ = file->message_type(32);
  static const int BowProto_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, bow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, arrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, arrow_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, arrow_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, is_hide_huan_hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, huan_hua_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, huan_hua_use_count_),
  };
  BowProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BowProto_descriptor_,
      BowProto::default_instance_,
      BowProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BowProto));
  CombineXinfaSpellProto_descriptor_ = file->message_type(33);
  static const int CombineXinfaSpellProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineXinfaSpellProto, active_spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineXinfaSpellProto, used_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineXinfaSpellProto, static_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineXinfaSpellProto, dynamic_data_),
  };
  CombineXinfaSpellProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineXinfaSpellProto_descriptor_,
      CombineXinfaSpellProto::default_instance_,
      CombineXinfaSpellProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineXinfaSpellProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineXinfaSpellProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineXinfaSpellProto));
  FightingAmountProto_descriptor_ = file->message_type(34);
  static const int FightingAmountProto_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, equipment_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, spell_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, gem_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, mount_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, bow_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, super_weapon_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, super_arm_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, super_weapon_xinfa_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, tianjie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, tianzui_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, shou_cang_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, demon_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, cloak_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, pet_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, yitianshenjue_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, moshi_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, qianqiudajie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, jing_jie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, marriage_weapon_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, marriage_goods_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, chi_huo_shen_gong_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, mo_bing_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, tian_xie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, wu_dao_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, shield_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, jiu_wei_hu_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, ling_yu_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, yu_yi_ge_fighting_amount_),
  };
  FightingAmountProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightingAmountProto_descriptor_,
      FightingAmountProto::default_instance_,
      FightingAmountProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightingAmountProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightingAmountProto));
  GoodsContainerProto_descriptor_ = file->message_type(35);
  static const int GoodsContainerProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, next_open_slot_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, unlock_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, goods_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, acc_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, init_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, acc_start_time_),
  };
  GoodsContainerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsContainerProto_descriptor_,
      GoodsContainerProto::default_instance_,
      GoodsContainerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsContainerProto));
  GoodsContainerUnlockProto_descriptor_ = file->message_type(36);
  static const int GoodsContainerUnlockProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, unlock_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, unlock_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, sprite_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, open_slot_count_),
  };
  GoodsContainerUnlockProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsContainerUnlockProto_descriptor_,
      GoodsContainerUnlockProto::default_instance_,
      GoodsContainerUnlockProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsContainerUnlockProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsContainerUnlockProto));
  HeroClearedProto_descriptor_ = file->message_type(37);
  static const int HeroClearedProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClearedProto, doing_daily_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClearedProto, doing_guild_task_),
  };
  HeroClearedProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroClearedProto_descriptor_,
      HeroClearedProto::default_instance_,
      HeroClearedProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClearedProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroClearedProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroClearedProto));
  ChallengeResultProto_descriptor_ = file->message_type(38);
  static const int ChallengeResultProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, equipment_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, total_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, spell_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, level_),
  };
  ChallengeResultProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeResultProto_descriptor_,
      ChallengeResultProto::default_instance_,
      ChallengeResultProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeResultProto));
  OtherHeroProto_descriptor_ = file->message_type(39);
  static const int OtherHeroProto_offsets_[68] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, total_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, equiped_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, equipment_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, equipment_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, upgrade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, max_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, real_air_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, max_stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, guild_li_lian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, super_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, cloak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, tian_zui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, tian_jie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, gems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, bow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, pk_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, equipment_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, spell_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, super_arm_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, gem_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, mount_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, bow_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, super_weapon_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, super_weapon_xinfa_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, tianjie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, tianzui_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, shou_cang_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, demon_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, cloak_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, pet_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, yitianshenjue_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, moshi_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, jing_jie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, qianqiudajie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, marriage_weapon_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, marriage_goods_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, chi_huo_shen_gong_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, mo_bing_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, tian_xie_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, wu_dao_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, yu_yi_ge_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, mo_fang_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, marriage_target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, marriage_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, marriage_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, shou_cang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, arena_fighting_team_name_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, shield_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, jian_dao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, bow_tong_ling_display_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, pet_tong_ling_display_id_),
  };
  OtherHeroProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherHeroProto_descriptor_,
      OtherHeroProto::default_instance_,
      OtherHeroProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherHeroProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherHeroProto));
  ClientRelation_descriptor_ = file->message_type(40);
  static const int ClientRelation_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, enemy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, enemy_kill_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, black_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, recent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, hide_my_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, hide_offline_relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, hide_big_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, show_enemy_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, forbid_been_added_as_friend_),
  };
  ClientRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRelation_descriptor_,
      ClientRelation::default_instance_,
      ClientRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRelation));
  SingleRelation_descriptor_ = file->message_type(41);
  static const int SingleRelation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, mood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, line_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, has_sell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, forbid_been_added_as_friend_),
  };
  SingleRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleRelation_descriptor_,
      SingleRelation::default_instance_,
      SingleRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleRelation));
  ClientRelationDetail_descriptor_ = file->message_type(42);
  static const int ClientRelationDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelationDetail, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelationDetail, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelationDetail, self_mood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelationDetail, been_added_friend_count_),
  };
  ClientRelationDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRelationDetail_descriptor_,
      ClientRelationDetail::default_instance_,
      ClientRelationDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelationDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRelationDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRelationDetail));
  ChatMessage_descriptor_ = file->message_type(43);
  static const int ChatMessage_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, speech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, chat_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, check_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, has_my_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, is_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, scene_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, scene_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, scene_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, is_ws_city_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, is_long_city_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, city_master_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, is_gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, platform_vip_),
  };
  ChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  ChatMessage_ChatGoods_descriptor_ = ChatMessage_descriptor_->nested_type(0);
  static const int ChatMessage_ChatGoods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage_ChatGoods, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage_ChatGoods, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage_ChatGoods, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage_ChatGoods, dynamic_info_),
  };
  ChatMessage_ChatGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_ChatGoods_descriptor_,
      ChatMessage_ChatGoods::default_instance_,
      ChatMessage_ChatGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage_ChatGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage_ChatGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage_ChatGoods));
  JianDaoProto_descriptor_ = file->message_type(44);
  static const int JianDaoProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianDaoProto, storeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianDaoProto, tianjianlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianDaoProto, mojianlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianDaoProto, feixianlv_),
  };
  JianDaoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JianDaoProto_descriptor_,
      JianDaoProto::default_instance_,
      JianDaoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianDaoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianDaoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JianDaoProto));
  TianXieProto_descriptor_ = file->message_type(45);
  static const int TianXieProto_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, tian_xie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, minor_slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, minor_slot_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, major_slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, major_slot_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, huan_hua_max_use_count_extra_times_),
  };
  TianXieProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TianXieProto_descriptor_,
      TianXieProto::default_instance_,
      TianXieProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TianXieProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TianXieProto));
  WuDaoProto_descriptor_ = file->message_type(46);
  static const int WuDaoProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, wu_dao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, mo_bing_equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, huan_hua_max_use_count_extra_times_),
  };
  WuDaoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WuDaoProto_descriptor_,
      WuDaoProto::default_instance_,
      WuDaoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WuDaoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WuDaoProto));
  CloakProto_descriptor_ = file->message_type(47);
  static const int CloakProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, cloak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, is_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, huan_hua_max_use_count_extra_times_),
  };
  CloakProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloakProto_descriptor_,
      CloakProto::default_instance_,
      CloakProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloakProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloakProto));
  YitianshenjueProto_descriptor_ = file->message_type(48);
  static const int YitianshenjueProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YitianshenjueProto, stat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YitianshenjueProto, current_add_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YitianshenjueProto, next_add_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YitianshenjueProto, current_cuilian_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YitianshenjueProto, equipment_cuilian_count_),
  };
  YitianshenjueProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YitianshenjueProto_descriptor_,
      YitianshenjueProto::default_instance_,
      YitianshenjueProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YitianshenjueProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YitianshenjueProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YitianshenjueProto));
  MountProto_descriptor_ = file->message_type(49);
  static const int MountProto_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, best_mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, riding_mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, is_ride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, added_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, equipment_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, equipment_static_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, equipment_dynamic_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, is_hide_huan_hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, huan_hua_max_use_count_extra_times_),
  };
  MountProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountProto_descriptor_,
      MountProto::default_instance_,
      MountProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountProto));
  MountAddedDataProto_descriptor_ = file->message_type(50);
  static const int MountAddedDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountAddedDataProto, added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountAddedDataProto, added_fighting_amount_),
  };
  MountAddedDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountAddedDataProto_descriptor_,
      MountAddedDataProto::default_instance_,
      MountAddedDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountAddedDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountAddedDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountAddedDataProto));
  SuperWeaponProto_descriptor_ = file->message_type(51);
  static const int SuperWeaponProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, upgrade_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, next_upgrade_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, has_unlock_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, has_unlock_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, has_unlock_magic_spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, not_saved_added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, has_unlock_weapon_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, weapon_gem_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, weapon_gem_binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, super_upgrade_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, super_upgrade_stat_),
  };
  SuperWeaponProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperWeaponProto_descriptor_,
      SuperWeaponProto::default_instance_,
      SuperWeaponProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperWeaponProto));
  StoryDungeonStatProto_descriptor_ = file->message_type(52);
  static const int StoryDungeonStatProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonStatProto, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonStatProto, is_finished_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonStatProto, fastest_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonStatProto, can_not_enter_today_),
  };
  StoryDungeonStatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoryDungeonStatProto_descriptor_,
      StoryDungeonStatProto::default_instance_,
      StoryDungeonStatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonStatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonStatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoryDungeonStatProto));
  StoryDungeonFinishStatProto_descriptor_ = file->message_type(53);
  static const int StoryDungeonFinishStatProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, dead_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, monster_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, total_time_faster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, score_s_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, vip_prize_),
  };
  StoryDungeonFinishStatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoryDungeonFinishStatProto_descriptor_,
      StoryDungeonFinishStatProto::default_instance_,
      StoryDungeonFinishStatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonFinishStatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoryDungeonFinishStatProto));
  StoryDungeonCollectablePrizeProto_descriptor_ = file->message_type(54);
  static const int StoryDungeonCollectablePrizeProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, no_score_s_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, has_first_pass_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, randomed_s_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, randomed_vip_prize_),
  };
  StoryDungeonCollectablePrizeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoryDungeonCollectablePrizeProto_descriptor_,
      StoryDungeonCollectablePrizeProto::default_instance_,
      StoryDungeonCollectablePrizeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryDungeonCollectablePrizeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoryDungeonCollectablePrizeProto));
  HeroMarriageProto_descriptor_ = file->message_type(55);
  static const int HeroMarriageProto_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, weapon_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, hao_gan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, marriage_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, marriage_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, hao_gan_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, target_race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, lao_chu_nv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, wedding_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, couple_dungeon_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, huanhua_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, is_hide_huan_hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, huan_hua_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, daily_prize_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, collectable_gift_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, collectable_gift_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, next_check_both_online_add_hao_gan_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, total_hao_gan_),
  };
  HeroMarriageProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroMarriageProto_descriptor_,
      HeroMarriageProto::default_instance_,
      HeroMarriageProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMarriageProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroMarriageProto));
  MarriageStorageProto_descriptor_ = file->message_type(56);
  static const int MarriageStorageProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageProto, pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageProto, goods_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageProto, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageProto, log_),
  };
  MarriageStorageProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarriageStorageProto_descriptor_,
      MarriageStorageProto::default_instance_,
      MarriageStorageProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarriageStorageProto));
  MarriageStorageLogProto_descriptor_ = file->message_type(57);
  static const int MarriageStorageLogProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageLogProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageLogProto, hero_name_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageLogProto, goods_name_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageLogProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageLogProto, type_),
  };
  MarriageStorageLogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarriageStorageLogProto_descriptor_,
      MarriageStorageLogProto::default_instance_,
      MarriageStorageLogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageLogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageStorageLogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarriageStorageLogProto));
  HeroLoveProto_descriptor_ = file->message_type(58);
  static const int HeroLoveProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, daily_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, exchange_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, exchange_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, exchange_today_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, online_collected_max_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, online_today_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, online_minutes_),
  };
  HeroLoveProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroLoveProto_descriptor_,
      HeroLoveProto::default_instance_,
      HeroLoveProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroLoveProto));
  HeroLoveExchangeProto_descriptor_ = file->message_type(59);
  static const int HeroLoveExchangeProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveExchangeProto, exchange_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveExchangeProto, exchange_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveExchangeProto, exchange_today_count_),
  };
  HeroLoveExchangeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroLoveExchangeProto_descriptor_,
      HeroLoveExchangeProto::default_instance_,
      HeroLoveExchangeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveExchangeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroLoveExchangeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroLoveExchangeProto));
  ArenaFightingTeamRankTeamInfoProto_descriptor_ = file->message_type(60);
  static const int ArenaFightingTeamRankTeamInfoProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankTeamInfoProto, member_info_),
  };
  ArenaFightingTeamRankTeamInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaFightingTeamRankTeamInfoProto_descriptor_,
      ArenaFightingTeamRankTeamInfoProto::default_instance_,
      ArenaFightingTeamRankTeamInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankTeamInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankTeamInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaFightingTeamRankTeamInfoProto));
  ArenaFightingTeamRankMemberInfoProto_descriptor_ = file->message_type(61);
  static const int ArenaFightingTeamRankMemberInfoProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankMemberInfoProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankMemberInfoProto, hero_name_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankMemberInfoProto, hero_race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankMemberInfoProto, hero_fighting_amount_),
  };
  ArenaFightingTeamRankMemberInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaFightingTeamRankMemberInfoProto_descriptor_,
      ArenaFightingTeamRankMemberInfoProto::default_instance_,
      ArenaFightingTeamRankMemberInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankMemberInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaFightingTeamRankMemberInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaFightingTeamRankMemberInfoProto));
  ClientYuanbaoCostLogProto_descriptor_ = file->message_type(62);
  static const int ClientYuanbaoCostLogProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientYuanbaoCostLogProto, single_yuanbao_cost_logs_),
  };
  ClientYuanbaoCostLogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientYuanbaoCostLogProto_descriptor_,
      ClientYuanbaoCostLogProto::default_instance_,
      ClientYuanbaoCostLogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientYuanbaoCostLogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientYuanbaoCostLogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientYuanbaoCostLogProto));
  ClientSingleYuanbaoCostLogProto_descriptor_ = file->message_type(63);
  static const int ClientSingleYuanbaoCostLogProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleYuanbaoCostLogProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleYuanbaoCostLogProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleYuanbaoCostLogProto, yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleYuanbaoCostLogProto, bindyuanbao_),
  };
  ClientSingleYuanbaoCostLogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSingleYuanbaoCostLogProto_descriptor_,
      ClientSingleYuanbaoCostLogProto::default_instance_,
      ClientSingleYuanbaoCostLogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleYuanbaoCostLogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleYuanbaoCostLogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSingleYuanbaoCostLogProto));
  HeroAnniversaryProto_descriptor_ = file->message_type(64);
  static const int HeroAnniversaryProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryProto, cake_today_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryProto, daily_normal_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryProto, daily_vip_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryProto, recharge_yuanbao_),
  };
  HeroAnniversaryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroAnniversaryProto_descriptor_,
      HeroAnniversaryProto::default_instance_,
      HeroAnniversaryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroAnniversaryProto));
  HeroAnniversaryTaskProto_descriptor_ = file->message_type(65);
  static const int HeroAnniversaryTaskProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryTaskProto, current_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryTaskProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryTaskProto, final_prize_collected_),
  };
  HeroAnniversaryTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroAnniversaryTaskProto_descriptor_,
      HeroAnniversaryTaskProto::default_instance_,
      HeroAnniversaryTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAnniversaryTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroAnniversaryTaskProto));
  SingleHeroAnniversaryDailyTaskProto_descriptor_ = file->message_type(66);
  static const int SingleHeroAnniversaryDailyTaskProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHeroAnniversaryDailyTaskProto, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHeroAnniversaryDailyTaskProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHeroAnniversaryDailyTaskProto, is_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHeroAnniversaryDailyTaskProto, prize_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHeroAnniversaryDailyTaskProto, refresh_times_),
  };
  SingleHeroAnniversaryDailyTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleHeroAnniversaryDailyTaskProto_descriptor_,
      SingleHeroAnniversaryDailyTaskProto::default_instance_,
      SingleHeroAnniversaryDailyTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHeroAnniversaryDailyTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHeroAnniversaryDailyTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleHeroAnniversaryDailyTaskProto));
  ShieldProto_descriptor_ = file->message_type(67);
  static const int ShieldProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldProto, shields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldProto, current_id_),
  };
  ShieldProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShieldProto_descriptor_,
      ShieldProto::default_instance_,
      ShieldProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShieldProto));
  SingleShieldProto_descriptor_ = file->message_type(68);
  static const int SingleShieldProto_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, level_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, special_spell_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, special_spell_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, normal_spell_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, normal_spells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, equipment_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, equipment_static_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, equipment_dynamic_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, qian_neng_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, huan_hua_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, bless_amount_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, is_super_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, is_super_model_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, nickname_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, qian_neng_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, huan_hua_extra_max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, qian_neng_max_use_count_extra_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, huan_hua_max_use_count_extra_times_),
  };
  SingleShieldProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleShieldProto_descriptor_,
      SingleShieldProto::default_instance_,
      SingleShieldProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleShieldProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleShieldProto));
  HeroBossCard_descriptor_ = file->message_type(69);
  static const int HeroBossCard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, today_call_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, current_card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, current_calling_card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, dungeon_expired_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, guild_boss_card_kill_prize_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, guild_boss_card_call_prize_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, reset_week_of_year_),
  };
  HeroBossCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroBossCard_descriptor_,
      HeroBossCard::default_instance_,
      HeroBossCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBossCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroBossCard));
  HaidiProto_descriptor_ = file->message_type(70);
  static const int HaidiProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto, today_free_ticket_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto, bishuidan_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto, is_new_version_),
  };
  HaidiProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaidiProto_descriptor_,
      HaidiProto::default_instance_,
      HaidiProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaidiProto));
  HaidiProto_HaidiLeftTime_descriptor_ = HaidiProto_descriptor_->nested_type(0);
  static const int HaidiProto_HaidiLeftTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto_HaidiLeftTime, haidilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto_HaidiLeftTime, lefttime_),
  };
  HaidiProto_HaidiLeftTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaidiProto_HaidiLeftTime_descriptor_,
      HaidiProto_HaidiLeftTime::default_instance_,
      HaidiProto_HaidiLeftTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto_HaidiLeftTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiProto_HaidiLeftTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaidiProto_HaidiLeftTime));
  HaidiInfoProto_descriptor_ = file->message_type(71);
  static const int HaidiInfoProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto, today_free_ticket_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto, bishuidan_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto, overtime_),
  };
  HaidiInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaidiInfoProto_descriptor_,
      HaidiInfoProto::default_instance_,
      HaidiInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaidiInfoProto));
  HaidiInfoProto_HaidiOverTime_descriptor_ = HaidiInfoProto_descriptor_->nested_type(0);
  static const int HaidiInfoProto_HaidiOverTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto_HaidiOverTime, haidilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto_HaidiOverTime, overtime_),
  };
  HaidiInfoProto_HaidiOverTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaidiInfoProto_HaidiOverTime_descriptor_,
      HaidiInfoProto_HaidiOverTime::default_instance_,
      HaidiInfoProto_HaidiOverTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto_HaidiOverTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaidiInfoProto_HaidiOverTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaidiInfoProto_HaidiOverTime));
  HeroComebackProto_descriptor_ = file->message_type(72);
  static const int HeroComebackProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroComebackProto, is_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroComebackProto, is_vip_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroComebackProto, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroComebackProto, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroComebackProto, last_logout_time_before_start_),
  };
  HeroComebackProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroComebackProto_descriptor_,
      HeroComebackProto::default_instance_,
      HeroComebackProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroComebackProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroComebackProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroComebackProto));
  LoginType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hero_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroProto_descriptor_, &HeroProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoFangClientProto_descriptor_, &MoFangClientProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetTongLingClientProto_descriptor_, &PetTongLingClientProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetTongLingGiftSpellClientProto_descriptor_, &PetTongLingGiftSpellClientProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetTongLingSingleSpellClientProto_descriptor_, &PetTongLingSingleSpellClientProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BowTongLingClientProto_descriptor_, &BowTongLingClientProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FengYunDaoRankProto_descriptor_, &FengYunDaoRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FengYunDaoRankProto_FengYunDaoRankData_descriptor_, &FengYunDaoRankProto_FengYunDaoRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FengYunDaoProto_descriptor_, &FengYunDaoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroYuYiGeProtos_descriptor_, &HeroYuYiGeProtos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroYuYiGeProto_descriptor_, &HeroYuYiGeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroWelfareCompensationProto_descriptor_, &HeroWelfareCompensationProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroWelfareCompensationProto_WelfareCompensationProto_descriptor_, &HeroWelfareCompensationProto_WelfareCompensationProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LingYuProto_descriptor_, &LingYuProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TongTianBaoJianTaskProto_descriptor_, &TongTianBaoJianTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefenceDungeonStateClientProto_descriptor_, &DefenceDungeonStateClientProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDataProto_descriptor_, &HugeDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NiDaoQianKunClient_descriptor_, &NiDaoQianKunClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoBingProto_descriptor_, &MoBingProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoBingStatProto_descriptor_, &MoBingStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoBingBlessProto_descriptor_, &MoBingBlessProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DaoShiProto_descriptor_, &DaoShiProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroJingJieProto_descriptor_, &HeroJingJieProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroJingJieDataProto_descriptor_, &HeroJingJieDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDungeonCollectedPrizeProto_descriptor_, &GuildDungeonCollectedPrizeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShouCangProto_descriptor_, &ShouCangProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementProto_descriptor_, &AchievementProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementInfoProto_descriptor_, &AchievementInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroSuperArmProto_descriptor_, &HeroSuperArmProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetProto_descriptor_, &PetProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetLevelProto_descriptor_, &PetLevelProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemonProto_descriptor_, &DemonProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TianZuiProto_descriptor_, &TianZuiProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TianJieProto_descriptor_, &TianJieProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BowProto_descriptor_, &BowProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineXinfaSpellProto_descriptor_, &CombineXinfaSpellProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightingAmountProto_descriptor_, &FightingAmountProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsContainerProto_descriptor_, &GoodsContainerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsContainerUnlockProto_descriptor_, &GoodsContainerUnlockProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroClearedProto_descriptor_, &HeroClearedProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeResultProto_descriptor_, &ChallengeResultProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherHeroProto_descriptor_, &OtherHeroProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRelation_descriptor_, &ClientRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleRelation_descriptor_, &SingleRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRelationDetail_descriptor_, &ClientRelationDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_ChatGoods_descriptor_, &ChatMessage_ChatGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JianDaoProto_descriptor_, &JianDaoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TianXieProto_descriptor_, &TianXieProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WuDaoProto_descriptor_, &WuDaoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloakProto_descriptor_, &CloakProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YitianshenjueProto_descriptor_, &YitianshenjueProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountProto_descriptor_, &MountProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountAddedDataProto_descriptor_, &MountAddedDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperWeaponProto_descriptor_, &SuperWeaponProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoryDungeonStatProto_descriptor_, &StoryDungeonStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoryDungeonFinishStatProto_descriptor_, &StoryDungeonFinishStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoryDungeonCollectablePrizeProto_descriptor_, &StoryDungeonCollectablePrizeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroMarriageProto_descriptor_, &HeroMarriageProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarriageStorageProto_descriptor_, &MarriageStorageProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarriageStorageLogProto_descriptor_, &MarriageStorageLogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroLoveProto_descriptor_, &HeroLoveProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroLoveExchangeProto_descriptor_, &HeroLoveExchangeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaFightingTeamRankTeamInfoProto_descriptor_, &ArenaFightingTeamRankTeamInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaFightingTeamRankMemberInfoProto_descriptor_, &ArenaFightingTeamRankMemberInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientYuanbaoCostLogProto_descriptor_, &ClientYuanbaoCostLogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSingleYuanbaoCostLogProto_descriptor_, &ClientSingleYuanbaoCostLogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroAnniversaryProto_descriptor_, &HeroAnniversaryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroAnniversaryTaskProto_descriptor_, &HeroAnniversaryTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleHeroAnniversaryDailyTaskProto_descriptor_, &SingleHeroAnniversaryDailyTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShieldProto_descriptor_, &ShieldProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleShieldProto_descriptor_, &SingleShieldProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroBossCard_descriptor_, &HeroBossCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaidiProto_descriptor_, &HaidiProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaidiProto_HaidiLeftTime_descriptor_, &HaidiProto_HaidiLeftTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaidiInfoProto_descriptor_, &HaidiInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaidiInfoProto_HaidiOverTime_descriptor_, &HaidiInfoProto_HaidiOverTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroComebackProto_descriptor_, &HeroComebackProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hero_2eproto() {
  delete HeroProto::default_instance_;
  delete HeroProto_reflection_;
  delete MoFangClientProto::default_instance_;
  delete MoFangClientProto_reflection_;
  delete PetTongLingClientProto::default_instance_;
  delete PetTongLingClientProto_reflection_;
  delete PetTongLingGiftSpellClientProto::default_instance_;
  delete PetTongLingGiftSpellClientProto_reflection_;
  delete PetTongLingSingleSpellClientProto::default_instance_;
  delete PetTongLingSingleSpellClientProto_reflection_;
  delete BowTongLingClientProto::default_instance_;
  delete BowTongLingClientProto_reflection_;
  delete FengYunDaoRankProto::default_instance_;
  delete FengYunDaoRankProto_reflection_;
  delete FengYunDaoRankProto_FengYunDaoRankData::default_instance_;
  delete FengYunDaoRankProto_FengYunDaoRankData_reflection_;
  delete FengYunDaoProto::default_instance_;
  delete FengYunDaoProto_reflection_;
  delete HeroYuYiGeProtos::default_instance_;
  delete HeroYuYiGeProtos_reflection_;
  delete HeroYuYiGeProto::default_instance_;
  delete HeroYuYiGeProto_reflection_;
  delete HeroWelfareCompensationProto::default_instance_;
  delete HeroWelfareCompensationProto_reflection_;
  delete HeroWelfareCompensationProto_WelfareCompensationProto::default_instance_;
  delete HeroWelfareCompensationProto_WelfareCompensationProto_reflection_;
  delete LingYuProto::default_instance_;
  delete LingYuProto_reflection_;
  delete TongTianBaoJianTaskProto::default_instance_;
  delete TongTianBaoJianTaskProto_reflection_;
  delete DefenceDungeonStateClientProto::default_instance_;
  delete DefenceDungeonStateClientProto_reflection_;
  delete HugeDataProto::default_instance_;
  delete HugeDataProto_reflection_;
  delete NiDaoQianKunClient::default_instance_;
  delete NiDaoQianKunClient_reflection_;
  delete MoBingProto::default_instance_;
  delete MoBingProto_reflection_;
  delete MoBingStatProto::default_instance_;
  delete MoBingStatProto_reflection_;
  delete MoBingBlessProto::default_instance_;
  delete MoBingBlessProto_reflection_;
  delete DaoShiProto::default_instance_;
  delete DaoShiProto_reflection_;
  delete HeroJingJieProto::default_instance_;
  delete HeroJingJieProto_reflection_;
  delete HeroJingJieDataProto::default_instance_;
  delete HeroJingJieDataProto_reflection_;
  delete GuildDungeonCollectedPrizeProto::default_instance_;
  delete GuildDungeonCollectedPrizeProto_reflection_;
  delete ShouCangProto::default_instance_;
  delete ShouCangProto_reflection_;
  delete AchievementProto::default_instance_;
  delete AchievementProto_reflection_;
  delete AchievementInfoProto::default_instance_;
  delete AchievementInfoProto_reflection_;
  delete HeroSuperArmProto::default_instance_;
  delete HeroSuperArmProto_reflection_;
  delete PetProto::default_instance_;
  delete PetProto_reflection_;
  delete PetLevelProto::default_instance_;
  delete PetLevelProto_reflection_;
  delete DemonProto::default_instance_;
  delete DemonProto_reflection_;
  delete TianZuiProto::default_instance_;
  delete TianZuiProto_reflection_;
  delete TianJieProto::default_instance_;
  delete TianJieProto_reflection_;
  delete BowProto::default_instance_;
  delete BowProto_reflection_;
  delete CombineXinfaSpellProto::default_instance_;
  delete CombineXinfaSpellProto_reflection_;
  delete FightingAmountProto::default_instance_;
  delete FightingAmountProto_reflection_;
  delete GoodsContainerProto::default_instance_;
  delete GoodsContainerProto_reflection_;
  delete GoodsContainerUnlockProto::default_instance_;
  delete GoodsContainerUnlockProto_reflection_;
  delete HeroClearedProto::default_instance_;
  delete HeroClearedProto_reflection_;
  delete ChallengeResultProto::default_instance_;
  delete ChallengeResultProto_reflection_;
  delete OtherHeroProto::default_instance_;
  delete OtherHeroProto_reflection_;
  delete ClientRelation::default_instance_;
  delete ClientRelation_reflection_;
  delete SingleRelation::default_instance_;
  delete SingleRelation_reflection_;
  delete ClientRelationDetail::default_instance_;
  delete ClientRelationDetail_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ChatMessage_ChatGoods::default_instance_;
  delete ChatMessage_ChatGoods_reflection_;
  delete JianDaoProto::default_instance_;
  delete JianDaoProto_reflection_;
  delete TianXieProto::default_instance_;
  delete TianXieProto_reflection_;
  delete WuDaoProto::default_instance_;
  delete WuDaoProto_reflection_;
  delete CloakProto::default_instance_;
  delete CloakProto_reflection_;
  delete YitianshenjueProto::default_instance_;
  delete YitianshenjueProto_reflection_;
  delete MountProto::default_instance_;
  delete MountProto_reflection_;
  delete MountAddedDataProto::default_instance_;
  delete MountAddedDataProto_reflection_;
  delete SuperWeaponProto::default_instance_;
  delete SuperWeaponProto_reflection_;
  delete StoryDungeonStatProto::default_instance_;
  delete StoryDungeonStatProto_reflection_;
  delete StoryDungeonFinishStatProto::default_instance_;
  delete StoryDungeonFinishStatProto_reflection_;
  delete StoryDungeonCollectablePrizeProto::default_instance_;
  delete StoryDungeonCollectablePrizeProto_reflection_;
  delete HeroMarriageProto::default_instance_;
  delete HeroMarriageProto_reflection_;
  delete MarriageStorageProto::default_instance_;
  delete MarriageStorageProto_reflection_;
  delete MarriageStorageLogProto::default_instance_;
  delete MarriageStorageLogProto_reflection_;
  delete HeroLoveProto::default_instance_;
  delete HeroLoveProto_reflection_;
  delete HeroLoveExchangeProto::default_instance_;
  delete HeroLoveExchangeProto_reflection_;
  delete ArenaFightingTeamRankTeamInfoProto::default_instance_;
  delete ArenaFightingTeamRankTeamInfoProto_reflection_;
  delete ArenaFightingTeamRankMemberInfoProto::default_instance_;
  delete ArenaFightingTeamRankMemberInfoProto_reflection_;
  delete ClientYuanbaoCostLogProto::default_instance_;
  delete ClientYuanbaoCostLogProto_reflection_;
  delete ClientSingleYuanbaoCostLogProto::default_instance_;
  delete ClientSingleYuanbaoCostLogProto_reflection_;
  delete HeroAnniversaryProto::default_instance_;
  delete HeroAnniversaryProto_reflection_;
  delete HeroAnniversaryTaskProto::default_instance_;
  delete HeroAnniversaryTaskProto_reflection_;
  delete SingleHeroAnniversaryDailyTaskProto::default_instance_;
  delete SingleHeroAnniversaryDailyTaskProto_reflection_;
  delete ShieldProto::default_instance_;
  delete ShieldProto_reflection_;
  delete SingleShieldProto::default_instance_;
  delete SingleShieldProto_reflection_;
  delete HeroBossCard::default_instance_;
  delete HeroBossCard_reflection_;
  delete HaidiProto::default_instance_;
  delete HaidiProto_reflection_;
  delete HaidiProto_HaidiLeftTime::default_instance_;
  delete HaidiProto_HaidiLeftTime_reflection_;
  delete HaidiInfoProto::default_instance_;
  delete HaidiInfoProto_reflection_;
  delete HaidiInfoProto_HaidiOverTime::default_instance_;
  delete HaidiInfoProto_HaidiOverTime_reflection_;
  delete HeroComebackProto::default_instance_;
  delete HeroComebackProto_reflection_;
}

void protobuf_AddDesc_hero_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::app::message::protobuf_AddDesc_config_2eproto();
  ::app::message::protobuf_AddDesc_spritestat_2eproto();
  ::app::message::protobuf_AddDesc_task_2eproto();
  ::app::message::protobuf_AddDesc_prize_2eproto();
  ::app::message::protobuf_AddDesc_dungeon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhero.proto\022\013app.message\032\013goods.proto\032\014"
    "config.proto\032\020spritestat.proto\032\ntask.pro"
    "to\032\013prize.proto\032\rdungeon.proto\"\307V\n\tHeroP"
    "roto\022\r\n\005level\030\001 \001(\005\022\014\n\004race\030\002 \001(\005\022\017\n\007sce"
    "neID\030\003 \001(\005\022\017\n\007yuanbao\030\004 \001(\005\022\r\n\005lijin\030\005 \001"
    "(\005\022\r\n\005money\030\006 \001(\005\022/\n\005depot\030\007 \001(\0132 .app.m"
    "essage.GoodsContainerProto\022\020\n\010real_air\030\t"
    " \001(\005\022\027\n\017fighting_amount\030\n \001(\005\0220\n\ntotal_s"
    "tat\030\013 \001(\0132\034.app.message.SpriteStatProto\022"
    "\023\n\013equiped_pos\030\014 \003(\005\0228\n\017equipment_datas\030"
    "\r \003(\0132\037.app.message.EquipmentDataProto\022/"
    "\n\nequipments\030\016 \003(\0132\033.app.message.Equipme"
    "ntProto\022\013\n\003exp\030\017 \001(\003\022\023\n\013upgrade_exp\030\020 \001("
    "\003\022\033\n\023equipment_resources\030\021 \001(\003\022\023\n\013has_st"
    "orage\030\022 \001(\010\022\034\n\024buy_back_goods_datas\030\023 \003("
    "\014\022\033\n\023buy_back_goods_list\030\024 \003(\014\022%\n\027team_a"
    "uto_accept_invite\030\025 \001(\010:\004true\022&\n\030team_au"
    "to_accept_request\030\026 \001(\010:\004true\022(\n team_fo"
    "rbid_other_invite_me_join\030s \001(\010\022 \n\030trade"
    "_auto_reject_invite\030\027 \001(\010\022(\n\004task\030\030 \001(\0132"
    "\032.app.message.HeroTaskProto\022\034\n\024client_on"
    "ly_config_1\030\031 \001(\003\022\037\n\027client_only_int_con"
    "figs\030\032 \003(\005\022\022\n\nguild_name\030\033 \001(\014\022 \n\030guild_"
    "auto_accept_invite\030\034 \001(\010\022)\n!guild_forbid"
    "_other_invite_me_join\030\035 \001(\010\022\030\n\020guild_fla"
    "g_level\0308 \001(\005\022\025\n\rguild_li_lian\030\036 \001(\005\022\032\n\022"
    "guild_contribution\030\037 \001(\005\022\031\n\021friend_guild"
    "_name\030  \003(\014\022\030\n\020enemy_guild_name\030! \003(\014\022\031\n"
    "\021is_ws_city_master\0309 \001(\010\022\033\n\023is_long_city"
    "_master\030: \001(\010\022\027\n\017is_guild_leader\030; \001(\010\022\033"
    "\n\023is_territory_leader\030< \001(\010\022 \n\030accumulat"
    "ed_offline_time\030\" \001(\003\022\017\n\007vip_exp\030# \001(\005\022\?"
    "\n\023story_dungeon_proto\030$ \003(\0132\".app.messag"
    "e.StoryDungeonStatProto\022]\n%story_dungeon"
    "_collectable_prize_proto\030% \003(\0132..app.mes"
    "sage.StoryDungeonCollectablePrizeProto\022\034"
    "\n\024auto_finish_story_id\030& \001(\005\022\'\n\037auto_fin"
    "ish_story_complete_time\030\' \001(\003\022.\n&finishe"
    "d_challenge_dungeon_sequence_id\030( \001(\005\022\037\n"
    "\027finished_vip_dungeon_id\030. \003(\005\022(\n\034defenc"
    "e_today_finished_batch\030) \001(\005B\002\030\001\022%\n\031defe"
    "nce_history_max_batch\030* \001(\005B\002\030\001\022!\n\031defen"
    "ce_today_reset_count\030, \001(\005\022.\n\"defence_co"
    "llected_first_pass_prize\030- \001(\005B\002\030\001\022%\n\031de"
    "fence_collectable_prize\030/ \003(\014B\002\030\001\022\026\n\016sou"
    "_shen_point\0300 \001(\005\022 \n\030sou_shen_today_pass"
    "ed_id\0301 \003(\005\022\037\n\027sou_shen_life_passed_id\0302"
    " \003(\005\022$\n\034ling_yun_today_entered_times\0303 \001"
    "(\005\022$\n\033ling_yun_today_finish_state\030\202\001 \001(\005"
    "\022U\n\035group_collectable_prize_proto\0304 \003(\0132"
    "..app.message.GroupDungeonCollectablePri"
    "zeProto\022#\n\033long_mai_today_first_passed\0305"
    " \001(\010\022\"\n\032wu_jue_today_entered_times\0306 \001(\005"
    "\022\?\n6wu_jue_today_collected_first_try_tra"
    "nsport_prize_times\030\362\001 \001(\005\0220\n(territory_t"
    "oday_collected_prize_scene_id\0307 \003(\005\022\035\n\025d"
    "aily_activity_result\030D \003(\005\022\022\n\nsheng_wang"
    "\030E \001(\005\022\027\n\017sheng_wang_task\030F \003(\005\022\033\n\023use_f"
    "ree_chat_times\030G \001(\005\022\014\n\004gems\030H \003(\005\022\"\n\003bo"
    "w\030I \001(\0132\025.app.message.BowProto\022\024\n\014admire"
    "d_hero\030J \003(\003\022\030\n\020last_logout_time\030K \001(\003\022\033"
    "\n\023collected_vip_prize\030L \001(\005\022*\n\"next_coll"
    "ect_vip_weekly_prize_time\030M \001(\003\022\024\n\014using"
    "_weapon\030N \001(\005\0223\n\014super_weapon\030O \003(\0132\035.ap"
    "p.message.SuperWeaponProto\022F\n\037super_weap"
    "on_max_level_add_stat\030\354\001 \001(\0132\034.app.messa"
    "ge.SpriteStatProto\022\031\n\020has_magic_weapon\030\252"
    "\002 \001(\010\0227\n\020magic_added_stat\030\355\001 \001(\0132\034.app.m"
    "essage.SpriteStatProto\022A\n\032magic_not_save"
    "d_added_stat\030\356\001 \001(\0132\034.app.message.Sprite"
    "StatProto\022$\n\033has_unlock_magic_weapon_gem"
    "\030\357\001 \003(\010\022\037\n\026magic_weapon_gem_level\030\360\001 \003(\005"
    "\022 \n\027magic_weapon_gem_binded\030\361\001 \003(\010\022\024\n\014di"
    "vine_times\030P \001(\005\022\031\n\rdivine_amount\030Q \001(\005B"
    "\002\030\001\022\"\n\032divine_storage_goods_count\030R \001(\005\022"
    "&\n\005mount\030S \001(\0132\027.app.message.MountProto\022"
    "\017\n\007lottery\030T \001(\005\022\035\n\025daily_online_acc_tim"
    "e\030U \001(\003\022\014\n\004sign\030V \001(\005\022\022\n\nsign_prize\030W \001("
    "\005\022\034\n\024replenish_sign_times\030X \001(\005\022\"\n\032next_"
    "reduce_pk_amount_time\030Y \001(\003\022\021\n\tpk_amount"
    "\030Z \001(\005\022!\n\031relive_protected_end_time\030[ \001("
    "\003\022\030\n\020total_sign_times\030\\ \001(\005\022\036\n\026total_rec"
    "harge_yuanbao\030] \001(\005\022!\n\031lottery_goods_sta"
    "tic_data\030^ \003(\014\022\"\n\032lottery_goods_dynamic_"
    "data\030_ \003(\014\022\"\n\003pet\030` \001(\0132\025.app.message.Pe"
    "tProto\022\024\n\014has_recharge\030a \001(\010\022\"\n\031spell_ad"
    "ded_upgrade_level\030\220\001 \001(\005\022;\n\016combine_spel"
    "ls\030b \003(\0132#.app.message.CombineXinfaSpell"
    "Proto\022/\n\rpassive_spell\030c \003(\0132\030.app.messa"
    "ge.ActiveSpell\0222\n\014active_spell\030d \003(\0132\030.a"
    "pp.message.ActiveSpellB\002\030\001\022#\n\027active_spe"
    "ll_used_times\030e \003(\005B\002\030\001\022\033\n\023shortcut_spel"
    "l_type\030f \003(\005\022\032\n\022shortcut_spell_pos\030g \003(\005"
    "\022\031\n\021default_spell_pos\030h \001(\005\022\023\n\013jump_shie"
    "ld\030i \001(\005\022\017\n\007stamina\030j \001(\005\0224\n\017client_rela"
    "tion\030k \001(\0132\033.app.message.ClientRelation\022"
    "\021\n\tfunc_bits\030l \003(\005\022\023\n\013rage_amount\030m \001(\005\022"
    "\023\n\013create_time\030n \001(\003\022*\n\"is_collect_local"
    "_login_first_prize\030o \001(\010\022*\n\"is_collect_l"
    "ocal_login_daily_prize\030p \001(\010\022 \n\024phoenix_"
    "refine_times\030q \001(\005B\002\030\001\022\035\n\025is_cross_singl"
    "e_story\030r \001(\010\022\"\n\032phoenix_money_refine_ti"
    "mes\030t \001(\005\022\"\n\032phoenix_lijin_refine_times\030"
    "u \001(\005\022$\n\034phoenix_yuanbao_refine_times\030v "
    "\001(\005\022\021\n\tlogin_day\030w \001(\005\022#\n\033tu_long_today_"
    "entered_times\030x \001(\005\022\023\n\013melt_amount\030y \001(\005"
    "\022%\n\035challenge_dungeon_daily_times\030z \001(\005\022"
    "&\n\036challenge_dungeon_assist_times\030{ \001(\005\022"
    "#\n\033challenge_dungeon_use_times\030| \003(\005\022\r\n\005"
    "honor\030} \001(\005\022+\n\010tian_zui\030~ \001(\0132\031.app.mess"
    "age.TianZuiProto\022+\n\010tian_jie\030\177 \001(\0132\031.app"
    ".message.TianJieProto\022%\n\034first_recharge_"
    "collect_index\030\201\001 \001(\005\022\031\n\020login_prize_info"
    "\030\203\001 \001(\005\022\"\n\031invest_upgrade_bank_money\030\204\001 "
    "\001(\005\022#\n\032collect_upgrade_bank_level\030\205\001 \003(\005"
    "\022#\n\032collect_upgrade_bank_lijin\030\206\001 \003(\005\022\"\n"
    "\031invest_monthly_bank_money\030\207\001 \001(\005\022!\n\030inv"
    "est_monthly_bank_time\030\210\001 \001(\003\022\'\n\036monthly_"
    "bank_prev_collect_time\030\211\001 \001(\003\022(\n\037monthly"
    "_bank_prev_collect_time2\030\212\001 \001(\003\022\"\n\031month"
    "ly_bank_online_lijin\030\213\001 \001(\005\022 \n\027monthly_b"
    "ank_base_lijin\030\214\001 \001(\005\022\"\n\031monthly_bank_on"
    "line_hours\030\215\001 \001(\005\022\032\n\021total_online_time\030\216"
    "\001 \001(\003\0227\n\013achievement\030\217\001 \001(\0132!.app.messag"
    "e.AchievementInfoProto\022.\n\tshou_cang\030\310\001 \001"
    "(\0132\032.app.message.ShouCangProto\022(\n\037zhong_"
    "hua_ge_today_first_passed\030\311\001 \001(\010\022\032\n\021gaoj"
    "i_melt_amount\030\312\001 \001(\005\022!\n\030left_ya_biao_tim"
    "es_today\030\313\001 \001(\005\022\"\n\031left_jie_biao_times_t"
    "oday\030\314\001 \001(\005\022\026\n\rhas_safe_code\030\315\001 \001(\010\022\033\n\022s"
    "afe_code_question\030\316\001 \001(\t\022 \n\027jin_jie_luck"
    "y_card_type\030\317\001 \003(\005\022\'\n\036jin_jie_lucky_card"
    "_expire_time\030\320\001 \003(\003\022 \n\027jin_jie_lucky_car"
    "d_rate\030\321\001 \003(\005\022%\n\034daily_card_use_stat_goo"
    "ds_id\030\322\001 \003(\005\022&\n\035daily_card_use_stat_use_"
    "count\030\323\001 \003(\005\022\024\n\013mo_shi_type\030\324\001 \003(\005\022\025\n\014mo"
    "_shi_level\030\325\001 \003(\005\022\034\n\023mo_shi_bless_amount"
    "\030\326\001 \003(\005\022\'\n\036mo_shi_bless_amount_clear_tim"
    "e\030\327\001 \003(\003\022\030\n\017mo_shi_spell_id\030\330\001 \003(\005\022\027\n\016mo"
    "_shi_is_hide\030\376\003 \001(\010\022\035\n\024qian_qiu_da_jie_t"
    "ype\030\331\001 \003(\005\022\036\n\025qian_qiu_da_jie_level\030\332\001 \003"
    "(\005\022%\n\034qian_qiu_da_jie_bless_amount\030\333\001 \003("
    "\005\0220\n\'qian_qiu_da_jie_bless_amount_clear_"
    "time\030\334\001 \003(\003\022,\n#qian_qiu_da_jie_qian_neng"
    "_use_count\030\324\002 \003(\005\022+\n\"qian_qiu_da_jie_hua"
    "n_hua_use_count\030\325\002 \003(\005\022 \n\027qian_qiu_da_ji"
    "e_is_hide\030\374\003 \001(\010\0226\n-qian_qiu_da_jie_qian"
    "_neng_extra_max_use_count\030\200\003 \003(\005\0225\n,qian"
    "_qiu_da_jie_huan_hua_extra_max_use_count"
    "\030\201\003 \003(\005\022<\n3qian_qiu_da_jie_qian_neng_max"
    "_use_count_extra_times\030\202\003 \003(\005\022;\n2qian_qi"
    "u_da_jie_huan_hua_max_use_count_extra_ti"
    "mes\030\203\003 \003(\005\022\022\n\tlong_yuan\030\335\001 \001(\005\0220\n\010jing_j"
    "ie\030\336\001 \001(\0132\035.app.message.HeroJingJieProto"
    "\022#\n\032mo_shi_qian_neng_use_count\030\337\001 \003(\005\022\"\n"
    "\031mo_shi_huan_hua_use_count\030\340\001 \003(\005\022-\n$mo_"
    "shi_qian_neng_extra_max_use_count\030\204\003 \003(\005"
    "\022,\n#mo_shi_huan_hua_extra_max_use_count\030"
    "\205\003 \003(\005\0223\n*mo_shi_qian_neng_max_use_count"
    "_extra_times\030\206\003 \003(\005\0222\n)mo_shi_huan_hua_m"
    "ax_use_count_extra_times\030\207\003 \003(\005\022\"\n\031chi_h"
    "uo_shen_gong_jie_shu\030\341\001 \001(\005\022#\n\032chi_huo_s"
    "hen_gong_ceng_shu\030\342\001 \001(\005\022\'\n\036chi_huo_shen"
    "_gong_bless_amount\030\343\001 \001(\005\0222\n)chi_huo_she"
    "n_gong_bless_amount_clear_time\030\344\001 \001(\003\022.\n"
    "%chi_huo_shen_gong_qian_neng_use_count\030\336"
    "\002 \001(\005\022-\n$chi_huo_shen_gong_huan_hua_use_"
    "count\030\337\002 \001(\005\0228\n/chi_huo_shen_gong_qian_n"
    "eng_extra_max_use_count\030\210\003 \001(\005\0227\n.chi_hu"
    "o_shen_gong_huan_hua_extra_max_use_count"
    "\030\211\003 \001(\005\022>\n5chi_huo_shen_gong_qian_neng_m"
    "ax_use_count_extra_times\030\212\003 \001(\005\022=\n4chi_h"
    "uo_shen_gong_huan_hua_max_use_count_extr"
    "a_times\030\213\003 \001(\005\022\"\n\031chi_huo_shen_gong_is_h"
    "ide\030\375\003 \001(\010\022\031\n\020draw_prize_point\030\346\001 \001(\005\022\'\n"
    "\036draw_prize_storage_goods_count\030\347\001 \001(\005\022\""
    "\n\031draw_prize_exchange_count\030\350\001 \003(\005\022\037\n\026lu"
    "cky_draw_prize_point\030\351\001 \001(\005\022-\n$lucky_dra"
    "w_prize_storage_goods_count\030\352\001 \001(\005\022\035\n\024ne"
    "w_draw_prize_point\030\315\002 \001(\005\022+\n\"new_draw_pr"
    "ize_storage_goods_count\030\316\002 \001(\005\022<\n\022yitian"
    "shenjue_info\030\353\001 \001(\0132\037.app.message.Yitian"
    "shenjueProto\022\032\n\021daily_wheel_count\030\216\002 \001(\005"
    "\022!\n\030finished_xin_mo_scene_id\030\230\002 \003(\005\0220\n\'c"
    "ollected_recharge_rank_promotion_prize\030\253"
    "\002 \003(\003\022\'\n\036collected_rank_promotion_prize\030"
    "\254\002 \003(\003\022\031\n\020arena_pair_point\030\255\002 \001(\005\022#\n\032tod"
    "ay_finished_arena_count\030\256\002 \001(\005\022\031\n\020arena_"
    "shop_point\030\257\002 \001(\005\022%\n\034arena_collectable_s"
    "hop_point\030\260\002 \001(\005\022%\n\034arena_yesterday_fini"
    "sh_count\030\261\002 \001(\005\022#\n\032arena_yesterday_pair_"
    "point\030\262\002 \001(\005\022,\n#arena_yesterday_original"
    "_shop_point\030\263\002 \001(\005\022,\n#arena_shop_point_a"
    "dded_today_by_win\030\264\002 \001(\005\022\'\n\036next_can_use"
    "_guild_lilian_time\030\266\002 \001(\003\022T\n\035guild_dunge"
    "on_collected_prize\030\267\002 \001(\0132,.app.message."
    "GuildDungeonCollectedPrizeProto\0222\n\tsuper"
    "_arm\030\270\002 \001(\0132\036.app.message.HeroSuperArmPr"
    "oto\022\'\n\005demon\030\271\002 \001(\0132\027.app.message.DemonP"
    "roto\022\'\n\005cloak\030\272\002 \001(\0132\027.app.message.Cloak"
    "Proto\022\037\n\026pet_combine_added_life\030\273\002 \001(\003\022\""
    "\n\031pet_next_can_combine_time\030\274\002 \001(\003\022\'\n\036ga"
    "llup_answered_question_count\030\275\002 \001(\005\022-\n$g"
    "allup_today_answered_question_count\030\276\002 \001"
    "(\005\0221\n\010marriage\030\277\002 \001(\0132\036.app.message.Hero"
    "MarriageProto\022+\n\"wash_super_weapon_bless"
    "_clear_time\030\300\002 \001(\003\022\027\n\016tian_men_times\030\301\002 "
    "\001(\005\022&\n\035has_collect_guild_plant_prize\030\302\002 "
    "\001(\010\022\031\n\020hide_city_master\030\303\002 \001(\010\022\036\n\025hide_l"
    "ong_city_master\030\304\002 \001(\010\022!\n\030p37_vip_prize_"
    "count_flag\030\305\002 \001(\005\022\036\n\025last_change_name_ti"
    "me\030\306\002 \001(\003\022\"\n\031next_can_change_race_time\030\307"
    "\002 \001(\003\022\022\n\thtz_times\030\310\002 \001(\005\022\037\n\026htz_max_des"
    "troy_record\030\311\002 \001(\005\022\030\n\017htz_time_record\030\312\002"
    " \001(\005\022\035\n\024limit_count_goods_id\030\313\002 \003(\005\022$\n\033l"
    "imit_count_goods_use_times\030\314\002 \003(\005\0222\n)sin"
    "gle_wash_super_weapon_bless_clear_time\030\317"
    "\002 \003(\003\022,\n#single_wash_super_weapon_bless_"
    "type\030\320\002 \003(\005\022\'\n\036arena_fighting_team_name_"
    "bytes\030\321\002 \001(\014\022\'\n\036arena_fighting_team_shop"
    "_point\030\322\002 \001(\005\022:\n1arena_fighting_team_sho"
    "p_point_added_today_by_win\030\323\002 \001(\005\0220\n\rmo_"
    "bing_proto\030\326\002 \001(\0132\030.app.message.MoBingPr"
    "oto\022\036\n\025use_mount_tongling_id\030\327\002 \001(\005\022\"\n\031a"
    "ctive_mount_tongling_ids\030\330\002 \003(\005\022-\n$chang"
    "e_use_mount_tongling_id_cd_time\030\331\002 \001(\003\022\""
    "\n\031mount_tongling_wake_value\030\345\002 \003(\005\022F\n\037no"
    "t_save_xun_zhang_random_stat1\030\332\002 \003(\0132\034.a"
    "pp.message.SingleStatProto\022F\n\037not_save_x"
    "un_zhang_random_stat2\030\333\002 \003(\0132\034.app.messa"
    "ge.SingleStatProto\022F\n=finished_collected"
    "_fight_amout_changed_value_rank_daily_pr"
    "ize\030\334\002 \001(\010\022)\n finished_yy_purple_dungeon"
    "_count\030\335\002 \003(\005\022\032\n\021he_cheng_goods_id\030\341\002 \003("
    "\005\022\035\n\024he_cheng_goods_count\030\342\002 \003(\005\022&\n\035chri"
    "stmas_storage_goods_count\030\343\002 \001(\005\022\020\n\007cred"
    "its\030\344\002 \001(\005\022\035\n\024monopoly_now_cell_id\030\346\002 \001("
    "\005\022%\n\034monopoly_now_roll_times_cost\030\347\002 \001(\005"
    "\022\034\n\023monopoly_roll_times\030\350\002 \001(\005\022 \n\027monopo"
    "ly_buy_roll_times\030\351\002 \001(\005\022)\n credits_draw"
    "_storage_goods_count\030\352\002 \001(\005\022)\n\004love\030\353\002 \001"
    "(\0132\032.app.message.HeroLoveProto\022(\n\006wu_dao"
    "\030\354\002 \001(\0132\027.app.message.WuDaoProto\0229\n\017ni_d"
    "ao_qian_kun\030\355\002 \001(\0132\037.app.message.NiDaoQi"
    "anKunClient\022/\n&finished_tong_tian_ta_dun"
    "geon_sequence\030\356\002 \001(\005\022)\n tong_tian_ta_dun"
    "geon_daily_times\030\357\002 \001(\005\022\'\n\036tong_tian_ta_"
    "dungeon_use_times\030\360\002 \003(\005\022+\n\"tong_tian_ta"
    "_dungeon_refresh_times\030\361\002 \001(\005\0227\n\013anniver"
    "sary\030\362\002 \001(\0132!.app.message.HeroAnniversar"
    "yProto\022\036\n\025firework_color_values\030\363\002 \003(\005\022&"
    "\n\035firework_promotion_start_time\030\364\002 \001(\003\022$"
    "\n\033firework_promotion_end_time\030\365\002 \001(\003\022@\n\020"
    "anniversary_task\030\366\002 \001(\0132%.app.message.He"
    "roAnniversaryTaskProto\022!\n\030is_gain_huege_"
    "data_prize\030\367\002 \001(\010\022)\n\006shield\030\370\002 \001(\0132\030.app"
    ".message.ShieldProto\022\035\n\024finished_ling_yu"
    "n_id\030\372\002 \003(\005\022\035\n\024finished_long_mai_id\030\371\002 \003"
    "(\005\022!\n\030finished_zhong_hua_ge_id\030\373\002 \003(\005\022K\n"
    "\025defence_dungeon_state\030\374\002 \003(\0132+.app.mess"
    "age.DefenceDungeonStateClientProto\022\023\n\nli"
    "ng_guang\030\375\002 \001(\005\022\030\n\017ling_guang_pick\030\376\002 \001("
    "\005\022!\n\030mystery_dungeon_use_time\030\377\002 \001(\005\022-\n\t"
    "boss_card\030\214\003 \001(\0132\031.app.message.HeroBossC"
    "ard\022+\n\005haidi\030\215\003 \001(\0132\033.app.message.HaidiI"
    "nfoProto\022!\n\030bow_tong_ling_display_id\030\216\003 "
    "\001(\005\022;\n\rbow_tong_ling\030\217\003 \003(\0132#.app.messag"
    "e.BowTongLingClientProto\022#\n\032sys_hong_bao"
    "_colleted_time\030\220\003 \001(\003\022,\n\010tian_xie\030\364\003 \001(\013"
    "2\031.app.message.TianXieProto\022+\n\007jianDao\030\365"
    "\003 \001(\0132\031.app.message.JianDaoProto\022)\n\006ling"
    "Yu\030\366\003 \001(\0132\030.app.message.LingYuProto\0221\n\nf"
    "engYunDao\030\367\003 \001(\0132\034.app.message.FengYunDa"
    "oProto\022;\n\rpet_tong_ling\030\370\003 \003(\0132#.app.mes"
    "sage.PetTongLingClientProto\022!\n\030pet_tong_"
    "ling_display_id\030\371\003 \001(\005\022S\n\032pet_tong_ling_"
    "single_spell\030\372\003 \003(\0132..app.message.PetTon"
    "gLingSingleSpellClientProto\0220\n\007mo_fang\030\373"
    "\003 \001(\0132\036.app.message.MoFangClientProto\022!\n"
    "\030hell_dungeon_enter_count\030\203\004 \001(\005\"\314\002\n\021MoF"
    "angClientProto\022\017\n\007jie_shu\030\001 \001(\005\022\020\n\010ceng_"
    "shu\030\002 \001(\005\022\024\n\014bless_amount\030\003 \001(\005\022\037\n\027bless"
    "_amount_clear_time\030\004 \001(\003\022\033\n\023qian_neng_us"
    "e_count\030\005 \001(\005\022\032\n\022huan_hua_use_count\030\006 \001("
    "\005\022%\n\035qian_neng_extra_max_use_count\030\007 \001(\005"
    "\022$\n\034huan_hua_extra_max_use_count\030\010 \001(\005\022+"
    "\n#qian_neng_max_use_count_extra_times\030\t "
    "\001(\005\022*\n\"huan_hua_max_use_count_extra_time"
    "s\030\n \001(\005\"\275\001\n\026PetTongLingClientProto\022\n\n\002id"
    "\030\001 \001(\005\022*\n\004stat\030\002 \001(\0132\034.app.message.Sprit"
    "eStatProto\022\023\n\013fightAmount\030\003 \001(\005\022\024\n\014upgra"
    "deTimes\030\004 \001(\005\022@\n\ngift_spell\030\005 \003(\0132,.app."
    "message.PetTongLingGiftSpellClientProto\""
    "m\n\037PetTongLingGiftSpellClientProto\022/\n\rpa"
    "ssive_spell\030\001 \001(\0132\030.app.message.ActiveSp"
    "ell\022\031\n\021passive_spell_exp\030\002 \001(\005\"^\n!PetTon"
    "gLingSingleSpellClientProto\022\'\n\005spell\030\001 \001"
    "(\0132\030.app.message.ActiveSpell\022\020\n\010sequence"
    "\030\002 \001(\005\"{\n\026BowTongLingClientProto\022\n\n\002id\030\001"
    " \001(\005\022*\n\004stat\030\002 \001(\0132\034.app.message.SpriteS"
    "tatProto\022\023\n\013fightAmount\030\003 \001(\005\022\024\n\014upgrade"
    "Times\030\004 \001(\005\"\247\001\n\023FengYunDaoRankProto\022A\n\004r"
    "ank\030\001 \003(\01323.app.message.FengYunDaoRankPr"
    "oto.FengYunDaoRankData\032M\n\022FengYunDaoRank"
    "Data\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\014\n\004pass\030\003"
    " \001(\005\022\017\n\007useTime\030\004 \001(\005\"y\n\017FengYunDaoProto"
    "\022\022\n\ndailyTimes\030\001 \001(\005\022\025\n\rdailyBuyTimes\030\002 "
    "\001(\005\022\022\n\nfirstIndex\030\003 \001(\005\022\020\n\010curIndex\030\004 \001("
    "\005\022\025\n\rchallengeKeep\030\005 \001(\010\"k\n\020HeroYuYiGePr"
    "otos\022\030\n\020on_show_sequence\030\001 \001(\005\022,\n\006protos"
    "\030\002 \003(\0132\034.app.message.HeroYuYiGeProto\022\017\n\007"
    "is_hide\030\003 \001(\010\"\374\001\n\017HeroYuYiGeProto\022\020\n\010seq"
    "uence\030\001 \001(\005\022,\n\007fashion\030\002 \001(\0132\033.app.messa"
    "ge.EquipmentProto\0225\n\014fashion_data\030\003 \001(\0132"
    "\037.app.message.EquipmentDataProto\022\r\n\005leve"
    "l\030\004 \001(\005\022\033\n\023is_use_bless_amount\030\005 \001(\010\022\024\n\014"
    "bless_amount\030\006 \001(\005\022\037\n\027bless_amount_clear"
    "_time\030\007 \001(\003\022\017\n\007blessLv\030\010 \001(\005\"\372\001\n\034HeroWel"
    "fareCompensationProto\022S\n\007welfare\030\001 \001(\0132B"
    ".app.message.HeroWelfareCompensationProt"
    "o.WelfareCompensationProto\022\022\n\nexpireTime"
    "\030\002 \001(\003\032q\n\030WelfareCompensationProto\022\r\n\005in"
    "dex\030\001 \001(\003\022\r\n\005title\030\002 \001(\t\022\017\n\007content\030\003 \001("
    "\t\022&\n\005prize\030\004 \001(\0132\027.app.message.PrizeProt"
    "o\"\357\002\n\013LingYuProto\022\r\n\005index\030\001 \001(\005\022\021\n\ttype"
    "Level\030\002 \003(\005\022\021\n\tusingType\030\003 \001(\005\022\024\n\014bless_"
    "amount\030\n \001(\005\022\037\n\027bless_amount_clear_time\030"
    "\013 \001(\003\022\033\n\023qian_neng_use_count\030\014 \001(\005\022\032\n\022hu"
    "an_hua_use_count\030\r \001(\005\022\025\n\rupgrade_times\030"
    "\016 \001(\005\022%\n\035qian_neng_extra_max_use_count\030\017"
    " \001(\005\022$\n\034huan_hua_extra_max_use_count\030\020 \001"
    "(\005\022+\n#qian_neng_max_use_count_extra_time"
    "s\030\021 \001(\005\022*\n\"huan_hua_max_use_count_extra_"
    "times\030\022 \001(\005\"j\n\030TongTianBaoJianTaskProto\022"
    "\n\n\002id\030\001 \001(\005\022\021\n\ttask_name\030\002 \001(\t\022\023\n\013goal_t"
    "arget\030\003 \001(\005\022\014\n\004desc\030\004 \001(\t\022\014\n\004type\030\005 \001(\005\""
    "\314\001\n\036DefenceDungeonStateClientProto\022\022\n\ndu"
    "ngeon_id\030\001 \001(\005\022$\n\034defence_today_finished"
    "_batch\030\002 \001(\005\022!\n\031defence_history_max_batc"
    "h\030\003 \001(\005\022*\n\"defence_collected_first_pass_"
    "prize\030\005 \001(\005\022!\n\031defence_collectable_prize"
    "\030\006 \003(\014\"\264\002\n\rHugeDataProto\022\027\n\017total_login_"
    "day\030\001 \001(\005\022\030\n\020total_login_time\030\002 \001(\005\022\027\n\017f"
    "ighting_amount\030\003 \001(\005\022\035\n\025total_auction_yu"
    "anbao\030\004 \001(\005\022\030\n\020total_long_cheng\030\005 \001(\005\022\027\n"
    "\017total_wu_shuang\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\021\n"
    "\tenemy_num\030\010 \001(\005\022\025\n\rtotal_ling_di\030\t \001(\005\022"
    "\023\n\013create_time\030\n \001(\003\0227\n\017huge_data_prize\030"
    "\013 \001(\0132\036.app.message.GoodsWrapperProto\"`\n"
    "\022NiDaoQianKunClient\0221\n\013sprite_stat\030\001 \001(\013"
    "2\034.app.message.SpriteStatProto\022\027\n\017total_"
    "use_count\030\002 \001(\005\"\271\001\n\013MoBingProto\0222\n\014mo_bi"
    "ng_stat\030\001 \003(\0132\034.app.message.MoBingStatPr"
    "oto\022\032\n\022mo_bing_equip_type\030\002 \003(\005\022\023\n\013spell"
    "_point\030\003 \001(\005\022\022\n\nstart_time\030\004 \001(\003\022\020\n\010end_"
    "time\030\005 \001(\003\022\037\n\027has_collect_prize_today\030\006 "
    "\001(\010\"\213\001\n\017MoBingStatProto\022\014\n\004type\030\001 \001(\005\022\r\n"
    "\005level\030\002 \001(\005\022\022\n\nspell_type\030\003 \003(\005\022\023\n\013spel"
    "l_level\030\004 \003(\005\0222\n\013bless_proto\030\005 \001(\0132\035.app"
    ".message.MoBingBlessProto\"\242\001\n\020MoBingBles"
    "sProto\022\025\n\rupgrade_times\030\001 \001(\005\022\024\n\014bless_a"
    "mount\030\002 \001(\005\022\037\n\027bless_amount_clear_time\030\003"
    " \001(\003\022\034\n\024bless_his_max_amount\030\004 \001(\005\022\"\n\032ad"
    "d_bless_clear_time_count\030\005 \001(\005\"\246\002\n\013DaoSh"
    "iProto\022\025\n\rredis_big_key\030\001 \001(\014\022\023\n\013has_app"
    "lied\030\002 \001(\010\022\022\n\nis_dao_shi\030\003 \001(\010\022\022\n\nlogin_"
    "days\030\004 \001(\005\022!\n\031has_collected_login_prize\030"
    "\005 \001(\010\022(\n can_collect_wu_shuang_city_priz"
    "e\030\006 \001(\010\022*\n\"has_collected_wu_shuang_city_"
    "prize\030\007 \001(\010\022#\n\033can_collect_long_city_pri"
    "ze\030\010 \001(\010\022%\n\035has_collected_long_city_priz"
    "e\030\t \001(\010\"G\n\020HeroJingJieProto\0223\n\010jing_jie\030"
    "\001 \003(\0132!.app.message.HeroJingJieDataProto"
    "\"\261\001\n\024HeroJingJieDataProto\022\023\n\013jing_jie_id"
    "\030\001 \001(\005\022\032\n\022jing_jie_big_level\030\002 \001(\005\022\034\n\024ji"
    "ng_jie_small_level\030\003 \001(\005\022%\n\035today_collec"
    "t_long_yuan_count\030\004 \001(\005\022#\n\033next_collect_"
    "long_yuan_time\030\005 \001(\003\"O\n\037GuildDungeonColl"
    "ectedPrizeProto\022\023\n\013expire_time\030\001 \001(\003\022\027\n\017"
    "collected_prize\030\002 \003(\005\",\n\rShouCangProto\022\014"
    "\n\004type\030\001 \003(\005\022\r\n\005level\030\002 \003(\005\"P\n\020Achieveme"
    "ntProto\022\025\n\rachieved_type\030\001 \001(\005\022\023\n\013achiev"
    "ed_id\030\002 \001(\005\022\020\n\010progress\030\003 \001(\005\"\220\001\n\024Achiev"
    "ementInfoProto\022/\n\010achieved\030\001 \003(\0132\035.app.m"
    "essage.AchievementProto\022\032\n\022achievement_p"
    "oints\030\002 \001(\005\022\023\n\013nickname_id\030\025 \003(\005\022\026\n\016usin"
    "g_nickname\030\026 \001(\005\"\236\003\n\021HeroSuperArmProto\022\n"
    "\n\002id\030\001 \001(\005\022\020\n\010resource\030\005 \001(\005\022\024\n\014bless_am"
    "ount\030\n \001(\005\022\037\n\027bless_amount_clear_time\030\013 "
    "\001(\003\022\021\n\tspell_pos\030\014 \003(\005\022(\n\006spells\030\r \003(\0132\030"
    ".app.message.ActiveSpell\022\033\n\023qian_neng_us"
    "e_count\030\025 \001(\005\022\032\n\022huan_hua_use_count\030\026 \001("
    "\005\022\030\n\020is_hide_huan_hua\030\030 \001(\010\022%\n\035qian_neng"
    "_extra_max_use_count\030\031 \001(\005\022$\n\034huan_hua_e"
    "xtra_max_use_count\030\032 \001(\005\022+\n#qian_neng_ma"
    "x_use_count_extra_times\030\033 \001(\005\022*\n\"huan_hu"
    "a_max_use_count_extra_times\030\034 \001(\005\"\207\003\n\010Pe"
    "tProto\022(\n\004data\030\001 \001(\0132\032.app.message.PetLe"
    "velProto\022\026\n\016added_max_life\030\002 \001(\005\022\024\n\014adde"
    "d_attack\030\003 \001(\005\022\025\n\radded_defence\030\004 \001(\005\022\023\n"
    "\013expire_time\030\005 \001(\003\022\025\n\requipment_pos\030\006 \003("
    "\005\022\035\n\025equipment_static_data\030\007 \003(\014\022\036\n\026equi"
    "pment_dynamic_data\030\010 \003(\014\022\023\n\007monster\030\024 \001("
    "\005B\002\030\001\022\023\n\013relive_time\030\025 \001(\003\022\021\n\tspell_pos\030"
    "\036 \003(\005\022(\n\006spells\030\037 \003(\0132\030.app.message.Acti"
    "veSpell\022\032\n\022use_zizhidan_count\030  \001(\005\022\036\n\026u"
    "se_meirenzhixin_count\030! \001(\005\"\300\002\n\rPetLevel"
    "Proto\022\036\n\026default_added_max_life\030\002 \001(\003\022\034\n"
    "\024default_added_attack\030\003 \001(\005\022\035\n\025default_a"
    "dded_defence\030\004 \001(\005\022\032\n\022max_added_max_life"
    "\030\005 \001(\005\022\034\n\024max_added_max_attack\030\006 \001(\005\022\035\n\025"
    "max_added_max_defence\030\007 \001(\005\0220\n\nfixed_sta"
    "t\030\010 \001(\0132\034.app.message.SpriteStatProto\0222\n"
    "\014percent_stat\030\t \001(\0132\034.app.message.Sprite"
    "StatProto\022\023\n\013static_hurt\030\n \001(\005\"\236\003\n\nDemon"
    "Proto\022,\n\005demon\030\001 \001(\0132\035.app.message.Demon"
    "ConfigProto\022\024\n\014bless_amount\030\n \001(\005\022\037\n\027ble"
    "ss_amount_clear_time\030\013 \001(\003\022\031\n\021is_in_demo"
    "n_state\030\014 \001(\010\022 \n\030next_can_turn_demon_tim"
    "e\030\r \001(\003\022\033\n\023qian_neng_use_count\030\025 \001(\005\022\032\n\022"
    "huan_hua_use_count\030\026 \001(\005\022\017\n\007is_hide\030\027 \001("
    "\010\022%\n\035qian_neng_extra_max_use_count\030\031 \001(\005"
    "\022$\n\034huan_hua_extra_max_use_count\030\032 \001(\005\022+"
    "\n#qian_neng_max_use_count_extra_times\030\033 "
    "\001(\005\022*\n\"huan_hua_max_use_count_extra_time"
    "s\030\034 \001(\005\"\207\003\n\014TianZuiProto\022\n\n\002id\030\001 \001(\005\022\024\n\014"
    "bless_amount\030\n \001(\005\022\037\n\027bless_amount_clear"
    "_time\030\013 \001(\003\022\021\n\tspell_pos\030\014 \003(\005\022(\n\006spells"
    "\030\r \003(\0132\030.app.message.ActiveSpell\022\033\n\023qian"
    "_neng_use_count\030\025 \001(\005\022\032\n\022huan_hua_use_co"
    "unt\030\026 \001(\005\022\030\n\020is_hide_huan_hua\030\030 \001(\010\022%\n\035q"
    "ian_neng_extra_max_use_count\030\031 \001(\005\022$\n\034hu"
    "an_hua_extra_max_use_count\030\032 \001(\005\022+\n#qian"
    "_neng_max_use_count_extra_times\030\033 \001(\005\022*\n"
    "\"huan_hua_max_use_count_extra_times\030\034 \001("
    "\005\"\207\003\n\014TianJieProto\022\n\n\002id\030\001 \001(\005\022\024\n\014bless_"
    "amount\030\n \001(\005\022\037\n\027bless_amount_clear_time\030"
    "\013 \001(\003\022\021\n\tspell_pos\030\014 \003(\005\022(\n\006spells\030\r \003(\013"
    "2\030.app.message.ActiveSpell\022\033\n\023qian_neng_"
    "use_count\030\025 \001(\005\022\032\n\022huan_hua_use_count\030\026 "
    "\001(\005\022\030\n\020is_hide_huan_hua\030\030 \001(\010\022%\n\035qian_ne"
    "ng_extra_max_use_count\030\031 \001(\005\022$\n\034huan_hua"
    "_extra_max_use_count\030\032 \001(\005\022+\n#qian_neng_"
    "max_use_count_extra_times\030\033 \001(\005\022*\n\"huan_"
    "hua_max_use_count_extra_times\030\034 \001(\005\"\227\003\n\010"
    "BowProto\022\013\n\003bow\030\001 \001(\005\022\r\n\005arrow\030\002 \001(\005\022\024\n\014"
    "bless_amount\030\003 \001(\005\022\037\n\027bless_amount_clear"
    "_time\030\004 \001(\003\022\020\n\010resource\030\005 \001(\005\022\026\n\narrow_s"
    "tar\030\024 \001(\005B\002\030\001\022\025\n\tarrow_exp\030\025 \001(\005B\002\030\001\022\030\n\020"
    "is_hide_huan_hua\030\030 \001(\010\022%\n\035qian_neng_extr"
    "a_max_use_count\030\031 \001(\005\022$\n\034huan_hua_extra_"
    "max_use_count\030\032 \001(\005\022+\n#qian_neng_max_use"
    "_count_extra_times\030\033 \001(\005\022*\n\"huan_hua_max"
    "_use_count_extra_times\030\034 \001(\005\022\033\n\023qian_nen"
    "g_use_count\030\037 \001(\005\022\032\n\022huan_hua_use_count\030"
    "  \001(\005\"\207\001\n\026CombineXinfaSpellProto\022.\n\014acti"
    "ve_spell\030\001 \001(\0132\030.app.message.ActiveSpell"
    "\022\022\n\nused_times\030\002 \001(\005\022\023\n\013static_data\030\003 \001("
    "\014\022\024\n\014dynamic_data\030\004 \001(\014\"\351\007\n\023FightingAmou"
    "ntProto\022\034\n\024base_fighting_amount\030\001 \001(\005\022!\n"
    "\031equipment_fighting_amount\030\002 \001(\005\022\035\n\025spel"
    "l_fighting_amount\030\003 \001(\005\022\037\n\023gem_fighting_"
    "amount\030\004 \001(\005B\002\030\001\022\035\n\025mount_fighting_amoun"
    "t\030\005 \001(\005\022\033\n\023bow_fighting_amount\030\006 \001(\005\022$\n\034"
    "super_weapon_fighting_amount\030\007 \001(\005\022!\n\031su"
    "per_arm_fighting_amount\030\010 \001(\005\022*\n\"super_w"
    "eapon_xinfa_fighting_amount\030\t \001(\005\022\037\n\027tia"
    "njie_fighting_amount\030\n \001(\005\022\037\n\027tianzui_fi"
    "ghting_amount\030\013 \001(\005\022!\n\031shou_cang_fightin"
    "g_amount\030\014 \001(\005\022\035\n\025demon_fighting_amount\030"
    "\r \001(\005\022\035\n\025cloak_fighting_amount\030\016 \001(\005\022\033\n\023"
    "pet_fighting_amount\030\017 \001(\005\022%\n\035yitianshenj"
    "ue_fighting_amount\030\020 \001(\005\022\035\n\025moshi_fighti"
    "ng_amount\030\021 \001(\005\022$\n\034qianqiudajie_fighting"
    "_amount\030\022 \001(\005\022 \n\030jing_jie_fighting_amoun"
    "t\030\023 \001(\005\022\036\n\026marriage_weapon_amount\030\024 \001(\005\022"
    "\035\n\025marriage_goods_amount\030\025 \001(\005\022)\n!chi_hu"
    "o_shen_gong_fighting_amount\030\026 \001(\005\022\037\n\027mo_"
    "bing_fighting_amount\030\027 \001(\005\022 \n\030tian_xie_f"
    "ighting_amount\030\030 \001(\005\022\036\n\026wu_dao_fighting_"
    "amount\030\031 \001(\005\022\036\n\026shield_fighting_amount\030\032"
    " \003(\005\022\"\n\032jiu_wei_hu_fighting_amount\030\033 \001(\005"
    "\022\037\n\027ling_yu_fighting_amount\030\034 \001(\005\022 \n\030yu_"
    "yi_ge_fighting_amount\030\035 \001(\005\"\235\002\n\023GoodsCon"
    "tainerProto\022\014\n\004size\030\002 \001(\005\022\020\n\010pos_list\030\003 "
    "\003(\005\022\037\n\023next_open_slot_time\030\005 \001(\003B\002\030\001\022<\n\014"
    "unlock_datas\030\006 \003(\0132&.app.message.GoodsCo"
    "ntainerUnlockProto\022\027\n\017goods_data_list\030\007 "
    "\003(\014\022\022\n\ngoods_list\030\010 \003(\014\022.\n\010acc_stat\030\t \001("
    "\0132\034.app.message.SpriteStatProto\022\022\n\ninit_"
    "count\030\n \001(\005\022\026\n\016acc_start_time\030\013 \001(\003\"\257\001\n\031"
    "GoodsContainerUnlockProto\022\017\n\003pos\030\001 \001(\005B\002"
    "\030\001\022\023\n\013unlock_time\030\002 \001(\003\022\023\n\013unlock_cost\030\003"
    " \001(\005\022\013\n\003exp\030\004 \001(\005\0221\n\013sprite_stat\030\005 \001(\0132\034"
    ".app.message.SpriteStatProto\022\027\n\017open_slo"
    "t_count\030\006 \001(\005\"\200\001\n\020HeroClearedProto\0225\n\020do"
    "ing_daily_task\030\001 \001(\0132\033.app.message.Daily"
    "TaskProto\0225\n\020doing_guild_task\030\002 \001(\0132\033.ap"
    "p.message.GuildTaskProto\"\300\001\n\024ChallengeRe"
    "sultProto\022\016\n\006result\030\001 \001(\005\022\n\n\002id\030\002 \001(\003\022\014\n"
    "\004name\030\003 \001(\014\022\014\n\004race\030\004 \001(\005\022\032\n\022equipment_r"
    "esource\030\005 \001(\003\0220\n\ntotal_stat\030\006 \001(\0132\034.app."
    "message.SpriteStatProto\022\023\n\013spell_types\030\007"
    " \003(\005\022\r\n\005level\030\010 \001(\005\"\325\020\n\016OtherHeroProto\022\n"
    "\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022"
    "\014\n\004race\030\004 \001(\005\022\027\n\017fighting_amount\030\005 \001(\005\0220"
    "\n\ntotal_stat\030\006 \001(\0132\034.app.message.SpriteS"
    "tatProto\022\023\n\013equiped_pos\030\007 \003(\005\0228\n\017equipme"
    "nt_datas\030\010 \003(\0132\037.app.message.EquipmentDa"
    "taProto\022/\n\nequipments\030\t \003(\0132\033.app.messag"
    "e.EquipmentProto\022\033\n\023equipment_resources\030"
    "\n \001(\003\022\013\n\003exp\030\013 \001(\003\022\023\n\013upgrade_exp\030\014 \001(\003\022"
    "\014\n\004life\030\r \001(\003\022\020\n\010max_life\030\016 \001(\003\022\020\n\010real_"
    "air\030\017 \001(\005\022\017\n\007stamina\030\020 \001(\005\022\023\n\013max_stamin"
    "a\030\021 \001(\005\022\022\n\nguild_name\030\022 \001(\014\022\017\n\007vip_exp\030\023"
    " \001(\005\022\025\n\rguild_li_lian\030\036 \001(\005\0221\n\tsuper_arm"
    "\030\037 \001(\0132\036.app.message.HeroSuperArmProto\022&"
    "\n\005cloak\030  \001(\0132\027.app.message.CloakProto\0226"
    "\n\013achievement\030P \001(\0132!.app.message.Achiev"
    "ementInfoProto\022+\n\010tian_zui\030U \001(\0132\031.app.m"
    "essage.TianZuiProto\022+\n\010tian_jie\030V \001(\0132\031."
    "app.message.TianJieProto\022\"\n\003pet\030W \001(\0132\025."
    "app.message.PetProto\022\014\n\004gems\030X \003(\005\022\"\n\003bo"
    "w\030Y \001(\0132\025.app.message.BowProto\022\021\n\tpk_amo"
    "unt\030Z \001(\005\022&\n\005mount\030[ \001(\0132\027.app.message.M"
    "ountProto\022!\n\031equipment_fighting_amount\030\\"
    " \001(\005\022\035\n\025spell_fighting_amount\030] \001(\005\022!\n\031s"
    "uper_arm_fighting_amount\030^ \001(\005\022\034\n\024base_f"
    "ighting_amount\030_ \001(\005\022\037\n\023gem_fighting_amo"
    "unt\030` \001(\005B\002\030\001\022\035\n\025mount_fighting_amount\030a"
    " \001(\005\022\033\n\023bow_fighting_amount\030b \001(\005\022$\n\034sup"
    "er_weapon_fighting_amount\030c \001(\005\022*\n\"super"
    "_weapon_xinfa_fighting_amount\030d \001(\005\022\037\n\027t"
    "ianjie_fighting_amount\030e \001(\005\022\037\n\027tianzui_"
    "fighting_amount\030f \001(\005\022!\n\031shou_cang_fight"
    "ing_amount\030g \001(\005\022\035\n\025demon_fighting_amoun"
    "t\030h \001(\005\022\035\n\025cloak_fighting_amount\030i \001(\005\022\033"
    "\n\023pet_fighting_amount\030j \001(\005\022%\n\035yitianshe"
    "njue_fighting_amount\030k \001(\005\022\035\n\025moshi_figh"
    "ting_amount\030l \001(\005\022 \n\030jing_jie_fighting_a"
    "mount\030p \001(\005\022%\n\034qianqiudajie_fighting_amo"
    "unt\030\311\001 \001(\005\022\036\n\026marriage_weapon_amount\030q \001"
    "(\005\022\035\n\025marriage_goods_amount\030r \001(\005\022)\n!chi"
    "_huo_shen_gong_fighting_amount\030s \001(\005\022\037\n\027"
    "mo_bing_fighting_amount\030t \001(\005\022 \n\030tian_xi"
    "e_fighting_amount\030u \001(\005\022\036\n\026wu_dao_fighti"
    "ng_amount\030v \001(\005\022 \n\030yu_yi_ge_fighting_amo"
    "unt\030w \001(\005\022\037\n\027mo_fang_fighting_amount\030x \001"
    "(\005\022\033\n\023qian_neng_use_count\030\025 \001(\005\022\032\n\022huan_"
    "hua_use_count\030\026 \001(\005\022\032\n\022marriage_target_i"
    "d\030m \001(\003\022\034\n\024marriage_target_name\030n \001(\014\022\031\n"
    "\021marriage_goods_id\030o \001(\005\022.\n\tshou_cang\030\310\001"
    " \001(\0132\032.app.message.ShouCangProto\022\'\n\036aren"
    "a_fighting_team_name_bytes\030\312\001 \001(\014\022\037\n\026shi"
    "eld_fighting_amount\030\313\001 \003(\005\022\021\n\010jian_dao\030\314"
    "\001 \001(\005\022!\n\030bow_tong_ling_display_id\030\315\001 \001(\005"
    "\022!\n\030pet_tong_ling_display_id\030\316\001 \001(\005\"\212\002\n\016"
    "ClientRelation\022\021\n\tfriend_id\030\001 \003(\003\022\020\n\010ene"
    "my_id\030\002 \003(\003\022\032\n\022enemy_kill_history\030\003 \003(\003\022"
    "\025\n\rblack_list_id\030\004 \003(\003\022\021\n\trecent_id\030\005 \003("
    "\003\022\030\n\020hide_my_location\030\006 \001(\010\022\035\n\025hide_offl"
    "ine_relation\030\007 \001(\010\022\025\n\rhide_big_head\030\010 \001("
    "\010\022\030\n\020show_enemy_event\030\t \001(\010\022#\n\033forbid_be"
    "en_added_as_friend\030\n \001(\010\"\263\001\n\016SingleRelat"
    "ion\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\022\014\n\004mood\030\003 "
    "\001(\014\022\020\n\010scene_id\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\023\n\013"
    "line_number\030\006 \001(\005\022\020\n\010has_sell\030\007 \001(\010\022\014\n\004r"
    "ace\030\010 \001(\005\022#\n\033forbid_been_added_as_friend"
    "\030\t \001(\010\"\212\001\n\024ClientRelationDetail\022+\n\006detai"
    "l\030\001 \003(\0132\033.app.message.SingleRelation\022\021\n\t"
    "is_online\030\002 \003(\010\022\021\n\tself_mood\030\003 \001(\014\022\037\n\027be"
    "en_added_friend_count\030\004 \001(\005\"\331\003\n\013ChatMess"
    "age\022\016\n\006speech\030\001 \001(\t\0226\n\nchat_goods\030\002 \003(\0132"
    "\".app.message.ChatMessage.ChatGoods\022\021\n\tc"
    "heck_sum\030\003 \001(\005\022\022\n\nhas_my_pos\030\024 \001(\010\022\013\n\003ge"
    "m\030\025 \003(\005\022\021\n\thero_name\030\004 \001(\014\022\017\n\007hero_id\030\005 "
    "\001(\003\022\r\n\005level\030\006 \001(\005\022\016\n\006is_vip\030\007 \001(\010\022\020\n\010sc"
    "ene_id\030\010 \001(\005\022\017\n\007scene_x\030\t \001(\005\022\017\n\007scene_y"
    "\030\n \001(\005\022\022\n\nscene_line\030\013 \001(\005\022\031\n\021is_ws_city"
    "_master\030\r \001(\010\022\033\n\023is_long_city_master\030\016 \001"
    "(\010\022\030\n\020city_master_type\030\017 \001(\005\022\r\n\005is_gm\030\022 "
    "\001(\010\022\024\n\014platform_vip\030\023 \001(\005\032L\n\tChatGoods\022\n"
    "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\017\n\007quality\030\003 \001("
    "\005\022\024\n\014dynamic_info\030\004 \001(\014\"Y\n\014JianDaoProto\022"
    "\020\n\010storeExp\030\001 \001(\003\022\022\n\ntianJianLv\030\002 \001(\005\022\020\n"
    "\010moJianLv\030\003 \001(\005\022\021\n\tfeiXianLv\030\004 \001(\005\"\330\003\n\014T"
    "ianXieProto\0221\n\010tian_xie\030\001 \001(\0132\037.app.mess"
    "age.TianXieConfigProto\022\024\n\014bless_amount\030\n"
    " \001(\005\022\037\n\027bless_amount_clear_time\030\013 \001(\003\022\033\n"
    "\023qian_neng_use_count\030\025 \001(\005\022\032\n\022huan_hua_u"
    "se_count\030\026 \001(\005\022\026\n\016minor_slot_pos\030\002 \003(\005\022\033"
    "\n\023minor_slot_nickname\030\003 \003(\005\022\026\n\016major_slo"
    "t_pos\030\004 \003(\005\022\033\n\023major_slot_nickname\030\005 \003(\005"
    "\022\025\n\rupgrade_times\030\006 \001(\005\022%\n\035qian_neng_ext"
    "ra_max_use_count\030\031 \001(\005\022$\n\034huan_hua_extra"
    "_max_use_count\030\032 \001(\005\022+\n#qian_neng_max_us"
    "e_count_extra_times\030\033 \001(\005\022*\n\"huan_hua_ma"
    "x_use_count_extra_times\030\034 \001(\005\"\204\003\n\nWuDaoP"
    "roto\022-\n\006wu_dao\030\001 \001(\0132\035.app.message.WuDao"
    "ConfigProto\022\024\n\014bless_amount\030\002 \001(\005\022\037\n\027ble"
    "ss_amount_clear_time\030\003 \001(\003\022\033\n\023qian_neng_"
    "use_count\030\025 \001(\005\022\032\n\022huan_hua_use_count\030\026 "
    "\001(\005\022\032\n\022mo_bing_equip_type\030\n \003(\005\022\025\n\rupgra"
    "de_times\030\006 \001(\005\022%\n\035qian_neng_extra_max_us"
    "e_count\030\031 \001(\005\022$\n\034huan_hua_extra_max_use_"
    "count\030\032 \001(\005\022+\n#qian_neng_max_use_count_e"
    "xtra_times\030\033 \001(\005\022*\n\"huan_hua_max_use_cou"
    "nt_extra_times\030\034 \001(\005\"\236\003\n\nCloakProto\022,\n\005c"
    "loak\030\001 \001(\0132\035.app.message.CloakConfigProt"
    "o\022\024\n\014bless_amount\030\n \001(\005\022\037\n\027bless_amount_"
    "clear_time\030\013 \001(\003\022\021\n\tspell_pos\030\014 \003(\005\022(\n\006s"
    "pells\030\r \003(\0132\030.app.message.ActiveSpell\022\017\n"
    "\007is_show\030\016 \001(\010\022\033\n\023qian_neng_use_count\030\025 "
    "\001(\005\022\032\n\022huan_hua_use_count\030\026 \001(\005\022%\n\035qian_"
    "neng_extra_max_use_count\030\031 \001(\005\022$\n\034huan_h"
    "ua_extra_max_use_count\030\032 \001(\005\022+\n#qian_nen"
    "g_max_use_count_extra_times\030\033 \001(\005\022*\n\"hua"
    "n_hua_max_use_count_extra_times\030\034 \001(\005\"\362\001"
    "\n\022YitianshenjueProto\022/\n\tstat_info\030\001 \001(\0132"
    "\034.app.message.SpriteStatProto\0226\n\020current"
    "_add_stat\030\002 \003(\0132\034.app.message.SingleStat"
    "Proto\0223\n\rnext_add_stat\030\003 \003(\0132\034.app.messa"
    "ge.SingleStatProto\022\035\n\025current_cuilian_va"
    "lue\030\004 \001(\005\022\037\n\027equipment_cuilian_count\030\005 \001"
    "(\005\"\322\004\n\nMountProto\022\022\n\nbest_mount\030\001 \001(\005\022\024\n"
    "\014riding_mount\030\002 \001(\005\022\017\n\007is_ride\030\003 \001(\010\022\020\n\010"
    "buy_time\030\005 \001(\003\022\024\n\014bless_amount\030\006 \001(\005\022\037\n\027"
    "bless_amount_clear_time\030\007 \001(\003\0224\n\nadded_d"
    "ata\030\010 \001(\0132 .app.message.MountAddedDataPr"
    "oto\022\021\n\tspell_pos\030\014 \003(\005\022(\n\006spells\030\r \003(\0132\030"
    ".app.message.ActiveSpell\022\025\n\requipment_po"
    "s\030\016 \003(\005\022\035\n\025equipment_static_data\030\017 \003(\014\022\036"
    "\n\026equipment_dynamic_data\030\020 \003(\014\022\033\n\023qian_n"
    "eng_use_count\030\025 \001(\005\022\032\n\022huan_hua_use_coun"
    "t\030\026 \001(\005\022\030\n\020is_hide_huan_hua\030\030 \001(\010\022%\n\035qia"
    "n_neng_extra_max_use_count\030\031 \001(\005\022$\n\034huan"
    "_hua_extra_max_use_count\030\032 \001(\005\022+\n#qian_n"
    "eng_max_use_count_extra_times\030\033 \001(\005\022*\n\"h"
    "uan_hua_max_use_count_extra_times\030\034 \001(\005\""
    "f\n\023MountAddedDataProto\0220\n\nadded_stat\030\002 \003"
    "(\0132\034.app.message.SpriteStatProto\022\035\n\025adde"
    "d_fighting_amount\030\003 \003(\005\"\324\003\n\020SuperWeaponP"
    "roto\022\n\n\002id\030\001 \001(\005\022\023\n\013upgrade_pos\030\002 \001(\005\0224\n"
    "\021next_upgrade_data\030\006 \001(\0132\031.app.message.U"
    "pgradeProto\022\027\n\017has_unlock_soul\030\007 \001(\010\022\031\n\021"
    "has_unlock_weapon\030\010 \001(\010\022\036\n\026has_unlock_ma"
    "gic_spell\030\t \001(\010\0220\n\nadded_stat\030\n \001(\0132\034.ap"
    "p.message.SpriteStatProto\022:\n\024not_saved_a"
    "dded_stat\030\013 \001(\0132\034.app.message.SpriteStat"
    "Proto\022\035\n\025has_unlock_weapon_gem\030\014 \003(\010\022\030\n\020"
    "weapon_gem_level\030\r \003(\005\022\031\n\021weapon_gem_bin"
    "ded\030\016 \003(\010\022\031\n\021super_upgrade_pos\030\025 \003(\005\0228\n\022"
    "super_upgrade_stat\030\026 \001(\0132\034.app.message.S"
    "priteStatProto\"{\n\025StoryDungeonStatProto\022"
    "\022\n\ndungeon_id\030\001 \001(\005\022\031\n\021is_finished_today"
    "\030\002 \001(\010\022\026\n\016fastest_record\030\003 \001(\005\022\033\n\023can_no"
    "t_enter_today\030\004 \001(\010\"\356\001\n\033StoryDungeonFini"
    "shStatProto\022\022\n\ntotal_time\030\001 \001(\005\022\022\n\ndead_"
    "count\030\002 \001(\005\022\023\n\013monster_exp\030\003 \001(\005\022\r\n\005scor"
    "e\030\004 \001(\005\022\031\n\021total_time_faster\030\007 \001(\005\0225\n\rsc"
    "ore_s_prize\030\005 \003(\0132\036.app.message.GoodsWra"
    "pperProto\0221\n\tvip_prize\030\006 \003(\0132\036.app.messa"
    "ge.GoodsWrapperProto\"\272\001\n!StoryDungeonCol"
    "lectablePrizeProto\022\022\n\ndungeon_id\030\001 \001(\005\022\030"
    "\n\020no_score_s_prize\030\002 \001(\010\022\034\n\024has_first_pa"
    "ss_prize\030\003 \001(\010\022\023\n\013expire_time\030\004 \001(\003\022\030\n\020r"
    "andomed_s_prize\030\005 \001(\014\022\032\n\022randomed_vip_pr"
    "ize\030\006 \001(\014\"\257\004\n\021HeroMarriageProto\022\021\n\ttarge"
    "t_id\030\001 \001(\003\022\023\n\013target_name\030\002 \001(\014\022\024\n\014weapo"
    "n_level\030\003 \001(\005\022\017\n\007hao_gan\030\004 \001(\005\022\031\n\021marria"
    "ge_goods_id\030\005 \001(\005\022\025\n\rmarriage_time\030\006 \001(\003"
    "\022\025\n\rhao_gan_today\030\007 \001(\005\022\023\n\013target_race\030\010"
    " \001(\005\022\022\n\nlao_chu_nv\030\t \001(\010\022\024\n\014wedding_time"
    "\030\n \001(\003\022\034\n\024couple_dungeon_times\030\013 \001(\005\022\025\n\r"
    "huanhua_count\030\014 \001(\005\022\030\n\020is_hide_huan_hua\030"
    "\r \001(\010\022$\n\034huan_hua_extra_max_use_count\030\031 "
    "\001(\005\022*\n\"huan_hua_max_use_count_extra_time"
    "s\030\032 \001(\005\022\035\n\025daily_prize_collected\030\033 \001(\010\022\033"
    "\n\023collectable_gift_id\030\025 \003(\005\022\036\n\026collectab"
    "le_gift_count\030\026 \003(\005\022/\n\'next_check_both_o"
    "nline_add_hao_gan_time\030\027 \001(\003\022\025\n\rtotal_ha"
    "o_gan\030\030 \001(\005\"\226\001\n\024MarriageStorageProto\022\014\n\004"
    "size\030\001 \001(\005\022\020\n\010pos_list\030\002 \003(\005\022\027\n\017goods_da"
    "ta_list\030\003 \003(\014\022\022\n\ngoods_list\030\004 \003(\014\0221\n\003log"
    "\030\005 \003(\0132$.app.message.MarriageStorageLogP"
    "roto\"w\n\027MarriageStorageLogProto\022\014\n\004time\030"
    "\001 \001(\003\022\027\n\017hero_name_bytes\030\002 \001(\014\022\030\n\020goods_"
    "name_bytes\030\003 \001(\014\022\r\n\005count\030\004 \001(\005\022\014\n\004type\030"
    "\005 \001(\005\"\317\001\n\rHeroLoveProto\022\027\n\017daily_collect"
    "ed\030\001 \001(\010\022\026\n\016exchange_point\030\002 \001(\005\022\023\n\013exch"
    "ange_id\030\003 \003(\005\022\034\n\024exchange_today_count\030\004 "
    "\003(\005\022$\n\034online_collected_max_minutes\030\005 \001("
    "\005\022\034\n\024online_today_minutes\030\006 \001(\005\022\026\n\016onlin"
    "e_minutes\030\007 \001(\005\"b\n\025HeroLoveExchangeProto"
    "\022\026\n\016exchange_point\030\001 \001(\005\022\023\n\013exchange_id\030"
    "\002 \003(\005\022\034\n\024exchange_today_count\030\003 \003(\005\"l\n\"A"
    "renaFightingTeamRankTeamInfoProto\022F\n\013mem"
    "ber_info\030\001 \003(\01321.app.message.ArenaFighti"
    "ngTeamRankMemberInfoProto\"\201\001\n$ArenaFight"
    "ingTeamRankMemberInfoProto\022\017\n\007hero_id\030\001 "
    "\001(\003\022\027\n\017hero_name_bytes\030\002 \001(\014\022\021\n\thero_rac"
    "e\030\003 \001(\005\022\034\n\024hero_fighting_amount\030\004 \001(\005\"k\n"
    "\031ClientYuanbaoCostLogProto\022N\n\030single_yua"
    "nbao_cost_logs\030\001 \003(\0132,.app.message.Clien"
    "tSingleYuanbaoCostLogProto\"c\n\037ClientSing"
    "leYuanbaoCostLogProto\022\014\n\004time\030\001 \001(\003\022\014\n\004t"
    "ype\030\002 \001(\005\022\017\n\007yuanbao\030\003 \001(\005\022\023\n\013bindYuanba"
    "o\030\004 \001(\005\"\213\001\n\024HeroAnniversaryProto\022\034\n\024cake"
    "_today_collected\030\001 \001(\010\022\036\n\026daily_normal_c"
    "ollected\030\002 \001(\010\022\033\n\023daily_vip_collected\030\003 "
    "\001(\010\022\030\n\020recharge_yuanbao\030\004 \001(\005\"\227\001\n\030HeroAn"
    "niversaryTaskProto\022F\n\014current_task\030\001 \001(\013"
    "20.app.message.SingleHeroAnniversaryDail"
    "yTaskProto\022\r\n\005index\030\002 \001(\005\022$\n\025final_prize"
    "_collected\030\003 \001(\010:\005false\"\266\001\n#SingleHeroAn"
    "niversaryDailyTaskProto\022:\n\004task\030\001 \001(\0132,."
    "app.message.SingleAnniversaryDailyTaskPr"
    "oto\022\r\n\005count\030\002 \001(\005\022\024\n\014is_completed\030\003 \001(\010"
    "\022\027\n\017prize_collected\030\004 \001(\010\022\025\n\rrefresh_tim"
    "es\030\005 \001(\005\"R\n\013ShieldProto\022/\n\007shields\030\001 \003(\013"
    "2\036.app.message.SingleShieldProto\022\022\n\ncurr"
    "ent_id\030\003 \001(\005\"\376\005\n\021SingleShieldProto\022*\n\004da"
    "ta\030\001 \001(\0132\034.app.message.ShieldDataProto\0225"
    "\n\nlevel_data\030\002 \001(\0132!.app.message.ShieldL"
    "evelDataProto\0221\n\017special_spell_1\030\003 \001(\0132\030"
    ".app.message.ActiveSpell\0221\n\017special_spel"
    "l_2\030\004 \001(\0132\030.app.message.ActiveSpell\022\030\n\020n"
    "ormal_spell_pos\030\005 \003(\005\022/\n\rnormal_spells\030\006"
    " \003(\0132\030.app.message.ActiveSpell\022\025\n\requipm"
    "ent_pos\030\007 \003(\005\022\035\n\025equipment_static_data\030\010"
    " \003(\014\022\036\n\026equipment_dynamic_data\030\t \003(\014\022\033\n\023"
    "qian_neng_use_count\030\n \001(\005\022\032\n\022huan_hua_us"
    "e_count\030\013 \001(\005\022\024\n\014bless_amount\030\014 \001(\005\022\037\n\027b"
    "less_amount_clear_time\030\r \001(\003\022\013\n\003exp\030\016 \001("
    "\003\022\026\n\016is_super_model\030\017 \001(\010\022\030\n\020is_super_mo"
    "del_2\030\021 \001(\010\022\023\n\013nickname_id\030\022 \001(\005\022\025\n\rupgr"
    "ade_times\030\020 \001(\005\022%\n\035qian_neng_extra_max_u"
    "se_count\030\031 \001(\005\022$\n\034huan_hua_extra_max_use"
    "_count\030\032 \001(\005\022+\n#qian_neng_max_use_count_"
    "extra_times\030\033 \001(\005\022*\n\"huan_hua_max_use_co"
    "unt_extra_times\030\034 \001(\005\"\360\001\n\014HeroBossCard\022\030"
    "\n\020today_call_count\030\001 \001(\005\022\027\n\017current_card"
    "_id\030\002 \001(\005\022\037\n\027current_calling_card_id\030\003 \001"
    "(\005\022\034\n\024dungeon_expired_time\030\004 \001(\003\022(\n guil"
    "d_boss_card_kill_prize_count\030\005 \001(\005\022(\n gu"
    "ild_boss_card_call_prize_count\030\007 \001(\005\022\032\n\022"
    "reset_week_of_year\030\006 \001(\005\"\321\001\n\nHaidiProto\022"
    "#\n\033today_free_ticket_collected\030\001 \001(\010\022\026\n\016"
    "bishuidan_used\030\002 \001(\010\0227\n\010leftTime\030\003 \003(\0132%"
    ".app.message.HaidiProto.HaidiLeftTime\022\026\n"
    "\016is_new_version\030\004 \001(\005\0325\n\rHaidiLeftTime\022\022"
    "\n\nhaidilevel\030\001 \002(\005\022\020\n\010leftTime\030\002 \002(\005\"\301\001\n"
    "\016HaidiInfoProto\022#\n\033today_free_ticket_col"
    "lected\030\001 \001(\010\022\026\n\016bishuidan_used\030\002 \001(\010\022;\n\010"
    "overTime\030\003 \003(\0132).app.message.HaidiInfoPr"
    "oto.HaidiOverTime\0325\n\rHaidiOverTime\022\022\n\nha"
    "idilevel\030\001 \002(\005\022\020\n\010overTime\030\002 \002(\003\"\220\001\n\021Her"
    "oComebackProto\022\024\n\014is_collected\030\001 \001(\010\022\030\n\020"
    "is_vip_collected\030\002 \001(\010\022\022\n\nstart_time\030\003 \001"
    "(\003\022\020\n\010end_time\030\004 \001(\003\022%\n\035last_logout_time"
    "_before_start\030\005 \001(\003*Q\n\tLoginType\022\014\n\010INTE"
    "RNAL\020\000\022\007\n\003WEB\020\001\022\020\n\014MICRO_CLIENT\020\002\022\014\n\010GM_"
    "LOGIN\020\003\022\r\n\tNWE_ROBOT\020\004B\035\n\014app.protobufB\013"
    "HeroContentH\001", 30533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hero.proto", &protobuf_RegisterTypes);
  HeroProto::default_instance_ = new HeroProto();
  MoFangClientProto::default_instance_ = new MoFangClientProto();
  PetTongLingClientProto::default_instance_ = new PetTongLingClientProto();
  PetTongLingGiftSpellClientProto::default_instance_ = new PetTongLingGiftSpellClientProto();
  PetTongLingSingleSpellClientProto::default_instance_ = new PetTongLingSingleSpellClientProto();
  BowTongLingClientProto::default_instance_ = new BowTongLingClientProto();
  FengYunDaoRankProto::default_instance_ = new FengYunDaoRankProto();
  FengYunDaoRankProto_FengYunDaoRankData::default_instance_ = new FengYunDaoRankProto_FengYunDaoRankData();
  FengYunDaoProto::default_instance_ = new FengYunDaoProto();
  HeroYuYiGeProtos::default_instance_ = new HeroYuYiGeProtos();
  HeroYuYiGeProto::default_instance_ = new HeroYuYiGeProto();
  HeroWelfareCompensationProto::default_instance_ = new HeroWelfareCompensationProto();
  HeroWelfareCompensationProto_WelfareCompensationProto::default_instance_ = new HeroWelfareCompensationProto_WelfareCompensationProto();
  LingYuProto::default_instance_ = new LingYuProto();
  TongTianBaoJianTaskProto::default_instance_ = new TongTianBaoJianTaskProto();
  DefenceDungeonStateClientProto::default_instance_ = new DefenceDungeonStateClientProto();
  HugeDataProto::default_instance_ = new HugeDataProto();
  NiDaoQianKunClient::default_instance_ = new NiDaoQianKunClient();
  MoBingProto::default_instance_ = new MoBingProto();
  MoBingStatProto::default_instance_ = new MoBingStatProto();
  MoBingBlessProto::default_instance_ = new MoBingBlessProto();
  DaoShiProto::default_instance_ = new DaoShiProto();
  HeroJingJieProto::default_instance_ = new HeroJingJieProto();
  HeroJingJieDataProto::default_instance_ = new HeroJingJieDataProto();
  GuildDungeonCollectedPrizeProto::default_instance_ = new GuildDungeonCollectedPrizeProto();
  ShouCangProto::default_instance_ = new ShouCangProto();
  AchievementProto::default_instance_ = new AchievementProto();
  AchievementInfoProto::default_instance_ = new AchievementInfoProto();
  HeroSuperArmProto::default_instance_ = new HeroSuperArmProto();
  PetProto::default_instance_ = new PetProto();
  PetLevelProto::default_instance_ = new PetLevelProto();
  DemonProto::default_instance_ = new DemonProto();
  TianZuiProto::default_instance_ = new TianZuiProto();
  TianJieProto::default_instance_ = new TianJieProto();
  BowProto::default_instance_ = new BowProto();
  CombineXinfaSpellProto::default_instance_ = new CombineXinfaSpellProto();
  FightingAmountProto::default_instance_ = new FightingAmountProto();
  GoodsContainerProto::default_instance_ = new GoodsContainerProto();
  GoodsContainerUnlockProto::default_instance_ = new GoodsContainerUnlockProto();
  HeroClearedProto::default_instance_ = new HeroClearedProto();
  ChallengeResultProto::default_instance_ = new ChallengeResultProto();
  OtherHeroProto::default_instance_ = new OtherHeroProto();
  ClientRelation::default_instance_ = new ClientRelation();
  SingleRelation::default_instance_ = new SingleRelation();
  ClientRelationDetail::default_instance_ = new ClientRelationDetail();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatMessage_ChatGoods::default_instance_ = new ChatMessage_ChatGoods();
  JianDaoProto::default_instance_ = new JianDaoProto();
  TianXieProto::default_instance_ = new TianXieProto();
  WuDaoProto::default_instance_ = new WuDaoProto();
  CloakProto::default_instance_ = new CloakProto();
  YitianshenjueProto::default_instance_ = new YitianshenjueProto();
  MountProto::default_instance_ = new MountProto();
  MountAddedDataProto::default_instance_ = new MountAddedDataProto();
  SuperWeaponProto::default_instance_ = new SuperWeaponProto();
  StoryDungeonStatProto::default_instance_ = new StoryDungeonStatProto();
  StoryDungeonFinishStatProto::default_instance_ = new StoryDungeonFinishStatProto();
  StoryDungeonCollectablePrizeProto::default_instance_ = new StoryDungeonCollectablePrizeProto();
  HeroMarriageProto::default_instance_ = new HeroMarriageProto();
  MarriageStorageProto::default_instance_ = new MarriageStorageProto();
  MarriageStorageLogProto::default_instance_ = new MarriageStorageLogProto();
  HeroLoveProto::default_instance_ = new HeroLoveProto();
  HeroLoveExchangeProto::default_instance_ = new HeroLoveExchangeProto();
  ArenaFightingTeamRankTeamInfoProto::default_instance_ = new ArenaFightingTeamRankTeamInfoProto();
  ArenaFightingTeamRankMemberInfoProto::default_instance_ = new ArenaFightingTeamRankMemberInfoProto();
  ClientYuanbaoCostLogProto::default_instance_ = new ClientYuanbaoCostLogProto();
  ClientSingleYuanbaoCostLogProto::default_instance_ = new ClientSingleYuanbaoCostLogProto();
  HeroAnniversaryProto::default_instance_ = new HeroAnniversaryProto();
  HeroAnniversaryTaskProto::default_instance_ = new HeroAnniversaryTaskProto();
  SingleHeroAnniversaryDailyTaskProto::default_instance_ = new SingleHeroAnniversaryDailyTaskProto();
  ShieldProto::default_instance_ = new ShieldProto();
  SingleShieldProto::default_instance_ = new SingleShieldProto();
  HeroBossCard::default_instance_ = new HeroBossCard();
  HaidiProto::default_instance_ = new HaidiProto();
  HaidiProto_HaidiLeftTime::default_instance_ = new HaidiProto_HaidiLeftTime();
  HaidiInfoProto::default_instance_ = new HaidiInfoProto();
  HaidiInfoProto_HaidiOverTime::default_instance_ = new HaidiInfoProto_HaidiOverTime();
  HeroComebackProto::default_instance_ = new HeroComebackProto();
  HeroProto::default_instance_->InitAsDefaultInstance();
  MoFangClientProto::default_instance_->InitAsDefaultInstance();
  PetTongLingClientProto::default_instance_->InitAsDefaultInstance();
  PetTongLingGiftSpellClientProto::default_instance_->InitAsDefaultInstance();
  PetTongLingSingleSpellClientProto::default_instance_->InitAsDefaultInstance();
  BowTongLingClientProto::default_instance_->InitAsDefaultInstance();
  FengYunDaoRankProto::default_instance_->InitAsDefaultInstance();
  FengYunDaoRankProto_FengYunDaoRankData::default_instance_->InitAsDefaultInstance();
  FengYunDaoProto::default_instance_->InitAsDefaultInstance();
  HeroYuYiGeProtos::default_instance_->InitAsDefaultInstance();
  HeroYuYiGeProto::default_instance_->InitAsDefaultInstance();
  HeroWelfareCompensationProto::default_instance_->InitAsDefaultInstance();
  HeroWelfareCompensationProto_WelfareCompensationProto::default_instance_->InitAsDefaultInstance();
  LingYuProto::default_instance_->InitAsDefaultInstance();
  TongTianBaoJianTaskProto::default_instance_->InitAsDefaultInstance();
  DefenceDungeonStateClientProto::default_instance_->InitAsDefaultInstance();
  HugeDataProto::default_instance_->InitAsDefaultInstance();
  NiDaoQianKunClient::default_instance_->InitAsDefaultInstance();
  MoBingProto::default_instance_->InitAsDefaultInstance();
  MoBingStatProto::default_instance_->InitAsDefaultInstance();
  MoBingBlessProto::default_instance_->InitAsDefaultInstance();
  DaoShiProto::default_instance_->InitAsDefaultInstance();
  HeroJingJieProto::default_instance_->InitAsDefaultInstance();
  HeroJingJieDataProto::default_instance_->InitAsDefaultInstance();
  GuildDungeonCollectedPrizeProto::default_instance_->InitAsDefaultInstance();
  ShouCangProto::default_instance_->InitAsDefaultInstance();
  AchievementProto::default_instance_->InitAsDefaultInstance();
  AchievementInfoProto::default_instance_->InitAsDefaultInstance();
  HeroSuperArmProto::default_instance_->InitAsDefaultInstance();
  PetProto::default_instance_->InitAsDefaultInstance();
  PetLevelProto::default_instance_->InitAsDefaultInstance();
  DemonProto::default_instance_->InitAsDefaultInstance();
  TianZuiProto::default_instance_->InitAsDefaultInstance();
  TianJieProto::default_instance_->InitAsDefaultInstance();
  BowProto::default_instance_->InitAsDefaultInstance();
  CombineXinfaSpellProto::default_instance_->InitAsDefaultInstance();
  FightingAmountProto::default_instance_->InitAsDefaultInstance();
  GoodsContainerProto::default_instance_->InitAsDefaultInstance();
  GoodsContainerUnlockProto::default_instance_->InitAsDefaultInstance();
  HeroClearedProto::default_instance_->InitAsDefaultInstance();
  ChallengeResultProto::default_instance_->InitAsDefaultInstance();
  OtherHeroProto::default_instance_->InitAsDefaultInstance();
  ClientRelation::default_instance_->InitAsDefaultInstance();
  SingleRelation::default_instance_->InitAsDefaultInstance();
  ClientRelationDetail::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatMessage_ChatGoods::default_instance_->InitAsDefaultInstance();
  JianDaoProto::default_instance_->InitAsDefaultInstance();
  TianXieProto::default_instance_->InitAsDefaultInstance();
  WuDaoProto::default_instance_->InitAsDefaultInstance();
  CloakProto::default_instance_->InitAsDefaultInstance();
  YitianshenjueProto::default_instance_->InitAsDefaultInstance();
  MountProto::default_instance_->InitAsDefaultInstance();
  MountAddedDataProto::default_instance_->InitAsDefaultInstance();
  SuperWeaponProto::default_instance_->InitAsDefaultInstance();
  StoryDungeonStatProto::default_instance_->InitAsDefaultInstance();
  StoryDungeonFinishStatProto::default_instance_->InitAsDefaultInstance();
  StoryDungeonCollectablePrizeProto::default_instance_->InitAsDefaultInstance();
  HeroMarriageProto::default_instance_->InitAsDefaultInstance();
  MarriageStorageProto::default_instance_->InitAsDefaultInstance();
  MarriageStorageLogProto::default_instance_->InitAsDefaultInstance();
  HeroLoveProto::default_instance_->InitAsDefaultInstance();
  HeroLoveExchangeProto::default_instance_->InitAsDefaultInstance();
  ArenaFightingTeamRankTeamInfoProto::default_instance_->InitAsDefaultInstance();
  ArenaFightingTeamRankMemberInfoProto::default_instance_->InitAsDefaultInstance();
  ClientYuanbaoCostLogProto::default_instance_->InitAsDefaultInstance();
  ClientSingleYuanbaoCostLogProto::default_instance_->InitAsDefaultInstance();
  HeroAnniversaryProto::default_instance_->InitAsDefaultInstance();
  HeroAnniversaryTaskProto::default_instance_->InitAsDefaultInstance();
  SingleHeroAnniversaryDailyTaskProto::default_instance_->InitAsDefaultInstance();
  ShieldProto::default_instance_->InitAsDefaultInstance();
  SingleShieldProto::default_instance_->InitAsDefaultInstance();
  HeroBossCard::default_instance_->InitAsDefaultInstance();
  HaidiProto::default_instance_->InitAsDefaultInstance();
  HaidiProto_HaidiLeftTime::default_instance_->InitAsDefaultInstance();
  HaidiInfoProto::default_instance_->InitAsDefaultInstance();
  HaidiInfoProto_HaidiOverTime::default_instance_->InitAsDefaultInstance();
  HeroComebackProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hero_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hero_2eproto {
  StaticDescriptorInitializer_hero_2eproto() {
    protobuf_AddDesc_hero_2eproto();
  }
} static_descriptor_initializer_hero_2eproto_;
const ::google::protobuf::EnumDescriptor* LoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginType_descriptor_;
}
bool LoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HeroProto::kLevelFieldNumber;
const int HeroProto::kRaceFieldNumber;
const int HeroProto::kSceneIDFieldNumber;
const int HeroProto::kYuanbaoFieldNumber;
const int HeroProto::kLijinFieldNumber;
const int HeroProto::kMoneyFieldNumber;
const int HeroProto::kDepotFieldNumber;
const int HeroProto::kRealAirFieldNumber;
const int HeroProto::kFightingAmountFieldNumber;
const int HeroProto::kTotalStatFieldNumber;
const int HeroProto::kEquipedPosFieldNumber;
const int HeroProto::kEquipmentDatasFieldNumber;
const int HeroProto::kEquipmentsFieldNumber;
const int HeroProto::kExpFieldNumber;
const int HeroProto::kUpgradeExpFieldNumber;
const int HeroProto::kEquipmentResourcesFieldNumber;
const int HeroProto::kHasStorageFieldNumber;
const int HeroProto::kBuyBackGoodsDatasFieldNumber;
const int HeroProto::kBuyBackGoodsListFieldNumber;
const int HeroProto::kTeamAutoAcceptInviteFieldNumber;
const int HeroProto::kTeamAutoAcceptRequestFieldNumber;
const int HeroProto::kTeamForbidOtherInviteMeJoinFieldNumber;
const int HeroProto::kTradeAutoRejectInviteFieldNumber;
const int HeroProto::kTaskFieldNumber;
const int HeroProto::kClientOnlyConfig1FieldNumber;
const int HeroProto::kClientOnlyIntConfigsFieldNumber;
const int HeroProto::kGuildNameFieldNumber;
const int HeroProto::kGuildAutoAcceptInviteFieldNumber;
const int HeroProto::kGuildForbidOtherInviteMeJoinFieldNumber;
const int HeroProto::kGuildFlagLevelFieldNumber;
const int HeroProto::kGuildLiLianFieldNumber;
const int HeroProto::kGuildContributionFieldNumber;
const int HeroProto::kFriendGuildNameFieldNumber;
const int HeroProto::kEnemyGuildNameFieldNumber;
const int HeroProto::kIsWsCityMasterFieldNumber;
const int HeroProto::kIsLongCityMasterFieldNumber;
const int HeroProto::kIsGuildLeaderFieldNumber;
const int HeroProto::kIsTerritoryLeaderFieldNumber;
const int HeroProto::kAccumulatedOfflineTimeFieldNumber;
const int HeroProto::kVipExpFieldNumber;
const int HeroProto::kStoryDungeonProtoFieldNumber;
const int HeroProto::kStoryDungeonCollectablePrizeProtoFieldNumber;
const int HeroProto::kAutoFinishStoryIdFieldNumber;
const int HeroProto::kAutoFinishStoryCompleteTimeFieldNumber;
const int HeroProto::kFinishedChallengeDungeonSequenceIdFieldNumber;
const int HeroProto::kFinishedVipDungeonIdFieldNumber;
const int HeroProto::kDefenceTodayFinishedBatchFieldNumber;
const int HeroProto::kDefenceHistoryMaxBatchFieldNumber;
const int HeroProto::kDefenceTodayResetCountFieldNumber;
const int HeroProto::kDefenceCollectedFirstPassPrizeFieldNumber;
const int HeroProto::kDefenceCollectablePrizeFieldNumber;
const int HeroProto::kSouShenPointFieldNumber;
const int HeroProto::kSouShenTodayPassedIdFieldNumber;
const int HeroProto::kSouShenLifePassedIdFieldNumber;
const int HeroProto::kLingYunTodayEnteredTimesFieldNumber;
const int HeroProto::kLingYunTodayFinishStateFieldNumber;
const int HeroProto::kGroupCollectablePrizeProtoFieldNumber;
const int HeroProto::kLongMaiTodayFirstPassedFieldNumber;
const int HeroProto::kWuJueTodayEnteredTimesFieldNumber;
const int HeroProto::kWuJueTodayCollectedFirstTryTransportPrizeTimesFieldNumber;
const int HeroProto::kTerritoryTodayCollectedPrizeSceneIdFieldNumber;
const int HeroProto::kDailyActivityResultFieldNumber;
const int HeroProto::kShengWangFieldNumber;
const int HeroProto::kShengWangTaskFieldNumber;
const int HeroProto::kUseFreeChatTimesFieldNumber;
const int HeroProto::kGemsFieldNumber;
const int HeroProto::kBowFieldNumber;
const int HeroProto::kAdmiredHeroFieldNumber;
const int HeroProto::kLastLogoutTimeFieldNumber;
const int HeroProto::kCollectedVipPrizeFieldNumber;
const int HeroProto::kNextCollectVipWeeklyPrizeTimeFieldNumber;
const int HeroProto::kUsingWeaponFieldNumber;
const int HeroProto::kSuperWeaponFieldNumber;
const int HeroProto::kSuperWeaponMaxLevelAddStatFieldNumber;
const int HeroProto::kHasMagicWeaponFieldNumber;
const int HeroProto::kMagicAddedStatFieldNumber;
const int HeroProto::kMagicNotSavedAddedStatFieldNumber;
const int HeroProto::kHasUnlockMagicWeaponGemFieldNumber;
const int HeroProto::kMagicWeaponGemLevelFieldNumber;
const int HeroProto::kMagicWeaponGemBindedFieldNumber;
const int HeroProto::kDivineTimesFieldNumber;
const int HeroProto::kDivineAmountFieldNumber;
const int HeroProto::kDivineStorageGoodsCountFieldNumber;
const int HeroProto::kMountFieldNumber;
const int HeroProto::kLotteryFieldNumber;
const int HeroProto::kDailyOnlineAccTimeFieldNumber;
const int HeroProto::kSignFieldNumber;
const int HeroProto::kSignPrizeFieldNumber;
const int HeroProto::kReplenishSignTimesFieldNumber;
const int HeroProto::kNextReducePkAmountTimeFieldNumber;
const int HeroProto::kPkAmountFieldNumber;
const int HeroProto::kReliveProtectedEndTimeFieldNumber;
const int HeroProto::kTotalSignTimesFieldNumber;
const int HeroProto::kTotalRechargeYuanbaoFieldNumber;
const int HeroProto::kLotteryGoodsStaticDataFieldNumber;
const int HeroProto::kLotteryGoodsDynamicDataFieldNumber;
const int HeroProto::kPetFieldNumber;
const int HeroProto::kHasRechargeFieldNumber;
const int HeroProto::kSpellAddedUpgradeLevelFieldNumber;
const int HeroProto::kCombineSpellsFieldNumber;
const int HeroProto::kPassiveSpellFieldNumber;
const int HeroProto::kActiveSpellFieldNumber;
const int HeroProto::kActiveSpellUsedTimesFieldNumber;
const int HeroProto::kShortcutSpellTypeFieldNumber;
const int HeroProto::kShortcutSpellPosFieldNumber;
const int HeroProto::kDefaultSpellPosFieldNumber;
const int HeroProto::kJumpShieldFieldNumber;
const int HeroProto::kStaminaFieldNumber;
const int HeroProto::kClientRelationFieldNumber;
const int HeroProto::kFuncBitsFieldNumber;
const int HeroProto::kRageAmountFieldNumber;
const int HeroProto::kCreateTimeFieldNumber;
const int HeroProto::kIsCollectLocalLoginFirstPrizeFieldNumber;
const int HeroProto::kIsCollectLocalLoginDailyPrizeFieldNumber;
const int HeroProto::kPhoenixRefineTimesFieldNumber;
const int HeroProto::kIsCrossSingleStoryFieldNumber;
const int HeroProto::kPhoenixMoneyRefineTimesFieldNumber;
const int HeroProto::kPhoenixLijinRefineTimesFieldNumber;
const int HeroProto::kPhoenixYuanbaoRefineTimesFieldNumber;
const int HeroProto::kLoginDayFieldNumber;
const int HeroProto::kTuLongTodayEnteredTimesFieldNumber;
const int HeroProto::kMeltAmountFieldNumber;
const int HeroProto::kChallengeDungeonDailyTimesFieldNumber;
const int HeroProto::kChallengeDungeonAssistTimesFieldNumber;
const int HeroProto::kChallengeDungeonUseTimesFieldNumber;
const int HeroProto::kHonorFieldNumber;
const int HeroProto::kTianZuiFieldNumber;
const int HeroProto::kTianJieFieldNumber;
const int HeroProto::kFirstRechargeCollectIndexFieldNumber;
const int HeroProto::kLoginPrizeInfoFieldNumber;
const int HeroProto::kInvestUpgradeBankMoneyFieldNumber;
const int HeroProto::kCollectUpgradeBankLevelFieldNumber;
const int HeroProto::kCollectUpgradeBankLijinFieldNumber;
const int HeroProto::kInvestMonthlyBankMoneyFieldNumber;
const int HeroProto::kInvestMonthlyBankTimeFieldNumber;
const int HeroProto::kMonthlyBankPrevCollectTimeFieldNumber;
const int HeroProto::kMonthlyBankPrevCollectTime2FieldNumber;
const int HeroProto::kMonthlyBankOnlineLijinFieldNumber;
const int HeroProto::kMonthlyBankBaseLijinFieldNumber;
const int HeroProto::kMonthlyBankOnlineHoursFieldNumber;
const int HeroProto::kTotalOnlineTimeFieldNumber;
const int HeroProto::kAchievementFieldNumber;
const int HeroProto::kShouCangFieldNumber;
const int HeroProto::kZhongHuaGeTodayFirstPassedFieldNumber;
const int HeroProto::kGaojiMeltAmountFieldNumber;
const int HeroProto::kLeftYaBiaoTimesTodayFieldNumber;
const int HeroProto::kLeftJieBiaoTimesTodayFieldNumber;
const int HeroProto::kHasSafeCodeFieldNumber;
const int HeroProto::kSafeCodeQuestionFieldNumber;
const int HeroProto::kJinJieLuckyCardTypeFieldNumber;
const int HeroProto::kJinJieLuckyCardExpireTimeFieldNumber;
const int HeroProto::kJinJieLuckyCardRateFieldNumber;
const int HeroProto::kDailyCardUseStatGoodsIdFieldNumber;
const int HeroProto::kDailyCardUseStatUseCountFieldNumber;
const int HeroProto::kMoShiTypeFieldNumber;
const int HeroProto::kMoShiLevelFieldNumber;
const int HeroProto::kMoShiBlessAmountFieldNumber;
const int HeroProto::kMoShiBlessAmountClearTimeFieldNumber;
const int HeroProto::kMoShiSpellIdFieldNumber;
const int HeroProto::kMoShiIsHideFieldNumber;
const int HeroProto::kQianQiuDaJieTypeFieldNumber;
const int HeroProto::kQianQiuDaJieLevelFieldNumber;
const int HeroProto::kQianQiuDaJieBlessAmountFieldNumber;
const int HeroProto::kQianQiuDaJieBlessAmountClearTimeFieldNumber;
const int HeroProto::kQianQiuDaJieQianNengUseCountFieldNumber;
const int HeroProto::kQianQiuDaJieHuanHuaUseCountFieldNumber;
const int HeroProto::kQianQiuDaJieIsHideFieldNumber;
const int HeroProto::kQianQiuDaJieQianNengExtraMaxUseCountFieldNumber;
const int HeroProto::kQianQiuDaJieHuanHuaExtraMaxUseCountFieldNumber;
const int HeroProto::kQianQiuDaJieQianNengMaxUseCountExtraTimesFieldNumber;
const int HeroProto::kQianQiuDaJieHuanHuaMaxUseCountExtraTimesFieldNumber;
const int HeroProto::kLongYuanFieldNumber;
const int HeroProto::kJingJieFieldNumber;
const int HeroProto::kMoShiQianNengUseCountFieldNumber;
const int HeroProto::kMoShiHuanHuaUseCountFieldNumber;
const int HeroProto::kMoShiQianNengExtraMaxUseCountFieldNumber;
const int HeroProto::kMoShiHuanHuaExtraMaxUseCountFieldNumber;
const int HeroProto::kMoShiQianNengMaxUseCountExtraTimesFieldNumber;
const int HeroProto::kMoShiHuanHuaMaxUseCountExtraTimesFieldNumber;
const int HeroProto::kChiHuoShenGongJieShuFieldNumber;
const int HeroProto::kChiHuoShenGongCengShuFieldNumber;
const int HeroProto::kChiHuoShenGongBlessAmountFieldNumber;
const int HeroProto::kChiHuoShenGongBlessAmountClearTimeFieldNumber;
const int HeroProto::kChiHuoShenGongQianNengUseCountFieldNumber;
const int HeroProto::kChiHuoShenGongHuanHuaUseCountFieldNumber;
const int HeroProto::kChiHuoShenGongQianNengExtraMaxUseCountFieldNumber;
const int HeroProto::kChiHuoShenGongHuanHuaExtraMaxUseCountFieldNumber;
const int HeroProto::kChiHuoShenGongQianNengMaxUseCountExtraTimesFieldNumber;
const int HeroProto::kChiHuoShenGongHuanHuaMaxUseCountExtraTimesFieldNumber;
const int HeroProto::kChiHuoShenGongIsHideFieldNumber;
const int HeroProto::kDrawPrizePointFieldNumber;
const int HeroProto::kDrawPrizeStorageGoodsCountFieldNumber;
const int HeroProto::kDrawPrizeExchangeCountFieldNumber;
const int HeroProto::kLuckyDrawPrizePointFieldNumber;
const int HeroProto::kLuckyDrawPrizeStorageGoodsCountFieldNumber;
const int HeroProto::kNewDrawPrizePointFieldNumber;
const int HeroProto::kNewDrawPrizeStorageGoodsCountFieldNumber;
const int HeroProto::kYitianshenjueInfoFieldNumber;
const int HeroProto::kDailyWheelCountFieldNumber;
const int HeroProto::kFinishedXinMoSceneIdFieldNumber;
const int HeroProto::kCollectedRechargeRankPromotionPrizeFieldNumber;
const int HeroProto::kCollectedRankPromotionPrizeFieldNumber;
const int HeroProto::kArenaPairPointFieldNumber;
const int HeroProto::kTodayFinishedArenaCountFieldNumber;
const int HeroProto::kArenaShopPointFieldNumber;
const int HeroProto::kArenaCollectableShopPointFieldNumber;
const int HeroProto::kArenaYesterdayFinishCountFieldNumber;
const int HeroProto::kArenaYesterdayPairPointFieldNumber;
const int HeroProto::kArenaYesterdayOriginalShopPointFieldNumber;
const int HeroProto::kArenaShopPointAddedTodayByWinFieldNumber;
const int HeroProto::kNextCanUseGuildLilianTimeFieldNumber;
const int HeroProto::kGuildDungeonCollectedPrizeFieldNumber;
const int HeroProto::kSuperArmFieldNumber;
const int HeroProto::kDemonFieldNumber;
const int HeroProto::kCloakFieldNumber;
const int HeroProto::kPetCombineAddedLifeFieldNumber;
const int HeroProto::kPetNextCanCombineTimeFieldNumber;
const int HeroProto::kGallupAnsweredQuestionCountFieldNumber;
const int HeroProto::kGallupTodayAnsweredQuestionCountFieldNumber;
const int HeroProto::kMarriageFieldNumber;
const int HeroProto::kWashSuperWeaponBlessClearTimeFieldNumber;
const int HeroProto::kTianMenTimesFieldNumber;
const int HeroProto::kHasCollectGuildPlantPrizeFieldNumber;
const int HeroProto::kHideCityMasterFieldNumber;
const int HeroProto::kHideLongCityMasterFieldNumber;
const int HeroProto::kP37VipPrizeCountFlagFieldNumber;
const int HeroProto::kLastChangeNameTimeFieldNumber;
const int HeroProto::kNextCanChangeRaceTimeFieldNumber;
const int HeroProto::kHtzTimesFieldNumber;
const int HeroProto::kHtzMaxDestroyRecordFieldNumber;
const int HeroProto::kHtzTimeRecordFieldNumber;
const int HeroProto::kLimitCountGoodsIdFieldNumber;
const int HeroProto::kLimitCountGoodsUseTimesFieldNumber;
const int HeroProto::kSingleWashSuperWeaponBlessClearTimeFieldNumber;
const int HeroProto::kSingleWashSuperWeaponBlessTypeFieldNumber;
const int HeroProto::kArenaFightingTeamNameBytesFieldNumber;
const int HeroProto::kArenaFightingTeamShopPointFieldNumber;
const int HeroProto::kArenaFightingTeamShopPointAddedTodayByWinFieldNumber;
const int HeroProto::kMoBingProtoFieldNumber;
const int HeroProto::kUseMountTonglingIdFieldNumber;
const int HeroProto::kActiveMountTonglingIdsFieldNumber;
const int HeroProto::kChangeUseMountTonglingIdCdTimeFieldNumber;
const int HeroProto::kMountTonglingWakeValueFieldNumber;
const int HeroProto::kNotSaveXunZhangRandomStat1FieldNumber;
const int HeroProto::kNotSaveXunZhangRandomStat2FieldNumber;
const int HeroProto::kFinishedCollectedFightAmoutChangedValueRankDailyPrizeFieldNumber;
const int HeroProto::kFinishedYyPurpleDungeonCountFieldNumber;
const int HeroProto::kHeChengGoodsIdFieldNumber;
const int HeroProto::kHeChengGoodsCountFieldNumber;
const int HeroProto::kChristmasStorageGoodsCountFieldNumber;
const int HeroProto::kCreditsFieldNumber;
const int HeroProto::kMonopolyNowCellIdFieldNumber;
const int HeroProto::kMonopolyNowRollTimesCostFieldNumber;
const int HeroProto::kMonopolyRollTimesFieldNumber;
const int HeroProto::kMonopolyBuyRollTimesFieldNumber;
const int HeroProto::kCreditsDrawStorageGoodsCountFieldNumber;
const int HeroProto::kLoveFieldNumber;
const int HeroProto::kWuDaoFieldNumber;
const int HeroProto::kNiDaoQianKunFieldNumber;
const int HeroProto::kFinishedTongTianTaDungeonSequenceFieldNumber;
const int HeroProto::kTongTianTaDungeonDailyTimesFieldNumber;
const int HeroProto::kTongTianTaDungeonUseTimesFieldNumber;
const int HeroProto::kTongTianTaDungeonRefreshTimesFieldNumber;
const int HeroProto::kAnniversaryFieldNumber;
const int HeroProto::kFireworkColorValuesFieldNumber;
const int HeroProto::kFireworkPromotionStartTimeFieldNumber;
const int HeroProto::kFireworkPromotionEndTimeFieldNumber;
const int HeroProto::kAnniversaryTaskFieldNumber;
const int HeroProto::kIsGainHuegeDataPrizeFieldNumber;
const int HeroProto::kShieldFieldNumber;
const int HeroProto::kFinishedLingYunIdFieldNumber;
const int HeroProto::kFinishedLongMaiIdFieldNumber;
const int HeroProto::kFinishedZhongHuaGeIdFieldNumber;
const int HeroProto::kDefenceDungeonStateFieldNumber;
const int HeroProto::kLingGuangFieldNumber;
const int HeroProto::kLingGuangPickFieldNumber;
const int HeroProto::kMysteryDungeonUseTimeFieldNumber;
const int HeroProto::kBossCardFieldNumber;
const int HeroProto::kHaidiFieldNumber;
const int HeroProto::kBowTongLingDisplayIdFieldNumber;
const int HeroProto::kBowTongLingFieldNumber;
const int HeroProto::kSysHongBaoColletedTimeFieldNumber;
const int HeroProto::kTianXieFieldNumber;
const int HeroProto::kJianDaoFieldNumber;
const int HeroProto::kLingYuFieldNumber;
const int HeroProto::kFengYunDaoFieldNumber;
const int HeroProto::kPetTongLingFieldNumber;
const int HeroProto::kPetTongLingDisplayIdFieldNumber;
const int HeroProto::kPetTongLingSingleSpellFieldNumber;
const int HeroProto::kMoFangFieldNumber;
const int HeroProto::kHellDungeonEnterCountFieldNumber;
#endif  // !_MSC_VER

HeroProto::HeroProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroProto::InitAsDefaultInstance() {
  depot_ = const_cast< ::app::message::GoodsContainerProto*>(&::app::message::GoodsContainerProto::default_instance());
  total_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  task_ = const_cast< ::app::message::HeroTaskProto*>(&::app::message::HeroTaskProto::default_instance());
  bow_ = const_cast< ::app::message::BowProto*>(&::app::message::BowProto::default_instance());
  super_weapon_max_level_add_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  magic_added_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  magic_not_saved_added_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  mount_ = const_cast< ::app::message::MountProto*>(&::app::message::MountProto::default_instance());
  pet_ = const_cast< ::app::message::PetProto*>(&::app::message::PetProto::default_instance());
  client_relation_ = const_cast< ::app::message::ClientRelation*>(&::app::message::ClientRelation::default_instance());
  tian_zui_ = const_cast< ::app::message::TianZuiProto*>(&::app::message::TianZuiProto::default_instance());
  tian_jie_ = const_cast< ::app::message::TianJieProto*>(&::app::message::TianJieProto::default_instance());
  achievement_ = const_cast< ::app::message::AchievementInfoProto*>(&::app::message::AchievementInfoProto::default_instance());
  shou_cang_ = const_cast< ::app::message::ShouCangProto*>(&::app::message::ShouCangProto::default_instance());
  jing_jie_ = const_cast< ::app::message::HeroJingJieProto*>(&::app::message::HeroJingJieProto::default_instance());
  yitianshenjue_info_ = const_cast< ::app::message::YitianshenjueProto*>(&::app::message::YitianshenjueProto::default_instance());
  guild_dungeon_collected_prize_ = const_cast< ::app::message::GuildDungeonCollectedPrizeProto*>(&::app::message::GuildDungeonCollectedPrizeProto::default_instance());
  super_arm_ = const_cast< ::app::message::HeroSuperArmProto*>(&::app::message::HeroSuperArmProto::default_instance());
  demon_ = const_cast< ::app::message::DemonProto*>(&::app::message::DemonProto::default_instance());
  cloak_ = const_cast< ::app::message::CloakProto*>(&::app::message::CloakProto::default_instance());
  marriage_ = const_cast< ::app::message::HeroMarriageProto*>(&::app::message::HeroMarriageProto::default_instance());
  mo_bing_proto_ = const_cast< ::app::message::MoBingProto*>(&::app::message::MoBingProto::default_instance());
  love_ = const_cast< ::app::message::HeroLoveProto*>(&::app::message::HeroLoveProto::default_instance());
  wu_dao_ = const_cast< ::app::message::WuDaoProto*>(&::app::message::WuDaoProto::default_instance());
  ni_dao_qian_kun_ = const_cast< ::app::message::NiDaoQianKunClient*>(&::app::message::NiDaoQianKunClient::default_instance());
  anniversary_ = const_cast< ::app::message::HeroAnniversaryProto*>(&::app::message::HeroAnniversaryProto::default_instance());
  anniversary_task_ = const_cast< ::app::message::HeroAnniversaryTaskProto*>(&::app::message::HeroAnniversaryTaskProto::default_instance());
  shield_ = const_cast< ::app::message::ShieldProto*>(&::app::message::ShieldProto::default_instance());
  boss_card_ = const_cast< ::app::message::HeroBossCard*>(&::app::message::HeroBossCard::default_instance());
  haidi_ = const_cast< ::app::message::HaidiInfoProto*>(&::app::message::HaidiInfoProto::default_instance());
  tian_xie_ = const_cast< ::app::message::TianXieProto*>(&::app::message::TianXieProto::default_instance());
  jiandao_ = const_cast< ::app::message::JianDaoProto*>(&::app::message::JianDaoProto::default_instance());
  lingyu_ = const_cast< ::app::message::LingYuProto*>(&::app::message::LingYuProto::default_instance());
  fengyundao_ = const_cast< ::app::message::FengYunDaoProto*>(&::app::message::FengYunDaoProto::default_instance());
  mo_fang_ = const_cast< ::app::message::MoFangClientProto*>(&::app::message::MoFangClientProto::default_instance());
}

HeroProto::HeroProto(const HeroProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroProto::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  race_ = 0;
  sceneid_ = 0;
  yuanbao_ = 0;
  lijin_ = 0;
  money_ = 0;
  depot_ = NULL;
  real_air_ = 0;
  fighting_amount_ = 0;
  total_stat_ = NULL;
  exp_ = GOOGLE_LONGLONG(0);
  upgrade_exp_ = GOOGLE_LONGLONG(0);
  equipment_resources_ = GOOGLE_LONGLONG(0);
  has_storage_ = false;
  team_auto_accept_invite_ = true;
  team_auto_accept_request_ = true;
  team_forbid_other_invite_me_join_ = false;
  trade_auto_reject_invite_ = false;
  task_ = NULL;
  client_only_config_1_ = GOOGLE_LONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_auto_accept_invite_ = false;
  guild_forbid_other_invite_me_join_ = false;
  guild_flag_level_ = 0;
  guild_li_lian_ = 0;
  guild_contribution_ = 0;
  is_ws_city_master_ = false;
  is_long_city_master_ = false;
  is_guild_leader_ = false;
  is_territory_leader_ = false;
  accumulated_offline_time_ = GOOGLE_LONGLONG(0);
  vip_exp_ = 0;
  auto_finish_story_id_ = 0;
  auto_finish_story_complete_time_ = GOOGLE_LONGLONG(0);
  finished_challenge_dungeon_sequence_id_ = 0;
  defence_today_finished_batch_ = 0;
  defence_history_max_batch_ = 0;
  defence_today_reset_count_ = 0;
  defence_collected_first_pass_prize_ = 0;
  sou_shen_point_ = 0;
  ling_yun_today_entered_times_ = 0;
  ling_yun_today_finish_state_ = 0;
  long_mai_today_first_passed_ = false;
  wu_jue_today_entered_times_ = 0;
  wu_jue_today_collected_first_try_transport_prize_times_ = 0;
  sheng_wang_ = 0;
  use_free_chat_times_ = 0;
  bow_ = NULL;
  last_logout_time_ = GOOGLE_LONGLONG(0);
  collected_vip_prize_ = 0;
  next_collect_vip_weekly_prize_time_ = GOOGLE_LONGLONG(0);
  using_weapon_ = 0;
  super_weapon_max_level_add_stat_ = NULL;
  has_magic_weapon_ = false;
  magic_added_stat_ = NULL;
  magic_not_saved_added_stat_ = NULL;
  divine_times_ = 0;
  divine_amount_ = 0;
  divine_storage_goods_count_ = 0;
  mount_ = NULL;
  lottery_ = 0;
  daily_online_acc_time_ = GOOGLE_LONGLONG(0);
  sign_ = 0;
  sign_prize_ = 0;
  replenish_sign_times_ = 0;
  next_reduce_pk_amount_time_ = GOOGLE_LONGLONG(0);
  pk_amount_ = 0;
  relive_protected_end_time_ = GOOGLE_LONGLONG(0);
  total_sign_times_ = 0;
  total_recharge_yuanbao_ = 0;
  pet_ = NULL;
  has_recharge_ = false;
  spell_added_upgrade_level_ = 0;
  default_spell_pos_ = 0;
  jump_shield_ = 0;
  stamina_ = 0;
  client_relation_ = NULL;
  rage_amount_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  is_collect_local_login_first_prize_ = false;
  is_collect_local_login_daily_prize_ = false;
  phoenix_refine_times_ = 0;
  is_cross_single_story_ = false;
  phoenix_money_refine_times_ = 0;
  phoenix_lijin_refine_times_ = 0;
  phoenix_yuanbao_refine_times_ = 0;
  login_day_ = 0;
  tu_long_today_entered_times_ = 0;
  melt_amount_ = 0;
  challenge_dungeon_daily_times_ = 0;
  challenge_dungeon_assist_times_ = 0;
  honor_ = 0;
  tian_zui_ = NULL;
  tian_jie_ = NULL;
  first_recharge_collect_index_ = 0;
  login_prize_info_ = 0;
  invest_upgrade_bank_money_ = 0;
  invest_monthly_bank_money_ = 0;
  invest_monthly_bank_time_ = GOOGLE_LONGLONG(0);
  monthly_bank_prev_collect_time_ = GOOGLE_LONGLONG(0);
  monthly_bank_prev_collect_time2_ = GOOGLE_LONGLONG(0);
  monthly_bank_online_lijin_ = 0;
  monthly_bank_base_lijin_ = 0;
  monthly_bank_online_hours_ = 0;
  total_online_time_ = GOOGLE_LONGLONG(0);
  achievement_ = NULL;
  shou_cang_ = NULL;
  zhong_hua_ge_today_first_passed_ = false;
  gaoji_melt_amount_ = 0;
  left_ya_biao_times_today_ = 0;
  left_jie_biao_times_today_ = 0;
  has_safe_code_ = false;
  safe_code_question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mo_shi_is_hide_ = false;
  qian_qiu_da_jie_is_hide_ = false;
  long_yuan_ = 0;
  jing_jie_ = NULL;
  chi_huo_shen_gong_jie_shu_ = 0;
  chi_huo_shen_gong_ceng_shu_ = 0;
  chi_huo_shen_gong_bless_amount_ = 0;
  chi_huo_shen_gong_bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  chi_huo_shen_gong_qian_neng_use_count_ = 0;
  chi_huo_shen_gong_huan_hua_use_count_ = 0;
  chi_huo_shen_gong_qian_neng_extra_max_use_count_ = 0;
  chi_huo_shen_gong_huan_hua_extra_max_use_count_ = 0;
  chi_huo_shen_gong_qian_neng_max_use_count_extra_times_ = 0;
  chi_huo_shen_gong_huan_hua_max_use_count_extra_times_ = 0;
  chi_huo_shen_gong_is_hide_ = false;
  draw_prize_point_ = 0;
  draw_prize_storage_goods_count_ = 0;
  lucky_draw_prize_point_ = 0;
  lucky_draw_prize_storage_goods_count_ = 0;
  new_draw_prize_point_ = 0;
  new_draw_prize_storage_goods_count_ = 0;
  yitianshenjue_info_ = NULL;
  daily_wheel_count_ = 0;
  arena_pair_point_ = 0;
  today_finished_arena_count_ = 0;
  arena_shop_point_ = 0;
  arena_collectable_shop_point_ = 0;
  arena_yesterday_finish_count_ = 0;
  arena_yesterday_pair_point_ = 0;
  arena_yesterday_original_shop_point_ = 0;
  arena_shop_point_added_today_by_win_ = 0;
  next_can_use_guild_lilian_time_ = GOOGLE_LONGLONG(0);
  guild_dungeon_collected_prize_ = NULL;
  super_arm_ = NULL;
  demon_ = NULL;
  cloak_ = NULL;
  pet_combine_added_life_ = GOOGLE_LONGLONG(0);
  pet_next_can_combine_time_ = GOOGLE_LONGLONG(0);
  gallup_answered_question_count_ = 0;
  gallup_today_answered_question_count_ = 0;
  marriage_ = NULL;
  wash_super_weapon_bless_clear_time_ = GOOGLE_LONGLONG(0);
  tian_men_times_ = 0;
  has_collect_guild_plant_prize_ = false;
  hide_city_master_ = false;
  hide_long_city_master_ = false;
  p37_vip_prize_count_flag_ = 0;
  last_change_name_time_ = GOOGLE_LONGLONG(0);
  next_can_change_race_time_ = GOOGLE_LONGLONG(0);
  htz_times_ = 0;
  htz_max_destroy_record_ = 0;
  htz_time_record_ = 0;
  arena_fighting_team_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arena_fighting_team_shop_point_ = 0;
  arena_fighting_team_shop_point_added_today_by_win_ = 0;
  mo_bing_proto_ = NULL;
  use_mount_tongling_id_ = 0;
  change_use_mount_tongling_id_cd_time_ = GOOGLE_LONGLONG(0);
  finished_collected_fight_amout_changed_value_rank_daily_prize_ = false;
  christmas_storage_goods_count_ = 0;
  credits_ = 0;
  monopoly_now_cell_id_ = 0;
  monopoly_now_roll_times_cost_ = 0;
  monopoly_roll_times_ = 0;
  monopoly_buy_roll_times_ = 0;
  credits_draw_storage_goods_count_ = 0;
  love_ = NULL;
  wu_dao_ = NULL;
  ni_dao_qian_kun_ = NULL;
  finished_tong_tian_ta_dungeon_sequence_ = 0;
  tong_tian_ta_dungeon_daily_times_ = 0;
  tong_tian_ta_dungeon_refresh_times_ = 0;
  anniversary_ = NULL;
  firework_promotion_start_time_ = GOOGLE_LONGLONG(0);
  firework_promotion_end_time_ = GOOGLE_LONGLONG(0);
  anniversary_task_ = NULL;
  is_gain_huege_data_prize_ = false;
  shield_ = NULL;
  ling_guang_ = 0;
  ling_guang_pick_ = 0;
  mystery_dungeon_use_time_ = 0;
  boss_card_ = NULL;
  haidi_ = NULL;
  bow_tong_ling_display_id_ = 0;
  sys_hong_bao_colleted_time_ = GOOGLE_LONGLONG(0);
  tian_xie_ = NULL;
  jiandao_ = NULL;
  lingyu_ = NULL;
  fengyundao_ = NULL;
  pet_tong_ling_display_id_ = 0;
  mo_fang_ = NULL;
  hell_dungeon_enter_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroProto::~HeroProto() {
  SharedDtor();
}

void HeroProto::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (safe_code_question_ != &::google::protobuf::internal::kEmptyString) {
    delete safe_code_question_;
  }
  if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete arena_fighting_team_name_bytes_;
  }
  if (this != default_instance_) {
    delete depot_;
    delete total_stat_;
    delete task_;
    delete bow_;
    delete super_weapon_max_level_add_stat_;
    delete magic_added_stat_;
    delete magic_not_saved_added_stat_;
    delete mount_;
    delete pet_;
    delete client_relation_;
    delete tian_zui_;
    delete tian_jie_;
    delete achievement_;
    delete shou_cang_;
    delete jing_jie_;
    delete yitianshenjue_info_;
    delete guild_dungeon_collected_prize_;
    delete super_arm_;
    delete demon_;
    delete cloak_;
    delete marriage_;
    delete mo_bing_proto_;
    delete love_;
    delete wu_dao_;
    delete ni_dao_qian_kun_;
    delete anniversary_;
    delete anniversary_task_;
    delete shield_;
    delete boss_card_;
    delete haidi_;
    delete tian_xie_;
    delete jiandao_;
    delete lingyu_;
    delete fengyundao_;
    delete mo_fang_;
  }
}

void HeroProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroProto_descriptor_;
}

const HeroProto& HeroProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroProto* HeroProto::default_instance_ = NULL;

HeroProto* HeroProto::New() const {
  return new HeroProto;
}

void HeroProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    race_ = 0;
    sceneid_ = 0;
    yuanbao_ = 0;
    lijin_ = 0;
    money_ = 0;
    if (has_depot()) {
      if (depot_ != NULL) depot_->::app::message::GoodsContainerProto::Clear();
    }
    real_air_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fighting_amount_ = 0;
    if (has_total_stat()) {
      if (total_stat_ != NULL) total_stat_->::app::message::SpriteStatProto::Clear();
    }
    exp_ = GOOGLE_LONGLONG(0);
    upgrade_exp_ = GOOGLE_LONGLONG(0);
    equipment_resources_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    has_storage_ = false;
    team_auto_accept_invite_ = true;
    team_auto_accept_request_ = true;
    team_forbid_other_invite_me_join_ = false;
    trade_auto_reject_invite_ = false;
    if (has_task()) {
      if (task_ != NULL) task_->::app::message::HeroTaskProto::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    client_only_config_1_ = GOOGLE_LONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    guild_auto_accept_invite_ = false;
    guild_forbid_other_invite_me_join_ = false;
    guild_flag_level_ = 0;
    guild_li_lian_ = 0;
    guild_contribution_ = 0;
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    is_ws_city_master_ = false;
    is_long_city_master_ = false;
    is_guild_leader_ = false;
    is_territory_leader_ = false;
    accumulated_offline_time_ = GOOGLE_LONGLONG(0);
    vip_exp_ = 0;
  }
  if (_has_bits_[42 / 32] & (0xffu << (42 % 32))) {
    auto_finish_story_id_ = 0;
    auto_finish_story_complete_time_ = GOOGLE_LONGLONG(0);
    finished_challenge_dungeon_sequence_id_ = 0;
    defence_today_finished_batch_ = 0;
    defence_history_max_batch_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    defence_today_reset_count_ = 0;
    defence_collected_first_pass_prize_ = 0;
    sou_shen_point_ = 0;
    ling_yun_today_entered_times_ = 0;
    ling_yun_today_finish_state_ = 0;
  }
  if (_has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    long_mai_today_first_passed_ = false;
    wu_jue_today_entered_times_ = 0;
    wu_jue_today_collected_first_try_transport_prize_times_ = 0;
    sheng_wang_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    use_free_chat_times_ = 0;
    if (has_bow()) {
      if (bow_ != NULL) bow_->::app::message::BowProto::Clear();
    }
    last_logout_time_ = GOOGLE_LONGLONG(0);
    collected_vip_prize_ = 0;
    next_collect_vip_weekly_prize_time_ = GOOGLE_LONGLONG(0);
    using_weapon_ = 0;
  }
  if (_has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    if (has_super_weapon_max_level_add_stat()) {
      if (super_weapon_max_level_add_stat_ != NULL) super_weapon_max_level_add_stat_->::app::message::SpriteStatProto::Clear();
    }
    has_magic_weapon_ = false;
    if (has_magic_added_stat()) {
      if (magic_added_stat_ != NULL) magic_added_stat_->::app::message::SpriteStatProto::Clear();
    }
    if (has_magic_not_saved_added_stat()) {
      if (magic_not_saved_added_stat_ != NULL) magic_not_saved_added_stat_->::app::message::SpriteStatProto::Clear();
    }
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    divine_times_ = 0;
    divine_amount_ = 0;
    divine_storage_goods_count_ = 0;
    if (has_mount()) {
      if (mount_ != NULL) mount_->::app::message::MountProto::Clear();
    }
    lottery_ = 0;
    daily_online_acc_time_ = GOOGLE_LONGLONG(0);
    sign_ = 0;
    sign_prize_ = 0;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    replenish_sign_times_ = 0;
    next_reduce_pk_amount_time_ = GOOGLE_LONGLONG(0);
    pk_amount_ = 0;
    relive_protected_end_time_ = GOOGLE_LONGLONG(0);
    total_sign_times_ = 0;
    total_recharge_yuanbao_ = 0;
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (has_pet()) {
      if (pet_ != NULL) pet_->::app::message::PetProto::Clear();
    }
    has_recharge_ = false;
    spell_added_upgrade_level_ = 0;
  }
  if (_has_bits_[105 / 32] & (0xffu << (105 % 32))) {
    default_spell_pos_ = 0;
    jump_shield_ = 0;
    stamina_ = 0;
    if (has_client_relation()) {
      if (client_relation_ != NULL) client_relation_->::app::message::ClientRelation::Clear();
    }
    rage_amount_ = 0;
    create_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    is_collect_local_login_first_prize_ = false;
    is_collect_local_login_daily_prize_ = false;
    phoenix_refine_times_ = 0;
    is_cross_single_story_ = false;
    phoenix_money_refine_times_ = 0;
    phoenix_lijin_refine_times_ = 0;
    phoenix_yuanbao_refine_times_ = 0;
    login_day_ = 0;
  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    tu_long_today_entered_times_ = 0;
    melt_amount_ = 0;
    challenge_dungeon_daily_times_ = 0;
    challenge_dungeon_assist_times_ = 0;
    honor_ = 0;
    if (has_tian_zui()) {
      if (tian_zui_ != NULL) tian_zui_->::app::message::TianZuiProto::Clear();
    }
    if (has_tian_jie()) {
      if (tian_jie_ != NULL) tian_jie_->::app::message::TianJieProto::Clear();
    }
  }
  if (_has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    first_recharge_collect_index_ = 0;
    login_prize_info_ = 0;
    invest_upgrade_bank_money_ = 0;
    invest_monthly_bank_money_ = 0;
    invest_monthly_bank_time_ = GOOGLE_LONGLONG(0);
    monthly_bank_prev_collect_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    monthly_bank_prev_collect_time2_ = GOOGLE_LONGLONG(0);
    monthly_bank_online_lijin_ = 0;
    monthly_bank_base_lijin_ = 0;
    monthly_bank_online_hours_ = 0;
    total_online_time_ = GOOGLE_LONGLONG(0);
    if (has_achievement()) {
      if (achievement_ != NULL) achievement_->::app::message::AchievementInfoProto::Clear();
    }
    if (has_shou_cang()) {
      if (shou_cang_ != NULL) shou_cang_->::app::message::ShouCangProto::Clear();
    }
    zhong_hua_ge_today_first_passed_ = false;
  }
  if (_has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    gaoji_melt_amount_ = 0;
    left_ya_biao_times_today_ = 0;
    left_jie_biao_times_today_ = 0;
    has_safe_code_ = false;
    if (has_safe_code_question()) {
      if (safe_code_question_ != &::google::protobuf::internal::kEmptyString) {
        safe_code_question_->clear();
      }
    }
  }
  if (_has_bits_[159 / 32] & (0xffu << (159 % 32))) {
    mo_shi_is_hide_ = false;
  }
  if (_has_bits_[166 / 32] & (0xffu << (166 % 32))) {
    qian_qiu_da_jie_is_hide_ = false;
  }
  if (_has_bits_[171 / 32] & (0xffu << (171 % 32))) {
    long_yuan_ = 0;
    if (has_jing_jie()) {
      if (jing_jie_ != NULL) jing_jie_->::app::message::HeroJingJieProto::Clear();
    }
  }
  if (_has_bits_[179 / 32] & (0xffu << (179 % 32))) {
    chi_huo_shen_gong_jie_shu_ = 0;
    chi_huo_shen_gong_ceng_shu_ = 0;
    chi_huo_shen_gong_bless_amount_ = 0;
    chi_huo_shen_gong_bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    chi_huo_shen_gong_qian_neng_use_count_ = 0;
  }
  if (_has_bits_[184 / 32] & (0xffu << (184 % 32))) {
    chi_huo_shen_gong_huan_hua_use_count_ = 0;
    chi_huo_shen_gong_qian_neng_extra_max_use_count_ = 0;
    chi_huo_shen_gong_huan_hua_extra_max_use_count_ = 0;
    chi_huo_shen_gong_qian_neng_max_use_count_extra_times_ = 0;
    chi_huo_shen_gong_huan_hua_max_use_count_extra_times_ = 0;
    chi_huo_shen_gong_is_hide_ = false;
    draw_prize_point_ = 0;
    draw_prize_storage_goods_count_ = 0;
  }
  if (_has_bits_[193 / 32] & (0xffu << (193 % 32))) {
    lucky_draw_prize_point_ = 0;
    lucky_draw_prize_storage_goods_count_ = 0;
    new_draw_prize_point_ = 0;
    new_draw_prize_storage_goods_count_ = 0;
    if (has_yitianshenjue_info()) {
      if (yitianshenjue_info_ != NULL) yitianshenjue_info_->::app::message::YitianshenjueProto::Clear();
    }
    daily_wheel_count_ = 0;
  }
  if (_has_bits_[202 / 32] & (0xffu << (202 % 32))) {
    arena_pair_point_ = 0;
    today_finished_arena_count_ = 0;
    arena_shop_point_ = 0;
    arena_collectable_shop_point_ = 0;
    arena_yesterday_finish_count_ = 0;
    arena_yesterday_pair_point_ = 0;
  }
  if (_has_bits_[208 / 32] & (0xffu << (208 % 32))) {
    arena_yesterday_original_shop_point_ = 0;
    arena_shop_point_added_today_by_win_ = 0;
    next_can_use_guild_lilian_time_ = GOOGLE_LONGLONG(0);
    if (has_guild_dungeon_collected_prize()) {
      if (guild_dungeon_collected_prize_ != NULL) guild_dungeon_collected_prize_->::app::message::GuildDungeonCollectedPrizeProto::Clear();
    }
    if (has_super_arm()) {
      if (super_arm_ != NULL) super_arm_->::app::message::HeroSuperArmProto::Clear();
    }
    if (has_demon()) {
      if (demon_ != NULL) demon_->::app::message::DemonProto::Clear();
    }
    if (has_cloak()) {
      if (cloak_ != NULL) cloak_->::app::message::CloakProto::Clear();
    }
    pet_combine_added_life_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[216 / 32] & (0xffu << (216 % 32))) {
    pet_next_can_combine_time_ = GOOGLE_LONGLONG(0);
    gallup_answered_question_count_ = 0;
    gallup_today_answered_question_count_ = 0;
    if (has_marriage()) {
      if (marriage_ != NULL) marriage_->::app::message::HeroMarriageProto::Clear();
    }
    wash_super_weapon_bless_clear_time_ = GOOGLE_LONGLONG(0);
    tian_men_times_ = 0;
    has_collect_guild_plant_prize_ = false;
    hide_city_master_ = false;
  }
  if (_has_bits_[224 / 32] & (0xffu << (224 % 32))) {
    hide_long_city_master_ = false;
    p37_vip_prize_count_flag_ = 0;
    last_change_name_time_ = GOOGLE_LONGLONG(0);
    next_can_change_race_time_ = GOOGLE_LONGLONG(0);
    htz_times_ = 0;
    htz_max_destroy_record_ = 0;
    htz_time_record_ = 0;
  }
  if (_has_bits_[235 / 32] & (0xffu << (235 % 32))) {
    if (has_arena_fighting_team_name_bytes()) {
      if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
        arena_fighting_team_name_bytes_->clear();
      }
    }
    arena_fighting_team_shop_point_ = 0;
    arena_fighting_team_shop_point_added_today_by_win_ = 0;
    if (has_mo_bing_proto()) {
      if (mo_bing_proto_ != NULL) mo_bing_proto_->::app::message::MoBingProto::Clear();
    }
    use_mount_tongling_id_ = 0;
  }
  if (_has_bits_[241 / 32] & (0xffu << (241 % 32))) {
    change_use_mount_tongling_id_cd_time_ = GOOGLE_LONGLONG(0);
    finished_collected_fight_amout_changed_value_rank_daily_prize_ = false;
  }
  if (_has_bits_[249 / 32] & (0xffu << (249 % 32))) {
    christmas_storage_goods_count_ = 0;
    credits_ = 0;
    monopoly_now_cell_id_ = 0;
    monopoly_now_roll_times_cost_ = 0;
    monopoly_roll_times_ = 0;
    monopoly_buy_roll_times_ = 0;
    credits_draw_storage_goods_count_ = 0;
  }
  if (_has_bits_[256 / 32] & (0xffu << (256 % 32))) {
    if (has_love()) {
      if (love_ != NULL) love_->::app::message::HeroLoveProto::Clear();
    }
    if (has_wu_dao()) {
      if (wu_dao_ != NULL) wu_dao_->::app::message::WuDaoProto::Clear();
    }
    if (has_ni_dao_qian_kun()) {
      if (ni_dao_qian_kun_ != NULL) ni_dao_qian_kun_->::app::message::NiDaoQianKunClient::Clear();
    }
    finished_tong_tian_ta_dungeon_sequence_ = 0;
    tong_tian_ta_dungeon_daily_times_ = 0;
    tong_tian_ta_dungeon_refresh_times_ = 0;
    if (has_anniversary()) {
      if (anniversary_ != NULL) anniversary_->::app::message::HeroAnniversaryProto::Clear();
    }
  }
  if (_has_bits_[265 / 32] & (0xffu << (265 % 32))) {
    firework_promotion_start_time_ = GOOGLE_LONGLONG(0);
    firework_promotion_end_time_ = GOOGLE_LONGLONG(0);
    if (has_anniversary_task()) {
      if (anniversary_task_ != NULL) anniversary_task_->::app::message::HeroAnniversaryTaskProto::Clear();
    }
    is_gain_huege_data_prize_ = false;
    if (has_shield()) {
      if (shield_ != NULL) shield_->::app::message::ShieldProto::Clear();
    }
  }
  if (_has_bits_[274 / 32] & (0xffu << (274 % 32))) {
    ling_guang_ = 0;
    ling_guang_pick_ = 0;
    mystery_dungeon_use_time_ = 0;
    if (has_boss_card()) {
      if (boss_card_ != NULL) boss_card_->::app::message::HeroBossCard::Clear();
    }
    if (has_haidi()) {
      if (haidi_ != NULL) haidi_->::app::message::HaidiInfoProto::Clear();
    }
    bow_tong_ling_display_id_ = 0;
  }
  if (_has_bits_[281 / 32] & (0xffu << (281 % 32))) {
    sys_hong_bao_colleted_time_ = GOOGLE_LONGLONG(0);
    if (has_tian_xie()) {
      if (tian_xie_ != NULL) tian_xie_->::app::message::TianXieProto::Clear();
    }
    if (has_jiandao()) {
      if (jiandao_ != NULL) jiandao_->::app::message::JianDaoProto::Clear();
    }
    if (has_lingyu()) {
      if (lingyu_ != NULL) lingyu_->::app::message::LingYuProto::Clear();
    }
    if (has_fengyundao()) {
      if (fengyundao_ != NULL) fengyundao_->::app::message::FengYunDaoProto::Clear();
    }
    pet_tong_ling_display_id_ = 0;
  }
  if (_has_bits_[289 / 32] & (0xffu << (289 % 32))) {
    if (has_mo_fang()) {
      if (mo_fang_ != NULL) mo_fang_->::app::message::MoFangClientProto::Clear();
    }
    hell_dungeon_enter_count_ = 0;
  }
  equiped_pos_.Clear();
  equipment_datas_.Clear();
  equipments_.Clear();
  buy_back_goods_datas_.Clear();
  buy_back_goods_list_.Clear();
  client_only_int_configs_.Clear();
  friend_guild_name_.Clear();
  enemy_guild_name_.Clear();
  story_dungeon_proto_.Clear();
  story_dungeon_collectable_prize_proto_.Clear();
  finished_vip_dungeon_id_.Clear();
  defence_collectable_prize_.Clear();
  sou_shen_today_passed_id_.Clear();
  sou_shen_life_passed_id_.Clear();
  group_collectable_prize_proto_.Clear();
  territory_today_collected_prize_scene_id_.Clear();
  daily_activity_result_.Clear();
  sheng_wang_task_.Clear();
  gems_.Clear();
  admired_hero_.Clear();
  super_weapon_.Clear();
  has_unlock_magic_weapon_gem_.Clear();
  magic_weapon_gem_level_.Clear();
  magic_weapon_gem_binded_.Clear();
  lottery_goods_static_data_.Clear();
  lottery_goods_dynamic_data_.Clear();
  combine_spells_.Clear();
  passive_spell_.Clear();
  active_spell_.Clear();
  active_spell_used_times_.Clear();
  shortcut_spell_type_.Clear();
  shortcut_spell_pos_.Clear();
  func_bits_.Clear();
  challenge_dungeon_use_times_.Clear();
  collect_upgrade_bank_level_.Clear();
  collect_upgrade_bank_lijin_.Clear();
  jin_jie_lucky_card_type_.Clear();
  jin_jie_lucky_card_expire_time_.Clear();
  jin_jie_lucky_card_rate_.Clear();
  daily_card_use_stat_goods_id_.Clear();
  daily_card_use_stat_use_count_.Clear();
  mo_shi_type_.Clear();
  mo_shi_level_.Clear();
  mo_shi_bless_amount_.Clear();
  mo_shi_bless_amount_clear_time_.Clear();
  mo_shi_spell_id_.Clear();
  qian_qiu_da_jie_type_.Clear();
  qian_qiu_da_jie_level_.Clear();
  qian_qiu_da_jie_bless_amount_.Clear();
  qian_qiu_da_jie_bless_amount_clear_time_.Clear();
  qian_qiu_da_jie_qian_neng_use_count_.Clear();
  qian_qiu_da_jie_huan_hua_use_count_.Clear();
  qian_qiu_da_jie_qian_neng_extra_max_use_count_.Clear();
  qian_qiu_da_jie_huan_hua_extra_max_use_count_.Clear();
  qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.Clear();
  qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.Clear();
  mo_shi_qian_neng_use_count_.Clear();
  mo_shi_huan_hua_use_count_.Clear();
  mo_shi_qian_neng_extra_max_use_count_.Clear();
  mo_shi_huan_hua_extra_max_use_count_.Clear();
  mo_shi_qian_neng_max_use_count_extra_times_.Clear();
  mo_shi_huan_hua_max_use_count_extra_times_.Clear();
  draw_prize_exchange_count_.Clear();
  finished_xin_mo_scene_id_.Clear();
  collected_recharge_rank_promotion_prize_.Clear();
  collected_rank_promotion_prize_.Clear();
  limit_count_goods_id_.Clear();
  limit_count_goods_use_times_.Clear();
  single_wash_super_weapon_bless_clear_time_.Clear();
  single_wash_super_weapon_bless_type_.Clear();
  active_mount_tongling_ids_.Clear();
  mount_tongling_wake_value_.Clear();
  not_save_xun_zhang_random_stat1_.Clear();
  not_save_xun_zhang_random_stat2_.Clear();
  finished_yy_purple_dungeon_count_.Clear();
  he_cheng_goods_id_.Clear();
  he_cheng_goods_count_.Clear();
  tong_tian_ta_dungeon_use_times_.Clear();
  firework_color_values_.Clear();
  finished_ling_yun_id_.Clear();
  finished_long_mai_id_.Clear();
  finished_zhong_hua_ge_id_.Clear();
  defence_dungeon_state_.Clear();
  bow_tong_ling_.Clear();
  pet_tong_ling_.Clear();
  pet_tong_ling_single_spell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_race;
        break;
      }

      // optional int32 race = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneID;
        break;
      }

      // optional int32 sceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yuanbao;
        break;
      }

      // optional int32 yuanbao = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbao_)));
          set_has_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lijin;
        break;
      }

      // optional int32 lijin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lijin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lijin_)));
          set_has_lijin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // optional int32 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_depot;
        break;
      }

      // optional .app.message.GoodsContainerProto depot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_depot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_real_air;
        break;
      }

      // optional int32 real_air = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_air:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_air_)));
          set_has_real_air();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fighting_amount;
        break;
      }

      // optional int32 fighting_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_amount_)));
          set_has_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_total_stat;
        break;
      }

      // optional .app.message.SpriteStatProto total_stat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_equiped_pos;
        break;
      }

      // repeated int32 equiped_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiped_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_equiped_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equiped_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_equiped_pos;
        if (input->ExpectTag(106)) goto parse_equipment_datas;
        break;
      }

      // repeated .app.message.EquipmentDataProto equipment_datas = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_equipment_datas;
        if (input->ExpectTag(114)) goto parse_equipments;
        break;
      }

      // repeated .app.message.EquipmentProto equipments = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_equipments;
        if (input->ExpectTag(120)) goto parse_exp;
        break;
      }

      // optional int64 exp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_upgrade_exp;
        break;
      }

      // optional int64 upgrade_exp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upgrade_exp_)));
          set_has_upgrade_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_equipment_resources;
        break;
      }

      // optional int64 equipment_resources = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_resources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipment_resources_)));
          set_has_equipment_resources();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_has_storage;
        break;
      }

      // optional bool has_storage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_storage_)));
          set_has_has_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_buy_back_goods_datas;
        break;
      }

      // repeated bytes buy_back_goods_datas = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_back_goods_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_buy_back_goods_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_buy_back_goods_datas;
        if (input->ExpectTag(162)) goto parse_buy_back_goods_list;
        break;
      }

      // repeated bytes buy_back_goods_list = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_back_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_buy_back_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_buy_back_goods_list;
        if (input->ExpectTag(168)) goto parse_team_auto_accept_invite;
        break;
      }

      // optional bool team_auto_accept_invite = 21 [default = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_auto_accept_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_auto_accept_invite_)));
          set_has_team_auto_accept_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_team_auto_accept_request;
        break;
      }

      // optional bool team_auto_accept_request = 22 [default = true];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_auto_accept_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_auto_accept_request_)));
          set_has_team_auto_accept_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_trade_auto_reject_invite;
        break;
      }

      // optional bool trade_auto_reject_invite = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_auto_reject_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trade_auto_reject_invite_)));
          set_has_trade_auto_reject_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_task;
        break;
      }

      // optional .app.message.HeroTaskProto task = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_client_only_config_1;
        break;
      }

      // optional int64 client_only_config_1 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_only_config_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_only_config_1_)));
          set_has_client_only_config_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_client_only_int_configs;
        break;
      }

      // repeated int32 client_only_int_configs = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_only_int_configs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 208, input, this->mutable_client_only_int_configs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_client_only_int_configs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_client_only_int_configs;
        if (input->ExpectTag(218)) goto parse_guild_name;
        break;
      }

      // optional bytes guild_name = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_guild_auto_accept_invite;
        break;
      }

      // optional bool guild_auto_accept_invite = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_auto_accept_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guild_auto_accept_invite_)));
          set_has_guild_auto_accept_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_guild_forbid_other_invite_me_join;
        break;
      }

      // optional bool guild_forbid_other_invite_me_join = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_forbid_other_invite_me_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guild_forbid_other_invite_me_join_)));
          set_has_guild_forbid_other_invite_me_join();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_guild_li_lian;
        break;
      }

      // optional int32 guild_li_lian = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_li_lian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_li_lian_)));
          set_has_guild_li_lian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_guild_contribution;
        break;
      }

      // optional int32 guild_contribution = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_contribution_)));
          set_has_guild_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_friend_guild_name;
        break;
      }

      // repeated bytes friend_guild_name = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_friend_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_friend_guild_name;
        if (input->ExpectTag(266)) goto parse_enemy_guild_name;
        break;
      }

      // repeated bytes enemy_guild_name = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_enemy_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_enemy_guild_name;
        if (input->ExpectTag(272)) goto parse_accumulated_offline_time;
        break;
      }

      // optional int64 accumulated_offline_time = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulated_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accumulated_offline_time_)));
          set_has_accumulated_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_vip_exp;
        break;
      }

      // optional int32 vip_exp = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_story_dungeon_proto;
        break;
      }

      // repeated .app.message.StoryDungeonStatProto story_dungeon_proto = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_story_dungeon_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_story_dungeon_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_story_dungeon_proto;
        if (input->ExpectTag(298)) goto parse_story_dungeon_collectable_prize_proto;
        break;
      }

      // repeated .app.message.StoryDungeonCollectablePrizeProto story_dungeon_collectable_prize_proto = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_story_dungeon_collectable_prize_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_story_dungeon_collectable_prize_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_story_dungeon_collectable_prize_proto;
        if (input->ExpectTag(304)) goto parse_auto_finish_story_id;
        break;
      }

      // optional int32 auto_finish_story_id = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_finish_story_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_finish_story_id_)));
          set_has_auto_finish_story_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_auto_finish_story_complete_time;
        break;
      }

      // optional int64 auto_finish_story_complete_time = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_finish_story_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auto_finish_story_complete_time_)));
          set_has_auto_finish_story_complete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_finished_challenge_dungeon_sequence_id;
        break;
      }

      // optional int32 finished_challenge_dungeon_sequence_id = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_challenge_dungeon_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_challenge_dungeon_sequence_id_)));
          set_has_finished_challenge_dungeon_sequence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_defence_today_finished_batch;
        break;
      }

      // optional int32 defence_today_finished_batch = 41 [deprecated = true];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_today_finished_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_today_finished_batch_)));
          set_has_defence_today_finished_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_defence_history_max_batch;
        break;
      }

      // optional int32 defence_history_max_batch = 42 [deprecated = true];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_history_max_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_history_max_batch_)));
          set_has_defence_history_max_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_defence_today_reset_count;
        break;
      }

      // optional int32 defence_today_reset_count = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_today_reset_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_today_reset_count_)));
          set_has_defence_today_reset_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_defence_collected_first_pass_prize;
        break;
      }

      // optional int32 defence_collected_first_pass_prize = 45 [deprecated = true];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_collected_first_pass_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_collected_first_pass_prize_)));
          set_has_defence_collected_first_pass_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_finished_vip_dungeon_id;
        break;
      }

      // repeated int32 finished_vip_dungeon_id = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_vip_dungeon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 368, input, this->mutable_finished_vip_dungeon_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished_vip_dungeon_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_finished_vip_dungeon_id;
        if (input->ExpectTag(378)) goto parse_defence_collectable_prize;
        break;
      }

      // repeated bytes defence_collectable_prize = 47 [deprecated = true];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence_collectable_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_defence_collectable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_defence_collectable_prize;
        if (input->ExpectTag(384)) goto parse_sou_shen_point;
        break;
      }

      // optional int32 sou_shen_point = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sou_shen_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sou_shen_point_)));
          set_has_sou_shen_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_sou_shen_today_passed_id;
        break;
      }

      // repeated int32 sou_shen_today_passed_id = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sou_shen_today_passed_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 392, input, this->mutable_sou_shen_today_passed_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sou_shen_today_passed_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_sou_shen_today_passed_id;
        if (input->ExpectTag(400)) goto parse_sou_shen_life_passed_id;
        break;
      }

      // repeated int32 sou_shen_life_passed_id = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sou_shen_life_passed_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 400, input, this->mutable_sou_shen_life_passed_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sou_shen_life_passed_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_sou_shen_life_passed_id;
        if (input->ExpectTag(408)) goto parse_ling_yun_today_entered_times;
        break;
      }

      // optional int32 ling_yun_today_entered_times = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ling_yun_today_entered_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ling_yun_today_entered_times_)));
          set_has_ling_yun_today_entered_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_group_collectable_prize_proto;
        break;
      }

      // repeated .app.message.GroupDungeonCollectablePrizeProto group_collectable_prize_proto = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_collectable_prize_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_collectable_prize_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_group_collectable_prize_proto;
        if (input->ExpectTag(424)) goto parse_long_mai_today_first_passed;
        break;
      }

      // optional bool long_mai_today_first_passed = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_long_mai_today_first_passed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &long_mai_today_first_passed_)));
          set_has_long_mai_today_first_passed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_wu_jue_today_entered_times;
        break;
      }

      // optional int32 wu_jue_today_entered_times = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wu_jue_today_entered_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wu_jue_today_entered_times_)));
          set_has_wu_jue_today_entered_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_territory_today_collected_prize_scene_id;
        break;
      }

      // repeated int32 territory_today_collected_prize_scene_id = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_territory_today_collected_prize_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 440, input, this->mutable_territory_today_collected_prize_scene_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_territory_today_collected_prize_scene_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_territory_today_collected_prize_scene_id;
        if (input->ExpectTag(448)) goto parse_guild_flag_level;
        break;
      }

      // optional int32 guild_flag_level = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_flag_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_flag_level_)));
          set_has_guild_flag_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_is_ws_city_master;
        break;
      }

      // optional bool is_ws_city_master = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ws_city_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ws_city_master_)));
          set_has_is_ws_city_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_is_long_city_master;
        break;
      }

      // optional bool is_long_city_master = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_long_city_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_long_city_master_)));
          set_has_is_long_city_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_is_guild_leader;
        break;
      }

      // optional bool is_guild_leader = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_guild_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_guild_leader_)));
          set_has_is_guild_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_is_territory_leader;
        break;
      }

      // optional bool is_territory_leader = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_territory_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_territory_leader_)));
          set_has_is_territory_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_daily_activity_result;
        break;
      }

      // repeated int32 daily_activity_result = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_activity_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 544, input, this->mutable_daily_activity_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_daily_activity_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_daily_activity_result;
        if (input->ExpectTag(552)) goto parse_sheng_wang;
        break;
      }

      // optional int32 sheng_wang = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sheng_wang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sheng_wang_)));
          set_has_sheng_wang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_sheng_wang_task;
        break;
      }

      // repeated int32 sheng_wang_task = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sheng_wang_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 560, input, this->mutable_sheng_wang_task())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sheng_wang_task())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_sheng_wang_task;
        if (input->ExpectTag(568)) goto parse_use_free_chat_times;
        break;
      }

      // optional int32 use_free_chat_times = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_free_chat_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_free_chat_times_)));
          set_has_use_free_chat_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_gems;
        break;
      }

      // repeated int32 gems = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 576, input, this->mutable_gems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_gems;
        if (input->ExpectTag(586)) goto parse_bow;
        break;
      }

      // optional .app.message.BowProto bow = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_admired_hero;
        break;
      }

      // repeated int64 admired_hero = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admired_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 592, input, this->mutable_admired_hero())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_admired_hero())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_admired_hero;
        if (input->ExpectTag(600)) goto parse_last_logout_time;
        break;
      }

      // optional int64 last_logout_time = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_collected_vip_prize;
        break;
      }

      // optional int32 collected_vip_prize = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collected_vip_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collected_vip_prize_)));
          set_has_collected_vip_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_next_collect_vip_weekly_prize_time;
        break;
      }

      // optional int64 next_collect_vip_weekly_prize_time = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_collect_vip_weekly_prize_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_collect_vip_weekly_prize_time_)));
          set_has_next_collect_vip_weekly_prize_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_using_weapon;
        break;
      }

      // optional int32 using_weapon = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_using_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &using_weapon_)));
          set_has_using_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_super_weapon;
        break;
      }

      // repeated .app.message.SuperWeaponProto super_weapon = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_super_weapon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_super_weapon;
        if (input->ExpectTag(640)) goto parse_divine_times;
        break;
      }

      // optional int32 divine_times = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divine_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divine_times_)));
          set_has_divine_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_divine_amount;
        break;
      }

      // optional int32 divine_amount = 81 [deprecated = true];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divine_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divine_amount_)));
          set_has_divine_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_divine_storage_goods_count;
        break;
      }

      // optional int32 divine_storage_goods_count = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divine_storage_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divine_storage_goods_count_)));
          set_has_divine_storage_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(666)) goto parse_mount;
        break;
      }

      // optional .app.message.MountProto mount = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_lottery;
        break;
      }

      // optional int32 lottery = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lottery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_)));
          set_has_lottery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_daily_online_acc_time;
        break;
      }

      // optional int64 daily_online_acc_time = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_online_acc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daily_online_acc_time_)));
          set_has_daily_online_acc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_sign;
        break;
      }

      // optional int32 sign = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_)));
          set_has_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_sign_prize;
        break;
      }

      // optional int32 sign_prize = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_prize_)));
          set_has_sign_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_replenish_sign_times;
        break;
      }

      // optional int32 replenish_sign_times = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replenish_sign_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replenish_sign_times_)));
          set_has_replenish_sign_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_next_reduce_pk_amount_time;
        break;
      }

      // optional int64 next_reduce_pk_amount_time = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_reduce_pk_amount_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_reduce_pk_amount_time_)));
          set_has_next_reduce_pk_amount_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_pk_amount;
        break;
      }

      // optional int32 pk_amount = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_amount_)));
          set_has_pk_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_relive_protected_end_time;
        break;
      }

      // optional int64 relive_protected_end_time = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_protected_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relive_protected_end_time_)));
          set_has_relive_protected_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_total_sign_times;
        break;
      }

      // optional int32 total_sign_times = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_sign_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_sign_times_)));
          set_has_total_sign_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_total_recharge_yuanbao;
        break;
      }

      // optional int32 total_recharge_yuanbao = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_recharge_yuanbao_)));
          set_has_total_recharge_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_lottery_goods_static_data;
        break;
      }

      // repeated bytes lottery_goods_static_data = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lottery_goods_static_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_lottery_goods_static_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_lottery_goods_static_data;
        if (input->ExpectTag(762)) goto parse_lottery_goods_dynamic_data;
        break;
      }

      // repeated bytes lottery_goods_dynamic_data = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lottery_goods_dynamic_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_lottery_goods_dynamic_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(762)) goto parse_lottery_goods_dynamic_data;
        if (input->ExpectTag(770)) goto parse_pet;
        break;
      }

      // optional .app.message.PetProto pet = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_has_recharge;
        break;
      }

      // optional bool has_recharge = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_recharge_)));
          set_has_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_combine_spells;
        break;
      }

      // repeated .app.message.CombineXinfaSpellProto combine_spells = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combine_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combine_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_combine_spells;
        if (input->ExpectTag(794)) goto parse_passive_spell;
        break;
      }

      // repeated .app.message.ActiveSpell passive_spell = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passive_spell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passive_spell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(794)) goto parse_passive_spell;
        if (input->ExpectTag(802)) goto parse_active_spell;
        break;
      }

      // repeated .app.message.ActiveSpell active_spell = 100 [deprecated = true];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_spell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_spell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_active_spell;
        if (input->ExpectTag(808)) goto parse_active_spell_used_times;
        break;
      }

      // repeated int32 active_spell_used_times = 101 [deprecated = true];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_spell_used_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 808, input, this->mutable_active_spell_used_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_active_spell_used_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_active_spell_used_times;
        if (input->ExpectTag(816)) goto parse_shortcut_spell_type;
        break;
      }

      // repeated int32 shortcut_spell_type = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shortcut_spell_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 816, input, this->mutable_shortcut_spell_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shortcut_spell_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_shortcut_spell_type;
        if (input->ExpectTag(824)) goto parse_shortcut_spell_pos;
        break;
      }

      // repeated int32 shortcut_spell_pos = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shortcut_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 824, input, this->mutable_shortcut_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shortcut_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_shortcut_spell_pos;
        if (input->ExpectTag(832)) goto parse_default_spell_pos;
        break;
      }

      // optional int32 default_spell_pos = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_spell_pos_)));
          set_has_default_spell_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_jump_shield;
        break;
      }

      // optional int32 jump_shield = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jump_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jump_shield_)));
          set_has_jump_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(848)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_client_relation;
        break;
      }

      // optional .app.message.ClientRelation client_relation = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_relation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(864)) goto parse_func_bits;
        break;
      }

      // repeated int32 func_bits = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_func_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 864, input, this->mutable_func_bits())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_func_bits())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(864)) goto parse_func_bits;
        if (input->ExpectTag(872)) goto parse_rage_amount;
        break;
      }

      // optional int32 rage_amount = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rage_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rage_amount_)));
          set_has_rage_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(888)) goto parse_is_collect_local_login_first_prize;
        break;
      }

      // optional bool is_collect_local_login_first_prize = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_collect_local_login_first_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_collect_local_login_first_prize_)));
          set_has_is_collect_local_login_first_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(896)) goto parse_is_collect_local_login_daily_prize;
        break;
      }

      // optional bool is_collect_local_login_daily_prize = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_collect_local_login_daily_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_collect_local_login_daily_prize_)));
          set_has_is_collect_local_login_daily_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(904)) goto parse_phoenix_refine_times;
        break;
      }

      // optional int32 phoenix_refine_times = 113 [deprecated = true];
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phoenix_refine_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phoenix_refine_times_)));
          set_has_phoenix_refine_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(912)) goto parse_is_cross_single_story;
        break;
      }

      // optional bool is_cross_single_story = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_cross_single_story:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cross_single_story_)));
          set_has_is_cross_single_story();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(920)) goto parse_team_forbid_other_invite_me_join;
        break;
      }

      // optional bool team_forbid_other_invite_me_join = 115;
      case 115: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_forbid_other_invite_me_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_forbid_other_invite_me_join_)));
          set_has_team_forbid_other_invite_me_join();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(928)) goto parse_phoenix_money_refine_times;
        break;
      }

      // optional int32 phoenix_money_refine_times = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phoenix_money_refine_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phoenix_money_refine_times_)));
          set_has_phoenix_money_refine_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(936)) goto parse_phoenix_lijin_refine_times;
        break;
      }

      // optional int32 phoenix_lijin_refine_times = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phoenix_lijin_refine_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phoenix_lijin_refine_times_)));
          set_has_phoenix_lijin_refine_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(944)) goto parse_phoenix_yuanbao_refine_times;
        break;
      }

      // optional int32 phoenix_yuanbao_refine_times = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phoenix_yuanbao_refine_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phoenix_yuanbao_refine_times_)));
          set_has_phoenix_yuanbao_refine_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(952)) goto parse_login_day;
        break;
      }

      // optional int32 login_day = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_day_)));
          set_has_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_tu_long_today_entered_times;
        break;
      }

      // optional int32 tu_long_today_entered_times = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tu_long_today_entered_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tu_long_today_entered_times_)));
          set_has_tu_long_today_entered_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(968)) goto parse_melt_amount;
        break;
      }

      // optional int32 melt_amount = 121;
      case 121: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_melt_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &melt_amount_)));
          set_has_melt_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(976)) goto parse_challenge_dungeon_daily_times;
        break;
      }

      // optional int32 challenge_dungeon_daily_times = 122;
      case 122: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_dungeon_daily_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_dungeon_daily_times_)));
          set_has_challenge_dungeon_daily_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(984)) goto parse_challenge_dungeon_assist_times;
        break;
      }

      // optional int32 challenge_dungeon_assist_times = 123;
      case 123: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_dungeon_assist_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_dungeon_assist_times_)));
          set_has_challenge_dungeon_assist_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(992)) goto parse_challenge_dungeon_use_times;
        break;
      }

      // repeated int32 challenge_dungeon_use_times = 124;
      case 124: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_dungeon_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 992, input, this->mutable_challenge_dungeon_use_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_challenge_dungeon_use_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(992)) goto parse_challenge_dungeon_use_times;
        if (input->ExpectTag(1000)) goto parse_honor;
        break;
      }

      // optional int32 honor = 125;
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1010)) goto parse_tian_zui;
        break;
      }

      // optional .app.message.TianZuiProto tian_zui = 126;
      case 126: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tian_zui:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tian_zui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1018)) goto parse_tian_jie;
        break;
      }

      // optional .app.message.TianJieProto tian_jie = 127;
      case 127: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tian_jie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tian_jie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1032)) goto parse_first_recharge_collect_index;
        break;
      }

      // optional int32 first_recharge_collect_index = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_recharge_collect_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_recharge_collect_index_)));
          set_has_first_recharge_collect_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1040)) goto parse_ling_yun_today_finish_state;
        break;
      }

      // optional int32 ling_yun_today_finish_state = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ling_yun_today_finish_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ling_yun_today_finish_state_)));
          set_has_ling_yun_today_finish_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1048)) goto parse_login_prize_info;
        break;
      }

      // optional int32 login_prize_info = 131;
      case 131: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_prize_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_prize_info_)));
          set_has_login_prize_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1056)) goto parse_invest_upgrade_bank_money;
        break;
      }

      // optional int32 invest_upgrade_bank_money = 132;
      case 132: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invest_upgrade_bank_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invest_upgrade_bank_money_)));
          set_has_invest_upgrade_bank_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1064)) goto parse_collect_upgrade_bank_level;
        break;
      }

      // repeated int32 collect_upgrade_bank_level = 133;
      case 133: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_upgrade_bank_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1064, input, this->mutable_collect_upgrade_bank_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_collect_upgrade_bank_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1064)) goto parse_collect_upgrade_bank_level;
        if (input->ExpectTag(1072)) goto parse_collect_upgrade_bank_lijin;
        break;
      }

      // repeated int32 collect_upgrade_bank_lijin = 134;
      case 134: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_upgrade_bank_lijin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1072, input, this->mutable_collect_upgrade_bank_lijin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_collect_upgrade_bank_lijin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1072)) goto parse_collect_upgrade_bank_lijin;
        if (input->ExpectTag(1080)) goto parse_invest_monthly_bank_money;
        break;
      }

      // optional int32 invest_monthly_bank_money = 135;
      case 135: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invest_monthly_bank_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invest_monthly_bank_money_)));
          set_has_invest_monthly_bank_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1088)) goto parse_invest_monthly_bank_time;
        break;
      }

      // optional int64 invest_monthly_bank_time = 136;
      case 136: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invest_monthly_bank_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invest_monthly_bank_time_)));
          set_has_invest_monthly_bank_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1096)) goto parse_monthly_bank_prev_collect_time;
        break;
      }

      // optional int64 monthly_bank_prev_collect_time = 137;
      case 137: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthly_bank_prev_collect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monthly_bank_prev_collect_time_)));
          set_has_monthly_bank_prev_collect_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1104)) goto parse_monthly_bank_prev_collect_time2;
        break;
      }

      // optional int64 monthly_bank_prev_collect_time2 = 138;
      case 138: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthly_bank_prev_collect_time2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monthly_bank_prev_collect_time2_)));
          set_has_monthly_bank_prev_collect_time2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1112)) goto parse_monthly_bank_online_lijin;
        break;
      }

      // optional int32 monthly_bank_online_lijin = 139;
      case 139: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthly_bank_online_lijin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthly_bank_online_lijin_)));
          set_has_monthly_bank_online_lijin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1120)) goto parse_monthly_bank_base_lijin;
        break;
      }

      // optional int32 monthly_bank_base_lijin = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthly_bank_base_lijin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthly_bank_base_lijin_)));
          set_has_monthly_bank_base_lijin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1128)) goto parse_monthly_bank_online_hours;
        break;
      }

      // optional int32 monthly_bank_online_hours = 141;
      case 141: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthly_bank_online_hours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthly_bank_online_hours_)));
          set_has_monthly_bank_online_hours();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1136)) goto parse_total_online_time;
        break;
      }

      // optional int64 total_online_time = 142;
      case 142: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_online_time_)));
          set_has_total_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1146)) goto parse_achievement;
        break;
      }

      // optional .app.message.AchievementInfoProto achievement = 143;
      case 143: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1152)) goto parse_spell_added_upgrade_level;
        break;
      }

      // optional int32 spell_added_upgrade_level = 144;
      case 144: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_added_upgrade_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_added_upgrade_level_)));
          set_has_spell_added_upgrade_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_shou_cang;
        break;
      }

      // optional .app.message.ShouCangProto shou_cang = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shou_cang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shou_cang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_zhong_hua_ge_today_first_passed;
        break;
      }

      // optional bool zhong_hua_ge_today_first_passed = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhong_hua_ge_today_first_passed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zhong_hua_ge_today_first_passed_)));
          set_has_zhong_hua_ge_today_first_passed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_gaoji_melt_amount;
        break;
      }

      // optional int32 gaoji_melt_amount = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaoji_melt_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaoji_melt_amount_)));
          set_has_gaoji_melt_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1624)) goto parse_left_ya_biao_times_today;
        break;
      }

      // optional int32 left_ya_biao_times_today = 203;
      case 203: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_ya_biao_times_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_ya_biao_times_today_)));
          set_has_left_ya_biao_times_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1632)) goto parse_left_jie_biao_times_today;
        break;
      }

      // optional int32 left_jie_biao_times_today = 204;
      case 204: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_jie_biao_times_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_jie_biao_times_today_)));
          set_has_left_jie_biao_times_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1640)) goto parse_has_safe_code;
        break;
      }

      // optional bool has_safe_code = 205;
      case 205: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_safe_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_safe_code_)));
          set_has_has_safe_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1650)) goto parse_safe_code_question;
        break;
      }

      // optional string safe_code_question = 206;
      case 206: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safe_code_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safe_code_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->safe_code_question().data(), this->safe_code_question().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1656)) goto parse_jin_jie_lucky_card_type;
        break;
      }

      // repeated int32 jin_jie_lucky_card_type = 207;
      case 207: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jin_jie_lucky_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1656, input, this->mutable_jin_jie_lucky_card_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jin_jie_lucky_card_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1656)) goto parse_jin_jie_lucky_card_type;
        if (input->ExpectTag(1664)) goto parse_jin_jie_lucky_card_expire_time;
        break;
      }

      // repeated int64 jin_jie_lucky_card_expire_time = 208;
      case 208: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jin_jie_lucky_card_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 1664, input, this->mutable_jin_jie_lucky_card_expire_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_jin_jie_lucky_card_expire_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1664)) goto parse_jin_jie_lucky_card_expire_time;
        if (input->ExpectTag(1672)) goto parse_jin_jie_lucky_card_rate;
        break;
      }

      // repeated int32 jin_jie_lucky_card_rate = 209;
      case 209: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jin_jie_lucky_card_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1672, input, this->mutable_jin_jie_lucky_card_rate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jin_jie_lucky_card_rate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1672)) goto parse_jin_jie_lucky_card_rate;
        if (input->ExpectTag(1680)) goto parse_daily_card_use_stat_goods_id;
        break;
      }

      // repeated int32 daily_card_use_stat_goods_id = 210;
      case 210: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_card_use_stat_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1680, input, this->mutable_daily_card_use_stat_goods_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_daily_card_use_stat_goods_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1680)) goto parse_daily_card_use_stat_goods_id;
        if (input->ExpectTag(1688)) goto parse_daily_card_use_stat_use_count;
        break;
      }

      // repeated int32 daily_card_use_stat_use_count = 211;
      case 211: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_card_use_stat_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1688, input, this->mutable_daily_card_use_stat_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_daily_card_use_stat_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1688)) goto parse_daily_card_use_stat_use_count;
        if (input->ExpectTag(1696)) goto parse_mo_shi_type;
        break;
      }

      // repeated int32 mo_shi_type = 212;
      case 212: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1696, input, this->mutable_mo_shi_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1696)) goto parse_mo_shi_type;
        if (input->ExpectTag(1704)) goto parse_mo_shi_level;
        break;
      }

      // repeated int32 mo_shi_level = 213;
      case 213: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1704, input, this->mutable_mo_shi_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1704)) goto parse_mo_shi_level;
        if (input->ExpectTag(1712)) goto parse_mo_shi_bless_amount;
        break;
      }

      // repeated int32 mo_shi_bless_amount = 214;
      case 214: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1712, input, this->mutable_mo_shi_bless_amount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_bless_amount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1712)) goto parse_mo_shi_bless_amount;
        if (input->ExpectTag(1720)) goto parse_mo_shi_bless_amount_clear_time;
        break;
      }

      // repeated int64 mo_shi_bless_amount_clear_time = 215;
      case 215: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 1720, input, this->mutable_mo_shi_bless_amount_clear_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mo_shi_bless_amount_clear_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1720)) goto parse_mo_shi_bless_amount_clear_time;
        if (input->ExpectTag(1728)) goto parse_mo_shi_spell_id;
        break;
      }

      // repeated int32 mo_shi_spell_id = 216;
      case 216: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_spell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1728, input, this->mutable_mo_shi_spell_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_spell_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1728)) goto parse_mo_shi_spell_id;
        if (input->ExpectTag(1736)) goto parse_qian_qiu_da_jie_type;
        break;
      }

      // repeated int32 qian_qiu_da_jie_type = 217;
      case 217: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1736, input, this->mutable_qian_qiu_da_jie_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1736)) goto parse_qian_qiu_da_jie_type;
        if (input->ExpectTag(1744)) goto parse_qian_qiu_da_jie_level;
        break;
      }

      // repeated int32 qian_qiu_da_jie_level = 218;
      case 218: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1744, input, this->mutable_qian_qiu_da_jie_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1744)) goto parse_qian_qiu_da_jie_level;
        if (input->ExpectTag(1752)) goto parse_qian_qiu_da_jie_bless_amount;
        break;
      }

      // repeated int32 qian_qiu_da_jie_bless_amount = 219;
      case 219: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1752, input, this->mutable_qian_qiu_da_jie_bless_amount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_bless_amount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1752)) goto parse_qian_qiu_da_jie_bless_amount;
        if (input->ExpectTag(1760)) goto parse_qian_qiu_da_jie_bless_amount_clear_time;
        break;
      }

      // repeated int64 qian_qiu_da_jie_bless_amount_clear_time = 220;
      case 220: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 1760, input, this->mutable_qian_qiu_da_jie_bless_amount_clear_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qian_qiu_da_jie_bless_amount_clear_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1760)) goto parse_qian_qiu_da_jie_bless_amount_clear_time;
        if (input->ExpectTag(1768)) goto parse_long_yuan;
        break;
      }

      // optional int32 long_yuan = 221;
      case 221: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_long_yuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &long_yuan_)));
          set_has_long_yuan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1778)) goto parse_jing_jie;
        break;
      }

      // optional .app.message.HeroJingJieProto jing_jie = 222;
      case 222: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jing_jie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jing_jie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1784)) goto parse_mo_shi_qian_neng_use_count;
        break;
      }

      // repeated int32 mo_shi_qian_neng_use_count = 223;
      case 223: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1784, input, this->mutable_mo_shi_qian_neng_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_qian_neng_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1784)) goto parse_mo_shi_qian_neng_use_count;
        if (input->ExpectTag(1792)) goto parse_mo_shi_huan_hua_use_count;
        break;
      }

      // repeated int32 mo_shi_huan_hua_use_count = 224;
      case 224: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1792, input, this->mutable_mo_shi_huan_hua_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_huan_hua_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1792)) goto parse_mo_shi_huan_hua_use_count;
        if (input->ExpectTag(1800)) goto parse_chi_huo_shen_gong_jie_shu;
        break;
      }

      // optional int32 chi_huo_shen_gong_jie_shu = 225;
      case 225: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_jie_shu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_jie_shu_)));
          set_has_chi_huo_shen_gong_jie_shu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1808)) goto parse_chi_huo_shen_gong_ceng_shu;
        break;
      }

      // optional int32 chi_huo_shen_gong_ceng_shu = 226;
      case 226: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_ceng_shu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_ceng_shu_)));
          set_has_chi_huo_shen_gong_ceng_shu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1816)) goto parse_chi_huo_shen_gong_bless_amount;
        break;
      }

      // optional int32 chi_huo_shen_gong_bless_amount = 227;
      case 227: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_bless_amount_)));
          set_has_chi_huo_shen_gong_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1824)) goto parse_chi_huo_shen_gong_bless_amount_clear_time;
        break;
      }

      // optional int64 chi_huo_shen_gong_bless_amount_clear_time = 228;
      case 228: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chi_huo_shen_gong_bless_amount_clear_time_)));
          set_has_chi_huo_shen_gong_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1840)) goto parse_draw_prize_point;
        break;
      }

      // optional int32 draw_prize_point = 230;
      case 230: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_prize_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_prize_point_)));
          set_has_draw_prize_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1848)) goto parse_draw_prize_storage_goods_count;
        break;
      }

      // optional int32 draw_prize_storage_goods_count = 231;
      case 231: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_prize_storage_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_prize_storage_goods_count_)));
          set_has_draw_prize_storage_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1856)) goto parse_draw_prize_exchange_count;
        break;
      }

      // repeated int32 draw_prize_exchange_count = 232;
      case 232: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_prize_exchange_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1856, input, this->mutable_draw_prize_exchange_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_draw_prize_exchange_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1856)) goto parse_draw_prize_exchange_count;
        if (input->ExpectTag(1864)) goto parse_lucky_draw_prize_point;
        break;
      }

      // optional int32 lucky_draw_prize_point = 233;
      case 233: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky_draw_prize_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_draw_prize_point_)));
          set_has_lucky_draw_prize_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1872)) goto parse_lucky_draw_prize_storage_goods_count;
        break;
      }

      // optional int32 lucky_draw_prize_storage_goods_count = 234;
      case 234: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky_draw_prize_storage_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_draw_prize_storage_goods_count_)));
          set_has_lucky_draw_prize_storage_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1882)) goto parse_yitianshenjue_info;
        break;
      }

      // optional .app.message.YitianshenjueProto yitianshenjue_info = 235;
      case 235: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yitianshenjue_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yitianshenjue_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1890)) goto parse_super_weapon_max_level_add_stat;
        break;
      }

      // optional .app.message.SpriteStatProto super_weapon_max_level_add_stat = 236;
      case 236: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_weapon_max_level_add_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_weapon_max_level_add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1898)) goto parse_magic_added_stat;
        break;
      }

      // optional .app.message.SpriteStatProto magic_added_stat = 237;
      case 237: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magic_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magic_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1906)) goto parse_magic_not_saved_added_stat;
        break;
      }

      // optional .app.message.SpriteStatProto magic_not_saved_added_stat = 238;
      case 238: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magic_not_saved_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magic_not_saved_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1912)) goto parse_has_unlock_magic_weapon_gem;
        break;
      }

      // repeated bool has_unlock_magic_weapon_gem = 239;
      case 239: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_unlock_magic_weapon_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 1912, input, this->mutable_has_unlock_magic_weapon_gem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_has_unlock_magic_weapon_gem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1912)) goto parse_has_unlock_magic_weapon_gem;
        if (input->ExpectTag(1920)) goto parse_magic_weapon_gem_level;
        break;
      }

      // repeated int32 magic_weapon_gem_level = 240;
      case 240: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_weapon_gem_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1920, input, this->mutable_magic_weapon_gem_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_magic_weapon_gem_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1920)) goto parse_magic_weapon_gem_level;
        if (input->ExpectTag(1928)) goto parse_magic_weapon_gem_binded;
        break;
      }

      // repeated bool magic_weapon_gem_binded = 241;
      case 241: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_weapon_gem_binded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 1928, input, this->mutable_magic_weapon_gem_binded())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_magic_weapon_gem_binded())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1928)) goto parse_magic_weapon_gem_binded;
        if (input->ExpectTag(1936)) goto parse_wu_jue_today_collected_first_try_transport_prize_times;
        break;
      }

      // optional int32 wu_jue_today_collected_first_try_transport_prize_times = 242;
      case 242: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wu_jue_today_collected_first_try_transport_prize_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wu_jue_today_collected_first_try_transport_prize_times_)));
          set_has_wu_jue_today_collected_first_try_transport_prize_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2160)) goto parse_daily_wheel_count;
        break;
      }

      // optional int32 daily_wheel_count = 270;
      case 270: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_wheel_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_wheel_count_)));
          set_has_daily_wheel_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2240)) goto parse_finished_xin_mo_scene_id;
        break;
      }

      // repeated int32 finished_xin_mo_scene_id = 280;
      case 280: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_xin_mo_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2240, input, this->mutable_finished_xin_mo_scene_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished_xin_mo_scene_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2240)) goto parse_finished_xin_mo_scene_id;
        if (input->ExpectTag(2384)) goto parse_has_magic_weapon;
        break;
      }

      // optional bool has_magic_weapon = 298;
      case 298: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_magic_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_magic_weapon_)));
          set_has_has_magic_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2392)) goto parse_collected_recharge_rank_promotion_prize;
        break;
      }

      // repeated int64 collected_recharge_rank_promotion_prize = 299;
      case 299: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collected_recharge_rank_promotion_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 2392, input, this->mutable_collected_recharge_rank_promotion_prize())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_collected_recharge_rank_promotion_prize())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2392)) goto parse_collected_recharge_rank_promotion_prize;
        if (input->ExpectTag(2400)) goto parse_collected_rank_promotion_prize;
        break;
      }

      // repeated int64 collected_rank_promotion_prize = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collected_rank_promotion_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 2400, input, this->mutable_collected_rank_promotion_prize())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_collected_rank_promotion_prize())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2400)) goto parse_collected_rank_promotion_prize;
        if (input->ExpectTag(2408)) goto parse_arena_pair_point;
        break;
      }

      // optional int32 arena_pair_point = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_pair_point_)));
          set_has_arena_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2416)) goto parse_today_finished_arena_count;
        break;
      }

      // optional int32 today_finished_arena_count = 302;
      case 302: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_finished_arena_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_finished_arena_count_)));
          set_has_today_finished_arena_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2424)) goto parse_arena_shop_point;
        break;
      }

      // optional int32 arena_shop_point = 303;
      case 303: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_shop_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_shop_point_)));
          set_has_arena_shop_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2432)) goto parse_arena_collectable_shop_point;
        break;
      }

      // optional int32 arena_collectable_shop_point = 304;
      case 304: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_collectable_shop_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_collectable_shop_point_)));
          set_has_arena_collectable_shop_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2440)) goto parse_arena_yesterday_finish_count;
        break;
      }

      // optional int32 arena_yesterday_finish_count = 305;
      case 305: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_yesterday_finish_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_yesterday_finish_count_)));
          set_has_arena_yesterday_finish_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2448)) goto parse_arena_yesterday_pair_point;
        break;
      }

      // optional int32 arena_yesterday_pair_point = 306;
      case 306: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_yesterday_pair_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_yesterday_pair_point_)));
          set_has_arena_yesterday_pair_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2456)) goto parse_arena_yesterday_original_shop_point;
        break;
      }

      // optional int32 arena_yesterday_original_shop_point = 307;
      case 307: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_yesterday_original_shop_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_yesterday_original_shop_point_)));
          set_has_arena_yesterday_original_shop_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2464)) goto parse_arena_shop_point_added_today_by_win;
        break;
      }

      // optional int32 arena_shop_point_added_today_by_win = 308;
      case 308: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_shop_point_added_today_by_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_shop_point_added_today_by_win_)));
          set_has_arena_shop_point_added_today_by_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2480)) goto parse_next_can_use_guild_lilian_time;
        break;
      }

      // optional int64 next_can_use_guild_lilian_time = 310;
      case 310: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_can_use_guild_lilian_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_can_use_guild_lilian_time_)));
          set_has_next_can_use_guild_lilian_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2490)) goto parse_guild_dungeon_collected_prize;
        break;
      }

      // optional .app.message.GuildDungeonCollectedPrizeProto guild_dungeon_collected_prize = 311;
      case 311: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_dungeon_collected_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_dungeon_collected_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2498)) goto parse_super_arm;
        break;
      }

      // optional .app.message.HeroSuperArmProto super_arm = 312;
      case 312: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2506)) goto parse_demon;
        break;
      }

      // optional .app.message.DemonProto demon = 313;
      case 313: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_demon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_demon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2514)) goto parse_cloak;
        break;
      }

      // optional .app.message.CloakProto cloak = 314;
      case 314: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2520)) goto parse_pet_combine_added_life;
        break;
      }

      // optional int64 pet_combine_added_life = 315;
      case 315: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_combine_added_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pet_combine_added_life_)));
          set_has_pet_combine_added_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2528)) goto parse_pet_next_can_combine_time;
        break;
      }

      // optional int64 pet_next_can_combine_time = 316;
      case 316: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_next_can_combine_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pet_next_can_combine_time_)));
          set_has_pet_next_can_combine_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2536)) goto parse_gallup_answered_question_count;
        break;
      }

      // optional int32 gallup_answered_question_count = 317;
      case 317: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gallup_answered_question_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gallup_answered_question_count_)));
          set_has_gallup_answered_question_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2544)) goto parse_gallup_today_answered_question_count;
        break;
      }

      // optional int32 gallup_today_answered_question_count = 318;
      case 318: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gallup_today_answered_question_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gallup_today_answered_question_count_)));
          set_has_gallup_today_answered_question_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2554)) goto parse_marriage;
        break;
      }

      // optional .app.message.HeroMarriageProto marriage = 319;
      case 319: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marriage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marriage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2560)) goto parse_wash_super_weapon_bless_clear_time;
        break;
      }

      // optional int64 wash_super_weapon_bless_clear_time = 320;
      case 320: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wash_super_weapon_bless_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wash_super_weapon_bless_clear_time_)));
          set_has_wash_super_weapon_bless_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2568)) goto parse_tian_men_times;
        break;
      }

      // optional int32 tian_men_times = 321;
      case 321: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tian_men_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tian_men_times_)));
          set_has_tian_men_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2576)) goto parse_has_collect_guild_plant_prize;
        break;
      }

      // optional bool has_collect_guild_plant_prize = 322;
      case 322: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_collect_guild_plant_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_collect_guild_plant_prize_)));
          set_has_has_collect_guild_plant_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2584)) goto parse_hide_city_master;
        break;
      }

      // optional bool hide_city_master = 323;
      case 323: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_city_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_city_master_)));
          set_has_hide_city_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2592)) goto parse_hide_long_city_master;
        break;
      }

      // optional bool hide_long_city_master = 324;
      case 324: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_long_city_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_long_city_master_)));
          set_has_hide_long_city_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2600)) goto parse_p37_vip_prize_count_flag;
        break;
      }

      // optional int32 p37_vip_prize_count_flag = 325;
      case 325: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p37_vip_prize_count_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p37_vip_prize_count_flag_)));
          set_has_p37_vip_prize_count_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2608)) goto parse_last_change_name_time;
        break;
      }

      // optional int64 last_change_name_time = 326;
      case 326: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_change_name_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_change_name_time_)));
          set_has_last_change_name_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2616)) goto parse_next_can_change_race_time;
        break;
      }

      // optional int64 next_can_change_race_time = 327;
      case 327: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_can_change_race_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_can_change_race_time_)));
          set_has_next_can_change_race_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2624)) goto parse_htz_times;
        break;
      }

      // optional int32 htz_times = 328;
      case 328: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_htz_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &htz_times_)));
          set_has_htz_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2632)) goto parse_htz_max_destroy_record;
        break;
      }

      // optional int32 htz_max_destroy_record = 329;
      case 329: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_htz_max_destroy_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &htz_max_destroy_record_)));
          set_has_htz_max_destroy_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2640)) goto parse_htz_time_record;
        break;
      }

      // optional int32 htz_time_record = 330;
      case 330: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_htz_time_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &htz_time_record_)));
          set_has_htz_time_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2648)) goto parse_limit_count_goods_id;
        break;
      }

      // repeated int32 limit_count_goods_id = 331;
      case 331: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_count_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2648, input, this->mutable_limit_count_goods_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_limit_count_goods_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2648)) goto parse_limit_count_goods_id;
        if (input->ExpectTag(2656)) goto parse_limit_count_goods_use_times;
        break;
      }

      // repeated int32 limit_count_goods_use_times = 332;
      case 332: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_count_goods_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2656, input, this->mutable_limit_count_goods_use_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_limit_count_goods_use_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2656)) goto parse_limit_count_goods_use_times;
        if (input->ExpectTag(2664)) goto parse_new_draw_prize_point;
        break;
      }

      // optional int32 new_draw_prize_point = 333;
      case 333: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_draw_prize_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_draw_prize_point_)));
          set_has_new_draw_prize_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2672)) goto parse_new_draw_prize_storage_goods_count;
        break;
      }

      // optional int32 new_draw_prize_storage_goods_count = 334;
      case 334: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_draw_prize_storage_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_draw_prize_storage_goods_count_)));
          set_has_new_draw_prize_storage_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2680)) goto parse_single_wash_super_weapon_bless_clear_time;
        break;
      }

      // repeated int64 single_wash_super_weapon_bless_clear_time = 335;
      case 335: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_wash_super_weapon_bless_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 2680, input, this->mutable_single_wash_super_weapon_bless_clear_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_single_wash_super_weapon_bless_clear_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2680)) goto parse_single_wash_super_weapon_bless_clear_time;
        if (input->ExpectTag(2688)) goto parse_single_wash_super_weapon_bless_type;
        break;
      }

      // repeated int32 single_wash_super_weapon_bless_type = 336;
      case 336: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_wash_super_weapon_bless_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2688, input, this->mutable_single_wash_super_weapon_bless_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_single_wash_super_weapon_bless_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2688)) goto parse_single_wash_super_weapon_bless_type;
        if (input->ExpectTag(2698)) goto parse_arena_fighting_team_name_bytes;
        break;
      }

      // optional bytes arena_fighting_team_name_bytes = 337;
      case 337: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_fighting_team_name_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arena_fighting_team_name_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2704)) goto parse_arena_fighting_team_shop_point;
        break;
      }

      // optional int32 arena_fighting_team_shop_point = 338;
      case 338: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_fighting_team_shop_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_fighting_team_shop_point_)));
          set_has_arena_fighting_team_shop_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2712)) goto parse_arena_fighting_team_shop_point_added_today_by_win;
        break;
      }

      // optional int32 arena_fighting_team_shop_point_added_today_by_win = 339;
      case 339: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_fighting_team_shop_point_added_today_by_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_fighting_team_shop_point_added_today_by_win_)));
          set_has_arena_fighting_team_shop_point_added_today_by_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2720)) goto parse_qian_qiu_da_jie_qian_neng_use_count;
        break;
      }

      // repeated int32 qian_qiu_da_jie_qian_neng_use_count = 340;
      case 340: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2720, input, this->mutable_qian_qiu_da_jie_qian_neng_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_qian_neng_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2720)) goto parse_qian_qiu_da_jie_qian_neng_use_count;
        if (input->ExpectTag(2728)) goto parse_qian_qiu_da_jie_huan_hua_use_count;
        break;
      }

      // repeated int32 qian_qiu_da_jie_huan_hua_use_count = 341;
      case 341: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2728, input, this->mutable_qian_qiu_da_jie_huan_hua_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_huan_hua_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2728)) goto parse_qian_qiu_da_jie_huan_hua_use_count;
        if (input->ExpectTag(2738)) goto parse_mo_bing_proto;
        break;
      }

      // optional .app.message.MoBingProto mo_bing_proto = 342;
      case 342: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mo_bing_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mo_bing_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2744)) goto parse_use_mount_tongling_id;
        break;
      }

      // optional int32 use_mount_tongling_id = 343;
      case 343: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_mount_tongling_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_mount_tongling_id_)));
          set_has_use_mount_tongling_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2752)) goto parse_active_mount_tongling_ids;
        break;
      }

      // repeated int32 active_mount_tongling_ids = 344;
      case 344: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_mount_tongling_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2752, input, this->mutable_active_mount_tongling_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_active_mount_tongling_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2752)) goto parse_active_mount_tongling_ids;
        if (input->ExpectTag(2760)) goto parse_change_use_mount_tongling_id_cd_time;
        break;
      }

      // optional int64 change_use_mount_tongling_id_cd_time = 345;
      case 345: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_use_mount_tongling_id_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_use_mount_tongling_id_cd_time_)));
          set_has_change_use_mount_tongling_id_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2770)) goto parse_not_save_xun_zhang_random_stat1;
        break;
      }

      // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat1 = 346;
      case 346: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_not_save_xun_zhang_random_stat1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_not_save_xun_zhang_random_stat1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2770)) goto parse_not_save_xun_zhang_random_stat1;
        if (input->ExpectTag(2778)) goto parse_not_save_xun_zhang_random_stat2;
        break;
      }

      // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat2 = 347;
      case 347: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_not_save_xun_zhang_random_stat2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_not_save_xun_zhang_random_stat2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2778)) goto parse_not_save_xun_zhang_random_stat2;
        if (input->ExpectTag(2784)) goto parse_finished_collected_fight_amout_changed_value_rank_daily_prize;
        break;
      }

      // optional bool finished_collected_fight_amout_changed_value_rank_daily_prize = 348;
      case 348: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_collected_fight_amout_changed_value_rank_daily_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_collected_fight_amout_changed_value_rank_daily_prize_)));
          set_has_finished_collected_fight_amout_changed_value_rank_daily_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2792)) goto parse_finished_yy_purple_dungeon_count;
        break;
      }

      // repeated int32 finished_yy_purple_dungeon_count = 349;
      case 349: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_yy_purple_dungeon_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2792, input, this->mutable_finished_yy_purple_dungeon_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished_yy_purple_dungeon_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2792)) goto parse_finished_yy_purple_dungeon_count;
        if (input->ExpectTag(2800)) goto parse_chi_huo_shen_gong_qian_neng_use_count;
        break;
      }

      // optional int32 chi_huo_shen_gong_qian_neng_use_count = 350;
      case 350: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_qian_neng_use_count_)));
          set_has_chi_huo_shen_gong_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2808)) goto parse_chi_huo_shen_gong_huan_hua_use_count;
        break;
      }

      // optional int32 chi_huo_shen_gong_huan_hua_use_count = 351;
      case 351: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_huan_hua_use_count_)));
          set_has_chi_huo_shen_gong_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2824)) goto parse_he_cheng_goods_id;
        break;
      }

      // repeated int32 he_cheng_goods_id = 353;
      case 353: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_he_cheng_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2824, input, this->mutable_he_cheng_goods_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_he_cheng_goods_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2824)) goto parse_he_cheng_goods_id;
        if (input->ExpectTag(2832)) goto parse_he_cheng_goods_count;
        break;
      }

      // repeated int32 he_cheng_goods_count = 354;
      case 354: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_he_cheng_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2832, input, this->mutable_he_cheng_goods_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_he_cheng_goods_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2832)) goto parse_he_cheng_goods_count;
        if (input->ExpectTag(2840)) goto parse_christmas_storage_goods_count;
        break;
      }

      // optional int32 christmas_storage_goods_count = 355;
      case 355: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_christmas_storage_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &christmas_storage_goods_count_)));
          set_has_christmas_storage_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2848)) goto parse_credits;
        break;
      }

      // optional int32 credits = 356;
      case 356: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2856)) goto parse_mount_tongling_wake_value;
        break;
      }

      // repeated int32 mount_tongling_wake_value = 357;
      case 357: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_tongling_wake_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2856, input, this->mutable_mount_tongling_wake_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mount_tongling_wake_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2856)) goto parse_mount_tongling_wake_value;
        if (input->ExpectTag(2864)) goto parse_monopoly_now_cell_id;
        break;
      }

      // optional int32 monopoly_now_cell_id = 358;
      case 358: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monopoly_now_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monopoly_now_cell_id_)));
          set_has_monopoly_now_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2872)) goto parse_monopoly_now_roll_times_cost;
        break;
      }

      // optional int32 monopoly_now_roll_times_cost = 359;
      case 359: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monopoly_now_roll_times_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monopoly_now_roll_times_cost_)));
          set_has_monopoly_now_roll_times_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2880)) goto parse_monopoly_roll_times;
        break;
      }

      // optional int32 monopoly_roll_times = 360;
      case 360: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monopoly_roll_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monopoly_roll_times_)));
          set_has_monopoly_roll_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2888)) goto parse_monopoly_buy_roll_times;
        break;
      }

      // optional int32 monopoly_buy_roll_times = 361;
      case 361: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monopoly_buy_roll_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monopoly_buy_roll_times_)));
          set_has_monopoly_buy_roll_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2896)) goto parse_credits_draw_storage_goods_count;
        break;
      }

      // optional int32 credits_draw_storage_goods_count = 362;
      case 362: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credits_draw_storage_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_draw_storage_goods_count_)));
          set_has_credits_draw_storage_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2906)) goto parse_love;
        break;
      }

      // optional .app.message.HeroLoveProto love = 363;
      case 363: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_love:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_love()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2914)) goto parse_wu_dao;
        break;
      }

      // optional .app.message.WuDaoProto wu_dao = 364;
      case 364: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wu_dao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wu_dao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2922)) goto parse_ni_dao_qian_kun;
        break;
      }

      // optional .app.message.NiDaoQianKunClient ni_dao_qian_kun = 365;
      case 365: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ni_dao_qian_kun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ni_dao_qian_kun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2928)) goto parse_finished_tong_tian_ta_dungeon_sequence;
        break;
      }

      // optional int32 finished_tong_tian_ta_dungeon_sequence = 366;
      case 366: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_tong_tian_ta_dungeon_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_tong_tian_ta_dungeon_sequence_)));
          set_has_finished_tong_tian_ta_dungeon_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2936)) goto parse_tong_tian_ta_dungeon_daily_times;
        break;
      }

      // optional int32 tong_tian_ta_dungeon_daily_times = 367;
      case 367: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tong_tian_ta_dungeon_daily_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tong_tian_ta_dungeon_daily_times_)));
          set_has_tong_tian_ta_dungeon_daily_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2944)) goto parse_tong_tian_ta_dungeon_use_times;
        break;
      }

      // repeated int32 tong_tian_ta_dungeon_use_times = 368;
      case 368: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tong_tian_ta_dungeon_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2944, input, this->mutable_tong_tian_ta_dungeon_use_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tong_tian_ta_dungeon_use_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2944)) goto parse_tong_tian_ta_dungeon_use_times;
        if (input->ExpectTag(2952)) goto parse_tong_tian_ta_dungeon_refresh_times;
        break;
      }

      // optional int32 tong_tian_ta_dungeon_refresh_times = 369;
      case 369: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tong_tian_ta_dungeon_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tong_tian_ta_dungeon_refresh_times_)));
          set_has_tong_tian_ta_dungeon_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2962)) goto parse_anniversary;
        break;
      }

      // optional .app.message.HeroAnniversaryProto anniversary = 370;
      case 370: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anniversary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anniversary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2968)) goto parse_firework_color_values;
        break;
      }

      // repeated int32 firework_color_values = 371;
      case 371: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firework_color_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2968, input, this->mutable_firework_color_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_firework_color_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2968)) goto parse_firework_color_values;
        if (input->ExpectTag(2976)) goto parse_firework_promotion_start_time;
        break;
      }

      // optional int64 firework_promotion_start_time = 372;
      case 372: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firework_promotion_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firework_promotion_start_time_)));
          set_has_firework_promotion_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2984)) goto parse_firework_promotion_end_time;
        break;
      }

      // optional int64 firework_promotion_end_time = 373;
      case 373: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firework_promotion_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firework_promotion_end_time_)));
          set_has_firework_promotion_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2994)) goto parse_anniversary_task;
        break;
      }

      // optional .app.message.HeroAnniversaryTaskProto anniversary_task = 374;
      case 374: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anniversary_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anniversary_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3000)) goto parse_is_gain_huege_data_prize;
        break;
      }

      // optional bool is_gain_huege_data_prize = 375;
      case 375: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_gain_huege_data_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gain_huege_data_prize_)));
          set_has_is_gain_huege_data_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3010)) goto parse_shield;
        break;
      }

      // optional .app.message.ShieldProto shield = 376;
      case 376: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3016)) goto parse_finished_long_mai_id;
        break;
      }

      // repeated int32 finished_long_mai_id = 377;
      case 377: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_long_mai_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3016, input, this->mutable_finished_long_mai_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished_long_mai_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3016)) goto parse_finished_long_mai_id;
        if (input->ExpectTag(3024)) goto parse_finished_ling_yun_id;
        break;
      }

      // repeated int32 finished_ling_yun_id = 378;
      case 378: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_ling_yun_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3024, input, this->mutable_finished_ling_yun_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished_ling_yun_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3024)) goto parse_finished_ling_yun_id;
        if (input->ExpectTag(3032)) goto parse_finished_zhong_hua_ge_id;
        break;
      }

      // repeated int32 finished_zhong_hua_ge_id = 379;
      case 379: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_zhong_hua_ge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3032, input, this->mutable_finished_zhong_hua_ge_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished_zhong_hua_ge_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3032)) goto parse_finished_zhong_hua_ge_id;
        if (input->ExpectTag(3042)) goto parse_defence_dungeon_state;
        break;
      }

      // repeated .app.message.DefenceDungeonStateClientProto defence_dungeon_state = 380;
      case 380: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence_dungeon_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defence_dungeon_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3042)) goto parse_defence_dungeon_state;
        if (input->ExpectTag(3048)) goto parse_ling_guang;
        break;
      }

      // optional int32 ling_guang = 381;
      case 381: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ling_guang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ling_guang_)));
          set_has_ling_guang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3056)) goto parse_ling_guang_pick;
        break;
      }

      // optional int32 ling_guang_pick = 382;
      case 382: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ling_guang_pick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ling_guang_pick_)));
          set_has_ling_guang_pick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3064)) goto parse_mystery_dungeon_use_time;
        break;
      }

      // optional int32 mystery_dungeon_use_time = 383;
      case 383: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mystery_dungeon_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mystery_dungeon_use_time_)));
          set_has_mystery_dungeon_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3072)) goto parse_qian_qiu_da_jie_qian_neng_extra_max_use_count;
        break;
      }

      // repeated int32 qian_qiu_da_jie_qian_neng_extra_max_use_count = 384;
      case 384: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3072, input, this->mutable_qian_qiu_da_jie_qian_neng_extra_max_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_qian_neng_extra_max_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3072)) goto parse_qian_qiu_da_jie_qian_neng_extra_max_use_count;
        if (input->ExpectTag(3080)) goto parse_qian_qiu_da_jie_huan_hua_extra_max_use_count;
        break;
      }

      // repeated int32 qian_qiu_da_jie_huan_hua_extra_max_use_count = 385;
      case 385: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3080, input, this->mutable_qian_qiu_da_jie_huan_hua_extra_max_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_huan_hua_extra_max_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3080)) goto parse_qian_qiu_da_jie_huan_hua_extra_max_use_count;
        if (input->ExpectTag(3088)) goto parse_qian_qiu_da_jie_qian_neng_max_use_count_extra_times;
        break;
      }

      // repeated int32 qian_qiu_da_jie_qian_neng_max_use_count_extra_times = 386;
      case 386: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3088, input, this->mutable_qian_qiu_da_jie_qian_neng_max_use_count_extra_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_qian_neng_max_use_count_extra_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3088)) goto parse_qian_qiu_da_jie_qian_neng_max_use_count_extra_times;
        if (input->ExpectTag(3096)) goto parse_qian_qiu_da_jie_huan_hua_max_use_count_extra_times;
        break;
      }

      // repeated int32 qian_qiu_da_jie_huan_hua_max_use_count_extra_times = 387;
      case 387: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3096, input, this->mutable_qian_qiu_da_jie_huan_hua_max_use_count_extra_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qian_qiu_da_jie_huan_hua_max_use_count_extra_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3096)) goto parse_qian_qiu_da_jie_huan_hua_max_use_count_extra_times;
        if (input->ExpectTag(3104)) goto parse_mo_shi_qian_neng_extra_max_use_count;
        break;
      }

      // repeated int32 mo_shi_qian_neng_extra_max_use_count = 388;
      case 388: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3104, input, this->mutable_mo_shi_qian_neng_extra_max_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_qian_neng_extra_max_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3104)) goto parse_mo_shi_qian_neng_extra_max_use_count;
        if (input->ExpectTag(3112)) goto parse_mo_shi_huan_hua_extra_max_use_count;
        break;
      }

      // repeated int32 mo_shi_huan_hua_extra_max_use_count = 389;
      case 389: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3112, input, this->mutable_mo_shi_huan_hua_extra_max_use_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_huan_hua_extra_max_use_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3112)) goto parse_mo_shi_huan_hua_extra_max_use_count;
        if (input->ExpectTag(3120)) goto parse_mo_shi_qian_neng_max_use_count_extra_times;
        break;
      }

      // repeated int32 mo_shi_qian_neng_max_use_count_extra_times = 390;
      case 390: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3120, input, this->mutable_mo_shi_qian_neng_max_use_count_extra_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_qian_neng_max_use_count_extra_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3120)) goto parse_mo_shi_qian_neng_max_use_count_extra_times;
        if (input->ExpectTag(3128)) goto parse_mo_shi_huan_hua_max_use_count_extra_times;
        break;
      }

      // repeated int32 mo_shi_huan_hua_max_use_count_extra_times = 391;
      case 391: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 3128, input, this->mutable_mo_shi_huan_hua_max_use_count_extra_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_shi_huan_hua_max_use_count_extra_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3128)) goto parse_mo_shi_huan_hua_max_use_count_extra_times;
        if (input->ExpectTag(3136)) goto parse_chi_huo_shen_gong_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 chi_huo_shen_gong_qian_neng_extra_max_use_count = 392;
      case 392: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_qian_neng_extra_max_use_count_)));
          set_has_chi_huo_shen_gong_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3144)) goto parse_chi_huo_shen_gong_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 chi_huo_shen_gong_huan_hua_extra_max_use_count = 393;
      case 393: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_huan_hua_extra_max_use_count_)));
          set_has_chi_huo_shen_gong_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3152)) goto parse_chi_huo_shen_gong_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times = 394;
      case 394: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_qian_neng_max_use_count_extra_times_)));
          set_has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3160)) goto parse_chi_huo_shen_gong_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times = 395;
      case 395: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_huan_hua_max_use_count_extra_times_)));
          set_has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3170)) goto parse_boss_card;
        break;
      }

      // optional .app.message.HeroBossCard boss_card = 396;
      case 396: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3178)) goto parse_haidi;
        break;
      }

      // optional .app.message.HaidiInfoProto haidi = 397;
      case 397: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_haidi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_haidi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3184)) goto parse_bow_tong_ling_display_id;
        break;
      }

      // optional int32 bow_tong_ling_display_id = 398;
      case 398: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_tong_ling_display_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_tong_ling_display_id_)));
          set_has_bow_tong_ling_display_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3194)) goto parse_bow_tong_ling;
        break;
      }

      // repeated .app.message.BowTongLingClientProto bow_tong_ling = 399;
      case 399: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bow_tong_ling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bow_tong_ling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3194)) goto parse_bow_tong_ling;
        if (input->ExpectTag(3200)) goto parse_sys_hong_bao_colleted_time;
        break;
      }

      // optional int64 sys_hong_bao_colleted_time = 400;
      case 400: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_hong_bao_colleted_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_hong_bao_colleted_time_)));
          set_has_sys_hong_bao_colleted_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4002)) goto parse_tian_xie;
        break;
      }

      // optional .app.message.TianXieProto tian_xie = 500;
      case 500: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tian_xie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tian_xie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4010)) goto parse_jianDao;
        break;
      }

      // optional .app.message.JianDaoProto jianDao = 501;
      case 501: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jianDao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jiandao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4018)) goto parse_lingYu;
        break;
      }

      // optional .app.message.LingYuProto lingYu = 502;
      case 502: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lingYu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lingyu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4026)) goto parse_fengYunDao;
        break;
      }

      // optional .app.message.FengYunDaoProto fengYunDao = 503;
      case 503: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fengYunDao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fengyundao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4034)) goto parse_pet_tong_ling;
        break;
      }

      // repeated .app.message.PetTongLingClientProto pet_tong_ling = 504;
      case 504: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_tong_ling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_tong_ling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4034)) goto parse_pet_tong_ling;
        if (input->ExpectTag(4040)) goto parse_pet_tong_ling_display_id;
        break;
      }

      // optional int32 pet_tong_ling_display_id = 505;
      case 505: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_tong_ling_display_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_tong_ling_display_id_)));
          set_has_pet_tong_ling_display_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4050)) goto parse_pet_tong_ling_single_spell;
        break;
      }

      // repeated .app.message.PetTongLingSingleSpellClientProto pet_tong_ling_single_spell = 506;
      case 506: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_tong_ling_single_spell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_tong_ling_single_spell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4050)) goto parse_pet_tong_ling_single_spell;
        if (input->ExpectTag(4058)) goto parse_mo_fang;
        break;
      }

      // optional .app.message.MoFangClientProto mo_fang = 507;
      case 507: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mo_fang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mo_fang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4064)) goto parse_qian_qiu_da_jie_is_hide;
        break;
      }

      // optional bool qian_qiu_da_jie_is_hide = 508;
      case 508: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_qiu_da_jie_is_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qian_qiu_da_jie_is_hide_)));
          set_has_qian_qiu_da_jie_is_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4072)) goto parse_chi_huo_shen_gong_is_hide;
        break;
      }

      // optional bool chi_huo_shen_gong_is_hide = 509;
      case 509: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_is_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chi_huo_shen_gong_is_hide_)));
          set_has_chi_huo_shen_gong_is_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4080)) goto parse_mo_shi_is_hide;
        break;
      }

      // optional bool mo_shi_is_hide = 510;
      case 510: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_shi_is_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mo_shi_is_hide_)));
          set_has_mo_shi_is_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4120)) goto parse_hell_dungeon_enter_count;
        break;
      }

      // optional int32 hell_dungeon_enter_count = 515;
      case 515: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hell_dungeon_enter_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hell_dungeon_enter_count_)));
          set_has_hell_dungeon_enter_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 race = 2;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->race(), output);
  }

  // optional int32 sceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  // optional int32 yuanbao = 4;
  if (has_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->yuanbao(), output);
  }

  // optional int32 lijin = 5;
  if (has_lijin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lijin(), output);
  }

  // optional int32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money(), output);
  }

  // optional .app.message.GoodsContainerProto depot = 7;
  if (has_depot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->depot(), output);
  }

  // optional int32 real_air = 9;
  if (has_real_air()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->real_air(), output);
  }

  // optional int32 fighting_amount = 10;
  if (has_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fighting_amount(), output);
  }

  // optional .app.message.SpriteStatProto total_stat = 11;
  if (has_total_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->total_stat(), output);
  }

  // repeated int32 equiped_pos = 12;
  for (int i = 0; i < this->equiped_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->equiped_pos(i), output);
  }

  // repeated .app.message.EquipmentDataProto equipment_datas = 13;
  for (int i = 0; i < this->equipment_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->equipment_datas(i), output);
  }

  // repeated .app.message.EquipmentProto equipments = 14;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->equipments(i), output);
  }

  // optional int64 exp = 15;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->exp(), output);
  }

  // optional int64 upgrade_exp = 16;
  if (has_upgrade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->upgrade_exp(), output);
  }

  // optional int64 equipment_resources = 17;
  if (has_equipment_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->equipment_resources(), output);
  }

  // optional bool has_storage = 18;
  if (has_has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->has_storage(), output);
  }

  // repeated bytes buy_back_goods_datas = 19;
  for (int i = 0; i < this->buy_back_goods_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->buy_back_goods_datas(i), output);
  }

  // repeated bytes buy_back_goods_list = 20;
  for (int i = 0; i < this->buy_back_goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->buy_back_goods_list(i), output);
  }

  // optional bool team_auto_accept_invite = 21 [default = true];
  if (has_team_auto_accept_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->team_auto_accept_invite(), output);
  }

  // optional bool team_auto_accept_request = 22 [default = true];
  if (has_team_auto_accept_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->team_auto_accept_request(), output);
  }

  // optional bool trade_auto_reject_invite = 23;
  if (has_trade_auto_reject_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->trade_auto_reject_invite(), output);
  }

  // optional .app.message.HeroTaskProto task = 24;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->task(), output);
  }

  // optional int64 client_only_config_1 = 25;
  if (has_client_only_config_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->client_only_config_1(), output);
  }

  // repeated int32 client_only_int_configs = 26;
  for (int i = 0; i < this->client_only_int_configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      26, this->client_only_int_configs(i), output);
  }

  // optional bytes guild_name = 27;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      27, this->guild_name(), output);
  }

  // optional bool guild_auto_accept_invite = 28;
  if (has_guild_auto_accept_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->guild_auto_accept_invite(), output);
  }

  // optional bool guild_forbid_other_invite_me_join = 29;
  if (has_guild_forbid_other_invite_me_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->guild_forbid_other_invite_me_join(), output);
  }

  // optional int32 guild_li_lian = 30;
  if (has_guild_li_lian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->guild_li_lian(), output);
  }

  // optional int32 guild_contribution = 31;
  if (has_guild_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->guild_contribution(), output);
  }

  // repeated bytes friend_guild_name = 32;
  for (int i = 0; i < this->friend_guild_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      32, this->friend_guild_name(i), output);
  }

  // repeated bytes enemy_guild_name = 33;
  for (int i = 0; i < this->enemy_guild_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      33, this->enemy_guild_name(i), output);
  }

  // optional int64 accumulated_offline_time = 34;
  if (has_accumulated_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->accumulated_offline_time(), output);
  }

  // optional int32 vip_exp = 35;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->vip_exp(), output);
  }

  // repeated .app.message.StoryDungeonStatProto story_dungeon_proto = 36;
  for (int i = 0; i < this->story_dungeon_proto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->story_dungeon_proto(i), output);
  }

  // repeated .app.message.StoryDungeonCollectablePrizeProto story_dungeon_collectable_prize_proto = 37;
  for (int i = 0; i < this->story_dungeon_collectable_prize_proto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->story_dungeon_collectable_prize_proto(i), output);
  }

  // optional int32 auto_finish_story_id = 38;
  if (has_auto_finish_story_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->auto_finish_story_id(), output);
  }

  // optional int64 auto_finish_story_complete_time = 39;
  if (has_auto_finish_story_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->auto_finish_story_complete_time(), output);
  }

  // optional int32 finished_challenge_dungeon_sequence_id = 40;
  if (has_finished_challenge_dungeon_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->finished_challenge_dungeon_sequence_id(), output);
  }

  // optional int32 defence_today_finished_batch = 41 [deprecated = true];
  if (has_defence_today_finished_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->defence_today_finished_batch(), output);
  }

  // optional int32 defence_history_max_batch = 42 [deprecated = true];
  if (has_defence_history_max_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->defence_history_max_batch(), output);
  }

  // optional int32 defence_today_reset_count = 44;
  if (has_defence_today_reset_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->defence_today_reset_count(), output);
  }

  // optional int32 defence_collected_first_pass_prize = 45 [deprecated = true];
  if (has_defence_collected_first_pass_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->defence_collected_first_pass_prize(), output);
  }

  // repeated int32 finished_vip_dungeon_id = 46;
  for (int i = 0; i < this->finished_vip_dungeon_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      46, this->finished_vip_dungeon_id(i), output);
  }

  // repeated bytes defence_collectable_prize = 47 [deprecated = true];
  for (int i = 0; i < this->defence_collectable_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      47, this->defence_collectable_prize(i), output);
  }

  // optional int32 sou_shen_point = 48;
  if (has_sou_shen_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->sou_shen_point(), output);
  }

  // repeated int32 sou_shen_today_passed_id = 49;
  for (int i = 0; i < this->sou_shen_today_passed_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      49, this->sou_shen_today_passed_id(i), output);
  }

  // repeated int32 sou_shen_life_passed_id = 50;
  for (int i = 0; i < this->sou_shen_life_passed_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      50, this->sou_shen_life_passed_id(i), output);
  }

  // optional int32 ling_yun_today_entered_times = 51;
  if (has_ling_yun_today_entered_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->ling_yun_today_entered_times(), output);
  }

  // repeated .app.message.GroupDungeonCollectablePrizeProto group_collectable_prize_proto = 52;
  for (int i = 0; i < this->group_collectable_prize_proto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->group_collectable_prize_proto(i), output);
  }

  // optional bool long_mai_today_first_passed = 53;
  if (has_long_mai_today_first_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->long_mai_today_first_passed(), output);
  }

  // optional int32 wu_jue_today_entered_times = 54;
  if (has_wu_jue_today_entered_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->wu_jue_today_entered_times(), output);
  }

  // repeated int32 territory_today_collected_prize_scene_id = 55;
  for (int i = 0; i < this->territory_today_collected_prize_scene_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      55, this->territory_today_collected_prize_scene_id(i), output);
  }

  // optional int32 guild_flag_level = 56;
  if (has_guild_flag_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->guild_flag_level(), output);
  }

  // optional bool is_ws_city_master = 57;
  if (has_is_ws_city_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->is_ws_city_master(), output);
  }

  // optional bool is_long_city_master = 58;
  if (has_is_long_city_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->is_long_city_master(), output);
  }

  // optional bool is_guild_leader = 59;
  if (has_is_guild_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->is_guild_leader(), output);
  }

  // optional bool is_territory_leader = 60;
  if (has_is_territory_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->is_territory_leader(), output);
  }

  // repeated int32 daily_activity_result = 68;
  for (int i = 0; i < this->daily_activity_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      68, this->daily_activity_result(i), output);
  }

  // optional int32 sheng_wang = 69;
  if (has_sheng_wang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->sheng_wang(), output);
  }

  // repeated int32 sheng_wang_task = 70;
  for (int i = 0; i < this->sheng_wang_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      70, this->sheng_wang_task(i), output);
  }

  // optional int32 use_free_chat_times = 71;
  if (has_use_free_chat_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->use_free_chat_times(), output);
  }

  // repeated int32 gems = 72;
  for (int i = 0; i < this->gems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      72, this->gems(i), output);
  }

  // optional .app.message.BowProto bow = 73;
  if (has_bow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->bow(), output);
  }

  // repeated int64 admired_hero = 74;
  for (int i = 0; i < this->admired_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      74, this->admired_hero(i), output);
  }

  // optional int64 last_logout_time = 75;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(75, this->last_logout_time(), output);
  }

  // optional int32 collected_vip_prize = 76;
  if (has_collected_vip_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->collected_vip_prize(), output);
  }

  // optional int64 next_collect_vip_weekly_prize_time = 77;
  if (has_next_collect_vip_weekly_prize_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(77, this->next_collect_vip_weekly_prize_time(), output);
  }

  // optional int32 using_weapon = 78;
  if (has_using_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->using_weapon(), output);
  }

  // repeated .app.message.SuperWeaponProto super_weapon = 79;
  for (int i = 0; i < this->super_weapon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->super_weapon(i), output);
  }

  // optional int32 divine_times = 80;
  if (has_divine_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->divine_times(), output);
  }

  // optional int32 divine_amount = 81 [deprecated = true];
  if (has_divine_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(81, this->divine_amount(), output);
  }

  // optional int32 divine_storage_goods_count = 82;
  if (has_divine_storage_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->divine_storage_goods_count(), output);
  }

  // optional .app.message.MountProto mount = 83;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, this->mount(), output);
  }

  // optional int32 lottery = 84;
  if (has_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(84, this->lottery(), output);
  }

  // optional int64 daily_online_acc_time = 85;
  if (has_daily_online_acc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(85, this->daily_online_acc_time(), output);
  }

  // optional int32 sign = 86;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(86, this->sign(), output);
  }

  // optional int32 sign_prize = 87;
  if (has_sign_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->sign_prize(), output);
  }

  // optional int32 replenish_sign_times = 88;
  if (has_replenish_sign_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(88, this->replenish_sign_times(), output);
  }

  // optional int64 next_reduce_pk_amount_time = 89;
  if (has_next_reduce_pk_amount_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(89, this->next_reduce_pk_amount_time(), output);
  }

  // optional int32 pk_amount = 90;
  if (has_pk_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->pk_amount(), output);
  }

  // optional int64 relive_protected_end_time = 91;
  if (has_relive_protected_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(91, this->relive_protected_end_time(), output);
  }

  // optional int32 total_sign_times = 92;
  if (has_total_sign_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(92, this->total_sign_times(), output);
  }

  // optional int32 total_recharge_yuanbao = 93;
  if (has_total_recharge_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(93, this->total_recharge_yuanbao(), output);
  }

  // repeated bytes lottery_goods_static_data = 94;
  for (int i = 0; i < this->lottery_goods_static_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      94, this->lottery_goods_static_data(i), output);
  }

  // repeated bytes lottery_goods_dynamic_data = 95;
  for (int i = 0; i < this->lottery_goods_dynamic_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      95, this->lottery_goods_dynamic_data(i), output);
  }

  // optional .app.message.PetProto pet = 96;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      96, this->pet(), output);
  }

  // optional bool has_recharge = 97;
  if (has_has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->has_recharge(), output);
  }

  // repeated .app.message.CombineXinfaSpellProto combine_spells = 98;
  for (int i = 0; i < this->combine_spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      98, this->combine_spells(i), output);
  }

  // repeated .app.message.ActiveSpell passive_spell = 99;
  for (int i = 0; i < this->passive_spell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, this->passive_spell(i), output);
  }

  // repeated .app.message.ActiveSpell active_spell = 100 [deprecated = true];
  for (int i = 0; i < this->active_spell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->active_spell(i), output);
  }

  // repeated int32 active_spell_used_times = 101 [deprecated = true];
  for (int i = 0; i < this->active_spell_used_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      101, this->active_spell_used_times(i), output);
  }

  // repeated int32 shortcut_spell_type = 102;
  for (int i = 0; i < this->shortcut_spell_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      102, this->shortcut_spell_type(i), output);
  }

  // repeated int32 shortcut_spell_pos = 103;
  for (int i = 0; i < this->shortcut_spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      103, this->shortcut_spell_pos(i), output);
  }

  // optional int32 default_spell_pos = 104;
  if (has_default_spell_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(104, this->default_spell_pos(), output);
  }

  // optional int32 jump_shield = 105;
  if (has_jump_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(105, this->jump_shield(), output);
  }

  // optional int32 stamina = 106;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(106, this->stamina(), output);
  }

  // optional .app.message.ClientRelation client_relation = 107;
  if (has_client_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->client_relation(), output);
  }

  // repeated int32 func_bits = 108;
  for (int i = 0; i < this->func_bits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      108, this->func_bits(i), output);
  }

  // optional int32 rage_amount = 109;
  if (has_rage_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(109, this->rage_amount(), output);
  }

  // optional int64 create_time = 110;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(110, this->create_time(), output);
  }

  // optional bool is_collect_local_login_first_prize = 111;
  if (has_is_collect_local_login_first_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(111, this->is_collect_local_login_first_prize(), output);
  }

  // optional bool is_collect_local_login_daily_prize = 112;
  if (has_is_collect_local_login_daily_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(112, this->is_collect_local_login_daily_prize(), output);
  }

  // optional int32 phoenix_refine_times = 113 [deprecated = true];
  if (has_phoenix_refine_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(113, this->phoenix_refine_times(), output);
  }

  // optional bool is_cross_single_story = 114;
  if (has_is_cross_single_story()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(114, this->is_cross_single_story(), output);
  }

  // optional bool team_forbid_other_invite_me_join = 115;
  if (has_team_forbid_other_invite_me_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(115, this->team_forbid_other_invite_me_join(), output);
  }

  // optional int32 phoenix_money_refine_times = 116;
  if (has_phoenix_money_refine_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(116, this->phoenix_money_refine_times(), output);
  }

  // optional int32 phoenix_lijin_refine_times = 117;
  if (has_phoenix_lijin_refine_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(117, this->phoenix_lijin_refine_times(), output);
  }

  // optional int32 phoenix_yuanbao_refine_times = 118;
  if (has_phoenix_yuanbao_refine_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(118, this->phoenix_yuanbao_refine_times(), output);
  }

  // optional int32 login_day = 119;
  if (has_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(119, this->login_day(), output);
  }

  // optional int32 tu_long_today_entered_times = 120;
  if (has_tu_long_today_entered_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(120, this->tu_long_today_entered_times(), output);
  }

  // optional int32 melt_amount = 121;
  if (has_melt_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(121, this->melt_amount(), output);
  }

  // optional int32 challenge_dungeon_daily_times = 122;
  if (has_challenge_dungeon_daily_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(122, this->challenge_dungeon_daily_times(), output);
  }

  // optional int32 challenge_dungeon_assist_times = 123;
  if (has_challenge_dungeon_assist_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(123, this->challenge_dungeon_assist_times(), output);
  }

  // repeated int32 challenge_dungeon_use_times = 124;
  for (int i = 0; i < this->challenge_dungeon_use_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      124, this->challenge_dungeon_use_times(i), output);
  }

  // optional int32 honor = 125;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(125, this->honor(), output);
  }

  // optional .app.message.TianZuiProto tian_zui = 126;
  if (has_tian_zui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, this->tian_zui(), output);
  }

  // optional .app.message.TianJieProto tian_jie = 127;
  if (has_tian_jie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, this->tian_jie(), output);
  }

  // optional int32 first_recharge_collect_index = 129;
  if (has_first_recharge_collect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(129, this->first_recharge_collect_index(), output);
  }

  // optional int32 ling_yun_today_finish_state = 130;
  if (has_ling_yun_today_finish_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(130, this->ling_yun_today_finish_state(), output);
  }

  // optional int32 login_prize_info = 131;
  if (has_login_prize_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(131, this->login_prize_info(), output);
  }

  // optional int32 invest_upgrade_bank_money = 132;
  if (has_invest_upgrade_bank_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(132, this->invest_upgrade_bank_money(), output);
  }

  // repeated int32 collect_upgrade_bank_level = 133;
  for (int i = 0; i < this->collect_upgrade_bank_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      133, this->collect_upgrade_bank_level(i), output);
  }

  // repeated int32 collect_upgrade_bank_lijin = 134;
  for (int i = 0; i < this->collect_upgrade_bank_lijin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      134, this->collect_upgrade_bank_lijin(i), output);
  }

  // optional int32 invest_monthly_bank_money = 135;
  if (has_invest_monthly_bank_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(135, this->invest_monthly_bank_money(), output);
  }

  // optional int64 invest_monthly_bank_time = 136;
  if (has_invest_monthly_bank_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(136, this->invest_monthly_bank_time(), output);
  }

  // optional int64 monthly_bank_prev_collect_time = 137;
  if (has_monthly_bank_prev_collect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(137, this->monthly_bank_prev_collect_time(), output);
  }

  // optional int64 monthly_bank_prev_collect_time2 = 138;
  if (has_monthly_bank_prev_collect_time2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(138, this->monthly_bank_prev_collect_time2(), output);
  }

  // optional int32 monthly_bank_online_lijin = 139;
  if (has_monthly_bank_online_lijin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(139, this->monthly_bank_online_lijin(), output);
  }

  // optional int32 monthly_bank_base_lijin = 140;
  if (has_monthly_bank_base_lijin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(140, this->monthly_bank_base_lijin(), output);
  }

  // optional int32 monthly_bank_online_hours = 141;
  if (has_monthly_bank_online_hours()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(141, this->monthly_bank_online_hours(), output);
  }

  // optional int64 total_online_time = 142;
  if (has_total_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(142, this->total_online_time(), output);
  }

  // optional .app.message.AchievementInfoProto achievement = 143;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, this->achievement(), output);
  }

  // optional int32 spell_added_upgrade_level = 144;
  if (has_spell_added_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(144, this->spell_added_upgrade_level(), output);
  }

  // optional .app.message.ShouCangProto shou_cang = 200;
  if (has_shou_cang()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->shou_cang(), output);
  }

  // optional bool zhong_hua_ge_today_first_passed = 201;
  if (has_zhong_hua_ge_today_first_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->zhong_hua_ge_today_first_passed(), output);
  }

  // optional int32 gaoji_melt_amount = 202;
  if (has_gaoji_melt_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->gaoji_melt_amount(), output);
  }

  // optional int32 left_ya_biao_times_today = 203;
  if (has_left_ya_biao_times_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(203, this->left_ya_biao_times_today(), output);
  }

  // optional int32 left_jie_biao_times_today = 204;
  if (has_left_jie_biao_times_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(204, this->left_jie_biao_times_today(), output);
  }

  // optional bool has_safe_code = 205;
  if (has_has_safe_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(205, this->has_safe_code(), output);
  }

  // optional string safe_code_question = 206;
  if (has_safe_code_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safe_code_question().data(), this->safe_code_question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      206, this->safe_code_question(), output);
  }

  // repeated int32 jin_jie_lucky_card_type = 207;
  for (int i = 0; i < this->jin_jie_lucky_card_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      207, this->jin_jie_lucky_card_type(i), output);
  }

  // repeated int64 jin_jie_lucky_card_expire_time = 208;
  for (int i = 0; i < this->jin_jie_lucky_card_expire_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      208, this->jin_jie_lucky_card_expire_time(i), output);
  }

  // repeated int32 jin_jie_lucky_card_rate = 209;
  for (int i = 0; i < this->jin_jie_lucky_card_rate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      209, this->jin_jie_lucky_card_rate(i), output);
  }

  // repeated int32 daily_card_use_stat_goods_id = 210;
  for (int i = 0; i < this->daily_card_use_stat_goods_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      210, this->daily_card_use_stat_goods_id(i), output);
  }

  // repeated int32 daily_card_use_stat_use_count = 211;
  for (int i = 0; i < this->daily_card_use_stat_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      211, this->daily_card_use_stat_use_count(i), output);
  }

  // repeated int32 mo_shi_type = 212;
  for (int i = 0; i < this->mo_shi_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      212, this->mo_shi_type(i), output);
  }

  // repeated int32 mo_shi_level = 213;
  for (int i = 0; i < this->mo_shi_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      213, this->mo_shi_level(i), output);
  }

  // repeated int32 mo_shi_bless_amount = 214;
  for (int i = 0; i < this->mo_shi_bless_amount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      214, this->mo_shi_bless_amount(i), output);
  }

  // repeated int64 mo_shi_bless_amount_clear_time = 215;
  for (int i = 0; i < this->mo_shi_bless_amount_clear_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      215, this->mo_shi_bless_amount_clear_time(i), output);
  }

  // repeated int32 mo_shi_spell_id = 216;
  for (int i = 0; i < this->mo_shi_spell_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      216, this->mo_shi_spell_id(i), output);
  }

  // repeated int32 qian_qiu_da_jie_type = 217;
  for (int i = 0; i < this->qian_qiu_da_jie_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      217, this->qian_qiu_da_jie_type(i), output);
  }

  // repeated int32 qian_qiu_da_jie_level = 218;
  for (int i = 0; i < this->qian_qiu_da_jie_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      218, this->qian_qiu_da_jie_level(i), output);
  }

  // repeated int32 qian_qiu_da_jie_bless_amount = 219;
  for (int i = 0; i < this->qian_qiu_da_jie_bless_amount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      219, this->qian_qiu_da_jie_bless_amount(i), output);
  }

  // repeated int64 qian_qiu_da_jie_bless_amount_clear_time = 220;
  for (int i = 0; i < this->qian_qiu_da_jie_bless_amount_clear_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      220, this->qian_qiu_da_jie_bless_amount_clear_time(i), output);
  }

  // optional int32 long_yuan = 221;
  if (has_long_yuan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(221, this->long_yuan(), output);
  }

  // optional .app.message.HeroJingJieProto jing_jie = 222;
  if (has_jing_jie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      222, this->jing_jie(), output);
  }

  // repeated int32 mo_shi_qian_neng_use_count = 223;
  for (int i = 0; i < this->mo_shi_qian_neng_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      223, this->mo_shi_qian_neng_use_count(i), output);
  }

  // repeated int32 mo_shi_huan_hua_use_count = 224;
  for (int i = 0; i < this->mo_shi_huan_hua_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      224, this->mo_shi_huan_hua_use_count(i), output);
  }

  // optional int32 chi_huo_shen_gong_jie_shu = 225;
  if (has_chi_huo_shen_gong_jie_shu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(225, this->chi_huo_shen_gong_jie_shu(), output);
  }

  // optional int32 chi_huo_shen_gong_ceng_shu = 226;
  if (has_chi_huo_shen_gong_ceng_shu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(226, this->chi_huo_shen_gong_ceng_shu(), output);
  }

  // optional int32 chi_huo_shen_gong_bless_amount = 227;
  if (has_chi_huo_shen_gong_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(227, this->chi_huo_shen_gong_bless_amount(), output);
  }

  // optional int64 chi_huo_shen_gong_bless_amount_clear_time = 228;
  if (has_chi_huo_shen_gong_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(228, this->chi_huo_shen_gong_bless_amount_clear_time(), output);
  }

  // optional int32 draw_prize_point = 230;
  if (has_draw_prize_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(230, this->draw_prize_point(), output);
  }

  // optional int32 draw_prize_storage_goods_count = 231;
  if (has_draw_prize_storage_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(231, this->draw_prize_storage_goods_count(), output);
  }

  // repeated int32 draw_prize_exchange_count = 232;
  for (int i = 0; i < this->draw_prize_exchange_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      232, this->draw_prize_exchange_count(i), output);
  }

  // optional int32 lucky_draw_prize_point = 233;
  if (has_lucky_draw_prize_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(233, this->lucky_draw_prize_point(), output);
  }

  // optional int32 lucky_draw_prize_storage_goods_count = 234;
  if (has_lucky_draw_prize_storage_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(234, this->lucky_draw_prize_storage_goods_count(), output);
  }

  // optional .app.message.YitianshenjueProto yitianshenjue_info = 235;
  if (has_yitianshenjue_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      235, this->yitianshenjue_info(), output);
  }

  // optional .app.message.SpriteStatProto super_weapon_max_level_add_stat = 236;
  if (has_super_weapon_max_level_add_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      236, this->super_weapon_max_level_add_stat(), output);
  }

  // optional .app.message.SpriteStatProto magic_added_stat = 237;
  if (has_magic_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      237, this->magic_added_stat(), output);
  }

  // optional .app.message.SpriteStatProto magic_not_saved_added_stat = 238;
  if (has_magic_not_saved_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      238, this->magic_not_saved_added_stat(), output);
  }

  // repeated bool has_unlock_magic_weapon_gem = 239;
  for (int i = 0; i < this->has_unlock_magic_weapon_gem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      239, this->has_unlock_magic_weapon_gem(i), output);
  }

  // repeated int32 magic_weapon_gem_level = 240;
  for (int i = 0; i < this->magic_weapon_gem_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      240, this->magic_weapon_gem_level(i), output);
  }

  // repeated bool magic_weapon_gem_binded = 241;
  for (int i = 0; i < this->magic_weapon_gem_binded_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      241, this->magic_weapon_gem_binded(i), output);
  }

  // optional int32 wu_jue_today_collected_first_try_transport_prize_times = 242;
  if (has_wu_jue_today_collected_first_try_transport_prize_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(242, this->wu_jue_today_collected_first_try_transport_prize_times(), output);
  }

  // optional int32 daily_wheel_count = 270;
  if (has_daily_wheel_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(270, this->daily_wheel_count(), output);
  }

  // repeated int32 finished_xin_mo_scene_id = 280;
  for (int i = 0; i < this->finished_xin_mo_scene_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      280, this->finished_xin_mo_scene_id(i), output);
  }

  // optional bool has_magic_weapon = 298;
  if (has_has_magic_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(298, this->has_magic_weapon(), output);
  }

  // repeated int64 collected_recharge_rank_promotion_prize = 299;
  for (int i = 0; i < this->collected_recharge_rank_promotion_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      299, this->collected_recharge_rank_promotion_prize(i), output);
  }

  // repeated int64 collected_rank_promotion_prize = 300;
  for (int i = 0; i < this->collected_rank_promotion_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      300, this->collected_rank_promotion_prize(i), output);
  }

  // optional int32 arena_pair_point = 301;
  if (has_arena_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(301, this->arena_pair_point(), output);
  }

  // optional int32 today_finished_arena_count = 302;
  if (has_today_finished_arena_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(302, this->today_finished_arena_count(), output);
  }

  // optional int32 arena_shop_point = 303;
  if (has_arena_shop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(303, this->arena_shop_point(), output);
  }

  // optional int32 arena_collectable_shop_point = 304;
  if (has_arena_collectable_shop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(304, this->arena_collectable_shop_point(), output);
  }

  // optional int32 arena_yesterday_finish_count = 305;
  if (has_arena_yesterday_finish_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(305, this->arena_yesterday_finish_count(), output);
  }

  // optional int32 arena_yesterday_pair_point = 306;
  if (has_arena_yesterday_pair_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(306, this->arena_yesterday_pair_point(), output);
  }

  // optional int32 arena_yesterday_original_shop_point = 307;
  if (has_arena_yesterday_original_shop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(307, this->arena_yesterday_original_shop_point(), output);
  }

  // optional int32 arena_shop_point_added_today_by_win = 308;
  if (has_arena_shop_point_added_today_by_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(308, this->arena_shop_point_added_today_by_win(), output);
  }

  // optional int64 next_can_use_guild_lilian_time = 310;
  if (has_next_can_use_guild_lilian_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(310, this->next_can_use_guild_lilian_time(), output);
  }

  // optional .app.message.GuildDungeonCollectedPrizeProto guild_dungeon_collected_prize = 311;
  if (has_guild_dungeon_collected_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      311, this->guild_dungeon_collected_prize(), output);
  }

  // optional .app.message.HeroSuperArmProto super_arm = 312;
  if (has_super_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      312, this->super_arm(), output);
  }

  // optional .app.message.DemonProto demon = 313;
  if (has_demon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      313, this->demon(), output);
  }

  // optional .app.message.CloakProto cloak = 314;
  if (has_cloak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      314, this->cloak(), output);
  }

  // optional int64 pet_combine_added_life = 315;
  if (has_pet_combine_added_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(315, this->pet_combine_added_life(), output);
  }

  // optional int64 pet_next_can_combine_time = 316;
  if (has_pet_next_can_combine_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(316, this->pet_next_can_combine_time(), output);
  }

  // optional int32 gallup_answered_question_count = 317;
  if (has_gallup_answered_question_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(317, this->gallup_answered_question_count(), output);
  }

  // optional int32 gallup_today_answered_question_count = 318;
  if (has_gallup_today_answered_question_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(318, this->gallup_today_answered_question_count(), output);
  }

  // optional .app.message.HeroMarriageProto marriage = 319;
  if (has_marriage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      319, this->marriage(), output);
  }

  // optional int64 wash_super_weapon_bless_clear_time = 320;
  if (has_wash_super_weapon_bless_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(320, this->wash_super_weapon_bless_clear_time(), output);
  }

  // optional int32 tian_men_times = 321;
  if (has_tian_men_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(321, this->tian_men_times(), output);
  }

  // optional bool has_collect_guild_plant_prize = 322;
  if (has_has_collect_guild_plant_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(322, this->has_collect_guild_plant_prize(), output);
  }

  // optional bool hide_city_master = 323;
  if (has_hide_city_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(323, this->hide_city_master(), output);
  }

  // optional bool hide_long_city_master = 324;
  if (has_hide_long_city_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(324, this->hide_long_city_master(), output);
  }

  // optional int32 p37_vip_prize_count_flag = 325;
  if (has_p37_vip_prize_count_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(325, this->p37_vip_prize_count_flag(), output);
  }

  // optional int64 last_change_name_time = 326;
  if (has_last_change_name_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(326, this->last_change_name_time(), output);
  }

  // optional int64 next_can_change_race_time = 327;
  if (has_next_can_change_race_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(327, this->next_can_change_race_time(), output);
  }

  // optional int32 htz_times = 328;
  if (has_htz_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(328, this->htz_times(), output);
  }

  // optional int32 htz_max_destroy_record = 329;
  if (has_htz_max_destroy_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(329, this->htz_max_destroy_record(), output);
  }

  // optional int32 htz_time_record = 330;
  if (has_htz_time_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(330, this->htz_time_record(), output);
  }

  // repeated int32 limit_count_goods_id = 331;
  for (int i = 0; i < this->limit_count_goods_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      331, this->limit_count_goods_id(i), output);
  }

  // repeated int32 limit_count_goods_use_times = 332;
  for (int i = 0; i < this->limit_count_goods_use_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      332, this->limit_count_goods_use_times(i), output);
  }

  // optional int32 new_draw_prize_point = 333;
  if (has_new_draw_prize_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(333, this->new_draw_prize_point(), output);
  }

  // optional int32 new_draw_prize_storage_goods_count = 334;
  if (has_new_draw_prize_storage_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(334, this->new_draw_prize_storage_goods_count(), output);
  }

  // repeated int64 single_wash_super_weapon_bless_clear_time = 335;
  for (int i = 0; i < this->single_wash_super_weapon_bless_clear_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      335, this->single_wash_super_weapon_bless_clear_time(i), output);
  }

  // repeated int32 single_wash_super_weapon_bless_type = 336;
  for (int i = 0; i < this->single_wash_super_weapon_bless_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      336, this->single_wash_super_weapon_bless_type(i), output);
  }

  // optional bytes arena_fighting_team_name_bytes = 337;
  if (has_arena_fighting_team_name_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      337, this->arena_fighting_team_name_bytes(), output);
  }

  // optional int32 arena_fighting_team_shop_point = 338;
  if (has_arena_fighting_team_shop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(338, this->arena_fighting_team_shop_point(), output);
  }

  // optional int32 arena_fighting_team_shop_point_added_today_by_win = 339;
  if (has_arena_fighting_team_shop_point_added_today_by_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(339, this->arena_fighting_team_shop_point_added_today_by_win(), output);
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_use_count = 340;
  for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      340, this->qian_qiu_da_jie_qian_neng_use_count(i), output);
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_use_count = 341;
  for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      341, this->qian_qiu_da_jie_huan_hua_use_count(i), output);
  }

  // optional .app.message.MoBingProto mo_bing_proto = 342;
  if (has_mo_bing_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      342, this->mo_bing_proto(), output);
  }

  // optional int32 use_mount_tongling_id = 343;
  if (has_use_mount_tongling_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(343, this->use_mount_tongling_id(), output);
  }

  // repeated int32 active_mount_tongling_ids = 344;
  for (int i = 0; i < this->active_mount_tongling_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      344, this->active_mount_tongling_ids(i), output);
  }

  // optional int64 change_use_mount_tongling_id_cd_time = 345;
  if (has_change_use_mount_tongling_id_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(345, this->change_use_mount_tongling_id_cd_time(), output);
  }

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat1 = 346;
  for (int i = 0; i < this->not_save_xun_zhang_random_stat1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      346, this->not_save_xun_zhang_random_stat1(i), output);
  }

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat2 = 347;
  for (int i = 0; i < this->not_save_xun_zhang_random_stat2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      347, this->not_save_xun_zhang_random_stat2(i), output);
  }

  // optional bool finished_collected_fight_amout_changed_value_rank_daily_prize = 348;
  if (has_finished_collected_fight_amout_changed_value_rank_daily_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(348, this->finished_collected_fight_amout_changed_value_rank_daily_prize(), output);
  }

  // repeated int32 finished_yy_purple_dungeon_count = 349;
  for (int i = 0; i < this->finished_yy_purple_dungeon_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      349, this->finished_yy_purple_dungeon_count(i), output);
  }

  // optional int32 chi_huo_shen_gong_qian_neng_use_count = 350;
  if (has_chi_huo_shen_gong_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(350, this->chi_huo_shen_gong_qian_neng_use_count(), output);
  }

  // optional int32 chi_huo_shen_gong_huan_hua_use_count = 351;
  if (has_chi_huo_shen_gong_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(351, this->chi_huo_shen_gong_huan_hua_use_count(), output);
  }

  // repeated int32 he_cheng_goods_id = 353;
  for (int i = 0; i < this->he_cheng_goods_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      353, this->he_cheng_goods_id(i), output);
  }

  // repeated int32 he_cheng_goods_count = 354;
  for (int i = 0; i < this->he_cheng_goods_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      354, this->he_cheng_goods_count(i), output);
  }

  // optional int32 christmas_storage_goods_count = 355;
  if (has_christmas_storage_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(355, this->christmas_storage_goods_count(), output);
  }

  // optional int32 credits = 356;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(356, this->credits(), output);
  }

  // repeated int32 mount_tongling_wake_value = 357;
  for (int i = 0; i < this->mount_tongling_wake_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      357, this->mount_tongling_wake_value(i), output);
  }

  // optional int32 monopoly_now_cell_id = 358;
  if (has_monopoly_now_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(358, this->monopoly_now_cell_id(), output);
  }

  // optional int32 monopoly_now_roll_times_cost = 359;
  if (has_monopoly_now_roll_times_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(359, this->monopoly_now_roll_times_cost(), output);
  }

  // optional int32 monopoly_roll_times = 360;
  if (has_monopoly_roll_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(360, this->monopoly_roll_times(), output);
  }

  // optional int32 monopoly_buy_roll_times = 361;
  if (has_monopoly_buy_roll_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(361, this->monopoly_buy_roll_times(), output);
  }

  // optional int32 credits_draw_storage_goods_count = 362;
  if (has_credits_draw_storage_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(362, this->credits_draw_storage_goods_count(), output);
  }

  // optional .app.message.HeroLoveProto love = 363;
  if (has_love()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      363, this->love(), output);
  }

  // optional .app.message.WuDaoProto wu_dao = 364;
  if (has_wu_dao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      364, this->wu_dao(), output);
  }

  // optional .app.message.NiDaoQianKunClient ni_dao_qian_kun = 365;
  if (has_ni_dao_qian_kun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      365, this->ni_dao_qian_kun(), output);
  }

  // optional int32 finished_tong_tian_ta_dungeon_sequence = 366;
  if (has_finished_tong_tian_ta_dungeon_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(366, this->finished_tong_tian_ta_dungeon_sequence(), output);
  }

  // optional int32 tong_tian_ta_dungeon_daily_times = 367;
  if (has_tong_tian_ta_dungeon_daily_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(367, this->tong_tian_ta_dungeon_daily_times(), output);
  }

  // repeated int32 tong_tian_ta_dungeon_use_times = 368;
  for (int i = 0; i < this->tong_tian_ta_dungeon_use_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      368, this->tong_tian_ta_dungeon_use_times(i), output);
  }

  // optional int32 tong_tian_ta_dungeon_refresh_times = 369;
  if (has_tong_tian_ta_dungeon_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(369, this->tong_tian_ta_dungeon_refresh_times(), output);
  }

  // optional .app.message.HeroAnniversaryProto anniversary = 370;
  if (has_anniversary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      370, this->anniversary(), output);
  }

  // repeated int32 firework_color_values = 371;
  for (int i = 0; i < this->firework_color_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      371, this->firework_color_values(i), output);
  }

  // optional int64 firework_promotion_start_time = 372;
  if (has_firework_promotion_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(372, this->firework_promotion_start_time(), output);
  }

  // optional int64 firework_promotion_end_time = 373;
  if (has_firework_promotion_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(373, this->firework_promotion_end_time(), output);
  }

  // optional .app.message.HeroAnniversaryTaskProto anniversary_task = 374;
  if (has_anniversary_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      374, this->anniversary_task(), output);
  }

  // optional bool is_gain_huege_data_prize = 375;
  if (has_is_gain_huege_data_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(375, this->is_gain_huege_data_prize(), output);
  }

  // optional .app.message.ShieldProto shield = 376;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      376, this->shield(), output);
  }

  // repeated int32 finished_long_mai_id = 377;
  for (int i = 0; i < this->finished_long_mai_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      377, this->finished_long_mai_id(i), output);
  }

  // repeated int32 finished_ling_yun_id = 378;
  for (int i = 0; i < this->finished_ling_yun_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      378, this->finished_ling_yun_id(i), output);
  }

  // repeated int32 finished_zhong_hua_ge_id = 379;
  for (int i = 0; i < this->finished_zhong_hua_ge_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      379, this->finished_zhong_hua_ge_id(i), output);
  }

  // repeated .app.message.DefenceDungeonStateClientProto defence_dungeon_state = 380;
  for (int i = 0; i < this->defence_dungeon_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      380, this->defence_dungeon_state(i), output);
  }

  // optional int32 ling_guang = 381;
  if (has_ling_guang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(381, this->ling_guang(), output);
  }

  // optional int32 ling_guang_pick = 382;
  if (has_ling_guang_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(382, this->ling_guang_pick(), output);
  }

  // optional int32 mystery_dungeon_use_time = 383;
  if (has_mystery_dungeon_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(383, this->mystery_dungeon_use_time(), output);
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_extra_max_use_count = 384;
  for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_extra_max_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      384, this->qian_qiu_da_jie_qian_neng_extra_max_use_count(i), output);
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_extra_max_use_count = 385;
  for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_extra_max_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      385, this->qian_qiu_da_jie_huan_hua_extra_max_use_count(i), output);
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_max_use_count_extra_times = 386;
  for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_max_use_count_extra_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      386, this->qian_qiu_da_jie_qian_neng_max_use_count_extra_times(i), output);
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_max_use_count_extra_times = 387;
  for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_max_use_count_extra_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      387, this->qian_qiu_da_jie_huan_hua_max_use_count_extra_times(i), output);
  }

  // repeated int32 mo_shi_qian_neng_extra_max_use_count = 388;
  for (int i = 0; i < this->mo_shi_qian_neng_extra_max_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      388, this->mo_shi_qian_neng_extra_max_use_count(i), output);
  }

  // repeated int32 mo_shi_huan_hua_extra_max_use_count = 389;
  for (int i = 0; i < this->mo_shi_huan_hua_extra_max_use_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      389, this->mo_shi_huan_hua_extra_max_use_count(i), output);
  }

  // repeated int32 mo_shi_qian_neng_max_use_count_extra_times = 390;
  for (int i = 0; i < this->mo_shi_qian_neng_max_use_count_extra_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      390, this->mo_shi_qian_neng_max_use_count_extra_times(i), output);
  }

  // repeated int32 mo_shi_huan_hua_max_use_count_extra_times = 391;
  for (int i = 0; i < this->mo_shi_huan_hua_max_use_count_extra_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      391, this->mo_shi_huan_hua_max_use_count_extra_times(i), output);
  }

  // optional int32 chi_huo_shen_gong_qian_neng_extra_max_use_count = 392;
  if (has_chi_huo_shen_gong_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(392, this->chi_huo_shen_gong_qian_neng_extra_max_use_count(), output);
  }

  // optional int32 chi_huo_shen_gong_huan_hua_extra_max_use_count = 393;
  if (has_chi_huo_shen_gong_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(393, this->chi_huo_shen_gong_huan_hua_extra_max_use_count(), output);
  }

  // optional int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times = 394;
  if (has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(394, this->chi_huo_shen_gong_qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times = 395;
  if (has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(395, this->chi_huo_shen_gong_huan_hua_max_use_count_extra_times(), output);
  }

  // optional .app.message.HeroBossCard boss_card = 396;
  if (has_boss_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      396, this->boss_card(), output);
  }

  // optional .app.message.HaidiInfoProto haidi = 397;
  if (has_haidi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      397, this->haidi(), output);
  }

  // optional int32 bow_tong_ling_display_id = 398;
  if (has_bow_tong_ling_display_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(398, this->bow_tong_ling_display_id(), output);
  }

  // repeated .app.message.BowTongLingClientProto bow_tong_ling = 399;
  for (int i = 0; i < this->bow_tong_ling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      399, this->bow_tong_ling(i), output);
  }

  // optional int64 sys_hong_bao_colleted_time = 400;
  if (has_sys_hong_bao_colleted_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(400, this->sys_hong_bao_colleted_time(), output);
  }

  // optional .app.message.TianXieProto tian_xie = 500;
  if (has_tian_xie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      500, this->tian_xie(), output);
  }

  // optional .app.message.JianDaoProto jianDao = 501;
  if (has_jiandao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      501, this->jiandao(), output);
  }

  // optional .app.message.LingYuProto lingYu = 502;
  if (has_lingyu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      502, this->lingyu(), output);
  }

  // optional .app.message.FengYunDaoProto fengYunDao = 503;
  if (has_fengyundao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      503, this->fengyundao(), output);
  }

  // repeated .app.message.PetTongLingClientProto pet_tong_ling = 504;
  for (int i = 0; i < this->pet_tong_ling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      504, this->pet_tong_ling(i), output);
  }

  // optional int32 pet_tong_ling_display_id = 505;
  if (has_pet_tong_ling_display_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(505, this->pet_tong_ling_display_id(), output);
  }

  // repeated .app.message.PetTongLingSingleSpellClientProto pet_tong_ling_single_spell = 506;
  for (int i = 0; i < this->pet_tong_ling_single_spell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      506, this->pet_tong_ling_single_spell(i), output);
  }

  // optional .app.message.MoFangClientProto mo_fang = 507;
  if (has_mo_fang()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      507, this->mo_fang(), output);
  }

  // optional bool qian_qiu_da_jie_is_hide = 508;
  if (has_qian_qiu_da_jie_is_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(508, this->qian_qiu_da_jie_is_hide(), output);
  }

  // optional bool chi_huo_shen_gong_is_hide = 509;
  if (has_chi_huo_shen_gong_is_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(509, this->chi_huo_shen_gong_is_hide(), output);
  }

  // optional bool mo_shi_is_hide = 510;
  if (has_mo_shi_is_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(510, this->mo_shi_is_hide(), output);
  }

  // optional int32 hell_dungeon_enter_count = 515;
  if (has_hell_dungeon_enter_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(515, this->hell_dungeon_enter_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 race = 2;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->race(), target);
  }

  // optional int32 sceneID = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  // optional int32 yuanbao = 4;
  if (has_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->yuanbao(), target);
  }

  // optional int32 lijin = 5;
  if (has_lijin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lijin(), target);
  }

  // optional int32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money(), target);
  }

  // optional .app.message.GoodsContainerProto depot = 7;
  if (has_depot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->depot(), target);
  }

  // optional int32 real_air = 9;
  if (has_real_air()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->real_air(), target);
  }

  // optional int32 fighting_amount = 10;
  if (has_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fighting_amount(), target);
  }

  // optional .app.message.SpriteStatProto total_stat = 11;
  if (has_total_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->total_stat(), target);
  }

  // repeated int32 equiped_pos = 12;
  for (int i = 0; i < this->equiped_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->equiped_pos(i), target);
  }

  // repeated .app.message.EquipmentDataProto equipment_datas = 13;
  for (int i = 0; i < this->equipment_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->equipment_datas(i), target);
  }

  // repeated .app.message.EquipmentProto equipments = 14;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->equipments(i), target);
  }

  // optional int64 exp = 15;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->exp(), target);
  }

  // optional int64 upgrade_exp = 16;
  if (has_upgrade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->upgrade_exp(), target);
  }

  // optional int64 equipment_resources = 17;
  if (has_equipment_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->equipment_resources(), target);
  }

  // optional bool has_storage = 18;
  if (has_has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->has_storage(), target);
  }

  // repeated bytes buy_back_goods_datas = 19;
  for (int i = 0; i < this->buy_back_goods_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(19, this->buy_back_goods_datas(i), target);
  }

  // repeated bytes buy_back_goods_list = 20;
  for (int i = 0; i < this->buy_back_goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(20, this->buy_back_goods_list(i), target);
  }

  // optional bool team_auto_accept_invite = 21 [default = true];
  if (has_team_auto_accept_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->team_auto_accept_invite(), target);
  }

  // optional bool team_auto_accept_request = 22 [default = true];
  if (has_team_auto_accept_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->team_auto_accept_request(), target);
  }

  // optional bool trade_auto_reject_invite = 23;
  if (has_trade_auto_reject_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->trade_auto_reject_invite(), target);
  }

  // optional .app.message.HeroTaskProto task = 24;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->task(), target);
  }

  // optional int64 client_only_config_1 = 25;
  if (has_client_only_config_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->client_only_config_1(), target);
  }

  // repeated int32 client_only_int_configs = 26;
  for (int i = 0; i < this->client_only_int_configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(26, this->client_only_int_configs(i), target);
  }

  // optional bytes guild_name = 27;
  if (has_guild_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->guild_name(), target);
  }

  // optional bool guild_auto_accept_invite = 28;
  if (has_guild_auto_accept_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->guild_auto_accept_invite(), target);
  }

  // optional bool guild_forbid_other_invite_me_join = 29;
  if (has_guild_forbid_other_invite_me_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->guild_forbid_other_invite_me_join(), target);
  }

  // optional int32 guild_li_lian = 30;
  if (has_guild_li_lian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->guild_li_lian(), target);
  }

  // optional int32 guild_contribution = 31;
  if (has_guild_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->guild_contribution(), target);
  }

  // repeated bytes friend_guild_name = 32;
  for (int i = 0; i < this->friend_guild_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(32, this->friend_guild_name(i), target);
  }

  // repeated bytes enemy_guild_name = 33;
  for (int i = 0; i < this->enemy_guild_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(33, this->enemy_guild_name(i), target);
  }

  // optional int64 accumulated_offline_time = 34;
  if (has_accumulated_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->accumulated_offline_time(), target);
  }

  // optional int32 vip_exp = 35;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->vip_exp(), target);
  }

  // repeated .app.message.StoryDungeonStatProto story_dungeon_proto = 36;
  for (int i = 0; i < this->story_dungeon_proto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->story_dungeon_proto(i), target);
  }

  // repeated .app.message.StoryDungeonCollectablePrizeProto story_dungeon_collectable_prize_proto = 37;
  for (int i = 0; i < this->story_dungeon_collectable_prize_proto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->story_dungeon_collectable_prize_proto(i), target);
  }

  // optional int32 auto_finish_story_id = 38;
  if (has_auto_finish_story_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->auto_finish_story_id(), target);
  }

  // optional int64 auto_finish_story_complete_time = 39;
  if (has_auto_finish_story_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->auto_finish_story_complete_time(), target);
  }

  // optional int32 finished_challenge_dungeon_sequence_id = 40;
  if (has_finished_challenge_dungeon_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->finished_challenge_dungeon_sequence_id(), target);
  }

  // optional int32 defence_today_finished_batch = 41 [deprecated = true];
  if (has_defence_today_finished_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->defence_today_finished_batch(), target);
  }

  // optional int32 defence_history_max_batch = 42 [deprecated = true];
  if (has_defence_history_max_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->defence_history_max_batch(), target);
  }

  // optional int32 defence_today_reset_count = 44;
  if (has_defence_today_reset_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->defence_today_reset_count(), target);
  }

  // optional int32 defence_collected_first_pass_prize = 45 [deprecated = true];
  if (has_defence_collected_first_pass_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->defence_collected_first_pass_prize(), target);
  }

  // repeated int32 finished_vip_dungeon_id = 46;
  for (int i = 0; i < this->finished_vip_dungeon_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(46, this->finished_vip_dungeon_id(i), target);
  }

  // repeated bytes defence_collectable_prize = 47 [deprecated = true];
  for (int i = 0; i < this->defence_collectable_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(47, this->defence_collectable_prize(i), target);
  }

  // optional int32 sou_shen_point = 48;
  if (has_sou_shen_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->sou_shen_point(), target);
  }

  // repeated int32 sou_shen_today_passed_id = 49;
  for (int i = 0; i < this->sou_shen_today_passed_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(49, this->sou_shen_today_passed_id(i), target);
  }

  // repeated int32 sou_shen_life_passed_id = 50;
  for (int i = 0; i < this->sou_shen_life_passed_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(50, this->sou_shen_life_passed_id(i), target);
  }

  // optional int32 ling_yun_today_entered_times = 51;
  if (has_ling_yun_today_entered_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->ling_yun_today_entered_times(), target);
  }

  // repeated .app.message.GroupDungeonCollectablePrizeProto group_collectable_prize_proto = 52;
  for (int i = 0; i < this->group_collectable_prize_proto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->group_collectable_prize_proto(i), target);
  }

  // optional bool long_mai_today_first_passed = 53;
  if (has_long_mai_today_first_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->long_mai_today_first_passed(), target);
  }

  // optional int32 wu_jue_today_entered_times = 54;
  if (has_wu_jue_today_entered_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->wu_jue_today_entered_times(), target);
  }

  // repeated int32 territory_today_collected_prize_scene_id = 55;
  for (int i = 0; i < this->territory_today_collected_prize_scene_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(55, this->territory_today_collected_prize_scene_id(i), target);
  }

  // optional int32 guild_flag_level = 56;
  if (has_guild_flag_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->guild_flag_level(), target);
  }

  // optional bool is_ws_city_master = 57;
  if (has_is_ws_city_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->is_ws_city_master(), target);
  }

  // optional bool is_long_city_master = 58;
  if (has_is_long_city_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->is_long_city_master(), target);
  }

  // optional bool is_guild_leader = 59;
  if (has_is_guild_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->is_guild_leader(), target);
  }

  // optional bool is_territory_leader = 60;
  if (has_is_territory_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->is_territory_leader(), target);
  }

  // repeated int32 daily_activity_result = 68;
  for (int i = 0; i < this->daily_activity_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(68, this->daily_activity_result(i), target);
  }

  // optional int32 sheng_wang = 69;
  if (has_sheng_wang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->sheng_wang(), target);
  }

  // repeated int32 sheng_wang_task = 70;
  for (int i = 0; i < this->sheng_wang_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(70, this->sheng_wang_task(i), target);
  }

  // optional int32 use_free_chat_times = 71;
  if (has_use_free_chat_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->use_free_chat_times(), target);
  }

  // repeated int32 gems = 72;
  for (int i = 0; i < this->gems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(72, this->gems(i), target);
  }

  // optional .app.message.BowProto bow = 73;
  if (has_bow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->bow(), target);
  }

  // repeated int64 admired_hero = 74;
  for (int i = 0; i < this->admired_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(74, this->admired_hero(i), target);
  }

  // optional int64 last_logout_time = 75;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(75, this->last_logout_time(), target);
  }

  // optional int32 collected_vip_prize = 76;
  if (has_collected_vip_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->collected_vip_prize(), target);
  }

  // optional int64 next_collect_vip_weekly_prize_time = 77;
  if (has_next_collect_vip_weekly_prize_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(77, this->next_collect_vip_weekly_prize_time(), target);
  }

  // optional int32 using_weapon = 78;
  if (has_using_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->using_weapon(), target);
  }

  // repeated .app.message.SuperWeaponProto super_weapon = 79;
  for (int i = 0; i < this->super_weapon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->super_weapon(i), target);
  }

  // optional int32 divine_times = 80;
  if (has_divine_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->divine_times(), target);
  }

  // optional int32 divine_amount = 81 [deprecated = true];
  if (has_divine_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(81, this->divine_amount(), target);
  }

  // optional int32 divine_storage_goods_count = 82;
  if (has_divine_storage_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->divine_storage_goods_count(), target);
  }

  // optional .app.message.MountProto mount = 83;
  if (has_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        83, this->mount(), target);
  }

  // optional int32 lottery = 84;
  if (has_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(84, this->lottery(), target);
  }

  // optional int64 daily_online_acc_time = 85;
  if (has_daily_online_acc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(85, this->daily_online_acc_time(), target);
  }

  // optional int32 sign = 86;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(86, this->sign(), target);
  }

  // optional int32 sign_prize = 87;
  if (has_sign_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(87, this->sign_prize(), target);
  }

  // optional int32 replenish_sign_times = 88;
  if (has_replenish_sign_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(88, this->replenish_sign_times(), target);
  }

  // optional int64 next_reduce_pk_amount_time = 89;
  if (has_next_reduce_pk_amount_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(89, this->next_reduce_pk_amount_time(), target);
  }

  // optional int32 pk_amount = 90;
  if (has_pk_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->pk_amount(), target);
  }

  // optional int64 relive_protected_end_time = 91;
  if (has_relive_protected_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(91, this->relive_protected_end_time(), target);
  }

  // optional int32 total_sign_times = 92;
  if (has_total_sign_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(92, this->total_sign_times(), target);
  }

  // optional int32 total_recharge_yuanbao = 93;
  if (has_total_recharge_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(93, this->total_recharge_yuanbao(), target);
  }

  // repeated bytes lottery_goods_static_data = 94;
  for (int i = 0; i < this->lottery_goods_static_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(94, this->lottery_goods_static_data(i), target);
  }

  // repeated bytes lottery_goods_dynamic_data = 95;
  for (int i = 0; i < this->lottery_goods_dynamic_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(95, this->lottery_goods_dynamic_data(i), target);
  }

  // optional .app.message.PetProto pet = 96;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        96, this->pet(), target);
  }

  // optional bool has_recharge = 97;
  if (has_has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(97, this->has_recharge(), target);
  }

  // repeated .app.message.CombineXinfaSpellProto combine_spells = 98;
  for (int i = 0; i < this->combine_spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        98, this->combine_spells(i), target);
  }

  // repeated .app.message.ActiveSpell passive_spell = 99;
  for (int i = 0; i < this->passive_spell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        99, this->passive_spell(i), target);
  }

  // repeated .app.message.ActiveSpell active_spell = 100 [deprecated = true];
  for (int i = 0; i < this->active_spell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->active_spell(i), target);
  }

  // repeated int32 active_spell_used_times = 101 [deprecated = true];
  for (int i = 0; i < this->active_spell_used_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(101, this->active_spell_used_times(i), target);
  }

  // repeated int32 shortcut_spell_type = 102;
  for (int i = 0; i < this->shortcut_spell_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(102, this->shortcut_spell_type(i), target);
  }

  // repeated int32 shortcut_spell_pos = 103;
  for (int i = 0; i < this->shortcut_spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(103, this->shortcut_spell_pos(i), target);
  }

  // optional int32 default_spell_pos = 104;
  if (has_default_spell_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(104, this->default_spell_pos(), target);
  }

  // optional int32 jump_shield = 105;
  if (has_jump_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(105, this->jump_shield(), target);
  }

  // optional int32 stamina = 106;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(106, this->stamina(), target);
  }

  // optional .app.message.ClientRelation client_relation = 107;
  if (has_client_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->client_relation(), target);
  }

  // repeated int32 func_bits = 108;
  for (int i = 0; i < this->func_bits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(108, this->func_bits(i), target);
  }

  // optional int32 rage_amount = 109;
  if (has_rage_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(109, this->rage_amount(), target);
  }

  // optional int64 create_time = 110;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(110, this->create_time(), target);
  }

  // optional bool is_collect_local_login_first_prize = 111;
  if (has_is_collect_local_login_first_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(111, this->is_collect_local_login_first_prize(), target);
  }

  // optional bool is_collect_local_login_daily_prize = 112;
  if (has_is_collect_local_login_daily_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(112, this->is_collect_local_login_daily_prize(), target);
  }

  // optional int32 phoenix_refine_times = 113 [deprecated = true];
  if (has_phoenix_refine_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(113, this->phoenix_refine_times(), target);
  }

  // optional bool is_cross_single_story = 114;
  if (has_is_cross_single_story()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(114, this->is_cross_single_story(), target);
  }

  // optional bool team_forbid_other_invite_me_join = 115;
  if (has_team_forbid_other_invite_me_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(115, this->team_forbid_other_invite_me_join(), target);
  }

  // optional int32 phoenix_money_refine_times = 116;
  if (has_phoenix_money_refine_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(116, this->phoenix_money_refine_times(), target);
  }

  // optional int32 phoenix_lijin_refine_times = 117;
  if (has_phoenix_lijin_refine_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(117, this->phoenix_lijin_refine_times(), target);
  }

  // optional int32 phoenix_yuanbao_refine_times = 118;
  if (has_phoenix_yuanbao_refine_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(118, this->phoenix_yuanbao_refine_times(), target);
  }

  // optional int32 login_day = 119;
  if (has_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(119, this->login_day(), target);
  }

  // optional int32 tu_long_today_entered_times = 120;
  if (has_tu_long_today_entered_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(120, this->tu_long_today_entered_times(), target);
  }

  // optional int32 melt_amount = 121;
  if (has_melt_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(121, this->melt_amount(), target);
  }

  // optional int32 challenge_dungeon_daily_times = 122;
  if (has_challenge_dungeon_daily_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(122, this->challenge_dungeon_daily_times(), target);
  }

  // optional int32 challenge_dungeon_assist_times = 123;
  if (has_challenge_dungeon_assist_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(123, this->challenge_dungeon_assist_times(), target);
  }

  // repeated int32 challenge_dungeon_use_times = 124;
  for (int i = 0; i < this->challenge_dungeon_use_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(124, this->challenge_dungeon_use_times(i), target);
  }

  // optional int32 honor = 125;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(125, this->honor(), target);
  }

  // optional .app.message.TianZuiProto tian_zui = 126;
  if (has_tian_zui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        126, this->tian_zui(), target);
  }

  // optional .app.message.TianJieProto tian_jie = 127;
  if (has_tian_jie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        127, this->tian_jie(), target);
  }

  // optional int32 first_recharge_collect_index = 129;
  if (has_first_recharge_collect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(129, this->first_recharge_collect_index(), target);
  }

  // optional int32 ling_yun_today_finish_state = 130;
  if (has_ling_yun_today_finish_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(130, this->ling_yun_today_finish_state(), target);
  }

  // optional int32 login_prize_info = 131;
  if (has_login_prize_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(131, this->login_prize_info(), target);
  }

  // optional int32 invest_upgrade_bank_money = 132;
  if (has_invest_upgrade_bank_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(132, this->invest_upgrade_bank_money(), target);
  }

  // repeated int32 collect_upgrade_bank_level = 133;
  for (int i = 0; i < this->collect_upgrade_bank_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(133, this->collect_upgrade_bank_level(i), target);
  }

  // repeated int32 collect_upgrade_bank_lijin = 134;
  for (int i = 0; i < this->collect_upgrade_bank_lijin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(134, this->collect_upgrade_bank_lijin(i), target);
  }

  // optional int32 invest_monthly_bank_money = 135;
  if (has_invest_monthly_bank_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(135, this->invest_monthly_bank_money(), target);
  }

  // optional int64 invest_monthly_bank_time = 136;
  if (has_invest_monthly_bank_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(136, this->invest_monthly_bank_time(), target);
  }

  // optional int64 monthly_bank_prev_collect_time = 137;
  if (has_monthly_bank_prev_collect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(137, this->monthly_bank_prev_collect_time(), target);
  }

  // optional int64 monthly_bank_prev_collect_time2 = 138;
  if (has_monthly_bank_prev_collect_time2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(138, this->monthly_bank_prev_collect_time2(), target);
  }

  // optional int32 monthly_bank_online_lijin = 139;
  if (has_monthly_bank_online_lijin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(139, this->monthly_bank_online_lijin(), target);
  }

  // optional int32 monthly_bank_base_lijin = 140;
  if (has_monthly_bank_base_lijin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(140, this->monthly_bank_base_lijin(), target);
  }

  // optional int32 monthly_bank_online_hours = 141;
  if (has_monthly_bank_online_hours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(141, this->monthly_bank_online_hours(), target);
  }

  // optional int64 total_online_time = 142;
  if (has_total_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(142, this->total_online_time(), target);
  }

  // optional .app.message.AchievementInfoProto achievement = 143;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        143, this->achievement(), target);
  }

  // optional int32 spell_added_upgrade_level = 144;
  if (has_spell_added_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(144, this->spell_added_upgrade_level(), target);
  }

  // optional .app.message.ShouCangProto shou_cang = 200;
  if (has_shou_cang()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->shou_cang(), target);
  }

  // optional bool zhong_hua_ge_today_first_passed = 201;
  if (has_zhong_hua_ge_today_first_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->zhong_hua_ge_today_first_passed(), target);
  }

  // optional int32 gaoji_melt_amount = 202;
  if (has_gaoji_melt_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->gaoji_melt_amount(), target);
  }

  // optional int32 left_ya_biao_times_today = 203;
  if (has_left_ya_biao_times_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(203, this->left_ya_biao_times_today(), target);
  }

  // optional int32 left_jie_biao_times_today = 204;
  if (has_left_jie_biao_times_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(204, this->left_jie_biao_times_today(), target);
  }

  // optional bool has_safe_code = 205;
  if (has_has_safe_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(205, this->has_safe_code(), target);
  }

  // optional string safe_code_question = 206;
  if (has_safe_code_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safe_code_question().data(), this->safe_code_question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        206, this->safe_code_question(), target);
  }

  // repeated int32 jin_jie_lucky_card_type = 207;
  for (int i = 0; i < this->jin_jie_lucky_card_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(207, this->jin_jie_lucky_card_type(i), target);
  }

  // repeated int64 jin_jie_lucky_card_expire_time = 208;
  for (int i = 0; i < this->jin_jie_lucky_card_expire_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(208, this->jin_jie_lucky_card_expire_time(i), target);
  }

  // repeated int32 jin_jie_lucky_card_rate = 209;
  for (int i = 0; i < this->jin_jie_lucky_card_rate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(209, this->jin_jie_lucky_card_rate(i), target);
  }

  // repeated int32 daily_card_use_stat_goods_id = 210;
  for (int i = 0; i < this->daily_card_use_stat_goods_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(210, this->daily_card_use_stat_goods_id(i), target);
  }

  // repeated int32 daily_card_use_stat_use_count = 211;
  for (int i = 0; i < this->daily_card_use_stat_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(211, this->daily_card_use_stat_use_count(i), target);
  }

  // repeated int32 mo_shi_type = 212;
  for (int i = 0; i < this->mo_shi_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(212, this->mo_shi_type(i), target);
  }

  // repeated int32 mo_shi_level = 213;
  for (int i = 0; i < this->mo_shi_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(213, this->mo_shi_level(i), target);
  }

  // repeated int32 mo_shi_bless_amount = 214;
  for (int i = 0; i < this->mo_shi_bless_amount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(214, this->mo_shi_bless_amount(i), target);
  }

  // repeated int64 mo_shi_bless_amount_clear_time = 215;
  for (int i = 0; i < this->mo_shi_bless_amount_clear_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(215, this->mo_shi_bless_amount_clear_time(i), target);
  }

  // repeated int32 mo_shi_spell_id = 216;
  for (int i = 0; i < this->mo_shi_spell_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(216, this->mo_shi_spell_id(i), target);
  }

  // repeated int32 qian_qiu_da_jie_type = 217;
  for (int i = 0; i < this->qian_qiu_da_jie_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(217, this->qian_qiu_da_jie_type(i), target);
  }

  // repeated int32 qian_qiu_da_jie_level = 218;
  for (int i = 0; i < this->qian_qiu_da_jie_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(218, this->qian_qiu_da_jie_level(i), target);
  }

  // repeated int32 qian_qiu_da_jie_bless_amount = 219;
  for (int i = 0; i < this->qian_qiu_da_jie_bless_amount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(219, this->qian_qiu_da_jie_bless_amount(i), target);
  }

  // repeated int64 qian_qiu_da_jie_bless_amount_clear_time = 220;
  for (int i = 0; i < this->qian_qiu_da_jie_bless_amount_clear_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(220, this->qian_qiu_da_jie_bless_amount_clear_time(i), target);
  }

  // optional int32 long_yuan = 221;
  if (has_long_yuan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(221, this->long_yuan(), target);
  }

  // optional .app.message.HeroJingJieProto jing_jie = 222;
  if (has_jing_jie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        222, this->jing_jie(), target);
  }

  // repeated int32 mo_shi_qian_neng_use_count = 223;
  for (int i = 0; i < this->mo_shi_qian_neng_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(223, this->mo_shi_qian_neng_use_count(i), target);
  }

  // repeated int32 mo_shi_huan_hua_use_count = 224;
  for (int i = 0; i < this->mo_shi_huan_hua_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(224, this->mo_shi_huan_hua_use_count(i), target);
  }

  // optional int32 chi_huo_shen_gong_jie_shu = 225;
  if (has_chi_huo_shen_gong_jie_shu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(225, this->chi_huo_shen_gong_jie_shu(), target);
  }

  // optional int32 chi_huo_shen_gong_ceng_shu = 226;
  if (has_chi_huo_shen_gong_ceng_shu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(226, this->chi_huo_shen_gong_ceng_shu(), target);
  }

  // optional int32 chi_huo_shen_gong_bless_amount = 227;
  if (has_chi_huo_shen_gong_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(227, this->chi_huo_shen_gong_bless_amount(), target);
  }

  // optional int64 chi_huo_shen_gong_bless_amount_clear_time = 228;
  if (has_chi_huo_shen_gong_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(228, this->chi_huo_shen_gong_bless_amount_clear_time(), target);
  }

  // optional int32 draw_prize_point = 230;
  if (has_draw_prize_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(230, this->draw_prize_point(), target);
  }

  // optional int32 draw_prize_storage_goods_count = 231;
  if (has_draw_prize_storage_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(231, this->draw_prize_storage_goods_count(), target);
  }

  // repeated int32 draw_prize_exchange_count = 232;
  for (int i = 0; i < this->draw_prize_exchange_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(232, this->draw_prize_exchange_count(i), target);
  }

  // optional int32 lucky_draw_prize_point = 233;
  if (has_lucky_draw_prize_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(233, this->lucky_draw_prize_point(), target);
  }

  // optional int32 lucky_draw_prize_storage_goods_count = 234;
  if (has_lucky_draw_prize_storage_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(234, this->lucky_draw_prize_storage_goods_count(), target);
  }

  // optional .app.message.YitianshenjueProto yitianshenjue_info = 235;
  if (has_yitianshenjue_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        235, this->yitianshenjue_info(), target);
  }

  // optional .app.message.SpriteStatProto super_weapon_max_level_add_stat = 236;
  if (has_super_weapon_max_level_add_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        236, this->super_weapon_max_level_add_stat(), target);
  }

  // optional .app.message.SpriteStatProto magic_added_stat = 237;
  if (has_magic_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        237, this->magic_added_stat(), target);
  }

  // optional .app.message.SpriteStatProto magic_not_saved_added_stat = 238;
  if (has_magic_not_saved_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        238, this->magic_not_saved_added_stat(), target);
  }

  // repeated bool has_unlock_magic_weapon_gem = 239;
  for (int i = 0; i < this->has_unlock_magic_weapon_gem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(239, this->has_unlock_magic_weapon_gem(i), target);
  }

  // repeated int32 magic_weapon_gem_level = 240;
  for (int i = 0; i < this->magic_weapon_gem_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(240, this->magic_weapon_gem_level(i), target);
  }

  // repeated bool magic_weapon_gem_binded = 241;
  for (int i = 0; i < this->magic_weapon_gem_binded_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(241, this->magic_weapon_gem_binded(i), target);
  }

  // optional int32 wu_jue_today_collected_first_try_transport_prize_times = 242;
  if (has_wu_jue_today_collected_first_try_transport_prize_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(242, this->wu_jue_today_collected_first_try_transport_prize_times(), target);
  }

  // optional int32 daily_wheel_count = 270;
  if (has_daily_wheel_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(270, this->daily_wheel_count(), target);
  }

  // repeated int32 finished_xin_mo_scene_id = 280;
  for (int i = 0; i < this->finished_xin_mo_scene_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(280, this->finished_xin_mo_scene_id(i), target);
  }

  // optional bool has_magic_weapon = 298;
  if (has_has_magic_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(298, this->has_magic_weapon(), target);
  }

  // repeated int64 collected_recharge_rank_promotion_prize = 299;
  for (int i = 0; i < this->collected_recharge_rank_promotion_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(299, this->collected_recharge_rank_promotion_prize(i), target);
  }

  // repeated int64 collected_rank_promotion_prize = 300;
  for (int i = 0; i < this->collected_rank_promotion_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(300, this->collected_rank_promotion_prize(i), target);
  }

  // optional int32 arena_pair_point = 301;
  if (has_arena_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(301, this->arena_pair_point(), target);
  }

  // optional int32 today_finished_arena_count = 302;
  if (has_today_finished_arena_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(302, this->today_finished_arena_count(), target);
  }

  // optional int32 arena_shop_point = 303;
  if (has_arena_shop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(303, this->arena_shop_point(), target);
  }

  // optional int32 arena_collectable_shop_point = 304;
  if (has_arena_collectable_shop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(304, this->arena_collectable_shop_point(), target);
  }

  // optional int32 arena_yesterday_finish_count = 305;
  if (has_arena_yesterday_finish_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(305, this->arena_yesterday_finish_count(), target);
  }

  // optional int32 arena_yesterday_pair_point = 306;
  if (has_arena_yesterday_pair_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(306, this->arena_yesterday_pair_point(), target);
  }

  // optional int32 arena_yesterday_original_shop_point = 307;
  if (has_arena_yesterday_original_shop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(307, this->arena_yesterday_original_shop_point(), target);
  }

  // optional int32 arena_shop_point_added_today_by_win = 308;
  if (has_arena_shop_point_added_today_by_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(308, this->arena_shop_point_added_today_by_win(), target);
  }

  // optional int64 next_can_use_guild_lilian_time = 310;
  if (has_next_can_use_guild_lilian_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(310, this->next_can_use_guild_lilian_time(), target);
  }

  // optional .app.message.GuildDungeonCollectedPrizeProto guild_dungeon_collected_prize = 311;
  if (has_guild_dungeon_collected_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        311, this->guild_dungeon_collected_prize(), target);
  }

  // optional .app.message.HeroSuperArmProto super_arm = 312;
  if (has_super_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        312, this->super_arm(), target);
  }

  // optional .app.message.DemonProto demon = 313;
  if (has_demon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        313, this->demon(), target);
  }

  // optional .app.message.CloakProto cloak = 314;
  if (has_cloak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        314, this->cloak(), target);
  }

  // optional int64 pet_combine_added_life = 315;
  if (has_pet_combine_added_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(315, this->pet_combine_added_life(), target);
  }

  // optional int64 pet_next_can_combine_time = 316;
  if (has_pet_next_can_combine_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(316, this->pet_next_can_combine_time(), target);
  }

  // optional int32 gallup_answered_question_count = 317;
  if (has_gallup_answered_question_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(317, this->gallup_answered_question_count(), target);
  }

  // optional int32 gallup_today_answered_question_count = 318;
  if (has_gallup_today_answered_question_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(318, this->gallup_today_answered_question_count(), target);
  }

  // optional .app.message.HeroMarriageProto marriage = 319;
  if (has_marriage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        319, this->marriage(), target);
  }

  // optional int64 wash_super_weapon_bless_clear_time = 320;
  if (has_wash_super_weapon_bless_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(320, this->wash_super_weapon_bless_clear_time(), target);
  }

  // optional int32 tian_men_times = 321;
  if (has_tian_men_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(321, this->tian_men_times(), target);
  }

  // optional bool has_collect_guild_plant_prize = 322;
  if (has_has_collect_guild_plant_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(322, this->has_collect_guild_plant_prize(), target);
  }

  // optional bool hide_city_master = 323;
  if (has_hide_city_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(323, this->hide_city_master(), target);
  }

  // optional bool hide_long_city_master = 324;
  if (has_hide_long_city_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(324, this->hide_long_city_master(), target);
  }

  // optional int32 p37_vip_prize_count_flag = 325;
  if (has_p37_vip_prize_count_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(325, this->p37_vip_prize_count_flag(), target);
  }

  // optional int64 last_change_name_time = 326;
  if (has_last_change_name_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(326, this->last_change_name_time(), target);
  }

  // optional int64 next_can_change_race_time = 327;
  if (has_next_can_change_race_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(327, this->next_can_change_race_time(), target);
  }

  // optional int32 htz_times = 328;
  if (has_htz_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(328, this->htz_times(), target);
  }

  // optional int32 htz_max_destroy_record = 329;
  if (has_htz_max_destroy_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(329, this->htz_max_destroy_record(), target);
  }

  // optional int32 htz_time_record = 330;
  if (has_htz_time_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(330, this->htz_time_record(), target);
  }

  // repeated int32 limit_count_goods_id = 331;
  for (int i = 0; i < this->limit_count_goods_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(331, this->limit_count_goods_id(i), target);
  }

  // repeated int32 limit_count_goods_use_times = 332;
  for (int i = 0; i < this->limit_count_goods_use_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(332, this->limit_count_goods_use_times(i), target);
  }

  // optional int32 new_draw_prize_point = 333;
  if (has_new_draw_prize_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(333, this->new_draw_prize_point(), target);
  }

  // optional int32 new_draw_prize_storage_goods_count = 334;
  if (has_new_draw_prize_storage_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(334, this->new_draw_prize_storage_goods_count(), target);
  }

  // repeated int64 single_wash_super_weapon_bless_clear_time = 335;
  for (int i = 0; i < this->single_wash_super_weapon_bless_clear_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(335, this->single_wash_super_weapon_bless_clear_time(i), target);
  }

  // repeated int32 single_wash_super_weapon_bless_type = 336;
  for (int i = 0; i < this->single_wash_super_weapon_bless_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(336, this->single_wash_super_weapon_bless_type(i), target);
  }

  // optional bytes arena_fighting_team_name_bytes = 337;
  if (has_arena_fighting_team_name_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        337, this->arena_fighting_team_name_bytes(), target);
  }

  // optional int32 arena_fighting_team_shop_point = 338;
  if (has_arena_fighting_team_shop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(338, this->arena_fighting_team_shop_point(), target);
  }

  // optional int32 arena_fighting_team_shop_point_added_today_by_win = 339;
  if (has_arena_fighting_team_shop_point_added_today_by_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(339, this->arena_fighting_team_shop_point_added_today_by_win(), target);
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_use_count = 340;
  for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(340, this->qian_qiu_da_jie_qian_neng_use_count(i), target);
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_use_count = 341;
  for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(341, this->qian_qiu_da_jie_huan_hua_use_count(i), target);
  }

  // optional .app.message.MoBingProto mo_bing_proto = 342;
  if (has_mo_bing_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        342, this->mo_bing_proto(), target);
  }

  // optional int32 use_mount_tongling_id = 343;
  if (has_use_mount_tongling_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(343, this->use_mount_tongling_id(), target);
  }

  // repeated int32 active_mount_tongling_ids = 344;
  for (int i = 0; i < this->active_mount_tongling_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(344, this->active_mount_tongling_ids(i), target);
  }

  // optional int64 change_use_mount_tongling_id_cd_time = 345;
  if (has_change_use_mount_tongling_id_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(345, this->change_use_mount_tongling_id_cd_time(), target);
  }

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat1 = 346;
  for (int i = 0; i < this->not_save_xun_zhang_random_stat1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        346, this->not_save_xun_zhang_random_stat1(i), target);
  }

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat2 = 347;
  for (int i = 0; i < this->not_save_xun_zhang_random_stat2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        347, this->not_save_xun_zhang_random_stat2(i), target);
  }

  // optional bool finished_collected_fight_amout_changed_value_rank_daily_prize = 348;
  if (has_finished_collected_fight_amout_changed_value_rank_daily_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(348, this->finished_collected_fight_amout_changed_value_rank_daily_prize(), target);
  }

  // repeated int32 finished_yy_purple_dungeon_count = 349;
  for (int i = 0; i < this->finished_yy_purple_dungeon_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(349, this->finished_yy_purple_dungeon_count(i), target);
  }

  // optional int32 chi_huo_shen_gong_qian_neng_use_count = 350;
  if (has_chi_huo_shen_gong_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(350, this->chi_huo_shen_gong_qian_neng_use_count(), target);
  }

  // optional int32 chi_huo_shen_gong_huan_hua_use_count = 351;
  if (has_chi_huo_shen_gong_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(351, this->chi_huo_shen_gong_huan_hua_use_count(), target);
  }

  // repeated int32 he_cheng_goods_id = 353;
  for (int i = 0; i < this->he_cheng_goods_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(353, this->he_cheng_goods_id(i), target);
  }

  // repeated int32 he_cheng_goods_count = 354;
  for (int i = 0; i < this->he_cheng_goods_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(354, this->he_cheng_goods_count(i), target);
  }

  // optional int32 christmas_storage_goods_count = 355;
  if (has_christmas_storage_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(355, this->christmas_storage_goods_count(), target);
  }

  // optional int32 credits = 356;
  if (has_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(356, this->credits(), target);
  }

  // repeated int32 mount_tongling_wake_value = 357;
  for (int i = 0; i < this->mount_tongling_wake_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(357, this->mount_tongling_wake_value(i), target);
  }

  // optional int32 monopoly_now_cell_id = 358;
  if (has_monopoly_now_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(358, this->monopoly_now_cell_id(), target);
  }

  // optional int32 monopoly_now_roll_times_cost = 359;
  if (has_monopoly_now_roll_times_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(359, this->monopoly_now_roll_times_cost(), target);
  }

  // optional int32 monopoly_roll_times = 360;
  if (has_monopoly_roll_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(360, this->monopoly_roll_times(), target);
  }

  // optional int32 monopoly_buy_roll_times = 361;
  if (has_monopoly_buy_roll_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(361, this->monopoly_buy_roll_times(), target);
  }

  // optional int32 credits_draw_storage_goods_count = 362;
  if (has_credits_draw_storage_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(362, this->credits_draw_storage_goods_count(), target);
  }

  // optional .app.message.HeroLoveProto love = 363;
  if (has_love()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        363, this->love(), target);
  }

  // optional .app.message.WuDaoProto wu_dao = 364;
  if (has_wu_dao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        364, this->wu_dao(), target);
  }

  // optional .app.message.NiDaoQianKunClient ni_dao_qian_kun = 365;
  if (has_ni_dao_qian_kun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        365, this->ni_dao_qian_kun(), target);
  }

  // optional int32 finished_tong_tian_ta_dungeon_sequence = 366;
  if (has_finished_tong_tian_ta_dungeon_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(366, this->finished_tong_tian_ta_dungeon_sequence(), target);
  }

  // optional int32 tong_tian_ta_dungeon_daily_times = 367;
  if (has_tong_tian_ta_dungeon_daily_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(367, this->tong_tian_ta_dungeon_daily_times(), target);
  }

  // repeated int32 tong_tian_ta_dungeon_use_times = 368;
  for (int i = 0; i < this->tong_tian_ta_dungeon_use_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(368, this->tong_tian_ta_dungeon_use_times(i), target);
  }

  // optional int32 tong_tian_ta_dungeon_refresh_times = 369;
  if (has_tong_tian_ta_dungeon_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(369, this->tong_tian_ta_dungeon_refresh_times(), target);
  }

  // optional .app.message.HeroAnniversaryProto anniversary = 370;
  if (has_anniversary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        370, this->anniversary(), target);
  }

  // repeated int32 firework_color_values = 371;
  for (int i = 0; i < this->firework_color_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(371, this->firework_color_values(i), target);
  }

  // optional int64 firework_promotion_start_time = 372;
  if (has_firework_promotion_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(372, this->firework_promotion_start_time(), target);
  }

  // optional int64 firework_promotion_end_time = 373;
  if (has_firework_promotion_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(373, this->firework_promotion_end_time(), target);
  }

  // optional .app.message.HeroAnniversaryTaskProto anniversary_task = 374;
  if (has_anniversary_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        374, this->anniversary_task(), target);
  }

  // optional bool is_gain_huege_data_prize = 375;
  if (has_is_gain_huege_data_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(375, this->is_gain_huege_data_prize(), target);
  }

  // optional .app.message.ShieldProto shield = 376;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        376, this->shield(), target);
  }

  // repeated int32 finished_long_mai_id = 377;
  for (int i = 0; i < this->finished_long_mai_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(377, this->finished_long_mai_id(i), target);
  }

  // repeated int32 finished_ling_yun_id = 378;
  for (int i = 0; i < this->finished_ling_yun_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(378, this->finished_ling_yun_id(i), target);
  }

  // repeated int32 finished_zhong_hua_ge_id = 379;
  for (int i = 0; i < this->finished_zhong_hua_ge_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(379, this->finished_zhong_hua_ge_id(i), target);
  }

  // repeated .app.message.DefenceDungeonStateClientProto defence_dungeon_state = 380;
  for (int i = 0; i < this->defence_dungeon_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        380, this->defence_dungeon_state(i), target);
  }

  // optional int32 ling_guang = 381;
  if (has_ling_guang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(381, this->ling_guang(), target);
  }

  // optional int32 ling_guang_pick = 382;
  if (has_ling_guang_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(382, this->ling_guang_pick(), target);
  }

  // optional int32 mystery_dungeon_use_time = 383;
  if (has_mystery_dungeon_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(383, this->mystery_dungeon_use_time(), target);
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_extra_max_use_count = 384;
  for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_extra_max_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(384, this->qian_qiu_da_jie_qian_neng_extra_max_use_count(i), target);
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_extra_max_use_count = 385;
  for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_extra_max_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(385, this->qian_qiu_da_jie_huan_hua_extra_max_use_count(i), target);
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_max_use_count_extra_times = 386;
  for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_max_use_count_extra_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(386, this->qian_qiu_da_jie_qian_neng_max_use_count_extra_times(i), target);
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_max_use_count_extra_times = 387;
  for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_max_use_count_extra_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(387, this->qian_qiu_da_jie_huan_hua_max_use_count_extra_times(i), target);
  }

  // repeated int32 mo_shi_qian_neng_extra_max_use_count = 388;
  for (int i = 0; i < this->mo_shi_qian_neng_extra_max_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(388, this->mo_shi_qian_neng_extra_max_use_count(i), target);
  }

  // repeated int32 mo_shi_huan_hua_extra_max_use_count = 389;
  for (int i = 0; i < this->mo_shi_huan_hua_extra_max_use_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(389, this->mo_shi_huan_hua_extra_max_use_count(i), target);
  }

  // repeated int32 mo_shi_qian_neng_max_use_count_extra_times = 390;
  for (int i = 0; i < this->mo_shi_qian_neng_max_use_count_extra_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(390, this->mo_shi_qian_neng_max_use_count_extra_times(i), target);
  }

  // repeated int32 mo_shi_huan_hua_max_use_count_extra_times = 391;
  for (int i = 0; i < this->mo_shi_huan_hua_max_use_count_extra_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(391, this->mo_shi_huan_hua_max_use_count_extra_times(i), target);
  }

  // optional int32 chi_huo_shen_gong_qian_neng_extra_max_use_count = 392;
  if (has_chi_huo_shen_gong_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(392, this->chi_huo_shen_gong_qian_neng_extra_max_use_count(), target);
  }

  // optional int32 chi_huo_shen_gong_huan_hua_extra_max_use_count = 393;
  if (has_chi_huo_shen_gong_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(393, this->chi_huo_shen_gong_huan_hua_extra_max_use_count(), target);
  }

  // optional int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times = 394;
  if (has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(394, this->chi_huo_shen_gong_qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times = 395;
  if (has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(395, this->chi_huo_shen_gong_huan_hua_max_use_count_extra_times(), target);
  }

  // optional .app.message.HeroBossCard boss_card = 396;
  if (has_boss_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        396, this->boss_card(), target);
  }

  // optional .app.message.HaidiInfoProto haidi = 397;
  if (has_haidi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        397, this->haidi(), target);
  }

  // optional int32 bow_tong_ling_display_id = 398;
  if (has_bow_tong_ling_display_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(398, this->bow_tong_ling_display_id(), target);
  }

  // repeated .app.message.BowTongLingClientProto bow_tong_ling = 399;
  for (int i = 0; i < this->bow_tong_ling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        399, this->bow_tong_ling(i), target);
  }

  // optional int64 sys_hong_bao_colleted_time = 400;
  if (has_sys_hong_bao_colleted_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(400, this->sys_hong_bao_colleted_time(), target);
  }

  // optional .app.message.TianXieProto tian_xie = 500;
  if (has_tian_xie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        500, this->tian_xie(), target);
  }

  // optional .app.message.JianDaoProto jianDao = 501;
  if (has_jiandao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        501, this->jiandao(), target);
  }

  // optional .app.message.LingYuProto lingYu = 502;
  if (has_lingyu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        502, this->lingyu(), target);
  }

  // optional .app.message.FengYunDaoProto fengYunDao = 503;
  if (has_fengyundao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        503, this->fengyundao(), target);
  }

  // repeated .app.message.PetTongLingClientProto pet_tong_ling = 504;
  for (int i = 0; i < this->pet_tong_ling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        504, this->pet_tong_ling(i), target);
  }

  // optional int32 pet_tong_ling_display_id = 505;
  if (has_pet_tong_ling_display_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(505, this->pet_tong_ling_display_id(), target);
  }

  // repeated .app.message.PetTongLingSingleSpellClientProto pet_tong_ling_single_spell = 506;
  for (int i = 0; i < this->pet_tong_ling_single_spell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        506, this->pet_tong_ling_single_spell(i), target);
  }

  // optional .app.message.MoFangClientProto mo_fang = 507;
  if (has_mo_fang()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        507, this->mo_fang(), target);
  }

  // optional bool qian_qiu_da_jie_is_hide = 508;
  if (has_qian_qiu_da_jie_is_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(508, this->qian_qiu_da_jie_is_hide(), target);
  }

  // optional bool chi_huo_shen_gong_is_hide = 509;
  if (has_chi_huo_shen_gong_is_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(509, this->chi_huo_shen_gong_is_hide(), target);
  }

  // optional bool mo_shi_is_hide = 510;
  if (has_mo_shi_is_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(510, this->mo_shi_is_hide(), target);
  }

  // optional int32 hell_dungeon_enter_count = 515;
  if (has_hell_dungeon_enter_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(515, this->hell_dungeon_enter_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 race = 2;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 sceneID = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 yuanbao = 4;
    if (has_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbao());
    }

    // optional int32 lijin = 5;
    if (has_lijin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lijin());
    }

    // optional int32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional .app.message.GoodsContainerProto depot = 7;
    if (has_depot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->depot());
    }

    // optional int32 real_air = 9;
    if (has_real_air()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_air());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fighting_amount = 10;
    if (has_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting_amount());
    }

    // optional .app.message.SpriteStatProto total_stat = 11;
    if (has_total_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_stat());
    }

    // optional int64 exp = 15;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int64 upgrade_exp = 16;
    if (has_upgrade_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upgrade_exp());
    }

    // optional int64 equipment_resources = 17;
    if (has_equipment_resources()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipment_resources());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool has_storage = 18;
    if (has_has_storage()) {
      total_size += 2 + 1;
    }

    // optional bool team_auto_accept_invite = 21 [default = true];
    if (has_team_auto_accept_invite()) {
      total_size += 2 + 1;
    }

    // optional bool team_auto_accept_request = 22 [default = true];
    if (has_team_auto_accept_request()) {
      total_size += 2 + 1;
    }

    // optional bool team_forbid_other_invite_me_join = 115;
    if (has_team_forbid_other_invite_me_join()) {
      total_size += 2 + 1;
    }

    // optional bool trade_auto_reject_invite = 23;
    if (has_trade_auto_reject_invite()) {
      total_size += 2 + 1;
    }

    // optional .app.message.HeroTaskProto task = 24;
    if (has_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 client_only_config_1 = 25;
    if (has_client_only_config_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->client_only_config_1());
    }

    // optional bytes guild_name = 27;
    if (has_guild_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_name());
    }

    // optional bool guild_auto_accept_invite = 28;
    if (has_guild_auto_accept_invite()) {
      total_size += 2 + 1;
    }

    // optional bool guild_forbid_other_invite_me_join = 29;
    if (has_guild_forbid_other_invite_me_join()) {
      total_size += 2 + 1;
    }

    // optional int32 guild_flag_level = 56;
    if (has_guild_flag_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_flag_level());
    }

    // optional int32 guild_li_lian = 30;
    if (has_guild_li_lian()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_li_lian());
    }

    // optional int32 guild_contribution = 31;
    if (has_guild_contribution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_contribution());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional bool is_ws_city_master = 57;
    if (has_is_ws_city_master()) {
      total_size += 2 + 1;
    }

    // optional bool is_long_city_master = 58;
    if (has_is_long_city_master()) {
      total_size += 2 + 1;
    }

    // optional bool is_guild_leader = 59;
    if (has_is_guild_leader()) {
      total_size += 2 + 1;
    }

    // optional bool is_territory_leader = 60;
    if (has_is_territory_leader()) {
      total_size += 2 + 1;
    }

    // optional int64 accumulated_offline_time = 34;
    if (has_accumulated_offline_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accumulated_offline_time());
    }

    // optional int32 vip_exp = 35;
    if (has_vip_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp());
    }

  }
  if (_has_bits_[42 / 32] & (0xffu << (42 % 32))) {
    // optional int32 auto_finish_story_id = 38;
    if (has_auto_finish_story_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_finish_story_id());
    }

    // optional int64 auto_finish_story_complete_time = 39;
    if (has_auto_finish_story_complete_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->auto_finish_story_complete_time());
    }

    // optional int32 finished_challenge_dungeon_sequence_id = 40;
    if (has_finished_challenge_dungeon_sequence_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finished_challenge_dungeon_sequence_id());
    }

    // optional int32 defence_today_finished_batch = 41 [deprecated = true];
    if (has_defence_today_finished_batch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_today_finished_batch());
    }

    // optional int32 defence_history_max_batch = 42 [deprecated = true];
    if (has_defence_history_max_batch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_history_max_batch());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 defence_today_reset_count = 44;
    if (has_defence_today_reset_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_today_reset_count());
    }

    // optional int32 defence_collected_first_pass_prize = 45 [deprecated = true];
    if (has_defence_collected_first_pass_prize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_collected_first_pass_prize());
    }

    // optional int32 sou_shen_point = 48;
    if (has_sou_shen_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sou_shen_point());
    }

    // optional int32 ling_yun_today_entered_times = 51;
    if (has_ling_yun_today_entered_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ling_yun_today_entered_times());
    }

    // optional int32 ling_yun_today_finish_state = 130;
    if (has_ling_yun_today_finish_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ling_yun_today_finish_state());
    }

  }
  if (_has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    // optional bool long_mai_today_first_passed = 53;
    if (has_long_mai_today_first_passed()) {
      total_size += 2 + 1;
    }

    // optional int32 wu_jue_today_entered_times = 54;
    if (has_wu_jue_today_entered_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wu_jue_today_entered_times());
    }

    // optional int32 wu_jue_today_collected_first_try_transport_prize_times = 242;
    if (has_wu_jue_today_collected_first_try_transport_prize_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wu_jue_today_collected_first_try_transport_prize_times());
    }

    // optional int32 sheng_wang = 69;
    if (has_sheng_wang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sheng_wang());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 use_free_chat_times = 71;
    if (has_use_free_chat_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_free_chat_times());
    }

    // optional .app.message.BowProto bow = 73;
    if (has_bow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bow());
    }

    // optional int64 last_logout_time = 75;
    if (has_last_logout_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_logout_time());
    }

    // optional int32 collected_vip_prize = 76;
    if (has_collected_vip_prize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collected_vip_prize());
    }

    // optional int64 next_collect_vip_weekly_prize_time = 77;
    if (has_next_collect_vip_weekly_prize_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_collect_vip_weekly_prize_time());
    }

    // optional int32 using_weapon = 78;
    if (has_using_weapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->using_weapon());
    }

  }
  if (_has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    // optional .app.message.SpriteStatProto super_weapon_max_level_add_stat = 236;
    if (has_super_weapon_max_level_add_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super_weapon_max_level_add_stat());
    }

    // optional bool has_magic_weapon = 298;
    if (has_has_magic_weapon()) {
      total_size += 2 + 1;
    }

    // optional .app.message.SpriteStatProto magic_added_stat = 237;
    if (has_magic_added_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magic_added_stat());
    }

    // optional .app.message.SpriteStatProto magic_not_saved_added_stat = 238;
    if (has_magic_not_saved_added_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magic_not_saved_added_stat());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional int32 divine_times = 80;
    if (has_divine_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divine_times());
    }

    // optional int32 divine_amount = 81 [deprecated = true];
    if (has_divine_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divine_amount());
    }

    // optional int32 divine_storage_goods_count = 82;
    if (has_divine_storage_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divine_storage_goods_count());
    }

    // optional .app.message.MountProto mount = 83;
    if (has_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mount());
    }

    // optional int32 lottery = 84;
    if (has_lottery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery());
    }

    // optional int64 daily_online_acc_time = 85;
    if (has_daily_online_acc_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daily_online_acc_time());
    }

    // optional int32 sign = 86;
    if (has_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign());
    }

    // optional int32 sign_prize = 87;
    if (has_sign_prize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_prize());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional int32 replenish_sign_times = 88;
    if (has_replenish_sign_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replenish_sign_times());
    }

    // optional int64 next_reduce_pk_amount_time = 89;
    if (has_next_reduce_pk_amount_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_reduce_pk_amount_time());
    }

    // optional int32 pk_amount = 90;
    if (has_pk_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk_amount());
    }

    // optional int64 relive_protected_end_time = 91;
    if (has_relive_protected_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relive_protected_end_time());
    }

    // optional int32 total_sign_times = 92;
    if (has_total_sign_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_sign_times());
    }

    // optional int32 total_recharge_yuanbao = 93;
    if (has_total_recharge_yuanbao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_recharge_yuanbao());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional .app.message.PetProto pet = 96;
    if (has_pet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional bool has_recharge = 97;
    if (has_has_recharge()) {
      total_size += 2 + 1;
    }

    // optional int32 spell_added_upgrade_level = 144;
    if (has_spell_added_upgrade_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_added_upgrade_level());
    }

  }
  if (_has_bits_[105 / 32] & (0xffu << (105 % 32))) {
    // optional int32 default_spell_pos = 104;
    if (has_default_spell_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_spell_pos());
    }

    // optional int32 jump_shield = 105;
    if (has_jump_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jump_shield());
    }

    // optional int32 stamina = 106;
    if (has_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // optional .app.message.ClientRelation client_relation = 107;
    if (has_client_relation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_relation());
    }

    // optional int32 rage_amount = 109;
    if (has_rage_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rage_amount());
    }

    // optional int64 create_time = 110;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    // optional bool is_collect_local_login_first_prize = 111;
    if (has_is_collect_local_login_first_prize()) {
      total_size += 2 + 1;
    }

    // optional bool is_collect_local_login_daily_prize = 112;
    if (has_is_collect_local_login_daily_prize()) {
      total_size += 2 + 1;
    }

    // optional int32 phoenix_refine_times = 113 [deprecated = true];
    if (has_phoenix_refine_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phoenix_refine_times());
    }

    // optional bool is_cross_single_story = 114;
    if (has_is_cross_single_story()) {
      total_size += 2 + 1;
    }

    // optional int32 phoenix_money_refine_times = 116;
    if (has_phoenix_money_refine_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phoenix_money_refine_times());
    }

    // optional int32 phoenix_lijin_refine_times = 117;
    if (has_phoenix_lijin_refine_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phoenix_lijin_refine_times());
    }

    // optional int32 phoenix_yuanbao_refine_times = 118;
    if (has_phoenix_yuanbao_refine_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phoenix_yuanbao_refine_times());
    }

    // optional int32 login_day = 119;
    if (has_login_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_day());
    }

  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    // optional int32 tu_long_today_entered_times = 120;
    if (has_tu_long_today_entered_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tu_long_today_entered_times());
    }

    // optional int32 melt_amount = 121;
    if (has_melt_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->melt_amount());
    }

    // optional int32 challenge_dungeon_daily_times = 122;
    if (has_challenge_dungeon_daily_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_dungeon_daily_times());
    }

    // optional int32 challenge_dungeon_assist_times = 123;
    if (has_challenge_dungeon_assist_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_dungeon_assist_times());
    }

    // optional int32 honor = 125;
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // optional .app.message.TianZuiProto tian_zui = 126;
    if (has_tian_zui()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tian_zui());
    }

    // optional .app.message.TianJieProto tian_jie = 127;
    if (has_tian_jie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tian_jie());
    }

  }
  if (_has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    // optional int32 first_recharge_collect_index = 129;
    if (has_first_recharge_collect_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_recharge_collect_index());
    }

    // optional int32 login_prize_info = 131;
    if (has_login_prize_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_prize_info());
    }

    // optional int32 invest_upgrade_bank_money = 132;
    if (has_invest_upgrade_bank_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invest_upgrade_bank_money());
    }

    // optional int32 invest_monthly_bank_money = 135;
    if (has_invest_monthly_bank_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invest_monthly_bank_money());
    }

    // optional int64 invest_monthly_bank_time = 136;
    if (has_invest_monthly_bank_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invest_monthly_bank_time());
    }

    // optional int64 monthly_bank_prev_collect_time = 137;
    if (has_monthly_bank_prev_collect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monthly_bank_prev_collect_time());
    }

  }
  if (_has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    // optional int64 monthly_bank_prev_collect_time2 = 138;
    if (has_monthly_bank_prev_collect_time2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monthly_bank_prev_collect_time2());
    }

    // optional int32 monthly_bank_online_lijin = 139;
    if (has_monthly_bank_online_lijin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthly_bank_online_lijin());
    }

    // optional int32 monthly_bank_base_lijin = 140;
    if (has_monthly_bank_base_lijin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthly_bank_base_lijin());
    }

    // optional int32 monthly_bank_online_hours = 141;
    if (has_monthly_bank_online_hours()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthly_bank_online_hours());
    }

    // optional int64 total_online_time = 142;
    if (has_total_online_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_online_time());
    }

    // optional .app.message.AchievementInfoProto achievement = 143;
    if (has_achievement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement());
    }

    // optional .app.message.ShouCangProto shou_cang = 200;
    if (has_shou_cang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shou_cang());
    }

    // optional bool zhong_hua_ge_today_first_passed = 201;
    if (has_zhong_hua_ge_today_first_passed()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    // optional int32 gaoji_melt_amount = 202;
    if (has_gaoji_melt_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaoji_melt_amount());
    }

    // optional int32 left_ya_biao_times_today = 203;
    if (has_left_ya_biao_times_today()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_ya_biao_times_today());
    }

    // optional int32 left_jie_biao_times_today = 204;
    if (has_left_jie_biao_times_today()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_jie_biao_times_today());
    }

    // optional bool has_safe_code = 205;
    if (has_has_safe_code()) {
      total_size += 2 + 1;
    }

    // optional string safe_code_question = 206;
    if (has_safe_code_question()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safe_code_question());
    }

  }
  if (_has_bits_[159 / 32] & (0xffu << (159 % 32))) {
    // optional bool mo_shi_is_hide = 510;
    if (has_mo_shi_is_hide()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[166 / 32] & (0xffu << (166 % 32))) {
    // optional bool qian_qiu_da_jie_is_hide = 508;
    if (has_qian_qiu_da_jie_is_hide()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[171 / 32] & (0xffu << (171 % 32))) {
    // optional int32 long_yuan = 221;
    if (has_long_yuan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->long_yuan());
    }

    // optional .app.message.HeroJingJieProto jing_jie = 222;
    if (has_jing_jie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jing_jie());
    }

  }
  if (_has_bits_[179 / 32] & (0xffu << (179 % 32))) {
    // optional int32 chi_huo_shen_gong_jie_shu = 225;
    if (has_chi_huo_shen_gong_jie_shu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_jie_shu());
    }

    // optional int32 chi_huo_shen_gong_ceng_shu = 226;
    if (has_chi_huo_shen_gong_ceng_shu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_ceng_shu());
    }

    // optional int32 chi_huo_shen_gong_bless_amount = 227;
    if (has_chi_huo_shen_gong_bless_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_bless_amount());
    }

    // optional int64 chi_huo_shen_gong_bless_amount_clear_time = 228;
    if (has_chi_huo_shen_gong_bless_amount_clear_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chi_huo_shen_gong_bless_amount_clear_time());
    }

    // optional int32 chi_huo_shen_gong_qian_neng_use_count = 350;
    if (has_chi_huo_shen_gong_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_qian_neng_use_count());
    }

  }
  if (_has_bits_[184 / 32] & (0xffu << (184 % 32))) {
    // optional int32 chi_huo_shen_gong_huan_hua_use_count = 351;
    if (has_chi_huo_shen_gong_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_huan_hua_use_count());
    }

    // optional int32 chi_huo_shen_gong_qian_neng_extra_max_use_count = 392;
    if (has_chi_huo_shen_gong_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_qian_neng_extra_max_use_count());
    }

    // optional int32 chi_huo_shen_gong_huan_hua_extra_max_use_count = 393;
    if (has_chi_huo_shen_gong_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_huan_hua_extra_max_use_count());
    }

    // optional int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times = 394;
    if (has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_qian_neng_max_use_count_extra_times());
    }

    // optional int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times = 395;
    if (has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_huan_hua_max_use_count_extra_times());
    }

    // optional bool chi_huo_shen_gong_is_hide = 509;
    if (has_chi_huo_shen_gong_is_hide()) {
      total_size += 2 + 1;
    }

    // optional int32 draw_prize_point = 230;
    if (has_draw_prize_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_prize_point());
    }

    // optional int32 draw_prize_storage_goods_count = 231;
    if (has_draw_prize_storage_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_prize_storage_goods_count());
    }

  }
  if (_has_bits_[193 / 32] & (0xffu << (193 % 32))) {
    // optional int32 lucky_draw_prize_point = 233;
    if (has_lucky_draw_prize_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky_draw_prize_point());
    }

    // optional int32 lucky_draw_prize_storage_goods_count = 234;
    if (has_lucky_draw_prize_storage_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky_draw_prize_storage_goods_count());
    }

    // optional int32 new_draw_prize_point = 333;
    if (has_new_draw_prize_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_draw_prize_point());
    }

    // optional int32 new_draw_prize_storage_goods_count = 334;
    if (has_new_draw_prize_storage_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_draw_prize_storage_goods_count());
    }

    // optional .app.message.YitianshenjueProto yitianshenjue_info = 235;
    if (has_yitianshenjue_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yitianshenjue_info());
    }

    // optional int32 daily_wheel_count = 270;
    if (has_daily_wheel_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_wheel_count());
    }

  }
  if (_has_bits_[202 / 32] & (0xffu << (202 % 32))) {
    // optional int32 arena_pair_point = 301;
    if (has_arena_pair_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_pair_point());
    }

    // optional int32 today_finished_arena_count = 302;
    if (has_today_finished_arena_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_finished_arena_count());
    }

    // optional int32 arena_shop_point = 303;
    if (has_arena_shop_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_shop_point());
    }

    // optional int32 arena_collectable_shop_point = 304;
    if (has_arena_collectable_shop_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_collectable_shop_point());
    }

    // optional int32 arena_yesterday_finish_count = 305;
    if (has_arena_yesterday_finish_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_yesterday_finish_count());
    }

    // optional int32 arena_yesterday_pair_point = 306;
    if (has_arena_yesterday_pair_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_yesterday_pair_point());
    }

  }
  if (_has_bits_[208 / 32] & (0xffu << (208 % 32))) {
    // optional int32 arena_yesterday_original_shop_point = 307;
    if (has_arena_yesterday_original_shop_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_yesterday_original_shop_point());
    }

    // optional int32 arena_shop_point_added_today_by_win = 308;
    if (has_arena_shop_point_added_today_by_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_shop_point_added_today_by_win());
    }

    // optional int64 next_can_use_guild_lilian_time = 310;
    if (has_next_can_use_guild_lilian_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_can_use_guild_lilian_time());
    }

    // optional .app.message.GuildDungeonCollectedPrizeProto guild_dungeon_collected_prize = 311;
    if (has_guild_dungeon_collected_prize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_dungeon_collected_prize());
    }

    // optional .app.message.HeroSuperArmProto super_arm = 312;
    if (has_super_arm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super_arm());
    }

    // optional .app.message.DemonProto demon = 313;
    if (has_demon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->demon());
    }

    // optional .app.message.CloakProto cloak = 314;
    if (has_cloak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cloak());
    }

    // optional int64 pet_combine_added_life = 315;
    if (has_pet_combine_added_life()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pet_combine_added_life());
    }

  }
  if (_has_bits_[216 / 32] & (0xffu << (216 % 32))) {
    // optional int64 pet_next_can_combine_time = 316;
    if (has_pet_next_can_combine_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pet_next_can_combine_time());
    }

    // optional int32 gallup_answered_question_count = 317;
    if (has_gallup_answered_question_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gallup_answered_question_count());
    }

    // optional int32 gallup_today_answered_question_count = 318;
    if (has_gallup_today_answered_question_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gallup_today_answered_question_count());
    }

    // optional .app.message.HeroMarriageProto marriage = 319;
    if (has_marriage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marriage());
    }

    // optional int64 wash_super_weapon_bless_clear_time = 320;
    if (has_wash_super_weapon_bless_clear_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wash_super_weapon_bless_clear_time());
    }

    // optional int32 tian_men_times = 321;
    if (has_tian_men_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tian_men_times());
    }

    // optional bool has_collect_guild_plant_prize = 322;
    if (has_has_collect_guild_plant_prize()) {
      total_size += 2 + 1;
    }

    // optional bool hide_city_master = 323;
    if (has_hide_city_master()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[224 / 32] & (0xffu << (224 % 32))) {
    // optional bool hide_long_city_master = 324;
    if (has_hide_long_city_master()) {
      total_size += 2 + 1;
    }

    // optional int32 p37_vip_prize_count_flag = 325;
    if (has_p37_vip_prize_count_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p37_vip_prize_count_flag());
    }

    // optional int64 last_change_name_time = 326;
    if (has_last_change_name_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_change_name_time());
    }

    // optional int64 next_can_change_race_time = 327;
    if (has_next_can_change_race_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_can_change_race_time());
    }

    // optional int32 htz_times = 328;
    if (has_htz_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->htz_times());
    }

    // optional int32 htz_max_destroy_record = 329;
    if (has_htz_max_destroy_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->htz_max_destroy_record());
    }

    // optional int32 htz_time_record = 330;
    if (has_htz_time_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->htz_time_record());
    }

  }
  if (_has_bits_[235 / 32] & (0xffu << (235 % 32))) {
    // optional bytes arena_fighting_team_name_bytes = 337;
    if (has_arena_fighting_team_name_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arena_fighting_team_name_bytes());
    }

    // optional int32 arena_fighting_team_shop_point = 338;
    if (has_arena_fighting_team_shop_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_fighting_team_shop_point());
    }

    // optional int32 arena_fighting_team_shop_point_added_today_by_win = 339;
    if (has_arena_fighting_team_shop_point_added_today_by_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_fighting_team_shop_point_added_today_by_win());
    }

    // optional .app.message.MoBingProto mo_bing_proto = 342;
    if (has_mo_bing_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mo_bing_proto());
    }

    // optional int32 use_mount_tongling_id = 343;
    if (has_use_mount_tongling_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_mount_tongling_id());
    }

  }
  if (_has_bits_[241 / 32] & (0xffu << (241 % 32))) {
    // optional int64 change_use_mount_tongling_id_cd_time = 345;
    if (has_change_use_mount_tongling_id_cd_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_use_mount_tongling_id_cd_time());
    }

    // optional bool finished_collected_fight_amout_changed_value_rank_daily_prize = 348;
    if (has_finished_collected_fight_amout_changed_value_rank_daily_prize()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[249 / 32] & (0xffu << (249 % 32))) {
    // optional int32 christmas_storage_goods_count = 355;
    if (has_christmas_storage_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->christmas_storage_goods_count());
    }

    // optional int32 credits = 356;
    if (has_credits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits());
    }

    // optional int32 monopoly_now_cell_id = 358;
    if (has_monopoly_now_cell_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monopoly_now_cell_id());
    }

    // optional int32 monopoly_now_roll_times_cost = 359;
    if (has_monopoly_now_roll_times_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monopoly_now_roll_times_cost());
    }

    // optional int32 monopoly_roll_times = 360;
    if (has_monopoly_roll_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monopoly_roll_times());
    }

    // optional int32 monopoly_buy_roll_times = 361;
    if (has_monopoly_buy_roll_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monopoly_buy_roll_times());
    }

    // optional int32 credits_draw_storage_goods_count = 362;
    if (has_credits_draw_storage_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits_draw_storage_goods_count());
    }

  }
  if (_has_bits_[256 / 32] & (0xffu << (256 % 32))) {
    // optional .app.message.HeroLoveProto love = 363;
    if (has_love()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->love());
    }

    // optional .app.message.WuDaoProto wu_dao = 364;
    if (has_wu_dao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wu_dao());
    }

    // optional .app.message.NiDaoQianKunClient ni_dao_qian_kun = 365;
    if (has_ni_dao_qian_kun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ni_dao_qian_kun());
    }

    // optional int32 finished_tong_tian_ta_dungeon_sequence = 366;
    if (has_finished_tong_tian_ta_dungeon_sequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finished_tong_tian_ta_dungeon_sequence());
    }

    // optional int32 tong_tian_ta_dungeon_daily_times = 367;
    if (has_tong_tian_ta_dungeon_daily_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tong_tian_ta_dungeon_daily_times());
    }

    // optional int32 tong_tian_ta_dungeon_refresh_times = 369;
    if (has_tong_tian_ta_dungeon_refresh_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tong_tian_ta_dungeon_refresh_times());
    }

    // optional .app.message.HeroAnniversaryProto anniversary = 370;
    if (has_anniversary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anniversary());
    }

  }
  if (_has_bits_[265 / 32] & (0xffu << (265 % 32))) {
    // optional int64 firework_promotion_start_time = 372;
    if (has_firework_promotion_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firework_promotion_start_time());
    }

    // optional int64 firework_promotion_end_time = 373;
    if (has_firework_promotion_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firework_promotion_end_time());
    }

    // optional .app.message.HeroAnniversaryTaskProto anniversary_task = 374;
    if (has_anniversary_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anniversary_task());
    }

    // optional bool is_gain_huege_data_prize = 375;
    if (has_is_gain_huege_data_prize()) {
      total_size += 2 + 1;
    }

    // optional .app.message.ShieldProto shield = 376;
    if (has_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shield());
    }

  }
  if (_has_bits_[274 / 32] & (0xffu << (274 % 32))) {
    // optional int32 ling_guang = 381;
    if (has_ling_guang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ling_guang());
    }

    // optional int32 ling_guang_pick = 382;
    if (has_ling_guang_pick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ling_guang_pick());
    }

    // optional int32 mystery_dungeon_use_time = 383;
    if (has_mystery_dungeon_use_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mystery_dungeon_use_time());
    }

    // optional .app.message.HeroBossCard boss_card = 396;
    if (has_boss_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_card());
    }

    // optional .app.message.HaidiInfoProto haidi = 397;
    if (has_haidi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->haidi());
    }

    // optional int32 bow_tong_ling_display_id = 398;
    if (has_bow_tong_ling_display_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bow_tong_ling_display_id());
    }

  }
  if (_has_bits_[281 / 32] & (0xffu << (281 % 32))) {
    // optional int64 sys_hong_bao_colleted_time = 400;
    if (has_sys_hong_bao_colleted_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_hong_bao_colleted_time());
    }

    // optional .app.message.TianXieProto tian_xie = 500;
    if (has_tian_xie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tian_xie());
    }

    // optional .app.message.JianDaoProto jianDao = 501;
    if (has_jiandao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jiandao());
    }

    // optional .app.message.LingYuProto lingYu = 502;
    if (has_lingyu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lingyu());
    }

    // optional .app.message.FengYunDaoProto fengYunDao = 503;
    if (has_fengyundao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fengyundao());
    }

    // optional int32 pet_tong_ling_display_id = 505;
    if (has_pet_tong_ling_display_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_tong_ling_display_id());
    }

  }
  if (_has_bits_[289 / 32] & (0xffu << (289 % 32))) {
    // optional .app.message.MoFangClientProto mo_fang = 507;
    if (has_mo_fang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mo_fang());
    }

    // optional int32 hell_dungeon_enter_count = 515;
    if (has_hell_dungeon_enter_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hell_dungeon_enter_count());
    }

  }
  // repeated int32 equiped_pos = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiped_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equiped_pos(i));
    }
    total_size += 1 * this->equiped_pos_size() + data_size;
  }

  // repeated .app.message.EquipmentDataProto equipment_datas = 13;
  total_size += 1 * this->equipment_datas_size();
  for (int i = 0; i < this->equipment_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_datas(i));
  }

  // repeated .app.message.EquipmentProto equipments = 14;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }

  // repeated bytes buy_back_goods_datas = 19;
  total_size += 2 * this->buy_back_goods_datas_size();
  for (int i = 0; i < this->buy_back_goods_datas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->buy_back_goods_datas(i));
  }

  // repeated bytes buy_back_goods_list = 20;
  total_size += 2 * this->buy_back_goods_list_size();
  for (int i = 0; i < this->buy_back_goods_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->buy_back_goods_list(i));
  }

  // repeated int32 client_only_int_configs = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->client_only_int_configs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->client_only_int_configs(i));
    }
    total_size += 2 * this->client_only_int_configs_size() + data_size;
  }

  // repeated bytes friend_guild_name = 32;
  total_size += 2 * this->friend_guild_name_size();
  for (int i = 0; i < this->friend_guild_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->friend_guild_name(i));
  }

  // repeated bytes enemy_guild_name = 33;
  total_size += 2 * this->enemy_guild_name_size();
  for (int i = 0; i < this->enemy_guild_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->enemy_guild_name(i));
  }

  // repeated .app.message.StoryDungeonStatProto story_dungeon_proto = 36;
  total_size += 2 * this->story_dungeon_proto_size();
  for (int i = 0; i < this->story_dungeon_proto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->story_dungeon_proto(i));
  }

  // repeated .app.message.StoryDungeonCollectablePrizeProto story_dungeon_collectable_prize_proto = 37;
  total_size += 2 * this->story_dungeon_collectable_prize_proto_size();
  for (int i = 0; i < this->story_dungeon_collectable_prize_proto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->story_dungeon_collectable_prize_proto(i));
  }

  // repeated int32 finished_vip_dungeon_id = 46;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_vip_dungeon_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished_vip_dungeon_id(i));
    }
    total_size += 2 * this->finished_vip_dungeon_id_size() + data_size;
  }

  // repeated bytes defence_collectable_prize = 47 [deprecated = true];
  total_size += 2 * this->defence_collectable_prize_size();
  for (int i = 0; i < this->defence_collectable_prize_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->defence_collectable_prize(i));
  }

  // repeated int32 sou_shen_today_passed_id = 49;
  {
    int data_size = 0;
    for (int i = 0; i < this->sou_shen_today_passed_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sou_shen_today_passed_id(i));
    }
    total_size += 2 * this->sou_shen_today_passed_id_size() + data_size;
  }

  // repeated int32 sou_shen_life_passed_id = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->sou_shen_life_passed_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sou_shen_life_passed_id(i));
    }
    total_size += 2 * this->sou_shen_life_passed_id_size() + data_size;
  }

  // repeated .app.message.GroupDungeonCollectablePrizeProto group_collectable_prize_proto = 52;
  total_size += 2 * this->group_collectable_prize_proto_size();
  for (int i = 0; i < this->group_collectable_prize_proto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_collectable_prize_proto(i));
  }

  // repeated int32 territory_today_collected_prize_scene_id = 55;
  {
    int data_size = 0;
    for (int i = 0; i < this->territory_today_collected_prize_scene_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->territory_today_collected_prize_scene_id(i));
    }
    total_size += 2 * this->territory_today_collected_prize_scene_id_size() + data_size;
  }

  // repeated int32 daily_activity_result = 68;
  {
    int data_size = 0;
    for (int i = 0; i < this->daily_activity_result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daily_activity_result(i));
    }
    total_size += 2 * this->daily_activity_result_size() + data_size;
  }

  // repeated int32 sheng_wang_task = 70;
  {
    int data_size = 0;
    for (int i = 0; i < this->sheng_wang_task_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sheng_wang_task(i));
    }
    total_size += 2 * this->sheng_wang_task_size() + data_size;
  }

  // repeated int32 gems = 72;
  {
    int data_size = 0;
    for (int i = 0; i < this->gems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gems(i));
    }
    total_size += 2 * this->gems_size() + data_size;
  }

  // repeated int64 admired_hero = 74;
  {
    int data_size = 0;
    for (int i = 0; i < this->admired_hero_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->admired_hero(i));
    }
    total_size += 2 * this->admired_hero_size() + data_size;
  }

  // repeated .app.message.SuperWeaponProto super_weapon = 79;
  total_size += 2 * this->super_weapon_size();
  for (int i = 0; i < this->super_weapon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->super_weapon(i));
  }

  // repeated bool has_unlock_magic_weapon_gem = 239;
  {
    int data_size = 0;
    data_size = 1 * this->has_unlock_magic_weapon_gem_size();
    total_size += 2 * this->has_unlock_magic_weapon_gem_size() + data_size;
  }

  // repeated int32 magic_weapon_gem_level = 240;
  {
    int data_size = 0;
    for (int i = 0; i < this->magic_weapon_gem_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->magic_weapon_gem_level(i));
    }
    total_size += 2 * this->magic_weapon_gem_level_size() + data_size;
  }

  // repeated bool magic_weapon_gem_binded = 241;
  {
    int data_size = 0;
    data_size = 1 * this->magic_weapon_gem_binded_size();
    total_size += 2 * this->magic_weapon_gem_binded_size() + data_size;
  }

  // repeated bytes lottery_goods_static_data = 94;
  total_size += 2 * this->lottery_goods_static_data_size();
  for (int i = 0; i < this->lottery_goods_static_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->lottery_goods_static_data(i));
  }

  // repeated bytes lottery_goods_dynamic_data = 95;
  total_size += 2 * this->lottery_goods_dynamic_data_size();
  for (int i = 0; i < this->lottery_goods_dynamic_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->lottery_goods_dynamic_data(i));
  }

  // repeated .app.message.CombineXinfaSpellProto combine_spells = 98;
  total_size += 2 * this->combine_spells_size();
  for (int i = 0; i < this->combine_spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combine_spells(i));
  }

  // repeated .app.message.ActiveSpell passive_spell = 99;
  total_size += 2 * this->passive_spell_size();
  for (int i = 0; i < this->passive_spell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passive_spell(i));
  }

  // repeated .app.message.ActiveSpell active_spell = 100 [deprecated = true];
  total_size += 2 * this->active_spell_size();
  for (int i = 0; i < this->active_spell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_spell(i));
  }

  // repeated int32 active_spell_used_times = 101 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->active_spell_used_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->active_spell_used_times(i));
    }
    total_size += 2 * this->active_spell_used_times_size() + data_size;
  }

  // repeated int32 shortcut_spell_type = 102;
  {
    int data_size = 0;
    for (int i = 0; i < this->shortcut_spell_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shortcut_spell_type(i));
    }
    total_size += 2 * this->shortcut_spell_type_size() + data_size;
  }

  // repeated int32 shortcut_spell_pos = 103;
  {
    int data_size = 0;
    for (int i = 0; i < this->shortcut_spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shortcut_spell_pos(i));
    }
    total_size += 2 * this->shortcut_spell_pos_size() + data_size;
  }

  // repeated int32 func_bits = 108;
  {
    int data_size = 0;
    for (int i = 0; i < this->func_bits_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->func_bits(i));
    }
    total_size += 2 * this->func_bits_size() + data_size;
  }

  // repeated int32 challenge_dungeon_use_times = 124;
  {
    int data_size = 0;
    for (int i = 0; i < this->challenge_dungeon_use_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->challenge_dungeon_use_times(i));
    }
    total_size += 2 * this->challenge_dungeon_use_times_size() + data_size;
  }

  // repeated int32 collect_upgrade_bank_level = 133;
  {
    int data_size = 0;
    for (int i = 0; i < this->collect_upgrade_bank_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->collect_upgrade_bank_level(i));
    }
    total_size += 2 * this->collect_upgrade_bank_level_size() + data_size;
  }

  // repeated int32 collect_upgrade_bank_lijin = 134;
  {
    int data_size = 0;
    for (int i = 0; i < this->collect_upgrade_bank_lijin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->collect_upgrade_bank_lijin(i));
    }
    total_size += 2 * this->collect_upgrade_bank_lijin_size() + data_size;
  }

  // repeated int32 jin_jie_lucky_card_type = 207;
  {
    int data_size = 0;
    for (int i = 0; i < this->jin_jie_lucky_card_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jin_jie_lucky_card_type(i));
    }
    total_size += 2 * this->jin_jie_lucky_card_type_size() + data_size;
  }

  // repeated int64 jin_jie_lucky_card_expire_time = 208;
  {
    int data_size = 0;
    for (int i = 0; i < this->jin_jie_lucky_card_expire_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->jin_jie_lucky_card_expire_time(i));
    }
    total_size += 2 * this->jin_jie_lucky_card_expire_time_size() + data_size;
  }

  // repeated int32 jin_jie_lucky_card_rate = 209;
  {
    int data_size = 0;
    for (int i = 0; i < this->jin_jie_lucky_card_rate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jin_jie_lucky_card_rate(i));
    }
    total_size += 2 * this->jin_jie_lucky_card_rate_size() + data_size;
  }

  // repeated int32 daily_card_use_stat_goods_id = 210;
  {
    int data_size = 0;
    for (int i = 0; i < this->daily_card_use_stat_goods_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daily_card_use_stat_goods_id(i));
    }
    total_size += 2 * this->daily_card_use_stat_goods_id_size() + data_size;
  }

  // repeated int32 daily_card_use_stat_use_count = 211;
  {
    int data_size = 0;
    for (int i = 0; i < this->daily_card_use_stat_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->daily_card_use_stat_use_count(i));
    }
    total_size += 2 * this->daily_card_use_stat_use_count_size() + data_size;
  }

  // repeated int32 mo_shi_type = 212;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_type(i));
    }
    total_size += 2 * this->mo_shi_type_size() + data_size;
  }

  // repeated int32 mo_shi_level = 213;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_level(i));
    }
    total_size += 2 * this->mo_shi_level_size() + data_size;
  }

  // repeated int32 mo_shi_bless_amount = 214;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_bless_amount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_bless_amount(i));
    }
    total_size += 2 * this->mo_shi_bless_amount_size() + data_size;
  }

  // repeated int64 mo_shi_bless_amount_clear_time = 215;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_bless_amount_clear_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mo_shi_bless_amount_clear_time(i));
    }
    total_size += 2 * this->mo_shi_bless_amount_clear_time_size() + data_size;
  }

  // repeated int32 mo_shi_spell_id = 216;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_spell_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_spell_id(i));
    }
    total_size += 2 * this->mo_shi_spell_id_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_type = 217;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_type(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_type_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_level = 218;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_level(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_level_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_bless_amount = 219;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_bless_amount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_bless_amount(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_bless_amount_size() + data_size;
  }

  // repeated int64 qian_qiu_da_jie_bless_amount_clear_time = 220;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_bless_amount_clear_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qian_qiu_da_jie_bless_amount_clear_time(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_bless_amount_clear_time_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_use_count = 340;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_qian_neng_use_count(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_qian_neng_use_count_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_use_count = 341;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_huan_hua_use_count(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_huan_hua_use_count_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_extra_max_use_count = 384;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_extra_max_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_qian_neng_extra_max_use_count(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_qian_neng_extra_max_use_count_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_extra_max_use_count = 385;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_extra_max_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_huan_hua_extra_max_use_count(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_huan_hua_extra_max_use_count_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_qian_neng_max_use_count_extra_times = 386;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_qian_neng_max_use_count_extra_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_qian_neng_max_use_count_extra_times(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_qian_neng_max_use_count_extra_times_size() + data_size;
  }

  // repeated int32 qian_qiu_da_jie_huan_hua_max_use_count_extra_times = 387;
  {
    int data_size = 0;
    for (int i = 0; i < this->qian_qiu_da_jie_huan_hua_max_use_count_extra_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qian_qiu_da_jie_huan_hua_max_use_count_extra_times(i));
    }
    total_size += 2 * this->qian_qiu_da_jie_huan_hua_max_use_count_extra_times_size() + data_size;
  }

  // repeated int32 mo_shi_qian_neng_use_count = 223;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_qian_neng_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_qian_neng_use_count(i));
    }
    total_size += 2 * this->mo_shi_qian_neng_use_count_size() + data_size;
  }

  // repeated int32 mo_shi_huan_hua_use_count = 224;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_huan_hua_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_huan_hua_use_count(i));
    }
    total_size += 2 * this->mo_shi_huan_hua_use_count_size() + data_size;
  }

  // repeated int32 mo_shi_qian_neng_extra_max_use_count = 388;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_qian_neng_extra_max_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_qian_neng_extra_max_use_count(i));
    }
    total_size += 2 * this->mo_shi_qian_neng_extra_max_use_count_size() + data_size;
  }

  // repeated int32 mo_shi_huan_hua_extra_max_use_count = 389;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_huan_hua_extra_max_use_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_huan_hua_extra_max_use_count(i));
    }
    total_size += 2 * this->mo_shi_huan_hua_extra_max_use_count_size() + data_size;
  }

  // repeated int32 mo_shi_qian_neng_max_use_count_extra_times = 390;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_qian_neng_max_use_count_extra_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_qian_neng_max_use_count_extra_times(i));
    }
    total_size += 2 * this->mo_shi_qian_neng_max_use_count_extra_times_size() + data_size;
  }

  // repeated int32 mo_shi_huan_hua_max_use_count_extra_times = 391;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_shi_huan_hua_max_use_count_extra_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_shi_huan_hua_max_use_count_extra_times(i));
    }
    total_size += 2 * this->mo_shi_huan_hua_max_use_count_extra_times_size() + data_size;
  }

  // repeated int32 draw_prize_exchange_count = 232;
  {
    int data_size = 0;
    for (int i = 0; i < this->draw_prize_exchange_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->draw_prize_exchange_count(i));
    }
    total_size += 2 * this->draw_prize_exchange_count_size() + data_size;
  }

  // repeated int32 finished_xin_mo_scene_id = 280;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_xin_mo_scene_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished_xin_mo_scene_id(i));
    }
    total_size += 2 * this->finished_xin_mo_scene_id_size() + data_size;
  }

  // repeated int64 collected_recharge_rank_promotion_prize = 299;
  {
    int data_size = 0;
    for (int i = 0; i < this->collected_recharge_rank_promotion_prize_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->collected_recharge_rank_promotion_prize(i));
    }
    total_size += 2 * this->collected_recharge_rank_promotion_prize_size() + data_size;
  }

  // repeated int64 collected_rank_promotion_prize = 300;
  {
    int data_size = 0;
    for (int i = 0; i < this->collected_rank_promotion_prize_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->collected_rank_promotion_prize(i));
    }
    total_size += 2 * this->collected_rank_promotion_prize_size() + data_size;
  }

  // repeated int32 limit_count_goods_id = 331;
  {
    int data_size = 0;
    for (int i = 0; i < this->limit_count_goods_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->limit_count_goods_id(i));
    }
    total_size += 2 * this->limit_count_goods_id_size() + data_size;
  }

  // repeated int32 limit_count_goods_use_times = 332;
  {
    int data_size = 0;
    for (int i = 0; i < this->limit_count_goods_use_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->limit_count_goods_use_times(i));
    }
    total_size += 2 * this->limit_count_goods_use_times_size() + data_size;
  }

  // repeated int64 single_wash_super_weapon_bless_clear_time = 335;
  {
    int data_size = 0;
    for (int i = 0; i < this->single_wash_super_weapon_bless_clear_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->single_wash_super_weapon_bless_clear_time(i));
    }
    total_size += 2 * this->single_wash_super_weapon_bless_clear_time_size() + data_size;
  }

  // repeated int32 single_wash_super_weapon_bless_type = 336;
  {
    int data_size = 0;
    for (int i = 0; i < this->single_wash_super_weapon_bless_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->single_wash_super_weapon_bless_type(i));
    }
    total_size += 2 * this->single_wash_super_weapon_bless_type_size() + data_size;
  }

  // repeated int32 active_mount_tongling_ids = 344;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_mount_tongling_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->active_mount_tongling_ids(i));
    }
    total_size += 2 * this->active_mount_tongling_ids_size() + data_size;
  }

  // repeated int32 mount_tongling_wake_value = 357;
  {
    int data_size = 0;
    for (int i = 0; i < this->mount_tongling_wake_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mount_tongling_wake_value(i));
    }
    total_size += 2 * this->mount_tongling_wake_value_size() + data_size;
  }

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat1 = 346;
  total_size += 2 * this->not_save_xun_zhang_random_stat1_size();
  for (int i = 0; i < this->not_save_xun_zhang_random_stat1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->not_save_xun_zhang_random_stat1(i));
  }

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat2 = 347;
  total_size += 2 * this->not_save_xun_zhang_random_stat2_size();
  for (int i = 0; i < this->not_save_xun_zhang_random_stat2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->not_save_xun_zhang_random_stat2(i));
  }

  // repeated int32 finished_yy_purple_dungeon_count = 349;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_yy_purple_dungeon_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished_yy_purple_dungeon_count(i));
    }
    total_size += 2 * this->finished_yy_purple_dungeon_count_size() + data_size;
  }

  // repeated int32 he_cheng_goods_id = 353;
  {
    int data_size = 0;
    for (int i = 0; i < this->he_cheng_goods_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->he_cheng_goods_id(i));
    }
    total_size += 2 * this->he_cheng_goods_id_size() + data_size;
  }

  // repeated int32 he_cheng_goods_count = 354;
  {
    int data_size = 0;
    for (int i = 0; i < this->he_cheng_goods_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->he_cheng_goods_count(i));
    }
    total_size += 2 * this->he_cheng_goods_count_size() + data_size;
  }

  // repeated int32 tong_tian_ta_dungeon_use_times = 368;
  {
    int data_size = 0;
    for (int i = 0; i < this->tong_tian_ta_dungeon_use_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tong_tian_ta_dungeon_use_times(i));
    }
    total_size += 2 * this->tong_tian_ta_dungeon_use_times_size() + data_size;
  }

  // repeated int32 firework_color_values = 371;
  {
    int data_size = 0;
    for (int i = 0; i < this->firework_color_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->firework_color_values(i));
    }
    total_size += 2 * this->firework_color_values_size() + data_size;
  }

  // repeated int32 finished_ling_yun_id = 378;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_ling_yun_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished_ling_yun_id(i));
    }
    total_size += 2 * this->finished_ling_yun_id_size() + data_size;
  }

  // repeated int32 finished_long_mai_id = 377;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_long_mai_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished_long_mai_id(i));
    }
    total_size += 2 * this->finished_long_mai_id_size() + data_size;
  }

  // repeated int32 finished_zhong_hua_ge_id = 379;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_zhong_hua_ge_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished_zhong_hua_ge_id(i));
    }
    total_size += 2 * this->finished_zhong_hua_ge_id_size() + data_size;
  }

  // repeated .app.message.DefenceDungeonStateClientProto defence_dungeon_state = 380;
  total_size += 2 * this->defence_dungeon_state_size();
  for (int i = 0; i < this->defence_dungeon_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defence_dungeon_state(i));
  }

  // repeated .app.message.BowTongLingClientProto bow_tong_ling = 399;
  total_size += 2 * this->bow_tong_ling_size();
  for (int i = 0; i < this->bow_tong_ling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bow_tong_ling(i));
  }

  // repeated .app.message.PetTongLingClientProto pet_tong_ling = 504;
  total_size += 2 * this->pet_tong_ling_size();
  for (int i = 0; i < this->pet_tong_ling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_tong_ling(i));
  }

  // repeated .app.message.PetTongLingSingleSpellClientProto pet_tong_ling_single_spell = 506;
  total_size += 2 * this->pet_tong_ling_single_spell_size();
  for (int i = 0; i < this->pet_tong_ling_single_spell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_tong_ling_single_spell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroProto::MergeFrom(const HeroProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiped_pos_.MergeFrom(from.equiped_pos_);
  equipment_datas_.MergeFrom(from.equipment_datas_);
  equipments_.MergeFrom(from.equipments_);
  buy_back_goods_datas_.MergeFrom(from.buy_back_goods_datas_);
  buy_back_goods_list_.MergeFrom(from.buy_back_goods_list_);
  client_only_int_configs_.MergeFrom(from.client_only_int_configs_);
  friend_guild_name_.MergeFrom(from.friend_guild_name_);
  enemy_guild_name_.MergeFrom(from.enemy_guild_name_);
  story_dungeon_proto_.MergeFrom(from.story_dungeon_proto_);
  story_dungeon_collectable_prize_proto_.MergeFrom(from.story_dungeon_collectable_prize_proto_);
  finished_vip_dungeon_id_.MergeFrom(from.finished_vip_dungeon_id_);
  defence_collectable_prize_.MergeFrom(from.defence_collectable_prize_);
  sou_shen_today_passed_id_.MergeFrom(from.sou_shen_today_passed_id_);
  sou_shen_life_passed_id_.MergeFrom(from.sou_shen_life_passed_id_);
  group_collectable_prize_proto_.MergeFrom(from.group_collectable_prize_proto_);
  territory_today_collected_prize_scene_id_.MergeFrom(from.territory_today_collected_prize_scene_id_);
  daily_activity_result_.MergeFrom(from.daily_activity_result_);
  sheng_wang_task_.MergeFrom(from.sheng_wang_task_);
  gems_.MergeFrom(from.gems_);
  admired_hero_.MergeFrom(from.admired_hero_);
  super_weapon_.MergeFrom(from.super_weapon_);
  has_unlock_magic_weapon_gem_.MergeFrom(from.has_unlock_magic_weapon_gem_);
  magic_weapon_gem_level_.MergeFrom(from.magic_weapon_gem_level_);
  magic_weapon_gem_binded_.MergeFrom(from.magic_weapon_gem_binded_);
  lottery_goods_static_data_.MergeFrom(from.lottery_goods_static_data_);
  lottery_goods_dynamic_data_.MergeFrom(from.lottery_goods_dynamic_data_);
  combine_spells_.MergeFrom(from.combine_spells_);
  passive_spell_.MergeFrom(from.passive_spell_);
  active_spell_.MergeFrom(from.active_spell_);
  active_spell_used_times_.MergeFrom(from.active_spell_used_times_);
  shortcut_spell_type_.MergeFrom(from.shortcut_spell_type_);
  shortcut_spell_pos_.MergeFrom(from.shortcut_spell_pos_);
  func_bits_.MergeFrom(from.func_bits_);
  challenge_dungeon_use_times_.MergeFrom(from.challenge_dungeon_use_times_);
  collect_upgrade_bank_level_.MergeFrom(from.collect_upgrade_bank_level_);
  collect_upgrade_bank_lijin_.MergeFrom(from.collect_upgrade_bank_lijin_);
  jin_jie_lucky_card_type_.MergeFrom(from.jin_jie_lucky_card_type_);
  jin_jie_lucky_card_expire_time_.MergeFrom(from.jin_jie_lucky_card_expire_time_);
  jin_jie_lucky_card_rate_.MergeFrom(from.jin_jie_lucky_card_rate_);
  daily_card_use_stat_goods_id_.MergeFrom(from.daily_card_use_stat_goods_id_);
  daily_card_use_stat_use_count_.MergeFrom(from.daily_card_use_stat_use_count_);
  mo_shi_type_.MergeFrom(from.mo_shi_type_);
  mo_shi_level_.MergeFrom(from.mo_shi_level_);
  mo_shi_bless_amount_.MergeFrom(from.mo_shi_bless_amount_);
  mo_shi_bless_amount_clear_time_.MergeFrom(from.mo_shi_bless_amount_clear_time_);
  mo_shi_spell_id_.MergeFrom(from.mo_shi_spell_id_);
  qian_qiu_da_jie_type_.MergeFrom(from.qian_qiu_da_jie_type_);
  qian_qiu_da_jie_level_.MergeFrom(from.qian_qiu_da_jie_level_);
  qian_qiu_da_jie_bless_amount_.MergeFrom(from.qian_qiu_da_jie_bless_amount_);
  qian_qiu_da_jie_bless_amount_clear_time_.MergeFrom(from.qian_qiu_da_jie_bless_amount_clear_time_);
  qian_qiu_da_jie_qian_neng_use_count_.MergeFrom(from.qian_qiu_da_jie_qian_neng_use_count_);
  qian_qiu_da_jie_huan_hua_use_count_.MergeFrom(from.qian_qiu_da_jie_huan_hua_use_count_);
  qian_qiu_da_jie_qian_neng_extra_max_use_count_.MergeFrom(from.qian_qiu_da_jie_qian_neng_extra_max_use_count_);
  qian_qiu_da_jie_huan_hua_extra_max_use_count_.MergeFrom(from.qian_qiu_da_jie_huan_hua_extra_max_use_count_);
  qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.MergeFrom(from.qian_qiu_da_jie_qian_neng_max_use_count_extra_times_);
  qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.MergeFrom(from.qian_qiu_da_jie_huan_hua_max_use_count_extra_times_);
  mo_shi_qian_neng_use_count_.MergeFrom(from.mo_shi_qian_neng_use_count_);
  mo_shi_huan_hua_use_count_.MergeFrom(from.mo_shi_huan_hua_use_count_);
  mo_shi_qian_neng_extra_max_use_count_.MergeFrom(from.mo_shi_qian_neng_extra_max_use_count_);
  mo_shi_huan_hua_extra_max_use_count_.MergeFrom(from.mo_shi_huan_hua_extra_max_use_count_);
  mo_shi_qian_neng_max_use_count_extra_times_.MergeFrom(from.mo_shi_qian_neng_max_use_count_extra_times_);
  mo_shi_huan_hua_max_use_count_extra_times_.MergeFrom(from.mo_shi_huan_hua_max_use_count_extra_times_);
  draw_prize_exchange_count_.MergeFrom(from.draw_prize_exchange_count_);
  finished_xin_mo_scene_id_.MergeFrom(from.finished_xin_mo_scene_id_);
  collected_recharge_rank_promotion_prize_.MergeFrom(from.collected_recharge_rank_promotion_prize_);
  collected_rank_promotion_prize_.MergeFrom(from.collected_rank_promotion_prize_);
  limit_count_goods_id_.MergeFrom(from.limit_count_goods_id_);
  limit_count_goods_use_times_.MergeFrom(from.limit_count_goods_use_times_);
  single_wash_super_weapon_bless_clear_time_.MergeFrom(from.single_wash_super_weapon_bless_clear_time_);
  single_wash_super_weapon_bless_type_.MergeFrom(from.single_wash_super_weapon_bless_type_);
  active_mount_tongling_ids_.MergeFrom(from.active_mount_tongling_ids_);
  mount_tongling_wake_value_.MergeFrom(from.mount_tongling_wake_value_);
  not_save_xun_zhang_random_stat1_.MergeFrom(from.not_save_xun_zhang_random_stat1_);
  not_save_xun_zhang_random_stat2_.MergeFrom(from.not_save_xun_zhang_random_stat2_);
  finished_yy_purple_dungeon_count_.MergeFrom(from.finished_yy_purple_dungeon_count_);
  he_cheng_goods_id_.MergeFrom(from.he_cheng_goods_id_);
  he_cheng_goods_count_.MergeFrom(from.he_cheng_goods_count_);
  tong_tian_ta_dungeon_use_times_.MergeFrom(from.tong_tian_ta_dungeon_use_times_);
  firework_color_values_.MergeFrom(from.firework_color_values_);
  finished_ling_yun_id_.MergeFrom(from.finished_ling_yun_id_);
  finished_long_mai_id_.MergeFrom(from.finished_long_mai_id_);
  finished_zhong_hua_ge_id_.MergeFrom(from.finished_zhong_hua_ge_id_);
  defence_dungeon_state_.MergeFrom(from.defence_dungeon_state_);
  bow_tong_ling_.MergeFrom(from.bow_tong_ling_);
  pet_tong_ling_.MergeFrom(from.pet_tong_ling_);
  pet_tong_ling_single_spell_.MergeFrom(from.pet_tong_ling_single_spell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_yuanbao()) {
      set_yuanbao(from.yuanbao());
    }
    if (from.has_lijin()) {
      set_lijin(from.lijin());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_depot()) {
      mutable_depot()->::app::message::GoodsContainerProto::MergeFrom(from.depot());
    }
    if (from.has_real_air()) {
      set_real_air(from.real_air());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fighting_amount()) {
      set_fighting_amount(from.fighting_amount());
    }
    if (from.has_total_stat()) {
      mutable_total_stat()->::app::message::SpriteStatProto::MergeFrom(from.total_stat());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_upgrade_exp()) {
      set_upgrade_exp(from.upgrade_exp());
    }
    if (from.has_equipment_resources()) {
      set_equipment_resources(from.equipment_resources());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_has_storage()) {
      set_has_storage(from.has_storage());
    }
    if (from.has_team_auto_accept_invite()) {
      set_team_auto_accept_invite(from.team_auto_accept_invite());
    }
    if (from.has_team_auto_accept_request()) {
      set_team_auto_accept_request(from.team_auto_accept_request());
    }
    if (from.has_team_forbid_other_invite_me_join()) {
      set_team_forbid_other_invite_me_join(from.team_forbid_other_invite_me_join());
    }
    if (from.has_trade_auto_reject_invite()) {
      set_trade_auto_reject_invite(from.trade_auto_reject_invite());
    }
    if (from.has_task()) {
      mutable_task()->::app::message::HeroTaskProto::MergeFrom(from.task());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_client_only_config_1()) {
      set_client_only_config_1(from.client_only_config_1());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_guild_auto_accept_invite()) {
      set_guild_auto_accept_invite(from.guild_auto_accept_invite());
    }
    if (from.has_guild_forbid_other_invite_me_join()) {
      set_guild_forbid_other_invite_me_join(from.guild_forbid_other_invite_me_join());
    }
    if (from.has_guild_flag_level()) {
      set_guild_flag_level(from.guild_flag_level());
    }
    if (from.has_guild_li_lian()) {
      set_guild_li_lian(from.guild_li_lian());
    }
    if (from.has_guild_contribution()) {
      set_guild_contribution(from.guild_contribution());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_is_ws_city_master()) {
      set_is_ws_city_master(from.is_ws_city_master());
    }
    if (from.has_is_long_city_master()) {
      set_is_long_city_master(from.is_long_city_master());
    }
    if (from.has_is_guild_leader()) {
      set_is_guild_leader(from.is_guild_leader());
    }
    if (from.has_is_territory_leader()) {
      set_is_territory_leader(from.is_territory_leader());
    }
    if (from.has_accumulated_offline_time()) {
      set_accumulated_offline_time(from.accumulated_offline_time());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
  }
  if (from._has_bits_[42 / 32] & (0xffu << (42 % 32))) {
    if (from.has_auto_finish_story_id()) {
      set_auto_finish_story_id(from.auto_finish_story_id());
    }
    if (from.has_auto_finish_story_complete_time()) {
      set_auto_finish_story_complete_time(from.auto_finish_story_complete_time());
    }
    if (from.has_finished_challenge_dungeon_sequence_id()) {
      set_finished_challenge_dungeon_sequence_id(from.finished_challenge_dungeon_sequence_id());
    }
    if (from.has_defence_today_finished_batch()) {
      set_defence_today_finished_batch(from.defence_today_finished_batch());
    }
    if (from.has_defence_history_max_batch()) {
      set_defence_history_max_batch(from.defence_history_max_batch());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_defence_today_reset_count()) {
      set_defence_today_reset_count(from.defence_today_reset_count());
    }
    if (from.has_defence_collected_first_pass_prize()) {
      set_defence_collected_first_pass_prize(from.defence_collected_first_pass_prize());
    }
    if (from.has_sou_shen_point()) {
      set_sou_shen_point(from.sou_shen_point());
    }
    if (from.has_ling_yun_today_entered_times()) {
      set_ling_yun_today_entered_times(from.ling_yun_today_entered_times());
    }
    if (from.has_ling_yun_today_finish_state()) {
      set_ling_yun_today_finish_state(from.ling_yun_today_finish_state());
    }
  }
  if (from._has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    if (from.has_long_mai_today_first_passed()) {
      set_long_mai_today_first_passed(from.long_mai_today_first_passed());
    }
    if (from.has_wu_jue_today_entered_times()) {
      set_wu_jue_today_entered_times(from.wu_jue_today_entered_times());
    }
    if (from.has_wu_jue_today_collected_first_try_transport_prize_times()) {
      set_wu_jue_today_collected_first_try_transport_prize_times(from.wu_jue_today_collected_first_try_transport_prize_times());
    }
    if (from.has_sheng_wang()) {
      set_sheng_wang(from.sheng_wang());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_use_free_chat_times()) {
      set_use_free_chat_times(from.use_free_chat_times());
    }
    if (from.has_bow()) {
      mutable_bow()->::app::message::BowProto::MergeFrom(from.bow());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_collected_vip_prize()) {
      set_collected_vip_prize(from.collected_vip_prize());
    }
    if (from.has_next_collect_vip_weekly_prize_time()) {
      set_next_collect_vip_weekly_prize_time(from.next_collect_vip_weekly_prize_time());
    }
    if (from.has_using_weapon()) {
      set_using_weapon(from.using_weapon());
    }
  }
  if (from._has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    if (from.has_super_weapon_max_level_add_stat()) {
      mutable_super_weapon_max_level_add_stat()->::app::message::SpriteStatProto::MergeFrom(from.super_weapon_max_level_add_stat());
    }
    if (from.has_has_magic_weapon()) {
      set_has_magic_weapon(from.has_magic_weapon());
    }
    if (from.has_magic_added_stat()) {
      mutable_magic_added_stat()->::app::message::SpriteStatProto::MergeFrom(from.magic_added_stat());
    }
    if (from.has_magic_not_saved_added_stat()) {
      mutable_magic_not_saved_added_stat()->::app::message::SpriteStatProto::MergeFrom(from.magic_not_saved_added_stat());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_divine_times()) {
      set_divine_times(from.divine_times());
    }
    if (from.has_divine_amount()) {
      set_divine_amount(from.divine_amount());
    }
    if (from.has_divine_storage_goods_count()) {
      set_divine_storage_goods_count(from.divine_storage_goods_count());
    }
    if (from.has_mount()) {
      mutable_mount()->::app::message::MountProto::MergeFrom(from.mount());
    }
    if (from.has_lottery()) {
      set_lottery(from.lottery());
    }
    if (from.has_daily_online_acc_time()) {
      set_daily_online_acc_time(from.daily_online_acc_time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_sign_prize()) {
      set_sign_prize(from.sign_prize());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_replenish_sign_times()) {
      set_replenish_sign_times(from.replenish_sign_times());
    }
    if (from.has_next_reduce_pk_amount_time()) {
      set_next_reduce_pk_amount_time(from.next_reduce_pk_amount_time());
    }
    if (from.has_pk_amount()) {
      set_pk_amount(from.pk_amount());
    }
    if (from.has_relive_protected_end_time()) {
      set_relive_protected_end_time(from.relive_protected_end_time());
    }
    if (from.has_total_sign_times()) {
      set_total_sign_times(from.total_sign_times());
    }
    if (from.has_total_recharge_yuanbao()) {
      set_total_recharge_yuanbao(from.total_recharge_yuanbao());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::app::message::PetProto::MergeFrom(from.pet());
    }
    if (from.has_has_recharge()) {
      set_has_recharge(from.has_recharge());
    }
    if (from.has_spell_added_upgrade_level()) {
      set_spell_added_upgrade_level(from.spell_added_upgrade_level());
    }
  }
  if (from._has_bits_[105 / 32] & (0xffu << (105 % 32))) {
    if (from.has_default_spell_pos()) {
      set_default_spell_pos(from.default_spell_pos());
    }
    if (from.has_jump_shield()) {
      set_jump_shield(from.jump_shield());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_client_relation()) {
      mutable_client_relation()->::app::message::ClientRelation::MergeFrom(from.client_relation());
    }
    if (from.has_rage_amount()) {
      set_rage_amount(from.rage_amount());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  if (from._has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (from.has_is_collect_local_login_first_prize()) {
      set_is_collect_local_login_first_prize(from.is_collect_local_login_first_prize());
    }
    if (from.has_is_collect_local_login_daily_prize()) {
      set_is_collect_local_login_daily_prize(from.is_collect_local_login_daily_prize());
    }
    if (from.has_phoenix_refine_times()) {
      set_phoenix_refine_times(from.phoenix_refine_times());
    }
    if (from.has_is_cross_single_story()) {
      set_is_cross_single_story(from.is_cross_single_story());
    }
    if (from.has_phoenix_money_refine_times()) {
      set_phoenix_money_refine_times(from.phoenix_money_refine_times());
    }
    if (from.has_phoenix_lijin_refine_times()) {
      set_phoenix_lijin_refine_times(from.phoenix_lijin_refine_times());
    }
    if (from.has_phoenix_yuanbao_refine_times()) {
      set_phoenix_yuanbao_refine_times(from.phoenix_yuanbao_refine_times());
    }
    if (from.has_login_day()) {
      set_login_day(from.login_day());
    }
  }
  if (from._has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    if (from.has_tu_long_today_entered_times()) {
      set_tu_long_today_entered_times(from.tu_long_today_entered_times());
    }
    if (from.has_melt_amount()) {
      set_melt_amount(from.melt_amount());
    }
    if (from.has_challenge_dungeon_daily_times()) {
      set_challenge_dungeon_daily_times(from.challenge_dungeon_daily_times());
    }
    if (from.has_challenge_dungeon_assist_times()) {
      set_challenge_dungeon_assist_times(from.challenge_dungeon_assist_times());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_tian_zui()) {
      mutable_tian_zui()->::app::message::TianZuiProto::MergeFrom(from.tian_zui());
    }
    if (from.has_tian_jie()) {
      mutable_tian_jie()->::app::message::TianJieProto::MergeFrom(from.tian_jie());
    }
  }
  if (from._has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    if (from.has_first_recharge_collect_index()) {
      set_first_recharge_collect_index(from.first_recharge_collect_index());
    }
    if (from.has_login_prize_info()) {
      set_login_prize_info(from.login_prize_info());
    }
    if (from.has_invest_upgrade_bank_money()) {
      set_invest_upgrade_bank_money(from.invest_upgrade_bank_money());
    }
    if (from.has_invest_monthly_bank_money()) {
      set_invest_monthly_bank_money(from.invest_monthly_bank_money());
    }
    if (from.has_invest_monthly_bank_time()) {
      set_invest_monthly_bank_time(from.invest_monthly_bank_time());
    }
    if (from.has_monthly_bank_prev_collect_time()) {
      set_monthly_bank_prev_collect_time(from.monthly_bank_prev_collect_time());
    }
  }
  if (from._has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    if (from.has_monthly_bank_prev_collect_time2()) {
      set_monthly_bank_prev_collect_time2(from.monthly_bank_prev_collect_time2());
    }
    if (from.has_monthly_bank_online_lijin()) {
      set_monthly_bank_online_lijin(from.monthly_bank_online_lijin());
    }
    if (from.has_monthly_bank_base_lijin()) {
      set_monthly_bank_base_lijin(from.monthly_bank_base_lijin());
    }
    if (from.has_monthly_bank_online_hours()) {
      set_monthly_bank_online_hours(from.monthly_bank_online_hours());
    }
    if (from.has_total_online_time()) {
      set_total_online_time(from.total_online_time());
    }
    if (from.has_achievement()) {
      mutable_achievement()->::app::message::AchievementInfoProto::MergeFrom(from.achievement());
    }
    if (from.has_shou_cang()) {
      mutable_shou_cang()->::app::message::ShouCangProto::MergeFrom(from.shou_cang());
    }
    if (from.has_zhong_hua_ge_today_first_passed()) {
      set_zhong_hua_ge_today_first_passed(from.zhong_hua_ge_today_first_passed());
    }
  }
  if (from._has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    if (from.has_gaoji_melt_amount()) {
      set_gaoji_melt_amount(from.gaoji_melt_amount());
    }
    if (from.has_left_ya_biao_times_today()) {
      set_left_ya_biao_times_today(from.left_ya_biao_times_today());
    }
    if (from.has_left_jie_biao_times_today()) {
      set_left_jie_biao_times_today(from.left_jie_biao_times_today());
    }
    if (from.has_has_safe_code()) {
      set_has_safe_code(from.has_safe_code());
    }
    if (from.has_safe_code_question()) {
      set_safe_code_question(from.safe_code_question());
    }
  }
  if (from._has_bits_[159 / 32] & (0xffu << (159 % 32))) {
    if (from.has_mo_shi_is_hide()) {
      set_mo_shi_is_hide(from.mo_shi_is_hide());
    }
  }
  if (from._has_bits_[166 / 32] & (0xffu << (166 % 32))) {
    if (from.has_qian_qiu_da_jie_is_hide()) {
      set_qian_qiu_da_jie_is_hide(from.qian_qiu_da_jie_is_hide());
    }
  }
  if (from._has_bits_[171 / 32] & (0xffu << (171 % 32))) {
    if (from.has_long_yuan()) {
      set_long_yuan(from.long_yuan());
    }
    if (from.has_jing_jie()) {
      mutable_jing_jie()->::app::message::HeroJingJieProto::MergeFrom(from.jing_jie());
    }
  }
  if (from._has_bits_[179 / 32] & (0xffu << (179 % 32))) {
    if (from.has_chi_huo_shen_gong_jie_shu()) {
      set_chi_huo_shen_gong_jie_shu(from.chi_huo_shen_gong_jie_shu());
    }
    if (from.has_chi_huo_shen_gong_ceng_shu()) {
      set_chi_huo_shen_gong_ceng_shu(from.chi_huo_shen_gong_ceng_shu());
    }
    if (from.has_chi_huo_shen_gong_bless_amount()) {
      set_chi_huo_shen_gong_bless_amount(from.chi_huo_shen_gong_bless_amount());
    }
    if (from.has_chi_huo_shen_gong_bless_amount_clear_time()) {
      set_chi_huo_shen_gong_bless_amount_clear_time(from.chi_huo_shen_gong_bless_amount_clear_time());
    }
    if (from.has_chi_huo_shen_gong_qian_neng_use_count()) {
      set_chi_huo_shen_gong_qian_neng_use_count(from.chi_huo_shen_gong_qian_neng_use_count());
    }
  }
  if (from._has_bits_[184 / 32] & (0xffu << (184 % 32))) {
    if (from.has_chi_huo_shen_gong_huan_hua_use_count()) {
      set_chi_huo_shen_gong_huan_hua_use_count(from.chi_huo_shen_gong_huan_hua_use_count());
    }
    if (from.has_chi_huo_shen_gong_qian_neng_extra_max_use_count()) {
      set_chi_huo_shen_gong_qian_neng_extra_max_use_count(from.chi_huo_shen_gong_qian_neng_extra_max_use_count());
    }
    if (from.has_chi_huo_shen_gong_huan_hua_extra_max_use_count()) {
      set_chi_huo_shen_gong_huan_hua_extra_max_use_count(from.chi_huo_shen_gong_huan_hua_extra_max_use_count());
    }
    if (from.has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times()) {
      set_chi_huo_shen_gong_qian_neng_max_use_count_extra_times(from.chi_huo_shen_gong_qian_neng_max_use_count_extra_times());
    }
    if (from.has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times()) {
      set_chi_huo_shen_gong_huan_hua_max_use_count_extra_times(from.chi_huo_shen_gong_huan_hua_max_use_count_extra_times());
    }
    if (from.has_chi_huo_shen_gong_is_hide()) {
      set_chi_huo_shen_gong_is_hide(from.chi_huo_shen_gong_is_hide());
    }
    if (from.has_draw_prize_point()) {
      set_draw_prize_point(from.draw_prize_point());
    }
    if (from.has_draw_prize_storage_goods_count()) {
      set_draw_prize_storage_goods_count(from.draw_prize_storage_goods_count());
    }
  }
  if (from._has_bits_[193 / 32] & (0xffu << (193 % 32))) {
    if (from.has_lucky_draw_prize_point()) {
      set_lucky_draw_prize_point(from.lucky_draw_prize_point());
    }
    if (from.has_lucky_draw_prize_storage_goods_count()) {
      set_lucky_draw_prize_storage_goods_count(from.lucky_draw_prize_storage_goods_count());
    }
    if (from.has_new_draw_prize_point()) {
      set_new_draw_prize_point(from.new_draw_prize_point());
    }
    if (from.has_new_draw_prize_storage_goods_count()) {
      set_new_draw_prize_storage_goods_count(from.new_draw_prize_storage_goods_count());
    }
    if (from.has_yitianshenjue_info()) {
      mutable_yitianshenjue_info()->::app::message::YitianshenjueProto::MergeFrom(from.yitianshenjue_info());
    }
    if (from.has_daily_wheel_count()) {
      set_daily_wheel_count(from.daily_wheel_count());
    }
  }
  if (from._has_bits_[202 / 32] & (0xffu << (202 % 32))) {
    if (from.has_arena_pair_point()) {
      set_arena_pair_point(from.arena_pair_point());
    }
    if (from.has_today_finished_arena_count()) {
      set_today_finished_arena_count(from.today_finished_arena_count());
    }
    if (from.has_arena_shop_point()) {
      set_arena_shop_point(from.arena_shop_point());
    }
    if (from.has_arena_collectable_shop_point()) {
      set_arena_collectable_shop_point(from.arena_collectable_shop_point());
    }
    if (from.has_arena_yesterday_finish_count()) {
      set_arena_yesterday_finish_count(from.arena_yesterday_finish_count());
    }
    if (from.has_arena_yesterday_pair_point()) {
      set_arena_yesterday_pair_point(from.arena_yesterday_pair_point());
    }
  }
  if (from._has_bits_[208 / 32] & (0xffu << (208 % 32))) {
    if (from.has_arena_yesterday_original_shop_point()) {
      set_arena_yesterday_original_shop_point(from.arena_yesterday_original_shop_point());
    }
    if (from.has_arena_shop_point_added_today_by_win()) {
      set_arena_shop_point_added_today_by_win(from.arena_shop_point_added_today_by_win());
    }
    if (from.has_next_can_use_guild_lilian_time()) {
      set_next_can_use_guild_lilian_time(from.next_can_use_guild_lilian_time());
    }
    if (from.has_guild_dungeon_collected_prize()) {
      mutable_guild_dungeon_collected_prize()->::app::message::GuildDungeonCollectedPrizeProto::MergeFrom(from.guild_dungeon_collected_prize());
    }
    if (from.has_super_arm()) {
      mutable_super_arm()->::app::message::HeroSuperArmProto::MergeFrom(from.super_arm());
    }
    if (from.has_demon()) {
      mutable_demon()->::app::message::DemonProto::MergeFrom(from.demon());
    }
    if (from.has_cloak()) {
      mutable_cloak()->::app::message::CloakProto::MergeFrom(from.cloak());
    }
    if (from.has_pet_combine_added_life()) {
      set_pet_combine_added_life(from.pet_combine_added_life());
    }
  }
  if (from._has_bits_[216 / 32] & (0xffu << (216 % 32))) {
    if (from.has_pet_next_can_combine_time()) {
      set_pet_next_can_combine_time(from.pet_next_can_combine_time());
    }
    if (from.has_gallup_answered_question_count()) {
      set_gallup_answered_question_count(from.gallup_answered_question_count());
    }
    if (from.has_gallup_today_answered_question_count()) {
      set_gallup_today_answered_question_count(from.gallup_today_answered_question_count());
    }
    if (from.has_marriage()) {
      mutable_marriage()->::app::message::HeroMarriageProto::MergeFrom(from.marriage());
    }
    if (from.has_wash_super_weapon_bless_clear_time()) {
      set_wash_super_weapon_bless_clear_time(from.wash_super_weapon_bless_clear_time());
    }
    if (from.has_tian_men_times()) {
      set_tian_men_times(from.tian_men_times());
    }
    if (from.has_has_collect_guild_plant_prize()) {
      set_has_collect_guild_plant_prize(from.has_collect_guild_plant_prize());
    }
    if (from.has_hide_city_master()) {
      set_hide_city_master(from.hide_city_master());
    }
  }
  if (from._has_bits_[224 / 32] & (0xffu << (224 % 32))) {
    if (from.has_hide_long_city_master()) {
      set_hide_long_city_master(from.hide_long_city_master());
    }
    if (from.has_p37_vip_prize_count_flag()) {
      set_p37_vip_prize_count_flag(from.p37_vip_prize_count_flag());
    }
    if (from.has_last_change_name_time()) {
      set_last_change_name_time(from.last_change_name_time());
    }
    if (from.has_next_can_change_race_time()) {
      set_next_can_change_race_time(from.next_can_change_race_time());
    }
    if (from.has_htz_times()) {
      set_htz_times(from.htz_times());
    }
    if (from.has_htz_max_destroy_record()) {
      set_htz_max_destroy_record(from.htz_max_destroy_record());
    }
    if (from.has_htz_time_record()) {
      set_htz_time_record(from.htz_time_record());
    }
  }
  if (from._has_bits_[235 / 32] & (0xffu << (235 % 32))) {
    if (from.has_arena_fighting_team_name_bytes()) {
      set_arena_fighting_team_name_bytes(from.arena_fighting_team_name_bytes());
    }
    if (from.has_arena_fighting_team_shop_point()) {
      set_arena_fighting_team_shop_point(from.arena_fighting_team_shop_point());
    }
    if (from.has_arena_fighting_team_shop_point_added_today_by_win()) {
      set_arena_fighting_team_shop_point_added_today_by_win(from.arena_fighting_team_shop_point_added_today_by_win());
    }
    if (from.has_mo_bing_proto()) {
      mutable_mo_bing_proto()->::app::message::MoBingProto::MergeFrom(from.mo_bing_proto());
    }
    if (from.has_use_mount_tongling_id()) {
      set_use_mount_tongling_id(from.use_mount_tongling_id());
    }
  }
  if (from._has_bits_[241 / 32] & (0xffu << (241 % 32))) {
    if (from.has_change_use_mount_tongling_id_cd_time()) {
      set_change_use_mount_tongling_id_cd_time(from.change_use_mount_tongling_id_cd_time());
    }
    if (from.has_finished_collected_fight_amout_changed_value_rank_daily_prize()) {
      set_finished_collected_fight_amout_changed_value_rank_daily_prize(from.finished_collected_fight_amout_changed_value_rank_daily_prize());
    }
  }
  if (from._has_bits_[249 / 32] & (0xffu << (249 % 32))) {
    if (from.has_christmas_storage_goods_count()) {
      set_christmas_storage_goods_count(from.christmas_storage_goods_count());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
    if (from.has_monopoly_now_cell_id()) {
      set_monopoly_now_cell_id(from.monopoly_now_cell_id());
    }
    if (from.has_monopoly_now_roll_times_cost()) {
      set_monopoly_now_roll_times_cost(from.monopoly_now_roll_times_cost());
    }
    if (from.has_monopoly_roll_times()) {
      set_monopoly_roll_times(from.monopoly_roll_times());
    }
    if (from.has_monopoly_buy_roll_times()) {
      set_monopoly_buy_roll_times(from.monopoly_buy_roll_times());
    }
    if (from.has_credits_draw_storage_goods_count()) {
      set_credits_draw_storage_goods_count(from.credits_draw_storage_goods_count());
    }
  }
  if (from._has_bits_[256 / 32] & (0xffu << (256 % 32))) {
    if (from.has_love()) {
      mutable_love()->::app::message::HeroLoveProto::MergeFrom(from.love());
    }
    if (from.has_wu_dao()) {
      mutable_wu_dao()->::app::message::WuDaoProto::MergeFrom(from.wu_dao());
    }
    if (from.has_ni_dao_qian_kun()) {
      mutable_ni_dao_qian_kun()->::app::message::NiDaoQianKunClient::MergeFrom(from.ni_dao_qian_kun());
    }
    if (from.has_finished_tong_tian_ta_dungeon_sequence()) {
      set_finished_tong_tian_ta_dungeon_sequence(from.finished_tong_tian_ta_dungeon_sequence());
    }
    if (from.has_tong_tian_ta_dungeon_daily_times()) {
      set_tong_tian_ta_dungeon_daily_times(from.tong_tian_ta_dungeon_daily_times());
    }
    if (from.has_tong_tian_ta_dungeon_refresh_times()) {
      set_tong_tian_ta_dungeon_refresh_times(from.tong_tian_ta_dungeon_refresh_times());
    }
    if (from.has_anniversary()) {
      mutable_anniversary()->::app::message::HeroAnniversaryProto::MergeFrom(from.anniversary());
    }
  }
  if (from._has_bits_[265 / 32] & (0xffu << (265 % 32))) {
    if (from.has_firework_promotion_start_time()) {
      set_firework_promotion_start_time(from.firework_promotion_start_time());
    }
    if (from.has_firework_promotion_end_time()) {
      set_firework_promotion_end_time(from.firework_promotion_end_time());
    }
    if (from.has_anniversary_task()) {
      mutable_anniversary_task()->::app::message::HeroAnniversaryTaskProto::MergeFrom(from.anniversary_task());
    }
    if (from.has_is_gain_huege_data_prize()) {
      set_is_gain_huege_data_prize(from.is_gain_huege_data_prize());
    }
    if (from.has_shield()) {
      mutable_shield()->::app::message::ShieldProto::MergeFrom(from.shield());
    }
  }
  if (from._has_bits_[274 / 32] & (0xffu << (274 % 32))) {
    if (from.has_ling_guang()) {
      set_ling_guang(from.ling_guang());
    }
    if (from.has_ling_guang_pick()) {
      set_ling_guang_pick(from.ling_guang_pick());
    }
    if (from.has_mystery_dungeon_use_time()) {
      set_mystery_dungeon_use_time(from.mystery_dungeon_use_time());
    }
    if (from.has_boss_card()) {
      mutable_boss_card()->::app::message::HeroBossCard::MergeFrom(from.boss_card());
    }
    if (from.has_haidi()) {
      mutable_haidi()->::app::message::HaidiInfoProto::MergeFrom(from.haidi());
    }
    if (from.has_bow_tong_ling_display_id()) {
      set_bow_tong_ling_display_id(from.bow_tong_ling_display_id());
    }
  }
  if (from._has_bits_[281 / 32] & (0xffu << (281 % 32))) {
    if (from.has_sys_hong_bao_colleted_time()) {
      set_sys_hong_bao_colleted_time(from.sys_hong_bao_colleted_time());
    }
    if (from.has_tian_xie()) {
      mutable_tian_xie()->::app::message::TianXieProto::MergeFrom(from.tian_xie());
    }
    if (from.has_jiandao()) {
      mutable_jiandao()->::app::message::JianDaoProto::MergeFrom(from.jiandao());
    }
    if (from.has_lingyu()) {
      mutable_lingyu()->::app::message::LingYuProto::MergeFrom(from.lingyu());
    }
    if (from.has_fengyundao()) {
      mutable_fengyundao()->::app::message::FengYunDaoProto::MergeFrom(from.fengyundao());
    }
    if (from.has_pet_tong_ling_display_id()) {
      set_pet_tong_ling_display_id(from.pet_tong_ling_display_id());
    }
  }
  if (from._has_bits_[289 / 32] & (0xffu << (289 % 32))) {
    if (from.has_mo_fang()) {
      mutable_mo_fang()->::app::message::MoFangClientProto::MergeFrom(from.mo_fang());
    }
    if (from.has_hell_dungeon_enter_count()) {
      set_hell_dungeon_enter_count(from.hell_dungeon_enter_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroProto::CopyFrom(const HeroProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroProto::IsInitialized() const {

  if (has_haidi()) {
    if (!this->haidi().IsInitialized()) return false;
  }
  return true;
}

void HeroProto::Swap(HeroProto* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(race_, other->race_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(yuanbao_, other->yuanbao_);
    std::swap(lijin_, other->lijin_);
    std::swap(money_, other->money_);
    std::swap(depot_, other->depot_);
    std::swap(real_air_, other->real_air_);
    std::swap(fighting_amount_, other->fighting_amount_);
    std::swap(total_stat_, other->total_stat_);
    equiped_pos_.Swap(&other->equiped_pos_);
    equipment_datas_.Swap(&other->equipment_datas_);
    equipments_.Swap(&other->equipments_);
    std::swap(exp_, other->exp_);
    std::swap(upgrade_exp_, other->upgrade_exp_);
    std::swap(equipment_resources_, other->equipment_resources_);
    std::swap(has_storage_, other->has_storage_);
    buy_back_goods_datas_.Swap(&other->buy_back_goods_datas_);
    buy_back_goods_list_.Swap(&other->buy_back_goods_list_);
    std::swap(team_auto_accept_invite_, other->team_auto_accept_invite_);
    std::swap(team_auto_accept_request_, other->team_auto_accept_request_);
    std::swap(team_forbid_other_invite_me_join_, other->team_forbid_other_invite_me_join_);
    std::swap(trade_auto_reject_invite_, other->trade_auto_reject_invite_);
    std::swap(task_, other->task_);
    std::swap(client_only_config_1_, other->client_only_config_1_);
    client_only_int_configs_.Swap(&other->client_only_int_configs_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_auto_accept_invite_, other->guild_auto_accept_invite_);
    std::swap(guild_forbid_other_invite_me_join_, other->guild_forbid_other_invite_me_join_);
    std::swap(guild_flag_level_, other->guild_flag_level_);
    std::swap(guild_li_lian_, other->guild_li_lian_);
    std::swap(guild_contribution_, other->guild_contribution_);
    friend_guild_name_.Swap(&other->friend_guild_name_);
    enemy_guild_name_.Swap(&other->enemy_guild_name_);
    std::swap(is_ws_city_master_, other->is_ws_city_master_);
    std::swap(is_long_city_master_, other->is_long_city_master_);
    std::swap(is_guild_leader_, other->is_guild_leader_);
    std::swap(is_territory_leader_, other->is_territory_leader_);
    std::swap(accumulated_offline_time_, other->accumulated_offline_time_);
    std::swap(vip_exp_, other->vip_exp_);
    story_dungeon_proto_.Swap(&other->story_dungeon_proto_);
    story_dungeon_collectable_prize_proto_.Swap(&other->story_dungeon_collectable_prize_proto_);
    std::swap(auto_finish_story_id_, other->auto_finish_story_id_);
    std::swap(auto_finish_story_complete_time_, other->auto_finish_story_complete_time_);
    std::swap(finished_challenge_dungeon_sequence_id_, other->finished_challenge_dungeon_sequence_id_);
    finished_vip_dungeon_id_.Swap(&other->finished_vip_dungeon_id_);
    std::swap(defence_today_finished_batch_, other->defence_today_finished_batch_);
    std::swap(defence_history_max_batch_, other->defence_history_max_batch_);
    std::swap(defence_today_reset_count_, other->defence_today_reset_count_);
    std::swap(defence_collected_first_pass_prize_, other->defence_collected_first_pass_prize_);
    defence_collectable_prize_.Swap(&other->defence_collectable_prize_);
    std::swap(sou_shen_point_, other->sou_shen_point_);
    sou_shen_today_passed_id_.Swap(&other->sou_shen_today_passed_id_);
    sou_shen_life_passed_id_.Swap(&other->sou_shen_life_passed_id_);
    std::swap(ling_yun_today_entered_times_, other->ling_yun_today_entered_times_);
    std::swap(ling_yun_today_finish_state_, other->ling_yun_today_finish_state_);
    group_collectable_prize_proto_.Swap(&other->group_collectable_prize_proto_);
    std::swap(long_mai_today_first_passed_, other->long_mai_today_first_passed_);
    std::swap(wu_jue_today_entered_times_, other->wu_jue_today_entered_times_);
    std::swap(wu_jue_today_collected_first_try_transport_prize_times_, other->wu_jue_today_collected_first_try_transport_prize_times_);
    territory_today_collected_prize_scene_id_.Swap(&other->territory_today_collected_prize_scene_id_);
    daily_activity_result_.Swap(&other->daily_activity_result_);
    std::swap(sheng_wang_, other->sheng_wang_);
    sheng_wang_task_.Swap(&other->sheng_wang_task_);
    std::swap(use_free_chat_times_, other->use_free_chat_times_);
    gems_.Swap(&other->gems_);
    std::swap(bow_, other->bow_);
    admired_hero_.Swap(&other->admired_hero_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(collected_vip_prize_, other->collected_vip_prize_);
    std::swap(next_collect_vip_weekly_prize_time_, other->next_collect_vip_weekly_prize_time_);
    std::swap(using_weapon_, other->using_weapon_);
    super_weapon_.Swap(&other->super_weapon_);
    std::swap(super_weapon_max_level_add_stat_, other->super_weapon_max_level_add_stat_);
    std::swap(has_magic_weapon_, other->has_magic_weapon_);
    std::swap(magic_added_stat_, other->magic_added_stat_);
    std::swap(magic_not_saved_added_stat_, other->magic_not_saved_added_stat_);
    has_unlock_magic_weapon_gem_.Swap(&other->has_unlock_magic_weapon_gem_);
    magic_weapon_gem_level_.Swap(&other->magic_weapon_gem_level_);
    magic_weapon_gem_binded_.Swap(&other->magic_weapon_gem_binded_);
    std::swap(divine_times_, other->divine_times_);
    std::swap(divine_amount_, other->divine_amount_);
    std::swap(divine_storage_goods_count_, other->divine_storage_goods_count_);
    std::swap(mount_, other->mount_);
    std::swap(lottery_, other->lottery_);
    std::swap(daily_online_acc_time_, other->daily_online_acc_time_);
    std::swap(sign_, other->sign_);
    std::swap(sign_prize_, other->sign_prize_);
    std::swap(replenish_sign_times_, other->replenish_sign_times_);
    std::swap(next_reduce_pk_amount_time_, other->next_reduce_pk_amount_time_);
    std::swap(pk_amount_, other->pk_amount_);
    std::swap(relive_protected_end_time_, other->relive_protected_end_time_);
    std::swap(total_sign_times_, other->total_sign_times_);
    std::swap(total_recharge_yuanbao_, other->total_recharge_yuanbao_);
    lottery_goods_static_data_.Swap(&other->lottery_goods_static_data_);
    lottery_goods_dynamic_data_.Swap(&other->lottery_goods_dynamic_data_);
    std::swap(pet_, other->pet_);
    std::swap(has_recharge_, other->has_recharge_);
    std::swap(spell_added_upgrade_level_, other->spell_added_upgrade_level_);
    combine_spells_.Swap(&other->combine_spells_);
    passive_spell_.Swap(&other->passive_spell_);
    active_spell_.Swap(&other->active_spell_);
    active_spell_used_times_.Swap(&other->active_spell_used_times_);
    shortcut_spell_type_.Swap(&other->shortcut_spell_type_);
    shortcut_spell_pos_.Swap(&other->shortcut_spell_pos_);
    std::swap(default_spell_pos_, other->default_spell_pos_);
    std::swap(jump_shield_, other->jump_shield_);
    std::swap(stamina_, other->stamina_);
    std::swap(client_relation_, other->client_relation_);
    func_bits_.Swap(&other->func_bits_);
    std::swap(rage_amount_, other->rage_amount_);
    std::swap(create_time_, other->create_time_);
    std::swap(is_collect_local_login_first_prize_, other->is_collect_local_login_first_prize_);
    std::swap(is_collect_local_login_daily_prize_, other->is_collect_local_login_daily_prize_);
    std::swap(phoenix_refine_times_, other->phoenix_refine_times_);
    std::swap(is_cross_single_story_, other->is_cross_single_story_);
    std::swap(phoenix_money_refine_times_, other->phoenix_money_refine_times_);
    std::swap(phoenix_lijin_refine_times_, other->phoenix_lijin_refine_times_);
    std::swap(phoenix_yuanbao_refine_times_, other->phoenix_yuanbao_refine_times_);
    std::swap(login_day_, other->login_day_);
    std::swap(tu_long_today_entered_times_, other->tu_long_today_entered_times_);
    std::swap(melt_amount_, other->melt_amount_);
    std::swap(challenge_dungeon_daily_times_, other->challenge_dungeon_daily_times_);
    std::swap(challenge_dungeon_assist_times_, other->challenge_dungeon_assist_times_);
    challenge_dungeon_use_times_.Swap(&other->challenge_dungeon_use_times_);
    std::swap(honor_, other->honor_);
    std::swap(tian_zui_, other->tian_zui_);
    std::swap(tian_jie_, other->tian_jie_);
    std::swap(first_recharge_collect_index_, other->first_recharge_collect_index_);
    std::swap(login_prize_info_, other->login_prize_info_);
    std::swap(invest_upgrade_bank_money_, other->invest_upgrade_bank_money_);
    collect_upgrade_bank_level_.Swap(&other->collect_upgrade_bank_level_);
    collect_upgrade_bank_lijin_.Swap(&other->collect_upgrade_bank_lijin_);
    std::swap(invest_monthly_bank_money_, other->invest_monthly_bank_money_);
    std::swap(invest_monthly_bank_time_, other->invest_monthly_bank_time_);
    std::swap(monthly_bank_prev_collect_time_, other->monthly_bank_prev_collect_time_);
    std::swap(monthly_bank_prev_collect_time2_, other->monthly_bank_prev_collect_time2_);
    std::swap(monthly_bank_online_lijin_, other->monthly_bank_online_lijin_);
    std::swap(monthly_bank_base_lijin_, other->monthly_bank_base_lijin_);
    std::swap(monthly_bank_online_hours_, other->monthly_bank_online_hours_);
    std::swap(total_online_time_, other->total_online_time_);
    std::swap(achievement_, other->achievement_);
    std::swap(shou_cang_, other->shou_cang_);
    std::swap(zhong_hua_ge_today_first_passed_, other->zhong_hua_ge_today_first_passed_);
    std::swap(gaoji_melt_amount_, other->gaoji_melt_amount_);
    std::swap(left_ya_biao_times_today_, other->left_ya_biao_times_today_);
    std::swap(left_jie_biao_times_today_, other->left_jie_biao_times_today_);
    std::swap(has_safe_code_, other->has_safe_code_);
    std::swap(safe_code_question_, other->safe_code_question_);
    jin_jie_lucky_card_type_.Swap(&other->jin_jie_lucky_card_type_);
    jin_jie_lucky_card_expire_time_.Swap(&other->jin_jie_lucky_card_expire_time_);
    jin_jie_lucky_card_rate_.Swap(&other->jin_jie_lucky_card_rate_);
    daily_card_use_stat_goods_id_.Swap(&other->daily_card_use_stat_goods_id_);
    daily_card_use_stat_use_count_.Swap(&other->daily_card_use_stat_use_count_);
    mo_shi_type_.Swap(&other->mo_shi_type_);
    mo_shi_level_.Swap(&other->mo_shi_level_);
    mo_shi_bless_amount_.Swap(&other->mo_shi_bless_amount_);
    mo_shi_bless_amount_clear_time_.Swap(&other->mo_shi_bless_amount_clear_time_);
    mo_shi_spell_id_.Swap(&other->mo_shi_spell_id_);
    std::swap(mo_shi_is_hide_, other->mo_shi_is_hide_);
    qian_qiu_da_jie_type_.Swap(&other->qian_qiu_da_jie_type_);
    qian_qiu_da_jie_level_.Swap(&other->qian_qiu_da_jie_level_);
    qian_qiu_da_jie_bless_amount_.Swap(&other->qian_qiu_da_jie_bless_amount_);
    qian_qiu_da_jie_bless_amount_clear_time_.Swap(&other->qian_qiu_da_jie_bless_amount_clear_time_);
    qian_qiu_da_jie_qian_neng_use_count_.Swap(&other->qian_qiu_da_jie_qian_neng_use_count_);
    qian_qiu_da_jie_huan_hua_use_count_.Swap(&other->qian_qiu_da_jie_huan_hua_use_count_);
    std::swap(qian_qiu_da_jie_is_hide_, other->qian_qiu_da_jie_is_hide_);
    qian_qiu_da_jie_qian_neng_extra_max_use_count_.Swap(&other->qian_qiu_da_jie_qian_neng_extra_max_use_count_);
    qian_qiu_da_jie_huan_hua_extra_max_use_count_.Swap(&other->qian_qiu_da_jie_huan_hua_extra_max_use_count_);
    qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.Swap(&other->qian_qiu_da_jie_qian_neng_max_use_count_extra_times_);
    qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.Swap(&other->qian_qiu_da_jie_huan_hua_max_use_count_extra_times_);
    std::swap(long_yuan_, other->long_yuan_);
    std::swap(jing_jie_, other->jing_jie_);
    mo_shi_qian_neng_use_count_.Swap(&other->mo_shi_qian_neng_use_count_);
    mo_shi_huan_hua_use_count_.Swap(&other->mo_shi_huan_hua_use_count_);
    mo_shi_qian_neng_extra_max_use_count_.Swap(&other->mo_shi_qian_neng_extra_max_use_count_);
    mo_shi_huan_hua_extra_max_use_count_.Swap(&other->mo_shi_huan_hua_extra_max_use_count_);
    mo_shi_qian_neng_max_use_count_extra_times_.Swap(&other->mo_shi_qian_neng_max_use_count_extra_times_);
    mo_shi_huan_hua_max_use_count_extra_times_.Swap(&other->mo_shi_huan_hua_max_use_count_extra_times_);
    std::swap(chi_huo_shen_gong_jie_shu_, other->chi_huo_shen_gong_jie_shu_);
    std::swap(chi_huo_shen_gong_ceng_shu_, other->chi_huo_shen_gong_ceng_shu_);
    std::swap(chi_huo_shen_gong_bless_amount_, other->chi_huo_shen_gong_bless_amount_);
    std::swap(chi_huo_shen_gong_bless_amount_clear_time_, other->chi_huo_shen_gong_bless_amount_clear_time_);
    std::swap(chi_huo_shen_gong_qian_neng_use_count_, other->chi_huo_shen_gong_qian_neng_use_count_);
    std::swap(chi_huo_shen_gong_huan_hua_use_count_, other->chi_huo_shen_gong_huan_hua_use_count_);
    std::swap(chi_huo_shen_gong_qian_neng_extra_max_use_count_, other->chi_huo_shen_gong_qian_neng_extra_max_use_count_);
    std::swap(chi_huo_shen_gong_huan_hua_extra_max_use_count_, other->chi_huo_shen_gong_huan_hua_extra_max_use_count_);
    std::swap(chi_huo_shen_gong_qian_neng_max_use_count_extra_times_, other->chi_huo_shen_gong_qian_neng_max_use_count_extra_times_);
    std::swap(chi_huo_shen_gong_huan_hua_max_use_count_extra_times_, other->chi_huo_shen_gong_huan_hua_max_use_count_extra_times_);
    std::swap(chi_huo_shen_gong_is_hide_, other->chi_huo_shen_gong_is_hide_);
    std::swap(draw_prize_point_, other->draw_prize_point_);
    std::swap(draw_prize_storage_goods_count_, other->draw_prize_storage_goods_count_);
    draw_prize_exchange_count_.Swap(&other->draw_prize_exchange_count_);
    std::swap(lucky_draw_prize_point_, other->lucky_draw_prize_point_);
    std::swap(lucky_draw_prize_storage_goods_count_, other->lucky_draw_prize_storage_goods_count_);
    std::swap(new_draw_prize_point_, other->new_draw_prize_point_);
    std::swap(new_draw_prize_storage_goods_count_, other->new_draw_prize_storage_goods_count_);
    std::swap(yitianshenjue_info_, other->yitianshenjue_info_);
    std::swap(daily_wheel_count_, other->daily_wheel_count_);
    finished_xin_mo_scene_id_.Swap(&other->finished_xin_mo_scene_id_);
    collected_recharge_rank_promotion_prize_.Swap(&other->collected_recharge_rank_promotion_prize_);
    collected_rank_promotion_prize_.Swap(&other->collected_rank_promotion_prize_);
    std::swap(arena_pair_point_, other->arena_pair_point_);
    std::swap(today_finished_arena_count_, other->today_finished_arena_count_);
    std::swap(arena_shop_point_, other->arena_shop_point_);
    std::swap(arena_collectable_shop_point_, other->arena_collectable_shop_point_);
    std::swap(arena_yesterday_finish_count_, other->arena_yesterday_finish_count_);
    std::swap(arena_yesterday_pair_point_, other->arena_yesterday_pair_point_);
    std::swap(arena_yesterday_original_shop_point_, other->arena_yesterday_original_shop_point_);
    std::swap(arena_shop_point_added_today_by_win_, other->arena_shop_point_added_today_by_win_);
    std::swap(next_can_use_guild_lilian_time_, other->next_can_use_guild_lilian_time_);
    std::swap(guild_dungeon_collected_prize_, other->guild_dungeon_collected_prize_);
    std::swap(super_arm_, other->super_arm_);
    std::swap(demon_, other->demon_);
    std::swap(cloak_, other->cloak_);
    std::swap(pet_combine_added_life_, other->pet_combine_added_life_);
    std::swap(pet_next_can_combine_time_, other->pet_next_can_combine_time_);
    std::swap(gallup_answered_question_count_, other->gallup_answered_question_count_);
    std::swap(gallup_today_answered_question_count_, other->gallup_today_answered_question_count_);
    std::swap(marriage_, other->marriage_);
    std::swap(wash_super_weapon_bless_clear_time_, other->wash_super_weapon_bless_clear_time_);
    std::swap(tian_men_times_, other->tian_men_times_);
    std::swap(has_collect_guild_plant_prize_, other->has_collect_guild_plant_prize_);
    std::swap(hide_city_master_, other->hide_city_master_);
    std::swap(hide_long_city_master_, other->hide_long_city_master_);
    std::swap(p37_vip_prize_count_flag_, other->p37_vip_prize_count_flag_);
    std::swap(last_change_name_time_, other->last_change_name_time_);
    std::swap(next_can_change_race_time_, other->next_can_change_race_time_);
    std::swap(htz_times_, other->htz_times_);
    std::swap(htz_max_destroy_record_, other->htz_max_destroy_record_);
    std::swap(htz_time_record_, other->htz_time_record_);
    limit_count_goods_id_.Swap(&other->limit_count_goods_id_);
    limit_count_goods_use_times_.Swap(&other->limit_count_goods_use_times_);
    single_wash_super_weapon_bless_clear_time_.Swap(&other->single_wash_super_weapon_bless_clear_time_);
    single_wash_super_weapon_bless_type_.Swap(&other->single_wash_super_weapon_bless_type_);
    std::swap(arena_fighting_team_name_bytes_, other->arena_fighting_team_name_bytes_);
    std::swap(arena_fighting_team_shop_point_, other->arena_fighting_team_shop_point_);
    std::swap(arena_fighting_team_shop_point_added_today_by_win_, other->arena_fighting_team_shop_point_added_today_by_win_);
    std::swap(mo_bing_proto_, other->mo_bing_proto_);
    std::swap(use_mount_tongling_id_, other->use_mount_tongling_id_);
    active_mount_tongling_ids_.Swap(&other->active_mount_tongling_ids_);
    std::swap(change_use_mount_tongling_id_cd_time_, other->change_use_mount_tongling_id_cd_time_);
    mount_tongling_wake_value_.Swap(&other->mount_tongling_wake_value_);
    not_save_xun_zhang_random_stat1_.Swap(&other->not_save_xun_zhang_random_stat1_);
    not_save_xun_zhang_random_stat2_.Swap(&other->not_save_xun_zhang_random_stat2_);
    std::swap(finished_collected_fight_amout_changed_value_rank_daily_prize_, other->finished_collected_fight_amout_changed_value_rank_daily_prize_);
    finished_yy_purple_dungeon_count_.Swap(&other->finished_yy_purple_dungeon_count_);
    he_cheng_goods_id_.Swap(&other->he_cheng_goods_id_);
    he_cheng_goods_count_.Swap(&other->he_cheng_goods_count_);
    std::swap(christmas_storage_goods_count_, other->christmas_storage_goods_count_);
    std::swap(credits_, other->credits_);
    std::swap(monopoly_now_cell_id_, other->monopoly_now_cell_id_);
    std::swap(monopoly_now_roll_times_cost_, other->monopoly_now_roll_times_cost_);
    std::swap(monopoly_roll_times_, other->monopoly_roll_times_);
    std::swap(monopoly_buy_roll_times_, other->monopoly_buy_roll_times_);
    std::swap(credits_draw_storage_goods_count_, other->credits_draw_storage_goods_count_);
    std::swap(love_, other->love_);
    std::swap(wu_dao_, other->wu_dao_);
    std::swap(ni_dao_qian_kun_, other->ni_dao_qian_kun_);
    std::swap(finished_tong_tian_ta_dungeon_sequence_, other->finished_tong_tian_ta_dungeon_sequence_);
    std::swap(tong_tian_ta_dungeon_daily_times_, other->tong_tian_ta_dungeon_daily_times_);
    tong_tian_ta_dungeon_use_times_.Swap(&other->tong_tian_ta_dungeon_use_times_);
    std::swap(tong_tian_ta_dungeon_refresh_times_, other->tong_tian_ta_dungeon_refresh_times_);
    std::swap(anniversary_, other->anniversary_);
    firework_color_values_.Swap(&other->firework_color_values_);
    std::swap(firework_promotion_start_time_, other->firework_promotion_start_time_);
    std::swap(firework_promotion_end_time_, other->firework_promotion_end_time_);
    std::swap(anniversary_task_, other->anniversary_task_);
    std::swap(is_gain_huege_data_prize_, other->is_gain_huege_data_prize_);
    std::swap(shield_, other->shield_);
    finished_ling_yun_id_.Swap(&other->finished_ling_yun_id_);
    finished_long_mai_id_.Swap(&other->finished_long_mai_id_);
    finished_zhong_hua_ge_id_.Swap(&other->finished_zhong_hua_ge_id_);
    defence_dungeon_state_.Swap(&other->defence_dungeon_state_);
    std::swap(ling_guang_, other->ling_guang_);
    std::swap(ling_guang_pick_, other->ling_guang_pick_);
    std::swap(mystery_dungeon_use_time_, other->mystery_dungeon_use_time_);
    std::swap(boss_card_, other->boss_card_);
    std::swap(haidi_, other->haidi_);
    std::swap(bow_tong_ling_display_id_, other->bow_tong_ling_display_id_);
    bow_tong_ling_.Swap(&other->bow_tong_ling_);
    std::swap(sys_hong_bao_colleted_time_, other->sys_hong_bao_colleted_time_);
    std::swap(tian_xie_, other->tian_xie_);
    std::swap(jiandao_, other->jiandao_);
    std::swap(lingyu_, other->lingyu_);
    std::swap(fengyundao_, other->fengyundao_);
    pet_tong_ling_.Swap(&other->pet_tong_ling_);
    std::swap(pet_tong_ling_display_id_, other->pet_tong_ling_display_id_);
    pet_tong_ling_single_spell_.Swap(&other->pet_tong_ling_single_spell_);
    std::swap(mo_fang_, other->mo_fang_);
    std::swap(hell_dungeon_enter_count_, other->hell_dungeon_enter_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    std::swap(_has_bits_[4], other->_has_bits_[4]);
    std::swap(_has_bits_[5], other->_has_bits_[5]);
    std::swap(_has_bits_[6], other->_has_bits_[6]);
    std::swap(_has_bits_[7], other->_has_bits_[7]);
    std::swap(_has_bits_[8], other->_has_bits_[8]);
    std::swap(_has_bits_[9], other->_has_bits_[9]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroProto_descriptor_;
  metadata.reflection = HeroProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoFangClientProto::kJieShuFieldNumber;
const int MoFangClientProto::kCengShuFieldNumber;
const int MoFangClientProto::kBlessAmountFieldNumber;
const int MoFangClientProto::kBlessAmountClearTimeFieldNumber;
const int MoFangClientProto::kQianNengUseCountFieldNumber;
const int MoFangClientProto::kHuanHuaUseCountFieldNumber;
const int MoFangClientProto::kQianNengExtraMaxUseCountFieldNumber;
const int MoFangClientProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int MoFangClientProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int MoFangClientProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

MoFangClientProto::MoFangClientProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoFangClientProto::InitAsDefaultInstance() {
}

MoFangClientProto::MoFangClientProto(const MoFangClientProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoFangClientProto::SharedCtor() {
  _cached_size_ = 0;
  jie_shu_ = 0;
  ceng_shu_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoFangClientProto::~MoFangClientProto() {
  SharedDtor();
}

void MoFangClientProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoFangClientProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoFangClientProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoFangClientProto_descriptor_;
}

const MoFangClientProto& MoFangClientProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MoFangClientProto* MoFangClientProto::default_instance_ = NULL;

MoFangClientProto* MoFangClientProto::New() const {
  return new MoFangClientProto;
}

void MoFangClientProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jie_shu_ = 0;
    ceng_shu_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoFangClientProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 jie_shu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jie_shu_)));
          set_has_jie_shu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ceng_shu;
        break;
      }

      // optional int32 ceng_shu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ceng_shu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ceng_shu_)));
          set_has_ceng_shu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoFangClientProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 jie_shu = 1;
  if (has_jie_shu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jie_shu(), output);
  }

  // optional int32 ceng_shu = 2;
  if (has_ceng_shu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ceng_shu(), output);
  }

  // optional int32 bless_amount = 3;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 4;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bless_amount_clear_time(), output);
  }

  // optional int32 qian_neng_use_count = 5;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 6;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->huan_hua_use_count(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 7;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 8;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 9;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 10;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoFangClientProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 jie_shu = 1;
  if (has_jie_shu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jie_shu(), target);
  }

  // optional int32 ceng_shu = 2;
  if (has_ceng_shu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ceng_shu(), target);
  }

  // optional int32 bless_amount = 3;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 4;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bless_amount_clear_time(), target);
  }

  // optional int32 qian_neng_use_count = 5;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 6;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->huan_hua_use_count(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 7;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 8;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 9;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 10;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoFangClientProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 jie_shu = 1;
    if (has_jie_shu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jie_shu());
    }

    // optional int32 ceng_shu = 2;
    if (has_ceng_shu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ceng_shu());
    }

    // optional int32 bless_amount = 3;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 4;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 qian_neng_use_count = 5;
    if (has_qian_neng_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 6;
    if (has_huan_hua_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional int32 qian_neng_extra_max_use_count = 7;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 8;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qian_neng_max_use_count_extra_times = 9;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 10;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoFangClientProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoFangClientProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoFangClientProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoFangClientProto::MergeFrom(const MoFangClientProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jie_shu()) {
      set_jie_shu(from.jie_shu());
    }
    if (from.has_ceng_shu()) {
      set_ceng_shu(from.ceng_shu());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoFangClientProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoFangClientProto::CopyFrom(const MoFangClientProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoFangClientProto::IsInitialized() const {

  return true;
}

void MoFangClientProto::Swap(MoFangClientProto* other) {
  if (other != this) {
    std::swap(jie_shu_, other->jie_shu_);
    std::swap(ceng_shu_, other->ceng_shu_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoFangClientProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoFangClientProto_descriptor_;
  metadata.reflection = MoFangClientProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetTongLingClientProto::kIdFieldNumber;
const int PetTongLingClientProto::kStatFieldNumber;
const int PetTongLingClientProto::kFightAmountFieldNumber;
const int PetTongLingClientProto::kUpgradeTimesFieldNumber;
const int PetTongLingClientProto::kGiftSpellFieldNumber;
#endif  // !_MSC_VER

PetTongLingClientProto::PetTongLingClientProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetTongLingClientProto::InitAsDefaultInstance() {
  stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

PetTongLingClientProto::PetTongLingClientProto(const PetTongLingClientProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetTongLingClientProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  stat_ = NULL;
  fightamount_ = 0;
  upgradetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetTongLingClientProto::~PetTongLingClientProto() {
  SharedDtor();
}

void PetTongLingClientProto::SharedDtor() {
  if (this != default_instance_) {
    delete stat_;
  }
}

void PetTongLingClientProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetTongLingClientProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetTongLingClientProto_descriptor_;
}

const PetTongLingClientProto& PetTongLingClientProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PetTongLingClientProto* PetTongLingClientProto::default_instance_ = NULL;

PetTongLingClientProto* PetTongLingClientProto::New() const {
  return new PetTongLingClientProto;
}

void PetTongLingClientProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_stat()) {
      if (stat_ != NULL) stat_->::app::message::SpriteStatProto::Clear();
    }
    fightamount_ = 0;
    upgradetimes_ = 0;
  }
  gift_spell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetTongLingClientProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stat;
        break;
      }

      // optional .app.message.SpriteStatProto stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightAmount;
        break;
      }

      // optional int32 fightAmount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightamount_)));
          set_has_fightamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_upgradeTimes;
        break;
      }

      // optional int32 upgradeTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradetimes_)));
          set_has_upgradetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gift_spell;
        break;
      }

      // repeated .app.message.PetTongLingGiftSpellClientProto gift_spell = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_spell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_spell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gift_spell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetTongLingClientProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .app.message.SpriteStatProto stat = 2;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat(), output);
  }

  // optional int32 fightAmount = 3;
  if (has_fightamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightamount(), output);
  }

  // optional int32 upgradeTimes = 4;
  if (has_upgradetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradetimes(), output);
  }

  // repeated .app.message.PetTongLingGiftSpellClientProto gift_spell = 5;
  for (int i = 0; i < this->gift_spell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gift_spell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetTongLingClientProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .app.message.SpriteStatProto stat = 2;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stat(), target);
  }

  // optional int32 fightAmount = 3;
  if (has_fightamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightamount(), target);
  }

  // optional int32 upgradeTimes = 4;
  if (has_upgradetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgradetimes(), target);
  }

  // repeated .app.message.PetTongLingGiftSpellClientProto gift_spell = 5;
  for (int i = 0; i < this->gift_spell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gift_spell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetTongLingClientProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .app.message.SpriteStatProto stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat());
    }

    // optional int32 fightAmount = 3;
    if (has_fightamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightamount());
    }

    // optional int32 upgradeTimes = 4;
    if (has_upgradetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradetimes());
    }

  }
  // repeated .app.message.PetTongLingGiftSpellClientProto gift_spell = 5;
  total_size += 1 * this->gift_spell_size();
  for (int i = 0; i < this->gift_spell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_spell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetTongLingClientProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetTongLingClientProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetTongLingClientProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetTongLingClientProto::MergeFrom(const PetTongLingClientProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift_spell_.MergeFrom(from.gift_spell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stat()) {
      mutable_stat()->::app::message::SpriteStatProto::MergeFrom(from.stat());
    }
    if (from.has_fightamount()) {
      set_fightamount(from.fightamount());
    }
    if (from.has_upgradetimes()) {
      set_upgradetimes(from.upgradetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetTongLingClientProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetTongLingClientProto::CopyFrom(const PetTongLingClientProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetTongLingClientProto::IsInitialized() const {

  return true;
}

void PetTongLingClientProto::Swap(PetTongLingClientProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stat_, other->stat_);
    std::swap(fightamount_, other->fightamount_);
    std::swap(upgradetimes_, other->upgradetimes_);
    gift_spell_.Swap(&other->gift_spell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetTongLingClientProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetTongLingClientProto_descriptor_;
  metadata.reflection = PetTongLingClientProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetTongLingGiftSpellClientProto::kPassiveSpellFieldNumber;
const int PetTongLingGiftSpellClientProto::kPassiveSpellExpFieldNumber;
#endif  // !_MSC_VER

PetTongLingGiftSpellClientProto::PetTongLingGiftSpellClientProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetTongLingGiftSpellClientProto::InitAsDefaultInstance() {
  passive_spell_ = const_cast< ::app::message::ActiveSpell*>(&::app::message::ActiveSpell::default_instance());
}

PetTongLingGiftSpellClientProto::PetTongLingGiftSpellClientProto(const PetTongLingGiftSpellClientProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetTongLingGiftSpellClientProto::SharedCtor() {
  _cached_size_ = 0;
  passive_spell_ = NULL;
  passive_spell_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetTongLingGiftSpellClientProto::~PetTongLingGiftSpellClientProto() {
  SharedDtor();
}

void PetTongLingGiftSpellClientProto::SharedDtor() {
  if (this != default_instance_) {
    delete passive_spell_;
  }
}

void PetTongLingGiftSpellClientProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetTongLingGiftSpellClientProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetTongLingGiftSpellClientProto_descriptor_;
}

const PetTongLingGiftSpellClientProto& PetTongLingGiftSpellClientProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PetTongLingGiftSpellClientProto* PetTongLingGiftSpellClientProto::default_instance_ = NULL;

PetTongLingGiftSpellClientProto* PetTongLingGiftSpellClientProto::New() const {
  return new PetTongLingGiftSpellClientProto;
}

void PetTongLingGiftSpellClientProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_passive_spell()) {
      if (passive_spell_ != NULL) passive_spell_->::app::message::ActiveSpell::Clear();
    }
    passive_spell_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetTongLingGiftSpellClientProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.ActiveSpell passive_spell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passive_spell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_passive_spell_exp;
        break;
      }

      // optional int32 passive_spell_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passive_spell_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passive_spell_exp_)));
          set_has_passive_spell_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetTongLingGiftSpellClientProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.ActiveSpell passive_spell = 1;
  if (has_passive_spell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->passive_spell(), output);
  }

  // optional int32 passive_spell_exp = 2;
  if (has_passive_spell_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->passive_spell_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetTongLingGiftSpellClientProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.ActiveSpell passive_spell = 1;
  if (has_passive_spell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->passive_spell(), target);
  }

  // optional int32 passive_spell_exp = 2;
  if (has_passive_spell_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->passive_spell_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetTongLingGiftSpellClientProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.ActiveSpell passive_spell = 1;
    if (has_passive_spell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passive_spell());
    }

    // optional int32 passive_spell_exp = 2;
    if (has_passive_spell_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passive_spell_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetTongLingGiftSpellClientProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetTongLingGiftSpellClientProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetTongLingGiftSpellClientProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetTongLingGiftSpellClientProto::MergeFrom(const PetTongLingGiftSpellClientProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passive_spell()) {
      mutable_passive_spell()->::app::message::ActiveSpell::MergeFrom(from.passive_spell());
    }
    if (from.has_passive_spell_exp()) {
      set_passive_spell_exp(from.passive_spell_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetTongLingGiftSpellClientProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetTongLingGiftSpellClientProto::CopyFrom(const PetTongLingGiftSpellClientProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetTongLingGiftSpellClientProto::IsInitialized() const {

  return true;
}

void PetTongLingGiftSpellClientProto::Swap(PetTongLingGiftSpellClientProto* other) {
  if (other != this) {
    std::swap(passive_spell_, other->passive_spell_);
    std::swap(passive_spell_exp_, other->passive_spell_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetTongLingGiftSpellClientProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetTongLingGiftSpellClientProto_descriptor_;
  metadata.reflection = PetTongLingGiftSpellClientProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetTongLingSingleSpellClientProto::kSpellFieldNumber;
const int PetTongLingSingleSpellClientProto::kSequenceFieldNumber;
#endif  // !_MSC_VER

PetTongLingSingleSpellClientProto::PetTongLingSingleSpellClientProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetTongLingSingleSpellClientProto::InitAsDefaultInstance() {
  spell_ = const_cast< ::app::message::ActiveSpell*>(&::app::message::ActiveSpell::default_instance());
}

PetTongLingSingleSpellClientProto::PetTongLingSingleSpellClientProto(const PetTongLingSingleSpellClientProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetTongLingSingleSpellClientProto::SharedCtor() {
  _cached_size_ = 0;
  spell_ = NULL;
  sequence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetTongLingSingleSpellClientProto::~PetTongLingSingleSpellClientProto() {
  SharedDtor();
}

void PetTongLingSingleSpellClientProto::SharedDtor() {
  if (this != default_instance_) {
    delete spell_;
  }
}

void PetTongLingSingleSpellClientProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetTongLingSingleSpellClientProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetTongLingSingleSpellClientProto_descriptor_;
}

const PetTongLingSingleSpellClientProto& PetTongLingSingleSpellClientProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PetTongLingSingleSpellClientProto* PetTongLingSingleSpellClientProto::default_instance_ = NULL;

PetTongLingSingleSpellClientProto* PetTongLingSingleSpellClientProto::New() const {
  return new PetTongLingSingleSpellClientProto;
}

void PetTongLingSingleSpellClientProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spell()) {
      if (spell_ != NULL) spell_->::app::message::ActiveSpell::Clear();
    }
    sequence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetTongLingSingleSpellClientProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.ActiveSpell spell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional int32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetTongLingSingleSpellClientProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.ActiveSpell spell = 1;
  if (has_spell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spell(), output);
  }

  // optional int32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetTongLingSingleSpellClientProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.ActiveSpell spell = 1;
  if (has_spell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spell(), target);
  }

  // optional int32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetTongLingSingleSpellClientProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.ActiveSpell spell = 1;
    if (has_spell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spell());
    }

    // optional int32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetTongLingSingleSpellClientProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetTongLingSingleSpellClientProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetTongLingSingleSpellClientProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetTongLingSingleSpellClientProto::MergeFrom(const PetTongLingSingleSpellClientProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spell()) {
      mutable_spell()->::app::message::ActiveSpell::MergeFrom(from.spell());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetTongLingSingleSpellClientProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetTongLingSingleSpellClientProto::CopyFrom(const PetTongLingSingleSpellClientProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetTongLingSingleSpellClientProto::IsInitialized() const {

  return true;
}

void PetTongLingSingleSpellClientProto::Swap(PetTongLingSingleSpellClientProto* other) {
  if (other != this) {
    std::swap(spell_, other->spell_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetTongLingSingleSpellClientProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetTongLingSingleSpellClientProto_descriptor_;
  metadata.reflection = PetTongLingSingleSpellClientProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BowTongLingClientProto::kIdFieldNumber;
const int BowTongLingClientProto::kStatFieldNumber;
const int BowTongLingClientProto::kFightAmountFieldNumber;
const int BowTongLingClientProto::kUpgradeTimesFieldNumber;
#endif  // !_MSC_VER

BowTongLingClientProto::BowTongLingClientProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BowTongLingClientProto::InitAsDefaultInstance() {
  stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

BowTongLingClientProto::BowTongLingClientProto(const BowTongLingClientProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BowTongLingClientProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  stat_ = NULL;
  fightamount_ = 0;
  upgradetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BowTongLingClientProto::~BowTongLingClientProto() {
  SharedDtor();
}

void BowTongLingClientProto::SharedDtor() {
  if (this != default_instance_) {
    delete stat_;
  }
}

void BowTongLingClientProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BowTongLingClientProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BowTongLingClientProto_descriptor_;
}

const BowTongLingClientProto& BowTongLingClientProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

BowTongLingClientProto* BowTongLingClientProto::default_instance_ = NULL;

BowTongLingClientProto* BowTongLingClientProto::New() const {
  return new BowTongLingClientProto;
}

void BowTongLingClientProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_stat()) {
      if (stat_ != NULL) stat_->::app::message::SpriteStatProto::Clear();
    }
    fightamount_ = 0;
    upgradetimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BowTongLingClientProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stat;
        break;
      }

      // optional .app.message.SpriteStatProto stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightAmount;
        break;
      }

      // optional int32 fightAmount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightamount_)));
          set_has_fightamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_upgradeTimes;
        break;
      }

      // optional int32 upgradeTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradetimes_)));
          set_has_upgradetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BowTongLingClientProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .app.message.SpriteStatProto stat = 2;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat(), output);
  }

  // optional int32 fightAmount = 3;
  if (has_fightamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightamount(), output);
  }

  // optional int32 upgradeTimes = 4;
  if (has_upgradetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BowTongLingClientProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .app.message.SpriteStatProto stat = 2;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stat(), target);
  }

  // optional int32 fightAmount = 3;
  if (has_fightamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightamount(), target);
  }

  // optional int32 upgradeTimes = 4;
  if (has_upgradetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgradetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BowTongLingClientProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .app.message.SpriteStatProto stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat());
    }

    // optional int32 fightAmount = 3;
    if (has_fightamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightamount());
    }

    // optional int32 upgradeTimes = 4;
    if (has_upgradetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BowTongLingClientProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BowTongLingClientProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BowTongLingClientProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BowTongLingClientProto::MergeFrom(const BowTongLingClientProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stat()) {
      mutable_stat()->::app::message::SpriteStatProto::MergeFrom(from.stat());
    }
    if (from.has_fightamount()) {
      set_fightamount(from.fightamount());
    }
    if (from.has_upgradetimes()) {
      set_upgradetimes(from.upgradetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BowTongLingClientProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BowTongLingClientProto::CopyFrom(const BowTongLingClientProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BowTongLingClientProto::IsInitialized() const {

  return true;
}

void BowTongLingClientProto::Swap(BowTongLingClientProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stat_, other->stat_);
    std::swap(fightamount_, other->fightamount_);
    std::swap(upgradetimes_, other->upgradetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BowTongLingClientProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BowTongLingClientProto_descriptor_;
  metadata.reflection = BowTongLingClientProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FengYunDaoRankProto_FengYunDaoRankData::kIdFieldNumber;
const int FengYunDaoRankProto_FengYunDaoRankData::kNameFieldNumber;
const int FengYunDaoRankProto_FengYunDaoRankData::kPassFieldNumber;
const int FengYunDaoRankProto_FengYunDaoRankData::kUseTimeFieldNumber;
#endif  // !_MSC_VER

FengYunDaoRankProto_FengYunDaoRankData::FengYunDaoRankProto_FengYunDaoRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FengYunDaoRankProto_FengYunDaoRankData::InitAsDefaultInstance() {
}

FengYunDaoRankProto_FengYunDaoRankData::FengYunDaoRankProto_FengYunDaoRankData(const FengYunDaoRankProto_FengYunDaoRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FengYunDaoRankProto_FengYunDaoRankData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pass_ = 0;
  usetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FengYunDaoRankProto_FengYunDaoRankData::~FengYunDaoRankProto_FengYunDaoRankData() {
  SharedDtor();
}

void FengYunDaoRankProto_FengYunDaoRankData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FengYunDaoRankProto_FengYunDaoRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FengYunDaoRankProto_FengYunDaoRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FengYunDaoRankProto_FengYunDaoRankData_descriptor_;
}

const FengYunDaoRankProto_FengYunDaoRankData& FengYunDaoRankProto_FengYunDaoRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

FengYunDaoRankProto_FengYunDaoRankData* FengYunDaoRankProto_FengYunDaoRankData::default_instance_ = NULL;

FengYunDaoRankProto_FengYunDaoRankData* FengYunDaoRankProto_FengYunDaoRankData::New() const {
  return new FengYunDaoRankProto_FengYunDaoRankData;
}

void FengYunDaoRankProto_FengYunDaoRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pass_ = 0;
    usetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FengYunDaoRankProto_FengYunDaoRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass;
        break;
      }

      // optional int32 pass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useTime;
        break;
      }

      // optional int32 useTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FengYunDaoRankProto_FengYunDaoRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 pass = 3;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass(), output);
  }

  // optional int32 useTime = 4;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FengYunDaoRankProto_FengYunDaoRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 pass = 3;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass(), target);
  }

  // optional int32 useTime = 4;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FengYunDaoRankProto_FengYunDaoRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 pass = 3;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 useTime = 4;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FengYunDaoRankProto_FengYunDaoRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FengYunDaoRankProto_FengYunDaoRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FengYunDaoRankProto_FengYunDaoRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FengYunDaoRankProto_FengYunDaoRankData::MergeFrom(const FengYunDaoRankProto_FengYunDaoRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FengYunDaoRankProto_FengYunDaoRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FengYunDaoRankProto_FengYunDaoRankData::CopyFrom(const FengYunDaoRankProto_FengYunDaoRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FengYunDaoRankProto_FengYunDaoRankData::IsInitialized() const {

  return true;
}

void FengYunDaoRankProto_FengYunDaoRankData::Swap(FengYunDaoRankProto_FengYunDaoRankData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pass_, other->pass_);
    std::swap(usetime_, other->usetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FengYunDaoRankProto_FengYunDaoRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FengYunDaoRankProto_FengYunDaoRankData_descriptor_;
  metadata.reflection = FengYunDaoRankProto_FengYunDaoRankData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FengYunDaoRankProto::kRankFieldNumber;
#endif  // !_MSC_VER

FengYunDaoRankProto::FengYunDaoRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FengYunDaoRankProto::InitAsDefaultInstance() {
}

FengYunDaoRankProto::FengYunDaoRankProto(const FengYunDaoRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FengYunDaoRankProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FengYunDaoRankProto::~FengYunDaoRankProto() {
  SharedDtor();
}

void FengYunDaoRankProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FengYunDaoRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FengYunDaoRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FengYunDaoRankProto_descriptor_;
}

const FengYunDaoRankProto& FengYunDaoRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

FengYunDaoRankProto* FengYunDaoRankProto::default_instance_ = NULL;

FengYunDaoRankProto* FengYunDaoRankProto::New() const {
  return new FengYunDaoRankProto;
}

void FengYunDaoRankProto::Clear() {
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FengYunDaoRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.FengYunDaoRankProto.FengYunDaoRankData rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FengYunDaoRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.FengYunDaoRankProto.FengYunDaoRankData rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FengYunDaoRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.FengYunDaoRankProto.FengYunDaoRankData rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FengYunDaoRankProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.FengYunDaoRankProto.FengYunDaoRankData rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FengYunDaoRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FengYunDaoRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FengYunDaoRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FengYunDaoRankProto::MergeFrom(const FengYunDaoRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FengYunDaoRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FengYunDaoRankProto::CopyFrom(const FengYunDaoRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FengYunDaoRankProto::IsInitialized() const {

  return true;
}

void FengYunDaoRankProto::Swap(FengYunDaoRankProto* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FengYunDaoRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FengYunDaoRankProto_descriptor_;
  metadata.reflection = FengYunDaoRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FengYunDaoProto::kDailyTimesFieldNumber;
const int FengYunDaoProto::kDailyBuyTimesFieldNumber;
const int FengYunDaoProto::kFirstIndexFieldNumber;
const int FengYunDaoProto::kCurIndexFieldNumber;
const int FengYunDaoProto::kChallengeKeepFieldNumber;
#endif  // !_MSC_VER

FengYunDaoProto::FengYunDaoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FengYunDaoProto::InitAsDefaultInstance() {
}

FengYunDaoProto::FengYunDaoProto(const FengYunDaoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FengYunDaoProto::SharedCtor() {
  _cached_size_ = 0;
  dailytimes_ = 0;
  dailybuytimes_ = 0;
  firstindex_ = 0;
  curindex_ = 0;
  challengekeep_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FengYunDaoProto::~FengYunDaoProto() {
  SharedDtor();
}

void FengYunDaoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FengYunDaoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FengYunDaoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FengYunDaoProto_descriptor_;
}

const FengYunDaoProto& FengYunDaoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

FengYunDaoProto* FengYunDaoProto::default_instance_ = NULL;

FengYunDaoProto* FengYunDaoProto::New() const {
  return new FengYunDaoProto;
}

void FengYunDaoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dailytimes_ = 0;
    dailybuytimes_ = 0;
    firstindex_ = 0;
    curindex_ = 0;
    challengekeep_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FengYunDaoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dailyTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailytimes_)));
          set_has_dailytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dailyBuyTimes;
        break;
      }

      // optional int32 dailyBuyTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyBuyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailybuytimes_)));
          set_has_dailybuytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_firstIndex;
        break;
      }

      // optional int32 firstIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstindex_)));
          set_has_firstindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curIndex;
        break;
      }

      // optional int32 curIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curindex_)));
          set_has_curindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challengeKeep;
        break;
      }

      // optional bool challengeKeep = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeKeep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &challengekeep_)));
          set_has_challengekeep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FengYunDaoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dailyTimes = 1;
  if (has_dailytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dailytimes(), output);
  }

  // optional int32 dailyBuyTimes = 2;
  if (has_dailybuytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dailybuytimes(), output);
  }

  // optional int32 firstIndex = 3;
  if (has_firstindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->firstindex(), output);
  }

  // optional int32 curIndex = 4;
  if (has_curindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curindex(), output);
  }

  // optional bool challengeKeep = 5;
  if (has_challengekeep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->challengekeep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FengYunDaoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dailyTimes = 1;
  if (has_dailytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dailytimes(), target);
  }

  // optional int32 dailyBuyTimes = 2;
  if (has_dailybuytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dailybuytimes(), target);
  }

  // optional int32 firstIndex = 3;
  if (has_firstindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->firstindex(), target);
  }

  // optional int32 curIndex = 4;
  if (has_curindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curindex(), target);
  }

  // optional bool challengeKeep = 5;
  if (has_challengekeep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->challengekeep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FengYunDaoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dailyTimes = 1;
    if (has_dailytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailytimes());
    }

    // optional int32 dailyBuyTimes = 2;
    if (has_dailybuytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailybuytimes());
    }

    // optional int32 firstIndex = 3;
    if (has_firstindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstindex());
    }

    // optional int32 curIndex = 4;
    if (has_curindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curindex());
    }

    // optional bool challengeKeep = 5;
    if (has_challengekeep()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FengYunDaoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FengYunDaoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FengYunDaoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FengYunDaoProto::MergeFrom(const FengYunDaoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dailytimes()) {
      set_dailytimes(from.dailytimes());
    }
    if (from.has_dailybuytimes()) {
      set_dailybuytimes(from.dailybuytimes());
    }
    if (from.has_firstindex()) {
      set_firstindex(from.firstindex());
    }
    if (from.has_curindex()) {
      set_curindex(from.curindex());
    }
    if (from.has_challengekeep()) {
      set_challengekeep(from.challengekeep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FengYunDaoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FengYunDaoProto::CopyFrom(const FengYunDaoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FengYunDaoProto::IsInitialized() const {

  return true;
}

void FengYunDaoProto::Swap(FengYunDaoProto* other) {
  if (other != this) {
    std::swap(dailytimes_, other->dailytimes_);
    std::swap(dailybuytimes_, other->dailybuytimes_);
    std::swap(firstindex_, other->firstindex_);
    std::swap(curindex_, other->curindex_);
    std::swap(challengekeep_, other->challengekeep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FengYunDaoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FengYunDaoProto_descriptor_;
  metadata.reflection = FengYunDaoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroYuYiGeProtos::kOnShowSequenceFieldNumber;
const int HeroYuYiGeProtos::kProtosFieldNumber;
const int HeroYuYiGeProtos::kIsHideFieldNumber;
#endif  // !_MSC_VER

HeroYuYiGeProtos::HeroYuYiGeProtos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroYuYiGeProtos::InitAsDefaultInstance() {
}

HeroYuYiGeProtos::HeroYuYiGeProtos(const HeroYuYiGeProtos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroYuYiGeProtos::SharedCtor() {
  _cached_size_ = 0;
  on_show_sequence_ = 0;
  is_hide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroYuYiGeProtos::~HeroYuYiGeProtos() {
  SharedDtor();
}

void HeroYuYiGeProtos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroYuYiGeProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroYuYiGeProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroYuYiGeProtos_descriptor_;
}

const HeroYuYiGeProtos& HeroYuYiGeProtos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroYuYiGeProtos* HeroYuYiGeProtos::default_instance_ = NULL;

HeroYuYiGeProtos* HeroYuYiGeProtos::New() const {
  return new HeroYuYiGeProtos;
}

void HeroYuYiGeProtos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    on_show_sequence_ = 0;
    is_hide_ = false;
  }
  protos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroYuYiGeProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 on_show_sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &on_show_sequence_)));
          set_has_on_show_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_protos;
        break;
      }

      // repeated .app.message.HeroYuYiGeProto protos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_protos;
        if (input->ExpectTag(24)) goto parse_is_hide;
        break;
      }

      // optional bool is_hide = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_)));
          set_has_is_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroYuYiGeProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 on_show_sequence = 1;
  if (has_on_show_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->on_show_sequence(), output);
  }

  // repeated .app.message.HeroYuYiGeProto protos = 2;
  for (int i = 0; i < this->protos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->protos(i), output);
  }

  // optional bool is_hide = 3;
  if (has_is_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_hide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroYuYiGeProtos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 on_show_sequence = 1;
  if (has_on_show_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->on_show_sequence(), target);
  }

  // repeated .app.message.HeroYuYiGeProto protos = 2;
  for (int i = 0; i < this->protos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->protos(i), target);
  }

  // optional bool is_hide = 3;
  if (has_is_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_hide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroYuYiGeProtos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 on_show_sequence = 1;
    if (has_on_show_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->on_show_sequence());
    }

    // optional bool is_hide = 3;
    if (has_is_hide()) {
      total_size += 1 + 1;
    }

  }
  // repeated .app.message.HeroYuYiGeProto protos = 2;
  total_size += 1 * this->protos_size();
  for (int i = 0; i < this->protos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroYuYiGeProtos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroYuYiGeProtos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroYuYiGeProtos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroYuYiGeProtos::MergeFrom(const HeroYuYiGeProtos& from) {
  GOOGLE_CHECK_NE(&from, this);
  protos_.MergeFrom(from.protos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on_show_sequence()) {
      set_on_show_sequence(from.on_show_sequence());
    }
    if (from.has_is_hide()) {
      set_is_hide(from.is_hide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroYuYiGeProtos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroYuYiGeProtos::CopyFrom(const HeroYuYiGeProtos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroYuYiGeProtos::IsInitialized() const {

  return true;
}

void HeroYuYiGeProtos::Swap(HeroYuYiGeProtos* other) {
  if (other != this) {
    std::swap(on_show_sequence_, other->on_show_sequence_);
    protos_.Swap(&other->protos_);
    std::swap(is_hide_, other->is_hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroYuYiGeProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroYuYiGeProtos_descriptor_;
  metadata.reflection = HeroYuYiGeProtos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroYuYiGeProto::kSequenceFieldNumber;
const int HeroYuYiGeProto::kFashionFieldNumber;
const int HeroYuYiGeProto::kFashionDataFieldNumber;
const int HeroYuYiGeProto::kLevelFieldNumber;
const int HeroYuYiGeProto::kIsUseBlessAmountFieldNumber;
const int HeroYuYiGeProto::kBlessAmountFieldNumber;
const int HeroYuYiGeProto::kBlessAmountClearTimeFieldNumber;
const int HeroYuYiGeProto::kBlessLvFieldNumber;
#endif  // !_MSC_VER

HeroYuYiGeProto::HeroYuYiGeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroYuYiGeProto::InitAsDefaultInstance() {
  fashion_ = const_cast< ::app::message::EquipmentProto*>(&::app::message::EquipmentProto::default_instance());
  fashion_data_ = const_cast< ::app::message::EquipmentDataProto*>(&::app::message::EquipmentDataProto::default_instance());
}

HeroYuYiGeProto::HeroYuYiGeProto(const HeroYuYiGeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroYuYiGeProto::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = 0;
  fashion_ = NULL;
  fashion_data_ = NULL;
  level_ = 0;
  is_use_bless_amount_ = false;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  blesslv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroYuYiGeProto::~HeroYuYiGeProto() {
  SharedDtor();
}

void HeroYuYiGeProto::SharedDtor() {
  if (this != default_instance_) {
    delete fashion_;
    delete fashion_data_;
  }
}

void HeroYuYiGeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroYuYiGeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroYuYiGeProto_descriptor_;
}

const HeroYuYiGeProto& HeroYuYiGeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroYuYiGeProto* HeroYuYiGeProto::default_instance_ = NULL;

HeroYuYiGeProto* HeroYuYiGeProto::New() const {
  return new HeroYuYiGeProto;
}

void HeroYuYiGeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_ = 0;
    if (has_fashion()) {
      if (fashion_ != NULL) fashion_->::app::message::EquipmentProto::Clear();
    }
    if (has_fashion_data()) {
      if (fashion_data_ != NULL) fashion_data_->::app::message::EquipmentDataProto::Clear();
    }
    level_ = 0;
    is_use_bless_amount_ = false;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    blesslv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroYuYiGeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fashion;
        break;
      }

      // optional .app.message.EquipmentProto fashion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fashion_data;
        break;
      }

      // optional .app.message.EquipmentDataProto fashion_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_use_bless_amount;
        break;
      }

      // optional bool is_use_bless_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_use_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_use_bless_amount_)));
          set_has_is_use_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_blessLv;
        break;
      }

      // optional int32 blessLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blesslv_)));
          set_has_blesslv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroYuYiGeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence(), output);
  }

  // optional .app.message.EquipmentProto fashion = 2;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fashion(), output);
  }

  // optional .app.message.EquipmentDataProto fashion_data = 3;
  if (has_fashion_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fashion_data(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional bool is_use_bless_amount = 5;
  if (has_is_use_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_use_bless_amount(), output);
  }

  // optional int32 bless_amount = 6;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 7;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bless_amount_clear_time(), output);
  }

  // optional int32 blessLv = 8;
  if (has_blesslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blesslv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroYuYiGeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence(), target);
  }

  // optional .app.message.EquipmentProto fashion = 2;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fashion(), target);
  }

  // optional .app.message.EquipmentDataProto fashion_data = 3;
  if (has_fashion_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fashion_data(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional bool is_use_bless_amount = 5;
  if (has_is_use_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_use_bless_amount(), target);
  }

  // optional int32 bless_amount = 6;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 7;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->bless_amount_clear_time(), target);
  }

  // optional int32 blessLv = 8;
  if (has_blesslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->blesslv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroYuYiGeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional .app.message.EquipmentProto fashion = 2;
    if (has_fashion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion());
    }

    // optional .app.message.EquipmentDataProto fashion_data = 3;
    if (has_fashion_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion_data());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool is_use_bless_amount = 5;
    if (has_is_use_bless_amount()) {
      total_size += 1 + 1;
    }

    // optional int32 bless_amount = 6;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 7;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 blessLv = 8;
    if (has_blesslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blesslv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroYuYiGeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroYuYiGeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroYuYiGeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroYuYiGeProto::MergeFrom(const HeroYuYiGeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_fashion()) {
      mutable_fashion()->::app::message::EquipmentProto::MergeFrom(from.fashion());
    }
    if (from.has_fashion_data()) {
      mutable_fashion_data()->::app::message::EquipmentDataProto::MergeFrom(from.fashion_data());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_use_bless_amount()) {
      set_is_use_bless_amount(from.is_use_bless_amount());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_blesslv()) {
      set_blesslv(from.blesslv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroYuYiGeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroYuYiGeProto::CopyFrom(const HeroYuYiGeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroYuYiGeProto::IsInitialized() const {

  return true;
}

void HeroYuYiGeProto::Swap(HeroYuYiGeProto* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(fashion_, other->fashion_);
    std::swap(fashion_data_, other->fashion_data_);
    std::swap(level_, other->level_);
    std::swap(is_use_bless_amount_, other->is_use_bless_amount_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(blesslv_, other->blesslv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroYuYiGeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroYuYiGeProto_descriptor_;
  metadata.reflection = HeroYuYiGeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroWelfareCompensationProto_WelfareCompensationProto::kIndexFieldNumber;
const int HeroWelfareCompensationProto_WelfareCompensationProto::kTitleFieldNumber;
const int HeroWelfareCompensationProto_WelfareCompensationProto::kContentFieldNumber;
const int HeroWelfareCompensationProto_WelfareCompensationProto::kPrizeFieldNumber;
#endif  // !_MSC_VER

HeroWelfareCompensationProto_WelfareCompensationProto::HeroWelfareCompensationProto_WelfareCompensationProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroWelfareCompensationProto_WelfareCompensationProto::InitAsDefaultInstance() {
  prize_ = const_cast< ::app::message::PrizeProto*>(&::app::message::PrizeProto::default_instance());
}

HeroWelfareCompensationProto_WelfareCompensationProto::HeroWelfareCompensationProto_WelfareCompensationProto(const HeroWelfareCompensationProto_WelfareCompensationProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroWelfareCompensationProto_WelfareCompensationProto::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_LONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroWelfareCompensationProto_WelfareCompensationProto::~HeroWelfareCompensationProto_WelfareCompensationProto() {
  SharedDtor();
}

void HeroWelfareCompensationProto_WelfareCompensationProto::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete prize_;
  }
}

void HeroWelfareCompensationProto_WelfareCompensationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroWelfareCompensationProto_WelfareCompensationProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroWelfareCompensationProto_WelfareCompensationProto_descriptor_;
}

const HeroWelfareCompensationProto_WelfareCompensationProto& HeroWelfareCompensationProto_WelfareCompensationProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroWelfareCompensationProto_WelfareCompensationProto* HeroWelfareCompensationProto_WelfareCompensationProto::default_instance_ = NULL;

HeroWelfareCompensationProto_WelfareCompensationProto* HeroWelfareCompensationProto_WelfareCompensationProto::New() const {
  return new HeroWelfareCompensationProto_WelfareCompensationProto;
}

void HeroWelfareCompensationProto_WelfareCompensationProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = GOOGLE_LONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_prize()) {
      if (prize_ != NULL) prize_->::app::message::PrizeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroWelfareCompensationProto_WelfareCompensationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize;
        break;
      }

      // optional .app.message.PrizeProto prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroWelfareCompensationProto_WelfareCompensationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional .app.message.PrizeProto prize = 4;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroWelfareCompensationProto_WelfareCompensationProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional .app.message.PrizeProto prize = 4;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroWelfareCompensationProto_WelfareCompensationProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .app.message.PrizeProto prize = 4;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroWelfareCompensationProto_WelfareCompensationProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroWelfareCompensationProto_WelfareCompensationProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroWelfareCompensationProto_WelfareCompensationProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroWelfareCompensationProto_WelfareCompensationProto::MergeFrom(const HeroWelfareCompensationProto_WelfareCompensationProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_prize()) {
      mutable_prize()->::app::message::PrizeProto::MergeFrom(from.prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroWelfareCompensationProto_WelfareCompensationProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroWelfareCompensationProto_WelfareCompensationProto::CopyFrom(const HeroWelfareCompensationProto_WelfareCompensationProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroWelfareCompensationProto_WelfareCompensationProto::IsInitialized() const {

  return true;
}

void HeroWelfareCompensationProto_WelfareCompensationProto::Swap(HeroWelfareCompensationProto_WelfareCompensationProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(prize_, other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroWelfareCompensationProto_WelfareCompensationProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroWelfareCompensationProto_WelfareCompensationProto_descriptor_;
  metadata.reflection = HeroWelfareCompensationProto_WelfareCompensationProto_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HeroWelfareCompensationProto::kWelfareFieldNumber;
const int HeroWelfareCompensationProto::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

HeroWelfareCompensationProto::HeroWelfareCompensationProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroWelfareCompensationProto::InitAsDefaultInstance() {
  welfare_ = const_cast< ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto*>(&::app::message::HeroWelfareCompensationProto_WelfareCompensationProto::default_instance());
}

HeroWelfareCompensationProto::HeroWelfareCompensationProto(const HeroWelfareCompensationProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroWelfareCompensationProto::SharedCtor() {
  _cached_size_ = 0;
  welfare_ = NULL;
  expiretime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroWelfareCompensationProto::~HeroWelfareCompensationProto() {
  SharedDtor();
}

void HeroWelfareCompensationProto::SharedDtor() {
  if (this != default_instance_) {
    delete welfare_;
  }
}

void HeroWelfareCompensationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroWelfareCompensationProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroWelfareCompensationProto_descriptor_;
}

const HeroWelfareCompensationProto& HeroWelfareCompensationProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroWelfareCompensationProto* HeroWelfareCompensationProto::default_instance_ = NULL;

HeroWelfareCompensationProto* HeroWelfareCompensationProto::New() const {
  return new HeroWelfareCompensationProto;
}

void HeroWelfareCompensationProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_welfare()) {
      if (welfare_ != NULL) welfare_->::app::message::HeroWelfareCompensationProto_WelfareCompensationProto::Clear();
    }
    expiretime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroWelfareCompensationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.HeroWelfareCompensationProto.WelfareCompensationProto welfare = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_welfare()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expireTime;
        break;
      }

      // optional int64 expireTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroWelfareCompensationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.HeroWelfareCompensationProto.WelfareCompensationProto welfare = 1;
  if (has_welfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->welfare(), output);
  }

  // optional int64 expireTime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroWelfareCompensationProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.HeroWelfareCompensationProto.WelfareCompensationProto welfare = 1;
  if (has_welfare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->welfare(), target);
  }

  // optional int64 expireTime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroWelfareCompensationProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.HeroWelfareCompensationProto.WelfareCompensationProto welfare = 1;
    if (has_welfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->welfare());
    }

    // optional int64 expireTime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiretime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroWelfareCompensationProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroWelfareCompensationProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroWelfareCompensationProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroWelfareCompensationProto::MergeFrom(const HeroWelfareCompensationProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_welfare()) {
      mutable_welfare()->::app::message::HeroWelfareCompensationProto_WelfareCompensationProto::MergeFrom(from.welfare());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroWelfareCompensationProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroWelfareCompensationProto::CopyFrom(const HeroWelfareCompensationProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroWelfareCompensationProto::IsInitialized() const {

  return true;
}

void HeroWelfareCompensationProto::Swap(HeroWelfareCompensationProto* other) {
  if (other != this) {
    std::swap(welfare_, other->welfare_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroWelfareCompensationProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroWelfareCompensationProto_descriptor_;
  metadata.reflection = HeroWelfareCompensationProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LingYuProto::kIndexFieldNumber;
const int LingYuProto::kTypeLevelFieldNumber;
const int LingYuProto::kUsingTypeFieldNumber;
const int LingYuProto::kBlessAmountFieldNumber;
const int LingYuProto::kBlessAmountClearTimeFieldNumber;
const int LingYuProto::kQianNengUseCountFieldNumber;
const int LingYuProto::kHuanHuaUseCountFieldNumber;
const int LingYuProto::kUpgradeTimesFieldNumber;
const int LingYuProto::kQianNengExtraMaxUseCountFieldNumber;
const int LingYuProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int LingYuProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int LingYuProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

LingYuProto::LingYuProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LingYuProto::InitAsDefaultInstance() {
}

LingYuProto::LingYuProto(const LingYuProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LingYuProto::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  usingtype_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  upgrade_times_ = 0;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LingYuProto::~LingYuProto() {
  SharedDtor();
}

void LingYuProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LingYuProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LingYuProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LingYuProto_descriptor_;
}

const LingYuProto& LingYuProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

LingYuProto* LingYuProto::default_instance_ = NULL;

LingYuProto* LingYuProto::New() const {
  return new LingYuProto;
}

void LingYuProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    usingtype_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    upgrade_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  typelevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LingYuProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_typeLevel;
        break;
      }

      // repeated int32 typeLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_typelevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_typelevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_typeLevel;
        if (input->ExpectTag(24)) goto parse_usingType;
        break;
      }

      // optional int32 usingType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usingtype_)));
          set_has_usingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_upgrade_times;
        break;
      }

      // optional int32 upgrade_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_times_)));
          set_has_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LingYuProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated int32 typeLevel = 2;
  for (int i = 0; i < this->typelevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->typelevel(i), output);
  }

  // optional int32 usingType = 3;
  if (has_usingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usingtype(), output);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bless_amount_clear_time(), output);
  }

  // optional int32 qian_neng_use_count = 12;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 13;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->huan_hua_use_count(), output);
  }

  // optional int32 upgrade_times = 14;
  if (has_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->upgrade_times(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 15;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 16;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 17;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 18;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LingYuProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated int32 typeLevel = 2;
  for (int i = 0; i < this->typelevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->typelevel(i), target);
  }

  // optional int32 usingType = 3;
  if (has_usingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usingtype(), target);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bless_amount_clear_time(), target);
  }

  // optional int32 qian_neng_use_count = 12;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 13;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->huan_hua_use_count(), target);
  }

  // optional int32 upgrade_times = 14;
  if (has_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->upgrade_times(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 15;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 16;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 17;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 18;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LingYuProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 usingType = 3;
    if (has_usingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usingtype());
    }

    // optional int32 bless_amount = 10;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 11;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 qian_neng_use_count = 12;
    if (has_qian_neng_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 13;
    if (has_huan_hua_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional int32 upgrade_times = 14;
    if (has_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qian_neng_extra_max_use_count = 15;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 16;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 17;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 18;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 typeLevel = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->typelevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->typelevel(i));
    }
    total_size += 1 * this->typelevel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LingYuProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LingYuProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LingYuProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LingYuProto::MergeFrom(const LingYuProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  typelevel_.MergeFrom(from.typelevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_usingtype()) {
      set_usingtype(from.usingtype());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_upgrade_times()) {
      set_upgrade_times(from.upgrade_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LingYuProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LingYuProto::CopyFrom(const LingYuProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LingYuProto::IsInitialized() const {

  return true;
}

void LingYuProto::Swap(LingYuProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    typelevel_.Swap(&other->typelevel_);
    std::swap(usingtype_, other->usingtype_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(upgrade_times_, other->upgrade_times_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LingYuProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LingYuProto_descriptor_;
  metadata.reflection = LingYuProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TongTianBaoJianTaskProto::kIdFieldNumber;
const int TongTianBaoJianTaskProto::kTaskNameFieldNumber;
const int TongTianBaoJianTaskProto::kGoalTargetFieldNumber;
const int TongTianBaoJianTaskProto::kDescFieldNumber;
const int TongTianBaoJianTaskProto::kTypeFieldNumber;
#endif  // !_MSC_VER

TongTianBaoJianTaskProto::TongTianBaoJianTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TongTianBaoJianTaskProto::InitAsDefaultInstance() {
}

TongTianBaoJianTaskProto::TongTianBaoJianTaskProto(const TongTianBaoJianTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TongTianBaoJianTaskProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goal_target_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongTianBaoJianTaskProto::~TongTianBaoJianTaskProto() {
  SharedDtor();
}

void TongTianBaoJianTaskProto::SharedDtor() {
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void TongTianBaoJianTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TongTianBaoJianTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TongTianBaoJianTaskProto_descriptor_;
}

const TongTianBaoJianTaskProto& TongTianBaoJianTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

TongTianBaoJianTaskProto* TongTianBaoJianTaskProto::default_instance_ = NULL;

TongTianBaoJianTaskProto* TongTianBaoJianTaskProto::New() const {
  return new TongTianBaoJianTaskProto;
}

void TongTianBaoJianTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_task_name()) {
      if (task_name_ != &::google::protobuf::internal::kEmptyString) {
        task_name_->clear();
      }
    }
    goal_target_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TongTianBaoJianTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_name;
        break;
      }

      // optional string task_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_name().data(), this->task_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goal_target;
        break;
      }

      // optional int32 goal_target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goal_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_target_)));
          set_has_goal_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TongTianBaoJianTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string task_name = 2;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_name(), output);
  }

  // optional int32 goal_target = 3;
  if (has_goal_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_target(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TongTianBaoJianTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string task_name = 2;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_name(), target);
  }

  // optional int32 goal_target = 3;
  if (has_goal_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_target(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TongTianBaoJianTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string task_name = 2;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional int32 goal_target = 3;
    if (has_goal_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_target());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongTianBaoJianTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TongTianBaoJianTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TongTianBaoJianTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TongTianBaoJianTaskProto::MergeFrom(const TongTianBaoJianTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_task_name()) {
      set_task_name(from.task_name());
    }
    if (from.has_goal_target()) {
      set_goal_target(from.goal_target());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TongTianBaoJianTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TongTianBaoJianTaskProto::CopyFrom(const TongTianBaoJianTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongTianBaoJianTaskProto::IsInitialized() const {

  return true;
}

void TongTianBaoJianTaskProto::Swap(TongTianBaoJianTaskProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(task_name_, other->task_name_);
    std::swap(goal_target_, other->goal_target_);
    std::swap(desc_, other->desc_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TongTianBaoJianTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TongTianBaoJianTaskProto_descriptor_;
  metadata.reflection = TongTianBaoJianTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DefenceDungeonStateClientProto::kDungeonIdFieldNumber;
const int DefenceDungeonStateClientProto::kDefenceTodayFinishedBatchFieldNumber;
const int DefenceDungeonStateClientProto::kDefenceHistoryMaxBatchFieldNumber;
const int DefenceDungeonStateClientProto::kDefenceCollectedFirstPassPrizeFieldNumber;
const int DefenceDungeonStateClientProto::kDefenceCollectablePrizeFieldNumber;
#endif  // !_MSC_VER

DefenceDungeonStateClientProto::DefenceDungeonStateClientProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DefenceDungeonStateClientProto::InitAsDefaultInstance() {
}

DefenceDungeonStateClientProto::DefenceDungeonStateClientProto(const DefenceDungeonStateClientProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DefenceDungeonStateClientProto::SharedCtor() {
  _cached_size_ = 0;
  dungeon_id_ = 0;
  defence_today_finished_batch_ = 0;
  defence_history_max_batch_ = 0;
  defence_collected_first_pass_prize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefenceDungeonStateClientProto::~DefenceDungeonStateClientProto() {
  SharedDtor();
}

void DefenceDungeonStateClientProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DefenceDungeonStateClientProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefenceDungeonStateClientProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefenceDungeonStateClientProto_descriptor_;
}

const DefenceDungeonStateClientProto& DefenceDungeonStateClientProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

DefenceDungeonStateClientProto* DefenceDungeonStateClientProto::default_instance_ = NULL;

DefenceDungeonStateClientProto* DefenceDungeonStateClientProto::New() const {
  return new DefenceDungeonStateClientProto;
}

void DefenceDungeonStateClientProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeon_id_ = 0;
    defence_today_finished_batch_ = 0;
    defence_history_max_batch_ = 0;
    defence_collected_first_pass_prize_ = 0;
  }
  defence_collectable_prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefenceDungeonStateClientProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dungeon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defence_today_finished_batch;
        break;
      }

      // optional int32 defence_today_finished_batch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_today_finished_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_today_finished_batch_)));
          set_has_defence_today_finished_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defence_history_max_batch;
        break;
      }

      // optional int32 defence_history_max_batch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_history_max_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_history_max_batch_)));
          set_has_defence_history_max_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defence_collected_first_pass_prize;
        break;
      }

      // optional int32 defence_collected_first_pass_prize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_collected_first_pass_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_collected_first_pass_prize_)));
          set_has_defence_collected_first_pass_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_defence_collectable_prize;
        break;
      }

      // repeated bytes defence_collectable_prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence_collectable_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_defence_collectable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_defence_collectable_prize;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefenceDungeonStateClientProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeon_id(), output);
  }

  // optional int32 defence_today_finished_batch = 2;
  if (has_defence_today_finished_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->defence_today_finished_batch(), output);
  }

  // optional int32 defence_history_max_batch = 3;
  if (has_defence_history_max_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defence_history_max_batch(), output);
  }

  // optional int32 defence_collected_first_pass_prize = 5;
  if (has_defence_collected_first_pass_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defence_collected_first_pass_prize(), output);
  }

  // repeated bytes defence_collectable_prize = 6;
  for (int i = 0; i < this->defence_collectable_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->defence_collectable_prize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefenceDungeonStateClientProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeon_id(), target);
  }

  // optional int32 defence_today_finished_batch = 2;
  if (has_defence_today_finished_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->defence_today_finished_batch(), target);
  }

  // optional int32 defence_history_max_batch = 3;
  if (has_defence_history_max_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defence_history_max_batch(), target);
  }

  // optional int32 defence_collected_first_pass_prize = 5;
  if (has_defence_collected_first_pass_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defence_collected_first_pass_prize(), target);
  }

  // repeated bytes defence_collectable_prize = 6;
  for (int i = 0; i < this->defence_collectable_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->defence_collectable_prize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefenceDungeonStateClientProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dungeon_id = 1;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // optional int32 defence_today_finished_batch = 2;
    if (has_defence_today_finished_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_today_finished_batch());
    }

    // optional int32 defence_history_max_batch = 3;
    if (has_defence_history_max_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_history_max_batch());
    }

    // optional int32 defence_collected_first_pass_prize = 5;
    if (has_defence_collected_first_pass_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_collected_first_pass_prize());
    }

  }
  // repeated bytes defence_collectable_prize = 6;
  total_size += 1 * this->defence_collectable_prize_size();
  for (int i = 0; i < this->defence_collectable_prize_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->defence_collectable_prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefenceDungeonStateClientProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefenceDungeonStateClientProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefenceDungeonStateClientProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefenceDungeonStateClientProto::MergeFrom(const DefenceDungeonStateClientProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  defence_collectable_prize_.MergeFrom(from.defence_collectable_prize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_defence_today_finished_batch()) {
      set_defence_today_finished_batch(from.defence_today_finished_batch());
    }
    if (from.has_defence_history_max_batch()) {
      set_defence_history_max_batch(from.defence_history_max_batch());
    }
    if (from.has_defence_collected_first_pass_prize()) {
      set_defence_collected_first_pass_prize(from.defence_collected_first_pass_prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefenceDungeonStateClientProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefenceDungeonStateClientProto::CopyFrom(const DefenceDungeonStateClientProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefenceDungeonStateClientProto::IsInitialized() const {

  return true;
}

void DefenceDungeonStateClientProto::Swap(DefenceDungeonStateClientProto* other) {
  if (other != this) {
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(defence_today_finished_batch_, other->defence_today_finished_batch_);
    std::swap(defence_history_max_batch_, other->defence_history_max_batch_);
    std::swap(defence_collected_first_pass_prize_, other->defence_collected_first_pass_prize_);
    defence_collectable_prize_.Swap(&other->defence_collectable_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefenceDungeonStateClientProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefenceDungeonStateClientProto_descriptor_;
  metadata.reflection = DefenceDungeonStateClientProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDataProto::kTotalLoginDayFieldNumber;
const int HugeDataProto::kTotalLoginTimeFieldNumber;
const int HugeDataProto::kFightingAmountFieldNumber;
const int HugeDataProto::kTotalAuctionYuanbaoFieldNumber;
const int HugeDataProto::kTotalLongChengFieldNumber;
const int HugeDataProto::kTotalWuShuangFieldNumber;
const int HugeDataProto::kLevelFieldNumber;
const int HugeDataProto::kEnemyNumFieldNumber;
const int HugeDataProto::kTotalLingDiFieldNumber;
const int HugeDataProto::kCreateTimeFieldNumber;
const int HugeDataProto::kHugeDataPrizeFieldNumber;
#endif  // !_MSC_VER

HugeDataProto::HugeDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HugeDataProto::InitAsDefaultInstance() {
  huge_data_prize_ = const_cast< ::app::message::GoodsWrapperProto*>(&::app::message::GoodsWrapperProto::default_instance());
}

HugeDataProto::HugeDataProto(const HugeDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HugeDataProto::SharedCtor() {
  _cached_size_ = 0;
  total_login_day_ = 0;
  total_login_time_ = 0;
  fighting_amount_ = 0;
  total_auction_yuanbao_ = 0;
  total_long_cheng_ = 0;
  total_wu_shuang_ = 0;
  level_ = 0;
  enemy_num_ = 0;
  total_ling_di_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  huge_data_prize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDataProto::~HugeDataProto() {
  SharedDtor();
}

void HugeDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete huge_data_prize_;
  }
}

void HugeDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDataProto_descriptor_;
}

const HugeDataProto& HugeDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HugeDataProto* HugeDataProto::default_instance_ = NULL;

HugeDataProto* HugeDataProto::New() const {
  return new HugeDataProto;
}

void HugeDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_login_day_ = 0;
    total_login_time_ = 0;
    fighting_amount_ = 0;
    total_auction_yuanbao_ = 0;
    total_long_cheng_ = 0;
    total_wu_shuang_ = 0;
    level_ = 0;
    enemy_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_ling_di_ = 0;
    create_time_ = GOOGLE_LONGLONG(0);
    if (has_huge_data_prize()) {
      if (huge_data_prize_ != NULL) huge_data_prize_->::app::message::GoodsWrapperProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_login_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_login_day_)));
          set_has_total_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_login_time;
        break;
      }

      // optional int32 total_login_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_login_time_)));
          set_has_total_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fighting_amount;
        break;
      }

      // optional int32 fighting_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_amount_)));
          set_has_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_auction_yuanbao;
        break;
      }

      // optional int32 total_auction_yuanbao = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_auction_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_auction_yuanbao_)));
          set_has_total_auction_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_long_cheng;
        break;
      }

      // optional int32 total_long_cheng = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_long_cheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_long_cheng_)));
          set_has_total_long_cheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_wu_shuang;
        break;
      }

      // optional int32 total_wu_shuang = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_wu_shuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_wu_shuang_)));
          set_has_total_wu_shuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_enemy_num;
        break;
      }

      // optional int32 enemy_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_num_)));
          set_has_enemy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_ling_di;
        break;
      }

      // optional int32 total_ling_di = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_ling_di:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_ling_di_)));
          set_has_total_ling_di();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_huge_data_prize;
        break;
      }

      // optional .app.message.GoodsWrapperProto huge_data_prize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_huge_data_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_huge_data_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HugeDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_login_day = 1;
  if (has_total_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_login_day(), output);
  }

  // optional int32 total_login_time = 2;
  if (has_total_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_login_time(), output);
  }

  // optional int32 fighting_amount = 3;
  if (has_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fighting_amount(), output);
  }

  // optional int32 total_auction_yuanbao = 4;
  if (has_total_auction_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_auction_yuanbao(), output);
  }

  // optional int32 total_long_cheng = 5;
  if (has_total_long_cheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_long_cheng(), output);
  }

  // optional int32 total_wu_shuang = 6;
  if (has_total_wu_shuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_wu_shuang(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 enemy_num = 8;
  if (has_enemy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->enemy_num(), output);
  }

  // optional int32 total_ling_di = 9;
  if (has_total_ling_di()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->total_ling_di(), output);
  }

  // optional int64 create_time = 10;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->create_time(), output);
  }

  // optional .app.message.GoodsWrapperProto huge_data_prize = 11;
  if (has_huge_data_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->huge_data_prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HugeDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_login_day = 1;
  if (has_total_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_login_day(), target);
  }

  // optional int32 total_login_time = 2;
  if (has_total_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_login_time(), target);
  }

  // optional int32 fighting_amount = 3;
  if (has_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fighting_amount(), target);
  }

  // optional int32 total_auction_yuanbao = 4;
  if (has_total_auction_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_auction_yuanbao(), target);
  }

  // optional int32 total_long_cheng = 5;
  if (has_total_long_cheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_long_cheng(), target);
  }

  // optional int32 total_wu_shuang = 6;
  if (has_total_wu_shuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_wu_shuang(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 enemy_num = 8;
  if (has_enemy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->enemy_num(), target);
  }

  // optional int32 total_ling_di = 9;
  if (has_total_ling_di()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->total_ling_di(), target);
  }

  // optional int64 create_time = 10;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->create_time(), target);
  }

  // optional .app.message.GoodsWrapperProto huge_data_prize = 11;
  if (has_huge_data_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->huge_data_prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HugeDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_login_day = 1;
    if (has_total_login_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_login_day());
    }

    // optional int32 total_login_time = 2;
    if (has_total_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_login_time());
    }

    // optional int32 fighting_amount = 3;
    if (has_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting_amount());
    }

    // optional int32 total_auction_yuanbao = 4;
    if (has_total_auction_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_auction_yuanbao());
    }

    // optional int32 total_long_cheng = 5;
    if (has_total_long_cheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_long_cheng());
    }

    // optional int32 total_wu_shuang = 6;
    if (has_total_wu_shuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_wu_shuang());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 enemy_num = 8;
    if (has_enemy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 total_ling_di = 9;
    if (has_total_ling_di()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_ling_di());
    }

    // optional int64 create_time = 10;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional .app.message.GoodsWrapperProto huge_data_prize = 11;
    if (has_huge_data_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->huge_data_prize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDataProto::MergeFrom(const HugeDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_login_day()) {
      set_total_login_day(from.total_login_day());
    }
    if (from.has_total_login_time()) {
      set_total_login_time(from.total_login_time());
    }
    if (from.has_fighting_amount()) {
      set_fighting_amount(from.fighting_amount());
    }
    if (from.has_total_auction_yuanbao()) {
      set_total_auction_yuanbao(from.total_auction_yuanbao());
    }
    if (from.has_total_long_cheng()) {
      set_total_long_cheng(from.total_long_cheng());
    }
    if (from.has_total_wu_shuang()) {
      set_total_wu_shuang(from.total_wu_shuang());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_enemy_num()) {
      set_enemy_num(from.enemy_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_ling_di()) {
      set_total_ling_di(from.total_ling_di());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_huge_data_prize()) {
      mutable_huge_data_prize()->::app::message::GoodsWrapperProto::MergeFrom(from.huge_data_prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDataProto::CopyFrom(const HugeDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDataProto::IsInitialized() const {

  return true;
}

void HugeDataProto::Swap(HugeDataProto* other) {
  if (other != this) {
    std::swap(total_login_day_, other->total_login_day_);
    std::swap(total_login_time_, other->total_login_time_);
    std::swap(fighting_amount_, other->fighting_amount_);
    std::swap(total_auction_yuanbao_, other->total_auction_yuanbao_);
    std::swap(total_long_cheng_, other->total_long_cheng_);
    std::swap(total_wu_shuang_, other->total_wu_shuang_);
    std::swap(level_, other->level_);
    std::swap(enemy_num_, other->enemy_num_);
    std::swap(total_ling_di_, other->total_ling_di_);
    std::swap(create_time_, other->create_time_);
    std::swap(huge_data_prize_, other->huge_data_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDataProto_descriptor_;
  metadata.reflection = HugeDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NiDaoQianKunClient::kSpriteStatFieldNumber;
const int NiDaoQianKunClient::kTotalUseCountFieldNumber;
#endif  // !_MSC_VER

NiDaoQianKunClient::NiDaoQianKunClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NiDaoQianKunClient::InitAsDefaultInstance() {
  sprite_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

NiDaoQianKunClient::NiDaoQianKunClient(const NiDaoQianKunClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NiDaoQianKunClient::SharedCtor() {
  _cached_size_ = 0;
  sprite_stat_ = NULL;
  total_use_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NiDaoQianKunClient::~NiDaoQianKunClient() {
  SharedDtor();
}

void NiDaoQianKunClient::SharedDtor() {
  if (this != default_instance_) {
    delete sprite_stat_;
  }
}

void NiDaoQianKunClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NiDaoQianKunClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NiDaoQianKunClient_descriptor_;
}

const NiDaoQianKunClient& NiDaoQianKunClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

NiDaoQianKunClient* NiDaoQianKunClient::default_instance_ = NULL;

NiDaoQianKunClient* NiDaoQianKunClient::New() const {
  return new NiDaoQianKunClient;
}

void NiDaoQianKunClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sprite_stat()) {
      if (sprite_stat_ != NULL) sprite_stat_->::app::message::SpriteStatProto::Clear();
    }
    total_use_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NiDaoQianKunClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.SpriteStatProto sprite_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_use_count;
        break;
      }

      // optional int32 total_use_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_use_count_)));
          set_has_total_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NiDaoQianKunClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.SpriteStatProto sprite_stat = 1;
  if (has_sprite_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sprite_stat(), output);
  }

  // optional int32 total_use_count = 2;
  if (has_total_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_use_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NiDaoQianKunClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.SpriteStatProto sprite_stat = 1;
  if (has_sprite_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sprite_stat(), target);
  }

  // optional int32 total_use_count = 2;
  if (has_total_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_use_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NiDaoQianKunClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.SpriteStatProto sprite_stat = 1;
    if (has_sprite_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sprite_stat());
    }

    // optional int32 total_use_count = 2;
    if (has_total_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_use_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NiDaoQianKunClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NiDaoQianKunClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NiDaoQianKunClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NiDaoQianKunClient::MergeFrom(const NiDaoQianKunClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sprite_stat()) {
      mutable_sprite_stat()->::app::message::SpriteStatProto::MergeFrom(from.sprite_stat());
    }
    if (from.has_total_use_count()) {
      set_total_use_count(from.total_use_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NiDaoQianKunClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NiDaoQianKunClient::CopyFrom(const NiDaoQianKunClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NiDaoQianKunClient::IsInitialized() const {

  return true;
}

void NiDaoQianKunClient::Swap(NiDaoQianKunClient* other) {
  if (other != this) {
    std::swap(sprite_stat_, other->sprite_stat_);
    std::swap(total_use_count_, other->total_use_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NiDaoQianKunClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NiDaoQianKunClient_descriptor_;
  metadata.reflection = NiDaoQianKunClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoBingProto::kMoBingStatFieldNumber;
const int MoBingProto::kMoBingEquipTypeFieldNumber;
const int MoBingProto::kSpellPointFieldNumber;
const int MoBingProto::kStartTimeFieldNumber;
const int MoBingProto::kEndTimeFieldNumber;
const int MoBingProto::kHasCollectPrizeTodayFieldNumber;
#endif  // !_MSC_VER

MoBingProto::MoBingProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoBingProto::InitAsDefaultInstance() {
}

MoBingProto::MoBingProto(const MoBingProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoBingProto::SharedCtor() {
  _cached_size_ = 0;
  spell_point_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  has_collect_prize_today_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoBingProto::~MoBingProto() {
  SharedDtor();
}

void MoBingProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoBingProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoBingProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoBingProto_descriptor_;
}

const MoBingProto& MoBingProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MoBingProto* MoBingProto::default_instance_ = NULL;

MoBingProto* MoBingProto::New() const {
  return new MoBingProto;
}

void MoBingProto::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    spell_point_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    has_collect_prize_today_ = false;
  }
  mo_bing_stat_.Clear();
  mo_bing_equip_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoBingProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.MoBingStatProto mo_bing_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mo_bing_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mo_bing_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mo_bing_stat;
        if (input->ExpectTag(16)) goto parse_mo_bing_equip_type;
        break;
      }

      // repeated int32 mo_bing_equip_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_bing_equip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mo_bing_equip_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_bing_equip_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mo_bing_equip_type;
        if (input->ExpectTag(24)) goto parse_spell_point;
        break;
      }

      // optional int32 spell_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_point_)));
          set_has_spell_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_has_collect_prize_today;
        break;
      }

      // optional bool has_collect_prize_today = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_collect_prize_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_collect_prize_today_)));
          set_has_has_collect_prize_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoBingProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.MoBingStatProto mo_bing_stat = 1;
  for (int i = 0; i < this->mo_bing_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mo_bing_stat(i), output);
  }

  // repeated int32 mo_bing_equip_type = 2;
  for (int i = 0; i < this->mo_bing_equip_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mo_bing_equip_type(i), output);
  }

  // optional int32 spell_point = 3;
  if (has_spell_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spell_point(), output);
  }

  // optional int64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_time(), output);
  }

  // optional int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  // optional bool has_collect_prize_today = 6;
  if (has_has_collect_prize_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_collect_prize_today(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoBingProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.MoBingStatProto mo_bing_stat = 1;
  for (int i = 0; i < this->mo_bing_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mo_bing_stat(i), target);
  }

  // repeated int32 mo_bing_equip_type = 2;
  for (int i = 0; i < this->mo_bing_equip_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mo_bing_equip_type(i), target);
  }

  // optional int32 spell_point = 3;
  if (has_spell_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spell_point(), target);
  }

  // optional int64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_time(), target);
  }

  // optional int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  // optional bool has_collect_prize_today = 6;
  if (has_has_collect_prize_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_collect_prize_today(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoBingProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 spell_point = 3;
    if (has_spell_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_point());
    }

    // optional int64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional bool has_collect_prize_today = 6;
    if (has_has_collect_prize_today()) {
      total_size += 1 + 1;
    }

  }
  // repeated .app.message.MoBingStatProto mo_bing_stat = 1;
  total_size += 1 * this->mo_bing_stat_size();
  for (int i = 0; i < this->mo_bing_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mo_bing_stat(i));
  }

  // repeated int32 mo_bing_equip_type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_bing_equip_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_bing_equip_type(i));
    }
    total_size += 1 * this->mo_bing_equip_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoBingProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoBingProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoBingProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoBingProto::MergeFrom(const MoBingProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mo_bing_stat_.MergeFrom(from.mo_bing_stat_);
  mo_bing_equip_type_.MergeFrom(from.mo_bing_equip_type_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_spell_point()) {
      set_spell_point(from.spell_point());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_has_collect_prize_today()) {
      set_has_collect_prize_today(from.has_collect_prize_today());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoBingProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoBingProto::CopyFrom(const MoBingProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoBingProto::IsInitialized() const {

  return true;
}

void MoBingProto::Swap(MoBingProto* other) {
  if (other != this) {
    mo_bing_stat_.Swap(&other->mo_bing_stat_);
    mo_bing_equip_type_.Swap(&other->mo_bing_equip_type_);
    std::swap(spell_point_, other->spell_point_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(has_collect_prize_today_, other->has_collect_prize_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoBingProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoBingProto_descriptor_;
  metadata.reflection = MoBingProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoBingStatProto::kTypeFieldNumber;
const int MoBingStatProto::kLevelFieldNumber;
const int MoBingStatProto::kSpellTypeFieldNumber;
const int MoBingStatProto::kSpellLevelFieldNumber;
const int MoBingStatProto::kBlessProtoFieldNumber;
#endif  // !_MSC_VER

MoBingStatProto::MoBingStatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoBingStatProto::InitAsDefaultInstance() {
  bless_proto_ = const_cast< ::app::message::MoBingBlessProto*>(&::app::message::MoBingBlessProto::default_instance());
}

MoBingStatProto::MoBingStatProto(const MoBingStatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoBingStatProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  bless_proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoBingStatProto::~MoBingStatProto() {
  SharedDtor();
}

void MoBingStatProto::SharedDtor() {
  if (this != default_instance_) {
    delete bless_proto_;
  }
}

void MoBingStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoBingStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoBingStatProto_descriptor_;
}

const MoBingStatProto& MoBingStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MoBingStatProto* MoBingStatProto::default_instance_ = NULL;

MoBingStatProto* MoBingStatProto::New() const {
  return new MoBingStatProto;
}

void MoBingStatProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
    if (has_bless_proto()) {
      if (bless_proto_ != NULL) bless_proto_->::app::message::MoBingBlessProto::Clear();
    }
  }
  spell_type_.Clear();
  spell_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoBingStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spell_type;
        break;
      }

      // repeated int32 spell_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_spell_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spell_type;
        if (input->ExpectTag(32)) goto parse_spell_level;
        break;
      }

      // repeated int32 spell_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_spell_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_spell_level;
        if (input->ExpectTag(42)) goto parse_bless_proto;
        break;
      }

      // optional .app.message.MoBingBlessProto bless_proto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bless_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bless_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoBingStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated int32 spell_type = 3;
  for (int i = 0; i < this->spell_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->spell_type(i), output);
  }

  // repeated int32 spell_level = 4;
  for (int i = 0; i < this->spell_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->spell_level(i), output);
  }

  // optional .app.message.MoBingBlessProto bless_proto = 5;
  if (has_bless_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bless_proto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoBingStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated int32 spell_type = 3;
  for (int i = 0; i < this->spell_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->spell_type(i), target);
  }

  // repeated int32 spell_level = 4;
  for (int i = 0; i < this->spell_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->spell_level(i), target);
  }

  // optional .app.message.MoBingBlessProto bless_proto = 5;
  if (has_bless_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bless_proto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoBingStatProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .app.message.MoBingBlessProto bless_proto = 5;
    if (has_bless_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bless_proto());
    }

  }
  // repeated int32 spell_type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_type(i));
    }
    total_size += 1 * this->spell_type_size() + data_size;
  }

  // repeated int32 spell_level = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_level(i));
    }
    total_size += 1 * this->spell_level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoBingStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoBingStatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoBingStatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoBingStatProto::MergeFrom(const MoBingStatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  spell_type_.MergeFrom(from.spell_type_);
  spell_level_.MergeFrom(from.spell_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_bless_proto()) {
      mutable_bless_proto()->::app::message::MoBingBlessProto::MergeFrom(from.bless_proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoBingStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoBingStatProto::CopyFrom(const MoBingStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoBingStatProto::IsInitialized() const {

  return true;
}

void MoBingStatProto::Swap(MoBingStatProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    spell_type_.Swap(&other->spell_type_);
    spell_level_.Swap(&other->spell_level_);
    std::swap(bless_proto_, other->bless_proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoBingStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoBingStatProto_descriptor_;
  metadata.reflection = MoBingStatProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoBingBlessProto::kUpgradeTimesFieldNumber;
const int MoBingBlessProto::kBlessAmountFieldNumber;
const int MoBingBlessProto::kBlessAmountClearTimeFieldNumber;
const int MoBingBlessProto::kBlessHisMaxAmountFieldNumber;
const int MoBingBlessProto::kAddBlessClearTimeCountFieldNumber;
#endif  // !_MSC_VER

MoBingBlessProto::MoBingBlessProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoBingBlessProto::InitAsDefaultInstance() {
}

MoBingBlessProto::MoBingBlessProto(const MoBingBlessProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoBingBlessProto::SharedCtor() {
  _cached_size_ = 0;
  upgrade_times_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  bless_his_max_amount_ = 0;
  add_bless_clear_time_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoBingBlessProto::~MoBingBlessProto() {
  SharedDtor();
}

void MoBingBlessProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoBingBlessProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoBingBlessProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoBingBlessProto_descriptor_;
}

const MoBingBlessProto& MoBingBlessProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MoBingBlessProto* MoBingBlessProto::default_instance_ = NULL;

MoBingBlessProto* MoBingBlessProto::New() const {
  return new MoBingBlessProto;
}

void MoBingBlessProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upgrade_times_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    bless_his_max_amount_ = 0;
    add_bless_clear_time_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoBingBlessProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 upgrade_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_times_)));
          set_has_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bless_his_max_amount;
        break;
      }

      // optional int32 bless_his_max_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_his_max_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_his_max_amount_)));
          set_has_bless_his_max_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_bless_clear_time_count;
        break;
      }

      // optional int32 add_bless_clear_time_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_bless_clear_time_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_bless_clear_time_count_)));
          set_has_add_bless_clear_time_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoBingBlessProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 upgrade_times = 1;
  if (has_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upgrade_times(), output);
  }

  // optional int32 bless_amount = 2;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 3;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bless_amount_clear_time(), output);
  }

  // optional int32 bless_his_max_amount = 4;
  if (has_bless_his_max_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bless_his_max_amount(), output);
  }

  // optional int32 add_bless_clear_time_count = 5;
  if (has_add_bless_clear_time_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_bless_clear_time_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoBingBlessProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 upgrade_times = 1;
  if (has_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upgrade_times(), target);
  }

  // optional int32 bless_amount = 2;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 3;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bless_amount_clear_time(), target);
  }

  // optional int32 bless_his_max_amount = 4;
  if (has_bless_his_max_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bless_his_max_amount(), target);
  }

  // optional int32 add_bless_clear_time_count = 5;
  if (has_add_bless_clear_time_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_bless_clear_time_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoBingBlessProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 upgrade_times = 1;
    if (has_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_times());
    }

    // optional int32 bless_amount = 2;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 3;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 bless_his_max_amount = 4;
    if (has_bless_his_max_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_his_max_amount());
    }

    // optional int32 add_bless_clear_time_count = 5;
    if (has_add_bless_clear_time_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_bless_clear_time_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoBingBlessProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoBingBlessProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoBingBlessProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoBingBlessProto::MergeFrom(const MoBingBlessProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade_times()) {
      set_upgrade_times(from.upgrade_times());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_bless_his_max_amount()) {
      set_bless_his_max_amount(from.bless_his_max_amount());
    }
    if (from.has_add_bless_clear_time_count()) {
      set_add_bless_clear_time_count(from.add_bless_clear_time_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoBingBlessProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoBingBlessProto::CopyFrom(const MoBingBlessProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoBingBlessProto::IsInitialized() const {

  return true;
}

void MoBingBlessProto::Swap(MoBingBlessProto* other) {
  if (other != this) {
    std::swap(upgrade_times_, other->upgrade_times_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(bless_his_max_amount_, other->bless_his_max_amount_);
    std::swap(add_bless_clear_time_count_, other->add_bless_clear_time_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoBingBlessProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoBingBlessProto_descriptor_;
  metadata.reflection = MoBingBlessProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DaoShiProto::kRedisBigKeyFieldNumber;
const int DaoShiProto::kHasAppliedFieldNumber;
const int DaoShiProto::kIsDaoShiFieldNumber;
const int DaoShiProto::kLoginDaysFieldNumber;
const int DaoShiProto::kHasCollectedLoginPrizeFieldNumber;
const int DaoShiProto::kCanCollectWuShuangCityPrizeFieldNumber;
const int DaoShiProto::kHasCollectedWuShuangCityPrizeFieldNumber;
const int DaoShiProto::kCanCollectLongCityPrizeFieldNumber;
const int DaoShiProto::kHasCollectedLongCityPrizeFieldNumber;
#endif  // !_MSC_VER

DaoShiProto::DaoShiProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DaoShiProto::InitAsDefaultInstance() {
}

DaoShiProto::DaoShiProto(const DaoShiProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DaoShiProto::SharedCtor() {
  _cached_size_ = 0;
  redis_big_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_applied_ = false;
  is_dao_shi_ = false;
  login_days_ = 0;
  has_collected_login_prize_ = false;
  can_collect_wu_shuang_city_prize_ = false;
  has_collected_wu_shuang_city_prize_ = false;
  can_collect_long_city_prize_ = false;
  has_collected_long_city_prize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DaoShiProto::~DaoShiProto() {
  SharedDtor();
}

void DaoShiProto::SharedDtor() {
  if (redis_big_key_ != &::google::protobuf::internal::kEmptyString) {
    delete redis_big_key_;
  }
  if (this != default_instance_) {
  }
}

void DaoShiProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DaoShiProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaoShiProto_descriptor_;
}

const DaoShiProto& DaoShiProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

DaoShiProto* DaoShiProto::default_instance_ = NULL;

DaoShiProto* DaoShiProto::New() const {
  return new DaoShiProto;
}

void DaoShiProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_redis_big_key()) {
      if (redis_big_key_ != &::google::protobuf::internal::kEmptyString) {
        redis_big_key_->clear();
      }
    }
    has_applied_ = false;
    is_dao_shi_ = false;
    login_days_ = 0;
    has_collected_login_prize_ = false;
    can_collect_wu_shuang_city_prize_ = false;
    has_collected_wu_shuang_city_prize_ = false;
    can_collect_long_city_prize_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    has_collected_long_city_prize_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DaoShiProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes redis_big_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_redis_big_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_has_applied;
        break;
      }

      // optional bool has_applied = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_applied_)));
          set_has_has_applied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_dao_shi;
        break;
      }

      // optional bool is_dao_shi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dao_shi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dao_shi_)));
          set_has_is_dao_shi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_days;
        break;
      }

      // optional int32 login_days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_days_)));
          set_has_login_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_has_collected_login_prize;
        break;
      }

      // optional bool has_collected_login_prize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_collected_login_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_collected_login_prize_)));
          set_has_has_collected_login_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_collect_wu_shuang_city_prize;
        break;
      }

      // optional bool can_collect_wu_shuang_city_prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_collect_wu_shuang_city_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_collect_wu_shuang_city_prize_)));
          set_has_can_collect_wu_shuang_city_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_collected_wu_shuang_city_prize;
        break;
      }

      // optional bool has_collected_wu_shuang_city_prize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_collected_wu_shuang_city_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_collected_wu_shuang_city_prize_)));
          set_has_has_collected_wu_shuang_city_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_can_collect_long_city_prize;
        break;
      }

      // optional bool can_collect_long_city_prize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_collect_long_city_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_collect_long_city_prize_)));
          set_has_can_collect_long_city_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_has_collected_long_city_prize;
        break;
      }

      // optional bool has_collected_long_city_prize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_collected_long_city_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_collected_long_city_prize_)));
          set_has_has_collected_long_city_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DaoShiProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes redis_big_key = 1;
  if (has_redis_big_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->redis_big_key(), output);
  }

  // optional bool has_applied = 2;
  if (has_has_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_applied(), output);
  }

  // optional bool is_dao_shi = 3;
  if (has_is_dao_shi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dao_shi(), output);
  }

  // optional int32 login_days = 4;
  if (has_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->login_days(), output);
  }

  // optional bool has_collected_login_prize = 5;
  if (has_has_collected_login_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_collected_login_prize(), output);
  }

  // optional bool can_collect_wu_shuang_city_prize = 6;
  if (has_can_collect_wu_shuang_city_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_collect_wu_shuang_city_prize(), output);
  }

  // optional bool has_collected_wu_shuang_city_prize = 7;
  if (has_has_collected_wu_shuang_city_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_collected_wu_shuang_city_prize(), output);
  }

  // optional bool can_collect_long_city_prize = 8;
  if (has_can_collect_long_city_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->can_collect_long_city_prize(), output);
  }

  // optional bool has_collected_long_city_prize = 9;
  if (has_has_collected_long_city_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_collected_long_city_prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DaoShiProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes redis_big_key = 1;
  if (has_redis_big_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->redis_big_key(), target);
  }

  // optional bool has_applied = 2;
  if (has_has_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_applied(), target);
  }

  // optional bool is_dao_shi = 3;
  if (has_is_dao_shi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dao_shi(), target);
  }

  // optional int32 login_days = 4;
  if (has_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->login_days(), target);
  }

  // optional bool has_collected_login_prize = 5;
  if (has_has_collected_login_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_collected_login_prize(), target);
  }

  // optional bool can_collect_wu_shuang_city_prize = 6;
  if (has_can_collect_wu_shuang_city_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_collect_wu_shuang_city_prize(), target);
  }

  // optional bool has_collected_wu_shuang_city_prize = 7;
  if (has_has_collected_wu_shuang_city_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_collected_wu_shuang_city_prize(), target);
  }

  // optional bool can_collect_long_city_prize = 8;
  if (has_can_collect_long_city_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->can_collect_long_city_prize(), target);
  }

  // optional bool has_collected_long_city_prize = 9;
  if (has_has_collected_long_city_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_collected_long_city_prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DaoShiProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes redis_big_key = 1;
    if (has_redis_big_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->redis_big_key());
    }

    // optional bool has_applied = 2;
    if (has_has_applied()) {
      total_size += 1 + 1;
    }

    // optional bool is_dao_shi = 3;
    if (has_is_dao_shi()) {
      total_size += 1 + 1;
    }

    // optional int32 login_days = 4;
    if (has_login_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_days());
    }

    // optional bool has_collected_login_prize = 5;
    if (has_has_collected_login_prize()) {
      total_size += 1 + 1;
    }

    // optional bool can_collect_wu_shuang_city_prize = 6;
    if (has_can_collect_wu_shuang_city_prize()) {
      total_size += 1 + 1;
    }

    // optional bool has_collected_wu_shuang_city_prize = 7;
    if (has_has_collected_wu_shuang_city_prize()) {
      total_size += 1 + 1;
    }

    // optional bool can_collect_long_city_prize = 8;
    if (has_can_collect_long_city_prize()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_collected_long_city_prize = 9;
    if (has_has_collected_long_city_prize()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DaoShiProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DaoShiProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DaoShiProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DaoShiProto::MergeFrom(const DaoShiProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redis_big_key()) {
      set_redis_big_key(from.redis_big_key());
    }
    if (from.has_has_applied()) {
      set_has_applied(from.has_applied());
    }
    if (from.has_is_dao_shi()) {
      set_is_dao_shi(from.is_dao_shi());
    }
    if (from.has_login_days()) {
      set_login_days(from.login_days());
    }
    if (from.has_has_collected_login_prize()) {
      set_has_collected_login_prize(from.has_collected_login_prize());
    }
    if (from.has_can_collect_wu_shuang_city_prize()) {
      set_can_collect_wu_shuang_city_prize(from.can_collect_wu_shuang_city_prize());
    }
    if (from.has_has_collected_wu_shuang_city_prize()) {
      set_has_collected_wu_shuang_city_prize(from.has_collected_wu_shuang_city_prize());
    }
    if (from.has_can_collect_long_city_prize()) {
      set_can_collect_long_city_prize(from.can_collect_long_city_prize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_collected_long_city_prize()) {
      set_has_collected_long_city_prize(from.has_collected_long_city_prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DaoShiProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaoShiProto::CopyFrom(const DaoShiProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaoShiProto::IsInitialized() const {

  return true;
}

void DaoShiProto::Swap(DaoShiProto* other) {
  if (other != this) {
    std::swap(redis_big_key_, other->redis_big_key_);
    std::swap(has_applied_, other->has_applied_);
    std::swap(is_dao_shi_, other->is_dao_shi_);
    std::swap(login_days_, other->login_days_);
    std::swap(has_collected_login_prize_, other->has_collected_login_prize_);
    std::swap(can_collect_wu_shuang_city_prize_, other->can_collect_wu_shuang_city_prize_);
    std::swap(has_collected_wu_shuang_city_prize_, other->has_collected_wu_shuang_city_prize_);
    std::swap(can_collect_long_city_prize_, other->can_collect_long_city_prize_);
    std::swap(has_collected_long_city_prize_, other->has_collected_long_city_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DaoShiProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DaoShiProto_descriptor_;
  metadata.reflection = DaoShiProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroJingJieProto::kJingJieFieldNumber;
#endif  // !_MSC_VER

HeroJingJieProto::HeroJingJieProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroJingJieProto::InitAsDefaultInstance() {
}

HeroJingJieProto::HeroJingJieProto(const HeroJingJieProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroJingJieProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroJingJieProto::~HeroJingJieProto() {
  SharedDtor();
}

void HeroJingJieProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroJingJieProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroJingJieProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroJingJieProto_descriptor_;
}

const HeroJingJieProto& HeroJingJieProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroJingJieProto* HeroJingJieProto::default_instance_ = NULL;

HeroJingJieProto* HeroJingJieProto::New() const {
  return new HeroJingJieProto;
}

void HeroJingJieProto::Clear() {
  jing_jie_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroJingJieProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.HeroJingJieDataProto jing_jie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jing_jie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jing_jie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_jing_jie;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroJingJieProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.HeroJingJieDataProto jing_jie = 1;
  for (int i = 0; i < this->jing_jie_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jing_jie(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroJingJieProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.HeroJingJieDataProto jing_jie = 1;
  for (int i = 0; i < this->jing_jie_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jing_jie(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroJingJieProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.HeroJingJieDataProto jing_jie = 1;
  total_size += 1 * this->jing_jie_size();
  for (int i = 0; i < this->jing_jie_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jing_jie(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroJingJieProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroJingJieProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroJingJieProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroJingJieProto::MergeFrom(const HeroJingJieProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  jing_jie_.MergeFrom(from.jing_jie_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroJingJieProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroJingJieProto::CopyFrom(const HeroJingJieProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroJingJieProto::IsInitialized() const {

  return true;
}

void HeroJingJieProto::Swap(HeroJingJieProto* other) {
  if (other != this) {
    jing_jie_.Swap(&other->jing_jie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroJingJieProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroJingJieProto_descriptor_;
  metadata.reflection = HeroJingJieProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroJingJieDataProto::kJingJieIdFieldNumber;
const int HeroJingJieDataProto::kJingJieBigLevelFieldNumber;
const int HeroJingJieDataProto::kJingJieSmallLevelFieldNumber;
const int HeroJingJieDataProto::kTodayCollectLongYuanCountFieldNumber;
const int HeroJingJieDataProto::kNextCollectLongYuanTimeFieldNumber;
#endif  // !_MSC_VER

HeroJingJieDataProto::HeroJingJieDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroJingJieDataProto::InitAsDefaultInstance() {
}

HeroJingJieDataProto::HeroJingJieDataProto(const HeroJingJieDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroJingJieDataProto::SharedCtor() {
  _cached_size_ = 0;
  jing_jie_id_ = 0;
  jing_jie_big_level_ = 0;
  jing_jie_small_level_ = 0;
  today_collect_long_yuan_count_ = 0;
  next_collect_long_yuan_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroJingJieDataProto::~HeroJingJieDataProto() {
  SharedDtor();
}

void HeroJingJieDataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroJingJieDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroJingJieDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroJingJieDataProto_descriptor_;
}

const HeroJingJieDataProto& HeroJingJieDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroJingJieDataProto* HeroJingJieDataProto::default_instance_ = NULL;

HeroJingJieDataProto* HeroJingJieDataProto::New() const {
  return new HeroJingJieDataProto;
}

void HeroJingJieDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jing_jie_id_ = 0;
    jing_jie_big_level_ = 0;
    jing_jie_small_level_ = 0;
    today_collect_long_yuan_count_ = 0;
    next_collect_long_yuan_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroJingJieDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 jing_jie_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jing_jie_id_)));
          set_has_jing_jie_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jing_jie_big_level;
        break;
      }

      // optional int32 jing_jie_big_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jing_jie_big_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jing_jie_big_level_)));
          set_has_jing_jie_big_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jing_jie_small_level;
        break;
      }

      // optional int32 jing_jie_small_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jing_jie_small_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jing_jie_small_level_)));
          set_has_jing_jie_small_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_collect_long_yuan_count;
        break;
      }

      // optional int32 today_collect_long_yuan_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_collect_long_yuan_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_collect_long_yuan_count_)));
          set_has_today_collect_long_yuan_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_collect_long_yuan_time;
        break;
      }

      // optional int64 next_collect_long_yuan_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_collect_long_yuan_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_collect_long_yuan_time_)));
          set_has_next_collect_long_yuan_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroJingJieDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 jing_jie_id = 1;
  if (has_jing_jie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jing_jie_id(), output);
  }

  // optional int32 jing_jie_big_level = 2;
  if (has_jing_jie_big_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jing_jie_big_level(), output);
  }

  // optional int32 jing_jie_small_level = 3;
  if (has_jing_jie_small_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jing_jie_small_level(), output);
  }

  // optional int32 today_collect_long_yuan_count = 4;
  if (has_today_collect_long_yuan_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->today_collect_long_yuan_count(), output);
  }

  // optional int64 next_collect_long_yuan_time = 5;
  if (has_next_collect_long_yuan_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->next_collect_long_yuan_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroJingJieDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 jing_jie_id = 1;
  if (has_jing_jie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jing_jie_id(), target);
  }

  // optional int32 jing_jie_big_level = 2;
  if (has_jing_jie_big_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jing_jie_big_level(), target);
  }

  // optional int32 jing_jie_small_level = 3;
  if (has_jing_jie_small_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jing_jie_small_level(), target);
  }

  // optional int32 today_collect_long_yuan_count = 4;
  if (has_today_collect_long_yuan_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->today_collect_long_yuan_count(), target);
  }

  // optional int64 next_collect_long_yuan_time = 5;
  if (has_next_collect_long_yuan_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->next_collect_long_yuan_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroJingJieDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 jing_jie_id = 1;
    if (has_jing_jie_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jing_jie_id());
    }

    // optional int32 jing_jie_big_level = 2;
    if (has_jing_jie_big_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jing_jie_big_level());
    }

    // optional int32 jing_jie_small_level = 3;
    if (has_jing_jie_small_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jing_jie_small_level());
    }

    // optional int32 today_collect_long_yuan_count = 4;
    if (has_today_collect_long_yuan_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_collect_long_yuan_count());
    }

    // optional int64 next_collect_long_yuan_time = 5;
    if (has_next_collect_long_yuan_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_collect_long_yuan_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroJingJieDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroJingJieDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroJingJieDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroJingJieDataProto::MergeFrom(const HeroJingJieDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jing_jie_id()) {
      set_jing_jie_id(from.jing_jie_id());
    }
    if (from.has_jing_jie_big_level()) {
      set_jing_jie_big_level(from.jing_jie_big_level());
    }
    if (from.has_jing_jie_small_level()) {
      set_jing_jie_small_level(from.jing_jie_small_level());
    }
    if (from.has_today_collect_long_yuan_count()) {
      set_today_collect_long_yuan_count(from.today_collect_long_yuan_count());
    }
    if (from.has_next_collect_long_yuan_time()) {
      set_next_collect_long_yuan_time(from.next_collect_long_yuan_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroJingJieDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroJingJieDataProto::CopyFrom(const HeroJingJieDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroJingJieDataProto::IsInitialized() const {

  return true;
}

void HeroJingJieDataProto::Swap(HeroJingJieDataProto* other) {
  if (other != this) {
    std::swap(jing_jie_id_, other->jing_jie_id_);
    std::swap(jing_jie_big_level_, other->jing_jie_big_level_);
    std::swap(jing_jie_small_level_, other->jing_jie_small_level_);
    std::swap(today_collect_long_yuan_count_, other->today_collect_long_yuan_count_);
    std::swap(next_collect_long_yuan_time_, other->next_collect_long_yuan_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroJingJieDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroJingJieDataProto_descriptor_;
  metadata.reflection = HeroJingJieDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDungeonCollectedPrizeProto::kExpireTimeFieldNumber;
const int GuildDungeonCollectedPrizeProto::kCollectedPrizeFieldNumber;
#endif  // !_MSC_VER

GuildDungeonCollectedPrizeProto::GuildDungeonCollectedPrizeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDungeonCollectedPrizeProto::InitAsDefaultInstance() {
}

GuildDungeonCollectedPrizeProto::GuildDungeonCollectedPrizeProto(const GuildDungeonCollectedPrizeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDungeonCollectedPrizeProto::SharedCtor() {
  _cached_size_ = 0;
  expire_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDungeonCollectedPrizeProto::~GuildDungeonCollectedPrizeProto() {
  SharedDtor();
}

void GuildDungeonCollectedPrizeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDungeonCollectedPrizeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDungeonCollectedPrizeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDungeonCollectedPrizeProto_descriptor_;
}

const GuildDungeonCollectedPrizeProto& GuildDungeonCollectedPrizeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

GuildDungeonCollectedPrizeProto* GuildDungeonCollectedPrizeProto::default_instance_ = NULL;

GuildDungeonCollectedPrizeProto* GuildDungeonCollectedPrizeProto::New() const {
  return new GuildDungeonCollectedPrizeProto;
}

void GuildDungeonCollectedPrizeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expire_time_ = GOOGLE_LONGLONG(0);
  }
  collected_prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDungeonCollectedPrizeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 expire_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_collected_prize;
        break;
      }

      // repeated int32 collected_prize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collected_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_collected_prize())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_collected_prize())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_collected_prize;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildDungeonCollectedPrizeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 expire_time = 1;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expire_time(), output);
  }

  // repeated int32 collected_prize = 2;
  for (int i = 0; i < this->collected_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->collected_prize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDungeonCollectedPrizeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 expire_time = 1;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expire_time(), target);
  }

  // repeated int32 collected_prize = 2;
  for (int i = 0; i < this->collected_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->collected_prize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDungeonCollectedPrizeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 expire_time = 1;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

  }
  // repeated int32 collected_prize = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->collected_prize_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->collected_prize(i));
    }
    total_size += 1 * this->collected_prize_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDungeonCollectedPrizeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDungeonCollectedPrizeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDungeonCollectedPrizeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDungeonCollectedPrizeProto::MergeFrom(const GuildDungeonCollectedPrizeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  collected_prize_.MergeFrom(from.collected_prize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDungeonCollectedPrizeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDungeonCollectedPrizeProto::CopyFrom(const GuildDungeonCollectedPrizeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDungeonCollectedPrizeProto::IsInitialized() const {

  return true;
}

void GuildDungeonCollectedPrizeProto::Swap(GuildDungeonCollectedPrizeProto* other) {
  if (other != this) {
    std::swap(expire_time_, other->expire_time_);
    collected_prize_.Swap(&other->collected_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDungeonCollectedPrizeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDungeonCollectedPrizeProto_descriptor_;
  metadata.reflection = GuildDungeonCollectedPrizeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShouCangProto::kTypeFieldNumber;
const int ShouCangProto::kLevelFieldNumber;
#endif  // !_MSC_VER

ShouCangProto::ShouCangProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShouCangProto::InitAsDefaultInstance() {
}

ShouCangProto::ShouCangProto(const ShouCangProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShouCangProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShouCangProto::~ShouCangProto() {
  SharedDtor();
}

void ShouCangProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShouCangProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShouCangProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShouCangProto_descriptor_;
}

const ShouCangProto& ShouCangProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ShouCangProto* ShouCangProto::default_instance_ = NULL;

ShouCangProto* ShouCangProto::New() const {
  return new ShouCangProto;
}

void ShouCangProto::Clear() {
  type_.Clear();
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShouCangProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // repeated int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShouCangProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type(i), output);
  }

  // repeated int32 level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShouCangProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->type(i), target);
  }

  // repeated int32 level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShouCangProto::ByteSize() const {
  int total_size = 0;

  // repeated int32 type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  // repeated int32 level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShouCangProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShouCangProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShouCangProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShouCangProto::MergeFrom(const ShouCangProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  level_.MergeFrom(from.level_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShouCangProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShouCangProto::CopyFrom(const ShouCangProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShouCangProto::IsInitialized() const {

  return true;
}

void ShouCangProto::Swap(ShouCangProto* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    level_.Swap(&other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShouCangProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShouCangProto_descriptor_;
  metadata.reflection = ShouCangProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementProto::kAchievedTypeFieldNumber;
const int AchievementProto::kAchievedIdFieldNumber;
const int AchievementProto::kProgressFieldNumber;
#endif  // !_MSC_VER

AchievementProto::AchievementProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchievementProto::InitAsDefaultInstance() {
}

AchievementProto::AchievementProto(const AchievementProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementProto::SharedCtor() {
  _cached_size_ = 0;
  achieved_type_ = 0;
  achieved_id_ = 0;
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementProto::~AchievementProto() {
  SharedDtor();
}

void AchievementProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementProto_descriptor_;
}

const AchievementProto& AchievementProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

AchievementProto* AchievementProto::default_instance_ = NULL;

AchievementProto* AchievementProto::New() const {
  return new AchievementProto;
}

void AchievementProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieved_type_ = 0;
    achieved_id_ = 0;
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 achieved_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieved_type_)));
          set_has_achieved_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achieved_id;
        break;
      }

      // optional int32 achieved_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieved_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieved_id_)));
          set_has_achieved_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // optional int32 progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 achieved_type = 1;
  if (has_achieved_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achieved_type(), output);
  }

  // optional int32 achieved_id = 2;
  if (has_achieved_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achieved_id(), output);
  }

  // optional int32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchievementProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 achieved_type = 1;
  if (has_achieved_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achieved_type(), target);
  }

  // optional int32 achieved_id = 2;
  if (has_achieved_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achieved_id(), target);
  }

  // optional int32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchievementProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 achieved_type = 1;
    if (has_achieved_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieved_type());
    }

    // optional int32 achieved_id = 2;
    if (has_achieved_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieved_id());
    }

    // optional int32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementProto::MergeFrom(const AchievementProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achieved_type()) {
      set_achieved_type(from.achieved_type());
    }
    if (from.has_achieved_id()) {
      set_achieved_id(from.achieved_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementProto::CopyFrom(const AchievementProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementProto::IsInitialized() const {

  return true;
}

void AchievementProto::Swap(AchievementProto* other) {
  if (other != this) {
    std::swap(achieved_type_, other->achieved_type_);
    std::swap(achieved_id_, other->achieved_id_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementProto_descriptor_;
  metadata.reflection = AchievementProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementInfoProto::kAchievedFieldNumber;
const int AchievementInfoProto::kAchievementPointsFieldNumber;
const int AchievementInfoProto::kNicknameIdFieldNumber;
const int AchievementInfoProto::kUsingNicknameFieldNumber;
#endif  // !_MSC_VER

AchievementInfoProto::AchievementInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchievementInfoProto::InitAsDefaultInstance() {
}

AchievementInfoProto::AchievementInfoProto(const AchievementInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementInfoProto::SharedCtor() {
  _cached_size_ = 0;
  achievement_points_ = 0;
  using_nickname_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementInfoProto::~AchievementInfoProto() {
  SharedDtor();
}

void AchievementInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementInfoProto_descriptor_;
}

const AchievementInfoProto& AchievementInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

AchievementInfoProto* AchievementInfoProto::default_instance_ = NULL;

AchievementInfoProto* AchievementInfoProto::New() const {
  return new AchievementInfoProto;
}

void AchievementInfoProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    achievement_points_ = 0;
    using_nickname_ = 0;
  }
  achieved_.Clear();
  nickname_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.AchievementProto achieved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieved:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieved()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achieved;
        if (input->ExpectTag(16)) goto parse_achievement_points;
        break;
      }

      // optional int32 achievement_points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievement_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievement_points_)));
          set_has_achievement_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_nickname_id;
        break;
      }

      // repeated int32 nickname_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nickname_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_nickname_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nickname_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_nickname_id;
        if (input->ExpectTag(176)) goto parse_using_nickname;
        break;
      }

      // optional int32 using_nickname = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_using_nickname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &using_nickname_)));
          set_has_using_nickname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.AchievementProto achieved = 1;
  for (int i = 0; i < this->achieved_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achieved(i), output);
  }

  // optional int32 achievement_points = 2;
  if (has_achievement_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achievement_points(), output);
  }

  // repeated int32 nickname_id = 21;
  for (int i = 0; i < this->nickname_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->nickname_id(i), output);
  }

  // optional int32 using_nickname = 22;
  if (has_using_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->using_nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchievementInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.AchievementProto achieved = 1;
  for (int i = 0; i < this->achieved_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achieved(i), target);
  }

  // optional int32 achievement_points = 2;
  if (has_achievement_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achievement_points(), target);
  }

  // repeated int32 nickname_id = 21;
  for (int i = 0; i < this->nickname_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->nickname_id(i), target);
  }

  // optional int32 using_nickname = 22;
  if (has_using_nickname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->using_nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchievementInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 achievement_points = 2;
    if (has_achievement_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievement_points());
    }

    // optional int32 using_nickname = 22;
    if (has_using_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->using_nickname());
    }

  }
  // repeated .app.message.AchievementProto achieved = 1;
  total_size += 1 * this->achieved_size();
  for (int i = 0; i < this->achieved_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieved(i));
  }

  // repeated int32 nickname_id = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->nickname_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nickname_id(i));
    }
    total_size += 2 * this->nickname_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementInfoProto::MergeFrom(const AchievementInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieved_.MergeFrom(from.achieved_);
  nickname_id_.MergeFrom(from.nickname_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_achievement_points()) {
      set_achievement_points(from.achievement_points());
    }
    if (from.has_using_nickname()) {
      set_using_nickname(from.using_nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementInfoProto::CopyFrom(const AchievementInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementInfoProto::IsInitialized() const {

  return true;
}

void AchievementInfoProto::Swap(AchievementInfoProto* other) {
  if (other != this) {
    achieved_.Swap(&other->achieved_);
    std::swap(achievement_points_, other->achievement_points_);
    nickname_id_.Swap(&other->nickname_id_);
    std::swap(using_nickname_, other->using_nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementInfoProto_descriptor_;
  metadata.reflection = AchievementInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroSuperArmProto::kIdFieldNumber;
const int HeroSuperArmProto::kResourceFieldNumber;
const int HeroSuperArmProto::kBlessAmountFieldNumber;
const int HeroSuperArmProto::kBlessAmountClearTimeFieldNumber;
const int HeroSuperArmProto::kSpellPosFieldNumber;
const int HeroSuperArmProto::kSpellsFieldNumber;
const int HeroSuperArmProto::kQianNengUseCountFieldNumber;
const int HeroSuperArmProto::kHuanHuaUseCountFieldNumber;
const int HeroSuperArmProto::kIsHideHuanHuaFieldNumber;
const int HeroSuperArmProto::kQianNengExtraMaxUseCountFieldNumber;
const int HeroSuperArmProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int HeroSuperArmProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int HeroSuperArmProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

HeroSuperArmProto::HeroSuperArmProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroSuperArmProto::InitAsDefaultInstance() {
}

HeroSuperArmProto::HeroSuperArmProto(const HeroSuperArmProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroSuperArmProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  resource_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  is_hide_huan_hua_ = false;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroSuperArmProto::~HeroSuperArmProto() {
  SharedDtor();
}

void HeroSuperArmProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroSuperArmProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroSuperArmProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroSuperArmProto_descriptor_;
}

const HeroSuperArmProto& HeroSuperArmProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroSuperArmProto* HeroSuperArmProto::default_instance_ = NULL;

HeroSuperArmProto* HeroSuperArmProto::New() const {
  return new HeroSuperArmProto;
}

void HeroSuperArmProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    resource_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_hide_huan_hua_ = false;
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  spell_pos_.Clear();
  spells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroSuperArmProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resource;
        break;
      }

      // optional int32 resource = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        break;
      }

      // repeated int32 spell_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        if (input->ExpectTag(106)) goto parse_spells;
        break;
      }

      // repeated .app.message.ActiveSpell spells = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_spells;
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_hide_huan_hua;
        break;
      }

      // optional bool is_hide_huan_hua = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide_huan_hua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_huan_hua_)));
          set_has_is_hide_huan_hua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroSuperArmProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 resource = 5;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resource(), output);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bless_amount_clear_time(), output);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->spell_pos(i), output);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spells(i), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_hide_huan_hua(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroSuperArmProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 resource = 5;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resource(), target);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bless_amount_clear_time(), target);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->spell_pos(i), target);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spells(i), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_hide_huan_hua(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroSuperArmProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 resource = 5;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // optional int32 bless_amount = 10;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 11;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_hide_huan_hua = 24;
    if (has_is_hide_huan_hua()) {
      total_size += 2 + 1;
    }

    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 spell_pos = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_pos(i));
    }
    total_size += 1 * this->spell_pos_size() + data_size;
  }

  // repeated .app.message.ActiveSpell spells = 13;
  total_size += 1 * this->spells_size();
  for (int i = 0; i < this->spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroSuperArmProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroSuperArmProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroSuperArmProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroSuperArmProto::MergeFrom(const HeroSuperArmProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  spell_pos_.MergeFrom(from.spell_pos_);
  spells_.MergeFrom(from.spells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_hide_huan_hua()) {
      set_is_hide_huan_hua(from.is_hide_huan_hua());
    }
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroSuperArmProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroSuperArmProto::CopyFrom(const HeroSuperArmProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroSuperArmProto::IsInitialized() const {

  return true;
}

void HeroSuperArmProto::Swap(HeroSuperArmProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    spell_pos_.Swap(&other->spell_pos_);
    spells_.Swap(&other->spells_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(is_hide_huan_hua_, other->is_hide_huan_hua_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroSuperArmProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroSuperArmProto_descriptor_;
  metadata.reflection = HeroSuperArmProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetProto::kDataFieldNumber;
const int PetProto::kAddedMaxLifeFieldNumber;
const int PetProto::kAddedAttackFieldNumber;
const int PetProto::kAddedDefenceFieldNumber;
const int PetProto::kExpireTimeFieldNumber;
const int PetProto::kEquipmentPosFieldNumber;
const int PetProto::kEquipmentStaticDataFieldNumber;
const int PetProto::kEquipmentDynamicDataFieldNumber;
const int PetProto::kMonsterFieldNumber;
const int PetProto::kReliveTimeFieldNumber;
const int PetProto::kSpellPosFieldNumber;
const int PetProto::kSpellsFieldNumber;
const int PetProto::kUseZizhidanCountFieldNumber;
const int PetProto::kUseMeirenzhixinCountFieldNumber;
#endif  // !_MSC_VER

PetProto::PetProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetProto::InitAsDefaultInstance() {
  data_ = const_cast< ::app::message::PetLevelProto*>(&::app::message::PetLevelProto::default_instance());
}

PetProto::PetProto(const PetProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetProto::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  added_max_life_ = 0;
  added_attack_ = 0;
  added_defence_ = 0;
  expire_time_ = GOOGLE_LONGLONG(0);
  monster_ = 0;
  relive_time_ = GOOGLE_LONGLONG(0);
  use_zizhidan_count_ = 0;
  use_meirenzhixin_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetProto::~PetProto() {
  SharedDtor();
}

void PetProto::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetProto_descriptor_;
}

const PetProto& PetProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PetProto* PetProto::default_instance_ = NULL;

PetProto* PetProto::New() const {
  return new PetProto;
}

void PetProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::app::message::PetLevelProto::Clear();
    }
    added_max_life_ = 0;
    added_attack_ = 0;
    added_defence_ = 0;
    expire_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    monster_ = 0;
    relive_time_ = GOOGLE_LONGLONG(0);
    use_zizhidan_count_ = 0;
    use_meirenzhixin_count_ = 0;
  }
  equipment_pos_.Clear();
  equipment_static_data_.Clear();
  equipment_dynamic_data_.Clear();
  spell_pos_.Clear();
  spells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.PetLevelProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_added_max_life;
        break;
      }

      // optional int32 added_max_life = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_max_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_max_life_)));
          set_has_added_max_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_added_attack;
        break;
      }

      // optional int32 added_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_attack_)));
          set_has_added_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_added_defence;
        break;
      }

      // optional int32 added_defence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_defence_)));
          set_has_added_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equipment_pos;
        break;
      }

      // repeated int32 equipment_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_equipment_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipment_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equipment_pos;
        if (input->ExpectTag(58)) goto parse_equipment_static_data;
        break;
      }

      // repeated bytes equipment_static_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_static_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_equipment_static_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equipment_static_data;
        if (input->ExpectTag(66)) goto parse_equipment_dynamic_data;
        break;
      }

      // repeated bytes equipment_dynamic_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_dynamic_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_equipment_dynamic_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equipment_dynamic_data;
        if (input->ExpectTag(160)) goto parse_monster;
        break;
      }

      // optional int32 monster = 20 [deprecated = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_)));
          set_has_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_relive_time;
        break;
      }

      // optional int64 relive_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relive_time_)));
          set_has_relive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_spell_pos;
        break;
      }

      // repeated int32 spell_pos = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 240, input, this->mutable_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_spell_pos;
        if (input->ExpectTag(250)) goto parse_spells;
        break;
      }

      // repeated .app.message.ActiveSpell spells = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_spells;
        if (input->ExpectTag(256)) goto parse_use_zizhidan_count;
        break;
      }

      // optional int32 use_zizhidan_count = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_zizhidan_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_zizhidan_count_)));
          set_has_use_zizhidan_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_use_meirenzhixin_count;
        break;
      }

      // optional int32 use_meirenzhixin_count = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_meirenzhixin_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_meirenzhixin_count_)));
          set_has_use_meirenzhixin_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.PetLevelProto data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional int32 added_max_life = 2;
  if (has_added_max_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->added_max_life(), output);
  }

  // optional int32 added_attack = 3;
  if (has_added_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->added_attack(), output);
  }

  // optional int32 added_defence = 4;
  if (has_added_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->added_defence(), output);
  }

  // optional int64 expire_time = 5;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expire_time(), output);
  }

  // repeated int32 equipment_pos = 6;
  for (int i = 0; i < this->equipment_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->equipment_pos(i), output);
  }

  // repeated bytes equipment_static_data = 7;
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->equipment_static_data(i), output);
  }

  // repeated bytes equipment_dynamic_data = 8;
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->equipment_dynamic_data(i), output);
  }

  // optional int32 monster = 20 [deprecated = true];
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->monster(), output);
  }

  // optional int64 relive_time = 21;
  if (has_relive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->relive_time(), output);
  }

  // repeated int32 spell_pos = 30;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->spell_pos(i), output);
  }

  // repeated .app.message.ActiveSpell spells = 31;
  for (int i = 0; i < this->spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->spells(i), output);
  }

  // optional int32 use_zizhidan_count = 32;
  if (has_use_zizhidan_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->use_zizhidan_count(), output);
  }

  // optional int32 use_meirenzhixin_count = 33;
  if (has_use_meirenzhixin_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->use_meirenzhixin_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.PetLevelProto data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional int32 added_max_life = 2;
  if (has_added_max_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->added_max_life(), target);
  }

  // optional int32 added_attack = 3;
  if (has_added_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->added_attack(), target);
  }

  // optional int32 added_defence = 4;
  if (has_added_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->added_defence(), target);
  }

  // optional int64 expire_time = 5;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expire_time(), target);
  }

  // repeated int32 equipment_pos = 6;
  for (int i = 0; i < this->equipment_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->equipment_pos(i), target);
  }

  // repeated bytes equipment_static_data = 7;
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->equipment_static_data(i), target);
  }

  // repeated bytes equipment_dynamic_data = 8;
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->equipment_dynamic_data(i), target);
  }

  // optional int32 monster = 20 [deprecated = true];
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->monster(), target);
  }

  // optional int64 relive_time = 21;
  if (has_relive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->relive_time(), target);
  }

  // repeated int32 spell_pos = 30;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(30, this->spell_pos(i), target);
  }

  // repeated .app.message.ActiveSpell spells = 31;
  for (int i = 0; i < this->spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->spells(i), target);
  }

  // optional int32 use_zizhidan_count = 32;
  if (has_use_zizhidan_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->use_zizhidan_count(), target);
  }

  // optional int32 use_meirenzhixin_count = 33;
  if (has_use_meirenzhixin_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->use_meirenzhixin_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.PetLevelProto data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 added_max_life = 2;
    if (has_added_max_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_max_life());
    }

    // optional int32 added_attack = 3;
    if (has_added_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_attack());
    }

    // optional int32 added_defence = 4;
    if (has_added_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_defence());
    }

    // optional int64 expire_time = 5;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 monster = 20 [deprecated = true];
    if (has_monster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster());
    }

    // optional int64 relive_time = 21;
    if (has_relive_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relive_time());
    }

    // optional int32 use_zizhidan_count = 32;
    if (has_use_zizhidan_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_zizhidan_count());
    }

    // optional int32 use_meirenzhixin_count = 33;
    if (has_use_meirenzhixin_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_meirenzhixin_count());
    }

  }
  // repeated int32 equipment_pos = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipment_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipment_pos(i));
    }
    total_size += 1 * this->equipment_pos_size() + data_size;
  }

  // repeated bytes equipment_static_data = 7;
  total_size += 1 * this->equipment_static_data_size();
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->equipment_static_data(i));
  }

  // repeated bytes equipment_dynamic_data = 8;
  total_size += 1 * this->equipment_dynamic_data_size();
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->equipment_dynamic_data(i));
  }

  // repeated int32 spell_pos = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_pos(i));
    }
    total_size += 2 * this->spell_pos_size() + data_size;
  }

  // repeated .app.message.ActiveSpell spells = 31;
  total_size += 2 * this->spells_size();
  for (int i = 0; i < this->spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetProto::MergeFrom(const PetProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_pos_.MergeFrom(from.equipment_pos_);
  equipment_static_data_.MergeFrom(from.equipment_static_data_);
  equipment_dynamic_data_.MergeFrom(from.equipment_dynamic_data_);
  spell_pos_.MergeFrom(from.spell_pos_);
  spells_.MergeFrom(from.spells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::app::message::PetLevelProto::MergeFrom(from.data());
    }
    if (from.has_added_max_life()) {
      set_added_max_life(from.added_max_life());
    }
    if (from.has_added_attack()) {
      set_added_attack(from.added_attack());
    }
    if (from.has_added_defence()) {
      set_added_defence(from.added_defence());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_monster()) {
      set_monster(from.monster());
    }
    if (from.has_relive_time()) {
      set_relive_time(from.relive_time());
    }
    if (from.has_use_zizhidan_count()) {
      set_use_zizhidan_count(from.use_zizhidan_count());
    }
    if (from.has_use_meirenzhixin_count()) {
      set_use_meirenzhixin_count(from.use_meirenzhixin_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetProto::CopyFrom(const PetProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetProto::IsInitialized() const {

  return true;
}

void PetProto::Swap(PetProto* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(added_max_life_, other->added_max_life_);
    std::swap(added_attack_, other->added_attack_);
    std::swap(added_defence_, other->added_defence_);
    std::swap(expire_time_, other->expire_time_);
    equipment_pos_.Swap(&other->equipment_pos_);
    equipment_static_data_.Swap(&other->equipment_static_data_);
    equipment_dynamic_data_.Swap(&other->equipment_dynamic_data_);
    std::swap(monster_, other->monster_);
    std::swap(relive_time_, other->relive_time_);
    spell_pos_.Swap(&other->spell_pos_);
    spells_.Swap(&other->spells_);
    std::swap(use_zizhidan_count_, other->use_zizhidan_count_);
    std::swap(use_meirenzhixin_count_, other->use_meirenzhixin_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetProto_descriptor_;
  metadata.reflection = PetProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetLevelProto::kDefaultAddedMaxLifeFieldNumber;
const int PetLevelProto::kDefaultAddedAttackFieldNumber;
const int PetLevelProto::kDefaultAddedDefenceFieldNumber;
const int PetLevelProto::kMaxAddedMaxLifeFieldNumber;
const int PetLevelProto::kMaxAddedMaxAttackFieldNumber;
const int PetLevelProto::kMaxAddedMaxDefenceFieldNumber;
const int PetLevelProto::kFixedStatFieldNumber;
const int PetLevelProto::kPercentStatFieldNumber;
const int PetLevelProto::kStaticHurtFieldNumber;
#endif  // !_MSC_VER

PetLevelProto::PetLevelProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetLevelProto::InitAsDefaultInstance() {
  fixed_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  percent_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

PetLevelProto::PetLevelProto(const PetLevelProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetLevelProto::SharedCtor() {
  _cached_size_ = 0;
  default_added_max_life_ = GOOGLE_LONGLONG(0);
  default_added_attack_ = 0;
  default_added_defence_ = 0;
  max_added_max_life_ = 0;
  max_added_max_attack_ = 0;
  max_added_max_defence_ = 0;
  fixed_stat_ = NULL;
  percent_stat_ = NULL;
  static_hurt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetLevelProto::~PetLevelProto() {
  SharedDtor();
}

void PetLevelProto::SharedDtor() {
  if (this != default_instance_) {
    delete fixed_stat_;
    delete percent_stat_;
  }
}

void PetLevelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetLevelProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetLevelProto_descriptor_;
}

const PetLevelProto& PetLevelProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PetLevelProto* PetLevelProto::default_instance_ = NULL;

PetLevelProto* PetLevelProto::New() const {
  return new PetLevelProto;
}

void PetLevelProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    default_added_max_life_ = GOOGLE_LONGLONG(0);
    default_added_attack_ = 0;
    default_added_defence_ = 0;
    max_added_max_life_ = 0;
    max_added_max_attack_ = 0;
    max_added_max_defence_ = 0;
    if (has_fixed_stat()) {
      if (fixed_stat_ != NULL) fixed_stat_->::app::message::SpriteStatProto::Clear();
    }
    if (has_percent_stat()) {
      if (percent_stat_ != NULL) percent_stat_->::app::message::SpriteStatProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    static_hurt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetLevelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 default_added_max_life = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_added_max_life_)));
          set_has_default_added_max_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_default_added_attack;
        break;
      }

      // optional int32 default_added_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_added_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_added_attack_)));
          set_has_default_added_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_default_added_defence;
        break;
      }

      // optional int32 default_added_defence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_added_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_added_defence_)));
          set_has_default_added_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_added_max_life;
        break;
      }

      // optional int32 max_added_max_life = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_added_max_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_added_max_life_)));
          set_has_max_added_max_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_added_max_attack;
        break;
      }

      // optional int32 max_added_max_attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_added_max_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_added_max_attack_)));
          set_has_max_added_max_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_added_max_defence;
        break;
      }

      // optional int32 max_added_max_defence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_added_max_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_added_max_defence_)));
          set_has_max_added_max_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fixed_stat;
        break;
      }

      // optional .app.message.SpriteStatProto fixed_stat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixed_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_percent_stat;
        break;
      }

      // optional .app.message.SpriteStatProto percent_stat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_percent_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_percent_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_static_hurt;
        break;
      }

      // optional int32 static_hurt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_static_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &static_hurt_)));
          set_has_static_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetLevelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 default_added_max_life = 2;
  if (has_default_added_max_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->default_added_max_life(), output);
  }

  // optional int32 default_added_attack = 3;
  if (has_default_added_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->default_added_attack(), output);
  }

  // optional int32 default_added_defence = 4;
  if (has_default_added_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->default_added_defence(), output);
  }

  // optional int32 max_added_max_life = 5;
  if (has_max_added_max_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_added_max_life(), output);
  }

  // optional int32 max_added_max_attack = 6;
  if (has_max_added_max_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_added_max_attack(), output);
  }

  // optional int32 max_added_max_defence = 7;
  if (has_max_added_max_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_added_max_defence(), output);
  }

  // optional .app.message.SpriteStatProto fixed_stat = 8;
  if (has_fixed_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fixed_stat(), output);
  }

  // optional .app.message.SpriteStatProto percent_stat = 9;
  if (has_percent_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->percent_stat(), output);
  }

  // optional int32 static_hurt = 10;
  if (has_static_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->static_hurt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetLevelProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 default_added_max_life = 2;
  if (has_default_added_max_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->default_added_max_life(), target);
  }

  // optional int32 default_added_attack = 3;
  if (has_default_added_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->default_added_attack(), target);
  }

  // optional int32 default_added_defence = 4;
  if (has_default_added_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->default_added_defence(), target);
  }

  // optional int32 max_added_max_life = 5;
  if (has_max_added_max_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_added_max_life(), target);
  }

  // optional int32 max_added_max_attack = 6;
  if (has_max_added_max_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_added_max_attack(), target);
  }

  // optional int32 max_added_max_defence = 7;
  if (has_max_added_max_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_added_max_defence(), target);
  }

  // optional .app.message.SpriteStatProto fixed_stat = 8;
  if (has_fixed_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fixed_stat(), target);
  }

  // optional .app.message.SpriteStatProto percent_stat = 9;
  if (has_percent_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->percent_stat(), target);
  }

  // optional int32 static_hurt = 10;
  if (has_static_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->static_hurt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetLevelProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 default_added_max_life = 2;
    if (has_default_added_max_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->default_added_max_life());
    }

    // optional int32 default_added_attack = 3;
    if (has_default_added_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_added_attack());
    }

    // optional int32 default_added_defence = 4;
    if (has_default_added_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_added_defence());
    }

    // optional int32 max_added_max_life = 5;
    if (has_max_added_max_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_added_max_life());
    }

    // optional int32 max_added_max_attack = 6;
    if (has_max_added_max_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_added_max_attack());
    }

    // optional int32 max_added_max_defence = 7;
    if (has_max_added_max_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_added_max_defence());
    }

    // optional .app.message.SpriteStatProto fixed_stat = 8;
    if (has_fixed_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixed_stat());
    }

    // optional .app.message.SpriteStatProto percent_stat = 9;
    if (has_percent_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->percent_stat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 static_hurt = 10;
    if (has_static_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->static_hurt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetLevelProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetLevelProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetLevelProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetLevelProto::MergeFrom(const PetLevelProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_default_added_max_life()) {
      set_default_added_max_life(from.default_added_max_life());
    }
    if (from.has_default_added_attack()) {
      set_default_added_attack(from.default_added_attack());
    }
    if (from.has_default_added_defence()) {
      set_default_added_defence(from.default_added_defence());
    }
    if (from.has_max_added_max_life()) {
      set_max_added_max_life(from.max_added_max_life());
    }
    if (from.has_max_added_max_attack()) {
      set_max_added_max_attack(from.max_added_max_attack());
    }
    if (from.has_max_added_max_defence()) {
      set_max_added_max_defence(from.max_added_max_defence());
    }
    if (from.has_fixed_stat()) {
      mutable_fixed_stat()->::app::message::SpriteStatProto::MergeFrom(from.fixed_stat());
    }
    if (from.has_percent_stat()) {
      mutable_percent_stat()->::app::message::SpriteStatProto::MergeFrom(from.percent_stat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_static_hurt()) {
      set_static_hurt(from.static_hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetLevelProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetLevelProto::CopyFrom(const PetLevelProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetLevelProto::IsInitialized() const {

  return true;
}

void PetLevelProto::Swap(PetLevelProto* other) {
  if (other != this) {
    std::swap(default_added_max_life_, other->default_added_max_life_);
    std::swap(default_added_attack_, other->default_added_attack_);
    std::swap(default_added_defence_, other->default_added_defence_);
    std::swap(max_added_max_life_, other->max_added_max_life_);
    std::swap(max_added_max_attack_, other->max_added_max_attack_);
    std::swap(max_added_max_defence_, other->max_added_max_defence_);
    std::swap(fixed_stat_, other->fixed_stat_);
    std::swap(percent_stat_, other->percent_stat_);
    std::swap(static_hurt_, other->static_hurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetLevelProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetLevelProto_descriptor_;
  metadata.reflection = PetLevelProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DemonProto::kDemonFieldNumber;
const int DemonProto::kBlessAmountFieldNumber;
const int DemonProto::kBlessAmountClearTimeFieldNumber;
const int DemonProto::kIsInDemonStateFieldNumber;
const int DemonProto::kNextCanTurnDemonTimeFieldNumber;
const int DemonProto::kQianNengUseCountFieldNumber;
const int DemonProto::kHuanHuaUseCountFieldNumber;
const int DemonProto::kIsHideFieldNumber;
const int DemonProto::kQianNengExtraMaxUseCountFieldNumber;
const int DemonProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int DemonProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int DemonProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

DemonProto::DemonProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DemonProto::InitAsDefaultInstance() {
  demon_ = const_cast< ::app::message::DemonConfigProto*>(&::app::message::DemonConfigProto::default_instance());
}

DemonProto::DemonProto(const DemonProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DemonProto::SharedCtor() {
  _cached_size_ = 0;
  demon_ = NULL;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  is_in_demon_state_ = false;
  next_can_turn_demon_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  is_hide_ = false;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemonProto::~DemonProto() {
  SharedDtor();
}

void DemonProto::SharedDtor() {
  if (this != default_instance_) {
    delete demon_;
  }
}

void DemonProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemonProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemonProto_descriptor_;
}

const DemonProto& DemonProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

DemonProto* DemonProto::default_instance_ = NULL;

DemonProto* DemonProto::New() const {
  return new DemonProto;
}

void DemonProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_demon()) {
      if (demon_ != NULL) demon_->::app::message::DemonConfigProto::Clear();
    }
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    is_in_demon_state_ = false;
    next_can_turn_demon_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    is_hide_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemonProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.DemonConfigProto demon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_demon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_in_demon_state;
        break;
      }

      // optional bool is_in_demon_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_demon_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_demon_state_)));
          set_has_is_in_demon_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_next_can_turn_demon_time;
        break;
      }

      // optional int64 next_can_turn_demon_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_can_turn_demon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_can_turn_demon_time_)));
          set_has_next_can_turn_demon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_is_hide;
        break;
      }

      // optional bool is_hide = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_)));
          set_has_is_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DemonProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.DemonConfigProto demon = 1;
  if (has_demon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->demon(), output);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bless_amount_clear_time(), output);
  }

  // optional bool is_in_demon_state = 12;
  if (has_is_in_demon_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_in_demon_state(), output);
  }

  // optional int64 next_can_turn_demon_time = 13;
  if (has_next_can_turn_demon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->next_can_turn_demon_time(), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional bool is_hide = 23;
  if (has_is_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_hide(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DemonProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.DemonConfigProto demon = 1;
  if (has_demon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->demon(), target);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bless_amount_clear_time(), target);
  }

  // optional bool is_in_demon_state = 12;
  if (has_is_in_demon_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_in_demon_state(), target);
  }

  // optional int64 next_can_turn_demon_time = 13;
  if (has_next_can_turn_demon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->next_can_turn_demon_time(), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional bool is_hide = 23;
  if (has_is_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_hide(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DemonProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.DemonConfigProto demon = 1;
    if (has_demon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->demon());
    }

    // optional int32 bless_amount = 10;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 11;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional bool is_in_demon_state = 12;
    if (has_is_in_demon_state()) {
      total_size += 1 + 1;
    }

    // optional int64 next_can_turn_demon_time = 13;
    if (has_next_can_turn_demon_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_can_turn_demon_time());
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional bool is_hide = 23;
    if (has_is_hide()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemonProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemonProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemonProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemonProto::MergeFrom(const DemonProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_demon()) {
      mutable_demon()->::app::message::DemonConfigProto::MergeFrom(from.demon());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_is_in_demon_state()) {
      set_is_in_demon_state(from.is_in_demon_state());
    }
    if (from.has_next_can_turn_demon_time()) {
      set_next_can_turn_demon_time(from.next_can_turn_demon_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_is_hide()) {
      set_is_hide(from.is_hide());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemonProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemonProto::CopyFrom(const DemonProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemonProto::IsInitialized() const {

  return true;
}

void DemonProto::Swap(DemonProto* other) {
  if (other != this) {
    std::swap(demon_, other->demon_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(is_in_demon_state_, other->is_in_demon_state_);
    std::swap(next_can_turn_demon_time_, other->next_can_turn_demon_time_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(is_hide_, other->is_hide_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemonProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemonProto_descriptor_;
  metadata.reflection = DemonProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TianZuiProto::kIdFieldNumber;
const int TianZuiProto::kBlessAmountFieldNumber;
const int TianZuiProto::kBlessAmountClearTimeFieldNumber;
const int TianZuiProto::kSpellPosFieldNumber;
const int TianZuiProto::kSpellsFieldNumber;
const int TianZuiProto::kQianNengUseCountFieldNumber;
const int TianZuiProto::kHuanHuaUseCountFieldNumber;
const int TianZuiProto::kIsHideHuanHuaFieldNumber;
const int TianZuiProto::kQianNengExtraMaxUseCountFieldNumber;
const int TianZuiProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int TianZuiProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int TianZuiProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

TianZuiProto::TianZuiProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TianZuiProto::InitAsDefaultInstance() {
}

TianZuiProto::TianZuiProto(const TianZuiProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TianZuiProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  is_hide_huan_hua_ = false;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TianZuiProto::~TianZuiProto() {
  SharedDtor();
}

void TianZuiProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TianZuiProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TianZuiProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TianZuiProto_descriptor_;
}

const TianZuiProto& TianZuiProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

TianZuiProto* TianZuiProto::default_instance_ = NULL;

TianZuiProto* TianZuiProto::New() const {
  return new TianZuiProto;
}

void TianZuiProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    is_hide_huan_hua_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  spell_pos_.Clear();
  spells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TianZuiProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        break;
      }

      // repeated int32 spell_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        if (input->ExpectTag(106)) goto parse_spells;
        break;
      }

      // repeated .app.message.ActiveSpell spells = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_spells;
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_hide_huan_hua;
        break;
      }

      // optional bool is_hide_huan_hua = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide_huan_hua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_huan_hua_)));
          set_has_is_hide_huan_hua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TianZuiProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bless_amount_clear_time(), output);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->spell_pos(i), output);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spells(i), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_hide_huan_hua(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TianZuiProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bless_amount_clear_time(), target);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->spell_pos(i), target);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spells(i), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_hide_huan_hua(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TianZuiProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 bless_amount = 10;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 11;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional bool is_hide_huan_hua = 24;
    if (has_is_hide_huan_hua()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 spell_pos = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_pos(i));
    }
    total_size += 1 * this->spell_pos_size() + data_size;
  }

  // repeated .app.message.ActiveSpell spells = 13;
  total_size += 1 * this->spells_size();
  for (int i = 0; i < this->spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TianZuiProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TianZuiProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TianZuiProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TianZuiProto::MergeFrom(const TianZuiProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  spell_pos_.MergeFrom(from.spell_pos_);
  spells_.MergeFrom(from.spells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_is_hide_huan_hua()) {
      set_is_hide_huan_hua(from.is_hide_huan_hua());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TianZuiProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TianZuiProto::CopyFrom(const TianZuiProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TianZuiProto::IsInitialized() const {

  return true;
}

void TianZuiProto::Swap(TianZuiProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    spell_pos_.Swap(&other->spell_pos_);
    spells_.Swap(&other->spells_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(is_hide_huan_hua_, other->is_hide_huan_hua_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TianZuiProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TianZuiProto_descriptor_;
  metadata.reflection = TianZuiProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TianJieProto::kIdFieldNumber;
const int TianJieProto::kBlessAmountFieldNumber;
const int TianJieProto::kBlessAmountClearTimeFieldNumber;
const int TianJieProto::kSpellPosFieldNumber;
const int TianJieProto::kSpellsFieldNumber;
const int TianJieProto::kQianNengUseCountFieldNumber;
const int TianJieProto::kHuanHuaUseCountFieldNumber;
const int TianJieProto::kIsHideHuanHuaFieldNumber;
const int TianJieProto::kQianNengExtraMaxUseCountFieldNumber;
const int TianJieProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int TianJieProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int TianJieProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

TianJieProto::TianJieProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TianJieProto::InitAsDefaultInstance() {
}

TianJieProto::TianJieProto(const TianJieProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TianJieProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  is_hide_huan_hua_ = false;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TianJieProto::~TianJieProto() {
  SharedDtor();
}

void TianJieProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TianJieProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TianJieProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TianJieProto_descriptor_;
}

const TianJieProto& TianJieProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

TianJieProto* TianJieProto::default_instance_ = NULL;

TianJieProto* TianJieProto::New() const {
  return new TianJieProto;
}

void TianJieProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    is_hide_huan_hua_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  spell_pos_.Clear();
  spells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TianJieProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        break;
      }

      // repeated int32 spell_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        if (input->ExpectTag(106)) goto parse_spells;
        break;
      }

      // repeated .app.message.ActiveSpell spells = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_spells;
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_hide_huan_hua;
        break;
      }

      // optional bool is_hide_huan_hua = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide_huan_hua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_huan_hua_)));
          set_has_is_hide_huan_hua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TianJieProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bless_amount_clear_time(), output);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->spell_pos(i), output);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spells(i), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_hide_huan_hua(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TianJieProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bless_amount_clear_time(), target);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->spell_pos(i), target);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spells(i), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_hide_huan_hua(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TianJieProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 bless_amount = 10;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 11;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional bool is_hide_huan_hua = 24;
    if (has_is_hide_huan_hua()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 spell_pos = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_pos(i));
    }
    total_size += 1 * this->spell_pos_size() + data_size;
  }

  // repeated .app.message.ActiveSpell spells = 13;
  total_size += 1 * this->spells_size();
  for (int i = 0; i < this->spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TianJieProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TianJieProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TianJieProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TianJieProto::MergeFrom(const TianJieProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  spell_pos_.MergeFrom(from.spell_pos_);
  spells_.MergeFrom(from.spells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_is_hide_huan_hua()) {
      set_is_hide_huan_hua(from.is_hide_huan_hua());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TianJieProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TianJieProto::CopyFrom(const TianJieProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TianJieProto::IsInitialized() const {

  return true;
}

void TianJieProto::Swap(TianJieProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    spell_pos_.Swap(&other->spell_pos_);
    spells_.Swap(&other->spells_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(is_hide_huan_hua_, other->is_hide_huan_hua_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TianJieProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TianJieProto_descriptor_;
  metadata.reflection = TianJieProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BowProto::kBowFieldNumber;
const int BowProto::kArrowFieldNumber;
const int BowProto::kBlessAmountFieldNumber;
const int BowProto::kBlessAmountClearTimeFieldNumber;
const int BowProto::kResourceFieldNumber;
const int BowProto::kArrowStarFieldNumber;
const int BowProto::kArrowExpFieldNumber;
const int BowProto::kIsHideHuanHuaFieldNumber;
const int BowProto::kQianNengExtraMaxUseCountFieldNumber;
const int BowProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int BowProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int BowProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
const int BowProto::kQianNengUseCountFieldNumber;
const int BowProto::kHuanHuaUseCountFieldNumber;
#endif  // !_MSC_VER

BowProto::BowProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BowProto::InitAsDefaultInstance() {
}

BowProto::BowProto(const BowProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BowProto::SharedCtor() {
  _cached_size_ = 0;
  bow_ = 0;
  arrow_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  resource_ = 0;
  arrow_star_ = 0;
  arrow_exp_ = 0;
  is_hide_huan_hua_ = false;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BowProto::~BowProto() {
  SharedDtor();
}

void BowProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BowProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BowProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BowProto_descriptor_;
}

const BowProto& BowProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

BowProto* BowProto::default_instance_ = NULL;

BowProto* BowProto::New() const {
  return new BowProto;
}

void BowProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bow_ = 0;
    arrow_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    resource_ = 0;
    arrow_star_ = 0;
    arrow_exp_ = 0;
    is_hide_huan_hua_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BowProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_)));
          set_has_bow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arrow;
        break;
      }

      // optional int32 arrow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrow_)));
          set_has_arrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resource;
        break;
      }

      // optional int32 resource = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_arrow_star;
        break;
      }

      // optional int32 arrow_star = 20 [deprecated = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrow_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrow_star_)));
          set_has_arrow_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_arrow_exp;
        break;
      }

      // optional int32 arrow_exp = 21 [deprecated = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrow_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrow_exp_)));
          set_has_arrow_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_hide_huan_hua;
        break;
      }

      // optional bool is_hide_huan_hua = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide_huan_hua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_huan_hua_)));
          set_has_is_hide_huan_hua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BowProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bow = 1;
  if (has_bow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bow(), output);
  }

  // optional int32 arrow = 2;
  if (has_arrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arrow(), output);
  }

  // optional int32 bless_amount = 3;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 4;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bless_amount_clear_time(), output);
  }

  // optional int32 resource = 5;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resource(), output);
  }

  // optional int32 arrow_star = 20 [deprecated = true];
  if (has_arrow_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->arrow_star(), output);
  }

  // optional int32 arrow_exp = 21 [deprecated = true];
  if (has_arrow_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->arrow_exp(), output);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_hide_huan_hua(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  // optional int32 qian_neng_use_count = 31;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 32;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->huan_hua_use_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BowProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bow = 1;
  if (has_bow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bow(), target);
  }

  // optional int32 arrow = 2;
  if (has_arrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arrow(), target);
  }

  // optional int32 bless_amount = 3;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 4;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bless_amount_clear_time(), target);
  }

  // optional int32 resource = 5;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resource(), target);
  }

  // optional int32 arrow_star = 20 [deprecated = true];
  if (has_arrow_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->arrow_star(), target);
  }

  // optional int32 arrow_exp = 21 [deprecated = true];
  if (has_arrow_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->arrow_exp(), target);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_hide_huan_hua(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  // optional int32 qian_neng_use_count = 31;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 32;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->huan_hua_use_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BowProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bow = 1;
    if (has_bow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bow());
    }

    // optional int32 arrow = 2;
    if (has_arrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrow());
    }

    // optional int32 bless_amount = 3;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 4;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 resource = 5;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // optional int32 arrow_star = 20 [deprecated = true];
    if (has_arrow_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrow_star());
    }

    // optional int32 arrow_exp = 21 [deprecated = true];
    if (has_arrow_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrow_exp());
    }

    // optional bool is_hide_huan_hua = 24;
    if (has_is_hide_huan_hua()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

    // optional int32 qian_neng_use_count = 31;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 32;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BowProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BowProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BowProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BowProto::MergeFrom(const BowProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bow()) {
      set_bow(from.bow());
    }
    if (from.has_arrow()) {
      set_arrow(from.arrow());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_arrow_star()) {
      set_arrow_star(from.arrow_star());
    }
    if (from.has_arrow_exp()) {
      set_arrow_exp(from.arrow_exp());
    }
    if (from.has_is_hide_huan_hua()) {
      set_is_hide_huan_hua(from.is_hide_huan_hua());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BowProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BowProto::CopyFrom(const BowProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BowProto::IsInitialized() const {

  return true;
}

void BowProto::Swap(BowProto* other) {
  if (other != this) {
    std::swap(bow_, other->bow_);
    std::swap(arrow_, other->arrow_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(resource_, other->resource_);
    std::swap(arrow_star_, other->arrow_star_);
    std::swap(arrow_exp_, other->arrow_exp_);
    std::swap(is_hide_huan_hua_, other->is_hide_huan_hua_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BowProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BowProto_descriptor_;
  metadata.reflection = BowProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineXinfaSpellProto::kActiveSpellFieldNumber;
const int CombineXinfaSpellProto::kUsedTimesFieldNumber;
const int CombineXinfaSpellProto::kStaticDataFieldNumber;
const int CombineXinfaSpellProto::kDynamicDataFieldNumber;
#endif  // !_MSC_VER

CombineXinfaSpellProto::CombineXinfaSpellProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombineXinfaSpellProto::InitAsDefaultInstance() {
  active_spell_ = const_cast< ::app::message::ActiveSpell*>(&::app::message::ActiveSpell::default_instance());
}

CombineXinfaSpellProto::CombineXinfaSpellProto(const CombineXinfaSpellProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombineXinfaSpellProto::SharedCtor() {
  _cached_size_ = 0;
  active_spell_ = NULL;
  used_times_ = 0;
  static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dynamic_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineXinfaSpellProto::~CombineXinfaSpellProto() {
  SharedDtor();
}

void CombineXinfaSpellProto::SharedDtor() {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    delete static_data_;
  }
  if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_data_;
  }
  if (this != default_instance_) {
    delete active_spell_;
  }
}

void CombineXinfaSpellProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineXinfaSpellProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineXinfaSpellProto_descriptor_;
}

const CombineXinfaSpellProto& CombineXinfaSpellProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

CombineXinfaSpellProto* CombineXinfaSpellProto::default_instance_ = NULL;

CombineXinfaSpellProto* CombineXinfaSpellProto::New() const {
  return new CombineXinfaSpellProto;
}

void CombineXinfaSpellProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_active_spell()) {
      if (active_spell_ != NULL) active_spell_->::app::message::ActiveSpell::Clear();
    }
    used_times_ = 0;
    if (has_static_data()) {
      if (static_data_ != &::google::protobuf::internal::kEmptyString) {
        static_data_->clear();
      }
    }
    if (has_dynamic_data()) {
      if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
        dynamic_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineXinfaSpellProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.ActiveSpell active_spell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_spell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used_times;
        break;
      }

      // optional int32 used_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_times_)));
          set_has_used_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_static_data;
        break;
      }

      // optional bytes static_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_static_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_static_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dynamic_data;
        break;
      }

      // optional bytes dynamic_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamic_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dynamic_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombineXinfaSpellProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.ActiveSpell active_spell = 1;
  if (has_active_spell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->active_spell(), output);
  }

  // optional int32 used_times = 2;
  if (has_used_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->used_times(), output);
  }

  // optional bytes static_data = 3;
  if (has_static_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->static_data(), output);
  }

  // optional bytes dynamic_data = 4;
  if (has_dynamic_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->dynamic_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombineXinfaSpellProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.ActiveSpell active_spell = 1;
  if (has_active_spell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->active_spell(), target);
  }

  // optional int32 used_times = 2;
  if (has_used_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->used_times(), target);
  }

  // optional bytes static_data = 3;
  if (has_static_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->static_data(), target);
  }

  // optional bytes dynamic_data = 4;
  if (has_dynamic_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dynamic_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombineXinfaSpellProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.ActiveSpell active_spell = 1;
    if (has_active_spell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->active_spell());
    }

    // optional int32 used_times = 2;
    if (has_used_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_times());
    }

    // optional bytes static_data = 3;
    if (has_static_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->static_data());
    }

    // optional bytes dynamic_data = 4;
    if (has_dynamic_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dynamic_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineXinfaSpellProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineXinfaSpellProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineXinfaSpellProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineXinfaSpellProto::MergeFrom(const CombineXinfaSpellProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_spell()) {
      mutable_active_spell()->::app::message::ActiveSpell::MergeFrom(from.active_spell());
    }
    if (from.has_used_times()) {
      set_used_times(from.used_times());
    }
    if (from.has_static_data()) {
      set_static_data(from.static_data());
    }
    if (from.has_dynamic_data()) {
      set_dynamic_data(from.dynamic_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineXinfaSpellProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineXinfaSpellProto::CopyFrom(const CombineXinfaSpellProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineXinfaSpellProto::IsInitialized() const {

  return true;
}

void CombineXinfaSpellProto::Swap(CombineXinfaSpellProto* other) {
  if (other != this) {
    std::swap(active_spell_, other->active_spell_);
    std::swap(used_times_, other->used_times_);
    std::swap(static_data_, other->static_data_);
    std::swap(dynamic_data_, other->dynamic_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineXinfaSpellProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineXinfaSpellProto_descriptor_;
  metadata.reflection = CombineXinfaSpellProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightingAmountProto::kBaseFightingAmountFieldNumber;
const int FightingAmountProto::kEquipmentFightingAmountFieldNumber;
const int FightingAmountProto::kSpellFightingAmountFieldNumber;
const int FightingAmountProto::kGemFightingAmountFieldNumber;
const int FightingAmountProto::kMountFightingAmountFieldNumber;
const int FightingAmountProto::kBowFightingAmountFieldNumber;
const int FightingAmountProto::kSuperWeaponFightingAmountFieldNumber;
const int FightingAmountProto::kSuperArmFightingAmountFieldNumber;
const int FightingAmountProto::kSuperWeaponXinfaFightingAmountFieldNumber;
const int FightingAmountProto::kTianjieFightingAmountFieldNumber;
const int FightingAmountProto::kTianzuiFightingAmountFieldNumber;
const int FightingAmountProto::kShouCangFightingAmountFieldNumber;
const int FightingAmountProto::kDemonFightingAmountFieldNumber;
const int FightingAmountProto::kCloakFightingAmountFieldNumber;
const int FightingAmountProto::kPetFightingAmountFieldNumber;
const int FightingAmountProto::kYitianshenjueFightingAmountFieldNumber;
const int FightingAmountProto::kMoshiFightingAmountFieldNumber;
const int FightingAmountProto::kQianqiudajieFightingAmountFieldNumber;
const int FightingAmountProto::kJingJieFightingAmountFieldNumber;
const int FightingAmountProto::kMarriageWeaponAmountFieldNumber;
const int FightingAmountProto::kMarriageGoodsAmountFieldNumber;
const int FightingAmountProto::kChiHuoShenGongFightingAmountFieldNumber;
const int FightingAmountProto::kMoBingFightingAmountFieldNumber;
const int FightingAmountProto::kTianXieFightingAmountFieldNumber;
const int FightingAmountProto::kWuDaoFightingAmountFieldNumber;
const int FightingAmountProto::kShieldFightingAmountFieldNumber;
const int FightingAmountProto::kJiuWeiHuFightingAmountFieldNumber;
const int FightingAmountProto::kLingYuFightingAmountFieldNumber;
const int FightingAmountProto::kYuYiGeFightingAmountFieldNumber;
#endif  // !_MSC_VER

FightingAmountProto::FightingAmountProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightingAmountProto::InitAsDefaultInstance() {
}

FightingAmountProto::FightingAmountProto(const FightingAmountProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightingAmountProto::SharedCtor() {
  _cached_size_ = 0;
  base_fighting_amount_ = 0;
  equipment_fighting_amount_ = 0;
  spell_fighting_amount_ = 0;
  gem_fighting_amount_ = 0;
  mount_fighting_amount_ = 0;
  bow_fighting_amount_ = 0;
  super_weapon_fighting_amount_ = 0;
  super_arm_fighting_amount_ = 0;
  super_weapon_xinfa_fighting_amount_ = 0;
  tianjie_fighting_amount_ = 0;
  tianzui_fighting_amount_ = 0;
  shou_cang_fighting_amount_ = 0;
  demon_fighting_amount_ = 0;
  cloak_fighting_amount_ = 0;
  pet_fighting_amount_ = 0;
  yitianshenjue_fighting_amount_ = 0;
  moshi_fighting_amount_ = 0;
  qianqiudajie_fighting_amount_ = 0;
  jing_jie_fighting_amount_ = 0;
  marriage_weapon_amount_ = 0;
  marriage_goods_amount_ = 0;
  chi_huo_shen_gong_fighting_amount_ = 0;
  mo_bing_fighting_amount_ = 0;
  tian_xie_fighting_amount_ = 0;
  wu_dao_fighting_amount_ = 0;
  jiu_wei_hu_fighting_amount_ = 0;
  ling_yu_fighting_amount_ = 0;
  yu_yi_ge_fighting_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightingAmountProto::~FightingAmountProto() {
  SharedDtor();
}

void FightingAmountProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightingAmountProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightingAmountProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightingAmountProto_descriptor_;
}

const FightingAmountProto& FightingAmountProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

FightingAmountProto* FightingAmountProto::default_instance_ = NULL;

FightingAmountProto* FightingAmountProto::New() const {
  return new FightingAmountProto;
}

void FightingAmountProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_fighting_amount_ = 0;
    equipment_fighting_amount_ = 0;
    spell_fighting_amount_ = 0;
    gem_fighting_amount_ = 0;
    mount_fighting_amount_ = 0;
    bow_fighting_amount_ = 0;
    super_weapon_fighting_amount_ = 0;
    super_arm_fighting_amount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    super_weapon_xinfa_fighting_amount_ = 0;
    tianjie_fighting_amount_ = 0;
    tianzui_fighting_amount_ = 0;
    shou_cang_fighting_amount_ = 0;
    demon_fighting_amount_ = 0;
    cloak_fighting_amount_ = 0;
    pet_fighting_amount_ = 0;
    yitianshenjue_fighting_amount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    moshi_fighting_amount_ = 0;
    qianqiudajie_fighting_amount_ = 0;
    jing_jie_fighting_amount_ = 0;
    marriage_weapon_amount_ = 0;
    marriage_goods_amount_ = 0;
    chi_huo_shen_gong_fighting_amount_ = 0;
    mo_bing_fighting_amount_ = 0;
    tian_xie_fighting_amount_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    wu_dao_fighting_amount_ = 0;
    jiu_wei_hu_fighting_amount_ = 0;
    ling_yu_fighting_amount_ = 0;
    yu_yi_ge_fighting_amount_ = 0;
  }
  shield_fighting_amount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightingAmountProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 base_fighting_amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipment_fighting_amount;
        break;
      }

      // optional int32 equipment_fighting_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipment_fighting_amount_)));
          set_has_equipment_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spell_fighting_amount;
        break;
      }

      // optional int32 spell_fighting_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_fighting_amount_)));
          set_has_spell_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gem_fighting_amount;
        break;
      }

      // optional int32 gem_fighting_amount = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_fighting_amount_)));
          set_has_gem_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mount_fighting_amount;
        break;
      }

      // optional int32 mount_fighting_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_fighting_amount_)));
          set_has_mount_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bow_fighting_amount;
        break;
      }

      // optional int32 bow_fighting_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_fighting_amount_)));
          set_has_bow_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_super_weapon_fighting_amount;
        break;
      }

      // optional int32 super_weapon_fighting_amount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_weapon_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_weapon_fighting_amount_)));
          set_has_super_weapon_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_super_arm_fighting_amount;
        break;
      }

      // optional int32 super_arm_fighting_amount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_arm_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_arm_fighting_amount_)));
          set_has_super_arm_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_super_weapon_xinfa_fighting_amount;
        break;
      }

      // optional int32 super_weapon_xinfa_fighting_amount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_weapon_xinfa_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_weapon_xinfa_fighting_amount_)));
          set_has_super_weapon_xinfa_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tianjie_fighting_amount;
        break;
      }

      // optional int32 tianjie_fighting_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tianjie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tianjie_fighting_amount_)));
          set_has_tianjie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tianzui_fighting_amount;
        break;
      }

      // optional int32 tianzui_fighting_amount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tianzui_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tianzui_fighting_amount_)));
          set_has_tianzui_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_shou_cang_fighting_amount;
        break;
      }

      // optional int32 shou_cang_fighting_amount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shou_cang_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shou_cang_fighting_amount_)));
          set_has_shou_cang_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_demon_fighting_amount;
        break;
      }

      // optional int32 demon_fighting_amount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_demon_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demon_fighting_amount_)));
          set_has_demon_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cloak_fighting_amount;
        break;
      }

      // optional int32 cloak_fighting_amount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloak_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloak_fighting_amount_)));
          set_has_cloak_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pet_fighting_amount;
        break;
      }

      // optional int32 pet_fighting_amount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_fighting_amount_)));
          set_has_pet_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_yitianshenjue_fighting_amount;
        break;
      }

      // optional int32 yitianshenjue_fighting_amount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yitianshenjue_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yitianshenjue_fighting_amount_)));
          set_has_yitianshenjue_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_moshi_fighting_amount;
        break;
      }

      // optional int32 moshi_fighting_amount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moshi_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moshi_fighting_amount_)));
          set_has_moshi_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_qianqiudajie_fighting_amount;
        break;
      }

      // optional int32 qianqiudajie_fighting_amount = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qianqiudajie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qianqiudajie_fighting_amount_)));
          set_has_qianqiudajie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_jing_jie_fighting_amount;
        break;
      }

      // optional int32 jing_jie_fighting_amount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jing_jie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jing_jie_fighting_amount_)));
          set_has_jing_jie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_marriage_weapon_amount;
        break;
      }

      // optional int32 marriage_weapon_amount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_weapon_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marriage_weapon_amount_)));
          set_has_marriage_weapon_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_marriage_goods_amount;
        break;
      }

      // optional int32 marriage_goods_amount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_goods_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marriage_goods_amount_)));
          set_has_marriage_goods_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_chi_huo_shen_gong_fighting_amount;
        break;
      }

      // optional int32 chi_huo_shen_gong_fighting_amount = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_fighting_amount_)));
          set_has_chi_huo_shen_gong_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_mo_bing_fighting_amount;
        break;
      }

      // optional int32 mo_bing_fighting_amount = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_bing_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mo_bing_fighting_amount_)));
          set_has_mo_bing_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tian_xie_fighting_amount;
        break;
      }

      // optional int32 tian_xie_fighting_amount = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tian_xie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tian_xie_fighting_amount_)));
          set_has_tian_xie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_wu_dao_fighting_amount;
        break;
      }

      // optional int32 wu_dao_fighting_amount = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wu_dao_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wu_dao_fighting_amount_)));
          set_has_wu_dao_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_shield_fighting_amount;
        break;
      }

      // repeated int32 shield_fighting_amount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 208, input, this->mutable_shield_fighting_amount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shield_fighting_amount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_shield_fighting_amount;
        if (input->ExpectTag(216)) goto parse_jiu_wei_hu_fighting_amount;
        break;
      }

      // optional int32 jiu_wei_hu_fighting_amount = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiu_wei_hu_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiu_wei_hu_fighting_amount_)));
          set_has_jiu_wei_hu_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_ling_yu_fighting_amount;
        break;
      }

      // optional int32 ling_yu_fighting_amount = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ling_yu_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ling_yu_fighting_amount_)));
          set_has_ling_yu_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_yu_yi_ge_fighting_amount;
        break;
      }

      // optional int32 yu_yi_ge_fighting_amount = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yu_yi_ge_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yu_yi_ge_fighting_amount_)));
          set_has_yu_yi_ge_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightingAmountProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 base_fighting_amount = 1;
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->base_fighting_amount(), output);
  }

  // optional int32 equipment_fighting_amount = 2;
  if (has_equipment_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipment_fighting_amount(), output);
  }

  // optional int32 spell_fighting_amount = 3;
  if (has_spell_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spell_fighting_amount(), output);
  }

  // optional int32 gem_fighting_amount = 4 [deprecated = true];
  if (has_gem_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gem_fighting_amount(), output);
  }

  // optional int32 mount_fighting_amount = 5;
  if (has_mount_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mount_fighting_amount(), output);
  }

  // optional int32 bow_fighting_amount = 6;
  if (has_bow_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bow_fighting_amount(), output);
  }

  // optional int32 super_weapon_fighting_amount = 7;
  if (has_super_weapon_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->super_weapon_fighting_amount(), output);
  }

  // optional int32 super_arm_fighting_amount = 8;
  if (has_super_arm_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->super_arm_fighting_amount(), output);
  }

  // optional int32 super_weapon_xinfa_fighting_amount = 9;
  if (has_super_weapon_xinfa_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->super_weapon_xinfa_fighting_amount(), output);
  }

  // optional int32 tianjie_fighting_amount = 10;
  if (has_tianjie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tianjie_fighting_amount(), output);
  }

  // optional int32 tianzui_fighting_amount = 11;
  if (has_tianzui_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tianzui_fighting_amount(), output);
  }

  // optional int32 shou_cang_fighting_amount = 12;
  if (has_shou_cang_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->shou_cang_fighting_amount(), output);
  }

  // optional int32 demon_fighting_amount = 13;
  if (has_demon_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->demon_fighting_amount(), output);
  }

  // optional int32 cloak_fighting_amount = 14;
  if (has_cloak_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cloak_fighting_amount(), output);
  }

  // optional int32 pet_fighting_amount = 15;
  if (has_pet_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pet_fighting_amount(), output);
  }

  // optional int32 yitianshenjue_fighting_amount = 16;
  if (has_yitianshenjue_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->yitianshenjue_fighting_amount(), output);
  }

  // optional int32 moshi_fighting_amount = 17;
  if (has_moshi_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->moshi_fighting_amount(), output);
  }

  // optional int32 qianqiudajie_fighting_amount = 18;
  if (has_qianqiudajie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->qianqiudajie_fighting_amount(), output);
  }

  // optional int32 jing_jie_fighting_amount = 19;
  if (has_jing_jie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->jing_jie_fighting_amount(), output);
  }

  // optional int32 marriage_weapon_amount = 20;
  if (has_marriage_weapon_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->marriage_weapon_amount(), output);
  }

  // optional int32 marriage_goods_amount = 21;
  if (has_marriage_goods_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->marriage_goods_amount(), output);
  }

  // optional int32 chi_huo_shen_gong_fighting_amount = 22;
  if (has_chi_huo_shen_gong_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->chi_huo_shen_gong_fighting_amount(), output);
  }

  // optional int32 mo_bing_fighting_amount = 23;
  if (has_mo_bing_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->mo_bing_fighting_amount(), output);
  }

  // optional int32 tian_xie_fighting_amount = 24;
  if (has_tian_xie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tian_xie_fighting_amount(), output);
  }

  // optional int32 wu_dao_fighting_amount = 25;
  if (has_wu_dao_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->wu_dao_fighting_amount(), output);
  }

  // repeated int32 shield_fighting_amount = 26;
  for (int i = 0; i < this->shield_fighting_amount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      26, this->shield_fighting_amount(i), output);
  }

  // optional int32 jiu_wei_hu_fighting_amount = 27;
  if (has_jiu_wei_hu_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->jiu_wei_hu_fighting_amount(), output);
  }

  // optional int32 ling_yu_fighting_amount = 28;
  if (has_ling_yu_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ling_yu_fighting_amount(), output);
  }

  // optional int32 yu_yi_ge_fighting_amount = 29;
  if (has_yu_yi_ge_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->yu_yi_ge_fighting_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightingAmountProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 base_fighting_amount = 1;
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->base_fighting_amount(), target);
  }

  // optional int32 equipment_fighting_amount = 2;
  if (has_equipment_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipment_fighting_amount(), target);
  }

  // optional int32 spell_fighting_amount = 3;
  if (has_spell_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spell_fighting_amount(), target);
  }

  // optional int32 gem_fighting_amount = 4 [deprecated = true];
  if (has_gem_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gem_fighting_amount(), target);
  }

  // optional int32 mount_fighting_amount = 5;
  if (has_mount_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mount_fighting_amount(), target);
  }

  // optional int32 bow_fighting_amount = 6;
  if (has_bow_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bow_fighting_amount(), target);
  }

  // optional int32 super_weapon_fighting_amount = 7;
  if (has_super_weapon_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->super_weapon_fighting_amount(), target);
  }

  // optional int32 super_arm_fighting_amount = 8;
  if (has_super_arm_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->super_arm_fighting_amount(), target);
  }

  // optional int32 super_weapon_xinfa_fighting_amount = 9;
  if (has_super_weapon_xinfa_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->super_weapon_xinfa_fighting_amount(), target);
  }

  // optional int32 tianjie_fighting_amount = 10;
  if (has_tianjie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tianjie_fighting_amount(), target);
  }

  // optional int32 tianzui_fighting_amount = 11;
  if (has_tianzui_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tianzui_fighting_amount(), target);
  }

  // optional int32 shou_cang_fighting_amount = 12;
  if (has_shou_cang_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->shou_cang_fighting_amount(), target);
  }

  // optional int32 demon_fighting_amount = 13;
  if (has_demon_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->demon_fighting_amount(), target);
  }

  // optional int32 cloak_fighting_amount = 14;
  if (has_cloak_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cloak_fighting_amount(), target);
  }

  // optional int32 pet_fighting_amount = 15;
  if (has_pet_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pet_fighting_amount(), target);
  }

  // optional int32 yitianshenjue_fighting_amount = 16;
  if (has_yitianshenjue_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->yitianshenjue_fighting_amount(), target);
  }

  // optional int32 moshi_fighting_amount = 17;
  if (has_moshi_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->moshi_fighting_amount(), target);
  }

  // optional int32 qianqiudajie_fighting_amount = 18;
  if (has_qianqiudajie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->qianqiudajie_fighting_amount(), target);
  }

  // optional int32 jing_jie_fighting_amount = 19;
  if (has_jing_jie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->jing_jie_fighting_amount(), target);
  }

  // optional int32 marriage_weapon_amount = 20;
  if (has_marriage_weapon_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->marriage_weapon_amount(), target);
  }

  // optional int32 marriage_goods_amount = 21;
  if (has_marriage_goods_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->marriage_goods_amount(), target);
  }

  // optional int32 chi_huo_shen_gong_fighting_amount = 22;
  if (has_chi_huo_shen_gong_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->chi_huo_shen_gong_fighting_amount(), target);
  }

  // optional int32 mo_bing_fighting_amount = 23;
  if (has_mo_bing_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->mo_bing_fighting_amount(), target);
  }

  // optional int32 tian_xie_fighting_amount = 24;
  if (has_tian_xie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tian_xie_fighting_amount(), target);
  }

  // optional int32 wu_dao_fighting_amount = 25;
  if (has_wu_dao_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->wu_dao_fighting_amount(), target);
  }

  // repeated int32 shield_fighting_amount = 26;
  for (int i = 0; i < this->shield_fighting_amount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(26, this->shield_fighting_amount(i), target);
  }

  // optional int32 jiu_wei_hu_fighting_amount = 27;
  if (has_jiu_wei_hu_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->jiu_wei_hu_fighting_amount(), target);
  }

  // optional int32 ling_yu_fighting_amount = 28;
  if (has_ling_yu_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->ling_yu_fighting_amount(), target);
  }

  // optional int32 yu_yi_ge_fighting_amount = 29;
  if (has_yu_yi_ge_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->yu_yi_ge_fighting_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightingAmountProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 base_fighting_amount = 1;
    if (has_base_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 equipment_fighting_amount = 2;
    if (has_equipment_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipment_fighting_amount());
    }

    // optional int32 spell_fighting_amount = 3;
    if (has_spell_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_fighting_amount());
    }

    // optional int32 gem_fighting_amount = 4 [deprecated = true];
    if (has_gem_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_fighting_amount());
    }

    // optional int32 mount_fighting_amount = 5;
    if (has_mount_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_fighting_amount());
    }

    // optional int32 bow_fighting_amount = 6;
    if (has_bow_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bow_fighting_amount());
    }

    // optional int32 super_weapon_fighting_amount = 7;
    if (has_super_weapon_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_weapon_fighting_amount());
    }

    // optional int32 super_arm_fighting_amount = 8;
    if (has_super_arm_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_arm_fighting_amount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 super_weapon_xinfa_fighting_amount = 9;
    if (has_super_weapon_xinfa_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_weapon_xinfa_fighting_amount());
    }

    // optional int32 tianjie_fighting_amount = 10;
    if (has_tianjie_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tianjie_fighting_amount());
    }

    // optional int32 tianzui_fighting_amount = 11;
    if (has_tianzui_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tianzui_fighting_amount());
    }

    // optional int32 shou_cang_fighting_amount = 12;
    if (has_shou_cang_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shou_cang_fighting_amount());
    }

    // optional int32 demon_fighting_amount = 13;
    if (has_demon_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->demon_fighting_amount());
    }

    // optional int32 cloak_fighting_amount = 14;
    if (has_cloak_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloak_fighting_amount());
    }

    // optional int32 pet_fighting_amount = 15;
    if (has_pet_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_fighting_amount());
    }

    // optional int32 yitianshenjue_fighting_amount = 16;
    if (has_yitianshenjue_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yitianshenjue_fighting_amount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 moshi_fighting_amount = 17;
    if (has_moshi_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moshi_fighting_amount());
    }

    // optional int32 qianqiudajie_fighting_amount = 18;
    if (has_qianqiudajie_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qianqiudajie_fighting_amount());
    }

    // optional int32 jing_jie_fighting_amount = 19;
    if (has_jing_jie_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jing_jie_fighting_amount());
    }

    // optional int32 marriage_weapon_amount = 20;
    if (has_marriage_weapon_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marriage_weapon_amount());
    }

    // optional int32 marriage_goods_amount = 21;
    if (has_marriage_goods_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marriage_goods_amount());
    }

    // optional int32 chi_huo_shen_gong_fighting_amount = 22;
    if (has_chi_huo_shen_gong_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_fighting_amount());
    }

    // optional int32 mo_bing_fighting_amount = 23;
    if (has_mo_bing_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mo_bing_fighting_amount());
    }

    // optional int32 tian_xie_fighting_amount = 24;
    if (has_tian_xie_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tian_xie_fighting_amount());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 wu_dao_fighting_amount = 25;
    if (has_wu_dao_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wu_dao_fighting_amount());
    }

    // optional int32 jiu_wei_hu_fighting_amount = 27;
    if (has_jiu_wei_hu_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jiu_wei_hu_fighting_amount());
    }

    // optional int32 ling_yu_fighting_amount = 28;
    if (has_ling_yu_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ling_yu_fighting_amount());
    }

    // optional int32 yu_yi_ge_fighting_amount = 29;
    if (has_yu_yi_ge_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yu_yi_ge_fighting_amount());
    }

  }
  // repeated int32 shield_fighting_amount = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->shield_fighting_amount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shield_fighting_amount(i));
    }
    total_size += 2 * this->shield_fighting_amount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightingAmountProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightingAmountProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightingAmountProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightingAmountProto::MergeFrom(const FightingAmountProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  shield_fighting_amount_.MergeFrom(from.shield_fighting_amount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_equipment_fighting_amount()) {
      set_equipment_fighting_amount(from.equipment_fighting_amount());
    }
    if (from.has_spell_fighting_amount()) {
      set_spell_fighting_amount(from.spell_fighting_amount());
    }
    if (from.has_gem_fighting_amount()) {
      set_gem_fighting_amount(from.gem_fighting_amount());
    }
    if (from.has_mount_fighting_amount()) {
      set_mount_fighting_amount(from.mount_fighting_amount());
    }
    if (from.has_bow_fighting_amount()) {
      set_bow_fighting_amount(from.bow_fighting_amount());
    }
    if (from.has_super_weapon_fighting_amount()) {
      set_super_weapon_fighting_amount(from.super_weapon_fighting_amount());
    }
    if (from.has_super_arm_fighting_amount()) {
      set_super_arm_fighting_amount(from.super_arm_fighting_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_super_weapon_xinfa_fighting_amount()) {
      set_super_weapon_xinfa_fighting_amount(from.super_weapon_xinfa_fighting_amount());
    }
    if (from.has_tianjie_fighting_amount()) {
      set_tianjie_fighting_amount(from.tianjie_fighting_amount());
    }
    if (from.has_tianzui_fighting_amount()) {
      set_tianzui_fighting_amount(from.tianzui_fighting_amount());
    }
    if (from.has_shou_cang_fighting_amount()) {
      set_shou_cang_fighting_amount(from.shou_cang_fighting_amount());
    }
    if (from.has_demon_fighting_amount()) {
      set_demon_fighting_amount(from.demon_fighting_amount());
    }
    if (from.has_cloak_fighting_amount()) {
      set_cloak_fighting_amount(from.cloak_fighting_amount());
    }
    if (from.has_pet_fighting_amount()) {
      set_pet_fighting_amount(from.pet_fighting_amount());
    }
    if (from.has_yitianshenjue_fighting_amount()) {
      set_yitianshenjue_fighting_amount(from.yitianshenjue_fighting_amount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_moshi_fighting_amount()) {
      set_moshi_fighting_amount(from.moshi_fighting_amount());
    }
    if (from.has_qianqiudajie_fighting_amount()) {
      set_qianqiudajie_fighting_amount(from.qianqiudajie_fighting_amount());
    }
    if (from.has_jing_jie_fighting_amount()) {
      set_jing_jie_fighting_amount(from.jing_jie_fighting_amount());
    }
    if (from.has_marriage_weapon_amount()) {
      set_marriage_weapon_amount(from.marriage_weapon_amount());
    }
    if (from.has_marriage_goods_amount()) {
      set_marriage_goods_amount(from.marriage_goods_amount());
    }
    if (from.has_chi_huo_shen_gong_fighting_amount()) {
      set_chi_huo_shen_gong_fighting_amount(from.chi_huo_shen_gong_fighting_amount());
    }
    if (from.has_mo_bing_fighting_amount()) {
      set_mo_bing_fighting_amount(from.mo_bing_fighting_amount());
    }
    if (from.has_tian_xie_fighting_amount()) {
      set_tian_xie_fighting_amount(from.tian_xie_fighting_amount());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_wu_dao_fighting_amount()) {
      set_wu_dao_fighting_amount(from.wu_dao_fighting_amount());
    }
    if (from.has_jiu_wei_hu_fighting_amount()) {
      set_jiu_wei_hu_fighting_amount(from.jiu_wei_hu_fighting_amount());
    }
    if (from.has_ling_yu_fighting_amount()) {
      set_ling_yu_fighting_amount(from.ling_yu_fighting_amount());
    }
    if (from.has_yu_yi_ge_fighting_amount()) {
      set_yu_yi_ge_fighting_amount(from.yu_yi_ge_fighting_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightingAmountProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightingAmountProto::CopyFrom(const FightingAmountProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightingAmountProto::IsInitialized() const {

  return true;
}

void FightingAmountProto::Swap(FightingAmountProto* other) {
  if (other != this) {
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(equipment_fighting_amount_, other->equipment_fighting_amount_);
    std::swap(spell_fighting_amount_, other->spell_fighting_amount_);
    std::swap(gem_fighting_amount_, other->gem_fighting_amount_);
    std::swap(mount_fighting_amount_, other->mount_fighting_amount_);
    std::swap(bow_fighting_amount_, other->bow_fighting_amount_);
    std::swap(super_weapon_fighting_amount_, other->super_weapon_fighting_amount_);
    std::swap(super_arm_fighting_amount_, other->super_arm_fighting_amount_);
    std::swap(super_weapon_xinfa_fighting_amount_, other->super_weapon_xinfa_fighting_amount_);
    std::swap(tianjie_fighting_amount_, other->tianjie_fighting_amount_);
    std::swap(tianzui_fighting_amount_, other->tianzui_fighting_amount_);
    std::swap(shou_cang_fighting_amount_, other->shou_cang_fighting_amount_);
    std::swap(demon_fighting_amount_, other->demon_fighting_amount_);
    std::swap(cloak_fighting_amount_, other->cloak_fighting_amount_);
    std::swap(pet_fighting_amount_, other->pet_fighting_amount_);
    std::swap(yitianshenjue_fighting_amount_, other->yitianshenjue_fighting_amount_);
    std::swap(moshi_fighting_amount_, other->moshi_fighting_amount_);
    std::swap(qianqiudajie_fighting_amount_, other->qianqiudajie_fighting_amount_);
    std::swap(jing_jie_fighting_amount_, other->jing_jie_fighting_amount_);
    std::swap(marriage_weapon_amount_, other->marriage_weapon_amount_);
    std::swap(marriage_goods_amount_, other->marriage_goods_amount_);
    std::swap(chi_huo_shen_gong_fighting_amount_, other->chi_huo_shen_gong_fighting_amount_);
    std::swap(mo_bing_fighting_amount_, other->mo_bing_fighting_amount_);
    std::swap(tian_xie_fighting_amount_, other->tian_xie_fighting_amount_);
    std::swap(wu_dao_fighting_amount_, other->wu_dao_fighting_amount_);
    shield_fighting_amount_.Swap(&other->shield_fighting_amount_);
    std::swap(jiu_wei_hu_fighting_amount_, other->jiu_wei_hu_fighting_amount_);
    std::swap(ling_yu_fighting_amount_, other->ling_yu_fighting_amount_);
    std::swap(yu_yi_ge_fighting_amount_, other->yu_yi_ge_fighting_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightingAmountProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightingAmountProto_descriptor_;
  metadata.reflection = FightingAmountProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsContainerProto::kSizeFieldNumber;
const int GoodsContainerProto::kPosListFieldNumber;
const int GoodsContainerProto::kNextOpenSlotTimeFieldNumber;
const int GoodsContainerProto::kUnlockDatasFieldNumber;
const int GoodsContainerProto::kGoodsDataListFieldNumber;
const int GoodsContainerProto::kGoodsListFieldNumber;
const int GoodsContainerProto::kAccStatFieldNumber;
const int GoodsContainerProto::kInitCountFieldNumber;
const int GoodsContainerProto::kAccStartTimeFieldNumber;
#endif  // !_MSC_VER

GoodsContainerProto::GoodsContainerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsContainerProto::InitAsDefaultInstance() {
  acc_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

GoodsContainerProto::GoodsContainerProto(const GoodsContainerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsContainerProto::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  next_open_slot_time_ = GOOGLE_LONGLONG(0);
  acc_stat_ = NULL;
  init_count_ = 0;
  acc_start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsContainerProto::~GoodsContainerProto() {
  SharedDtor();
}

void GoodsContainerProto::SharedDtor() {
  if (this != default_instance_) {
    delete acc_stat_;
  }
}

void GoodsContainerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsContainerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsContainerProto_descriptor_;
}

const GoodsContainerProto& GoodsContainerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

GoodsContainerProto* GoodsContainerProto::default_instance_ = NULL;

GoodsContainerProto* GoodsContainerProto::New() const {
  return new GoodsContainerProto;
}

void GoodsContainerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
    next_open_slot_time_ = GOOGLE_LONGLONG(0);
    if (has_acc_stat()) {
      if (acc_stat_ != NULL) acc_stat_->::app::message::SpriteStatProto::Clear();
    }
    init_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    acc_start_time_ = GOOGLE_LONGLONG(0);
  }
  pos_list_.Clear();
  unlock_datas_.Clear();
  goods_data_list_.Clear();
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsContainerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_list;
        break;
      }

      // repeated int32 pos_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_list;
        if (input->ExpectTag(40)) goto parse_next_open_slot_time;
        break;
      }

      // optional int64 next_open_slot_time = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_open_slot_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_open_slot_time_)));
          set_has_next_open_slot_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unlock_datas;
        break;
      }

      // repeated .app.message.GoodsContainerUnlockProto unlock_datas = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlock_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unlock_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unlock_datas;
        if (input->ExpectTag(58)) goto parse_goods_data_list;
        break;
      }

      // repeated bytes goods_data_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_goods_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_goods_data_list;
        if (input->ExpectTag(66)) goto parse_goods_list;
        break;
      }

      // repeated bytes goods_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_goods_list;
        if (input->ExpectTag(74)) goto parse_acc_stat;
        break;
      }

      // optional .app.message.SpriteStatProto acc_stat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_init_count;
        break;
      }

      // optional int32 init_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_count_)));
          set_has_init_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_acc_start_time;
        break;
      }

      // optional int64 acc_start_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acc_start_time_)));
          set_has_acc_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsContainerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // repeated int32 pos_list = 3;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pos_list(i), output);
  }

  // optional int64 next_open_slot_time = 5 [deprecated = true];
  if (has_next_open_slot_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->next_open_slot_time(), output);
  }

  // repeated .app.message.GoodsContainerUnlockProto unlock_datas = 6;
  for (int i = 0; i < this->unlock_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->unlock_datas(i), output);
  }

  // repeated bytes goods_data_list = 7;
  for (int i = 0; i < this->goods_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->goods_data_list(i), output);
  }

  // repeated bytes goods_list = 8;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->goods_list(i), output);
  }

  // optional .app.message.SpriteStatProto acc_stat = 9;
  if (has_acc_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->acc_stat(), output);
  }

  // optional int32 init_count = 10;
  if (has_init_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->init_count(), output);
  }

  // optional int64 acc_start_time = 11;
  if (has_acc_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->acc_start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsContainerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // repeated int32 pos_list = 3;
  for (int i = 0; i < this->pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pos_list(i), target);
  }

  // optional int64 next_open_slot_time = 5 [deprecated = true];
  if (has_next_open_slot_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->next_open_slot_time(), target);
  }

  // repeated .app.message.GoodsContainerUnlockProto unlock_datas = 6;
  for (int i = 0; i < this->unlock_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->unlock_datas(i), target);
  }

  // repeated bytes goods_data_list = 7;
  for (int i = 0; i < this->goods_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->goods_data_list(i), target);
  }

  // repeated bytes goods_list = 8;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->goods_list(i), target);
  }

  // optional .app.message.SpriteStatProto acc_stat = 9;
  if (has_acc_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->acc_stat(), target);
  }

  // optional int32 init_count = 10;
  if (has_init_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->init_count(), target);
  }

  // optional int64 acc_start_time = 11;
  if (has_acc_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->acc_start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsContainerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int64 next_open_slot_time = 5 [deprecated = true];
    if (has_next_open_slot_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_open_slot_time());
    }

    // optional .app.message.SpriteStatProto acc_stat = 9;
    if (has_acc_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc_stat());
    }

    // optional int32 init_count = 10;
    if (has_init_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 acc_start_time = 11;
    if (has_acc_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->acc_start_time());
    }

  }
  // repeated int32 pos_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos_list(i));
    }
    total_size += 1 * this->pos_list_size() + data_size;
  }

  // repeated .app.message.GoodsContainerUnlockProto unlock_datas = 6;
  total_size += 1 * this->unlock_datas_size();
  for (int i = 0; i < this->unlock_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unlock_datas(i));
  }

  // repeated bytes goods_data_list = 7;
  total_size += 1 * this->goods_data_list_size();
  for (int i = 0; i < this->goods_data_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->goods_data_list(i));
  }

  // repeated bytes goods_list = 8;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsContainerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsContainerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsContainerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsContainerProto::MergeFrom(const GoodsContainerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_list_.MergeFrom(from.pos_list_);
  unlock_datas_.MergeFrom(from.unlock_datas_);
  goods_data_list_.MergeFrom(from.goods_data_list_);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_next_open_slot_time()) {
      set_next_open_slot_time(from.next_open_slot_time());
    }
    if (from.has_acc_stat()) {
      mutable_acc_stat()->::app::message::SpriteStatProto::MergeFrom(from.acc_stat());
    }
    if (from.has_init_count()) {
      set_init_count(from.init_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_acc_start_time()) {
      set_acc_start_time(from.acc_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsContainerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsContainerProto::CopyFrom(const GoodsContainerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsContainerProto::IsInitialized() const {

  return true;
}

void GoodsContainerProto::Swap(GoodsContainerProto* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    pos_list_.Swap(&other->pos_list_);
    std::swap(next_open_slot_time_, other->next_open_slot_time_);
    unlock_datas_.Swap(&other->unlock_datas_);
    goods_data_list_.Swap(&other->goods_data_list_);
    goods_list_.Swap(&other->goods_list_);
    std::swap(acc_stat_, other->acc_stat_);
    std::swap(init_count_, other->init_count_);
    std::swap(acc_start_time_, other->acc_start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsContainerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsContainerProto_descriptor_;
  metadata.reflection = GoodsContainerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsContainerUnlockProto::kPosFieldNumber;
const int GoodsContainerUnlockProto::kUnlockTimeFieldNumber;
const int GoodsContainerUnlockProto::kUnlockCostFieldNumber;
const int GoodsContainerUnlockProto::kExpFieldNumber;
const int GoodsContainerUnlockProto::kSpriteStatFieldNumber;
const int GoodsContainerUnlockProto::kOpenSlotCountFieldNumber;
#endif  // !_MSC_VER

GoodsContainerUnlockProto::GoodsContainerUnlockProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsContainerUnlockProto::InitAsDefaultInstance() {
  sprite_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

GoodsContainerUnlockProto::GoodsContainerUnlockProto(const GoodsContainerUnlockProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsContainerUnlockProto::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  unlock_time_ = GOOGLE_LONGLONG(0);
  unlock_cost_ = 0;
  exp_ = 0;
  sprite_stat_ = NULL;
  open_slot_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsContainerUnlockProto::~GoodsContainerUnlockProto() {
  SharedDtor();
}

void GoodsContainerUnlockProto::SharedDtor() {
  if (this != default_instance_) {
    delete sprite_stat_;
  }
}

void GoodsContainerUnlockProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsContainerUnlockProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsContainerUnlockProto_descriptor_;
}

const GoodsContainerUnlockProto& GoodsContainerUnlockProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

GoodsContainerUnlockProto* GoodsContainerUnlockProto::default_instance_ = NULL;

GoodsContainerUnlockProto* GoodsContainerUnlockProto::New() const {
  return new GoodsContainerUnlockProto;
}

void GoodsContainerUnlockProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    unlock_time_ = GOOGLE_LONGLONG(0);
    unlock_cost_ = 0;
    exp_ = 0;
    if (has_sprite_stat()) {
      if (sprite_stat_ != NULL) sprite_stat_->::app::message::SpriteStatProto::Clear();
    }
    open_slot_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsContainerUnlockProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unlock_time;
        break;
      }

      // optional int64 unlock_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unlock_time_)));
          set_has_unlock_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock_cost;
        break;
      }

      // optional int32 unlock_cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_cost_)));
          set_has_unlock_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sprite_stat;
        break;
      }

      // optional .app.message.SpriteStatProto sprite_stat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprite_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_open_slot_count;
        break;
      }

      // optional int32 open_slot_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_slot_count_)));
          set_has_open_slot_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsContainerUnlockProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1 [deprecated = true];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int64 unlock_time = 2;
  if (has_unlock_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->unlock_time(), output);
  }

  // optional int32 unlock_cost = 3;
  if (has_unlock_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlock_cost(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional .app.message.SpriteStatProto sprite_stat = 5;
  if (has_sprite_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sprite_stat(), output);
  }

  // optional int32 open_slot_count = 6;
  if (has_open_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->open_slot_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsContainerUnlockProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1 [deprecated = true];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int64 unlock_time = 2;
  if (has_unlock_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->unlock_time(), target);
  }

  // optional int32 unlock_cost = 3;
  if (has_unlock_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlock_cost(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional .app.message.SpriteStatProto sprite_stat = 5;
  if (has_sprite_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sprite_stat(), target);
  }

  // optional int32 open_slot_count = 6;
  if (has_open_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->open_slot_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsContainerUnlockProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1 [deprecated = true];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int64 unlock_time = 2;
    if (has_unlock_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unlock_time());
    }

    // optional int32 unlock_cost = 3;
    if (has_unlock_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock_cost());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional .app.message.SpriteStatProto sprite_stat = 5;
    if (has_sprite_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sprite_stat());
    }

    // optional int32 open_slot_count = 6;
    if (has_open_slot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_slot_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsContainerUnlockProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsContainerUnlockProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsContainerUnlockProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsContainerUnlockProto::MergeFrom(const GoodsContainerUnlockProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_unlock_time()) {
      set_unlock_time(from.unlock_time());
    }
    if (from.has_unlock_cost()) {
      set_unlock_cost(from.unlock_cost());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_sprite_stat()) {
      mutable_sprite_stat()->::app::message::SpriteStatProto::MergeFrom(from.sprite_stat());
    }
    if (from.has_open_slot_count()) {
      set_open_slot_count(from.open_slot_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsContainerUnlockProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsContainerUnlockProto::CopyFrom(const GoodsContainerUnlockProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsContainerUnlockProto::IsInitialized() const {

  return true;
}

void GoodsContainerUnlockProto::Swap(GoodsContainerUnlockProto* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(unlock_time_, other->unlock_time_);
    std::swap(unlock_cost_, other->unlock_cost_);
    std::swap(exp_, other->exp_);
    std::swap(sprite_stat_, other->sprite_stat_);
    std::swap(open_slot_count_, other->open_slot_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsContainerUnlockProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsContainerUnlockProto_descriptor_;
  metadata.reflection = GoodsContainerUnlockProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroClearedProto::kDoingDailyTaskFieldNumber;
const int HeroClearedProto::kDoingGuildTaskFieldNumber;
#endif  // !_MSC_VER

HeroClearedProto::HeroClearedProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroClearedProto::InitAsDefaultInstance() {
  doing_daily_task_ = const_cast< ::app::message::DailyTaskProto*>(&::app::message::DailyTaskProto::default_instance());
  doing_guild_task_ = const_cast< ::app::message::GuildTaskProto*>(&::app::message::GuildTaskProto::default_instance());
}

HeroClearedProto::HeroClearedProto(const HeroClearedProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroClearedProto::SharedCtor() {
  _cached_size_ = 0;
  doing_daily_task_ = NULL;
  doing_guild_task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroClearedProto::~HeroClearedProto() {
  SharedDtor();
}

void HeroClearedProto::SharedDtor() {
  if (this != default_instance_) {
    delete doing_daily_task_;
    delete doing_guild_task_;
  }
}

void HeroClearedProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroClearedProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroClearedProto_descriptor_;
}

const HeroClearedProto& HeroClearedProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroClearedProto* HeroClearedProto::default_instance_ = NULL;

HeroClearedProto* HeroClearedProto::New() const {
  return new HeroClearedProto;
}

void HeroClearedProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_doing_daily_task()) {
      if (doing_daily_task_ != NULL) doing_daily_task_->::app::message::DailyTaskProto::Clear();
    }
    if (has_doing_guild_task()) {
      if (doing_guild_task_ != NULL) doing_guild_task_->::app::message::GuildTaskProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroClearedProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.DailyTaskProto doing_daily_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doing_daily_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_doing_guild_task;
        break;
      }

      // optional .app.message.GuildTaskProto doing_guild_task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doing_guild_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doing_guild_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroClearedProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.DailyTaskProto doing_daily_task = 1;
  if (has_doing_daily_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doing_daily_task(), output);
  }

  // optional .app.message.GuildTaskProto doing_guild_task = 2;
  if (has_doing_guild_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doing_guild_task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroClearedProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.DailyTaskProto doing_daily_task = 1;
  if (has_doing_daily_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->doing_daily_task(), target);
  }

  // optional .app.message.GuildTaskProto doing_guild_task = 2;
  if (has_doing_guild_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->doing_guild_task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroClearedProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.DailyTaskProto doing_daily_task = 1;
    if (has_doing_daily_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doing_daily_task());
    }

    // optional .app.message.GuildTaskProto doing_guild_task = 2;
    if (has_doing_guild_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doing_guild_task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroClearedProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroClearedProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroClearedProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroClearedProto::MergeFrom(const HeroClearedProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doing_daily_task()) {
      mutable_doing_daily_task()->::app::message::DailyTaskProto::MergeFrom(from.doing_daily_task());
    }
    if (from.has_doing_guild_task()) {
      mutable_doing_guild_task()->::app::message::GuildTaskProto::MergeFrom(from.doing_guild_task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroClearedProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroClearedProto::CopyFrom(const HeroClearedProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroClearedProto::IsInitialized() const {

  return true;
}

void HeroClearedProto::Swap(HeroClearedProto* other) {
  if (other != this) {
    std::swap(doing_daily_task_, other->doing_daily_task_);
    std::swap(doing_guild_task_, other->doing_guild_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroClearedProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroClearedProto_descriptor_;
  metadata.reflection = HeroClearedProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeResultProto::kResultFieldNumber;
const int ChallengeResultProto::kIdFieldNumber;
const int ChallengeResultProto::kNameFieldNumber;
const int ChallengeResultProto::kRaceFieldNumber;
const int ChallengeResultProto::kEquipmentResourceFieldNumber;
const int ChallengeResultProto::kTotalStatFieldNumber;
const int ChallengeResultProto::kSpellTypesFieldNumber;
const int ChallengeResultProto::kLevelFieldNumber;
#endif  // !_MSC_VER

ChallengeResultProto::ChallengeResultProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallengeResultProto::InitAsDefaultInstance() {
  total_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

ChallengeResultProto::ChallengeResultProto(const ChallengeResultProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengeResultProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  race_ = 0;
  equipment_resource_ = GOOGLE_LONGLONG(0);
  total_stat_ = NULL;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeResultProto::~ChallengeResultProto() {
  SharedDtor();
}

void ChallengeResultProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete total_stat_;
  }
}

void ChallengeResultProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeResultProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeResultProto_descriptor_;
}

const ChallengeResultProto& ChallengeResultProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ChallengeResultProto* ChallengeResultProto::default_instance_ = NULL;

ChallengeResultProto* ChallengeResultProto::New() const {
  return new ChallengeResultProto;
}

void ChallengeResultProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    race_ = 0;
    equipment_resource_ = GOOGLE_LONGLONG(0);
    if (has_total_stat()) {
      if (total_stat_ != NULL) total_stat_->::app::message::SpriteStatProto::Clear();
    }
    level_ = 0;
  }
  spell_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeResultProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_race;
        break;
      }

      // optional int32 race = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equipment_resource;
        break;
      }

      // optional int64 equipment_resource = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipment_resource_)));
          set_has_equipment_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_total_stat;
        break;
      }

      // optional .app.message.SpriteStatProto total_stat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_spell_types;
        break;
      }

      // repeated int32 spell_types = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_spell_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_spell_types;
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallengeResultProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 race = 4;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->race(), output);
  }

  // optional int64 equipment_resource = 5;
  if (has_equipment_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->equipment_resource(), output);
  }

  // optional .app.message.SpriteStatProto total_stat = 6;
  if (has_total_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->total_stat(), output);
  }

  // repeated int32 spell_types = 7;
  for (int i = 0; i < this->spell_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->spell_types(i), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallengeResultProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 race = 4;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->race(), target);
  }

  // optional int64 equipment_resource = 5;
  if (has_equipment_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->equipment_resource(), target);
  }

  // optional .app.message.SpriteStatProto total_stat = 6;
  if (has_total_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->total_stat(), target);
  }

  // repeated int32 spell_types = 7;
  for (int i = 0; i < this->spell_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->spell_types(i), target);
  }

  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallengeResultProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 race = 4;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int64 equipment_resource = 5;
    if (has_equipment_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipment_resource());
    }

    // optional .app.message.SpriteStatProto total_stat = 6;
    if (has_total_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_stat());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated int32 spell_types = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_types(i));
    }
    total_size += 1 * this->spell_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeResultProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeResultProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeResultProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeResultProto::MergeFrom(const ChallengeResultProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  spell_types_.MergeFrom(from.spell_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_equipment_resource()) {
      set_equipment_resource(from.equipment_resource());
    }
    if (from.has_total_stat()) {
      mutable_total_stat()->::app::message::SpriteStatProto::MergeFrom(from.total_stat());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeResultProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeResultProto::CopyFrom(const ChallengeResultProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeResultProto::IsInitialized() const {

  return true;
}

void ChallengeResultProto::Swap(ChallengeResultProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(race_, other->race_);
    std::swap(equipment_resource_, other->equipment_resource_);
    std::swap(total_stat_, other->total_stat_);
    spell_types_.Swap(&other->spell_types_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeResultProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeResultProto_descriptor_;
  metadata.reflection = ChallengeResultProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherHeroProto::kIdFieldNumber;
const int OtherHeroProto::kNameFieldNumber;
const int OtherHeroProto::kLevelFieldNumber;
const int OtherHeroProto::kRaceFieldNumber;
const int OtherHeroProto::kFightingAmountFieldNumber;
const int OtherHeroProto::kTotalStatFieldNumber;
const int OtherHeroProto::kEquipedPosFieldNumber;
const int OtherHeroProto::kEquipmentDatasFieldNumber;
const int OtherHeroProto::kEquipmentsFieldNumber;
const int OtherHeroProto::kEquipmentResourcesFieldNumber;
const int OtherHeroProto::kExpFieldNumber;
const int OtherHeroProto::kUpgradeExpFieldNumber;
const int OtherHeroProto::kLifeFieldNumber;
const int OtherHeroProto::kMaxLifeFieldNumber;
const int OtherHeroProto::kRealAirFieldNumber;
const int OtherHeroProto::kStaminaFieldNumber;
const int OtherHeroProto::kMaxStaminaFieldNumber;
const int OtherHeroProto::kGuildNameFieldNumber;
const int OtherHeroProto::kVipExpFieldNumber;
const int OtherHeroProto::kGuildLiLianFieldNumber;
const int OtherHeroProto::kSuperArmFieldNumber;
const int OtherHeroProto::kCloakFieldNumber;
const int OtherHeroProto::kAchievementFieldNumber;
const int OtherHeroProto::kTianZuiFieldNumber;
const int OtherHeroProto::kTianJieFieldNumber;
const int OtherHeroProto::kPetFieldNumber;
const int OtherHeroProto::kGemsFieldNumber;
const int OtherHeroProto::kBowFieldNumber;
const int OtherHeroProto::kPkAmountFieldNumber;
const int OtherHeroProto::kMountFieldNumber;
const int OtherHeroProto::kEquipmentFightingAmountFieldNumber;
const int OtherHeroProto::kSpellFightingAmountFieldNumber;
const int OtherHeroProto::kSuperArmFightingAmountFieldNumber;
const int OtherHeroProto::kBaseFightingAmountFieldNumber;
const int OtherHeroProto::kGemFightingAmountFieldNumber;
const int OtherHeroProto::kMountFightingAmountFieldNumber;
const int OtherHeroProto::kBowFightingAmountFieldNumber;
const int OtherHeroProto::kSuperWeaponFightingAmountFieldNumber;
const int OtherHeroProto::kSuperWeaponXinfaFightingAmountFieldNumber;
const int OtherHeroProto::kTianjieFightingAmountFieldNumber;
const int OtherHeroProto::kTianzuiFightingAmountFieldNumber;
const int OtherHeroProto::kShouCangFightingAmountFieldNumber;
const int OtherHeroProto::kDemonFightingAmountFieldNumber;
const int OtherHeroProto::kCloakFightingAmountFieldNumber;
const int OtherHeroProto::kPetFightingAmountFieldNumber;
const int OtherHeroProto::kYitianshenjueFightingAmountFieldNumber;
const int OtherHeroProto::kMoshiFightingAmountFieldNumber;
const int OtherHeroProto::kJingJieFightingAmountFieldNumber;
const int OtherHeroProto::kQianqiudajieFightingAmountFieldNumber;
const int OtherHeroProto::kMarriageWeaponAmountFieldNumber;
const int OtherHeroProto::kMarriageGoodsAmountFieldNumber;
const int OtherHeroProto::kChiHuoShenGongFightingAmountFieldNumber;
const int OtherHeroProto::kMoBingFightingAmountFieldNumber;
const int OtherHeroProto::kTianXieFightingAmountFieldNumber;
const int OtherHeroProto::kWuDaoFightingAmountFieldNumber;
const int OtherHeroProto::kYuYiGeFightingAmountFieldNumber;
const int OtherHeroProto::kMoFangFightingAmountFieldNumber;
const int OtherHeroProto::kQianNengUseCountFieldNumber;
const int OtherHeroProto::kHuanHuaUseCountFieldNumber;
const int OtherHeroProto::kMarriageTargetIdFieldNumber;
const int OtherHeroProto::kMarriageTargetNameFieldNumber;
const int OtherHeroProto::kMarriageGoodsIdFieldNumber;
const int OtherHeroProto::kShouCangFieldNumber;
const int OtherHeroProto::kArenaFightingTeamNameBytesFieldNumber;
const int OtherHeroProto::kShieldFightingAmountFieldNumber;
const int OtherHeroProto::kJianDaoFieldNumber;
const int OtherHeroProto::kBowTongLingDisplayIdFieldNumber;
const int OtherHeroProto::kPetTongLingDisplayIdFieldNumber;
#endif  // !_MSC_VER

OtherHeroProto::OtherHeroProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherHeroProto::InitAsDefaultInstance() {
  total_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  super_arm_ = const_cast< ::app::message::HeroSuperArmProto*>(&::app::message::HeroSuperArmProto::default_instance());
  cloak_ = const_cast< ::app::message::CloakProto*>(&::app::message::CloakProto::default_instance());
  achievement_ = const_cast< ::app::message::AchievementInfoProto*>(&::app::message::AchievementInfoProto::default_instance());
  tian_zui_ = const_cast< ::app::message::TianZuiProto*>(&::app::message::TianZuiProto::default_instance());
  tian_jie_ = const_cast< ::app::message::TianJieProto*>(&::app::message::TianJieProto::default_instance());
  pet_ = const_cast< ::app::message::PetProto*>(&::app::message::PetProto::default_instance());
  bow_ = const_cast< ::app::message::BowProto*>(&::app::message::BowProto::default_instance());
  mount_ = const_cast< ::app::message::MountProto*>(&::app::message::MountProto::default_instance());
  shou_cang_ = const_cast< ::app::message::ShouCangProto*>(&::app::message::ShouCangProto::default_instance());
}

OtherHeroProto::OtherHeroProto(const OtherHeroProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherHeroProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  race_ = 0;
  fighting_amount_ = 0;
  total_stat_ = NULL;
  equipment_resources_ = GOOGLE_LONGLONG(0);
  exp_ = GOOGLE_LONGLONG(0);
  upgrade_exp_ = GOOGLE_LONGLONG(0);
  life_ = GOOGLE_LONGLONG(0);
  max_life_ = GOOGLE_LONGLONG(0);
  real_air_ = 0;
  stamina_ = 0;
  max_stamina_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_exp_ = 0;
  guild_li_lian_ = 0;
  super_arm_ = NULL;
  cloak_ = NULL;
  achievement_ = NULL;
  tian_zui_ = NULL;
  tian_jie_ = NULL;
  pet_ = NULL;
  bow_ = NULL;
  pk_amount_ = 0;
  mount_ = NULL;
  equipment_fighting_amount_ = 0;
  spell_fighting_amount_ = 0;
  super_arm_fighting_amount_ = 0;
  base_fighting_amount_ = 0;
  gem_fighting_amount_ = 0;
  mount_fighting_amount_ = 0;
  bow_fighting_amount_ = 0;
  super_weapon_fighting_amount_ = 0;
  super_weapon_xinfa_fighting_amount_ = 0;
  tianjie_fighting_amount_ = 0;
  tianzui_fighting_amount_ = 0;
  shou_cang_fighting_amount_ = 0;
  demon_fighting_amount_ = 0;
  cloak_fighting_amount_ = 0;
  pet_fighting_amount_ = 0;
  yitianshenjue_fighting_amount_ = 0;
  moshi_fighting_amount_ = 0;
  jing_jie_fighting_amount_ = 0;
  qianqiudajie_fighting_amount_ = 0;
  marriage_weapon_amount_ = 0;
  marriage_goods_amount_ = 0;
  chi_huo_shen_gong_fighting_amount_ = 0;
  mo_bing_fighting_amount_ = 0;
  tian_xie_fighting_amount_ = 0;
  wu_dao_fighting_amount_ = 0;
  yu_yi_ge_fighting_amount_ = 0;
  mo_fang_fighting_amount_ = 0;
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  marriage_target_id_ = GOOGLE_LONGLONG(0);
  marriage_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  marriage_goods_id_ = 0;
  shou_cang_ = NULL;
  arena_fighting_team_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jian_dao_ = 0;
  bow_tong_ling_display_id_ = 0;
  pet_tong_ling_display_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherHeroProto::~OtherHeroProto() {
  SharedDtor();
}

void OtherHeroProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (marriage_target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete marriage_target_name_;
  }
  if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete arena_fighting_team_name_bytes_;
  }
  if (this != default_instance_) {
    delete total_stat_;
    delete super_arm_;
    delete cloak_;
    delete achievement_;
    delete tian_zui_;
    delete tian_jie_;
    delete pet_;
    delete bow_;
    delete mount_;
    delete shou_cang_;
  }
}

void OtherHeroProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherHeroProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherHeroProto_descriptor_;
}

const OtherHeroProto& OtherHeroProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

OtherHeroProto* OtherHeroProto::default_instance_ = NULL;

OtherHeroProto* OtherHeroProto::New() const {
  return new OtherHeroProto;
}

void OtherHeroProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    race_ = 0;
    fighting_amount_ = 0;
    if (has_total_stat()) {
      if (total_stat_ != NULL) total_stat_->::app::message::SpriteStatProto::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    equipment_resources_ = GOOGLE_LONGLONG(0);
    exp_ = GOOGLE_LONGLONG(0);
    upgrade_exp_ = GOOGLE_LONGLONG(0);
    life_ = GOOGLE_LONGLONG(0);
    max_life_ = GOOGLE_LONGLONG(0);
    real_air_ = 0;
    stamina_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_stamina_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    vip_exp_ = 0;
    guild_li_lian_ = 0;
    if (has_super_arm()) {
      if (super_arm_ != NULL) super_arm_->::app::message::HeroSuperArmProto::Clear();
    }
    if (has_cloak()) {
      if (cloak_ != NULL) cloak_->::app::message::CloakProto::Clear();
    }
    if (has_achievement()) {
      if (achievement_ != NULL) achievement_->::app::message::AchievementInfoProto::Clear();
    }
    if (has_tian_zui()) {
      if (tian_zui_ != NULL) tian_zui_->::app::message::TianZuiProto::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_tian_jie()) {
      if (tian_jie_ != NULL) tian_jie_->::app::message::TianJieProto::Clear();
    }
    if (has_pet()) {
      if (pet_ != NULL) pet_->::app::message::PetProto::Clear();
    }
    if (has_bow()) {
      if (bow_ != NULL) bow_->::app::message::BowProto::Clear();
    }
    pk_amount_ = 0;
    if (has_mount()) {
      if (mount_ != NULL) mount_->::app::message::MountProto::Clear();
    }
    equipment_fighting_amount_ = 0;
    spell_fighting_amount_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    super_arm_fighting_amount_ = 0;
    base_fighting_amount_ = 0;
    gem_fighting_amount_ = 0;
    mount_fighting_amount_ = 0;
    bow_fighting_amount_ = 0;
    super_weapon_fighting_amount_ = 0;
    super_weapon_xinfa_fighting_amount_ = 0;
    tianjie_fighting_amount_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    tianzui_fighting_amount_ = 0;
    shou_cang_fighting_amount_ = 0;
    demon_fighting_amount_ = 0;
    cloak_fighting_amount_ = 0;
    pet_fighting_amount_ = 0;
    yitianshenjue_fighting_amount_ = 0;
    moshi_fighting_amount_ = 0;
    jing_jie_fighting_amount_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    qianqiudajie_fighting_amount_ = 0;
    marriage_weapon_amount_ = 0;
    marriage_goods_amount_ = 0;
    chi_huo_shen_gong_fighting_amount_ = 0;
    mo_bing_fighting_amount_ = 0;
    tian_xie_fighting_amount_ = 0;
    wu_dao_fighting_amount_ = 0;
    yu_yi_ge_fighting_amount_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    mo_fang_fighting_amount_ = 0;
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    marriage_target_id_ = GOOGLE_LONGLONG(0);
    if (has_marriage_target_name()) {
      if (marriage_target_name_ != &::google::protobuf::internal::kEmptyString) {
        marriage_target_name_->clear();
      }
    }
    marriage_goods_id_ = 0;
    if (has_shou_cang()) {
      if (shou_cang_ != NULL) shou_cang_->::app::message::ShouCangProto::Clear();
    }
    if (has_arena_fighting_team_name_bytes()) {
      if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
        arena_fighting_team_name_bytes_->clear();
      }
    }
  }
  if (_has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    jian_dao_ = 0;
    bow_tong_ling_display_id_ = 0;
    pet_tong_ling_display_id_ = 0;
  }
  equiped_pos_.Clear();
  equipment_datas_.Clear();
  equipments_.Clear();
  gems_.Clear();
  shield_fighting_amount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherHeroProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_race;
        break;
      }

      // optional int32 race = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fighting_amount;
        break;
      }

      // optional int32 fighting_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_amount_)));
          set_has_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_total_stat;
        break;
      }

      // optional .app.message.SpriteStatProto total_stat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equiped_pos;
        break;
      }

      // repeated int32 equiped_pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiped_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_equiped_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equiped_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equiped_pos;
        if (input->ExpectTag(66)) goto parse_equipment_datas;
        break;
      }

      // repeated .app.message.EquipmentDataProto equipment_datas = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equipment_datas;
        if (input->ExpectTag(74)) goto parse_equipments;
        break;
      }

      // repeated .app.message.EquipmentProto equipments = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equipments;
        if (input->ExpectTag(80)) goto parse_equipment_resources;
        break;
      }

      // optional int64 equipment_resources = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_resources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipment_resources_)));
          set_has_equipment_resources();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_exp;
        break;
      }

      // optional int64 exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_upgrade_exp;
        break;
      }

      // optional int64 upgrade_exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upgrade_exp_)));
          set_has_upgrade_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_life;
        break;
      }

      // optional int64 life = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &life_)));
          set_has_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_life;
        break;
      }

      // optional int64 max_life = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_life_)));
          set_has_max_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_real_air;
        break;
      }

      // optional int32 real_air = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_air:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_air_)));
          set_has_real_air();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_max_stamina;
        break;
      }

      // optional int32 max_stamina = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_stamina_)));
          set_has_max_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_guild_name;
        break;
      }

      // optional bytes guild_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_vip_exp;
        break;
      }

      // optional int32 vip_exp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_guild_li_lian;
        break;
      }

      // optional int32 guild_li_lian = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_li_lian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_li_lian_)));
          set_has_guild_li_lian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_super_arm;
        break;
      }

      // optional .app.message.HeroSuperArmProto super_arm = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_cloak;
        break;
      }

      // optional .app.message.CloakProto cloak = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_achievement;
        break;
      }

      // optional .app.message.AchievementInfoProto achievement = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(682)) goto parse_tian_zui;
        break;
      }

      // optional .app.message.TianZuiProto tian_zui = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tian_zui:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tian_zui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(690)) goto parse_tian_jie;
        break;
      }

      // optional .app.message.TianJieProto tian_jie = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tian_jie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tian_jie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(698)) goto parse_pet;
        break;
      }

      // optional .app.message.PetProto pet = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_gems;
        break;
      }

      // repeated int32 gems = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 704, input, this->mutable_gems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_gems;
        if (input->ExpectTag(714)) goto parse_bow;
        break;
      }

      // optional .app.message.BowProto bow = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_pk_amount;
        break;
      }

      // optional int32 pk_amount = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_amount_)));
          set_has_pk_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_mount;
        break;
      }

      // optional .app.message.MountProto mount = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_equipment_fighting_amount;
        break;
      }

      // optional int32 equipment_fighting_amount = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipment_fighting_amount_)));
          set_has_equipment_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_spell_fighting_amount;
        break;
      }

      // optional int32 spell_fighting_amount = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_fighting_amount_)));
          set_has_spell_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(752)) goto parse_super_arm_fighting_amount;
        break;
      }

      // optional int32 super_arm_fighting_amount = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_arm_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_arm_fighting_amount_)));
          set_has_super_arm_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(760)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(768)) goto parse_gem_fighting_amount;
        break;
      }

      // optional int32 gem_fighting_amount = 96 [deprecated = true];
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_fighting_amount_)));
          set_has_gem_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_mount_fighting_amount;
        break;
      }

      // optional int32 mount_fighting_amount = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_fighting_amount_)));
          set_has_mount_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(784)) goto parse_bow_fighting_amount;
        break;
      }

      // optional int32 bow_fighting_amount = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_fighting_amount_)));
          set_has_bow_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(792)) goto parse_super_weapon_fighting_amount;
        break;
      }

      // optional int32 super_weapon_fighting_amount = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_weapon_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_weapon_fighting_amount_)));
          set_has_super_weapon_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_super_weapon_xinfa_fighting_amount;
        break;
      }

      // optional int32 super_weapon_xinfa_fighting_amount = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_weapon_xinfa_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_weapon_xinfa_fighting_amount_)));
          set_has_super_weapon_xinfa_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_tianjie_fighting_amount;
        break;
      }

      // optional int32 tianjie_fighting_amount = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tianjie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tianjie_fighting_amount_)));
          set_has_tianjie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_tianzui_fighting_amount;
        break;
      }

      // optional int32 tianzui_fighting_amount = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tianzui_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tianzui_fighting_amount_)));
          set_has_tianzui_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_shou_cang_fighting_amount;
        break;
      }

      // optional int32 shou_cang_fighting_amount = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shou_cang_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shou_cang_fighting_amount_)));
          set_has_shou_cang_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_demon_fighting_amount;
        break;
      }

      // optional int32 demon_fighting_amount = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_demon_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demon_fighting_amount_)));
          set_has_demon_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_cloak_fighting_amount;
        break;
      }

      // optional int32 cloak_fighting_amount = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloak_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloak_fighting_amount_)));
          set_has_cloak_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(848)) goto parse_pet_fighting_amount;
        break;
      }

      // optional int32 pet_fighting_amount = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_fighting_amount_)));
          set_has_pet_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(856)) goto parse_yitianshenjue_fighting_amount;
        break;
      }

      // optional int32 yitianshenjue_fighting_amount = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yitianshenjue_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yitianshenjue_fighting_amount_)));
          set_has_yitianshenjue_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(864)) goto parse_moshi_fighting_amount;
        break;
      }

      // optional int32 moshi_fighting_amount = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moshi_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moshi_fighting_amount_)));
          set_has_moshi_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(872)) goto parse_marriage_target_id;
        break;
      }

      // optional int64 marriage_target_id = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marriage_target_id_)));
          set_has_marriage_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_marriage_target_name;
        break;
      }

      // optional bytes marriage_target_name = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marriage_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marriage_target_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(888)) goto parse_marriage_goods_id;
        break;
      }

      // optional int32 marriage_goods_id = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marriage_goods_id_)));
          set_has_marriage_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(896)) goto parse_jing_jie_fighting_amount;
        break;
      }

      // optional int32 jing_jie_fighting_amount = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jing_jie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jing_jie_fighting_amount_)));
          set_has_jing_jie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(904)) goto parse_marriage_weapon_amount;
        break;
      }

      // optional int32 marriage_weapon_amount = 113;
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_weapon_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marriage_weapon_amount_)));
          set_has_marriage_weapon_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(912)) goto parse_marriage_goods_amount;
        break;
      }

      // optional int32 marriage_goods_amount = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_goods_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marriage_goods_amount_)));
          set_has_marriage_goods_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(920)) goto parse_chi_huo_shen_gong_fighting_amount;
        break;
      }

      // optional int32 chi_huo_shen_gong_fighting_amount = 115;
      case 115: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_huo_shen_gong_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_huo_shen_gong_fighting_amount_)));
          set_has_chi_huo_shen_gong_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(928)) goto parse_mo_bing_fighting_amount;
        break;
      }

      // optional int32 mo_bing_fighting_amount = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_bing_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mo_bing_fighting_amount_)));
          set_has_mo_bing_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(936)) goto parse_tian_xie_fighting_amount;
        break;
      }

      // optional int32 tian_xie_fighting_amount = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tian_xie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tian_xie_fighting_amount_)));
          set_has_tian_xie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(944)) goto parse_wu_dao_fighting_amount;
        break;
      }

      // optional int32 wu_dao_fighting_amount = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wu_dao_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wu_dao_fighting_amount_)));
          set_has_wu_dao_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(952)) goto parse_yu_yi_ge_fighting_amount;
        break;
      }

      // optional int32 yu_yi_ge_fighting_amount = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yu_yi_ge_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yu_yi_ge_fighting_amount_)));
          set_has_yu_yi_ge_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_mo_fang_fighting_amount;
        break;
      }

      // optional int32 mo_fang_fighting_amount = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_fang_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mo_fang_fighting_amount_)));
          set_has_mo_fang_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_shou_cang;
        break;
      }

      // optional .app.message.ShouCangProto shou_cang = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shou_cang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shou_cang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_qianqiudajie_fighting_amount;
        break;
      }

      // optional int32 qianqiudajie_fighting_amount = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qianqiudajie_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qianqiudajie_fighting_amount_)));
          set_has_qianqiudajie_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1618)) goto parse_arena_fighting_team_name_bytes;
        break;
      }

      // optional bytes arena_fighting_team_name_bytes = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_fighting_team_name_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arena_fighting_team_name_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1624)) goto parse_shield_fighting_amount;
        break;
      }

      // repeated int32 shield_fighting_amount = 203;
      case 203: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1624, input, this->mutable_shield_fighting_amount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shield_fighting_amount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1624)) goto parse_shield_fighting_amount;
        if (input->ExpectTag(1632)) goto parse_jian_dao;
        break;
      }

      // optional int32 jian_dao = 204;
      case 204: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jian_dao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jian_dao_)));
          set_has_jian_dao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1640)) goto parse_bow_tong_ling_display_id;
        break;
      }

      // optional int32 bow_tong_ling_display_id = 205;
      case 205: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_tong_ling_display_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_tong_ling_display_id_)));
          set_has_bow_tong_ling_display_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1648)) goto parse_pet_tong_ling_display_id;
        break;
      }

      // optional int32 pet_tong_ling_display_id = 206;
      case 206: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_tong_ling_display_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_tong_ling_display_id_)));
          set_has_pet_tong_ling_display_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherHeroProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 race = 4;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->race(), output);
  }

  // optional int32 fighting_amount = 5;
  if (has_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fighting_amount(), output);
  }

  // optional .app.message.SpriteStatProto total_stat = 6;
  if (has_total_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->total_stat(), output);
  }

  // repeated int32 equiped_pos = 7;
  for (int i = 0; i < this->equiped_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->equiped_pos(i), output);
  }

  // repeated .app.message.EquipmentDataProto equipment_datas = 8;
  for (int i = 0; i < this->equipment_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equipment_datas(i), output);
  }

  // repeated .app.message.EquipmentProto equipments = 9;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equipments(i), output);
  }

  // optional int64 equipment_resources = 10;
  if (has_equipment_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->equipment_resources(), output);
  }

  // optional int64 exp = 11;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->exp(), output);
  }

  // optional int64 upgrade_exp = 12;
  if (has_upgrade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->upgrade_exp(), output);
  }

  // optional int64 life = 13;
  if (has_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->life(), output);
  }

  // optional int64 max_life = 14;
  if (has_max_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->max_life(), output);
  }

  // optional int32 real_air = 15;
  if (has_real_air()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->real_air(), output);
  }

  // optional int32 stamina = 16;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->stamina(), output);
  }

  // optional int32 max_stamina = 17;
  if (has_max_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->max_stamina(), output);
  }

  // optional bytes guild_name = 18;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->guild_name(), output);
  }

  // optional int32 vip_exp = 19;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->vip_exp(), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional int32 guild_li_lian = 30;
  if (has_guild_li_lian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->guild_li_lian(), output);
  }

  // optional .app.message.HeroSuperArmProto super_arm = 31;
  if (has_super_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->super_arm(), output);
  }

  // optional .app.message.CloakProto cloak = 32;
  if (has_cloak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->cloak(), output);
  }

  // optional .app.message.AchievementInfoProto achievement = 80;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->achievement(), output);
  }

  // optional .app.message.TianZuiProto tian_zui = 85;
  if (has_tian_zui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85, this->tian_zui(), output);
  }

  // optional .app.message.TianJieProto tian_jie = 86;
  if (has_tian_jie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86, this->tian_jie(), output);
  }

  // optional .app.message.PetProto pet = 87;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      87, this->pet(), output);
  }

  // repeated int32 gems = 88;
  for (int i = 0; i < this->gems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      88, this->gems(i), output);
  }

  // optional .app.message.BowProto bow = 89;
  if (has_bow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      89, this->bow(), output);
  }

  // optional int32 pk_amount = 90;
  if (has_pk_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->pk_amount(), output);
  }

  // optional .app.message.MountProto mount = 91;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91, this->mount(), output);
  }

  // optional int32 equipment_fighting_amount = 92;
  if (has_equipment_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(92, this->equipment_fighting_amount(), output);
  }

  // optional int32 spell_fighting_amount = 93;
  if (has_spell_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(93, this->spell_fighting_amount(), output);
  }

  // optional int32 super_arm_fighting_amount = 94;
  if (has_super_arm_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(94, this->super_arm_fighting_amount(), output);
  }

  // optional int32 base_fighting_amount = 95;
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(95, this->base_fighting_amount(), output);
  }

  // optional int32 gem_fighting_amount = 96 [deprecated = true];
  if (has_gem_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(96, this->gem_fighting_amount(), output);
  }

  // optional int32 mount_fighting_amount = 97;
  if (has_mount_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->mount_fighting_amount(), output);
  }

  // optional int32 bow_fighting_amount = 98;
  if (has_bow_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(98, this->bow_fighting_amount(), output);
  }

  // optional int32 super_weapon_fighting_amount = 99;
  if (has_super_weapon_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->super_weapon_fighting_amount(), output);
  }

  // optional int32 super_weapon_xinfa_fighting_amount = 100;
  if (has_super_weapon_xinfa_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->super_weapon_xinfa_fighting_amount(), output);
  }

  // optional int32 tianjie_fighting_amount = 101;
  if (has_tianjie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->tianjie_fighting_amount(), output);
  }

  // optional int32 tianzui_fighting_amount = 102;
  if (has_tianzui_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->tianzui_fighting_amount(), output);
  }

  // optional int32 shou_cang_fighting_amount = 103;
  if (has_shou_cang_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->shou_cang_fighting_amount(), output);
  }

  // optional int32 demon_fighting_amount = 104;
  if (has_demon_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(104, this->demon_fighting_amount(), output);
  }

  // optional int32 cloak_fighting_amount = 105;
  if (has_cloak_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(105, this->cloak_fighting_amount(), output);
  }

  // optional int32 pet_fighting_amount = 106;
  if (has_pet_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(106, this->pet_fighting_amount(), output);
  }

  // optional int32 yitianshenjue_fighting_amount = 107;
  if (has_yitianshenjue_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(107, this->yitianshenjue_fighting_amount(), output);
  }

  // optional int32 moshi_fighting_amount = 108;
  if (has_moshi_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(108, this->moshi_fighting_amount(), output);
  }

  // optional int64 marriage_target_id = 109;
  if (has_marriage_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(109, this->marriage_target_id(), output);
  }

  // optional bytes marriage_target_name = 110;
  if (has_marriage_target_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      110, this->marriage_target_name(), output);
  }

  // optional int32 marriage_goods_id = 111;
  if (has_marriage_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(111, this->marriage_goods_id(), output);
  }

  // optional int32 jing_jie_fighting_amount = 112;
  if (has_jing_jie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(112, this->jing_jie_fighting_amount(), output);
  }

  // optional int32 marriage_weapon_amount = 113;
  if (has_marriage_weapon_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(113, this->marriage_weapon_amount(), output);
  }

  // optional int32 marriage_goods_amount = 114;
  if (has_marriage_goods_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(114, this->marriage_goods_amount(), output);
  }

  // optional int32 chi_huo_shen_gong_fighting_amount = 115;
  if (has_chi_huo_shen_gong_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(115, this->chi_huo_shen_gong_fighting_amount(), output);
  }

  // optional int32 mo_bing_fighting_amount = 116;
  if (has_mo_bing_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(116, this->mo_bing_fighting_amount(), output);
  }

  // optional int32 tian_xie_fighting_amount = 117;
  if (has_tian_xie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(117, this->tian_xie_fighting_amount(), output);
  }

  // optional int32 wu_dao_fighting_amount = 118;
  if (has_wu_dao_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(118, this->wu_dao_fighting_amount(), output);
  }

  // optional int32 yu_yi_ge_fighting_amount = 119;
  if (has_yu_yi_ge_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(119, this->yu_yi_ge_fighting_amount(), output);
  }

  // optional int32 mo_fang_fighting_amount = 120;
  if (has_mo_fang_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(120, this->mo_fang_fighting_amount(), output);
  }

  // optional .app.message.ShouCangProto shou_cang = 200;
  if (has_shou_cang()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->shou_cang(), output);
  }

  // optional int32 qianqiudajie_fighting_amount = 201;
  if (has_qianqiudajie_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->qianqiudajie_fighting_amount(), output);
  }

  // optional bytes arena_fighting_team_name_bytes = 202;
  if (has_arena_fighting_team_name_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      202, this->arena_fighting_team_name_bytes(), output);
  }

  // repeated int32 shield_fighting_amount = 203;
  for (int i = 0; i < this->shield_fighting_amount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      203, this->shield_fighting_amount(i), output);
  }

  // optional int32 jian_dao = 204;
  if (has_jian_dao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(204, this->jian_dao(), output);
  }

  // optional int32 bow_tong_ling_display_id = 205;
  if (has_bow_tong_ling_display_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(205, this->bow_tong_ling_display_id(), output);
  }

  // optional int32 pet_tong_ling_display_id = 206;
  if (has_pet_tong_ling_display_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(206, this->pet_tong_ling_display_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherHeroProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 race = 4;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->race(), target);
  }

  // optional int32 fighting_amount = 5;
  if (has_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fighting_amount(), target);
  }

  // optional .app.message.SpriteStatProto total_stat = 6;
  if (has_total_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->total_stat(), target);
  }

  // repeated int32 equiped_pos = 7;
  for (int i = 0; i < this->equiped_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->equiped_pos(i), target);
  }

  // repeated .app.message.EquipmentDataProto equipment_datas = 8;
  for (int i = 0; i < this->equipment_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equipment_datas(i), target);
  }

  // repeated .app.message.EquipmentProto equipments = 9;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equipments(i), target);
  }

  // optional int64 equipment_resources = 10;
  if (has_equipment_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->equipment_resources(), target);
  }

  // optional int64 exp = 11;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->exp(), target);
  }

  // optional int64 upgrade_exp = 12;
  if (has_upgrade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->upgrade_exp(), target);
  }

  // optional int64 life = 13;
  if (has_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->life(), target);
  }

  // optional int64 max_life = 14;
  if (has_max_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->max_life(), target);
  }

  // optional int32 real_air = 15;
  if (has_real_air()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->real_air(), target);
  }

  // optional int32 stamina = 16;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->stamina(), target);
  }

  // optional int32 max_stamina = 17;
  if (has_max_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->max_stamina(), target);
  }

  // optional bytes guild_name = 18;
  if (has_guild_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->guild_name(), target);
  }

  // optional int32 vip_exp = 19;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->vip_exp(), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional int32 guild_li_lian = 30;
  if (has_guild_li_lian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->guild_li_lian(), target);
  }

  // optional .app.message.HeroSuperArmProto super_arm = 31;
  if (has_super_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->super_arm(), target);
  }

  // optional .app.message.CloakProto cloak = 32;
  if (has_cloak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->cloak(), target);
  }

  // optional .app.message.AchievementInfoProto achievement = 80;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->achievement(), target);
  }

  // optional .app.message.TianZuiProto tian_zui = 85;
  if (has_tian_zui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, this->tian_zui(), target);
  }

  // optional .app.message.TianJieProto tian_jie = 86;
  if (has_tian_jie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        86, this->tian_jie(), target);
  }

  // optional .app.message.PetProto pet = 87;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        87, this->pet(), target);
  }

  // repeated int32 gems = 88;
  for (int i = 0; i < this->gems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(88, this->gems(i), target);
  }

  // optional .app.message.BowProto bow = 89;
  if (has_bow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        89, this->bow(), target);
  }

  // optional int32 pk_amount = 90;
  if (has_pk_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->pk_amount(), target);
  }

  // optional .app.message.MountProto mount = 91;
  if (has_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        91, this->mount(), target);
  }

  // optional int32 equipment_fighting_amount = 92;
  if (has_equipment_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(92, this->equipment_fighting_amount(), target);
  }

  // optional int32 spell_fighting_amount = 93;
  if (has_spell_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(93, this->spell_fighting_amount(), target);
  }

  // optional int32 super_arm_fighting_amount = 94;
  if (has_super_arm_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(94, this->super_arm_fighting_amount(), target);
  }

  // optional int32 base_fighting_amount = 95;
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(95, this->base_fighting_amount(), target);
  }

  // optional int32 gem_fighting_amount = 96 [deprecated = true];
  if (has_gem_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(96, this->gem_fighting_amount(), target);
  }

  // optional int32 mount_fighting_amount = 97;
  if (has_mount_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(97, this->mount_fighting_amount(), target);
  }

  // optional int32 bow_fighting_amount = 98;
  if (has_bow_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(98, this->bow_fighting_amount(), target);
  }

  // optional int32 super_weapon_fighting_amount = 99;
  if (has_super_weapon_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(99, this->super_weapon_fighting_amount(), target);
  }

  // optional int32 super_weapon_xinfa_fighting_amount = 100;
  if (has_super_weapon_xinfa_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->super_weapon_xinfa_fighting_amount(), target);
  }

  // optional int32 tianjie_fighting_amount = 101;
  if (has_tianjie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(101, this->tianjie_fighting_amount(), target);
  }

  // optional int32 tianzui_fighting_amount = 102;
  if (has_tianzui_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->tianzui_fighting_amount(), target);
  }

  // optional int32 shou_cang_fighting_amount = 103;
  if (has_shou_cang_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->shou_cang_fighting_amount(), target);
  }

  // optional int32 demon_fighting_amount = 104;
  if (has_demon_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(104, this->demon_fighting_amount(), target);
  }

  // optional int32 cloak_fighting_amount = 105;
  if (has_cloak_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(105, this->cloak_fighting_amount(), target);
  }

  // optional int32 pet_fighting_amount = 106;
  if (has_pet_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(106, this->pet_fighting_amount(), target);
  }

  // optional int32 yitianshenjue_fighting_amount = 107;
  if (has_yitianshenjue_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(107, this->yitianshenjue_fighting_amount(), target);
  }

  // optional int32 moshi_fighting_amount = 108;
  if (has_moshi_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(108, this->moshi_fighting_amount(), target);
  }

  // optional int64 marriage_target_id = 109;
  if (has_marriage_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(109, this->marriage_target_id(), target);
  }

  // optional bytes marriage_target_name = 110;
  if (has_marriage_target_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        110, this->marriage_target_name(), target);
  }

  // optional int32 marriage_goods_id = 111;
  if (has_marriage_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(111, this->marriage_goods_id(), target);
  }

  // optional int32 jing_jie_fighting_amount = 112;
  if (has_jing_jie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(112, this->jing_jie_fighting_amount(), target);
  }

  // optional int32 marriage_weapon_amount = 113;
  if (has_marriage_weapon_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(113, this->marriage_weapon_amount(), target);
  }

  // optional int32 marriage_goods_amount = 114;
  if (has_marriage_goods_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(114, this->marriage_goods_amount(), target);
  }

  // optional int32 chi_huo_shen_gong_fighting_amount = 115;
  if (has_chi_huo_shen_gong_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(115, this->chi_huo_shen_gong_fighting_amount(), target);
  }

  // optional int32 mo_bing_fighting_amount = 116;
  if (has_mo_bing_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(116, this->mo_bing_fighting_amount(), target);
  }

  // optional int32 tian_xie_fighting_amount = 117;
  if (has_tian_xie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(117, this->tian_xie_fighting_amount(), target);
  }

  // optional int32 wu_dao_fighting_amount = 118;
  if (has_wu_dao_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(118, this->wu_dao_fighting_amount(), target);
  }

  // optional int32 yu_yi_ge_fighting_amount = 119;
  if (has_yu_yi_ge_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(119, this->yu_yi_ge_fighting_amount(), target);
  }

  // optional int32 mo_fang_fighting_amount = 120;
  if (has_mo_fang_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(120, this->mo_fang_fighting_amount(), target);
  }

  // optional .app.message.ShouCangProto shou_cang = 200;
  if (has_shou_cang()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->shou_cang(), target);
  }

  // optional int32 qianqiudajie_fighting_amount = 201;
  if (has_qianqiudajie_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->qianqiudajie_fighting_amount(), target);
  }

  // optional bytes arena_fighting_team_name_bytes = 202;
  if (has_arena_fighting_team_name_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        202, this->arena_fighting_team_name_bytes(), target);
  }

  // repeated int32 shield_fighting_amount = 203;
  for (int i = 0; i < this->shield_fighting_amount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(203, this->shield_fighting_amount(i), target);
  }

  // optional int32 jian_dao = 204;
  if (has_jian_dao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(204, this->jian_dao(), target);
  }

  // optional int32 bow_tong_ling_display_id = 205;
  if (has_bow_tong_ling_display_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(205, this->bow_tong_ling_display_id(), target);
  }

  // optional int32 pet_tong_ling_display_id = 206;
  if (has_pet_tong_ling_display_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(206, this->pet_tong_ling_display_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherHeroProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 race = 4;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 fighting_amount = 5;
    if (has_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting_amount());
    }

    // optional .app.message.SpriteStatProto total_stat = 6;
    if (has_total_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_stat());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int64 equipment_resources = 10;
    if (has_equipment_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipment_resources());
    }

    // optional int64 exp = 11;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int64 upgrade_exp = 12;
    if (has_upgrade_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upgrade_exp());
    }

    // optional int64 life = 13;
    if (has_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->life());
    }

    // optional int64 max_life = 14;
    if (has_max_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_life());
    }

    // optional int32 real_air = 15;
    if (has_real_air()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_air());
    }

    // optional int32 stamina = 16;
    if (has_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 max_stamina = 17;
    if (has_max_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_stamina());
    }

    // optional bytes guild_name = 18;
    if (has_guild_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_name());
    }

    // optional int32 vip_exp = 19;
    if (has_vip_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp());
    }

    // optional int32 guild_li_lian = 30;
    if (has_guild_li_lian()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_li_lian());
    }

    // optional .app.message.HeroSuperArmProto super_arm = 31;
    if (has_super_arm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super_arm());
    }

    // optional .app.message.CloakProto cloak = 32;
    if (has_cloak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cloak());
    }

    // optional .app.message.AchievementInfoProto achievement = 80;
    if (has_achievement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement());
    }

    // optional .app.message.TianZuiProto tian_zui = 85;
    if (has_tian_zui()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tian_zui());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .app.message.TianJieProto tian_jie = 86;
    if (has_tian_jie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tian_jie());
    }

    // optional .app.message.PetProto pet = 87;
    if (has_pet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional .app.message.BowProto bow = 89;
    if (has_bow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bow());
    }

    // optional int32 pk_amount = 90;
    if (has_pk_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk_amount());
    }

    // optional .app.message.MountProto mount = 91;
    if (has_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mount());
    }

    // optional int32 equipment_fighting_amount = 92;
    if (has_equipment_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipment_fighting_amount());
    }

    // optional int32 spell_fighting_amount = 93;
    if (has_spell_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell_fighting_amount());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 super_arm_fighting_amount = 94;
    if (has_super_arm_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_arm_fighting_amount());
    }

    // optional int32 base_fighting_amount = 95;
    if (has_base_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 gem_fighting_amount = 96 [deprecated = true];
    if (has_gem_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_fighting_amount());
    }

    // optional int32 mount_fighting_amount = 97;
    if (has_mount_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_fighting_amount());
    }

    // optional int32 bow_fighting_amount = 98;
    if (has_bow_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bow_fighting_amount());
    }

    // optional int32 super_weapon_fighting_amount = 99;
    if (has_super_weapon_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_weapon_fighting_amount());
    }

    // optional int32 super_weapon_xinfa_fighting_amount = 100;
    if (has_super_weapon_xinfa_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_weapon_xinfa_fighting_amount());
    }

    // optional int32 tianjie_fighting_amount = 101;
    if (has_tianjie_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tianjie_fighting_amount());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 tianzui_fighting_amount = 102;
    if (has_tianzui_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tianzui_fighting_amount());
    }

    // optional int32 shou_cang_fighting_amount = 103;
    if (has_shou_cang_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shou_cang_fighting_amount());
    }

    // optional int32 demon_fighting_amount = 104;
    if (has_demon_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->demon_fighting_amount());
    }

    // optional int32 cloak_fighting_amount = 105;
    if (has_cloak_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloak_fighting_amount());
    }

    // optional int32 pet_fighting_amount = 106;
    if (has_pet_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_fighting_amount());
    }

    // optional int32 yitianshenjue_fighting_amount = 107;
    if (has_yitianshenjue_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yitianshenjue_fighting_amount());
    }

    // optional int32 moshi_fighting_amount = 108;
    if (has_moshi_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moshi_fighting_amount());
    }

    // optional int32 jing_jie_fighting_amount = 112;
    if (has_jing_jie_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jing_jie_fighting_amount());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 qianqiudajie_fighting_amount = 201;
    if (has_qianqiudajie_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qianqiudajie_fighting_amount());
    }

    // optional int32 marriage_weapon_amount = 113;
    if (has_marriage_weapon_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marriage_weapon_amount());
    }

    // optional int32 marriage_goods_amount = 114;
    if (has_marriage_goods_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marriage_goods_amount());
    }

    // optional int32 chi_huo_shen_gong_fighting_amount = 115;
    if (has_chi_huo_shen_gong_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_huo_shen_gong_fighting_amount());
    }

    // optional int32 mo_bing_fighting_amount = 116;
    if (has_mo_bing_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mo_bing_fighting_amount());
    }

    // optional int32 tian_xie_fighting_amount = 117;
    if (has_tian_xie_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tian_xie_fighting_amount());
    }

    // optional int32 wu_dao_fighting_amount = 118;
    if (has_wu_dao_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wu_dao_fighting_amount());
    }

    // optional int32 yu_yi_ge_fighting_amount = 119;
    if (has_yu_yi_ge_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yu_yi_ge_fighting_amount());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 mo_fang_fighting_amount = 120;
    if (has_mo_fang_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mo_fang_fighting_amount());
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional int64 marriage_target_id = 109;
    if (has_marriage_target_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marriage_target_id());
    }

    // optional bytes marriage_target_name = 110;
    if (has_marriage_target_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marriage_target_name());
    }

    // optional int32 marriage_goods_id = 111;
    if (has_marriage_goods_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marriage_goods_id());
    }

    // optional .app.message.ShouCangProto shou_cang = 200;
    if (has_shou_cang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shou_cang());
    }

    // optional bytes arena_fighting_team_name_bytes = 202;
    if (has_arena_fighting_team_name_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arena_fighting_team_name_bytes());
    }

  }
  if (_has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    // optional int32 jian_dao = 204;
    if (has_jian_dao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jian_dao());
    }

    // optional int32 bow_tong_ling_display_id = 205;
    if (has_bow_tong_ling_display_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bow_tong_ling_display_id());
    }

    // optional int32 pet_tong_ling_display_id = 206;
    if (has_pet_tong_ling_display_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_tong_ling_display_id());
    }

  }
  // repeated int32 equiped_pos = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiped_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equiped_pos(i));
    }
    total_size += 1 * this->equiped_pos_size() + data_size;
  }

  // repeated .app.message.EquipmentDataProto equipment_datas = 8;
  total_size += 1 * this->equipment_datas_size();
  for (int i = 0; i < this->equipment_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_datas(i));
  }

  // repeated .app.message.EquipmentProto equipments = 9;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }

  // repeated int32 gems = 88;
  {
    int data_size = 0;
    for (int i = 0; i < this->gems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gems(i));
    }
    total_size += 2 * this->gems_size() + data_size;
  }

  // repeated int32 shield_fighting_amount = 203;
  {
    int data_size = 0;
    for (int i = 0; i < this->shield_fighting_amount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shield_fighting_amount(i));
    }
    total_size += 2 * this->shield_fighting_amount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherHeroProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherHeroProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherHeroProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherHeroProto::MergeFrom(const OtherHeroProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiped_pos_.MergeFrom(from.equiped_pos_);
  equipment_datas_.MergeFrom(from.equipment_datas_);
  equipments_.MergeFrom(from.equipments_);
  gems_.MergeFrom(from.gems_);
  shield_fighting_amount_.MergeFrom(from.shield_fighting_amount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_fighting_amount()) {
      set_fighting_amount(from.fighting_amount());
    }
    if (from.has_total_stat()) {
      mutable_total_stat()->::app::message::SpriteStatProto::MergeFrom(from.total_stat());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_equipment_resources()) {
      set_equipment_resources(from.equipment_resources());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_upgrade_exp()) {
      set_upgrade_exp(from.upgrade_exp());
    }
    if (from.has_life()) {
      set_life(from.life());
    }
    if (from.has_max_life()) {
      set_max_life(from.max_life());
    }
    if (from.has_real_air()) {
      set_real_air(from.real_air());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_stamina()) {
      set_max_stamina(from.max_stamina());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_guild_li_lian()) {
      set_guild_li_lian(from.guild_li_lian());
    }
    if (from.has_super_arm()) {
      mutable_super_arm()->::app::message::HeroSuperArmProto::MergeFrom(from.super_arm());
    }
    if (from.has_cloak()) {
      mutable_cloak()->::app::message::CloakProto::MergeFrom(from.cloak());
    }
    if (from.has_achievement()) {
      mutable_achievement()->::app::message::AchievementInfoProto::MergeFrom(from.achievement());
    }
    if (from.has_tian_zui()) {
      mutable_tian_zui()->::app::message::TianZuiProto::MergeFrom(from.tian_zui());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tian_jie()) {
      mutable_tian_jie()->::app::message::TianJieProto::MergeFrom(from.tian_jie());
    }
    if (from.has_pet()) {
      mutable_pet()->::app::message::PetProto::MergeFrom(from.pet());
    }
    if (from.has_bow()) {
      mutable_bow()->::app::message::BowProto::MergeFrom(from.bow());
    }
    if (from.has_pk_amount()) {
      set_pk_amount(from.pk_amount());
    }
    if (from.has_mount()) {
      mutable_mount()->::app::message::MountProto::MergeFrom(from.mount());
    }
    if (from.has_equipment_fighting_amount()) {
      set_equipment_fighting_amount(from.equipment_fighting_amount());
    }
    if (from.has_spell_fighting_amount()) {
      set_spell_fighting_amount(from.spell_fighting_amount());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_super_arm_fighting_amount()) {
      set_super_arm_fighting_amount(from.super_arm_fighting_amount());
    }
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_gem_fighting_amount()) {
      set_gem_fighting_amount(from.gem_fighting_amount());
    }
    if (from.has_mount_fighting_amount()) {
      set_mount_fighting_amount(from.mount_fighting_amount());
    }
    if (from.has_bow_fighting_amount()) {
      set_bow_fighting_amount(from.bow_fighting_amount());
    }
    if (from.has_super_weapon_fighting_amount()) {
      set_super_weapon_fighting_amount(from.super_weapon_fighting_amount());
    }
    if (from.has_super_weapon_xinfa_fighting_amount()) {
      set_super_weapon_xinfa_fighting_amount(from.super_weapon_xinfa_fighting_amount());
    }
    if (from.has_tianjie_fighting_amount()) {
      set_tianjie_fighting_amount(from.tianjie_fighting_amount());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tianzui_fighting_amount()) {
      set_tianzui_fighting_amount(from.tianzui_fighting_amount());
    }
    if (from.has_shou_cang_fighting_amount()) {
      set_shou_cang_fighting_amount(from.shou_cang_fighting_amount());
    }
    if (from.has_demon_fighting_amount()) {
      set_demon_fighting_amount(from.demon_fighting_amount());
    }
    if (from.has_cloak_fighting_amount()) {
      set_cloak_fighting_amount(from.cloak_fighting_amount());
    }
    if (from.has_pet_fighting_amount()) {
      set_pet_fighting_amount(from.pet_fighting_amount());
    }
    if (from.has_yitianshenjue_fighting_amount()) {
      set_yitianshenjue_fighting_amount(from.yitianshenjue_fighting_amount());
    }
    if (from.has_moshi_fighting_amount()) {
      set_moshi_fighting_amount(from.moshi_fighting_amount());
    }
    if (from.has_jing_jie_fighting_amount()) {
      set_jing_jie_fighting_amount(from.jing_jie_fighting_amount());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_qianqiudajie_fighting_amount()) {
      set_qianqiudajie_fighting_amount(from.qianqiudajie_fighting_amount());
    }
    if (from.has_marriage_weapon_amount()) {
      set_marriage_weapon_amount(from.marriage_weapon_amount());
    }
    if (from.has_marriage_goods_amount()) {
      set_marriage_goods_amount(from.marriage_goods_amount());
    }
    if (from.has_chi_huo_shen_gong_fighting_amount()) {
      set_chi_huo_shen_gong_fighting_amount(from.chi_huo_shen_gong_fighting_amount());
    }
    if (from.has_mo_bing_fighting_amount()) {
      set_mo_bing_fighting_amount(from.mo_bing_fighting_amount());
    }
    if (from.has_tian_xie_fighting_amount()) {
      set_tian_xie_fighting_amount(from.tian_xie_fighting_amount());
    }
    if (from.has_wu_dao_fighting_amount()) {
      set_wu_dao_fighting_amount(from.wu_dao_fighting_amount());
    }
    if (from.has_yu_yi_ge_fighting_amount()) {
      set_yu_yi_ge_fighting_amount(from.yu_yi_ge_fighting_amount());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_mo_fang_fighting_amount()) {
      set_mo_fang_fighting_amount(from.mo_fang_fighting_amount());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_marriage_target_id()) {
      set_marriage_target_id(from.marriage_target_id());
    }
    if (from.has_marriage_target_name()) {
      set_marriage_target_name(from.marriage_target_name());
    }
    if (from.has_marriage_goods_id()) {
      set_marriage_goods_id(from.marriage_goods_id());
    }
    if (from.has_shou_cang()) {
      mutable_shou_cang()->::app::message::ShouCangProto::MergeFrom(from.shou_cang());
    }
    if (from.has_arena_fighting_team_name_bytes()) {
      set_arena_fighting_team_name_bytes(from.arena_fighting_team_name_bytes());
    }
  }
  if (from._has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    if (from.has_jian_dao()) {
      set_jian_dao(from.jian_dao());
    }
    if (from.has_bow_tong_ling_display_id()) {
      set_bow_tong_ling_display_id(from.bow_tong_ling_display_id());
    }
    if (from.has_pet_tong_ling_display_id()) {
      set_pet_tong_ling_display_id(from.pet_tong_ling_display_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherHeroProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherHeroProto::CopyFrom(const OtherHeroProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherHeroProto::IsInitialized() const {

  return true;
}

void OtherHeroProto::Swap(OtherHeroProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(race_, other->race_);
    std::swap(fighting_amount_, other->fighting_amount_);
    std::swap(total_stat_, other->total_stat_);
    equiped_pos_.Swap(&other->equiped_pos_);
    equipment_datas_.Swap(&other->equipment_datas_);
    equipments_.Swap(&other->equipments_);
    std::swap(equipment_resources_, other->equipment_resources_);
    std::swap(exp_, other->exp_);
    std::swap(upgrade_exp_, other->upgrade_exp_);
    std::swap(life_, other->life_);
    std::swap(max_life_, other->max_life_);
    std::swap(real_air_, other->real_air_);
    std::swap(stamina_, other->stamina_);
    std::swap(max_stamina_, other->max_stamina_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(guild_li_lian_, other->guild_li_lian_);
    std::swap(super_arm_, other->super_arm_);
    std::swap(cloak_, other->cloak_);
    std::swap(achievement_, other->achievement_);
    std::swap(tian_zui_, other->tian_zui_);
    std::swap(tian_jie_, other->tian_jie_);
    std::swap(pet_, other->pet_);
    gems_.Swap(&other->gems_);
    std::swap(bow_, other->bow_);
    std::swap(pk_amount_, other->pk_amount_);
    std::swap(mount_, other->mount_);
    std::swap(equipment_fighting_amount_, other->equipment_fighting_amount_);
    std::swap(spell_fighting_amount_, other->spell_fighting_amount_);
    std::swap(super_arm_fighting_amount_, other->super_arm_fighting_amount_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(gem_fighting_amount_, other->gem_fighting_amount_);
    std::swap(mount_fighting_amount_, other->mount_fighting_amount_);
    std::swap(bow_fighting_amount_, other->bow_fighting_amount_);
    std::swap(super_weapon_fighting_amount_, other->super_weapon_fighting_amount_);
    std::swap(super_weapon_xinfa_fighting_amount_, other->super_weapon_xinfa_fighting_amount_);
    std::swap(tianjie_fighting_amount_, other->tianjie_fighting_amount_);
    std::swap(tianzui_fighting_amount_, other->tianzui_fighting_amount_);
    std::swap(shou_cang_fighting_amount_, other->shou_cang_fighting_amount_);
    std::swap(demon_fighting_amount_, other->demon_fighting_amount_);
    std::swap(cloak_fighting_amount_, other->cloak_fighting_amount_);
    std::swap(pet_fighting_amount_, other->pet_fighting_amount_);
    std::swap(yitianshenjue_fighting_amount_, other->yitianshenjue_fighting_amount_);
    std::swap(moshi_fighting_amount_, other->moshi_fighting_amount_);
    std::swap(jing_jie_fighting_amount_, other->jing_jie_fighting_amount_);
    std::swap(qianqiudajie_fighting_amount_, other->qianqiudajie_fighting_amount_);
    std::swap(marriage_weapon_amount_, other->marriage_weapon_amount_);
    std::swap(marriage_goods_amount_, other->marriage_goods_amount_);
    std::swap(chi_huo_shen_gong_fighting_amount_, other->chi_huo_shen_gong_fighting_amount_);
    std::swap(mo_bing_fighting_amount_, other->mo_bing_fighting_amount_);
    std::swap(tian_xie_fighting_amount_, other->tian_xie_fighting_amount_);
    std::swap(wu_dao_fighting_amount_, other->wu_dao_fighting_amount_);
    std::swap(yu_yi_ge_fighting_amount_, other->yu_yi_ge_fighting_amount_);
    std::swap(mo_fang_fighting_amount_, other->mo_fang_fighting_amount_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(marriage_target_id_, other->marriage_target_id_);
    std::swap(marriage_target_name_, other->marriage_target_name_);
    std::swap(marriage_goods_id_, other->marriage_goods_id_);
    std::swap(shou_cang_, other->shou_cang_);
    std::swap(arena_fighting_team_name_bytes_, other->arena_fighting_team_name_bytes_);
    shield_fighting_amount_.Swap(&other->shield_fighting_amount_);
    std::swap(jian_dao_, other->jian_dao_);
    std::swap(bow_tong_ling_display_id_, other->bow_tong_ling_display_id_);
    std::swap(pet_tong_ling_display_id_, other->pet_tong_ling_display_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherHeroProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherHeroProto_descriptor_;
  metadata.reflection = OtherHeroProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRelation::kFriendIdFieldNumber;
const int ClientRelation::kEnemyIdFieldNumber;
const int ClientRelation::kEnemyKillHistoryFieldNumber;
const int ClientRelation::kBlackListIdFieldNumber;
const int ClientRelation::kRecentIdFieldNumber;
const int ClientRelation::kHideMyLocationFieldNumber;
const int ClientRelation::kHideOfflineRelationFieldNumber;
const int ClientRelation::kHideBigHeadFieldNumber;
const int ClientRelation::kShowEnemyEventFieldNumber;
const int ClientRelation::kForbidBeenAddedAsFriendFieldNumber;
#endif  // !_MSC_VER

ClientRelation::ClientRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRelation::InitAsDefaultInstance() {
}

ClientRelation::ClientRelation(const ClientRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRelation::SharedCtor() {
  _cached_size_ = 0;
  hide_my_location_ = false;
  hide_offline_relation_ = false;
  hide_big_head_ = false;
  show_enemy_event_ = false;
  forbid_been_added_as_friend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRelation::~ClientRelation() {
  SharedDtor();
}

void ClientRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRelation_descriptor_;
}

const ClientRelation& ClientRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ClientRelation* ClientRelation::default_instance_ = NULL;

ClientRelation* ClientRelation::New() const {
  return new ClientRelation;
}

void ClientRelation::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    hide_my_location_ = false;
    hide_offline_relation_ = false;
    hide_big_head_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    show_enemy_event_ = false;
    forbid_been_added_as_friend_ = false;
  }
  friend_id_.Clear();
  enemy_id_.Clear();
  enemy_kill_history_.Clear();
  black_list_id_.Clear();
  recent_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_friend_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_friend_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_friend_id;
        if (input->ExpectTag(16)) goto parse_enemy_id;
        break;
      }

      // repeated int64 enemy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_enemy_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_enemy_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy_id;
        if (input->ExpectTag(24)) goto parse_enemy_kill_history;
        break;
      }

      // repeated int64 enemy_kill_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_kill_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_enemy_kill_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_enemy_kill_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enemy_kill_history;
        if (input->ExpectTag(32)) goto parse_black_list_id;
        break;
      }

      // repeated int64 black_list_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_black_list_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_black_list_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_black_list_id;
        if (input->ExpectTag(40)) goto parse_recent_id;
        break;
      }

      // repeated int64 recent_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_recent_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_recent_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recent_id;
        if (input->ExpectTag(48)) goto parse_hide_my_location;
        break;
      }

      // optional bool hide_my_location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_my_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_my_location_)));
          set_has_hide_my_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hide_offline_relation;
        break;
      }

      // optional bool hide_offline_relation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_offline_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_offline_relation_)));
          set_has_hide_offline_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hide_big_head;
        break;
      }

      // optional bool hide_big_head = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_big_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_big_head_)));
          set_has_hide_big_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_show_enemy_event;
        break;
      }

      // optional bool show_enemy_event = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_enemy_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_enemy_event_)));
          set_has_show_enemy_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_forbid_been_added_as_friend;
        break;
      }

      // optional bool forbid_been_added_as_friend = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbid_been_added_as_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forbid_been_added_as_friend_)));
          set_has_forbid_been_added_as_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 friend_id = 1;
  for (int i = 0; i < this->friend_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->friend_id(i), output);
  }

  // repeated int64 enemy_id = 2;
  for (int i = 0; i < this->enemy_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->enemy_id(i), output);
  }

  // repeated int64 enemy_kill_history = 3;
  for (int i = 0; i < this->enemy_kill_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->enemy_kill_history(i), output);
  }

  // repeated int64 black_list_id = 4;
  for (int i = 0; i < this->black_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->black_list_id(i), output);
  }

  // repeated int64 recent_id = 5;
  for (int i = 0; i < this->recent_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->recent_id(i), output);
  }

  // optional bool hide_my_location = 6;
  if (has_hide_my_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hide_my_location(), output);
  }

  // optional bool hide_offline_relation = 7;
  if (has_hide_offline_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hide_offline_relation(), output);
  }

  // optional bool hide_big_head = 8;
  if (has_hide_big_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hide_big_head(), output);
  }

  // optional bool show_enemy_event = 9;
  if (has_show_enemy_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->show_enemy_event(), output);
  }

  // optional bool forbid_been_added_as_friend = 10;
  if (has_forbid_been_added_as_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->forbid_been_added_as_friend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 friend_id = 1;
  for (int i = 0; i < this->friend_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->friend_id(i), target);
  }

  // repeated int64 enemy_id = 2;
  for (int i = 0; i < this->enemy_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->enemy_id(i), target);
  }

  // repeated int64 enemy_kill_history = 3;
  for (int i = 0; i < this->enemy_kill_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->enemy_kill_history(i), target);
  }

  // repeated int64 black_list_id = 4;
  for (int i = 0; i < this->black_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->black_list_id(i), target);
  }

  // repeated int64 recent_id = 5;
  for (int i = 0; i < this->recent_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->recent_id(i), target);
  }

  // optional bool hide_my_location = 6;
  if (has_hide_my_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hide_my_location(), target);
  }

  // optional bool hide_offline_relation = 7;
  if (has_hide_offline_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hide_offline_relation(), target);
  }

  // optional bool hide_big_head = 8;
  if (has_hide_big_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hide_big_head(), target);
  }

  // optional bool show_enemy_event = 9;
  if (has_show_enemy_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->show_enemy_event(), target);
  }

  // optional bool forbid_been_added_as_friend = 10;
  if (has_forbid_been_added_as_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->forbid_been_added_as_friend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional bool hide_my_location = 6;
    if (has_hide_my_location()) {
      total_size += 1 + 1;
    }

    // optional bool hide_offline_relation = 7;
    if (has_hide_offline_relation()) {
      total_size += 1 + 1;
    }

    // optional bool hide_big_head = 8;
    if (has_hide_big_head()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool show_enemy_event = 9;
    if (has_show_enemy_event()) {
      total_size += 1 + 1;
    }

    // optional bool forbid_been_added_as_friend = 10;
    if (has_forbid_been_added_as_friend()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 friend_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->friend_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->friend_id(i));
    }
    total_size += 1 * this->friend_id_size() + data_size;
  }

  // repeated int64 enemy_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->enemy_id(i));
    }
    total_size += 1 * this->enemy_id_size() + data_size;
  }

  // repeated int64 enemy_kill_history = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_kill_history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->enemy_kill_history(i));
    }
    total_size += 1 * this->enemy_kill_history_size() + data_size;
  }

  // repeated int64 black_list_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->black_list_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->black_list_id(i));
    }
    total_size += 1 * this->black_list_id_size() + data_size;
  }

  // repeated int64 recent_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->recent_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->recent_id(i));
    }
    total_size += 1 * this->recent_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRelation::MergeFrom(const ClientRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_id_.MergeFrom(from.friend_id_);
  enemy_id_.MergeFrom(from.enemy_id_);
  enemy_kill_history_.MergeFrom(from.enemy_kill_history_);
  black_list_id_.MergeFrom(from.black_list_id_);
  recent_id_.MergeFrom(from.recent_id_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_hide_my_location()) {
      set_hide_my_location(from.hide_my_location());
    }
    if (from.has_hide_offline_relation()) {
      set_hide_offline_relation(from.hide_offline_relation());
    }
    if (from.has_hide_big_head()) {
      set_hide_big_head(from.hide_big_head());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_show_enemy_event()) {
      set_show_enemy_event(from.show_enemy_event());
    }
    if (from.has_forbid_been_added_as_friend()) {
      set_forbid_been_added_as_friend(from.forbid_been_added_as_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRelation::CopyFrom(const ClientRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRelation::IsInitialized() const {

  return true;
}

void ClientRelation::Swap(ClientRelation* other) {
  if (other != this) {
    friend_id_.Swap(&other->friend_id_);
    enemy_id_.Swap(&other->enemy_id_);
    enemy_kill_history_.Swap(&other->enemy_kill_history_);
    black_list_id_.Swap(&other->black_list_id_);
    recent_id_.Swap(&other->recent_id_);
    std::swap(hide_my_location_, other->hide_my_location_);
    std::swap(hide_offline_relation_, other->hide_offline_relation_);
    std::swap(hide_big_head_, other->hide_big_head_);
    std::swap(show_enemy_event_, other->show_enemy_event_);
    std::swap(forbid_been_added_as_friend_, other->forbid_been_added_as_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRelation_descriptor_;
  metadata.reflection = ClientRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleRelation::kIdFieldNumber;
const int SingleRelation::kNameFieldNumber;
const int SingleRelation::kMoodFieldNumber;
const int SingleRelation::kSceneIdFieldNumber;
const int SingleRelation::kLevelFieldNumber;
const int SingleRelation::kLineNumberFieldNumber;
const int SingleRelation::kHasSellFieldNumber;
const int SingleRelation::kRaceFieldNumber;
const int SingleRelation::kForbidBeenAddedAsFriendFieldNumber;
#endif  // !_MSC_VER

SingleRelation::SingleRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleRelation::InitAsDefaultInstance() {
}

SingleRelation::SingleRelation(const SingleRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleRelation::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_id_ = 0;
  level_ = 0;
  line_number_ = 0;
  has_sell_ = false;
  race_ = 0;
  forbid_been_added_as_friend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleRelation::~SingleRelation() {
  SharedDtor();
}

void SingleRelation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (mood_ != &::google::protobuf::internal::kEmptyString) {
    delete mood_;
  }
  if (this != default_instance_) {
  }
}

void SingleRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleRelation_descriptor_;
}

const SingleRelation& SingleRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

SingleRelation* SingleRelation::default_instance_ = NULL;

SingleRelation* SingleRelation::New() const {
  return new SingleRelation;
}

void SingleRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_mood()) {
      if (mood_ != &::google::protobuf::internal::kEmptyString) {
        mood_->clear();
      }
    }
    scene_id_ = 0;
    level_ = 0;
    line_number_ = 0;
    has_sell_ = false;
    race_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    forbid_been_added_as_friend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mood;
        break;
      }

      // optional bytes mood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_line_number;
        break;
      }

      // optional int32 line_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_number_)));
          set_has_line_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_sell;
        break;
      }

      // optional bool has_sell = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_sell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_sell_)));
          set_has_has_sell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_race;
        break;
      }

      // optional int32 race = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_forbid_been_added_as_friend;
        break;
      }

      // optional bool forbid_been_added_as_friend = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbid_been_added_as_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forbid_been_added_as_friend_)));
          set_has_forbid_been_added_as_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes mood = 3;
  if (has_mood()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mood(), output);
  }

  // optional int32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_id(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 line_number = 6;
  if (has_line_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->line_number(), output);
  }

  // optional bool has_sell = 7;
  if (has_has_sell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_sell(), output);
  }

  // optional int32 race = 8;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->race(), output);
  }

  // optional bool forbid_been_added_as_friend = 9;
  if (has_forbid_been_added_as_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->forbid_been_added_as_friend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes mood = 3;
  if (has_mood()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mood(), target);
  }

  // optional int32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_id(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 line_number = 6;
  if (has_line_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->line_number(), target);
  }

  // optional bool has_sell = 7;
  if (has_has_sell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_sell(), target);
  }

  // optional int32 race = 8;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->race(), target);
  }

  // optional bool forbid_been_added_as_friend = 9;
  if (has_forbid_been_added_as_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->forbid_been_added_as_friend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes mood = 3;
    if (has_mood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mood());
    }

    // optional int32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 line_number = 6;
    if (has_line_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_number());
    }

    // optional bool has_sell = 7;
    if (has_has_sell()) {
      total_size += 1 + 1;
    }

    // optional int32 race = 8;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool forbid_been_added_as_friend = 9;
    if (has_forbid_been_added_as_friend()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleRelation::MergeFrom(const SingleRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mood()) {
      set_mood(from.mood());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_line_number()) {
      set_line_number(from.line_number());
    }
    if (from.has_has_sell()) {
      set_has_sell(from.has_sell());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_forbid_been_added_as_friend()) {
      set_forbid_been_added_as_friend(from.forbid_been_added_as_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleRelation::CopyFrom(const SingleRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleRelation::IsInitialized() const {

  return true;
}

void SingleRelation::Swap(SingleRelation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(mood_, other->mood_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(level_, other->level_);
    std::swap(line_number_, other->line_number_);
    std::swap(has_sell_, other->has_sell_);
    std::swap(race_, other->race_);
    std::swap(forbid_been_added_as_friend_, other->forbid_been_added_as_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleRelation_descriptor_;
  metadata.reflection = SingleRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRelationDetail::kDetailFieldNumber;
const int ClientRelationDetail::kIsOnlineFieldNumber;
const int ClientRelationDetail::kSelfMoodFieldNumber;
const int ClientRelationDetail::kBeenAddedFriendCountFieldNumber;
#endif  // !_MSC_VER

ClientRelationDetail::ClientRelationDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRelationDetail::InitAsDefaultInstance() {
}

ClientRelationDetail::ClientRelationDetail(const ClientRelationDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRelationDetail::SharedCtor() {
  _cached_size_ = 0;
  self_mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  been_added_friend_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRelationDetail::~ClientRelationDetail() {
  SharedDtor();
}

void ClientRelationDetail::SharedDtor() {
  if (self_mood_ != &::google::protobuf::internal::kEmptyString) {
    delete self_mood_;
  }
  if (this != default_instance_) {
  }
}

void ClientRelationDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRelationDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRelationDetail_descriptor_;
}

const ClientRelationDetail& ClientRelationDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ClientRelationDetail* ClientRelationDetail::default_instance_ = NULL;

ClientRelationDetail* ClientRelationDetail::New() const {
  return new ClientRelationDetail;
}

void ClientRelationDetail::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_self_mood()) {
      if (self_mood_ != &::google::protobuf::internal::kEmptyString) {
        self_mood_->clear();
      }
    }
    been_added_friend_count_ = 0;
  }
  detail_.Clear();
  is_online_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRelationDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.SingleRelation detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_detail;
        if (input->ExpectTag(16)) goto parse_is_online;
        break;
      }

      // repeated bool is_online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_is_online())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_online())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_online;
        if (input->ExpectTag(26)) goto parse_self_mood;
        break;
      }

      // optional bytes self_mood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_mood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_self_mood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_been_added_friend_count;
        break;
      }

      // optional int32 been_added_friend_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_been_added_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &been_added_friend_count_)));
          set_has_been_added_friend_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRelationDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.SingleRelation detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detail(i), output);
  }

  // repeated bool is_online = 2;
  for (int i = 0; i < this->is_online_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->is_online(i), output);
  }

  // optional bytes self_mood = 3;
  if (has_self_mood()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->self_mood(), output);
  }

  // optional int32 been_added_friend_count = 4;
  if (has_been_added_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->been_added_friend_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRelationDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.SingleRelation detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detail(i), target);
  }

  // repeated bool is_online = 2;
  for (int i = 0; i < this->is_online_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->is_online(i), target);
  }

  // optional bytes self_mood = 3;
  if (has_self_mood()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->self_mood(), target);
  }

  // optional int32 been_added_friend_count = 4;
  if (has_been_added_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->been_added_friend_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRelationDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bytes self_mood = 3;
    if (has_self_mood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->self_mood());
    }

    // optional int32 been_added_friend_count = 4;
    if (has_been_added_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->been_added_friend_count());
    }

  }
  // repeated .app.message.SingleRelation detail = 1;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  // repeated bool is_online = 2;
  {
    int data_size = 0;
    data_size = 1 * this->is_online_size();
    total_size += 1 * this->is_online_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRelationDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRelationDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRelationDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRelationDetail::MergeFrom(const ClientRelationDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  is_online_.MergeFrom(from.is_online_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_self_mood()) {
      set_self_mood(from.self_mood());
    }
    if (from.has_been_added_friend_count()) {
      set_been_added_friend_count(from.been_added_friend_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRelationDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRelationDetail::CopyFrom(const ClientRelationDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRelationDetail::IsInitialized() const {

  return true;
}

void ClientRelationDetail::Swap(ClientRelationDetail* other) {
  if (other != this) {
    detail_.Swap(&other->detail_);
    is_online_.Swap(&other->is_online_);
    std::swap(self_mood_, other->self_mood_);
    std::swap(been_added_friend_count_, other->been_added_friend_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRelationDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRelationDetail_descriptor_;
  metadata.reflection = ClientRelationDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessage_ChatGoods::kIdFieldNumber;
const int ChatMessage_ChatGoods::kNameFieldNumber;
const int ChatMessage_ChatGoods::kQualityFieldNumber;
const int ChatMessage_ChatGoods::kDynamicInfoFieldNumber;
#endif  // !_MSC_VER

ChatMessage_ChatGoods::ChatMessage_ChatGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessage_ChatGoods::InitAsDefaultInstance() {
}

ChatMessage_ChatGoods::ChatMessage_ChatGoods(const ChatMessage_ChatGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessage_ChatGoods::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  dynamic_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage_ChatGoods::~ChatMessage_ChatGoods() {
  SharedDtor();
}

void ChatMessage_ChatGoods::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (dynamic_info_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_info_;
  }
  if (this != default_instance_) {
  }
}

void ChatMessage_ChatGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage_ChatGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_ChatGoods_descriptor_;
}

const ChatMessage_ChatGoods& ChatMessage_ChatGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ChatMessage_ChatGoods* ChatMessage_ChatGoods::default_instance_ = NULL;

ChatMessage_ChatGoods* ChatMessage_ChatGoods::New() const {
  return new ChatMessage_ChatGoods;
}

void ChatMessage_ChatGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    if (has_dynamic_info()) {
      if (dynamic_info_ != &::google::protobuf::internal::kEmptyString) {
        dynamic_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage_ChatGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dynamic_info;
        break;
      }

      // optional bytes dynamic_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dynamic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMessage_ChatGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional bytes dynamic_info = 4;
  if (has_dynamic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->dynamic_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessage_ChatGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional bytes dynamic_info = 4;
  if (has_dynamic_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dynamic_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessage_ChatGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional bytes dynamic_info = 4;
    if (has_dynamic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dynamic_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage_ChatGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage_ChatGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage_ChatGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage_ChatGoods::MergeFrom(const ChatMessage_ChatGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_dynamic_info()) {
      set_dynamic_info(from.dynamic_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage_ChatGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage_ChatGoods::CopyFrom(const ChatMessage_ChatGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage_ChatGoods::IsInitialized() const {

  return true;
}

void ChatMessage_ChatGoods::Swap(ChatMessage_ChatGoods* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(dynamic_info_, other->dynamic_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessage_ChatGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_ChatGoods_descriptor_;
  metadata.reflection = ChatMessage_ChatGoods_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChatMessage::kSpeechFieldNumber;
const int ChatMessage::kChatGoodsFieldNumber;
const int ChatMessage::kCheckSumFieldNumber;
const int ChatMessage::kHasMyPosFieldNumber;
const int ChatMessage::kGemFieldNumber;
const int ChatMessage::kHeroNameFieldNumber;
const int ChatMessage::kHeroIdFieldNumber;
const int ChatMessage::kLevelFieldNumber;
const int ChatMessage::kIsVipFieldNumber;
const int ChatMessage::kSceneIdFieldNumber;
const int ChatMessage::kSceneXFieldNumber;
const int ChatMessage::kSceneYFieldNumber;
const int ChatMessage::kSceneLineFieldNumber;
const int ChatMessage::kIsWsCityMasterFieldNumber;
const int ChatMessage::kIsLongCityMasterFieldNumber;
const int ChatMessage::kCityMasterTypeFieldNumber;
const int ChatMessage::kIsGmFieldNumber;
const int ChatMessage::kPlatformVipFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessage::InitAsDefaultInstance() {
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  speech_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  check_sum_ = 0;
  has_my_pos_ = false;
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_id_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  is_vip_ = false;
  scene_id_ = 0;
  scene_x_ = 0;
  scene_y_ = 0;
  scene_line_ = 0;
  is_ws_city_master_ = false;
  is_long_city_master_ = false;
  city_master_type_ = 0;
  is_gm_ = false;
  platform_vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (speech_ != &::google::protobuf::internal::kEmptyString) {
    delete speech_;
  }
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_speech()) {
      if (speech_ != &::google::protobuf::internal::kEmptyString) {
        speech_->clear();
      }
    }
    check_sum_ = 0;
    has_my_pos_ = false;
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    hero_id_ = GOOGLE_LONGLONG(0);
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_vip_ = false;
    scene_id_ = 0;
    scene_x_ = 0;
    scene_y_ = 0;
    scene_line_ = 0;
    is_ws_city_master_ = false;
    is_long_city_master_ = false;
    city_master_type_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_gm_ = false;
    platform_vip_ = 0;
  }
  chat_goods_.Clear();
  gem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string speech = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speech()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speech().data(), this->speech().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_goods;
        break;
      }

      // repeated .app.message.ChatMessage.ChatGoods chat_goods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_goods;
        if (input->ExpectTag(24)) goto parse_check_sum;
        break;
      }

      // optional int32 check_sum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_sum_)));
          set_has_check_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hero_name;
        break;
      }

      // optional bytes hero_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_id;
        break;
      }

      // optional int64 hero_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_vip;
        break;
      }

      // optional bool is_vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vip_)));
          set_has_is_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_scene_x;
        break;
      }

      // optional int32 scene_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_x_)));
          set_has_scene_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_scene_y;
        break;
      }

      // optional int32 scene_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_y_)));
          set_has_scene_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_scene_line;
        break;
      }

      // optional int32 scene_line = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_line_)));
          set_has_scene_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_ws_city_master;
        break;
      }

      // optional bool is_ws_city_master = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ws_city_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ws_city_master_)));
          set_has_is_ws_city_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_long_city_master;
        break;
      }

      // optional bool is_long_city_master = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_long_city_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_long_city_master_)));
          set_has_is_long_city_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_city_master_type;
        break;
      }

      // optional int32 city_master_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_master_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_master_type_)));
          set_has_city_master_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_gm;
        break;
      }

      // optional bool is_gm = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gm_)));
          set_has_is_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_platform_vip;
        break;
      }

      // optional int32 platform_vip = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_vip_)));
          set_has_platform_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_has_my_pos;
        break;
      }

      // optional bool has_my_pos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_my_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_my_pos_)));
          set_has_has_my_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_gem;
        break;
      }

      // repeated int32 gem = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_gem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_gem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string speech = 1;
  if (has_speech()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speech().data(), this->speech().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->speech(), output);
  }

  // repeated .app.message.ChatMessage.ChatGoods chat_goods = 2;
  for (int i = 0; i < this->chat_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat_goods(i), output);
  }

  // optional int32 check_sum = 3;
  if (has_check_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->check_sum(), output);
  }

  // optional bytes hero_name = 4;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->hero_name(), output);
  }

  // optional int64 hero_id = 5;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->hero_id(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional bool is_vip = 7;
  if (has_is_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vip(), output);
  }

  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }

  // optional int32 scene_x = 9;
  if (has_scene_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->scene_x(), output);
  }

  // optional int32 scene_y = 10;
  if (has_scene_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->scene_y(), output);
  }

  // optional int32 scene_line = 11;
  if (has_scene_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->scene_line(), output);
  }

  // optional bool is_ws_city_master = 13;
  if (has_is_ws_city_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_ws_city_master(), output);
  }

  // optional bool is_long_city_master = 14;
  if (has_is_long_city_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_long_city_master(), output);
  }

  // optional int32 city_master_type = 15;
  if (has_city_master_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->city_master_type(), output);
  }

  // optional bool is_gm = 18;
  if (has_is_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_gm(), output);
  }

  // optional int32 platform_vip = 19;
  if (has_platform_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->platform_vip(), output);
  }

  // optional bool has_my_pos = 20;
  if (has_has_my_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->has_my_pos(), output);
  }

  // repeated int32 gem = 21;
  for (int i = 0; i < this->gem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->gem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string speech = 1;
  if (has_speech()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speech().data(), this->speech().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->speech(), target);
  }

  // repeated .app.message.ChatMessage.ChatGoods chat_goods = 2;
  for (int i = 0; i < this->chat_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat_goods(i), target);
  }

  // optional int32 check_sum = 3;
  if (has_check_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->check_sum(), target);
  }

  // optional bytes hero_name = 4;
  if (has_hero_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hero_name(), target);
  }

  // optional int64 hero_id = 5;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->hero_id(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional bool is_vip = 7;
  if (has_is_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vip(), target);
  }

  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }

  // optional int32 scene_x = 9;
  if (has_scene_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->scene_x(), target);
  }

  // optional int32 scene_y = 10;
  if (has_scene_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->scene_y(), target);
  }

  // optional int32 scene_line = 11;
  if (has_scene_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->scene_line(), target);
  }

  // optional bool is_ws_city_master = 13;
  if (has_is_ws_city_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_ws_city_master(), target);
  }

  // optional bool is_long_city_master = 14;
  if (has_is_long_city_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_long_city_master(), target);
  }

  // optional int32 city_master_type = 15;
  if (has_city_master_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->city_master_type(), target);
  }

  // optional bool is_gm = 18;
  if (has_is_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_gm(), target);
  }

  // optional int32 platform_vip = 19;
  if (has_platform_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->platform_vip(), target);
  }

  // optional bool has_my_pos = 20;
  if (has_has_my_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->has_my_pos(), target);
  }

  // repeated int32 gem = 21;
  for (int i = 0; i < this->gem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->gem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string speech = 1;
    if (has_speech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speech());
    }

    // optional int32 check_sum = 3;
    if (has_check_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_sum());
    }

    // optional bool has_my_pos = 20;
    if (has_has_my_pos()) {
      total_size += 2 + 1;
    }

    // optional bytes hero_name = 4;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hero_name());
    }

    // optional int64 hero_id = 5;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_vip = 7;
    if (has_is_vip()) {
      total_size += 1 + 1;
    }

    // optional int32 scene_id = 8;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 scene_x = 9;
    if (has_scene_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_x());
    }

    // optional int32 scene_y = 10;
    if (has_scene_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_y());
    }

    // optional int32 scene_line = 11;
    if (has_scene_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_line());
    }

    // optional bool is_ws_city_master = 13;
    if (has_is_ws_city_master()) {
      total_size += 1 + 1;
    }

    // optional bool is_long_city_master = 14;
    if (has_is_long_city_master()) {
      total_size += 1 + 1;
    }

    // optional int32 city_master_type = 15;
    if (has_city_master_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_master_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool is_gm = 18;
    if (has_is_gm()) {
      total_size += 2 + 1;
    }

    // optional int32 platform_vip = 19;
    if (has_platform_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_vip());
    }

  }
  // repeated .app.message.ChatMessage.ChatGoods chat_goods = 2;
  total_size += 1 * this->chat_goods_size();
  for (int i = 0; i < this->chat_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_goods(i));
  }

  // repeated int32 gem = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->gem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gem(i));
    }
    total_size += 2 * this->gem_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_goods_.MergeFrom(from.chat_goods_);
  gem_.MergeFrom(from.gem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speech()) {
      set_speech(from.speech());
    }
    if (from.has_check_sum()) {
      set_check_sum(from.check_sum());
    }
    if (from.has_has_my_pos()) {
      set_has_my_pos(from.has_my_pos());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_vip()) {
      set_is_vip(from.is_vip());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_x()) {
      set_scene_x(from.scene_x());
    }
    if (from.has_scene_y()) {
      set_scene_y(from.scene_y());
    }
    if (from.has_scene_line()) {
      set_scene_line(from.scene_line());
    }
    if (from.has_is_ws_city_master()) {
      set_is_ws_city_master(from.is_ws_city_master());
    }
    if (from.has_is_long_city_master()) {
      set_is_long_city_master(from.is_long_city_master());
    }
    if (from.has_city_master_type()) {
      set_city_master_type(from.city_master_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_gm()) {
      set_is_gm(from.is_gm());
    }
    if (from.has_platform_vip()) {
      set_platform_vip(from.platform_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(speech_, other->speech_);
    chat_goods_.Swap(&other->chat_goods_);
    std::swap(check_sum_, other->check_sum_);
    std::swap(has_my_pos_, other->has_my_pos_);
    gem_.Swap(&other->gem_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(level_, other->level_);
    std::swap(is_vip_, other->is_vip_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_x_, other->scene_x_);
    std::swap(scene_y_, other->scene_y_);
    std::swap(scene_line_, other->scene_line_);
    std::swap(is_ws_city_master_, other->is_ws_city_master_);
    std::swap(is_long_city_master_, other->is_long_city_master_);
    std::swap(city_master_type_, other->city_master_type_);
    std::swap(is_gm_, other->is_gm_);
    std::swap(platform_vip_, other->platform_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JianDaoProto::kStoreExpFieldNumber;
const int JianDaoProto::kTianJianLvFieldNumber;
const int JianDaoProto::kMoJianLvFieldNumber;
const int JianDaoProto::kFeiXianLvFieldNumber;
#endif  // !_MSC_VER

JianDaoProto::JianDaoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JianDaoProto::InitAsDefaultInstance() {
}

JianDaoProto::JianDaoProto(const JianDaoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JianDaoProto::SharedCtor() {
  _cached_size_ = 0;
  storeexp_ = GOOGLE_LONGLONG(0);
  tianjianlv_ = 0;
  mojianlv_ = 0;
  feixianlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JianDaoProto::~JianDaoProto() {
  SharedDtor();
}

void JianDaoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JianDaoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JianDaoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JianDaoProto_descriptor_;
}

const JianDaoProto& JianDaoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

JianDaoProto* JianDaoProto::default_instance_ = NULL;

JianDaoProto* JianDaoProto::New() const {
  return new JianDaoProto;
}

void JianDaoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storeexp_ = GOOGLE_LONGLONG(0);
    tianjianlv_ = 0;
    mojianlv_ = 0;
    feixianlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JianDaoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 storeExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &storeexp_)));
          set_has_storeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tianJianLv;
        break;
      }

      // optional int32 tianJianLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tianJianLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tianjianlv_)));
          set_has_tianjianlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moJianLv;
        break;
      }

      // optional int32 moJianLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moJianLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mojianlv_)));
          set_has_mojianlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_feiXianLv;
        break;
      }

      // optional int32 feiXianLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feiXianLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feixianlv_)));
          set_has_feixianlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JianDaoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 storeExp = 1;
  if (has_storeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->storeexp(), output);
  }

  // optional int32 tianJianLv = 2;
  if (has_tianjianlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tianjianlv(), output);
  }

  // optional int32 moJianLv = 3;
  if (has_mojianlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mojianlv(), output);
  }

  // optional int32 feiXianLv = 4;
  if (has_feixianlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->feixianlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JianDaoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 storeExp = 1;
  if (has_storeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->storeexp(), target);
  }

  // optional int32 tianJianLv = 2;
  if (has_tianjianlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tianjianlv(), target);
  }

  // optional int32 moJianLv = 3;
  if (has_mojianlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mojianlv(), target);
  }

  // optional int32 feiXianLv = 4;
  if (has_feixianlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->feixianlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JianDaoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 storeExp = 1;
    if (has_storeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->storeexp());
    }

    // optional int32 tianJianLv = 2;
    if (has_tianjianlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tianjianlv());
    }

    // optional int32 moJianLv = 3;
    if (has_mojianlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mojianlv());
    }

    // optional int32 feiXianLv = 4;
    if (has_feixianlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feixianlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JianDaoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JianDaoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JianDaoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JianDaoProto::MergeFrom(const JianDaoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storeexp()) {
      set_storeexp(from.storeexp());
    }
    if (from.has_tianjianlv()) {
      set_tianjianlv(from.tianjianlv());
    }
    if (from.has_mojianlv()) {
      set_mojianlv(from.mojianlv());
    }
    if (from.has_feixianlv()) {
      set_feixianlv(from.feixianlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JianDaoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JianDaoProto::CopyFrom(const JianDaoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JianDaoProto::IsInitialized() const {

  return true;
}

void JianDaoProto::Swap(JianDaoProto* other) {
  if (other != this) {
    std::swap(storeexp_, other->storeexp_);
    std::swap(tianjianlv_, other->tianjianlv_);
    std::swap(mojianlv_, other->mojianlv_);
    std::swap(feixianlv_, other->feixianlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JianDaoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JianDaoProto_descriptor_;
  metadata.reflection = JianDaoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TianXieProto::kTianXieFieldNumber;
const int TianXieProto::kBlessAmountFieldNumber;
const int TianXieProto::kBlessAmountClearTimeFieldNumber;
const int TianXieProto::kQianNengUseCountFieldNumber;
const int TianXieProto::kHuanHuaUseCountFieldNumber;
const int TianXieProto::kMinorSlotPosFieldNumber;
const int TianXieProto::kMinorSlotNicknameFieldNumber;
const int TianXieProto::kMajorSlotPosFieldNumber;
const int TianXieProto::kMajorSlotNicknameFieldNumber;
const int TianXieProto::kUpgradeTimesFieldNumber;
const int TianXieProto::kQianNengExtraMaxUseCountFieldNumber;
const int TianXieProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int TianXieProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int TianXieProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

TianXieProto::TianXieProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TianXieProto::InitAsDefaultInstance() {
  tian_xie_ = const_cast< ::app::message::TianXieConfigProto*>(&::app::message::TianXieConfigProto::default_instance());
}

TianXieProto::TianXieProto(const TianXieProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TianXieProto::SharedCtor() {
  _cached_size_ = 0;
  tian_xie_ = NULL;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  upgrade_times_ = 0;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TianXieProto::~TianXieProto() {
  SharedDtor();
}

void TianXieProto::SharedDtor() {
  if (this != default_instance_) {
    delete tian_xie_;
  }
}

void TianXieProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TianXieProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TianXieProto_descriptor_;
}

const TianXieProto& TianXieProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

TianXieProto* TianXieProto::default_instance_ = NULL;

TianXieProto* TianXieProto::New() const {
  return new TianXieProto;
}

void TianXieProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tian_xie()) {
      if (tian_xie_ != NULL) tian_xie_->::app::message::TianXieConfigProto::Clear();
    }
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    upgrade_times_ = 0;
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  minor_slot_pos_.Clear();
  minor_slot_nickname_.Clear();
  major_slot_pos_.Clear();
  major_slot_nickname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TianXieProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.TianXieConfigProto tian_xie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tian_xie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor_slot_pos;
        break;
      }

      // repeated int32 minor_slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_minor_slot_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minor_slot_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor_slot_pos;
        if (input->ExpectTag(24)) goto parse_minor_slot_nickname;
        break;
      }

      // repeated int32 minor_slot_nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_slot_nickname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_minor_slot_nickname())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minor_slot_nickname())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minor_slot_nickname;
        if (input->ExpectTag(32)) goto parse_major_slot_pos;
        break;
      }

      // repeated int32 major_slot_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_major_slot_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_major_slot_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_major_slot_pos;
        if (input->ExpectTag(40)) goto parse_major_slot_nickname;
        break;
      }

      // repeated int32 major_slot_nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major_slot_nickname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_major_slot_nickname())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_major_slot_nickname())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_major_slot_nickname;
        if (input->ExpectTag(48)) goto parse_upgrade_times;
        break;
      }

      // optional int32 upgrade_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_times_)));
          set_has_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TianXieProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.TianXieConfigProto tian_xie = 1;
  if (has_tian_xie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tian_xie(), output);
  }

  // repeated int32 minor_slot_pos = 2;
  for (int i = 0; i < this->minor_slot_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->minor_slot_pos(i), output);
  }

  // repeated int32 minor_slot_nickname = 3;
  for (int i = 0; i < this->minor_slot_nickname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->minor_slot_nickname(i), output);
  }

  // repeated int32 major_slot_pos = 4;
  for (int i = 0; i < this->major_slot_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->major_slot_pos(i), output);
  }

  // repeated int32 major_slot_nickname = 5;
  for (int i = 0; i < this->major_slot_nickname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->major_slot_nickname(i), output);
  }

  // optional int32 upgrade_times = 6;
  if (has_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upgrade_times(), output);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bless_amount_clear_time(), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TianXieProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.TianXieConfigProto tian_xie = 1;
  if (has_tian_xie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tian_xie(), target);
  }

  // repeated int32 minor_slot_pos = 2;
  for (int i = 0; i < this->minor_slot_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->minor_slot_pos(i), target);
  }

  // repeated int32 minor_slot_nickname = 3;
  for (int i = 0; i < this->minor_slot_nickname_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->minor_slot_nickname(i), target);
  }

  // repeated int32 major_slot_pos = 4;
  for (int i = 0; i < this->major_slot_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->major_slot_pos(i), target);
  }

  // repeated int32 major_slot_nickname = 5;
  for (int i = 0; i < this->major_slot_nickname_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->major_slot_nickname(i), target);
  }

  // optional int32 upgrade_times = 6;
  if (has_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upgrade_times(), target);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bless_amount_clear_time(), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TianXieProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.TianXieConfigProto tian_xie = 1;
    if (has_tian_xie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tian_xie());
    }

    // optional int32 bless_amount = 10;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 11;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 upgrade_times = 6;
    if (has_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_times());
    }

    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 minor_slot_pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_slot_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minor_slot_pos(i));
    }
    total_size += 1 * this->minor_slot_pos_size() + data_size;
  }

  // repeated int32 minor_slot_nickname = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_slot_nickname_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minor_slot_nickname(i));
    }
    total_size += 1 * this->minor_slot_nickname_size() + data_size;
  }

  // repeated int32 major_slot_pos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->major_slot_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->major_slot_pos(i));
    }
    total_size += 1 * this->major_slot_pos_size() + data_size;
  }

  // repeated int32 major_slot_nickname = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->major_slot_nickname_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->major_slot_nickname(i));
    }
    total_size += 1 * this->major_slot_nickname_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TianXieProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TianXieProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TianXieProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TianXieProto::MergeFrom(const TianXieProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  minor_slot_pos_.MergeFrom(from.minor_slot_pos_);
  minor_slot_nickname_.MergeFrom(from.minor_slot_nickname_);
  major_slot_pos_.MergeFrom(from.major_slot_pos_);
  major_slot_nickname_.MergeFrom(from.major_slot_nickname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tian_xie()) {
      mutable_tian_xie()->::app::message::TianXieConfigProto::MergeFrom(from.tian_xie());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_upgrade_times()) {
      set_upgrade_times(from.upgrade_times());
    }
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TianXieProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TianXieProto::CopyFrom(const TianXieProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TianXieProto::IsInitialized() const {

  return true;
}

void TianXieProto::Swap(TianXieProto* other) {
  if (other != this) {
    std::swap(tian_xie_, other->tian_xie_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    minor_slot_pos_.Swap(&other->minor_slot_pos_);
    minor_slot_nickname_.Swap(&other->minor_slot_nickname_);
    major_slot_pos_.Swap(&other->major_slot_pos_);
    major_slot_nickname_.Swap(&other->major_slot_nickname_);
    std::swap(upgrade_times_, other->upgrade_times_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TianXieProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TianXieProto_descriptor_;
  metadata.reflection = TianXieProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WuDaoProto::kWuDaoFieldNumber;
const int WuDaoProto::kBlessAmountFieldNumber;
const int WuDaoProto::kBlessAmountClearTimeFieldNumber;
const int WuDaoProto::kQianNengUseCountFieldNumber;
const int WuDaoProto::kHuanHuaUseCountFieldNumber;
const int WuDaoProto::kMoBingEquipTypeFieldNumber;
const int WuDaoProto::kUpgradeTimesFieldNumber;
const int WuDaoProto::kQianNengExtraMaxUseCountFieldNumber;
const int WuDaoProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int WuDaoProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int WuDaoProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

WuDaoProto::WuDaoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WuDaoProto::InitAsDefaultInstance() {
  wu_dao_ = const_cast< ::app::message::WuDaoConfigProto*>(&::app::message::WuDaoConfigProto::default_instance());
}

WuDaoProto::WuDaoProto(const WuDaoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WuDaoProto::SharedCtor() {
  _cached_size_ = 0;
  wu_dao_ = NULL;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  upgrade_times_ = 0;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WuDaoProto::~WuDaoProto() {
  SharedDtor();
}

void WuDaoProto::SharedDtor() {
  if (this != default_instance_) {
    delete wu_dao_;
  }
}

void WuDaoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WuDaoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WuDaoProto_descriptor_;
}

const WuDaoProto& WuDaoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

WuDaoProto* WuDaoProto::default_instance_ = NULL;

WuDaoProto* WuDaoProto::New() const {
  return new WuDaoProto;
}

void WuDaoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wu_dao()) {
      if (wu_dao_ != NULL) wu_dao_->::app::message::WuDaoConfigProto::Clear();
    }
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    upgrade_times_ = 0;
    qian_neng_extra_max_use_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  mo_bing_equip_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WuDaoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.WuDaoConfigProto wu_dao = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wu_dao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upgrade_times;
        break;
      }

      // optional int32 upgrade_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_times_)));
          set_has_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mo_bing_equip_type;
        break;
      }

      // repeated int32 mo_bing_equip_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mo_bing_equip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_mo_bing_equip_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mo_bing_equip_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mo_bing_equip_type;
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WuDaoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.WuDaoConfigProto wu_dao = 1;
  if (has_wu_dao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wu_dao(), output);
  }

  // optional int32 bless_amount = 2;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 3;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bless_amount_clear_time(), output);
  }

  // optional int32 upgrade_times = 6;
  if (has_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upgrade_times(), output);
  }

  // repeated int32 mo_bing_equip_type = 10;
  for (int i = 0; i < this->mo_bing_equip_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->mo_bing_equip_type(i), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WuDaoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.WuDaoConfigProto wu_dao = 1;
  if (has_wu_dao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wu_dao(), target);
  }

  // optional int32 bless_amount = 2;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 3;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bless_amount_clear_time(), target);
  }

  // optional int32 upgrade_times = 6;
  if (has_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upgrade_times(), target);
  }

  // repeated int32 mo_bing_equip_type = 10;
  for (int i = 0; i < this->mo_bing_equip_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->mo_bing_equip_type(i), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WuDaoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.WuDaoConfigProto wu_dao = 1;
    if (has_wu_dao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wu_dao());
    }

    // optional int32 bless_amount = 2;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 3;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional int32 upgrade_times = 6;
    if (has_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_times());
    }

    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 mo_bing_equip_type = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->mo_bing_equip_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mo_bing_equip_type(i));
    }
    total_size += 1 * this->mo_bing_equip_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WuDaoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WuDaoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WuDaoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WuDaoProto::MergeFrom(const WuDaoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mo_bing_equip_type_.MergeFrom(from.mo_bing_equip_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wu_dao()) {
      mutable_wu_dao()->::app::message::WuDaoConfigProto::MergeFrom(from.wu_dao());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_upgrade_times()) {
      set_upgrade_times(from.upgrade_times());
    }
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WuDaoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WuDaoProto::CopyFrom(const WuDaoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WuDaoProto::IsInitialized() const {

  return true;
}

void WuDaoProto::Swap(WuDaoProto* other) {
  if (other != this) {
    std::swap(wu_dao_, other->wu_dao_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    mo_bing_equip_type_.Swap(&other->mo_bing_equip_type_);
    std::swap(upgrade_times_, other->upgrade_times_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WuDaoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WuDaoProto_descriptor_;
  metadata.reflection = WuDaoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloakProto::kCloakFieldNumber;
const int CloakProto::kBlessAmountFieldNumber;
const int CloakProto::kBlessAmountClearTimeFieldNumber;
const int CloakProto::kSpellPosFieldNumber;
const int CloakProto::kSpellsFieldNumber;
const int CloakProto::kIsShowFieldNumber;
const int CloakProto::kQianNengUseCountFieldNumber;
const int CloakProto::kHuanHuaUseCountFieldNumber;
const int CloakProto::kQianNengExtraMaxUseCountFieldNumber;
const int CloakProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int CloakProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int CloakProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

CloakProto::CloakProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloakProto::InitAsDefaultInstance() {
  cloak_ = const_cast< ::app::message::CloakConfigProto*>(&::app::message::CloakConfigProto::default_instance());
}

CloakProto::CloakProto(const CloakProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloakProto::SharedCtor() {
  _cached_size_ = 0;
  cloak_ = NULL;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  is_show_ = false;
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloakProto::~CloakProto() {
  SharedDtor();
}

void CloakProto::SharedDtor() {
  if (this != default_instance_) {
    delete cloak_;
  }
}

void CloakProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloakProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloakProto_descriptor_;
}

const CloakProto& CloakProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

CloakProto* CloakProto::default_instance_ = NULL;

CloakProto* CloakProto::New() const {
  return new CloakProto;
}

void CloakProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cloak()) {
      if (cloak_ != NULL) cloak_->::app::message::CloakConfigProto::Clear();
    }
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    is_show_ = false;
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  spell_pos_.Clear();
  spells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloakProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.CloakConfigProto cloak = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        break;
      }

      // repeated int32 spell_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        if (input->ExpectTag(106)) goto parse_spells;
        break;
      }

      // repeated .app.message.ActiveSpell spells = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_spells;
        if (input->ExpectTag(112)) goto parse_is_show;
        break;
      }

      // optional bool is_show = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloakProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.CloakConfigProto cloak = 1;
  if (has_cloak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cloak(), output);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bless_amount_clear_time(), output);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->spell_pos(i), output);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spells(i), output);
  }

  // optional bool is_show = 14;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_show(), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloakProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.CloakConfigProto cloak = 1;
  if (has_cloak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cloak(), target);
  }

  // optional int32 bless_amount = 10;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 11;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bless_amount_clear_time(), target);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->spell_pos(i), target);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spells(i), target);
  }

  // optional bool is_show = 14;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_show(), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloakProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.CloakConfigProto cloak = 1;
    if (has_cloak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cloak());
    }

    // optional int32 bless_amount = 10;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 11;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional bool is_show = 14;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 spell_pos = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_pos(i));
    }
    total_size += 1 * this->spell_pos_size() + data_size;
  }

  // repeated .app.message.ActiveSpell spells = 13;
  total_size += 1 * this->spells_size();
  for (int i = 0; i < this->spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloakProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloakProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloakProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloakProto::MergeFrom(const CloakProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  spell_pos_.MergeFrom(from.spell_pos_);
  spells_.MergeFrom(from.spells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cloak()) {
      mutable_cloak()->::app::message::CloakConfigProto::MergeFrom(from.cloak());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloakProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloakProto::CopyFrom(const CloakProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloakProto::IsInitialized() const {

  return true;
}

void CloakProto::Swap(CloakProto* other) {
  if (other != this) {
    std::swap(cloak_, other->cloak_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    spell_pos_.Swap(&other->spell_pos_);
    spells_.Swap(&other->spells_);
    std::swap(is_show_, other->is_show_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloakProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloakProto_descriptor_;
  metadata.reflection = CloakProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YitianshenjueProto::kStatInfoFieldNumber;
const int YitianshenjueProto::kCurrentAddStatFieldNumber;
const int YitianshenjueProto::kNextAddStatFieldNumber;
const int YitianshenjueProto::kCurrentCuilianValueFieldNumber;
const int YitianshenjueProto::kEquipmentCuilianCountFieldNumber;
#endif  // !_MSC_VER

YitianshenjueProto::YitianshenjueProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YitianshenjueProto::InitAsDefaultInstance() {
  stat_info_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

YitianshenjueProto::YitianshenjueProto(const YitianshenjueProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YitianshenjueProto::SharedCtor() {
  _cached_size_ = 0;
  stat_info_ = NULL;
  current_cuilian_value_ = 0;
  equipment_cuilian_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YitianshenjueProto::~YitianshenjueProto() {
  SharedDtor();
}

void YitianshenjueProto::SharedDtor() {
  if (this != default_instance_) {
    delete stat_info_;
  }
}

void YitianshenjueProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YitianshenjueProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YitianshenjueProto_descriptor_;
}

const YitianshenjueProto& YitianshenjueProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

YitianshenjueProto* YitianshenjueProto::default_instance_ = NULL;

YitianshenjueProto* YitianshenjueProto::New() const {
  return new YitianshenjueProto;
}

void YitianshenjueProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stat_info()) {
      if (stat_info_ != NULL) stat_info_->::app::message::SpriteStatProto::Clear();
    }
    current_cuilian_value_ = 0;
    equipment_cuilian_count_ = 0;
  }
  current_add_stat_.Clear();
  next_add_stat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YitianshenjueProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.SpriteStatProto stat_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_current_add_stat;
        break;
      }

      // repeated .app.message.SingleStatProto current_add_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_add_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_current_add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_current_add_stat;
        if (input->ExpectTag(26)) goto parse_next_add_stat;
        break;
      }

      // repeated .app.message.SingleStatProto next_add_stat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_add_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_next_add_stat;
        if (input->ExpectTag(32)) goto parse_current_cuilian_value;
        break;
      }

      // optional int32 current_cuilian_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_cuilian_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_cuilian_value_)));
          set_has_current_cuilian_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equipment_cuilian_count;
        break;
      }

      // optional int32 equipment_cuilian_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_cuilian_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipment_cuilian_count_)));
          set_has_equipment_cuilian_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YitianshenjueProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.SpriteStatProto stat_info = 1;
  if (has_stat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stat_info(), output);
  }

  // repeated .app.message.SingleStatProto current_add_stat = 2;
  for (int i = 0; i < this->current_add_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->current_add_stat(i), output);
  }

  // repeated .app.message.SingleStatProto next_add_stat = 3;
  for (int i = 0; i < this->next_add_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->next_add_stat(i), output);
  }

  // optional int32 current_cuilian_value = 4;
  if (has_current_cuilian_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_cuilian_value(), output);
  }

  // optional int32 equipment_cuilian_count = 5;
  if (has_equipment_cuilian_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->equipment_cuilian_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YitianshenjueProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.SpriteStatProto stat_info = 1;
  if (has_stat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stat_info(), target);
  }

  // repeated .app.message.SingleStatProto current_add_stat = 2;
  for (int i = 0; i < this->current_add_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->current_add_stat(i), target);
  }

  // repeated .app.message.SingleStatProto next_add_stat = 3;
  for (int i = 0; i < this->next_add_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->next_add_stat(i), target);
  }

  // optional int32 current_cuilian_value = 4;
  if (has_current_cuilian_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_cuilian_value(), target);
  }

  // optional int32 equipment_cuilian_count = 5;
  if (has_equipment_cuilian_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->equipment_cuilian_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YitianshenjueProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.SpriteStatProto stat_info = 1;
    if (has_stat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat_info());
    }

    // optional int32 current_cuilian_value = 4;
    if (has_current_cuilian_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_cuilian_value());
    }

    // optional int32 equipment_cuilian_count = 5;
    if (has_equipment_cuilian_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipment_cuilian_count());
    }

  }
  // repeated .app.message.SingleStatProto current_add_stat = 2;
  total_size += 1 * this->current_add_stat_size();
  for (int i = 0; i < this->current_add_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->current_add_stat(i));
  }

  // repeated .app.message.SingleStatProto next_add_stat = 3;
  total_size += 1 * this->next_add_stat_size();
  for (int i = 0; i < this->next_add_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_add_stat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YitianshenjueProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YitianshenjueProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YitianshenjueProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YitianshenjueProto::MergeFrom(const YitianshenjueProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  current_add_stat_.MergeFrom(from.current_add_stat_);
  next_add_stat_.MergeFrom(from.next_add_stat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_info()) {
      mutable_stat_info()->::app::message::SpriteStatProto::MergeFrom(from.stat_info());
    }
    if (from.has_current_cuilian_value()) {
      set_current_cuilian_value(from.current_cuilian_value());
    }
    if (from.has_equipment_cuilian_count()) {
      set_equipment_cuilian_count(from.equipment_cuilian_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YitianshenjueProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YitianshenjueProto::CopyFrom(const YitianshenjueProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YitianshenjueProto::IsInitialized() const {

  return true;
}

void YitianshenjueProto::Swap(YitianshenjueProto* other) {
  if (other != this) {
    std::swap(stat_info_, other->stat_info_);
    current_add_stat_.Swap(&other->current_add_stat_);
    next_add_stat_.Swap(&other->next_add_stat_);
    std::swap(current_cuilian_value_, other->current_cuilian_value_);
    std::swap(equipment_cuilian_count_, other->equipment_cuilian_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YitianshenjueProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YitianshenjueProto_descriptor_;
  metadata.reflection = YitianshenjueProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountProto::kBestMountFieldNumber;
const int MountProto::kRidingMountFieldNumber;
const int MountProto::kIsRideFieldNumber;
const int MountProto::kBuyTimeFieldNumber;
const int MountProto::kBlessAmountFieldNumber;
const int MountProto::kBlessAmountClearTimeFieldNumber;
const int MountProto::kAddedDataFieldNumber;
const int MountProto::kSpellPosFieldNumber;
const int MountProto::kSpellsFieldNumber;
const int MountProto::kEquipmentPosFieldNumber;
const int MountProto::kEquipmentStaticDataFieldNumber;
const int MountProto::kEquipmentDynamicDataFieldNumber;
const int MountProto::kQianNengUseCountFieldNumber;
const int MountProto::kHuanHuaUseCountFieldNumber;
const int MountProto::kIsHideHuanHuaFieldNumber;
const int MountProto::kQianNengExtraMaxUseCountFieldNumber;
const int MountProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int MountProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int MountProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

MountProto::MountProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountProto::InitAsDefaultInstance() {
  added_data_ = const_cast< ::app::message::MountAddedDataProto*>(&::app::message::MountAddedDataProto::default_instance());
}

MountProto::MountProto(const MountProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountProto::SharedCtor() {
  _cached_size_ = 0;
  best_mount_ = 0;
  riding_mount_ = 0;
  is_ride_ = false;
  buy_time_ = GOOGLE_LONGLONG(0);
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  added_data_ = NULL;
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  is_hide_huan_hua_ = false;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountProto::~MountProto() {
  SharedDtor();
}

void MountProto::SharedDtor() {
  if (this != default_instance_) {
    delete added_data_;
  }
}

void MountProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountProto_descriptor_;
}

const MountProto& MountProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MountProto* MountProto::default_instance_ = NULL;

MountProto* MountProto::New() const {
  return new MountProto;
}

void MountProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    best_mount_ = 0;
    riding_mount_ = 0;
    is_ride_ = false;
    buy_time_ = GOOGLE_LONGLONG(0);
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    if (has_added_data()) {
      if (added_data_ != NULL) added_data_->::app::message::MountAddedDataProto::Clear();
    }
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    is_hide_huan_hua_ = false;
    qian_neng_extra_max_use_count_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  spell_pos_.Clear();
  spells_.Clear();
  equipment_pos_.Clear();
  equipment_static_data_.Clear();
  equipment_dynamic_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 best_mount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_mount_)));
          set_has_best_mount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_riding_mount;
        break;
      }

      // optional int32 riding_mount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_riding_mount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &riding_mount_)));
          set_has_riding_mount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ride;
        break;
      }

      // optional bool is_ride = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ride_)));
          set_has_is_ride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_time;
        break;
      }

      // optional int64 buy_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_time_)));
          set_has_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_added_data;
        break;
      }

      // optional .app.message.MountAddedDataProto added_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_added_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        break;
      }

      // repeated int32 spell_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spell_pos;
        if (input->ExpectTag(106)) goto parse_spells;
        break;
      }

      // repeated .app.message.ActiveSpell spells = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_spells;
        if (input->ExpectTag(112)) goto parse_equipment_pos;
        break;
      }

      // repeated int32 equipment_pos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_equipment_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipment_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_equipment_pos;
        if (input->ExpectTag(122)) goto parse_equipment_static_data;
        break;
      }

      // repeated bytes equipment_static_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_static_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_equipment_static_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_equipment_static_data;
        if (input->ExpectTag(130)) goto parse_equipment_dynamic_data;
        break;
      }

      // repeated bytes equipment_dynamic_data = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_dynamic_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_equipment_dynamic_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_equipment_dynamic_data;
        if (input->ExpectTag(168)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_hide_huan_hua;
        break;
      }

      // optional bool is_hide_huan_hua = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide_huan_hua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_huan_hua_)));
          set_has_is_hide_huan_hua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 best_mount = 1;
  if (has_best_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->best_mount(), output);
  }

  // optional int32 riding_mount = 2;
  if (has_riding_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->riding_mount(), output);
  }

  // optional bool is_ride = 3;
  if (has_is_ride()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ride(), output);
  }

  // optional int64 buy_time = 5;
  if (has_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->buy_time(), output);
  }

  // optional int32 bless_amount = 6;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 7;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bless_amount_clear_time(), output);
  }

  // optional .app.message.MountAddedDataProto added_data = 8;
  if (has_added_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->added_data(), output);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->spell_pos(i), output);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spells(i), output);
  }

  // repeated int32 equipment_pos = 14;
  for (int i = 0; i < this->equipment_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->equipment_pos(i), output);
  }

  // repeated bytes equipment_static_data = 15;
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->equipment_static_data(i), output);
  }

  // repeated bytes equipment_dynamic_data = 16;
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->equipment_dynamic_data(i), output);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->huan_hua_use_count(), output);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_hide_huan_hua(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 best_mount = 1;
  if (has_best_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->best_mount(), target);
  }

  // optional int32 riding_mount = 2;
  if (has_riding_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->riding_mount(), target);
  }

  // optional bool is_ride = 3;
  if (has_is_ride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ride(), target);
  }

  // optional int64 buy_time = 5;
  if (has_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->buy_time(), target);
  }

  // optional int32 bless_amount = 6;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 7;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->bless_amount_clear_time(), target);
  }

  // optional .app.message.MountAddedDataProto added_data = 8;
  if (has_added_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->added_data(), target);
  }

  // repeated int32 spell_pos = 12;
  for (int i = 0; i < this->spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->spell_pos(i), target);
  }

  // repeated .app.message.ActiveSpell spells = 13;
  for (int i = 0; i < this->spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spells(i), target);
  }

  // repeated int32 equipment_pos = 14;
  for (int i = 0; i < this->equipment_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->equipment_pos(i), target);
  }

  // repeated bytes equipment_static_data = 15;
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(15, this->equipment_static_data(i), target);
  }

  // repeated bytes equipment_dynamic_data = 16;
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(16, this->equipment_dynamic_data(i), target);
  }

  // optional int32 qian_neng_use_count = 21;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 22;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->huan_hua_use_count(), target);
  }

  // optional bool is_hide_huan_hua = 24;
  if (has_is_hide_huan_hua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_hide_huan_hua(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 best_mount = 1;
    if (has_best_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_mount());
    }

    // optional int32 riding_mount = 2;
    if (has_riding_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->riding_mount());
    }

    // optional bool is_ride = 3;
    if (has_is_ride()) {
      total_size += 1 + 1;
    }

    // optional int64 buy_time = 5;
    if (has_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_time());
    }

    // optional int32 bless_amount = 6;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 7;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional .app.message.MountAddedDataProto added_data = 8;
    if (has_added_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->added_data());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional int32 qian_neng_use_count = 21;
    if (has_qian_neng_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 22;
    if (has_huan_hua_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional bool is_hide_huan_hua = 24;
    if (has_is_hide_huan_hua()) {
      total_size += 2 + 1;
    }

    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 spell_pos = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spell_pos(i));
    }
    total_size += 1 * this->spell_pos_size() + data_size;
  }

  // repeated .app.message.ActiveSpell spells = 13;
  total_size += 1 * this->spells_size();
  for (int i = 0; i < this->spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spells(i));
  }

  // repeated int32 equipment_pos = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipment_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipment_pos(i));
    }
    total_size += 1 * this->equipment_pos_size() + data_size;
  }

  // repeated bytes equipment_static_data = 15;
  total_size += 1 * this->equipment_static_data_size();
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->equipment_static_data(i));
  }

  // repeated bytes equipment_dynamic_data = 16;
  total_size += 2 * this->equipment_dynamic_data_size();
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->equipment_dynamic_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountProto::MergeFrom(const MountProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  spell_pos_.MergeFrom(from.spell_pos_);
  spells_.MergeFrom(from.spells_);
  equipment_pos_.MergeFrom(from.equipment_pos_);
  equipment_static_data_.MergeFrom(from.equipment_static_data_);
  equipment_dynamic_data_.MergeFrom(from.equipment_dynamic_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_best_mount()) {
      set_best_mount(from.best_mount());
    }
    if (from.has_riding_mount()) {
      set_riding_mount(from.riding_mount());
    }
    if (from.has_is_ride()) {
      set_is_ride(from.is_ride());
    }
    if (from.has_buy_time()) {
      set_buy_time(from.buy_time());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_added_data()) {
      mutable_added_data()->::app::message::MountAddedDataProto::MergeFrom(from.added_data());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_is_hide_huan_hua()) {
      set_is_hide_huan_hua(from.is_hide_huan_hua());
    }
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountProto::CopyFrom(const MountProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountProto::IsInitialized() const {

  return true;
}

void MountProto::Swap(MountProto* other) {
  if (other != this) {
    std::swap(best_mount_, other->best_mount_);
    std::swap(riding_mount_, other->riding_mount_);
    std::swap(is_ride_, other->is_ride_);
    std::swap(buy_time_, other->buy_time_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(added_data_, other->added_data_);
    spell_pos_.Swap(&other->spell_pos_);
    spells_.Swap(&other->spells_);
    equipment_pos_.Swap(&other->equipment_pos_);
    equipment_static_data_.Swap(&other->equipment_static_data_);
    equipment_dynamic_data_.Swap(&other->equipment_dynamic_data_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(is_hide_huan_hua_, other->is_hide_huan_hua_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountProto_descriptor_;
  metadata.reflection = MountProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountAddedDataProto::kAddedStatFieldNumber;
const int MountAddedDataProto::kAddedFightingAmountFieldNumber;
#endif  // !_MSC_VER

MountAddedDataProto::MountAddedDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountAddedDataProto::InitAsDefaultInstance() {
}

MountAddedDataProto::MountAddedDataProto(const MountAddedDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountAddedDataProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountAddedDataProto::~MountAddedDataProto() {
  SharedDtor();
}

void MountAddedDataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountAddedDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountAddedDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountAddedDataProto_descriptor_;
}

const MountAddedDataProto& MountAddedDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MountAddedDataProto* MountAddedDataProto::default_instance_ = NULL;

MountAddedDataProto* MountAddedDataProto::New() const {
  return new MountAddedDataProto;
}

void MountAddedDataProto::Clear() {
  added_stat_.Clear();
  added_fighting_amount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountAddedDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.SpriteStatProto added_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_added_stat;
        if (input->ExpectTag(24)) goto parse_added_fighting_amount;
        break;
      }

      // repeated int32 added_fighting_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_added_fighting_amount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_added_fighting_amount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_added_fighting_amount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountAddedDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.SpriteStatProto added_stat = 2;
  for (int i = 0; i < this->added_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->added_stat(i), output);
  }

  // repeated int32 added_fighting_amount = 3;
  for (int i = 0; i < this->added_fighting_amount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->added_fighting_amount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountAddedDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.SpriteStatProto added_stat = 2;
  for (int i = 0; i < this->added_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->added_stat(i), target);
  }

  // repeated int32 added_fighting_amount = 3;
  for (int i = 0; i < this->added_fighting_amount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->added_fighting_amount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountAddedDataProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.SpriteStatProto added_stat = 2;
  total_size += 1 * this->added_stat_size();
  for (int i = 0; i < this->added_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->added_stat(i));
  }

  // repeated int32 added_fighting_amount = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->added_fighting_amount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->added_fighting_amount(i));
    }
    total_size += 1 * this->added_fighting_amount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountAddedDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountAddedDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountAddedDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountAddedDataProto::MergeFrom(const MountAddedDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  added_stat_.MergeFrom(from.added_stat_);
  added_fighting_amount_.MergeFrom(from.added_fighting_amount_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountAddedDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountAddedDataProto::CopyFrom(const MountAddedDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountAddedDataProto::IsInitialized() const {

  return true;
}

void MountAddedDataProto::Swap(MountAddedDataProto* other) {
  if (other != this) {
    added_stat_.Swap(&other->added_stat_);
    added_fighting_amount_.Swap(&other->added_fighting_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountAddedDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountAddedDataProto_descriptor_;
  metadata.reflection = MountAddedDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperWeaponProto::kIdFieldNumber;
const int SuperWeaponProto::kUpgradePosFieldNumber;
const int SuperWeaponProto::kNextUpgradeDataFieldNumber;
const int SuperWeaponProto::kHasUnlockSoulFieldNumber;
const int SuperWeaponProto::kHasUnlockWeaponFieldNumber;
const int SuperWeaponProto::kHasUnlockMagicSpellFieldNumber;
const int SuperWeaponProto::kAddedStatFieldNumber;
const int SuperWeaponProto::kNotSavedAddedStatFieldNumber;
const int SuperWeaponProto::kHasUnlockWeaponGemFieldNumber;
const int SuperWeaponProto::kWeaponGemLevelFieldNumber;
const int SuperWeaponProto::kWeaponGemBindedFieldNumber;
const int SuperWeaponProto::kSuperUpgradePosFieldNumber;
const int SuperWeaponProto::kSuperUpgradeStatFieldNumber;
#endif  // !_MSC_VER

SuperWeaponProto::SuperWeaponProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuperWeaponProto::InitAsDefaultInstance() {
  next_upgrade_data_ = const_cast< ::app::message::UpgradeProto*>(&::app::message::UpgradeProto::default_instance());
  added_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  not_saved_added_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
  super_upgrade_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

SuperWeaponProto::SuperWeaponProto(const SuperWeaponProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuperWeaponProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upgrade_pos_ = 0;
  next_upgrade_data_ = NULL;
  has_unlock_soul_ = false;
  has_unlock_weapon_ = false;
  has_unlock_magic_spell_ = false;
  added_stat_ = NULL;
  not_saved_added_stat_ = NULL;
  super_upgrade_stat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperWeaponProto::~SuperWeaponProto() {
  SharedDtor();
}

void SuperWeaponProto::SharedDtor() {
  if (this != default_instance_) {
    delete next_upgrade_data_;
    delete added_stat_;
    delete not_saved_added_stat_;
    delete super_upgrade_stat_;
  }
}

void SuperWeaponProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperWeaponProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperWeaponProto_descriptor_;
}

const SuperWeaponProto& SuperWeaponProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

SuperWeaponProto* SuperWeaponProto::default_instance_ = NULL;

SuperWeaponProto* SuperWeaponProto::New() const {
  return new SuperWeaponProto;
}

void SuperWeaponProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upgrade_pos_ = 0;
    if (has_next_upgrade_data()) {
      if (next_upgrade_data_ != NULL) next_upgrade_data_->::app::message::UpgradeProto::Clear();
    }
    has_unlock_soul_ = false;
    has_unlock_weapon_ = false;
    has_unlock_magic_spell_ = false;
    if (has_added_stat()) {
      if (added_stat_ != NULL) added_stat_->::app::message::SpriteStatProto::Clear();
    }
    if (has_not_saved_added_stat()) {
      if (not_saved_added_stat_ != NULL) not_saved_added_stat_->::app::message::SpriteStatProto::Clear();
    }
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (has_super_upgrade_stat()) {
      if (super_upgrade_stat_ != NULL) super_upgrade_stat_->::app::message::SpriteStatProto::Clear();
    }
  }
  has_unlock_weapon_gem_.Clear();
  weapon_gem_level_.Clear();
  weapon_gem_binded_.Clear();
  super_upgrade_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperWeaponProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgrade_pos;
        break;
      }

      // optional int32 upgrade_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_pos_)));
          set_has_upgrade_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_next_upgrade_data;
        break;
      }

      // optional .app.message.UpgradeProto next_upgrade_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_upgrade_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_upgrade_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_unlock_soul;
        break;
      }

      // optional bool has_unlock_soul = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_unlock_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_unlock_soul_)));
          set_has_has_unlock_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_has_unlock_weapon;
        break;
      }

      // optional bool has_unlock_weapon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_unlock_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_unlock_weapon_)));
          set_has_has_unlock_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_has_unlock_magic_spell;
        break;
      }

      // optional bool has_unlock_magic_spell = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_unlock_magic_spell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_unlock_magic_spell_)));
          set_has_has_unlock_magic_spell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_added_stat;
        break;
      }

      // optional .app.message.SpriteStatProto added_stat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_not_saved_added_stat;
        break;
      }

      // optional .app.message.SpriteStatProto not_saved_added_stat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_not_saved_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_saved_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_has_unlock_weapon_gem;
        break;
      }

      // repeated bool has_unlock_weapon_gem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_unlock_weapon_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 96, input, this->mutable_has_unlock_weapon_gem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_has_unlock_weapon_gem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_has_unlock_weapon_gem;
        if (input->ExpectTag(104)) goto parse_weapon_gem_level;
        break;
      }

      // repeated int32 weapon_gem_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_gem_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_weapon_gem_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weapon_gem_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weapon_gem_level;
        if (input->ExpectTag(112)) goto parse_weapon_gem_binded;
        break;
      }

      // repeated bool weapon_gem_binded = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_gem_binded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 112, input, this->mutable_weapon_gem_binded())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_weapon_gem_binded())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_weapon_gem_binded;
        if (input->ExpectTag(168)) goto parse_super_upgrade_pos;
        break;
      }

      // repeated int32 super_upgrade_pos = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_upgrade_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_super_upgrade_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_super_upgrade_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_super_upgrade_pos;
        if (input->ExpectTag(178)) goto parse_super_upgrade_stat;
        break;
      }

      // optional .app.message.SpriteStatProto super_upgrade_stat = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_upgrade_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_upgrade_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuperWeaponProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 upgrade_pos = 2;
  if (has_upgrade_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgrade_pos(), output);
  }

  // optional .app.message.UpgradeProto next_upgrade_data = 6;
  if (has_next_upgrade_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->next_upgrade_data(), output);
  }

  // optional bool has_unlock_soul = 7;
  if (has_has_unlock_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_unlock_soul(), output);
  }

  // optional bool has_unlock_weapon = 8;
  if (has_has_unlock_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->has_unlock_weapon(), output);
  }

  // optional bool has_unlock_magic_spell = 9;
  if (has_has_unlock_magic_spell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_unlock_magic_spell(), output);
  }

  // optional .app.message.SpriteStatProto added_stat = 10;
  if (has_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->added_stat(), output);
  }

  // optional .app.message.SpriteStatProto not_saved_added_stat = 11;
  if (has_not_saved_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->not_saved_added_stat(), output);
  }

  // repeated bool has_unlock_weapon_gem = 12;
  for (int i = 0; i < this->has_unlock_weapon_gem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      12, this->has_unlock_weapon_gem(i), output);
  }

  // repeated int32 weapon_gem_level = 13;
  for (int i = 0; i < this->weapon_gem_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->weapon_gem_level(i), output);
  }

  // repeated bool weapon_gem_binded = 14;
  for (int i = 0; i < this->weapon_gem_binded_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      14, this->weapon_gem_binded(i), output);
  }

  // repeated int32 super_upgrade_pos = 21;
  for (int i = 0; i < this->super_upgrade_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->super_upgrade_pos(i), output);
  }

  // optional .app.message.SpriteStatProto super_upgrade_stat = 22;
  if (has_super_upgrade_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->super_upgrade_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuperWeaponProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 upgrade_pos = 2;
  if (has_upgrade_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgrade_pos(), target);
  }

  // optional .app.message.UpgradeProto next_upgrade_data = 6;
  if (has_next_upgrade_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->next_upgrade_data(), target);
  }

  // optional bool has_unlock_soul = 7;
  if (has_has_unlock_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_unlock_soul(), target);
  }

  // optional bool has_unlock_weapon = 8;
  if (has_has_unlock_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->has_unlock_weapon(), target);
  }

  // optional bool has_unlock_magic_spell = 9;
  if (has_has_unlock_magic_spell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_unlock_magic_spell(), target);
  }

  // optional .app.message.SpriteStatProto added_stat = 10;
  if (has_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->added_stat(), target);
  }

  // optional .app.message.SpriteStatProto not_saved_added_stat = 11;
  if (has_not_saved_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->not_saved_added_stat(), target);
  }

  // repeated bool has_unlock_weapon_gem = 12;
  for (int i = 0; i < this->has_unlock_weapon_gem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(12, this->has_unlock_weapon_gem(i), target);
  }

  // repeated int32 weapon_gem_level = 13;
  for (int i = 0; i < this->weapon_gem_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->weapon_gem_level(i), target);
  }

  // repeated bool weapon_gem_binded = 14;
  for (int i = 0; i < this->weapon_gem_binded_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(14, this->weapon_gem_binded(i), target);
  }

  // repeated int32 super_upgrade_pos = 21;
  for (int i = 0; i < this->super_upgrade_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->super_upgrade_pos(i), target);
  }

  // optional .app.message.SpriteStatProto super_upgrade_stat = 22;
  if (has_super_upgrade_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->super_upgrade_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuperWeaponProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 upgrade_pos = 2;
    if (has_upgrade_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_pos());
    }

    // optional .app.message.UpgradeProto next_upgrade_data = 6;
    if (has_next_upgrade_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_upgrade_data());
    }

    // optional bool has_unlock_soul = 7;
    if (has_has_unlock_soul()) {
      total_size += 1 + 1;
    }

    // optional bool has_unlock_weapon = 8;
    if (has_has_unlock_weapon()) {
      total_size += 1 + 1;
    }

    // optional bool has_unlock_magic_spell = 9;
    if (has_has_unlock_magic_spell()) {
      total_size += 1 + 1;
    }

    // optional .app.message.SpriteStatProto added_stat = 10;
    if (has_added_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->added_stat());
    }

    // optional .app.message.SpriteStatProto not_saved_added_stat = 11;
    if (has_not_saved_added_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->not_saved_added_stat());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .app.message.SpriteStatProto super_upgrade_stat = 22;
    if (has_super_upgrade_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super_upgrade_stat());
    }

  }
  // repeated bool has_unlock_weapon_gem = 12;
  {
    int data_size = 0;
    data_size = 1 * this->has_unlock_weapon_gem_size();
    total_size += 1 * this->has_unlock_weapon_gem_size() + data_size;
  }

  // repeated int32 weapon_gem_level = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->weapon_gem_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weapon_gem_level(i));
    }
    total_size += 1 * this->weapon_gem_level_size() + data_size;
  }

  // repeated bool weapon_gem_binded = 14;
  {
    int data_size = 0;
    data_size = 1 * this->weapon_gem_binded_size();
    total_size += 1 * this->weapon_gem_binded_size() + data_size;
  }

  // repeated int32 super_upgrade_pos = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->super_upgrade_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->super_upgrade_pos(i));
    }
    total_size += 2 * this->super_upgrade_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperWeaponProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperWeaponProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperWeaponProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperWeaponProto::MergeFrom(const SuperWeaponProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  has_unlock_weapon_gem_.MergeFrom(from.has_unlock_weapon_gem_);
  weapon_gem_level_.MergeFrom(from.weapon_gem_level_);
  weapon_gem_binded_.MergeFrom(from.weapon_gem_binded_);
  super_upgrade_pos_.MergeFrom(from.super_upgrade_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upgrade_pos()) {
      set_upgrade_pos(from.upgrade_pos());
    }
    if (from.has_next_upgrade_data()) {
      mutable_next_upgrade_data()->::app::message::UpgradeProto::MergeFrom(from.next_upgrade_data());
    }
    if (from.has_has_unlock_soul()) {
      set_has_unlock_soul(from.has_unlock_soul());
    }
    if (from.has_has_unlock_weapon()) {
      set_has_unlock_weapon(from.has_unlock_weapon());
    }
    if (from.has_has_unlock_magic_spell()) {
      set_has_unlock_magic_spell(from.has_unlock_magic_spell());
    }
    if (from.has_added_stat()) {
      mutable_added_stat()->::app::message::SpriteStatProto::MergeFrom(from.added_stat());
    }
    if (from.has_not_saved_added_stat()) {
      mutable_not_saved_added_stat()->::app::message::SpriteStatProto::MergeFrom(from.not_saved_added_stat());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_super_upgrade_stat()) {
      mutable_super_upgrade_stat()->::app::message::SpriteStatProto::MergeFrom(from.super_upgrade_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperWeaponProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperWeaponProto::CopyFrom(const SuperWeaponProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperWeaponProto::IsInitialized() const {

  return true;
}

void SuperWeaponProto::Swap(SuperWeaponProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upgrade_pos_, other->upgrade_pos_);
    std::swap(next_upgrade_data_, other->next_upgrade_data_);
    std::swap(has_unlock_soul_, other->has_unlock_soul_);
    std::swap(has_unlock_weapon_, other->has_unlock_weapon_);
    std::swap(has_unlock_magic_spell_, other->has_unlock_magic_spell_);
    std::swap(added_stat_, other->added_stat_);
    std::swap(not_saved_added_stat_, other->not_saved_added_stat_);
    has_unlock_weapon_gem_.Swap(&other->has_unlock_weapon_gem_);
    weapon_gem_level_.Swap(&other->weapon_gem_level_);
    weapon_gem_binded_.Swap(&other->weapon_gem_binded_);
    super_upgrade_pos_.Swap(&other->super_upgrade_pos_);
    std::swap(super_upgrade_stat_, other->super_upgrade_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperWeaponProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperWeaponProto_descriptor_;
  metadata.reflection = SuperWeaponProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoryDungeonStatProto::kDungeonIdFieldNumber;
const int StoryDungeonStatProto::kIsFinishedTodayFieldNumber;
const int StoryDungeonStatProto::kFastestRecordFieldNumber;
const int StoryDungeonStatProto::kCanNotEnterTodayFieldNumber;
#endif  // !_MSC_VER

StoryDungeonStatProto::StoryDungeonStatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoryDungeonStatProto::InitAsDefaultInstance() {
}

StoryDungeonStatProto::StoryDungeonStatProto(const StoryDungeonStatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoryDungeonStatProto::SharedCtor() {
  _cached_size_ = 0;
  dungeon_id_ = 0;
  is_finished_today_ = false;
  fastest_record_ = 0;
  can_not_enter_today_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryDungeonStatProto::~StoryDungeonStatProto() {
  SharedDtor();
}

void StoryDungeonStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoryDungeonStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoryDungeonStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoryDungeonStatProto_descriptor_;
}

const StoryDungeonStatProto& StoryDungeonStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

StoryDungeonStatProto* StoryDungeonStatProto::default_instance_ = NULL;

StoryDungeonStatProto* StoryDungeonStatProto::New() const {
  return new StoryDungeonStatProto;
}

void StoryDungeonStatProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeon_id_ = 0;
    is_finished_today_ = false;
    fastest_record_ = 0;
    can_not_enter_today_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoryDungeonStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dungeon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_finished_today;
        break;
      }

      // optional bool is_finished_today = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_today_)));
          set_has_is_finished_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fastest_record;
        break;
      }

      // optional int32 fastest_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fastest_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastest_record_)));
          set_has_fastest_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_not_enter_today;
        break;
      }

      // optional bool can_not_enter_today = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_not_enter_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_not_enter_today_)));
          set_has_can_not_enter_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoryDungeonStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeon_id(), output);
  }

  // optional bool is_finished_today = 2;
  if (has_is_finished_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_finished_today(), output);
  }

  // optional int32 fastest_record = 3;
  if (has_fastest_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fastest_record(), output);
  }

  // optional bool can_not_enter_today = 4;
  if (has_can_not_enter_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_not_enter_today(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoryDungeonStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeon_id(), target);
  }

  // optional bool is_finished_today = 2;
  if (has_is_finished_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_finished_today(), target);
  }

  // optional int32 fastest_record = 3;
  if (has_fastest_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fastest_record(), target);
  }

  // optional bool can_not_enter_today = 4;
  if (has_can_not_enter_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_not_enter_today(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoryDungeonStatProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dungeon_id = 1;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // optional bool is_finished_today = 2;
    if (has_is_finished_today()) {
      total_size += 1 + 1;
    }

    // optional int32 fastest_record = 3;
    if (has_fastest_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastest_record());
    }

    // optional bool can_not_enter_today = 4;
    if (has_can_not_enter_today()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryDungeonStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoryDungeonStatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoryDungeonStatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoryDungeonStatProto::MergeFrom(const StoryDungeonStatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_is_finished_today()) {
      set_is_finished_today(from.is_finished_today());
    }
    if (from.has_fastest_record()) {
      set_fastest_record(from.fastest_record());
    }
    if (from.has_can_not_enter_today()) {
      set_can_not_enter_today(from.can_not_enter_today());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoryDungeonStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryDungeonStatProto::CopyFrom(const StoryDungeonStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryDungeonStatProto::IsInitialized() const {

  return true;
}

void StoryDungeonStatProto::Swap(StoryDungeonStatProto* other) {
  if (other != this) {
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(is_finished_today_, other->is_finished_today_);
    std::swap(fastest_record_, other->fastest_record_);
    std::swap(can_not_enter_today_, other->can_not_enter_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoryDungeonStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoryDungeonStatProto_descriptor_;
  metadata.reflection = StoryDungeonStatProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoryDungeonFinishStatProto::kTotalTimeFieldNumber;
const int StoryDungeonFinishStatProto::kDeadCountFieldNumber;
const int StoryDungeonFinishStatProto::kMonsterExpFieldNumber;
const int StoryDungeonFinishStatProto::kScoreFieldNumber;
const int StoryDungeonFinishStatProto::kTotalTimeFasterFieldNumber;
const int StoryDungeonFinishStatProto::kScoreSPrizeFieldNumber;
const int StoryDungeonFinishStatProto::kVipPrizeFieldNumber;
#endif  // !_MSC_VER

StoryDungeonFinishStatProto::StoryDungeonFinishStatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoryDungeonFinishStatProto::InitAsDefaultInstance() {
}

StoryDungeonFinishStatProto::StoryDungeonFinishStatProto(const StoryDungeonFinishStatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoryDungeonFinishStatProto::SharedCtor() {
  _cached_size_ = 0;
  total_time_ = 0;
  dead_count_ = 0;
  monster_exp_ = 0;
  score_ = 0;
  total_time_faster_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryDungeonFinishStatProto::~StoryDungeonFinishStatProto() {
  SharedDtor();
}

void StoryDungeonFinishStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoryDungeonFinishStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoryDungeonFinishStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoryDungeonFinishStatProto_descriptor_;
}

const StoryDungeonFinishStatProto& StoryDungeonFinishStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

StoryDungeonFinishStatProto* StoryDungeonFinishStatProto::default_instance_ = NULL;

StoryDungeonFinishStatProto* StoryDungeonFinishStatProto::New() const {
  return new StoryDungeonFinishStatProto;
}

void StoryDungeonFinishStatProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_time_ = 0;
    dead_count_ = 0;
    monster_exp_ = 0;
    score_ = 0;
    total_time_faster_ = 0;
  }
  score_s_prize_.Clear();
  vip_prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoryDungeonFinishStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dead_count;
        break;
      }

      // optional int32 dead_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_count_)));
          set_has_dead_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_exp;
        break;
      }

      // optional int32 monster_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_exp_)));
          set_has_monster_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_score_s_prize;
        break;
      }

      // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_s_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_s_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_score_s_prize;
        if (input->ExpectTag(50)) goto parse_vip_prize;
        break;
      }

      // repeated .app.message.GoodsWrapperProto vip_prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vip_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vip_prize;
        if (input->ExpectTag(56)) goto parse_total_time_faster;
        break;
      }

      // optional int32 total_time_faster = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_time_faster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_faster_)));
          set_has_total_time_faster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoryDungeonFinishStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_time = 1;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_time(), output);
  }

  // optional int32 dead_count = 2;
  if (has_dead_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dead_count(), output);
  }

  // optional int32 monster_exp = 3;
  if (has_monster_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monster_exp(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
  for (int i = 0; i < this->score_s_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->score_s_prize(i), output);
  }

  // repeated .app.message.GoodsWrapperProto vip_prize = 6;
  for (int i = 0; i < this->vip_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vip_prize(i), output);
  }

  // optional int32 total_time_faster = 7;
  if (has_total_time_faster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_time_faster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoryDungeonFinishStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_time = 1;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_time(), target);
  }

  // optional int32 dead_count = 2;
  if (has_dead_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dead_count(), target);
  }

  // optional int32 monster_exp = 3;
  if (has_monster_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monster_exp(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
  for (int i = 0; i < this->score_s_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->score_s_prize(i), target);
  }

  // repeated .app.message.GoodsWrapperProto vip_prize = 6;
  for (int i = 0; i < this->vip_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vip_prize(i), target);
  }

  // optional int32 total_time_faster = 7;
  if (has_total_time_faster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_time_faster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoryDungeonFinishStatProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_time = 1;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_time());
    }

    // optional int32 dead_count = 2;
    if (has_dead_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_count());
    }

    // optional int32 monster_exp = 3;
    if (has_monster_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_exp());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 total_time_faster = 7;
    if (has_total_time_faster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_time_faster());
    }

  }
  // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
  total_size += 1 * this->score_s_prize_size();
  for (int i = 0; i < this->score_s_prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_s_prize(i));
  }

  // repeated .app.message.GoodsWrapperProto vip_prize = 6;
  total_size += 1 * this->vip_prize_size();
  for (int i = 0; i < this->vip_prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vip_prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryDungeonFinishStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoryDungeonFinishStatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoryDungeonFinishStatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoryDungeonFinishStatProto::MergeFrom(const StoryDungeonFinishStatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_s_prize_.MergeFrom(from.score_s_prize_);
  vip_prize_.MergeFrom(from.vip_prize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_dead_count()) {
      set_dead_count(from.dead_count());
    }
    if (from.has_monster_exp()) {
      set_monster_exp(from.monster_exp());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_total_time_faster()) {
      set_total_time_faster(from.total_time_faster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoryDungeonFinishStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryDungeonFinishStatProto::CopyFrom(const StoryDungeonFinishStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryDungeonFinishStatProto::IsInitialized() const {

  return true;
}

void StoryDungeonFinishStatProto::Swap(StoryDungeonFinishStatProto* other) {
  if (other != this) {
    std::swap(total_time_, other->total_time_);
    std::swap(dead_count_, other->dead_count_);
    std::swap(monster_exp_, other->monster_exp_);
    std::swap(score_, other->score_);
    std::swap(total_time_faster_, other->total_time_faster_);
    score_s_prize_.Swap(&other->score_s_prize_);
    vip_prize_.Swap(&other->vip_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoryDungeonFinishStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoryDungeonFinishStatProto_descriptor_;
  metadata.reflection = StoryDungeonFinishStatProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoryDungeonCollectablePrizeProto::kDungeonIdFieldNumber;
const int StoryDungeonCollectablePrizeProto::kNoScoreSPrizeFieldNumber;
const int StoryDungeonCollectablePrizeProto::kHasFirstPassPrizeFieldNumber;
const int StoryDungeonCollectablePrizeProto::kExpireTimeFieldNumber;
const int StoryDungeonCollectablePrizeProto::kRandomedSPrizeFieldNumber;
const int StoryDungeonCollectablePrizeProto::kRandomedVipPrizeFieldNumber;
#endif  // !_MSC_VER

StoryDungeonCollectablePrizeProto::StoryDungeonCollectablePrizeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoryDungeonCollectablePrizeProto::InitAsDefaultInstance() {
}

StoryDungeonCollectablePrizeProto::StoryDungeonCollectablePrizeProto(const StoryDungeonCollectablePrizeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoryDungeonCollectablePrizeProto::SharedCtor() {
  _cached_size_ = 0;
  dungeon_id_ = 0;
  no_score_s_prize_ = false;
  has_first_pass_prize_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  randomed_s_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  randomed_vip_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryDungeonCollectablePrizeProto::~StoryDungeonCollectablePrizeProto() {
  SharedDtor();
}

void StoryDungeonCollectablePrizeProto::SharedDtor() {
  if (randomed_s_prize_ != &::google::protobuf::internal::kEmptyString) {
    delete randomed_s_prize_;
  }
  if (randomed_vip_prize_ != &::google::protobuf::internal::kEmptyString) {
    delete randomed_vip_prize_;
  }
  if (this != default_instance_) {
  }
}

void StoryDungeonCollectablePrizeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoryDungeonCollectablePrizeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoryDungeonCollectablePrizeProto_descriptor_;
}

const StoryDungeonCollectablePrizeProto& StoryDungeonCollectablePrizeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

StoryDungeonCollectablePrizeProto* StoryDungeonCollectablePrizeProto::default_instance_ = NULL;

StoryDungeonCollectablePrizeProto* StoryDungeonCollectablePrizeProto::New() const {
  return new StoryDungeonCollectablePrizeProto;
}

void StoryDungeonCollectablePrizeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeon_id_ = 0;
    no_score_s_prize_ = false;
    has_first_pass_prize_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    if (has_randomed_s_prize()) {
      if (randomed_s_prize_ != &::google::protobuf::internal::kEmptyString) {
        randomed_s_prize_->clear();
      }
    }
    if (has_randomed_vip_prize()) {
      if (randomed_vip_prize_ != &::google::protobuf::internal::kEmptyString) {
        randomed_vip_prize_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoryDungeonCollectablePrizeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dungeon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_no_score_s_prize;
        break;
      }

      // optional bool no_score_s_prize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_score_s_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_score_s_prize_)));
          set_has_no_score_s_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_first_pass_prize;
        break;
      }

      // optional bool has_first_pass_prize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_first_pass_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_first_pass_prize_)));
          set_has_has_first_pass_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_randomed_s_prize;
        break;
      }

      // optional bytes randomed_s_prize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randomed_s_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randomed_s_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_randomed_vip_prize;
        break;
      }

      // optional bytes randomed_vip_prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randomed_vip_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_randomed_vip_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoryDungeonCollectablePrizeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeon_id(), output);
  }

  // optional bool no_score_s_prize = 2;
  if (has_no_score_s_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->no_score_s_prize(), output);
  }

  // optional bool has_first_pass_prize = 3;
  if (has_has_first_pass_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_first_pass_prize(), output);
  }

  // optional int64 expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expire_time(), output);
  }

  // optional bytes randomed_s_prize = 5;
  if (has_randomed_s_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->randomed_s_prize(), output);
  }

  // optional bytes randomed_vip_prize = 6;
  if (has_randomed_vip_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->randomed_vip_prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoryDungeonCollectablePrizeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeon_id(), target);
  }

  // optional bool no_score_s_prize = 2;
  if (has_no_score_s_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->no_score_s_prize(), target);
  }

  // optional bool has_first_pass_prize = 3;
  if (has_has_first_pass_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_first_pass_prize(), target);
  }

  // optional int64 expire_time = 4;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expire_time(), target);
  }

  // optional bytes randomed_s_prize = 5;
  if (has_randomed_s_prize()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->randomed_s_prize(), target);
  }

  // optional bytes randomed_vip_prize = 6;
  if (has_randomed_vip_prize()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->randomed_vip_prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoryDungeonCollectablePrizeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dungeon_id = 1;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // optional bool no_score_s_prize = 2;
    if (has_no_score_s_prize()) {
      total_size += 1 + 1;
    }

    // optional bool has_first_pass_prize = 3;
    if (has_has_first_pass_prize()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional bytes randomed_s_prize = 5;
    if (has_randomed_s_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randomed_s_prize());
    }

    // optional bytes randomed_vip_prize = 6;
    if (has_randomed_vip_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->randomed_vip_prize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryDungeonCollectablePrizeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoryDungeonCollectablePrizeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoryDungeonCollectablePrizeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoryDungeonCollectablePrizeProto::MergeFrom(const StoryDungeonCollectablePrizeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_no_score_s_prize()) {
      set_no_score_s_prize(from.no_score_s_prize());
    }
    if (from.has_has_first_pass_prize()) {
      set_has_first_pass_prize(from.has_first_pass_prize());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_randomed_s_prize()) {
      set_randomed_s_prize(from.randomed_s_prize());
    }
    if (from.has_randomed_vip_prize()) {
      set_randomed_vip_prize(from.randomed_vip_prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoryDungeonCollectablePrizeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryDungeonCollectablePrizeProto::CopyFrom(const StoryDungeonCollectablePrizeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryDungeonCollectablePrizeProto::IsInitialized() const {

  return true;
}

void StoryDungeonCollectablePrizeProto::Swap(StoryDungeonCollectablePrizeProto* other) {
  if (other != this) {
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(no_score_s_prize_, other->no_score_s_prize_);
    std::swap(has_first_pass_prize_, other->has_first_pass_prize_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(randomed_s_prize_, other->randomed_s_prize_);
    std::swap(randomed_vip_prize_, other->randomed_vip_prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoryDungeonCollectablePrizeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoryDungeonCollectablePrizeProto_descriptor_;
  metadata.reflection = StoryDungeonCollectablePrizeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroMarriageProto::kTargetIdFieldNumber;
const int HeroMarriageProto::kTargetNameFieldNumber;
const int HeroMarriageProto::kWeaponLevelFieldNumber;
const int HeroMarriageProto::kHaoGanFieldNumber;
const int HeroMarriageProto::kMarriageGoodsIdFieldNumber;
const int HeroMarriageProto::kMarriageTimeFieldNumber;
const int HeroMarriageProto::kHaoGanTodayFieldNumber;
const int HeroMarriageProto::kTargetRaceFieldNumber;
const int HeroMarriageProto::kLaoChuNvFieldNumber;
const int HeroMarriageProto::kWeddingTimeFieldNumber;
const int HeroMarriageProto::kCoupleDungeonTimesFieldNumber;
const int HeroMarriageProto::kHuanhuaCountFieldNumber;
const int HeroMarriageProto::kIsHideHuanHuaFieldNumber;
const int HeroMarriageProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int HeroMarriageProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
const int HeroMarriageProto::kDailyPrizeCollectedFieldNumber;
const int HeroMarriageProto::kCollectableGiftIdFieldNumber;
const int HeroMarriageProto::kCollectableGiftCountFieldNumber;
const int HeroMarriageProto::kNextCheckBothOnlineAddHaoGanTimeFieldNumber;
const int HeroMarriageProto::kTotalHaoGanFieldNumber;
#endif  // !_MSC_VER

HeroMarriageProto::HeroMarriageProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroMarriageProto::InitAsDefaultInstance() {
}

HeroMarriageProto::HeroMarriageProto(const HeroMarriageProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroMarriageProto::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = GOOGLE_LONGLONG(0);
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weapon_level_ = 0;
  hao_gan_ = 0;
  marriage_goods_id_ = 0;
  marriage_time_ = GOOGLE_LONGLONG(0);
  hao_gan_today_ = 0;
  target_race_ = 0;
  lao_chu_nv_ = false;
  wedding_time_ = GOOGLE_LONGLONG(0);
  couple_dungeon_times_ = 0;
  huanhua_count_ = 0;
  is_hide_huan_hua_ = false;
  huan_hua_extra_max_use_count_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  daily_prize_collected_ = false;
  next_check_both_online_add_hao_gan_time_ = GOOGLE_LONGLONG(0);
  total_hao_gan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroMarriageProto::~HeroMarriageProto() {
  SharedDtor();
}

void HeroMarriageProto::SharedDtor() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (this != default_instance_) {
  }
}

void HeroMarriageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroMarriageProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroMarriageProto_descriptor_;
}

const HeroMarriageProto& HeroMarriageProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroMarriageProto* HeroMarriageProto::default_instance_ = NULL;

HeroMarriageProto* HeroMarriageProto::New() const {
  return new HeroMarriageProto;
}

void HeroMarriageProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = GOOGLE_LONGLONG(0);
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    weapon_level_ = 0;
    hao_gan_ = 0;
    marriage_goods_id_ = 0;
    marriage_time_ = GOOGLE_LONGLONG(0);
    hao_gan_today_ = 0;
    target_race_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lao_chu_nv_ = false;
    wedding_time_ = GOOGLE_LONGLONG(0);
    couple_dungeon_times_ = 0;
    huanhua_count_ = 0;
    is_hide_huan_hua_ = false;
    huan_hua_extra_max_use_count_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
    daily_prize_collected_ = false;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    next_check_both_online_add_hao_gan_time_ = GOOGLE_LONGLONG(0);
    total_hao_gan_ = 0;
  }
  collectable_gift_id_.Clear();
  collectable_gift_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroMarriageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_name;
        break;
      }

      // optional bytes target_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon_level;
        break;
      }

      // optional int32 weapon_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_level_)));
          set_has_weapon_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hao_gan;
        break;
      }

      // optional int32 hao_gan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hao_gan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hao_gan_)));
          set_has_hao_gan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_marriage_goods_id;
        break;
      }

      // optional int32 marriage_goods_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marriage_goods_id_)));
          set_has_marriage_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_marriage_time;
        break;
      }

      // optional int64 marriage_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriage_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marriage_time_)));
          set_has_marriage_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hao_gan_today;
        break;
      }

      // optional int32 hao_gan_today = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hao_gan_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hao_gan_today_)));
          set_has_hao_gan_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_target_race;
        break;
      }

      // optional int32 target_race = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_race_)));
          set_has_target_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lao_chu_nv;
        break;
      }

      // optional bool lao_chu_nv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lao_chu_nv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lao_chu_nv_)));
          set_has_lao_chu_nv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wedding_time;
        break;
      }

      // optional int64 wedding_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wedding_time_)));
          set_has_wedding_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_couple_dungeon_times;
        break;
      }

      // optional int32 couple_dungeon_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_couple_dungeon_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &couple_dungeon_times_)));
          set_has_couple_dungeon_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_huanhua_count;
        break;
      }

      // optional int32 huanhua_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huanhua_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huanhua_count_)));
          set_has_huanhua_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_hide_huan_hua;
        break;
      }

      // optional bool is_hide_huan_hua = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hide_huan_hua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_huan_hua_)));
          set_has_is_hide_huan_hua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_collectable_gift_id;
        break;
      }

      // repeated int32 collectable_gift_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectable_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_collectable_gift_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_collectable_gift_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_collectable_gift_id;
        if (input->ExpectTag(176)) goto parse_collectable_gift_count;
        break;
      }

      // repeated int32 collectable_gift_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectable_gift_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_collectable_gift_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_collectable_gift_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_collectable_gift_count;
        if (input->ExpectTag(184)) goto parse_next_check_both_online_add_hao_gan_time;
        break;
      }

      // optional int64 next_check_both_online_add_hao_gan_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_check_both_online_add_hao_gan_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_check_both_online_add_hao_gan_time_)));
          set_has_next_check_both_online_add_hao_gan_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_total_hao_gan;
        break;
      }

      // optional int32 total_hao_gan = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hao_gan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_hao_gan_)));
          set_has_total_hao_gan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_daily_prize_collected;
        break;
      }

      // optional bool daily_prize_collected = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_prize_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daily_prize_collected_)));
          set_has_daily_prize_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroMarriageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->target_id(), output);
  }

  // optional bytes target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->target_name(), output);
  }

  // optional int32 weapon_level = 3;
  if (has_weapon_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon_level(), output);
  }

  // optional int32 hao_gan = 4;
  if (has_hao_gan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hao_gan(), output);
  }

  // optional int32 marriage_goods_id = 5;
  if (has_marriage_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->marriage_goods_id(), output);
  }

  // optional int64 marriage_time = 6;
  if (has_marriage_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->marriage_time(), output);
  }

  // optional int32 hao_gan_today = 7;
  if (has_hao_gan_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hao_gan_today(), output);
  }

  // optional int32 target_race = 8;
  if (has_target_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->target_race(), output);
  }

  // optional bool lao_chu_nv = 9;
  if (has_lao_chu_nv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->lao_chu_nv(), output);
  }

  // optional int64 wedding_time = 10;
  if (has_wedding_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->wedding_time(), output);
  }

  // optional int32 couple_dungeon_times = 11;
  if (has_couple_dungeon_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->couple_dungeon_times(), output);
  }

  // optional int32 huanhua_count = 12;
  if (has_huanhua_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->huanhua_count(), output);
  }

  // optional bool is_hide_huan_hua = 13;
  if (has_is_hide_huan_hua()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_hide_huan_hua(), output);
  }

  // repeated int32 collectable_gift_id = 21;
  for (int i = 0; i < this->collectable_gift_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->collectable_gift_id(i), output);
  }

  // repeated int32 collectable_gift_count = 22;
  for (int i = 0; i < this->collectable_gift_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->collectable_gift_count(i), output);
  }

  // optional int64 next_check_both_online_add_hao_gan_time = 23;
  if (has_next_check_both_online_add_hao_gan_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->next_check_both_online_add_hao_gan_time(), output);
  }

  // optional int32 total_hao_gan = 24;
  if (has_total_hao_gan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->total_hao_gan(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 25;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 26;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_max_use_count_extra_times(), output);
  }

  // optional bool daily_prize_collected = 27;
  if (has_daily_prize_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->daily_prize_collected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroMarriageProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->target_id(), target);
  }

  // optional bytes target_name = 2;
  if (has_target_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target_name(), target);
  }

  // optional int32 weapon_level = 3;
  if (has_weapon_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon_level(), target);
  }

  // optional int32 hao_gan = 4;
  if (has_hao_gan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hao_gan(), target);
  }

  // optional int32 marriage_goods_id = 5;
  if (has_marriage_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->marriage_goods_id(), target);
  }

  // optional int64 marriage_time = 6;
  if (has_marriage_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->marriage_time(), target);
  }

  // optional int32 hao_gan_today = 7;
  if (has_hao_gan_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hao_gan_today(), target);
  }

  // optional int32 target_race = 8;
  if (has_target_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->target_race(), target);
  }

  // optional bool lao_chu_nv = 9;
  if (has_lao_chu_nv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->lao_chu_nv(), target);
  }

  // optional int64 wedding_time = 10;
  if (has_wedding_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->wedding_time(), target);
  }

  // optional int32 couple_dungeon_times = 11;
  if (has_couple_dungeon_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->couple_dungeon_times(), target);
  }

  // optional int32 huanhua_count = 12;
  if (has_huanhua_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->huanhua_count(), target);
  }

  // optional bool is_hide_huan_hua = 13;
  if (has_is_hide_huan_hua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_hide_huan_hua(), target);
  }

  // repeated int32 collectable_gift_id = 21;
  for (int i = 0; i < this->collectable_gift_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->collectable_gift_id(i), target);
  }

  // repeated int32 collectable_gift_count = 22;
  for (int i = 0; i < this->collectable_gift_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->collectable_gift_count(i), target);
  }

  // optional int64 next_check_both_online_add_hao_gan_time = 23;
  if (has_next_check_both_online_add_hao_gan_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->next_check_both_online_add_hao_gan_time(), target);
  }

  // optional int32 total_hao_gan = 24;
  if (has_total_hao_gan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->total_hao_gan(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 25;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 26;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_max_use_count_extra_times(), target);
  }

  // optional bool daily_prize_collected = 27;
  if (has_daily_prize_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->daily_prize_collected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroMarriageProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_id());
    }

    // optional bytes target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_name());
    }

    // optional int32 weapon_level = 3;
    if (has_weapon_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_level());
    }

    // optional int32 hao_gan = 4;
    if (has_hao_gan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hao_gan());
    }

    // optional int32 marriage_goods_id = 5;
    if (has_marriage_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marriage_goods_id());
    }

    // optional int64 marriage_time = 6;
    if (has_marriage_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marriage_time());
    }

    // optional int32 hao_gan_today = 7;
    if (has_hao_gan_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hao_gan_today());
    }

    // optional int32 target_race = 8;
    if (has_target_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_race());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool lao_chu_nv = 9;
    if (has_lao_chu_nv()) {
      total_size += 1 + 1;
    }

    // optional int64 wedding_time = 10;
    if (has_wedding_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wedding_time());
    }

    // optional int32 couple_dungeon_times = 11;
    if (has_couple_dungeon_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->couple_dungeon_times());
    }

    // optional int32 huanhua_count = 12;
    if (has_huanhua_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huanhua_count());
    }

    // optional bool is_hide_huan_hua = 13;
    if (has_is_hide_huan_hua()) {
      total_size += 1 + 1;
    }

    // optional int32 huan_hua_extra_max_use_count = 25;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 26;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

    // optional bool daily_prize_collected = 27;
    if (has_daily_prize_collected()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional int64 next_check_both_online_add_hao_gan_time = 23;
    if (has_next_check_both_online_add_hao_gan_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_check_both_online_add_hao_gan_time());
    }

    // optional int32 total_hao_gan = 24;
    if (has_total_hao_gan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_hao_gan());
    }

  }
  // repeated int32 collectable_gift_id = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectable_gift_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->collectable_gift_id(i));
    }
    total_size += 2 * this->collectable_gift_id_size() + data_size;
  }

  // repeated int32 collectable_gift_count = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectable_gift_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->collectable_gift_count(i));
    }
    total_size += 2 * this->collectable_gift_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroMarriageProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroMarriageProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroMarriageProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroMarriageProto::MergeFrom(const HeroMarriageProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  collectable_gift_id_.MergeFrom(from.collectable_gift_id_);
  collectable_gift_count_.MergeFrom(from.collectable_gift_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_weapon_level()) {
      set_weapon_level(from.weapon_level());
    }
    if (from.has_hao_gan()) {
      set_hao_gan(from.hao_gan());
    }
    if (from.has_marriage_goods_id()) {
      set_marriage_goods_id(from.marriage_goods_id());
    }
    if (from.has_marriage_time()) {
      set_marriage_time(from.marriage_time());
    }
    if (from.has_hao_gan_today()) {
      set_hao_gan_today(from.hao_gan_today());
    }
    if (from.has_target_race()) {
      set_target_race(from.target_race());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lao_chu_nv()) {
      set_lao_chu_nv(from.lao_chu_nv());
    }
    if (from.has_wedding_time()) {
      set_wedding_time(from.wedding_time());
    }
    if (from.has_couple_dungeon_times()) {
      set_couple_dungeon_times(from.couple_dungeon_times());
    }
    if (from.has_huanhua_count()) {
      set_huanhua_count(from.huanhua_count());
    }
    if (from.has_is_hide_huan_hua()) {
      set_is_hide_huan_hua(from.is_hide_huan_hua());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
    if (from.has_daily_prize_collected()) {
      set_daily_prize_collected(from.daily_prize_collected());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_next_check_both_online_add_hao_gan_time()) {
      set_next_check_both_online_add_hao_gan_time(from.next_check_both_online_add_hao_gan_time());
    }
    if (from.has_total_hao_gan()) {
      set_total_hao_gan(from.total_hao_gan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroMarriageProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroMarriageProto::CopyFrom(const HeroMarriageProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroMarriageProto::IsInitialized() const {

  return true;
}

void HeroMarriageProto::Swap(HeroMarriageProto* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(target_name_, other->target_name_);
    std::swap(weapon_level_, other->weapon_level_);
    std::swap(hao_gan_, other->hao_gan_);
    std::swap(marriage_goods_id_, other->marriage_goods_id_);
    std::swap(marriage_time_, other->marriage_time_);
    std::swap(hao_gan_today_, other->hao_gan_today_);
    std::swap(target_race_, other->target_race_);
    std::swap(lao_chu_nv_, other->lao_chu_nv_);
    std::swap(wedding_time_, other->wedding_time_);
    std::swap(couple_dungeon_times_, other->couple_dungeon_times_);
    std::swap(huanhua_count_, other->huanhua_count_);
    std::swap(is_hide_huan_hua_, other->is_hide_huan_hua_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(daily_prize_collected_, other->daily_prize_collected_);
    collectable_gift_id_.Swap(&other->collectable_gift_id_);
    collectable_gift_count_.Swap(&other->collectable_gift_count_);
    std::swap(next_check_both_online_add_hao_gan_time_, other->next_check_both_online_add_hao_gan_time_);
    std::swap(total_hao_gan_, other->total_hao_gan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroMarriageProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroMarriageProto_descriptor_;
  metadata.reflection = HeroMarriageProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarriageStorageProto::kSizeFieldNumber;
const int MarriageStorageProto::kPosListFieldNumber;
const int MarriageStorageProto::kGoodsDataListFieldNumber;
const int MarriageStorageProto::kGoodsListFieldNumber;
const int MarriageStorageProto::kLogFieldNumber;
#endif  // !_MSC_VER

MarriageStorageProto::MarriageStorageProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarriageStorageProto::InitAsDefaultInstance() {
}

MarriageStorageProto::MarriageStorageProto(const MarriageStorageProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarriageStorageProto::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarriageStorageProto::~MarriageStorageProto() {
  SharedDtor();
}

void MarriageStorageProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarriageStorageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarriageStorageProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarriageStorageProto_descriptor_;
}

const MarriageStorageProto& MarriageStorageProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MarriageStorageProto* MarriageStorageProto::default_instance_ = NULL;

MarriageStorageProto* MarriageStorageProto::New() const {
  return new MarriageStorageProto;
}

void MarriageStorageProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
  }
  pos_list_.Clear();
  goods_data_list_.Clear();
  goods_list_.Clear();
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarriageStorageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_list;
        break;
      }

      // repeated int32 pos_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_list;
        if (input->ExpectTag(26)) goto parse_goods_data_list;
        break;
      }

      // repeated bytes goods_data_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_goods_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods_data_list;
        if (input->ExpectTag(34)) goto parse_goods_list;
        break;
      }

      // repeated bytes goods_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_goods_list;
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }

      // repeated .app.message.MarriageStorageLogProto log = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarriageStorageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated int32 pos_list = 2;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pos_list(i), output);
  }

  // repeated bytes goods_data_list = 3;
  for (int i = 0; i < this->goods_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->goods_data_list(i), output);
  }

  // repeated bytes goods_list = 4;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->goods_list(i), output);
  }

  // repeated .app.message.MarriageStorageLogProto log = 5;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarriageStorageProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated int32 pos_list = 2;
  for (int i = 0; i < this->pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pos_list(i), target);
  }

  // repeated bytes goods_data_list = 3;
  for (int i = 0; i < this->goods_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->goods_data_list(i), target);
  }

  // repeated bytes goods_list = 4;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->goods_list(i), target);
  }

  // repeated .app.message.MarriageStorageLogProto log = 5;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarriageStorageProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  // repeated int32 pos_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos_list(i));
    }
    total_size += 1 * this->pos_list_size() + data_size;
  }

  // repeated bytes goods_data_list = 3;
  total_size += 1 * this->goods_data_list_size();
  for (int i = 0; i < this->goods_data_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->goods_data_list(i));
  }

  // repeated bytes goods_list = 4;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->goods_list(i));
  }

  // repeated .app.message.MarriageStorageLogProto log = 5;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarriageStorageProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarriageStorageProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarriageStorageProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarriageStorageProto::MergeFrom(const MarriageStorageProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_list_.MergeFrom(from.pos_list_);
  goods_data_list_.MergeFrom(from.goods_data_list_);
  goods_list_.MergeFrom(from.goods_list_);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarriageStorageProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarriageStorageProto::CopyFrom(const MarriageStorageProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarriageStorageProto::IsInitialized() const {

  return true;
}

void MarriageStorageProto::Swap(MarriageStorageProto* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    pos_list_.Swap(&other->pos_list_);
    goods_data_list_.Swap(&other->goods_data_list_);
    goods_list_.Swap(&other->goods_list_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarriageStorageProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarriageStorageProto_descriptor_;
  metadata.reflection = MarriageStorageProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarriageStorageLogProto::kTimeFieldNumber;
const int MarriageStorageLogProto::kHeroNameBytesFieldNumber;
const int MarriageStorageLogProto::kGoodsNameBytesFieldNumber;
const int MarriageStorageLogProto::kCountFieldNumber;
const int MarriageStorageLogProto::kTypeFieldNumber;
#endif  // !_MSC_VER

MarriageStorageLogProto::MarriageStorageLogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarriageStorageLogProto::InitAsDefaultInstance() {
}

MarriageStorageLogProto::MarriageStorageLogProto(const MarriageStorageLogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarriageStorageLogProto::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goods_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarriageStorageLogProto::~MarriageStorageLogProto() {
  SharedDtor();
}

void MarriageStorageLogProto::SharedDtor() {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_bytes_;
  }
  if (goods_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete goods_name_bytes_;
  }
  if (this != default_instance_) {
  }
}

void MarriageStorageLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarriageStorageLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarriageStorageLogProto_descriptor_;
}

const MarriageStorageLogProto& MarriageStorageLogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

MarriageStorageLogProto* MarriageStorageLogProto::default_instance_ = NULL;

MarriageStorageLogProto* MarriageStorageLogProto::New() const {
  return new MarriageStorageLogProto;
}

void MarriageStorageLogProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_hero_name_bytes()) {
      if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_bytes_->clear();
      }
    }
    if (has_goods_name_bytes()) {
      if (goods_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
        goods_name_bytes_->clear();
      }
    }
    count_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarriageStorageLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name_bytes;
        break;
      }

      // optional bytes hero_name_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_name_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods_name_bytes;
        break;
      }

      // optional bytes goods_name_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_name_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_goods_name_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarriageStorageLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hero_name_bytes(), output);
  }

  // optional bytes goods_name_bytes = 3;
  if (has_goods_name_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->goods_name_bytes(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarriageStorageLogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hero_name_bytes(), target);
  }

  // optional bytes goods_name_bytes = 3;
  if (has_goods_name_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->goods_name_bytes(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarriageStorageLogProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional bytes hero_name_bytes = 2;
    if (has_hero_name_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hero_name_bytes());
    }

    // optional bytes goods_name_bytes = 3;
    if (has_goods_name_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->goods_name_bytes());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarriageStorageLogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarriageStorageLogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarriageStorageLogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarriageStorageLogProto::MergeFrom(const MarriageStorageLogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_hero_name_bytes()) {
      set_hero_name_bytes(from.hero_name_bytes());
    }
    if (from.has_goods_name_bytes()) {
      set_goods_name_bytes(from.goods_name_bytes());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarriageStorageLogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarriageStorageLogProto::CopyFrom(const MarriageStorageLogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarriageStorageLogProto::IsInitialized() const {

  return true;
}

void MarriageStorageLogProto::Swap(MarriageStorageLogProto* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(hero_name_bytes_, other->hero_name_bytes_);
    std::swap(goods_name_bytes_, other->goods_name_bytes_);
    std::swap(count_, other->count_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarriageStorageLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarriageStorageLogProto_descriptor_;
  metadata.reflection = MarriageStorageLogProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroLoveProto::kDailyCollectedFieldNumber;
const int HeroLoveProto::kExchangePointFieldNumber;
const int HeroLoveProto::kExchangeIdFieldNumber;
const int HeroLoveProto::kExchangeTodayCountFieldNumber;
const int HeroLoveProto::kOnlineCollectedMaxMinutesFieldNumber;
const int HeroLoveProto::kOnlineTodayMinutesFieldNumber;
const int HeroLoveProto::kOnlineMinutesFieldNumber;
#endif  // !_MSC_VER

HeroLoveProto::HeroLoveProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroLoveProto::InitAsDefaultInstance() {
}

HeroLoveProto::HeroLoveProto(const HeroLoveProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroLoveProto::SharedCtor() {
  _cached_size_ = 0;
  daily_collected_ = false;
  exchange_point_ = 0;
  online_collected_max_minutes_ = 0;
  online_today_minutes_ = 0;
  online_minutes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroLoveProto::~HeroLoveProto() {
  SharedDtor();
}

void HeroLoveProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroLoveProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroLoveProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroLoveProto_descriptor_;
}

const HeroLoveProto& HeroLoveProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroLoveProto* HeroLoveProto::default_instance_ = NULL;

HeroLoveProto* HeroLoveProto::New() const {
  return new HeroLoveProto;
}

void HeroLoveProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daily_collected_ = false;
    exchange_point_ = 0;
    online_collected_max_minutes_ = 0;
    online_today_minutes_ = 0;
    online_minutes_ = 0;
  }
  exchange_id_.Clear();
  exchange_today_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroLoveProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool daily_collected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daily_collected_)));
          set_has_daily_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange_point;
        break;
      }

      // optional int32 exchange_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_point_)));
          set_has_exchange_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchange_id;
        break;
      }

      // repeated int32 exchange_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_exchange_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exchange_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchange_id;
        if (input->ExpectTag(32)) goto parse_exchange_today_count;
        break;
      }

      // repeated int32 exchange_today_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_exchange_today_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exchange_today_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchange_today_count;
        if (input->ExpectTag(40)) goto parse_online_collected_max_minutes;
        break;
      }

      // optional int32 online_collected_max_minutes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_collected_max_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_collected_max_minutes_)));
          set_has_online_collected_max_minutes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online_today_minutes;
        break;
      }

      // optional int32 online_today_minutes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_today_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_today_minutes_)));
          set_has_online_today_minutes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_online_minutes;
        break;
      }

      // optional int32 online_minutes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_minutes_)));
          set_has_online_minutes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroLoveProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool daily_collected = 1;
  if (has_daily_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->daily_collected(), output);
  }

  // optional int32 exchange_point = 2;
  if (has_exchange_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange_point(), output);
  }

  // repeated int32 exchange_id = 3;
  for (int i = 0; i < this->exchange_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->exchange_id(i), output);
  }

  // repeated int32 exchange_today_count = 4;
  for (int i = 0; i < this->exchange_today_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->exchange_today_count(i), output);
  }

  // optional int32 online_collected_max_minutes = 5;
  if (has_online_collected_max_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->online_collected_max_minutes(), output);
  }

  // optional int32 online_today_minutes = 6;
  if (has_online_today_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->online_today_minutes(), output);
  }

  // optional int32 online_minutes = 7;
  if (has_online_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->online_minutes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroLoveProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool daily_collected = 1;
  if (has_daily_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->daily_collected(), target);
  }

  // optional int32 exchange_point = 2;
  if (has_exchange_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange_point(), target);
  }

  // repeated int32 exchange_id = 3;
  for (int i = 0; i < this->exchange_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->exchange_id(i), target);
  }

  // repeated int32 exchange_today_count = 4;
  for (int i = 0; i < this->exchange_today_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->exchange_today_count(i), target);
  }

  // optional int32 online_collected_max_minutes = 5;
  if (has_online_collected_max_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->online_collected_max_minutes(), target);
  }

  // optional int32 online_today_minutes = 6;
  if (has_online_today_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->online_today_minutes(), target);
  }

  // optional int32 online_minutes = 7;
  if (has_online_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->online_minutes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroLoveProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool daily_collected = 1;
    if (has_daily_collected()) {
      total_size += 1 + 1;
    }

    // optional int32 exchange_point = 2;
    if (has_exchange_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_point());
    }

    // optional int32 online_collected_max_minutes = 5;
    if (has_online_collected_max_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_collected_max_minutes());
    }

    // optional int32 online_today_minutes = 6;
    if (has_online_today_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_today_minutes());
    }

    // optional int32 online_minutes = 7;
    if (has_online_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_minutes());
    }

  }
  // repeated int32 exchange_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->exchange_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->exchange_id(i));
    }
    total_size += 1 * this->exchange_id_size() + data_size;
  }

  // repeated int32 exchange_today_count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->exchange_today_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->exchange_today_count(i));
    }
    total_size += 1 * this->exchange_today_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroLoveProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroLoveProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroLoveProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroLoveProto::MergeFrom(const HeroLoveProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchange_id_.MergeFrom(from.exchange_id_);
  exchange_today_count_.MergeFrom(from.exchange_today_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daily_collected()) {
      set_daily_collected(from.daily_collected());
    }
    if (from.has_exchange_point()) {
      set_exchange_point(from.exchange_point());
    }
    if (from.has_online_collected_max_minutes()) {
      set_online_collected_max_minutes(from.online_collected_max_minutes());
    }
    if (from.has_online_today_minutes()) {
      set_online_today_minutes(from.online_today_minutes());
    }
    if (from.has_online_minutes()) {
      set_online_minutes(from.online_minutes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroLoveProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroLoveProto::CopyFrom(const HeroLoveProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroLoveProto::IsInitialized() const {

  return true;
}

void HeroLoveProto::Swap(HeroLoveProto* other) {
  if (other != this) {
    std::swap(daily_collected_, other->daily_collected_);
    std::swap(exchange_point_, other->exchange_point_);
    exchange_id_.Swap(&other->exchange_id_);
    exchange_today_count_.Swap(&other->exchange_today_count_);
    std::swap(online_collected_max_minutes_, other->online_collected_max_minutes_);
    std::swap(online_today_minutes_, other->online_today_minutes_);
    std::swap(online_minutes_, other->online_minutes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroLoveProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroLoveProto_descriptor_;
  metadata.reflection = HeroLoveProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroLoveExchangeProto::kExchangePointFieldNumber;
const int HeroLoveExchangeProto::kExchangeIdFieldNumber;
const int HeroLoveExchangeProto::kExchangeTodayCountFieldNumber;
#endif  // !_MSC_VER

HeroLoveExchangeProto::HeroLoveExchangeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroLoveExchangeProto::InitAsDefaultInstance() {
}

HeroLoveExchangeProto::HeroLoveExchangeProto(const HeroLoveExchangeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroLoveExchangeProto::SharedCtor() {
  _cached_size_ = 0;
  exchange_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroLoveExchangeProto::~HeroLoveExchangeProto() {
  SharedDtor();
}

void HeroLoveExchangeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroLoveExchangeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroLoveExchangeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroLoveExchangeProto_descriptor_;
}

const HeroLoveExchangeProto& HeroLoveExchangeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroLoveExchangeProto* HeroLoveExchangeProto::default_instance_ = NULL;

HeroLoveExchangeProto* HeroLoveExchangeProto::New() const {
  return new HeroLoveExchangeProto;
}

void HeroLoveExchangeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_point_ = 0;
  }
  exchange_id_.Clear();
  exchange_today_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroLoveExchangeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exchange_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_point_)));
          set_has_exchange_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange_id;
        break;
      }

      // repeated int32 exchange_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_exchange_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exchange_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange_id;
        if (input->ExpectTag(24)) goto parse_exchange_today_count;
        break;
      }

      // repeated int32 exchange_today_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_exchange_today_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exchange_today_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchange_today_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroLoveExchangeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exchange_point = 1;
  if (has_exchange_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exchange_point(), output);
  }

  // repeated int32 exchange_id = 2;
  for (int i = 0; i < this->exchange_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->exchange_id(i), output);
  }

  // repeated int32 exchange_today_count = 3;
  for (int i = 0; i < this->exchange_today_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->exchange_today_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroLoveExchangeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exchange_point = 1;
  if (has_exchange_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange_point(), target);
  }

  // repeated int32 exchange_id = 2;
  for (int i = 0; i < this->exchange_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->exchange_id(i), target);
  }

  // repeated int32 exchange_today_count = 3;
  for (int i = 0; i < this->exchange_today_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->exchange_today_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroLoveExchangeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exchange_point = 1;
    if (has_exchange_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_point());
    }

  }
  // repeated int32 exchange_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exchange_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->exchange_id(i));
    }
    total_size += 1 * this->exchange_id_size() + data_size;
  }

  // repeated int32 exchange_today_count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->exchange_today_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->exchange_today_count(i));
    }
    total_size += 1 * this->exchange_today_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroLoveExchangeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroLoveExchangeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroLoveExchangeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroLoveExchangeProto::MergeFrom(const HeroLoveExchangeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchange_id_.MergeFrom(from.exchange_id_);
  exchange_today_count_.MergeFrom(from.exchange_today_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_point()) {
      set_exchange_point(from.exchange_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroLoveExchangeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroLoveExchangeProto::CopyFrom(const HeroLoveExchangeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroLoveExchangeProto::IsInitialized() const {

  return true;
}

void HeroLoveExchangeProto::Swap(HeroLoveExchangeProto* other) {
  if (other != this) {
    std::swap(exchange_point_, other->exchange_point_);
    exchange_id_.Swap(&other->exchange_id_);
    exchange_today_count_.Swap(&other->exchange_today_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroLoveExchangeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroLoveExchangeProto_descriptor_;
  metadata.reflection = HeroLoveExchangeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaFightingTeamRankTeamInfoProto::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

ArenaFightingTeamRankTeamInfoProto::ArenaFightingTeamRankTeamInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaFightingTeamRankTeamInfoProto::InitAsDefaultInstance() {
}

ArenaFightingTeamRankTeamInfoProto::ArenaFightingTeamRankTeamInfoProto(const ArenaFightingTeamRankTeamInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaFightingTeamRankTeamInfoProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaFightingTeamRankTeamInfoProto::~ArenaFightingTeamRankTeamInfoProto() {
  SharedDtor();
}

void ArenaFightingTeamRankTeamInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaFightingTeamRankTeamInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaFightingTeamRankTeamInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaFightingTeamRankTeamInfoProto_descriptor_;
}

const ArenaFightingTeamRankTeamInfoProto& ArenaFightingTeamRankTeamInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ArenaFightingTeamRankTeamInfoProto* ArenaFightingTeamRankTeamInfoProto::default_instance_ = NULL;

ArenaFightingTeamRankTeamInfoProto* ArenaFightingTeamRankTeamInfoProto::New() const {
  return new ArenaFightingTeamRankTeamInfoProto;
}

void ArenaFightingTeamRankTeamInfoProto::Clear() {
  member_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaFightingTeamRankTeamInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.ArenaFightingTeamRankMemberInfoProto member_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaFightingTeamRankTeamInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.ArenaFightingTeamRankMemberInfoProto member_info = 1;
  for (int i = 0; i < this->member_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaFightingTeamRankTeamInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.ArenaFightingTeamRankMemberInfoProto member_info = 1;
  for (int i = 0; i < this->member_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaFightingTeamRankTeamInfoProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.ArenaFightingTeamRankMemberInfoProto member_info = 1;
  total_size += 1 * this->member_info_size();
  for (int i = 0; i < this->member_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaFightingTeamRankTeamInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaFightingTeamRankTeamInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaFightingTeamRankTeamInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaFightingTeamRankTeamInfoProto::MergeFrom(const ArenaFightingTeamRankTeamInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_info_.MergeFrom(from.member_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaFightingTeamRankTeamInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaFightingTeamRankTeamInfoProto::CopyFrom(const ArenaFightingTeamRankTeamInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaFightingTeamRankTeamInfoProto::IsInitialized() const {

  return true;
}

void ArenaFightingTeamRankTeamInfoProto::Swap(ArenaFightingTeamRankTeamInfoProto* other) {
  if (other != this) {
    member_info_.Swap(&other->member_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaFightingTeamRankTeamInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaFightingTeamRankTeamInfoProto_descriptor_;
  metadata.reflection = ArenaFightingTeamRankTeamInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaFightingTeamRankMemberInfoProto::kHeroIdFieldNumber;
const int ArenaFightingTeamRankMemberInfoProto::kHeroNameBytesFieldNumber;
const int ArenaFightingTeamRankMemberInfoProto::kHeroRaceFieldNumber;
const int ArenaFightingTeamRankMemberInfoProto::kHeroFightingAmountFieldNumber;
#endif  // !_MSC_VER

ArenaFightingTeamRankMemberInfoProto::ArenaFightingTeamRankMemberInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaFightingTeamRankMemberInfoProto::InitAsDefaultInstance() {
}

ArenaFightingTeamRankMemberInfoProto::ArenaFightingTeamRankMemberInfoProto(const ArenaFightingTeamRankMemberInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaFightingTeamRankMemberInfoProto::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_race_ = 0;
  hero_fighting_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaFightingTeamRankMemberInfoProto::~ArenaFightingTeamRankMemberInfoProto() {
  SharedDtor();
}

void ArenaFightingTeamRankMemberInfoProto::SharedDtor() {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_bytes_;
  }
  if (this != default_instance_) {
  }
}

void ArenaFightingTeamRankMemberInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaFightingTeamRankMemberInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaFightingTeamRankMemberInfoProto_descriptor_;
}

const ArenaFightingTeamRankMemberInfoProto& ArenaFightingTeamRankMemberInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ArenaFightingTeamRankMemberInfoProto* ArenaFightingTeamRankMemberInfoProto::default_instance_ = NULL;

ArenaFightingTeamRankMemberInfoProto* ArenaFightingTeamRankMemberInfoProto::New() const {
  return new ArenaFightingTeamRankMemberInfoProto;
}

void ArenaFightingTeamRankMemberInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    if (has_hero_name_bytes()) {
      if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_bytes_->clear();
      }
    }
    hero_race_ = 0;
    hero_fighting_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaFightingTeamRankMemberInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name_bytes;
        break;
      }

      // optional bytes hero_name_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_name_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_race;
        break;
      }

      // optional int32 hero_race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_race_)));
          set_has_hero_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_fighting_amount;
        break;
      }

      // optional int32 hero_fighting_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_fighting_amount_)));
          set_has_hero_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaFightingTeamRankMemberInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hero_name_bytes(), output);
  }

  // optional int32 hero_race = 3;
  if (has_hero_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_race(), output);
  }

  // optional int32 hero_fighting_amount = 4;
  if (has_hero_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hero_fighting_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaFightingTeamRankMemberInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hero_name_bytes(), target);
  }

  // optional int32 hero_race = 3;
  if (has_hero_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_race(), target);
  }

  // optional int32 hero_fighting_amount = 4;
  if (has_hero_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hero_fighting_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaFightingTeamRankMemberInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional bytes hero_name_bytes = 2;
    if (has_hero_name_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hero_name_bytes());
    }

    // optional int32 hero_race = 3;
    if (has_hero_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_race());
    }

    // optional int32 hero_fighting_amount = 4;
    if (has_hero_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_fighting_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaFightingTeamRankMemberInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaFightingTeamRankMemberInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaFightingTeamRankMemberInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaFightingTeamRankMemberInfoProto::MergeFrom(const ArenaFightingTeamRankMemberInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name_bytes()) {
      set_hero_name_bytes(from.hero_name_bytes());
    }
    if (from.has_hero_race()) {
      set_hero_race(from.hero_race());
    }
    if (from.has_hero_fighting_amount()) {
      set_hero_fighting_amount(from.hero_fighting_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaFightingTeamRankMemberInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaFightingTeamRankMemberInfoProto::CopyFrom(const ArenaFightingTeamRankMemberInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaFightingTeamRankMemberInfoProto::IsInitialized() const {

  return true;
}

void ArenaFightingTeamRankMemberInfoProto::Swap(ArenaFightingTeamRankMemberInfoProto* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_bytes_, other->hero_name_bytes_);
    std::swap(hero_race_, other->hero_race_);
    std::swap(hero_fighting_amount_, other->hero_fighting_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaFightingTeamRankMemberInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaFightingTeamRankMemberInfoProto_descriptor_;
  metadata.reflection = ArenaFightingTeamRankMemberInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientYuanbaoCostLogProto::kSingleYuanbaoCostLogsFieldNumber;
#endif  // !_MSC_VER

ClientYuanbaoCostLogProto::ClientYuanbaoCostLogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientYuanbaoCostLogProto::InitAsDefaultInstance() {
}

ClientYuanbaoCostLogProto::ClientYuanbaoCostLogProto(const ClientYuanbaoCostLogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientYuanbaoCostLogProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientYuanbaoCostLogProto::~ClientYuanbaoCostLogProto() {
  SharedDtor();
}

void ClientYuanbaoCostLogProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientYuanbaoCostLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientYuanbaoCostLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientYuanbaoCostLogProto_descriptor_;
}

const ClientYuanbaoCostLogProto& ClientYuanbaoCostLogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ClientYuanbaoCostLogProto* ClientYuanbaoCostLogProto::default_instance_ = NULL;

ClientYuanbaoCostLogProto* ClientYuanbaoCostLogProto::New() const {
  return new ClientYuanbaoCostLogProto;
}

void ClientYuanbaoCostLogProto::Clear() {
  single_yuanbao_cost_logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientYuanbaoCostLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.ClientSingleYuanbaoCostLogProto single_yuanbao_cost_logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_yuanbao_cost_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single_yuanbao_cost_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_single_yuanbao_cost_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientYuanbaoCostLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.ClientSingleYuanbaoCostLogProto single_yuanbao_cost_logs = 1;
  for (int i = 0; i < this->single_yuanbao_cost_logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->single_yuanbao_cost_logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientYuanbaoCostLogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.ClientSingleYuanbaoCostLogProto single_yuanbao_cost_logs = 1;
  for (int i = 0; i < this->single_yuanbao_cost_logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->single_yuanbao_cost_logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientYuanbaoCostLogProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.ClientSingleYuanbaoCostLogProto single_yuanbao_cost_logs = 1;
  total_size += 1 * this->single_yuanbao_cost_logs_size();
  for (int i = 0; i < this->single_yuanbao_cost_logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single_yuanbao_cost_logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientYuanbaoCostLogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientYuanbaoCostLogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientYuanbaoCostLogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientYuanbaoCostLogProto::MergeFrom(const ClientYuanbaoCostLogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  single_yuanbao_cost_logs_.MergeFrom(from.single_yuanbao_cost_logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientYuanbaoCostLogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientYuanbaoCostLogProto::CopyFrom(const ClientYuanbaoCostLogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientYuanbaoCostLogProto::IsInitialized() const {

  return true;
}

void ClientYuanbaoCostLogProto::Swap(ClientYuanbaoCostLogProto* other) {
  if (other != this) {
    single_yuanbao_cost_logs_.Swap(&other->single_yuanbao_cost_logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientYuanbaoCostLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientYuanbaoCostLogProto_descriptor_;
  metadata.reflection = ClientYuanbaoCostLogProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSingleYuanbaoCostLogProto::kTimeFieldNumber;
const int ClientSingleYuanbaoCostLogProto::kTypeFieldNumber;
const int ClientSingleYuanbaoCostLogProto::kYuanbaoFieldNumber;
const int ClientSingleYuanbaoCostLogProto::kBindYuanbaoFieldNumber;
#endif  // !_MSC_VER

ClientSingleYuanbaoCostLogProto::ClientSingleYuanbaoCostLogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientSingleYuanbaoCostLogProto::InitAsDefaultInstance() {
}

ClientSingleYuanbaoCostLogProto::ClientSingleYuanbaoCostLogProto(const ClientSingleYuanbaoCostLogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientSingleYuanbaoCostLogProto::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  yuanbao_ = 0;
  bindyuanbao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSingleYuanbaoCostLogProto::~ClientSingleYuanbaoCostLogProto() {
  SharedDtor();
}

void ClientSingleYuanbaoCostLogProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSingleYuanbaoCostLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSingleYuanbaoCostLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSingleYuanbaoCostLogProto_descriptor_;
}

const ClientSingleYuanbaoCostLogProto& ClientSingleYuanbaoCostLogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ClientSingleYuanbaoCostLogProto* ClientSingleYuanbaoCostLogProto::default_instance_ = NULL;

ClientSingleYuanbaoCostLogProto* ClientSingleYuanbaoCostLogProto::New() const {
  return new ClientSingleYuanbaoCostLogProto;
}

void ClientSingleYuanbaoCostLogProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    yuanbao_ = 0;
    bindyuanbao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSingleYuanbaoCostLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_yuanbao;
        break;
      }

      // optional int32 yuanbao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbao_)));
          set_has_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bindYuanbao;
        break;
      }

      // optional int32 bindYuanbao = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindYuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindyuanbao_)));
          set_has_bindyuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientSingleYuanbaoCostLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 yuanbao = 3;
  if (has_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yuanbao(), output);
  }

  // optional int32 bindYuanbao = 4;
  if (has_bindyuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bindyuanbao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientSingleYuanbaoCostLogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 yuanbao = 3;
  if (has_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yuanbao(), target);
  }

  // optional int32 bindYuanbao = 4;
  if (has_bindyuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bindyuanbao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientSingleYuanbaoCostLogProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 yuanbao = 3;
    if (has_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbao());
    }

    // optional int32 bindYuanbao = 4;
    if (has_bindyuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindyuanbao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSingleYuanbaoCostLogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSingleYuanbaoCostLogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSingleYuanbaoCostLogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSingleYuanbaoCostLogProto::MergeFrom(const ClientSingleYuanbaoCostLogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_yuanbao()) {
      set_yuanbao(from.yuanbao());
    }
    if (from.has_bindyuanbao()) {
      set_bindyuanbao(from.bindyuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSingleYuanbaoCostLogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSingleYuanbaoCostLogProto::CopyFrom(const ClientSingleYuanbaoCostLogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSingleYuanbaoCostLogProto::IsInitialized() const {

  return true;
}

void ClientSingleYuanbaoCostLogProto::Swap(ClientSingleYuanbaoCostLogProto* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(yuanbao_, other->yuanbao_);
    std::swap(bindyuanbao_, other->bindyuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSingleYuanbaoCostLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSingleYuanbaoCostLogProto_descriptor_;
  metadata.reflection = ClientSingleYuanbaoCostLogProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroAnniversaryProto::kCakeTodayCollectedFieldNumber;
const int HeroAnniversaryProto::kDailyNormalCollectedFieldNumber;
const int HeroAnniversaryProto::kDailyVipCollectedFieldNumber;
const int HeroAnniversaryProto::kRechargeYuanbaoFieldNumber;
#endif  // !_MSC_VER

HeroAnniversaryProto::HeroAnniversaryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroAnniversaryProto::InitAsDefaultInstance() {
}

HeroAnniversaryProto::HeroAnniversaryProto(const HeroAnniversaryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroAnniversaryProto::SharedCtor() {
  _cached_size_ = 0;
  cake_today_collected_ = false;
  daily_normal_collected_ = false;
  daily_vip_collected_ = false;
  recharge_yuanbao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroAnniversaryProto::~HeroAnniversaryProto() {
  SharedDtor();
}

void HeroAnniversaryProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroAnniversaryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroAnniversaryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroAnniversaryProto_descriptor_;
}

const HeroAnniversaryProto& HeroAnniversaryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroAnniversaryProto* HeroAnniversaryProto::default_instance_ = NULL;

HeroAnniversaryProto* HeroAnniversaryProto::New() const {
  return new HeroAnniversaryProto;
}

void HeroAnniversaryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cake_today_collected_ = false;
    daily_normal_collected_ = false;
    daily_vip_collected_ = false;
    recharge_yuanbao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroAnniversaryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cake_today_collected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cake_today_collected_)));
          set_has_cake_today_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daily_normal_collected;
        break;
      }

      // optional bool daily_normal_collected = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_normal_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daily_normal_collected_)));
          set_has_daily_normal_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daily_vip_collected;
        break;
      }

      // optional bool daily_vip_collected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_vip_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daily_vip_collected_)));
          set_has_daily_vip_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recharge_yuanbao;
        break;
      }

      // optional int32 recharge_yuanbao = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_yuanbao_)));
          set_has_recharge_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroAnniversaryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool cake_today_collected = 1;
  if (has_cake_today_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cake_today_collected(), output);
  }

  // optional bool daily_normal_collected = 2;
  if (has_daily_normal_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->daily_normal_collected(), output);
  }

  // optional bool daily_vip_collected = 3;
  if (has_daily_vip_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->daily_vip_collected(), output);
  }

  // optional int32 recharge_yuanbao = 4;
  if (has_recharge_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recharge_yuanbao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroAnniversaryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool cake_today_collected = 1;
  if (has_cake_today_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cake_today_collected(), target);
  }

  // optional bool daily_normal_collected = 2;
  if (has_daily_normal_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->daily_normal_collected(), target);
  }

  // optional bool daily_vip_collected = 3;
  if (has_daily_vip_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->daily_vip_collected(), target);
  }

  // optional int32 recharge_yuanbao = 4;
  if (has_recharge_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recharge_yuanbao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroAnniversaryProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool cake_today_collected = 1;
    if (has_cake_today_collected()) {
      total_size += 1 + 1;
    }

    // optional bool daily_normal_collected = 2;
    if (has_daily_normal_collected()) {
      total_size += 1 + 1;
    }

    // optional bool daily_vip_collected = 3;
    if (has_daily_vip_collected()) {
      total_size += 1 + 1;
    }

    // optional int32 recharge_yuanbao = 4;
    if (has_recharge_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_yuanbao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroAnniversaryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroAnniversaryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroAnniversaryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroAnniversaryProto::MergeFrom(const HeroAnniversaryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cake_today_collected()) {
      set_cake_today_collected(from.cake_today_collected());
    }
    if (from.has_daily_normal_collected()) {
      set_daily_normal_collected(from.daily_normal_collected());
    }
    if (from.has_daily_vip_collected()) {
      set_daily_vip_collected(from.daily_vip_collected());
    }
    if (from.has_recharge_yuanbao()) {
      set_recharge_yuanbao(from.recharge_yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroAnniversaryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroAnniversaryProto::CopyFrom(const HeroAnniversaryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroAnniversaryProto::IsInitialized() const {

  return true;
}

void HeroAnniversaryProto::Swap(HeroAnniversaryProto* other) {
  if (other != this) {
    std::swap(cake_today_collected_, other->cake_today_collected_);
    std::swap(daily_normal_collected_, other->daily_normal_collected_);
    std::swap(daily_vip_collected_, other->daily_vip_collected_);
    std::swap(recharge_yuanbao_, other->recharge_yuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroAnniversaryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroAnniversaryProto_descriptor_;
  metadata.reflection = HeroAnniversaryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroAnniversaryTaskProto::kCurrentTaskFieldNumber;
const int HeroAnniversaryTaskProto::kIndexFieldNumber;
const int HeroAnniversaryTaskProto::kFinalPrizeCollectedFieldNumber;
#endif  // !_MSC_VER

HeroAnniversaryTaskProto::HeroAnniversaryTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroAnniversaryTaskProto::InitAsDefaultInstance() {
  current_task_ = const_cast< ::app::message::SingleHeroAnniversaryDailyTaskProto*>(&::app::message::SingleHeroAnniversaryDailyTaskProto::default_instance());
}

HeroAnniversaryTaskProto::HeroAnniversaryTaskProto(const HeroAnniversaryTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroAnniversaryTaskProto::SharedCtor() {
  _cached_size_ = 0;
  current_task_ = NULL;
  index_ = 0;
  final_prize_collected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroAnniversaryTaskProto::~HeroAnniversaryTaskProto() {
  SharedDtor();
}

void HeroAnniversaryTaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete current_task_;
  }
}

void HeroAnniversaryTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroAnniversaryTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroAnniversaryTaskProto_descriptor_;
}

const HeroAnniversaryTaskProto& HeroAnniversaryTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroAnniversaryTaskProto* HeroAnniversaryTaskProto::default_instance_ = NULL;

HeroAnniversaryTaskProto* HeroAnniversaryTaskProto::New() const {
  return new HeroAnniversaryTaskProto;
}

void HeroAnniversaryTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_current_task()) {
      if (current_task_ != NULL) current_task_->::app::message::SingleHeroAnniversaryDailyTaskProto::Clear();
    }
    index_ = 0;
    final_prize_collected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroAnniversaryTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.SingleHeroAnniversaryDailyTaskProto current_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_final_prize_collected;
        break;
      }

      // optional bool final_prize_collected = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_prize_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_prize_collected_)));
          set_has_final_prize_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroAnniversaryTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.SingleHeroAnniversaryDailyTaskProto current_task = 1;
  if (has_current_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->current_task(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional bool final_prize_collected = 3 [default = false];
  if (has_final_prize_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->final_prize_collected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroAnniversaryTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.SingleHeroAnniversaryDailyTaskProto current_task = 1;
  if (has_current_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->current_task(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional bool final_prize_collected = 3 [default = false];
  if (has_final_prize_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->final_prize_collected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroAnniversaryTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.SingleHeroAnniversaryDailyTaskProto current_task = 1;
    if (has_current_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_task());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional bool final_prize_collected = 3 [default = false];
    if (has_final_prize_collected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroAnniversaryTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroAnniversaryTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroAnniversaryTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroAnniversaryTaskProto::MergeFrom(const HeroAnniversaryTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_task()) {
      mutable_current_task()->::app::message::SingleHeroAnniversaryDailyTaskProto::MergeFrom(from.current_task());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_final_prize_collected()) {
      set_final_prize_collected(from.final_prize_collected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroAnniversaryTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroAnniversaryTaskProto::CopyFrom(const HeroAnniversaryTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroAnniversaryTaskProto::IsInitialized() const {

  return true;
}

void HeroAnniversaryTaskProto::Swap(HeroAnniversaryTaskProto* other) {
  if (other != this) {
    std::swap(current_task_, other->current_task_);
    std::swap(index_, other->index_);
    std::swap(final_prize_collected_, other->final_prize_collected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroAnniversaryTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroAnniversaryTaskProto_descriptor_;
  metadata.reflection = HeroAnniversaryTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleHeroAnniversaryDailyTaskProto::kTaskFieldNumber;
const int SingleHeroAnniversaryDailyTaskProto::kCountFieldNumber;
const int SingleHeroAnniversaryDailyTaskProto::kIsCompletedFieldNumber;
const int SingleHeroAnniversaryDailyTaskProto::kPrizeCollectedFieldNumber;
const int SingleHeroAnniversaryDailyTaskProto::kRefreshTimesFieldNumber;
#endif  // !_MSC_VER

SingleHeroAnniversaryDailyTaskProto::SingleHeroAnniversaryDailyTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleHeroAnniversaryDailyTaskProto::InitAsDefaultInstance() {
  task_ = const_cast< ::app::message::SingleAnniversaryDailyTaskProto*>(&::app::message::SingleAnniversaryDailyTaskProto::default_instance());
}

SingleHeroAnniversaryDailyTaskProto::SingleHeroAnniversaryDailyTaskProto(const SingleHeroAnniversaryDailyTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleHeroAnniversaryDailyTaskProto::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  count_ = 0;
  is_completed_ = false;
  prize_collected_ = false;
  refresh_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleHeroAnniversaryDailyTaskProto::~SingleHeroAnniversaryDailyTaskProto() {
  SharedDtor();
}

void SingleHeroAnniversaryDailyTaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void SingleHeroAnniversaryDailyTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleHeroAnniversaryDailyTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleHeroAnniversaryDailyTaskProto_descriptor_;
}

const SingleHeroAnniversaryDailyTaskProto& SingleHeroAnniversaryDailyTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

SingleHeroAnniversaryDailyTaskProto* SingleHeroAnniversaryDailyTaskProto::default_instance_ = NULL;

SingleHeroAnniversaryDailyTaskProto* SingleHeroAnniversaryDailyTaskProto::New() const {
  return new SingleHeroAnniversaryDailyTaskProto;
}

void SingleHeroAnniversaryDailyTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::app::message::SingleAnniversaryDailyTaskProto::Clear();
    }
    count_ = 0;
    is_completed_ = false;
    prize_collected_ = false;
    refresh_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleHeroAnniversaryDailyTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.SingleAnniversaryDailyTaskProto task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_completed;
        break;
      }

      // optional bool is_completed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_completed_)));
          set_has_is_completed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prize_collected;
        break;
      }

      // optional bool prize_collected = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prize_collected_)));
          set_has_prize_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refresh_times;
        break;
      }

      // optional int32 refresh_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_times_)));
          set_has_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleHeroAnniversaryDailyTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.SingleAnniversaryDailyTaskProto task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional bool is_completed = 3;
  if (has_is_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_completed(), output);
  }

  // optional bool prize_collected = 4;
  if (has_prize_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prize_collected(), output);
  }

  // optional int32 refresh_times = 5;
  if (has_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refresh_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleHeroAnniversaryDailyTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.SingleAnniversaryDailyTaskProto task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional bool is_completed = 3;
  if (has_is_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_completed(), target);
  }

  // optional bool prize_collected = 4;
  if (has_prize_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prize_collected(), target);
  }

  // optional int32 refresh_times = 5;
  if (has_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refresh_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleHeroAnniversaryDailyTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.SingleAnniversaryDailyTaskProto task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool is_completed = 3;
    if (has_is_completed()) {
      total_size += 1 + 1;
    }

    // optional bool prize_collected = 4;
    if (has_prize_collected()) {
      total_size += 1 + 1;
    }

    // optional int32 refresh_times = 5;
    if (has_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleHeroAnniversaryDailyTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleHeroAnniversaryDailyTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleHeroAnniversaryDailyTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleHeroAnniversaryDailyTaskProto::MergeFrom(const SingleHeroAnniversaryDailyTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::app::message::SingleAnniversaryDailyTaskProto::MergeFrom(from.task());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_is_completed()) {
      set_is_completed(from.is_completed());
    }
    if (from.has_prize_collected()) {
      set_prize_collected(from.prize_collected());
    }
    if (from.has_refresh_times()) {
      set_refresh_times(from.refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleHeroAnniversaryDailyTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleHeroAnniversaryDailyTaskProto::CopyFrom(const SingleHeroAnniversaryDailyTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleHeroAnniversaryDailyTaskProto::IsInitialized() const {

  return true;
}

void SingleHeroAnniversaryDailyTaskProto::Swap(SingleHeroAnniversaryDailyTaskProto* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(count_, other->count_);
    std::swap(is_completed_, other->is_completed_);
    std::swap(prize_collected_, other->prize_collected_);
    std::swap(refresh_times_, other->refresh_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleHeroAnniversaryDailyTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleHeroAnniversaryDailyTaskProto_descriptor_;
  metadata.reflection = SingleHeroAnniversaryDailyTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShieldProto::kShieldsFieldNumber;
const int ShieldProto::kCurrentIdFieldNumber;
#endif  // !_MSC_VER

ShieldProto::ShieldProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShieldProto::InitAsDefaultInstance() {
}

ShieldProto::ShieldProto(const ShieldProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShieldProto::SharedCtor() {
  _cached_size_ = 0;
  current_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShieldProto::~ShieldProto() {
  SharedDtor();
}

void ShieldProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShieldProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShieldProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShieldProto_descriptor_;
}

const ShieldProto& ShieldProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

ShieldProto* ShieldProto::default_instance_ = NULL;

ShieldProto* ShieldProto::New() const {
  return new ShieldProto;
}

void ShieldProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    current_id_ = 0;
  }
  shields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShieldProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.SingleShieldProto shields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shields;
        if (input->ExpectTag(24)) goto parse_current_id;
        break;
      }

      // optional int32 current_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_id_)));
          set_has_current_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShieldProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.SingleShieldProto shields = 1;
  for (int i = 0; i < this->shields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shields(i), output);
  }

  // optional int32 current_id = 3;
  if (has_current_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShieldProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.SingleShieldProto shields = 1;
  for (int i = 0; i < this->shields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shields(i), target);
  }

  // optional int32 current_id = 3;
  if (has_current_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShieldProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 current_id = 3;
    if (has_current_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_id());
    }

  }
  // repeated .app.message.SingleShieldProto shields = 1;
  total_size += 1 * this->shields_size();
  for (int i = 0; i < this->shields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShieldProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShieldProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShieldProto::MergeFrom(const ShieldProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  shields_.MergeFrom(from.shields_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_current_id()) {
      set_current_id(from.current_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShieldProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShieldProto::CopyFrom(const ShieldProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldProto::IsInitialized() const {

  return true;
}

void ShieldProto::Swap(ShieldProto* other) {
  if (other != this) {
    shields_.Swap(&other->shields_);
    std::swap(current_id_, other->current_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShieldProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShieldProto_descriptor_;
  metadata.reflection = ShieldProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleShieldProto::kDataFieldNumber;
const int SingleShieldProto::kLevelDataFieldNumber;
const int SingleShieldProto::kSpecialSpell1FieldNumber;
const int SingleShieldProto::kSpecialSpell2FieldNumber;
const int SingleShieldProto::kNormalSpellPosFieldNumber;
const int SingleShieldProto::kNormalSpellsFieldNumber;
const int SingleShieldProto::kEquipmentPosFieldNumber;
const int SingleShieldProto::kEquipmentStaticDataFieldNumber;
const int SingleShieldProto::kEquipmentDynamicDataFieldNumber;
const int SingleShieldProto::kQianNengUseCountFieldNumber;
const int SingleShieldProto::kHuanHuaUseCountFieldNumber;
const int SingleShieldProto::kBlessAmountFieldNumber;
const int SingleShieldProto::kBlessAmountClearTimeFieldNumber;
const int SingleShieldProto::kExpFieldNumber;
const int SingleShieldProto::kIsSuperModelFieldNumber;
const int SingleShieldProto::kIsSuperModel2FieldNumber;
const int SingleShieldProto::kNicknameIdFieldNumber;
const int SingleShieldProto::kUpgradeTimesFieldNumber;
const int SingleShieldProto::kQianNengExtraMaxUseCountFieldNumber;
const int SingleShieldProto::kHuanHuaExtraMaxUseCountFieldNumber;
const int SingleShieldProto::kQianNengMaxUseCountExtraTimesFieldNumber;
const int SingleShieldProto::kHuanHuaMaxUseCountExtraTimesFieldNumber;
#endif  // !_MSC_VER

SingleShieldProto::SingleShieldProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleShieldProto::InitAsDefaultInstance() {
  data_ = const_cast< ::app::message::ShieldDataProto*>(&::app::message::ShieldDataProto::default_instance());
  level_data_ = const_cast< ::app::message::ShieldLevelDataProto*>(&::app::message::ShieldLevelDataProto::default_instance());
  special_spell_1_ = const_cast< ::app::message::ActiveSpell*>(&::app::message::ActiveSpell::default_instance());
  special_spell_2_ = const_cast< ::app::message::ActiveSpell*>(&::app::message::ActiveSpell::default_instance());
}

SingleShieldProto::SingleShieldProto(const SingleShieldProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleShieldProto::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  level_data_ = NULL;
  special_spell_1_ = NULL;
  special_spell_2_ = NULL;
  qian_neng_use_count_ = 0;
  huan_hua_use_count_ = 0;
  bless_amount_ = 0;
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  exp_ = GOOGLE_LONGLONG(0);
  is_super_model_ = false;
  is_super_model_2_ = false;
  nickname_id_ = 0;
  upgrade_times_ = 0;
  qian_neng_extra_max_use_count_ = 0;
  huan_hua_extra_max_use_count_ = 0;
  qian_neng_max_use_count_extra_times_ = 0;
  huan_hua_max_use_count_extra_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleShieldProto::~SingleShieldProto() {
  SharedDtor();
}

void SingleShieldProto::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete level_data_;
    delete special_spell_1_;
    delete special_spell_2_;
  }
}

void SingleShieldProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleShieldProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleShieldProto_descriptor_;
}

const SingleShieldProto& SingleShieldProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

SingleShieldProto* SingleShieldProto::default_instance_ = NULL;

SingleShieldProto* SingleShieldProto::New() const {
  return new SingleShieldProto;
}

void SingleShieldProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::app::message::ShieldDataProto::Clear();
    }
    if (has_level_data()) {
      if (level_data_ != NULL) level_data_->::app::message::ShieldLevelDataProto::Clear();
    }
    if (has_special_spell_1()) {
      if (special_spell_1_ != NULL) special_spell_1_->::app::message::ActiveSpell::Clear();
    }
    if (has_special_spell_2()) {
      if (special_spell_2_ != NULL) special_spell_2_->::app::message::ActiveSpell::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    qian_neng_use_count_ = 0;
    huan_hua_use_count_ = 0;
    bless_amount_ = 0;
    bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
    exp_ = GOOGLE_LONGLONG(0);
    is_super_model_ = false;
    is_super_model_2_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nickname_id_ = 0;
    upgrade_times_ = 0;
    qian_neng_extra_max_use_count_ = 0;
    huan_hua_extra_max_use_count_ = 0;
    qian_neng_max_use_count_extra_times_ = 0;
    huan_hua_max_use_count_extra_times_ = 0;
  }
  normal_spell_pos_.Clear();
  normal_spells_.Clear();
  equipment_pos_.Clear();
  equipment_static_data_.Clear();
  equipment_dynamic_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleShieldProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.ShieldDataProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_level_data;
        break;
      }

      // optional .app.message.ShieldLevelDataProto level_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_special_spell_1;
        break;
      }

      // optional .app.message.ActiveSpell special_spell_1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special_spell_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_special_spell_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_special_spell_2;
        break;
      }

      // optional .app.message.ActiveSpell special_spell_2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special_spell_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_special_spell_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_normal_spell_pos;
        break;
      }

      // repeated int32 normal_spell_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_spell_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_normal_spell_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_normal_spell_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_normal_spell_pos;
        if (input->ExpectTag(50)) goto parse_normal_spells;
        break;
      }

      // repeated .app.message.ActiveSpell normal_spells = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal_spells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_normal_spells;
        if (input->ExpectTag(56)) goto parse_equipment_pos;
        break;
      }

      // repeated int32 equipment_pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_equipment_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipment_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equipment_pos;
        if (input->ExpectTag(66)) goto parse_equipment_static_data;
        break;
      }

      // repeated bytes equipment_static_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_static_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_equipment_static_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equipment_static_data;
        if (input->ExpectTag(74)) goto parse_equipment_dynamic_data;
        break;
      }

      // repeated bytes equipment_dynamic_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_dynamic_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_equipment_dynamic_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equipment_dynamic_data;
        if (input->ExpectTag(80)) goto parse_qian_neng_use_count;
        break;
      }

      // optional int32 qian_neng_use_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_use_count_)));
          set_has_qian_neng_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_huan_hua_use_count;
        break;
      }

      // optional int32 huan_hua_use_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_use_count_)));
          set_has_huan_hua_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bless_amount;
        break;
      }

      // optional int32 bless_amount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_amount_)));
          set_has_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bless_amount_clear_time;
        break;
      }

      // optional int64 bless_amount_clear_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_amount_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_amount_clear_time_)));
          set_has_bless_amount_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_exp;
        break;
      }

      // optional int64 exp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_is_super_model;
        break;
      }

      // optional bool is_super_model = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_super_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_super_model_)));
          set_has_is_super_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_upgrade_times;
        break;
      }

      // optional int32 upgrade_times = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_times_)));
          set_has_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_super_model_2;
        break;
      }

      // optional bool is_super_model_2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_super_model_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_super_model_2_)));
          set_has_is_super_model_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_nickname_id;
        break;
      }

      // optional int32 nickname_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nickname_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nickname_id_)));
          set_has_nickname_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qian_neng_extra_max_use_count;
        break;
      }

      // optional int32 qian_neng_extra_max_use_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_extra_max_use_count_)));
          set_has_qian_neng_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_huan_hua_extra_max_use_count;
        break;
      }

      // optional int32 huan_hua_extra_max_use_count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_extra_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_extra_max_use_count_)));
          set_has_huan_hua_extra_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qian_neng_max_use_count_extra_times;
        break;
      }

      // optional int32 qian_neng_max_use_count_extra_times = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qian_neng_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qian_neng_max_use_count_extra_times_)));
          set_has_qian_neng_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_hua_max_use_count_extra_times;
        break;
      }

      // optional int32 huan_hua_max_use_count_extra_times = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_hua_max_use_count_extra_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_hua_max_use_count_extra_times_)));
          set_has_huan_hua_max_use_count_extra_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleShieldProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.ShieldDataProto data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional .app.message.ShieldLevelDataProto level_data = 2;
  if (has_level_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->level_data(), output);
  }

  // optional .app.message.ActiveSpell special_spell_1 = 3;
  if (has_special_spell_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->special_spell_1(), output);
  }

  // optional .app.message.ActiveSpell special_spell_2 = 4;
  if (has_special_spell_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->special_spell_2(), output);
  }

  // repeated int32 normal_spell_pos = 5;
  for (int i = 0; i < this->normal_spell_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->normal_spell_pos(i), output);
  }

  // repeated .app.message.ActiveSpell normal_spells = 6;
  for (int i = 0; i < this->normal_spells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->normal_spells(i), output);
  }

  // repeated int32 equipment_pos = 7;
  for (int i = 0; i < this->equipment_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->equipment_pos(i), output);
  }

  // repeated bytes equipment_static_data = 8;
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->equipment_static_data(i), output);
  }

  // repeated bytes equipment_dynamic_data = 9;
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->equipment_dynamic_data(i), output);
  }

  // optional int32 qian_neng_use_count = 10;
  if (has_qian_neng_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->qian_neng_use_count(), output);
  }

  // optional int32 huan_hua_use_count = 11;
  if (has_huan_hua_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->huan_hua_use_count(), output);
  }

  // optional int32 bless_amount = 12;
  if (has_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bless_amount(), output);
  }

  // optional int64 bless_amount_clear_time = 13;
  if (has_bless_amount_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->bless_amount_clear_time(), output);
  }

  // optional int64 exp = 14;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->exp(), output);
  }

  // optional bool is_super_model = 15;
  if (has_is_super_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_super_model(), output);
  }

  // optional int32 upgrade_times = 16;
  if (has_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->upgrade_times(), output);
  }

  // optional bool is_super_model_2 = 17;
  if (has_is_super_model_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_super_model_2(), output);
  }

  // optional int32 nickname_id = 18;
  if (has_nickname_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->nickname_id(), output);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qian_neng_extra_max_use_count(), output);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->huan_hua_extra_max_use_count(), output);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->qian_neng_max_use_count_extra_times(), output);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_hua_max_use_count_extra_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleShieldProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.ShieldDataProto data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional .app.message.ShieldLevelDataProto level_data = 2;
  if (has_level_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->level_data(), target);
  }

  // optional .app.message.ActiveSpell special_spell_1 = 3;
  if (has_special_spell_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->special_spell_1(), target);
  }

  // optional .app.message.ActiveSpell special_spell_2 = 4;
  if (has_special_spell_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->special_spell_2(), target);
  }

  // repeated int32 normal_spell_pos = 5;
  for (int i = 0; i < this->normal_spell_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->normal_spell_pos(i), target);
  }

  // repeated .app.message.ActiveSpell normal_spells = 6;
  for (int i = 0; i < this->normal_spells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->normal_spells(i), target);
  }

  // repeated int32 equipment_pos = 7;
  for (int i = 0; i < this->equipment_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->equipment_pos(i), target);
  }

  // repeated bytes equipment_static_data = 8;
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->equipment_static_data(i), target);
  }

  // repeated bytes equipment_dynamic_data = 9;
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(9, this->equipment_dynamic_data(i), target);
  }

  // optional int32 qian_neng_use_count = 10;
  if (has_qian_neng_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->qian_neng_use_count(), target);
  }

  // optional int32 huan_hua_use_count = 11;
  if (has_huan_hua_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->huan_hua_use_count(), target);
  }

  // optional int32 bless_amount = 12;
  if (has_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bless_amount(), target);
  }

  // optional int64 bless_amount_clear_time = 13;
  if (has_bless_amount_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->bless_amount_clear_time(), target);
  }

  // optional int64 exp = 14;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->exp(), target);
  }

  // optional bool is_super_model = 15;
  if (has_is_super_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_super_model(), target);
  }

  // optional int32 upgrade_times = 16;
  if (has_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->upgrade_times(), target);
  }

  // optional bool is_super_model_2 = 17;
  if (has_is_super_model_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_super_model_2(), target);
  }

  // optional int32 nickname_id = 18;
  if (has_nickname_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->nickname_id(), target);
  }

  // optional int32 qian_neng_extra_max_use_count = 25;
  if (has_qian_neng_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qian_neng_extra_max_use_count(), target);
  }

  // optional int32 huan_hua_extra_max_use_count = 26;
  if (has_huan_hua_extra_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->huan_hua_extra_max_use_count(), target);
  }

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  if (has_qian_neng_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->qian_neng_max_use_count_extra_times(), target);
  }

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  if (has_huan_hua_max_use_count_extra_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_hua_max_use_count_extra_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleShieldProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.ShieldDataProto data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .app.message.ShieldLevelDataProto level_data = 2;
    if (has_level_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level_data());
    }

    // optional .app.message.ActiveSpell special_spell_1 = 3;
    if (has_special_spell_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->special_spell_1());
    }

    // optional .app.message.ActiveSpell special_spell_2 = 4;
    if (has_special_spell_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->special_spell_2());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 qian_neng_use_count = 10;
    if (has_qian_neng_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_use_count());
    }

    // optional int32 huan_hua_use_count = 11;
    if (has_huan_hua_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_use_count());
    }

    // optional int32 bless_amount = 12;
    if (has_bless_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_amount());
    }

    // optional int64 bless_amount_clear_time = 13;
    if (has_bless_amount_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_amount_clear_time());
    }

    // optional int64 exp = 14;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional bool is_super_model = 15;
    if (has_is_super_model()) {
      total_size += 1 + 1;
    }

    // optional bool is_super_model_2 = 17;
    if (has_is_super_model_2()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 nickname_id = 18;
    if (has_nickname_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nickname_id());
    }

    // optional int32 upgrade_times = 16;
    if (has_upgrade_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_times());
    }

    // optional int32 qian_neng_extra_max_use_count = 25;
    if (has_qian_neng_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_extra_max_use_count());
    }

    // optional int32 huan_hua_extra_max_use_count = 26;
    if (has_huan_hua_extra_max_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_extra_max_use_count());
    }

    // optional int32 qian_neng_max_use_count_extra_times = 27;
    if (has_qian_neng_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qian_neng_max_use_count_extra_times());
    }

    // optional int32 huan_hua_max_use_count_extra_times = 28;
    if (has_huan_hua_max_use_count_extra_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_hua_max_use_count_extra_times());
    }

  }
  // repeated int32 normal_spell_pos = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->normal_spell_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->normal_spell_pos(i));
    }
    total_size += 1 * this->normal_spell_pos_size() + data_size;
  }

  // repeated .app.message.ActiveSpell normal_spells = 6;
  total_size += 1 * this->normal_spells_size();
  for (int i = 0; i < this->normal_spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal_spells(i));
  }

  // repeated int32 equipment_pos = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipment_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipment_pos(i));
    }
    total_size += 1 * this->equipment_pos_size() + data_size;
  }

  // repeated bytes equipment_static_data = 8;
  total_size += 1 * this->equipment_static_data_size();
  for (int i = 0; i < this->equipment_static_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->equipment_static_data(i));
  }

  // repeated bytes equipment_dynamic_data = 9;
  total_size += 1 * this->equipment_dynamic_data_size();
  for (int i = 0; i < this->equipment_dynamic_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->equipment_dynamic_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleShieldProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleShieldProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleShieldProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleShieldProto::MergeFrom(const SingleShieldProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_spell_pos_.MergeFrom(from.normal_spell_pos_);
  normal_spells_.MergeFrom(from.normal_spells_);
  equipment_pos_.MergeFrom(from.equipment_pos_);
  equipment_static_data_.MergeFrom(from.equipment_static_data_);
  equipment_dynamic_data_.MergeFrom(from.equipment_dynamic_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::app::message::ShieldDataProto::MergeFrom(from.data());
    }
    if (from.has_level_data()) {
      mutable_level_data()->::app::message::ShieldLevelDataProto::MergeFrom(from.level_data());
    }
    if (from.has_special_spell_1()) {
      mutable_special_spell_1()->::app::message::ActiveSpell::MergeFrom(from.special_spell_1());
    }
    if (from.has_special_spell_2()) {
      mutable_special_spell_2()->::app::message::ActiveSpell::MergeFrom(from.special_spell_2());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_qian_neng_use_count()) {
      set_qian_neng_use_count(from.qian_neng_use_count());
    }
    if (from.has_huan_hua_use_count()) {
      set_huan_hua_use_count(from.huan_hua_use_count());
    }
    if (from.has_bless_amount()) {
      set_bless_amount(from.bless_amount());
    }
    if (from.has_bless_amount_clear_time()) {
      set_bless_amount_clear_time(from.bless_amount_clear_time());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_is_super_model()) {
      set_is_super_model(from.is_super_model());
    }
    if (from.has_is_super_model_2()) {
      set_is_super_model_2(from.is_super_model_2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nickname_id()) {
      set_nickname_id(from.nickname_id());
    }
    if (from.has_upgrade_times()) {
      set_upgrade_times(from.upgrade_times());
    }
    if (from.has_qian_neng_extra_max_use_count()) {
      set_qian_neng_extra_max_use_count(from.qian_neng_extra_max_use_count());
    }
    if (from.has_huan_hua_extra_max_use_count()) {
      set_huan_hua_extra_max_use_count(from.huan_hua_extra_max_use_count());
    }
    if (from.has_qian_neng_max_use_count_extra_times()) {
      set_qian_neng_max_use_count_extra_times(from.qian_neng_max_use_count_extra_times());
    }
    if (from.has_huan_hua_max_use_count_extra_times()) {
      set_huan_hua_max_use_count_extra_times(from.huan_hua_max_use_count_extra_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleShieldProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleShieldProto::CopyFrom(const SingleShieldProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleShieldProto::IsInitialized() const {

  return true;
}

void SingleShieldProto::Swap(SingleShieldProto* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(level_data_, other->level_data_);
    std::swap(special_spell_1_, other->special_spell_1_);
    std::swap(special_spell_2_, other->special_spell_2_);
    normal_spell_pos_.Swap(&other->normal_spell_pos_);
    normal_spells_.Swap(&other->normal_spells_);
    equipment_pos_.Swap(&other->equipment_pos_);
    equipment_static_data_.Swap(&other->equipment_static_data_);
    equipment_dynamic_data_.Swap(&other->equipment_dynamic_data_);
    std::swap(qian_neng_use_count_, other->qian_neng_use_count_);
    std::swap(huan_hua_use_count_, other->huan_hua_use_count_);
    std::swap(bless_amount_, other->bless_amount_);
    std::swap(bless_amount_clear_time_, other->bless_amount_clear_time_);
    std::swap(exp_, other->exp_);
    std::swap(is_super_model_, other->is_super_model_);
    std::swap(is_super_model_2_, other->is_super_model_2_);
    std::swap(nickname_id_, other->nickname_id_);
    std::swap(upgrade_times_, other->upgrade_times_);
    std::swap(qian_neng_extra_max_use_count_, other->qian_neng_extra_max_use_count_);
    std::swap(huan_hua_extra_max_use_count_, other->huan_hua_extra_max_use_count_);
    std::swap(qian_neng_max_use_count_extra_times_, other->qian_neng_max_use_count_extra_times_);
    std::swap(huan_hua_max_use_count_extra_times_, other->huan_hua_max_use_count_extra_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleShieldProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleShieldProto_descriptor_;
  metadata.reflection = SingleShieldProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroBossCard::kTodayCallCountFieldNumber;
const int HeroBossCard::kCurrentCardIdFieldNumber;
const int HeroBossCard::kCurrentCallingCardIdFieldNumber;
const int HeroBossCard::kDungeonExpiredTimeFieldNumber;
const int HeroBossCard::kGuildBossCardKillPrizeCountFieldNumber;
const int HeroBossCard::kGuildBossCardCallPrizeCountFieldNumber;
const int HeroBossCard::kResetWeekOfYearFieldNumber;
#endif  // !_MSC_VER

HeroBossCard::HeroBossCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroBossCard::InitAsDefaultInstance() {
}

HeroBossCard::HeroBossCard(const HeroBossCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroBossCard::SharedCtor() {
  _cached_size_ = 0;
  today_call_count_ = 0;
  current_card_id_ = 0;
  current_calling_card_id_ = 0;
  dungeon_expired_time_ = GOOGLE_LONGLONG(0);
  guild_boss_card_kill_prize_count_ = 0;
  guild_boss_card_call_prize_count_ = 0;
  reset_week_of_year_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroBossCard::~HeroBossCard() {
  SharedDtor();
}

void HeroBossCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroBossCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroBossCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroBossCard_descriptor_;
}

const HeroBossCard& HeroBossCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroBossCard* HeroBossCard::default_instance_ = NULL;

HeroBossCard* HeroBossCard::New() const {
  return new HeroBossCard;
}

void HeroBossCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_call_count_ = 0;
    current_card_id_ = 0;
    current_calling_card_id_ = 0;
    dungeon_expired_time_ = GOOGLE_LONGLONG(0);
    guild_boss_card_kill_prize_count_ = 0;
    guild_boss_card_call_prize_count_ = 0;
    reset_week_of_year_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroBossCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 today_call_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_call_count_)));
          set_has_today_call_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_card_id;
        break;
      }

      // optional int32 current_card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_card_id_)));
          set_has_current_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_calling_card_id;
        break;
      }

      // optional int32 current_calling_card_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_calling_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_calling_card_id_)));
          set_has_current_calling_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dungeon_expired_time;
        break;
      }

      // optional int64 dungeon_expired_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dungeon_expired_time_)));
          set_has_dungeon_expired_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_boss_card_kill_prize_count;
        break;
      }

      // optional int32 guild_boss_card_kill_prize_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_boss_card_kill_prize_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_boss_card_kill_prize_count_)));
          set_has_guild_boss_card_kill_prize_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reset_week_of_year;
        break;
      }

      // optional int32 reset_week_of_year = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_week_of_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_week_of_year_)));
          set_has_reset_week_of_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guild_boss_card_call_prize_count;
        break;
      }

      // optional int32 guild_boss_card_call_prize_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_boss_card_call_prize_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_boss_card_call_prize_count_)));
          set_has_guild_boss_card_call_prize_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroBossCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 today_call_count = 1;
  if (has_today_call_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->today_call_count(), output);
  }

  // optional int32 current_card_id = 2;
  if (has_current_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_card_id(), output);
  }

  // optional int32 current_calling_card_id = 3;
  if (has_current_calling_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_calling_card_id(), output);
  }

  // optional int64 dungeon_expired_time = 4;
  if (has_dungeon_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dungeon_expired_time(), output);
  }

  // optional int32 guild_boss_card_kill_prize_count = 5;
  if (has_guild_boss_card_kill_prize_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guild_boss_card_kill_prize_count(), output);
  }

  // optional int32 reset_week_of_year = 6;
  if (has_reset_week_of_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reset_week_of_year(), output);
  }

  // optional int32 guild_boss_card_call_prize_count = 7;
  if (has_guild_boss_card_call_prize_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_boss_card_call_prize_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroBossCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 today_call_count = 1;
  if (has_today_call_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->today_call_count(), target);
  }

  // optional int32 current_card_id = 2;
  if (has_current_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_card_id(), target);
  }

  // optional int32 current_calling_card_id = 3;
  if (has_current_calling_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_calling_card_id(), target);
  }

  // optional int64 dungeon_expired_time = 4;
  if (has_dungeon_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dungeon_expired_time(), target);
  }

  // optional int32 guild_boss_card_kill_prize_count = 5;
  if (has_guild_boss_card_kill_prize_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guild_boss_card_kill_prize_count(), target);
  }

  // optional int32 reset_week_of_year = 6;
  if (has_reset_week_of_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reset_week_of_year(), target);
  }

  // optional int32 guild_boss_card_call_prize_count = 7;
  if (has_guild_boss_card_call_prize_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guild_boss_card_call_prize_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroBossCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 today_call_count = 1;
    if (has_today_call_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_call_count());
    }

    // optional int32 current_card_id = 2;
    if (has_current_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_card_id());
    }

    // optional int32 current_calling_card_id = 3;
    if (has_current_calling_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_calling_card_id());
    }

    // optional int64 dungeon_expired_time = 4;
    if (has_dungeon_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dungeon_expired_time());
    }

    // optional int32 guild_boss_card_kill_prize_count = 5;
    if (has_guild_boss_card_kill_prize_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_boss_card_kill_prize_count());
    }

    // optional int32 guild_boss_card_call_prize_count = 7;
    if (has_guild_boss_card_call_prize_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_boss_card_call_prize_count());
    }

    // optional int32 reset_week_of_year = 6;
    if (has_reset_week_of_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_week_of_year());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroBossCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroBossCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroBossCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroBossCard::MergeFrom(const HeroBossCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_call_count()) {
      set_today_call_count(from.today_call_count());
    }
    if (from.has_current_card_id()) {
      set_current_card_id(from.current_card_id());
    }
    if (from.has_current_calling_card_id()) {
      set_current_calling_card_id(from.current_calling_card_id());
    }
    if (from.has_dungeon_expired_time()) {
      set_dungeon_expired_time(from.dungeon_expired_time());
    }
    if (from.has_guild_boss_card_kill_prize_count()) {
      set_guild_boss_card_kill_prize_count(from.guild_boss_card_kill_prize_count());
    }
    if (from.has_guild_boss_card_call_prize_count()) {
      set_guild_boss_card_call_prize_count(from.guild_boss_card_call_prize_count());
    }
    if (from.has_reset_week_of_year()) {
      set_reset_week_of_year(from.reset_week_of_year());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroBossCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroBossCard::CopyFrom(const HeroBossCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroBossCard::IsInitialized() const {

  return true;
}

void HeroBossCard::Swap(HeroBossCard* other) {
  if (other != this) {
    std::swap(today_call_count_, other->today_call_count_);
    std::swap(current_card_id_, other->current_card_id_);
    std::swap(current_calling_card_id_, other->current_calling_card_id_);
    std::swap(dungeon_expired_time_, other->dungeon_expired_time_);
    std::swap(guild_boss_card_kill_prize_count_, other->guild_boss_card_kill_prize_count_);
    std::swap(guild_boss_card_call_prize_count_, other->guild_boss_card_call_prize_count_);
    std::swap(reset_week_of_year_, other->reset_week_of_year_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroBossCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroBossCard_descriptor_;
  metadata.reflection = HeroBossCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaidiProto_HaidiLeftTime::kHaidilevelFieldNumber;
const int HaidiProto_HaidiLeftTime::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

HaidiProto_HaidiLeftTime::HaidiProto_HaidiLeftTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaidiProto_HaidiLeftTime::InitAsDefaultInstance() {
}

HaidiProto_HaidiLeftTime::HaidiProto_HaidiLeftTime(const HaidiProto_HaidiLeftTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaidiProto_HaidiLeftTime::SharedCtor() {
  _cached_size_ = 0;
  haidilevel_ = 0;
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaidiProto_HaidiLeftTime::~HaidiProto_HaidiLeftTime() {
  SharedDtor();
}

void HaidiProto_HaidiLeftTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaidiProto_HaidiLeftTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaidiProto_HaidiLeftTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaidiProto_HaidiLeftTime_descriptor_;
}

const HaidiProto_HaidiLeftTime& HaidiProto_HaidiLeftTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HaidiProto_HaidiLeftTime* HaidiProto_HaidiLeftTime::default_instance_ = NULL;

HaidiProto_HaidiLeftTime* HaidiProto_HaidiLeftTime::New() const {
  return new HaidiProto_HaidiLeftTime;
}

void HaidiProto_HaidiLeftTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    haidilevel_ = 0;
    lefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaidiProto_HaidiLeftTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 haidilevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haidilevel_)));
          set_has_haidilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftTime;
        break;
      }

      // required int32 leftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaidiProto_HaidiLeftTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 haidilevel = 1;
  if (has_haidilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->haidilevel(), output);
  }

  // required int32 leftTime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaidiProto_HaidiLeftTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 haidilevel = 1;
  if (has_haidilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->haidilevel(), target);
  }

  // required int32 leftTime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaidiProto_HaidiLeftTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 haidilevel = 1;
    if (has_haidilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haidilevel());
    }

    // required int32 leftTime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaidiProto_HaidiLeftTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaidiProto_HaidiLeftTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaidiProto_HaidiLeftTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaidiProto_HaidiLeftTime::MergeFrom(const HaidiProto_HaidiLeftTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_haidilevel()) {
      set_haidilevel(from.haidilevel());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaidiProto_HaidiLeftTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaidiProto_HaidiLeftTime::CopyFrom(const HaidiProto_HaidiLeftTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaidiProto_HaidiLeftTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HaidiProto_HaidiLeftTime::Swap(HaidiProto_HaidiLeftTime* other) {
  if (other != this) {
    std::swap(haidilevel_, other->haidilevel_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaidiProto_HaidiLeftTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaidiProto_HaidiLeftTime_descriptor_;
  metadata.reflection = HaidiProto_HaidiLeftTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HaidiProto::kTodayFreeTicketCollectedFieldNumber;
const int HaidiProto::kBishuidanUsedFieldNumber;
const int HaidiProto::kLeftTimeFieldNumber;
const int HaidiProto::kIsNewVersionFieldNumber;
#endif  // !_MSC_VER

HaidiProto::HaidiProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaidiProto::InitAsDefaultInstance() {
}

HaidiProto::HaidiProto(const HaidiProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaidiProto::SharedCtor() {
  _cached_size_ = 0;
  today_free_ticket_collected_ = false;
  bishuidan_used_ = false;
  is_new_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaidiProto::~HaidiProto() {
  SharedDtor();
}

void HaidiProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaidiProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaidiProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaidiProto_descriptor_;
}

const HaidiProto& HaidiProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HaidiProto* HaidiProto::default_instance_ = NULL;

HaidiProto* HaidiProto::New() const {
  return new HaidiProto;
}

void HaidiProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_free_ticket_collected_ = false;
    bishuidan_used_ = false;
    is_new_version_ = 0;
  }
  lefttime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaidiProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool today_free_ticket_collected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &today_free_ticket_collected_)));
          set_has_today_free_ticket_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bishuidan_used;
        break;
      }

      // optional bool bishuidan_used = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bishuidan_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bishuidan_used_)));
          set_has_bishuidan_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leftTime;
        break;
      }

      // repeated .app.message.HaidiProto.HaidiLeftTime leftTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leftTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lefttime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leftTime;
        if (input->ExpectTag(32)) goto parse_is_new_version;
        break;
      }

      // optional int32 is_new_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_version_)));
          set_has_is_new_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaidiProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool today_free_ticket_collected = 1;
  if (has_today_free_ticket_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->today_free_ticket_collected(), output);
  }

  // optional bool bishuidan_used = 2;
  if (has_bishuidan_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bishuidan_used(), output);
  }

  // repeated .app.message.HaidiProto.HaidiLeftTime leftTime = 3;
  for (int i = 0; i < this->lefttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lefttime(i), output);
  }

  // optional int32 is_new_version = 4;
  if (has_is_new_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_new_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaidiProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool today_free_ticket_collected = 1;
  if (has_today_free_ticket_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->today_free_ticket_collected(), target);
  }

  // optional bool bishuidan_used = 2;
  if (has_bishuidan_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bishuidan_used(), target);
  }

  // repeated .app.message.HaidiProto.HaidiLeftTime leftTime = 3;
  for (int i = 0; i < this->lefttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lefttime(i), target);
  }

  // optional int32 is_new_version = 4;
  if (has_is_new_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_new_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaidiProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool today_free_ticket_collected = 1;
    if (has_today_free_ticket_collected()) {
      total_size += 1 + 1;
    }

    // optional bool bishuidan_used = 2;
    if (has_bishuidan_used()) {
      total_size += 1 + 1;
    }

    // optional int32 is_new_version = 4;
    if (has_is_new_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_new_version());
    }

  }
  // repeated .app.message.HaidiProto.HaidiLeftTime leftTime = 3;
  total_size += 1 * this->lefttime_size();
  for (int i = 0; i < this->lefttime_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lefttime(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaidiProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaidiProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaidiProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaidiProto::MergeFrom(const HaidiProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lefttime_.MergeFrom(from.lefttime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_free_ticket_collected()) {
      set_today_free_ticket_collected(from.today_free_ticket_collected());
    }
    if (from.has_bishuidan_used()) {
      set_bishuidan_used(from.bishuidan_used());
    }
    if (from.has_is_new_version()) {
      set_is_new_version(from.is_new_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaidiProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaidiProto::CopyFrom(const HaidiProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaidiProto::IsInitialized() const {

  for (int i = 0; i < lefttime_size(); i++) {
    if (!this->lefttime(i).IsInitialized()) return false;
  }
  return true;
}

void HaidiProto::Swap(HaidiProto* other) {
  if (other != this) {
    std::swap(today_free_ticket_collected_, other->today_free_ticket_collected_);
    std::swap(bishuidan_used_, other->bishuidan_used_);
    lefttime_.Swap(&other->lefttime_);
    std::swap(is_new_version_, other->is_new_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaidiProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaidiProto_descriptor_;
  metadata.reflection = HaidiProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaidiInfoProto_HaidiOverTime::kHaidilevelFieldNumber;
const int HaidiInfoProto_HaidiOverTime::kOverTimeFieldNumber;
#endif  // !_MSC_VER

HaidiInfoProto_HaidiOverTime::HaidiInfoProto_HaidiOverTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaidiInfoProto_HaidiOverTime::InitAsDefaultInstance() {
}

HaidiInfoProto_HaidiOverTime::HaidiInfoProto_HaidiOverTime(const HaidiInfoProto_HaidiOverTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaidiInfoProto_HaidiOverTime::SharedCtor() {
  _cached_size_ = 0;
  haidilevel_ = 0;
  overtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaidiInfoProto_HaidiOverTime::~HaidiInfoProto_HaidiOverTime() {
  SharedDtor();
}

void HaidiInfoProto_HaidiOverTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaidiInfoProto_HaidiOverTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaidiInfoProto_HaidiOverTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaidiInfoProto_HaidiOverTime_descriptor_;
}

const HaidiInfoProto_HaidiOverTime& HaidiInfoProto_HaidiOverTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HaidiInfoProto_HaidiOverTime* HaidiInfoProto_HaidiOverTime::default_instance_ = NULL;

HaidiInfoProto_HaidiOverTime* HaidiInfoProto_HaidiOverTime::New() const {
  return new HaidiInfoProto_HaidiOverTime;
}

void HaidiInfoProto_HaidiOverTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    haidilevel_ = 0;
    overtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaidiInfoProto_HaidiOverTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 haidilevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haidilevel_)));
          set_has_haidilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_overTime;
        break;
      }

      // required int64 overTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &overtime_)));
          set_has_overtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaidiInfoProto_HaidiOverTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 haidilevel = 1;
  if (has_haidilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->haidilevel(), output);
  }

  // required int64 overTime = 2;
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->overtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaidiInfoProto_HaidiOverTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 haidilevel = 1;
  if (has_haidilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->haidilevel(), target);
  }

  // required int64 overTime = 2;
  if (has_overtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->overtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaidiInfoProto_HaidiOverTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 haidilevel = 1;
    if (has_haidilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haidilevel());
    }

    // required int64 overTime = 2;
    if (has_overtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->overtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaidiInfoProto_HaidiOverTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaidiInfoProto_HaidiOverTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaidiInfoProto_HaidiOverTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaidiInfoProto_HaidiOverTime::MergeFrom(const HaidiInfoProto_HaidiOverTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_haidilevel()) {
      set_haidilevel(from.haidilevel());
    }
    if (from.has_overtime()) {
      set_overtime(from.overtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaidiInfoProto_HaidiOverTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaidiInfoProto_HaidiOverTime::CopyFrom(const HaidiInfoProto_HaidiOverTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaidiInfoProto_HaidiOverTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HaidiInfoProto_HaidiOverTime::Swap(HaidiInfoProto_HaidiOverTime* other) {
  if (other != this) {
    std::swap(haidilevel_, other->haidilevel_);
    std::swap(overtime_, other->overtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaidiInfoProto_HaidiOverTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaidiInfoProto_HaidiOverTime_descriptor_;
  metadata.reflection = HaidiInfoProto_HaidiOverTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HaidiInfoProto::kTodayFreeTicketCollectedFieldNumber;
const int HaidiInfoProto::kBishuidanUsedFieldNumber;
const int HaidiInfoProto::kOverTimeFieldNumber;
#endif  // !_MSC_VER

HaidiInfoProto::HaidiInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaidiInfoProto::InitAsDefaultInstance() {
}

HaidiInfoProto::HaidiInfoProto(const HaidiInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaidiInfoProto::SharedCtor() {
  _cached_size_ = 0;
  today_free_ticket_collected_ = false;
  bishuidan_used_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaidiInfoProto::~HaidiInfoProto() {
  SharedDtor();
}

void HaidiInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaidiInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaidiInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaidiInfoProto_descriptor_;
}

const HaidiInfoProto& HaidiInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HaidiInfoProto* HaidiInfoProto::default_instance_ = NULL;

HaidiInfoProto* HaidiInfoProto::New() const {
  return new HaidiInfoProto;
}

void HaidiInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_free_ticket_collected_ = false;
    bishuidan_used_ = false;
  }
  overtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaidiInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool today_free_ticket_collected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &today_free_ticket_collected_)));
          set_has_today_free_ticket_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bishuidan_used;
        break;
      }

      // optional bool bishuidan_used = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bishuidan_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bishuidan_used_)));
          set_has_bishuidan_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_overTime;
        break;
      }

      // repeated .app.message.HaidiInfoProto.HaidiOverTime overTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_overTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_overTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaidiInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool today_free_ticket_collected = 1;
  if (has_today_free_ticket_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->today_free_ticket_collected(), output);
  }

  // optional bool bishuidan_used = 2;
  if (has_bishuidan_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bishuidan_used(), output);
  }

  // repeated .app.message.HaidiInfoProto.HaidiOverTime overTime = 3;
  for (int i = 0; i < this->overtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->overtime(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaidiInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool today_free_ticket_collected = 1;
  if (has_today_free_ticket_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->today_free_ticket_collected(), target);
  }

  // optional bool bishuidan_used = 2;
  if (has_bishuidan_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bishuidan_used(), target);
  }

  // repeated .app.message.HaidiInfoProto.HaidiOverTime overTime = 3;
  for (int i = 0; i < this->overtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->overtime(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaidiInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool today_free_ticket_collected = 1;
    if (has_today_free_ticket_collected()) {
      total_size += 1 + 1;
    }

    // optional bool bishuidan_used = 2;
    if (has_bishuidan_used()) {
      total_size += 1 + 1;
    }

  }
  // repeated .app.message.HaidiInfoProto.HaidiOverTime overTime = 3;
  total_size += 1 * this->overtime_size();
  for (int i = 0; i < this->overtime_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->overtime(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaidiInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaidiInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaidiInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaidiInfoProto::MergeFrom(const HaidiInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  overtime_.MergeFrom(from.overtime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_free_ticket_collected()) {
      set_today_free_ticket_collected(from.today_free_ticket_collected());
    }
    if (from.has_bishuidan_used()) {
      set_bishuidan_used(from.bishuidan_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaidiInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaidiInfoProto::CopyFrom(const HaidiInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaidiInfoProto::IsInitialized() const {

  for (int i = 0; i < overtime_size(); i++) {
    if (!this->overtime(i).IsInitialized()) return false;
  }
  return true;
}

void HaidiInfoProto::Swap(HaidiInfoProto* other) {
  if (other != this) {
    std::swap(today_free_ticket_collected_, other->today_free_ticket_collected_);
    std::swap(bishuidan_used_, other->bishuidan_used_);
    overtime_.Swap(&other->overtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaidiInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaidiInfoProto_descriptor_;
  metadata.reflection = HaidiInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroComebackProto::kIsCollectedFieldNumber;
const int HeroComebackProto::kIsVipCollectedFieldNumber;
const int HeroComebackProto::kStartTimeFieldNumber;
const int HeroComebackProto::kEndTimeFieldNumber;
const int HeroComebackProto::kLastLogoutTimeBeforeStartFieldNumber;
#endif  // !_MSC_VER

HeroComebackProto::HeroComebackProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroComebackProto::InitAsDefaultInstance() {
}

HeroComebackProto::HeroComebackProto(const HeroComebackProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroComebackProto::SharedCtor() {
  _cached_size_ = 0;
  is_collected_ = false;
  is_vip_collected_ = false;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  last_logout_time_before_start_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroComebackProto::~HeroComebackProto() {
  SharedDtor();
}

void HeroComebackProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroComebackProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroComebackProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroComebackProto_descriptor_;
}

const HeroComebackProto& HeroComebackProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

HeroComebackProto* HeroComebackProto::default_instance_ = NULL;

HeroComebackProto* HeroComebackProto::New() const {
  return new HeroComebackProto;
}

void HeroComebackProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_collected_ = false;
    is_vip_collected_ = false;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    last_logout_time_before_start_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroComebackProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_collected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_collected_)));
          set_has_is_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_vip_collected;
        break;
      }

      // optional bool is_vip_collected = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_vip_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vip_collected_)));
          set_has_is_vip_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_logout_time_before_start;
        break;
      }

      // optional int64 last_logout_time_before_start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time_before_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logout_time_before_start_)));
          set_has_last_logout_time_before_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroComebackProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_collected = 1;
  if (has_is_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_collected(), output);
  }

  // optional bool is_vip_collected = 2;
  if (has_is_vip_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_vip_collected(), output);
  }

  // optional int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // optional int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  // optional int64 last_logout_time_before_start = 5;
  if (has_last_logout_time_before_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_logout_time_before_start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroComebackProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_collected = 1;
  if (has_is_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_collected(), target);
  }

  // optional bool is_vip_collected = 2;
  if (has_is_vip_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_vip_collected(), target);
  }

  // optional int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // optional int64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_time(), target);
  }

  // optional int64 last_logout_time_before_start = 5;
  if (has_last_logout_time_before_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_logout_time_before_start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroComebackProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_collected = 1;
    if (has_is_collected()) {
      total_size += 1 + 1;
    }

    // optional bool is_vip_collected = 2;
    if (has_is_vip_collected()) {
      total_size += 1 + 1;
    }

    // optional int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int64 last_logout_time_before_start = 5;
    if (has_last_logout_time_before_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_logout_time_before_start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroComebackProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroComebackProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroComebackProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroComebackProto::MergeFrom(const HeroComebackProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_collected()) {
      set_is_collected(from.is_collected());
    }
    if (from.has_is_vip_collected()) {
      set_is_vip_collected(from.is_vip_collected());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_last_logout_time_before_start()) {
      set_last_logout_time_before_start(from.last_logout_time_before_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroComebackProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroComebackProto::CopyFrom(const HeroComebackProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroComebackProto::IsInitialized() const {

  return true;
}

void HeroComebackProto::Swap(HeroComebackProto* other) {
  if (other != this) {
    std::swap(is_collected_, other->is_collected_);
    std::swap(is_vip_collected_, other->is_vip_collected_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(last_logout_time_before_start_, other->last_logout_time_before_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroComebackProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroComebackProto_descriptor_;
  metadata.reflection = HeroComebackProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
