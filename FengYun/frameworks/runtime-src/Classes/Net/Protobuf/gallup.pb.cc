// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gallup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gallup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* GallupProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GallupProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GallupQuestionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GallupQuestionProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gallup_2eproto() {
  protobuf_AddDesc_gallup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gallup.proto");
  GOOGLE_CHECK(file != NULL);
  GallupProto_descriptor_ = file->message_type(0);
  static const int GallupProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupProto, questions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupProto, all_finish_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupProto, daily_question_count_),
  };
  GallupProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GallupProto_descriptor_,
      GallupProto::default_instance_,
      GallupProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GallupProto));
  GallupQuestionProto_descriptor_ = file->message_type(1);
  static const int GallupQuestionProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupQuestionProto, question_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupQuestionProto, question_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupQuestionProto, prize_),
  };
  GallupQuestionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GallupQuestionProto_descriptor_,
      GallupQuestionProto::default_instance_,
      GallupQuestionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupQuestionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallupQuestionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GallupQuestionProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gallup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GallupProto_descriptor_, &GallupProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GallupQuestionProto_descriptor_, &GallupQuestionProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gallup_2eproto() {
  delete GallupProto::default_instance_;
  delete GallupProto_reflection_;
  delete GallupQuestionProto::default_instance_;
  delete GallupQuestionProto_reflection_;
}

void protobuf_AddDesc_gallup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_prize_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014gallup.proto\022\013app.message\032\013prize.proto"
    "\"\223\001\n\013GallupProto\0223\n\tquestions\030\001 \003(\0132 .ap"
    "p.message.GallupQuestionProto\0221\n\020all_fin"
    "ish_prize\030\002 \001(\0132\027.app.message.PrizeProto"
    "\022\034\n\024daily_question_count\030\003 \001(\005\"e\n\023Gallup"
    "QuestionProto\022\022\n\nquestion_1\030\001 \001(\t\022\022\n\nque"
    "stion_2\030\002 \001(\t\022&\n\005prize\030\003 \001(\0132\027.app.messa"
    "ge.PrizeProtoB\037\n\014app.protobufB\rGallupCon"
    "tentH\001", 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gallup.proto", &protobuf_RegisterTypes);
  GallupProto::default_instance_ = new GallupProto();
  GallupQuestionProto::default_instance_ = new GallupQuestionProto();
  GallupProto::default_instance_->InitAsDefaultInstance();
  GallupQuestionProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gallup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gallup_2eproto {
  StaticDescriptorInitializer_gallup_2eproto() {
    protobuf_AddDesc_gallup_2eproto();
  }
} static_descriptor_initializer_gallup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GallupProto::kQuestionsFieldNumber;
const int GallupProto::kAllFinishPrizeFieldNumber;
const int GallupProto::kDailyQuestionCountFieldNumber;
#endif  // !_MSC_VER

GallupProto::GallupProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GallupProto::InitAsDefaultInstance() {
  all_finish_prize_ = const_cast< ::app::message::PrizeProto*>(&::app::message::PrizeProto::default_instance());
}

GallupProto::GallupProto(const GallupProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GallupProto::SharedCtor() {
  _cached_size_ = 0;
  all_finish_prize_ = NULL;
  daily_question_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GallupProto::~GallupProto() {
  SharedDtor();
}

void GallupProto::SharedDtor() {
  if (this != default_instance_) {
    delete all_finish_prize_;
  }
}

void GallupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GallupProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GallupProto_descriptor_;
}

const GallupProto& GallupProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gallup_2eproto();
  return *default_instance_;
}

GallupProto* GallupProto::default_instance_ = NULL;

GallupProto* GallupProto::New() const {
  return new GallupProto;
}

void GallupProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_all_finish_prize()) {
      if (all_finish_prize_ != NULL) all_finish_prize_->::app::message::PrizeProto::Clear();
    }
    daily_question_count_ = 0;
  }
  questions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GallupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.GallupQuestionProto questions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_questions;
        if (input->ExpectTag(18)) goto parse_all_finish_prize;
        break;
      }

      // optional .app.message.PrizeProto all_finish_prize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_finish_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_finish_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daily_question_count;
        break;
      }

      // optional int32 daily_question_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_question_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_question_count_)));
          set_has_daily_question_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GallupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.GallupQuestionProto questions = 1;
  for (int i = 0; i < this->questions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questions(i), output);
  }

  // optional .app.message.PrizeProto all_finish_prize = 2;
  if (has_all_finish_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_finish_prize(), output);
  }

  // optional int32 daily_question_count = 3;
  if (has_daily_question_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->daily_question_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GallupProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.GallupQuestionProto questions = 1;
  for (int i = 0; i < this->questions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questions(i), target);
  }

  // optional .app.message.PrizeProto all_finish_prize = 2;
  if (has_all_finish_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_finish_prize(), target);
  }

  // optional int32 daily_question_count = 3;
  if (has_daily_question_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->daily_question_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GallupProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .app.message.PrizeProto all_finish_prize = 2;
    if (has_all_finish_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_finish_prize());
    }

    // optional int32 daily_question_count = 3;
    if (has_daily_question_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_question_count());
    }

  }
  // repeated .app.message.GallupQuestionProto questions = 1;
  total_size += 1 * this->questions_size();
  for (int i = 0; i < this->questions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GallupProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GallupProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GallupProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GallupProto::MergeFrom(const GallupProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  questions_.MergeFrom(from.questions_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_all_finish_prize()) {
      mutable_all_finish_prize()->::app::message::PrizeProto::MergeFrom(from.all_finish_prize());
    }
    if (from.has_daily_question_count()) {
      set_daily_question_count(from.daily_question_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GallupProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GallupProto::CopyFrom(const GallupProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GallupProto::IsInitialized() const {

  return true;
}

void GallupProto::Swap(GallupProto* other) {
  if (other != this) {
    questions_.Swap(&other->questions_);
    std::swap(all_finish_prize_, other->all_finish_prize_);
    std::swap(daily_question_count_, other->daily_question_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GallupProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GallupProto_descriptor_;
  metadata.reflection = GallupProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GallupQuestionProto::kQuestion1FieldNumber;
const int GallupQuestionProto::kQuestion2FieldNumber;
const int GallupQuestionProto::kPrizeFieldNumber;
#endif  // !_MSC_VER

GallupQuestionProto::GallupQuestionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GallupQuestionProto::InitAsDefaultInstance() {
  prize_ = const_cast< ::app::message::PrizeProto*>(&::app::message::PrizeProto::default_instance());
}

GallupQuestionProto::GallupQuestionProto(const GallupQuestionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GallupQuestionProto::SharedCtor() {
  _cached_size_ = 0;
  question_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  question_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GallupQuestionProto::~GallupQuestionProto() {
  SharedDtor();
}

void GallupQuestionProto::SharedDtor() {
  if (question_1_ != &::google::protobuf::internal::kEmptyString) {
    delete question_1_;
  }
  if (question_2_ != &::google::protobuf::internal::kEmptyString) {
    delete question_2_;
  }
  if (this != default_instance_) {
    delete prize_;
  }
}

void GallupQuestionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GallupQuestionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GallupQuestionProto_descriptor_;
}

const GallupQuestionProto& GallupQuestionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gallup_2eproto();
  return *default_instance_;
}

GallupQuestionProto* GallupQuestionProto::default_instance_ = NULL;

GallupQuestionProto* GallupQuestionProto::New() const {
  return new GallupQuestionProto;
}

void GallupQuestionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_question_1()) {
      if (question_1_ != &::google::protobuf::internal::kEmptyString) {
        question_1_->clear();
      }
    }
    if (has_question_2()) {
      if (question_2_ != &::google::protobuf::internal::kEmptyString) {
        question_2_->clear();
      }
    }
    if (has_prize()) {
      if (prize_ != NULL) prize_->::app::message::PrizeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GallupQuestionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string question_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->question_1().data(), this->question_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_question_2;
        break;
      }

      // optional string question_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->question_2().data(), this->question_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prize;
        break;
      }

      // optional .app.message.PrizeProto prize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GallupQuestionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string question_1 = 1;
  if (has_question_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question_1().data(), this->question_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->question_1(), output);
  }

  // optional string question_2 = 2;
  if (has_question_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question_2().data(), this->question_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->question_2(), output);
  }

  // optional .app.message.PrizeProto prize = 3;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GallupQuestionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string question_1 = 1;
  if (has_question_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question_1().data(), this->question_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->question_1(), target);
  }

  // optional string question_2 = 2;
  if (has_question_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question_2().data(), this->question_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->question_2(), target);
  }

  // optional .app.message.PrizeProto prize = 3;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GallupQuestionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string question_1 = 1;
    if (has_question_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question_1());
    }

    // optional string question_2 = 2;
    if (has_question_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question_2());
    }

    // optional .app.message.PrizeProto prize = 3;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GallupQuestionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GallupQuestionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GallupQuestionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GallupQuestionProto::MergeFrom(const GallupQuestionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_question_1()) {
      set_question_1(from.question_1());
    }
    if (from.has_question_2()) {
      set_question_2(from.question_2());
    }
    if (from.has_prize()) {
      mutable_prize()->::app::message::PrizeProto::MergeFrom(from.prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GallupQuestionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GallupQuestionProto::CopyFrom(const GallupQuestionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GallupQuestionProto::IsInitialized() const {

  return true;
}

void GallupQuestionProto::Swap(GallupQuestionProto* other) {
  if (other != this) {
    std::swap(question_1_, other->question_1_);
    std::swap(question_2_, other->question_2_);
    std::swap(prize_, other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GallupQuestionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GallupQuestionProto_descriptor_;
  metadata.reflection = GallupQuestionProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
