// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prize_draw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prize_draw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* PointExchangeRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointExchangeRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeDrawInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeDrawInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeDrawConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeDrawConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prize_5fdraw_2eproto() {
  protobuf_AddDesc_prize_5fdraw_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prize_draw.proto");
  GOOGLE_CHECK(file != NULL);
  PointExchangeRuleProto_descriptor_ = file->message_type(0);
  static const int PointExchangeRuleProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointExchangeRuleProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointExchangeRuleProto, point_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointExchangeRuleProto, count_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointExchangeRuleProto, obtain_goods_),
  };
  PointExchangeRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointExchangeRuleProto_descriptor_,
      PointExchangeRuleProto::default_instance_,
      PointExchangeRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointExchangeRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointExchangeRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointExchangeRuleProto));
  PrizeDrawInfoProto_descriptor_ = file->message_type(1);
  static const int PrizeDrawInfoProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, quality_),
  };
  PrizeDrawInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeDrawInfoProto_descriptor_,
      PrizeDrawInfoProto::default_instance_,
      PrizeDrawInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeDrawInfoProto));
  PrizeDrawConfig_descriptor_ = file->message_type(2);
  static const int PrizeDrawConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, upgrade_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, prize_draw_storage_capcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, log_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, prize_draw_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, point_exchange_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, end_time_),
  };
  PrizeDrawConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeDrawConfig_descriptor_,
      PrizeDrawConfig::default_instance_,
      PrizeDrawConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeDrawConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeDrawConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prize_5fdraw_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointExchangeRuleProto_descriptor_, &PointExchangeRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeDrawInfoProto_descriptor_, &PrizeDrawInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeDrawConfig_descriptor_, &PrizeDrawConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prize_5fdraw_2eproto() {
  delete PointExchangeRuleProto::default_instance_;
  delete PointExchangeRuleProto_reflection_;
  delete PrizeDrawInfoProto::default_instance_;
  delete PrizeDrawInfoProto_reflection_;
  delete PrizeDrawConfig::default_instance_;
  delete PrizeDrawConfig_reflection_;
}

void protobuf_AddDesc_prize_5fdraw_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::app::message::protobuf_AddDesc_config_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020prize_draw.proto\022\013app.message\032\013goods.p"
    "roto\032\014config.proto\"\203\001\n\026PointExchangeRule"
    "Proto\022\n\n\002id\030\001 \001(\005\022\022\n\npoint_cost\030\002 \001(\005\022\023\n"
    "\013count_limit\030\003 \001(\005\0224\n\014obtain_goods\030\004 \003(\013"
    "2\036.app.message.GoodsWrapperProto\"w\n\022Priz"
    "eDrawInfoProto\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005"
    "\022\014\n\004rate\030\003 \001(\005\022\014\n\004name\030\004 \001(\014\022\014\n\004desc\030\005 \001"
    "(\014\022\014\n\004icon\030\006 \001(\t\022\017\n\007quality\030\007 \001(\005\"\241\002\n\017Pr"
    "izeDrawConfig\022/\n\014upgrade_data\030\001 \001(\0132\031.ap"
    "p.message.UpgradeProto\022\"\n\032prize_draw_sto"
    "rage_capcity\030\002 \001(\005\022\025\n\rlog_max_count\030\003 \001("
    "\005\0229\n\020prize_draw_infos\030\004 \003(\0132\037.app.messag"
    "e.PrizeDrawInfoProto\022A\n\024point_exchange_i"
    "nfos\030\005 \003(\0132#.app.message.PointExchangeRu"
    "leProto\022\022\n\nstart_time\030\006 \001(\003\022\020\n\010end_time\030"
    "\007 \001(\003B\"\n\014app.protobufB\020PrizeDrawContentH"
    "\001", 641);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prize_draw.proto", &protobuf_RegisterTypes);
  PointExchangeRuleProto::default_instance_ = new PointExchangeRuleProto();
  PrizeDrawInfoProto::default_instance_ = new PrizeDrawInfoProto();
  PrizeDrawConfig::default_instance_ = new PrizeDrawConfig();
  PointExchangeRuleProto::default_instance_->InitAsDefaultInstance();
  PrizeDrawInfoProto::default_instance_->InitAsDefaultInstance();
  PrizeDrawConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prize_5fdraw_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prize_5fdraw_2eproto {
  StaticDescriptorInitializer_prize_5fdraw_2eproto() {
    protobuf_AddDesc_prize_5fdraw_2eproto();
  }
} static_descriptor_initializer_prize_5fdraw_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointExchangeRuleProto::kIdFieldNumber;
const int PointExchangeRuleProto::kPointCostFieldNumber;
const int PointExchangeRuleProto::kCountLimitFieldNumber;
const int PointExchangeRuleProto::kObtainGoodsFieldNumber;
#endif  // !_MSC_VER

PointExchangeRuleProto::PointExchangeRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointExchangeRuleProto::InitAsDefaultInstance() {
}

PointExchangeRuleProto::PointExchangeRuleProto(const PointExchangeRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointExchangeRuleProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  point_cost_ = 0;
  count_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointExchangeRuleProto::~PointExchangeRuleProto() {
  SharedDtor();
}

void PointExchangeRuleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointExchangeRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointExchangeRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointExchangeRuleProto_descriptor_;
}

const PointExchangeRuleProto& PointExchangeRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prize_5fdraw_2eproto();
  return *default_instance_;
}

PointExchangeRuleProto* PointExchangeRuleProto::default_instance_ = NULL;

PointExchangeRuleProto* PointExchangeRuleProto::New() const {
  return new PointExchangeRuleProto;
}

void PointExchangeRuleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    point_cost_ = 0;
    count_limit_ = 0;
  }
  obtain_goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointExchangeRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point_cost;
        break;
      }

      // optional int32 point_cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_cost_)));
          set_has_point_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_limit;
        break;
      }

      // optional int32 count_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_limit_)));
          set_has_count_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_obtain_goods;
        break;
      }

      // repeated .app.message.GoodsWrapperProto obtain_goods = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obtain_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obtain_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_obtain_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointExchangeRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 point_cost = 2;
  if (has_point_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point_cost(), output);
  }

  // optional int32 count_limit = 3;
  if (has_count_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count_limit(), output);
  }

  // repeated .app.message.GoodsWrapperProto obtain_goods = 4;
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->obtain_goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointExchangeRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 point_cost = 2;
  if (has_point_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point_cost(), target);
  }

  // optional int32 count_limit = 3;
  if (has_count_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count_limit(), target);
  }

  // repeated .app.message.GoodsWrapperProto obtain_goods = 4;
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->obtain_goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointExchangeRuleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 point_cost = 2;
    if (has_point_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point_cost());
    }

    // optional int32 count_limit = 3;
    if (has_count_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_limit());
    }

  }
  // repeated .app.message.GoodsWrapperProto obtain_goods = 4;
  total_size += 1 * this->obtain_goods_size();
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obtain_goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointExchangeRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointExchangeRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointExchangeRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointExchangeRuleProto::MergeFrom(const PointExchangeRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  obtain_goods_.MergeFrom(from.obtain_goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_point_cost()) {
      set_point_cost(from.point_cost());
    }
    if (from.has_count_limit()) {
      set_count_limit(from.count_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointExchangeRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointExchangeRuleProto::CopyFrom(const PointExchangeRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointExchangeRuleProto::IsInitialized() const {

  return true;
}

void PointExchangeRuleProto::Swap(PointExchangeRuleProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(point_cost_, other->point_cost_);
    std::swap(count_limit_, other->count_limit_);
    obtain_goods_.Swap(&other->obtain_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointExchangeRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointExchangeRuleProto_descriptor_;
  metadata.reflection = PointExchangeRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeDrawInfoProto::kIdFieldNumber;
const int PrizeDrawInfoProto::kTypeFieldNumber;
const int PrizeDrawInfoProto::kRateFieldNumber;
const int PrizeDrawInfoProto::kNameFieldNumber;
const int PrizeDrawInfoProto::kDescFieldNumber;
const int PrizeDrawInfoProto::kIconFieldNumber;
const int PrizeDrawInfoProto::kQualityFieldNumber;
#endif  // !_MSC_VER

PrizeDrawInfoProto::PrizeDrawInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeDrawInfoProto::InitAsDefaultInstance() {
}

PrizeDrawInfoProto::PrizeDrawInfoProto(const PrizeDrawInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeDrawInfoProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  rate_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeDrawInfoProto::~PrizeDrawInfoProto() {
  SharedDtor();
}

void PrizeDrawInfoProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void PrizeDrawInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeDrawInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeDrawInfoProto_descriptor_;
}

const PrizeDrawInfoProto& PrizeDrawInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prize_5fdraw_2eproto();
  return *default_instance_;
}

PrizeDrawInfoProto* PrizeDrawInfoProto::default_instance_ = NULL;

PrizeDrawInfoProto* PrizeDrawInfoProto::New() const {
  return new PrizeDrawInfoProto;
}

void PrizeDrawInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    rate_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeDrawInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional bytes desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_icon;
        break;
      }

      // optional string icon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeDrawInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional bytes desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->desc(), output);
  }

  // optional string icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->icon(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeDrawInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional bytes desc = 5;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->desc(), target);
  }

  // optional string icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeDrawInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional string icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeDrawInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeDrawInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeDrawInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeDrawInfoProto::MergeFrom(const PrizeDrawInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeDrawInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeDrawInfoProto::CopyFrom(const PrizeDrawInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeDrawInfoProto::IsInitialized() const {

  return true;
}

void PrizeDrawInfoProto::Swap(PrizeDrawInfoProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(rate_, other->rate_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(icon_, other->icon_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeDrawInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeDrawInfoProto_descriptor_;
  metadata.reflection = PrizeDrawInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeDrawConfig::kUpgradeDataFieldNumber;
const int PrizeDrawConfig::kPrizeDrawStorageCapcityFieldNumber;
const int PrizeDrawConfig::kLogMaxCountFieldNumber;
const int PrizeDrawConfig::kPrizeDrawInfosFieldNumber;
const int PrizeDrawConfig::kPointExchangeInfosFieldNumber;
const int PrizeDrawConfig::kStartTimeFieldNumber;
const int PrizeDrawConfig::kEndTimeFieldNumber;
#endif  // !_MSC_VER

PrizeDrawConfig::PrizeDrawConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeDrawConfig::InitAsDefaultInstance() {
  upgrade_data_ = const_cast< ::app::message::UpgradeProto*>(&::app::message::UpgradeProto::default_instance());
}

PrizeDrawConfig::PrizeDrawConfig(const PrizeDrawConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeDrawConfig::SharedCtor() {
  _cached_size_ = 0;
  upgrade_data_ = NULL;
  prize_draw_storage_capcity_ = 0;
  log_max_count_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeDrawConfig::~PrizeDrawConfig() {
  SharedDtor();
}

void PrizeDrawConfig::SharedDtor() {
  if (this != default_instance_) {
    delete upgrade_data_;
  }
}

void PrizeDrawConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeDrawConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeDrawConfig_descriptor_;
}

const PrizeDrawConfig& PrizeDrawConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prize_5fdraw_2eproto();
  return *default_instance_;
}

PrizeDrawConfig* PrizeDrawConfig::default_instance_ = NULL;

PrizeDrawConfig* PrizeDrawConfig::New() const {
  return new PrizeDrawConfig;
}

void PrizeDrawConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_upgrade_data()) {
      if (upgrade_data_ != NULL) upgrade_data_->::app::message::UpgradeProto::Clear();
    }
    prize_draw_storage_capcity_ = 0;
    log_max_count_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  prize_draw_infos_.Clear();
  point_exchange_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeDrawConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.UpgradeProto upgrade_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prize_draw_storage_capcity;
        break;
      }

      // optional int32 prize_draw_storage_capcity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_draw_storage_capcity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prize_draw_storage_capcity_)));
          set_has_prize_draw_storage_capcity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_log_max_count;
        break;
      }

      // optional int32 log_max_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_max_count_)));
          set_has_log_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize_draw_infos;
        break;
      }

      // repeated .app.message.PrizeDrawInfoProto prize_draw_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize_draw_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize_draw_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize_draw_infos;
        if (input->ExpectTag(42)) goto parse_point_exchange_infos;
        break;
      }

      // repeated .app.message.PointExchangeRuleProto point_exchange_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_exchange_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_exchange_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_point_exchange_infos;
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeDrawConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.UpgradeProto upgrade_data = 1;
  if (has_upgrade_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->upgrade_data(), output);
  }

  // optional int32 prize_draw_storage_capcity = 2;
  if (has_prize_draw_storage_capcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prize_draw_storage_capcity(), output);
  }

  // optional int32 log_max_count = 3;
  if (has_log_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->log_max_count(), output);
  }

  // repeated .app.message.PrizeDrawInfoProto prize_draw_infos = 4;
  for (int i = 0; i < this->prize_draw_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize_draw_infos(i), output);
  }

  // repeated .app.message.PointExchangeRuleProto point_exchange_infos = 5;
  for (int i = 0; i < this->point_exchange_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->point_exchange_infos(i), output);
  }

  // optional int64 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->start_time(), output);
  }

  // optional int64 end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeDrawConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.UpgradeProto upgrade_data = 1;
  if (has_upgrade_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->upgrade_data(), target);
  }

  // optional int32 prize_draw_storage_capcity = 2;
  if (has_prize_draw_storage_capcity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prize_draw_storage_capcity(), target);
  }

  // optional int32 log_max_count = 3;
  if (has_log_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->log_max_count(), target);
  }

  // repeated .app.message.PrizeDrawInfoProto prize_draw_infos = 4;
  for (int i = 0; i < this->prize_draw_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize_draw_infos(i), target);
  }

  // repeated .app.message.PointExchangeRuleProto point_exchange_infos = 5;
  for (int i = 0; i < this->point_exchange_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->point_exchange_infos(i), target);
  }

  // optional int64 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->start_time(), target);
  }

  // optional int64 end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeDrawConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.UpgradeProto upgrade_data = 1;
    if (has_upgrade_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgrade_data());
    }

    // optional int32 prize_draw_storage_capcity = 2;
    if (has_prize_draw_storage_capcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prize_draw_storage_capcity());
    }

    // optional int32 log_max_count = 3;
    if (has_log_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_max_count());
    }

    // optional int64 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  // repeated .app.message.PrizeDrawInfoProto prize_draw_infos = 4;
  total_size += 1 * this->prize_draw_infos_size();
  for (int i = 0; i < this->prize_draw_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize_draw_infos(i));
  }

  // repeated .app.message.PointExchangeRuleProto point_exchange_infos = 5;
  total_size += 1 * this->point_exchange_infos_size();
  for (int i = 0; i < this->point_exchange_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_exchange_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeDrawConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeDrawConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeDrawConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeDrawConfig::MergeFrom(const PrizeDrawConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_draw_infos_.MergeFrom(from.prize_draw_infos_);
  point_exchange_infos_.MergeFrom(from.point_exchange_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade_data()) {
      mutable_upgrade_data()->::app::message::UpgradeProto::MergeFrom(from.upgrade_data());
    }
    if (from.has_prize_draw_storage_capcity()) {
      set_prize_draw_storage_capcity(from.prize_draw_storage_capcity());
    }
    if (from.has_log_max_count()) {
      set_log_max_count(from.log_max_count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeDrawConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeDrawConfig::CopyFrom(const PrizeDrawConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeDrawConfig::IsInitialized() const {

  return true;
}

void PrizeDrawConfig::Swap(PrizeDrawConfig* other) {
  if (other != this) {
    std::swap(upgrade_data_, other->upgrade_data_);
    std::swap(prize_draw_storage_capcity_, other->prize_draw_storage_capcity_);
    std::swap(log_max_count_, other->log_max_count_);
    prize_draw_infos_.Swap(&other->prize_draw_infos_);
    point_exchange_infos_.Swap(&other->point_exchange_infos_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeDrawConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeDrawConfig_descriptor_;
  metadata.reflection = PrizeDrawConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
