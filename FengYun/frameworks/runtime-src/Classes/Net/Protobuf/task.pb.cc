// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* HeroTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskCompleteDialogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskCompleteDialogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChapterTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChanceTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChanceTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewYearDailyTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewYearDailyTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPlantTaskDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPlantTaskDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskTargetProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskTargetProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskRelatedFunction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientFunction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  HeroTaskProto_descriptor_ = file->message_type(0);
  static const int HeroTaskProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, doing_chapter_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, chance_task_swallowed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, chance_task_accepted_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, chance_task_auto_complete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, chance_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, doing_daily_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, doing_new_year_daily_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, is_finished_all_new_year_daily_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, task_goods_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, task_goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, doing_guild_task_),
  };
  HeroTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroTaskProto_descriptor_,
      HeroTaskProto::default_instance_,
      HeroTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroTaskProto));
  TaskDataProto_descriptor_ = file->message_type(1);
  static const int TaskDataProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, accept_dialog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, complete_dialog_),
  };
  TaskDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskDataProto_descriptor_,
      TaskDataProto::default_instance_,
      TaskDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskDataProto));
  TaskCompleteDialogProto_descriptor_ = file->message_type(2);
  static const int TaskCompleteDialogProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCompleteDialogProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCompleteDialogProto, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCompleteDialogProto, dialog_),
  };
  TaskCompleteDialogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskCompleteDialogProto_descriptor_,
      TaskCompleteDialogProto::default_instance_,
      TaskCompleteDialogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCompleteDialogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCompleteDialogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskCompleteDialogProto));
  TaskProto_descriptor_ = file->message_type(3);
  static const int TaskProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProto, progress_),
  };
  TaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskProto_descriptor_,
      TaskProto::default_instance_,
      TaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskProto));
  ChapterTaskProto_descriptor_ = file->message_type(4);
  static const int ChapterTaskProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterTaskProto, chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterTaskProto, completed_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterTaskProto, base_task_),
  };
  ChapterTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterTaskProto_descriptor_,
      ChapterTaskProto::default_instance_,
      ChapterTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterTaskProto));
  ChanceTaskProto_descriptor_ = file->message_type(5);
  static const int ChanceTaskProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanceTaskProto, base_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanceTaskProto, swallow_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanceTaskProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanceTaskProto, head_image_),
  };
  ChanceTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChanceTaskProto_descriptor_,
      ChanceTaskProto::default_instance_,
      ChanceTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanceTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanceTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChanceTaskProto));
  DailyTaskProto_descriptor_ = file->message_type(6);
  static const int DailyTaskProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskProto, base_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskProto, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskProto, diffi_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskProto, prize_star_),
  };
  DailyTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskProto_descriptor_,
      DailyTaskProto::default_instance_,
      DailyTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskProto));
  NewYearDailyTaskProto_descriptor_ = file->message_type(7);
  static const int NewYearDailyTaskProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearDailyTaskProto, base_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearDailyTaskProto, round_),
  };
  NewYearDailyTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewYearDailyTaskProto_descriptor_,
      NewYearDailyTaskProto::default_instance_,
      NewYearDailyTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearDailyTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearDailyTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewYearDailyTaskProto));
  GuildTaskProto_descriptor_ = file->message_type(8);
  static const int GuildTaskProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTaskProto, base_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTaskProto, round_),
  };
  GuildTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildTaskProto_descriptor_,
      GuildTaskProto::default_instance_,
      GuildTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildTaskProto));
  GuildPlantTaskDataProto_descriptor_ = file->message_type(9);
  static const int GuildPlantTaskDataProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, accept_npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, complete_npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, base_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, ripe_degree_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, times_limit_),
  };
  GuildPlantTaskDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPlantTaskDataProto_descriptor_,
      GuildPlantTaskDataProto::default_instance_,
      GuildPlantTaskDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlantTaskDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPlantTaskDataProto));
  TaskTargetProto_descriptor_ = file->message_type(10);
  static const int TaskTargetProto_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, npc_dialog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, kill_monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, kill_monster_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, drop_goods_monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, drop_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, drop_goods_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, drop_goods_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, collect_goods_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, collect_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, collect_goods_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, upgrade_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, upgrade_recommend_monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, depot_goods_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, depot_goods_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, dungeon_),
  };
  TaskTargetProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskTargetProto_descriptor_,
      TaskTargetProto::default_instance_,
      TaskTargetProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTargetProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskTargetProto));
  TaskRelatedFunction_descriptor_ = file->enum_type(0);
  CommonTaskType_descriptor_ = file->enum_type(1);
  ClientFunction_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroTaskProto_descriptor_, &HeroTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskDataProto_descriptor_, &TaskDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskCompleteDialogProto_descriptor_, &TaskCompleteDialogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskProto_descriptor_, &TaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterTaskProto_descriptor_, &ChapterTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChanceTaskProto_descriptor_, &ChanceTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskProto_descriptor_, &DailyTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewYearDailyTaskProto_descriptor_, &NewYearDailyTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildTaskProto_descriptor_, &GuildTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPlantTaskDataProto_descriptor_, &GuildPlantTaskDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskTargetProto_descriptor_, &TaskTargetProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete HeroTaskProto::default_instance_;
  delete HeroTaskProto_reflection_;
  delete TaskDataProto::default_instance_;
  delete TaskDataProto_reflection_;
  delete TaskCompleteDialogProto::default_instance_;
  delete TaskCompleteDialogProto_reflection_;
  delete TaskProto::default_instance_;
  delete TaskProto_reflection_;
  delete ChapterTaskProto::default_instance_;
  delete ChapterTaskProto_reflection_;
  delete ChanceTaskProto::default_instance_;
  delete ChanceTaskProto_reflection_;
  delete DailyTaskProto::default_instance_;
  delete DailyTaskProto_reflection_;
  delete NewYearDailyTaskProto::default_instance_;
  delete NewYearDailyTaskProto_reflection_;
  delete GuildTaskProto::default_instance_;
  delete GuildTaskProto_reflection_;
  delete GuildPlantTaskDataProto::default_instance_;
  delete GuildPlantTaskDataProto_reflection_;
  delete TaskTargetProto::default_instance_;
  delete TaskTargetProto_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_prize_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\013app.message\032\013prize.proto\"\204"
    "\004\n\rHeroTaskProto\0229\n\022doing_chapter_task\030\001"
    " \001(\0132\035.app.message.ChapterTaskProto\022#\n\033c"
    "hance_task_swallowed_count\030\013 \001(\005\022\"\n\032chan"
    "ce_task_accepted_count\030\014 \001(\005\022\'\n\037chance_t"
    "ask_auto_complete_count\030\r \003(\005\0221\n\013chance_"
    "task\030\016 \003(\0132\034.app.message.ChanceTaskProto"
    "\0225\n\020doing_daily_task\030\025 \001(\0132\033.app.message"
    ".DailyTaskProto\022E\n\031doing_new_year_daily_"
    "task\030\026 \001(\0132\".app.message.NewYearDailyTas"
    "kProto\022+\n#is_finished_all_new_year_daily"
    "_task\030\027 \001(\010\022\030\n\020task_goods_datas\030\037 \003(\014\022\027\n"
    "\017task_goods_list\030  \003(\014\0225\n\020doing_guild_ta"
    "sk\030) \001(\0132\033.app.message.GuildTaskProto\"\327\001"
    "\n\rTaskDataProto\022\014\n\004name\030\001 \001(\014\022\014\n\004desc\030\002 "
    "\001(\014\022,\n\006target\030\003 \003(\0132\034.app.message.TaskTa"
    "rgetProto\022&\n\005prize\030\004 \001(\0132\027.app.message.P"
    "rizeProto\022\025\n\raccept_dialog\030\005 \001(\014\022=\n\017comp"
    "lete_dialog\030\006 \001(\0132$.app.message.TaskComp"
    "leteDialogProto\"D\n\027TaskCompleteDialogPro"
    "to\022\014\n\004name\030\001 \001(\014\022\013\n\003res\030\002 \001(\t\022\016\n\006dialog\030"
    "\003 \001(\014\"S\n\tTaskProto\022\n\n\002id\030\001 \001(\005\022(\n\004data\030\002"
    " \001(\0132\032.app.message.TaskDataProto\022\020\n\010prog"
    "ress\030\003 \003(\005\"f\n\020ChapterTaskProto\022\017\n\007chapte"
    "r\030\001 \001(\005\022\026\n\016completed_task\030\002 \003(\014\022)\n\tbase_"
    "task\030\003 \001(\0132\026.app.message.TaskProto\"z\n\017Ch"
    "anceTaskProto\022)\n\tbase_task\030\001 \001(\0132\026.app.m"
    "essage.TaskProto\022\027\n\017swallow_percent\030\002 \001("
    "\005\022\017\n\007quality\030\003 \001(\005\022\022\n\nhead_image\030\004 \001(\t\"r"
    "\n\016DailyTaskProto\022)\n\tbase_task\030\001 \001(\0132\026.ap"
    "p.message.TaskProto\022\r\n\005round\030\002 \001(\005\022\022\n\ndi"
    "ffi_star\030\003 \001(\005\022\022\n\nprize_star\030\004 \001(\005\"Q\n\025Ne"
    "wYearDailyTaskProto\022)\n\tbase_task\030\001 \001(\0132\026"
    ".app.message.TaskProto\022\r\n\005round\030\002 \001(\005\"J\n"
    "\016GuildTaskProto\022)\n\tbase_task\030\001 \001(\0132\026.app"
    ".message.TaskProto\022\r\n\005round\030\002 \001(\005\"\310\001\n\027Gu"
    "ildPlantTaskDataProto\022\025\n\raccept_npc_id\030\001"
    " \001(\005\022\027\n\017complete_npc_id\030\002 \001(\005\022\017\n\007task_id"
    "\030\003 \001(\005\022-\n\tbase_task\030\004 \001(\0132\032.app.message."
    "TaskDataProto\022\031\n\021ripe_degree_prize\030\005 \001(\005"
    "\022\r\n\005phase\030\006 \003(\005\022\023\n\013times_limit\030\007 \003(\005\"\300\003\n"
    "\017TaskTargetProto\022\014\n\004type\030\001 \001(\005\022\016\n\006npc_id"
    "\030\002 \001(\005\022\022\n\nnpc_dialog\030\003 \001(\014\022\027\n\017kill_monst"
    "er_id\030\013 \001(\005\022\032\n\022kill_monster_count\030\014 \001(\005\022"
    "\035\n\025drop_goods_monster_id\030\025 \001(\005\022\030\n\020drop_g"
    "oods_count\030\026 \001(\005\022\033\n\017drop_goods_data\030\027 \001("
    "\014B\002\030\001\022\027\n\017drop_goods_name\030\030 \001(\014\022\032\n\022collec"
    "t_goods_type\030\037 \001(\005\022\033\n\023collect_goods_coun"
    "t\030  \001(\005\022\036\n\022collect_goods_data\030! \001(\014B\002\030\001\022"
    "\025\n\rupgrade_level\030) \001(\005\022!\n\031upgrade_recomm"
    "end_monster\030* \001(\005\022\030\n\020depot_goods_data\0303 "
    "\001(\014\022\031\n\021depot_goods_count\0304 \001(\005\022\017\n\007dungeo"
    "n\030= \001(\005*\217\014\n\023TaskRelatedFunction\022\016\n\nFUNC_"
    "SPELL\020\001\022\r\n\tFUNC_JUMP\020\002\022\017\n\013FUNC_FRIEND\020\003\022"
    "\023\n\017FUNC_DEPOT_SHOP\020\004\022\020\n\014FUNC_STORAGE\020\005\022\025"
    "\n\021FUNC_YUANBAO_SHOP\020\006\022\030\n\024FUNC_CHAPTER_DU"
    "NGEON\020\007\022\016\n\nFUNC_DAZUO\020\010\022\r\n\tFUNC_TEAM\020\t\022\017"
    "\n\013FUNC_DIVINE\020\n\022\025\n\021FUNC_MICRO_CLIENT\020\013\022\032"
    "\n\026FUNC_CHALLENGE_DUNGEON\020\014\022\022\n\016FUNC_BUY_M"
    "OUNT\020\r\022\017\n\013FUNC_RANKER\020\016\022\020\n\014FUNC_AUCTION\020"
    "\017\022\r\n\tFUNC_SIGN\020\020\022\025\n\021FUNC_ONLINE_PRIZE\020\021\022"
    "\016\n\nFUNC_GUILD\020\022\022\023\n\017FUNC_WORLD_BOSS\020\023\022\021\n\r"
    "FUNC_FIGHTING\020\024\022\025\n\021FUNC_CHAPTER_TASK\020\025\022\027"
    "\n\023FUNC_KONGCI_DUNGEON\020\026\022\025\n\021FUNC_SUPER_WE"
    "APON\020\027\022\024\n\020FUNC_SHIELD_HERO\020\030\022\032\n\026FUNC_EQU"
    "IPMENT_REFINED\020\031\022\035\n\031FUNC_EQUIPMENT_QUALI"
    "TY_UP\020\032\022\033\n\027FUNC_EQUIPMENT_LEVEL_UP\020\033\022\024\n\020"
    "FUNC_AUTO_COMBAT\020\034\022\014\n\010FUNC_BOW\020\035\022\014\n\010FUNC"
    "_GEM\020\036\022\020\n\014FUNC_PHOENIX\020\037\022\021\n\rFUNC_TIAN_JI"
    "E\020 \022\021\n\rFUNC_TIAN_ZUI\020!\022\025\n\021FUNC_SINGLE_FI"
    "GHT\020\"\022\020\n\014FUNC_MELTING\020#\022\021\n\rFUNC_SOU_SHEN"
    "\020$\022\026\n\022FUNC_GROUP_DUNGEON\020%\022\017\n\013FUNC_STRON"
    "G\020&\022\021\n\rFUNC_ACTIVITY\020\'\022\025\n\021FUNC_SERVER_AR"
    "ENA\020(\022\025\n\021FUNC_MAGIC_WEAPON\020)\022\022\n\016FUNC_SHO"
    "U_CANG\020*\022\022\n\016FUNC_SUPER_ARM\020+\022\026\n\022FUNC_MEL"
    "TING_GAOJI\020,\022\r\n\tFUNC_DOTA\020-\022\016\n\nFUNC_DEMO"
    "N\020.\022\016\n\nFUNC_CLOAK\020/\022\026\n\022FUNC_YITIANSHENJU"
    "E\0200\022\016\n\nFUNC_MOSHI\0201\022\021\n\rFUNC_HE_CHENG\0202\022\021"
    "\n\rFUNC_MARRIAGE\0203\022\030\n\024FUNC_QIAN_QIU_DA_JI"
    "E\0204\022\021\n\rFUNC_JING_JIE\0205\022\021\n\rFUNC_TIAN_MEN\020"
    "6\022\017\n\013FUNC_XIN_MO\0207\022\032\n\026FUNC_CHI_HUO_SHEN_"
    "GONG\0208\022\014\n\010FUNC_HTZ\0209\022\034\n\030FUNC_ARENA_FIGHT"
    "ING_TEAM\020:\022\031\n\025FUNC_SUPER_WEAPON_GEM\020;\022\020\n"
    "\014FUNC_MO_BING\020<\022\025\n\021FUNC_WASH_XUNZHAN\020=\022\022"
    "\n\016FUNC_LONG_XIAN\020>\022\023\n\017FUNC_ZHAN_CHANG\020\?\022"
    "\021\n\rFUNC_TIAN_XIE\020@\022\017\n\013FUNC_WU_DAO\020A\022\024\n\020F"
    "UNC_TONG_TIN_TA\020B\022\017\n\013FUNC_SHIELD\020C\022\033\n\027FU"
    "NC_TONG_TIAN_BAO_JIAN\020D\022\016\n\nFUNC_HAIDI\020E\022"
    "\020\n\014FUNC_LING_YU\020F\022\r\n\tFUNC_SHOP\020G\022\025\n\021FUNC"
    "_FENG_YUN_DAO\020H\022\026\n\022FUNC_BOW_TONG_LING\020J\022"
    "\026\n\022FUNC_INLAY_BAO_SHI\020K\022\020\n\014FUNC_MO_FANG\020"
    "L*\311\n\n\016CommonTaskType\022\027\n\023TASK_TYPE_KILL_B"
    "OSS\020\001\022\037\n\033TASK_TYPE_FINISH_GUILD_TASK\020\002\022\037"
    "\n\033TASK_TYPE_FINISH_DAILY_TASK\020\003\022 \n\034TASK_"
    "TYPE_FINISH_CHANCE_TASK\020\004\022\031\n\025TASK_TYPE_F"
    "INISH_BIAO\020\005\022\"\n\036TASK_TYPE_ENTER_COUPLE_D"
    "UNGEON\020\006\022#\n\037TASK_TYPE_UPGRADE_PASSIVE_SP"
    "ELL\020\007\022!\n\035TASK_TYPE_UPGRADE_GUILD_SPELL\020\010"
    "\022\035\n\031TASK_TYPE_FINISH_SOU_SHEN\020\t\022\"\n\036TASK_"
    "TYPE_FINISH_STORY_DUNGEON\020\n\022&\n\"TASK_TYPE"
    "_FINISH_CHALLENGE_DUNGEON\020\013\022!\n\035TASK_TYPE"
    "_FINISH_TONG_TIAN_TA\020\014\022\033\n\027TASK_TYPE_FINI"
    "SH_XIN_MO\020\r\022\033\n\027TASK_TYPE_RECHARGE_ONCE\020\016"
    "\022\027\n\023TASK_TYPE_TIAN_MING\020\017\022\034\n\030TASK_TYPE_S"
    "HEN_BING_WASH\020\020\022\034\n\030TASK_TYPE_PHOENIX_REF"
    "INE\020\021\022\023\n\017TASK_TYPE_MOUNT\020\022\022\026\n\022TASK_TYPE_"
    "TIAN_JIE\020\023\022\026\n\022TASK_TYPE_TIAN_ZUI\020\024\022\026\n\022TA"
    "SK_TYPE_ZHAN_JIA\020\025\022\027\n\023TASK_TYPE_SUPER_AR"
    "M\020\026\022\023\n\017TASK_TYPE_DEMON\020\027\022\023\n\017TASK_TYPE_CL"
    "OAK\020\030\022\025\n\021TASK_TYPE_MOSHI_0\020\031\022\025\n\021TASK_TYP"
    "E_MOSHI_1\020\032\022\025\n\021TASK_TYPE_MOSHI_2\020\033\022\025\n\021TA"
    "SK_TYPE_MOSHI_3\020\034\022\037\n\033TASK_TYPE_QIAN_QIU_"
    "DA_JIE_0\020\035\022\037\n\033TASK_TYPE_QIAN_QIU_DA_JIE_"
    "1\020\036\022\037\n\033TASK_TYPE_CHI_HUO_SHEN_GONG\020\037\022\026\n\022"
    "TASK_TYPE_TIAN_XIE\020 \022\024\n\020TASK_TYPE_WU_DAO"
    "\020!\022\026\n\022TASK_TYPE_SHIELD_1\020\"\022\026\n\022TASK_TYPE_"
    "SHIELD_2\020#\022\026\n\022TASK_TYPE_SHIELD_3\020$\022\026\n\022TA"
    "SK_TYPE_SHIELD_4\020%\022\026\n\022TASK_TYPE_SHIELD_5"
    "\020&\022\026\n\022TASK_TYPE_SHIELD_6\020\'\022\026\n\022TASK_TYPE_"
    "SHIELD_7\020(\022\026\n\022TASK_TYPE_SHIELD_8\020)\022\026\n\022TA"
    "SK_TYPE_SHIELD_9\020*\022\027\n\023TASK_TYPE_SHIELD_1"
    "0\020+\022\030\n\024TASK_TYPE_HERO_LEVEL\020,\022\027\n\023TASK_TY"
    "PE_SHEN_BING\020-\022\025\n\021TASK_TYPE_MO_BING\020.\022!\n"
    "\035TASK_TYPE_TOTAL_MOSHI_JIE_SHU\020/\022+\n\'TASK"
    "_TYPE_TOTAL_QIAN_QIU_DA_JIE_JIE_SHU\0200*!\n"
    "\016ClientFunction\022\017\n\013FUNC_UNKOWN\020\001B\035\n\014app."
    "protobufB\013TaskContentH\001", 5063);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  HeroTaskProto::default_instance_ = new HeroTaskProto();
  TaskDataProto::default_instance_ = new TaskDataProto();
  TaskCompleteDialogProto::default_instance_ = new TaskCompleteDialogProto();
  TaskProto::default_instance_ = new TaskProto();
  ChapterTaskProto::default_instance_ = new ChapterTaskProto();
  ChanceTaskProto::default_instance_ = new ChanceTaskProto();
  DailyTaskProto::default_instance_ = new DailyTaskProto();
  NewYearDailyTaskProto::default_instance_ = new NewYearDailyTaskProto();
  GuildTaskProto::default_instance_ = new GuildTaskProto();
  GuildPlantTaskDataProto::default_instance_ = new GuildPlantTaskDataProto();
  TaskTargetProto::default_instance_ = new TaskTargetProto();
  HeroTaskProto::default_instance_->InitAsDefaultInstance();
  TaskDataProto::default_instance_->InitAsDefaultInstance();
  TaskCompleteDialogProto::default_instance_->InitAsDefaultInstance();
  TaskProto::default_instance_->InitAsDefaultInstance();
  ChapterTaskProto::default_instance_->InitAsDefaultInstance();
  ChanceTaskProto::default_instance_->InitAsDefaultInstance();
  DailyTaskProto::default_instance_->InitAsDefaultInstance();
  NewYearDailyTaskProto::default_instance_->InitAsDefaultInstance();
  GuildTaskProto::default_instance_->InitAsDefaultInstance();
  GuildPlantTaskDataProto::default_instance_->InitAsDefaultInstance();
  TaskTargetProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;
const ::google::protobuf::EnumDescriptor* TaskRelatedFunction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskRelatedFunction_descriptor_;
}
bool TaskRelatedFunction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 74:
    case 75:
    case 76:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommonTaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTaskType_descriptor_;
}
bool CommonTaskType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientFunction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFunction_descriptor_;
}
bool ClientFunction_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HeroTaskProto::kDoingChapterTaskFieldNumber;
const int HeroTaskProto::kChanceTaskSwallowedCountFieldNumber;
const int HeroTaskProto::kChanceTaskAcceptedCountFieldNumber;
const int HeroTaskProto::kChanceTaskAutoCompleteCountFieldNumber;
const int HeroTaskProto::kChanceTaskFieldNumber;
const int HeroTaskProto::kDoingDailyTaskFieldNumber;
const int HeroTaskProto::kDoingNewYearDailyTaskFieldNumber;
const int HeroTaskProto::kIsFinishedAllNewYearDailyTaskFieldNumber;
const int HeroTaskProto::kTaskGoodsDatasFieldNumber;
const int HeroTaskProto::kTaskGoodsListFieldNumber;
const int HeroTaskProto::kDoingGuildTaskFieldNumber;
#endif  // !_MSC_VER

HeroTaskProto::HeroTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroTaskProto::InitAsDefaultInstance() {
  doing_chapter_task_ = const_cast< ::app::message::ChapterTaskProto*>(&::app::message::ChapterTaskProto::default_instance());
  doing_daily_task_ = const_cast< ::app::message::DailyTaskProto*>(&::app::message::DailyTaskProto::default_instance());
  doing_new_year_daily_task_ = const_cast< ::app::message::NewYearDailyTaskProto*>(&::app::message::NewYearDailyTaskProto::default_instance());
  doing_guild_task_ = const_cast< ::app::message::GuildTaskProto*>(&::app::message::GuildTaskProto::default_instance());
}

HeroTaskProto::HeroTaskProto(const HeroTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroTaskProto::SharedCtor() {
  _cached_size_ = 0;
  doing_chapter_task_ = NULL;
  chance_task_swallowed_count_ = 0;
  chance_task_accepted_count_ = 0;
  doing_daily_task_ = NULL;
  doing_new_year_daily_task_ = NULL;
  is_finished_all_new_year_daily_task_ = false;
  doing_guild_task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroTaskProto::~HeroTaskProto() {
  SharedDtor();
}

void HeroTaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete doing_chapter_task_;
    delete doing_daily_task_;
    delete doing_new_year_daily_task_;
    delete doing_guild_task_;
  }
}

void HeroTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroTaskProto_descriptor_;
}

const HeroTaskProto& HeroTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

HeroTaskProto* HeroTaskProto::default_instance_ = NULL;

HeroTaskProto* HeroTaskProto::New() const {
  return new HeroTaskProto;
}

void HeroTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_doing_chapter_task()) {
      if (doing_chapter_task_ != NULL) doing_chapter_task_->::app::message::ChapterTaskProto::Clear();
    }
    chance_task_swallowed_count_ = 0;
    chance_task_accepted_count_ = 0;
    if (has_doing_daily_task()) {
      if (doing_daily_task_ != NULL) doing_daily_task_->::app::message::DailyTaskProto::Clear();
    }
    if (has_doing_new_year_daily_task()) {
      if (doing_new_year_daily_task_ != NULL) doing_new_year_daily_task_->::app::message::NewYearDailyTaskProto::Clear();
    }
    is_finished_all_new_year_daily_task_ = false;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_doing_guild_task()) {
      if (doing_guild_task_ != NULL) doing_guild_task_->::app::message::GuildTaskProto::Clear();
    }
  }
  chance_task_auto_complete_count_.Clear();
  chance_task_.Clear();
  task_goods_datas_.Clear();
  task_goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.ChapterTaskProto doing_chapter_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doing_chapter_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_chance_task_swallowed_count;
        break;
      }

      // optional int32 chance_task_swallowed_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance_task_swallowed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance_task_swallowed_count_)));
          set_has_chance_task_swallowed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_chance_task_accepted_count;
        break;
      }

      // optional int32 chance_task_accepted_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance_task_accepted_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance_task_accepted_count_)));
          set_has_chance_task_accepted_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_chance_task_auto_complete_count;
        break;
      }

      // repeated int32 chance_task_auto_complete_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance_task_auto_complete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_chance_task_auto_complete_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chance_task_auto_complete_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_chance_task_auto_complete_count;
        if (input->ExpectTag(114)) goto parse_chance_task;
        break;
      }

      // repeated .app.message.ChanceTaskProto chance_task = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chance_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chance_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_chance_task;
        if (input->ExpectTag(170)) goto parse_doing_daily_task;
        break;
      }

      // optional .app.message.DailyTaskProto doing_daily_task = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doing_daily_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doing_daily_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_doing_new_year_daily_task;
        break;
      }

      // optional .app.message.NewYearDailyTaskProto doing_new_year_daily_task = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doing_new_year_daily_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doing_new_year_daily_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_is_finished_all_new_year_daily_task;
        break;
      }

      // optional bool is_finished_all_new_year_daily_task = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished_all_new_year_daily_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_all_new_year_daily_task_)));
          set_has_is_finished_all_new_year_daily_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_task_goods_datas;
        break;
      }

      // repeated bytes task_goods_datas = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_goods_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_task_goods_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_task_goods_datas;
        if (input->ExpectTag(258)) goto parse_task_goods_list;
        break;
      }

      // repeated bytes task_goods_list = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_task_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_task_goods_list;
        if (input->ExpectTag(330)) goto parse_doing_guild_task;
        break;
      }

      // optional .app.message.GuildTaskProto doing_guild_task = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doing_guild_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doing_guild_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.ChapterTaskProto doing_chapter_task = 1;
  if (has_doing_chapter_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doing_chapter_task(), output);
  }

  // optional int32 chance_task_swallowed_count = 11;
  if (has_chance_task_swallowed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->chance_task_swallowed_count(), output);
  }

  // optional int32 chance_task_accepted_count = 12;
  if (has_chance_task_accepted_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->chance_task_accepted_count(), output);
  }

  // repeated int32 chance_task_auto_complete_count = 13;
  for (int i = 0; i < this->chance_task_auto_complete_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->chance_task_auto_complete_count(i), output);
  }

  // repeated .app.message.ChanceTaskProto chance_task = 14;
  for (int i = 0; i < this->chance_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->chance_task(i), output);
  }

  // optional .app.message.DailyTaskProto doing_daily_task = 21;
  if (has_doing_daily_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->doing_daily_task(), output);
  }

  // optional .app.message.NewYearDailyTaskProto doing_new_year_daily_task = 22;
  if (has_doing_new_year_daily_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->doing_new_year_daily_task(), output);
  }

  // optional bool is_finished_all_new_year_daily_task = 23;
  if (has_is_finished_all_new_year_daily_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_finished_all_new_year_daily_task(), output);
  }

  // repeated bytes task_goods_datas = 31;
  for (int i = 0; i < this->task_goods_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      31, this->task_goods_datas(i), output);
  }

  // repeated bytes task_goods_list = 32;
  for (int i = 0; i < this->task_goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      32, this->task_goods_list(i), output);
  }

  // optional .app.message.GuildTaskProto doing_guild_task = 41;
  if (has_doing_guild_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->doing_guild_task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.ChapterTaskProto doing_chapter_task = 1;
  if (has_doing_chapter_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->doing_chapter_task(), target);
  }

  // optional int32 chance_task_swallowed_count = 11;
  if (has_chance_task_swallowed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->chance_task_swallowed_count(), target);
  }

  // optional int32 chance_task_accepted_count = 12;
  if (has_chance_task_accepted_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->chance_task_accepted_count(), target);
  }

  // repeated int32 chance_task_auto_complete_count = 13;
  for (int i = 0; i < this->chance_task_auto_complete_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->chance_task_auto_complete_count(i), target);
  }

  // repeated .app.message.ChanceTaskProto chance_task = 14;
  for (int i = 0; i < this->chance_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->chance_task(i), target);
  }

  // optional .app.message.DailyTaskProto doing_daily_task = 21;
  if (has_doing_daily_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->doing_daily_task(), target);
  }

  // optional .app.message.NewYearDailyTaskProto doing_new_year_daily_task = 22;
  if (has_doing_new_year_daily_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->doing_new_year_daily_task(), target);
  }

  // optional bool is_finished_all_new_year_daily_task = 23;
  if (has_is_finished_all_new_year_daily_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_finished_all_new_year_daily_task(), target);
  }

  // repeated bytes task_goods_datas = 31;
  for (int i = 0; i < this->task_goods_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(31, this->task_goods_datas(i), target);
  }

  // repeated bytes task_goods_list = 32;
  for (int i = 0; i < this->task_goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(32, this->task_goods_list(i), target);
  }

  // optional .app.message.GuildTaskProto doing_guild_task = 41;
  if (has_doing_guild_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->doing_guild_task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.ChapterTaskProto doing_chapter_task = 1;
    if (has_doing_chapter_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doing_chapter_task());
    }

    // optional int32 chance_task_swallowed_count = 11;
    if (has_chance_task_swallowed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance_task_swallowed_count());
    }

    // optional int32 chance_task_accepted_count = 12;
    if (has_chance_task_accepted_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance_task_accepted_count());
    }

    // optional .app.message.DailyTaskProto doing_daily_task = 21;
    if (has_doing_daily_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doing_daily_task());
    }

    // optional .app.message.NewYearDailyTaskProto doing_new_year_daily_task = 22;
    if (has_doing_new_year_daily_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doing_new_year_daily_task());
    }

    // optional bool is_finished_all_new_year_daily_task = 23;
    if (has_is_finished_all_new_year_daily_task()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .app.message.GuildTaskProto doing_guild_task = 41;
    if (has_doing_guild_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doing_guild_task());
    }

  }
  // repeated int32 chance_task_auto_complete_count = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->chance_task_auto_complete_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chance_task_auto_complete_count(i));
    }
    total_size += 1 * this->chance_task_auto_complete_count_size() + data_size;
  }

  // repeated .app.message.ChanceTaskProto chance_task = 14;
  total_size += 1 * this->chance_task_size();
  for (int i = 0; i < this->chance_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chance_task(i));
  }

  // repeated bytes task_goods_datas = 31;
  total_size += 2 * this->task_goods_datas_size();
  for (int i = 0; i < this->task_goods_datas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->task_goods_datas(i));
  }

  // repeated bytes task_goods_list = 32;
  total_size += 2 * this->task_goods_list_size();
  for (int i = 0; i < this->task_goods_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->task_goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroTaskProto::MergeFrom(const HeroTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  chance_task_auto_complete_count_.MergeFrom(from.chance_task_auto_complete_count_);
  chance_task_.MergeFrom(from.chance_task_);
  task_goods_datas_.MergeFrom(from.task_goods_datas_);
  task_goods_list_.MergeFrom(from.task_goods_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doing_chapter_task()) {
      mutable_doing_chapter_task()->::app::message::ChapterTaskProto::MergeFrom(from.doing_chapter_task());
    }
    if (from.has_chance_task_swallowed_count()) {
      set_chance_task_swallowed_count(from.chance_task_swallowed_count());
    }
    if (from.has_chance_task_accepted_count()) {
      set_chance_task_accepted_count(from.chance_task_accepted_count());
    }
    if (from.has_doing_daily_task()) {
      mutable_doing_daily_task()->::app::message::DailyTaskProto::MergeFrom(from.doing_daily_task());
    }
    if (from.has_doing_new_year_daily_task()) {
      mutable_doing_new_year_daily_task()->::app::message::NewYearDailyTaskProto::MergeFrom(from.doing_new_year_daily_task());
    }
    if (from.has_is_finished_all_new_year_daily_task()) {
      set_is_finished_all_new_year_daily_task(from.is_finished_all_new_year_daily_task());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_doing_guild_task()) {
      mutable_doing_guild_task()->::app::message::GuildTaskProto::MergeFrom(from.doing_guild_task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroTaskProto::CopyFrom(const HeroTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroTaskProto::IsInitialized() const {

  return true;
}

void HeroTaskProto::Swap(HeroTaskProto* other) {
  if (other != this) {
    std::swap(doing_chapter_task_, other->doing_chapter_task_);
    std::swap(chance_task_swallowed_count_, other->chance_task_swallowed_count_);
    std::swap(chance_task_accepted_count_, other->chance_task_accepted_count_);
    chance_task_auto_complete_count_.Swap(&other->chance_task_auto_complete_count_);
    chance_task_.Swap(&other->chance_task_);
    std::swap(doing_daily_task_, other->doing_daily_task_);
    std::swap(doing_new_year_daily_task_, other->doing_new_year_daily_task_);
    std::swap(is_finished_all_new_year_daily_task_, other->is_finished_all_new_year_daily_task_);
    task_goods_datas_.Swap(&other->task_goods_datas_);
    task_goods_list_.Swap(&other->task_goods_list_);
    std::swap(doing_guild_task_, other->doing_guild_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroTaskProto_descriptor_;
  metadata.reflection = HeroTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskDataProto::kNameFieldNumber;
const int TaskDataProto::kDescFieldNumber;
const int TaskDataProto::kTargetFieldNumber;
const int TaskDataProto::kPrizeFieldNumber;
const int TaskDataProto::kAcceptDialogFieldNumber;
const int TaskDataProto::kCompleteDialogFieldNumber;
#endif  // !_MSC_VER

TaskDataProto::TaskDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskDataProto::InitAsDefaultInstance() {
  prize_ = const_cast< ::app::message::PrizeProto*>(&::app::message::PrizeProto::default_instance());
  complete_dialog_ = const_cast< ::app::message::TaskCompleteDialogProto*>(&::app::message::TaskCompleteDialogProto::default_instance());
}

TaskDataProto::TaskDataProto(const TaskDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskDataProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prize_ = NULL;
  accept_dialog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  complete_dialog_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskDataProto::~TaskDataProto() {
  SharedDtor();
}

void TaskDataProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (accept_dialog_ != &::google::protobuf::internal::kEmptyString) {
    delete accept_dialog_;
  }
  if (this != default_instance_) {
    delete prize_;
    delete complete_dialog_;
  }
}

void TaskDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskDataProto_descriptor_;
}

const TaskDataProto& TaskDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskDataProto* TaskDataProto::default_instance_ = NULL;

TaskDataProto* TaskDataProto::New() const {
  return new TaskDataProto;
}

void TaskDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_prize()) {
      if (prize_ != NULL) prize_->::app::message::PrizeProto::Clear();
    }
    if (has_accept_dialog()) {
      if (accept_dialog_ != &::google::protobuf::internal::kEmptyString) {
        accept_dialog_->clear();
      }
    }
    if (has_complete_dialog()) {
      if (complete_dialog_ != NULL) complete_dialog_->::app::message::TaskCompleteDialogProto::Clear();
    }
  }
  target_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // repeated .app.message.TaskTargetProto target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        if (input->ExpectTag(34)) goto parse_prize;
        break;
      }

      // optional .app.message.PrizeProto prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_accept_dialog;
        break;
      }

      // optional bytes accept_dialog = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accept_dialog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accept_dialog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_complete_dialog;
        break;
      }

      // optional .app.message.TaskCompleteDialogProto complete_dialog = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_complete_dialog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_complete_dialog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional bytes desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->desc(), output);
  }

  // repeated .app.message.TaskTargetProto target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(i), output);
  }

  // optional .app.message.PrizeProto prize = 4;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize(), output);
  }

  // optional bytes accept_dialog = 5;
  if (has_accept_dialog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->accept_dialog(), output);
  }

  // optional .app.message.TaskCompleteDialogProto complete_dialog = 6;
  if (has_complete_dialog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->complete_dialog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes desc = 2;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // repeated .app.message.TaskTargetProto target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(i), target);
  }

  // optional .app.message.PrizeProto prize = 4;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize(), target);
  }

  // optional bytes accept_dialog = 5;
  if (has_accept_dialog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->accept_dialog(), target);
  }

  // optional .app.message.TaskCompleteDialogProto complete_dialog = 6;
  if (has_complete_dialog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->complete_dialog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional .app.message.PrizeProto prize = 4;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }

    // optional bytes accept_dialog = 5;
    if (has_accept_dialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accept_dialog());
    }

    // optional .app.message.TaskCompleteDialogProto complete_dialog = 6;
    if (has_complete_dialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->complete_dialog());
    }

  }
  // repeated .app.message.TaskTargetProto target = 3;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskDataProto::MergeFrom(const TaskDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_.MergeFrom(from.target_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_prize()) {
      mutable_prize()->::app::message::PrizeProto::MergeFrom(from.prize());
    }
    if (from.has_accept_dialog()) {
      set_accept_dialog(from.accept_dialog());
    }
    if (from.has_complete_dialog()) {
      mutable_complete_dialog()->::app::message::TaskCompleteDialogProto::MergeFrom(from.complete_dialog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDataProto::CopyFrom(const TaskDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDataProto::IsInitialized() const {

  return true;
}

void TaskDataProto::Swap(TaskDataProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    target_.Swap(&other->target_);
    std::swap(prize_, other->prize_);
    std::swap(accept_dialog_, other->accept_dialog_);
    std::swap(complete_dialog_, other->complete_dialog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskDataProto_descriptor_;
  metadata.reflection = TaskDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskCompleteDialogProto::kNameFieldNumber;
const int TaskCompleteDialogProto::kResFieldNumber;
const int TaskCompleteDialogProto::kDialogFieldNumber;
#endif  // !_MSC_VER

TaskCompleteDialogProto::TaskCompleteDialogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskCompleteDialogProto::InitAsDefaultInstance() {
}

TaskCompleteDialogProto::TaskCompleteDialogProto(const TaskCompleteDialogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskCompleteDialogProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dialog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCompleteDialogProto::~TaskCompleteDialogProto() {
  SharedDtor();
}

void TaskCompleteDialogProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (dialog_ != &::google::protobuf::internal::kEmptyString) {
    delete dialog_;
  }
  if (this != default_instance_) {
  }
}

void TaskCompleteDialogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskCompleteDialogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskCompleteDialogProto_descriptor_;
}

const TaskCompleteDialogProto& TaskCompleteDialogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskCompleteDialogProto* TaskCompleteDialogProto::default_instance_ = NULL;

TaskCompleteDialogProto* TaskCompleteDialogProto::New() const {
  return new TaskCompleteDialogProto;
}

void TaskCompleteDialogProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::kEmptyString) {
        res_->clear();
      }
    }
    if (has_dialog()) {
      if (dialog_ != &::google::protobuf::internal::kEmptyString) {
        dialog_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskCompleteDialogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // optional string res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res().data(), this->res().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dialog;
        break;
      }

      // optional bytes dialog = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dialog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dialog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskCompleteDialogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->res(), output);
  }

  // optional bytes dialog = 3;
  if (has_dialog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dialog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskCompleteDialogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->res(), target);
  }

  // optional bytes dialog = 3;
  if (has_dialog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->dialog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskCompleteDialogProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional string res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

    // optional bytes dialog = 3;
    if (has_dialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dialog());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCompleteDialogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskCompleteDialogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskCompleteDialogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskCompleteDialogProto::MergeFrom(const TaskCompleteDialogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_dialog()) {
      set_dialog(from.dialog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskCompleteDialogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCompleteDialogProto::CopyFrom(const TaskCompleteDialogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCompleteDialogProto::IsInitialized() const {

  return true;
}

void TaskCompleteDialogProto::Swap(TaskCompleteDialogProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(res_, other->res_);
    std::swap(dialog_, other->dialog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskCompleteDialogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskCompleteDialogProto_descriptor_;
  metadata.reflection = TaskCompleteDialogProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskProto::kIdFieldNumber;
const int TaskProto::kDataFieldNumber;
const int TaskProto::kProgressFieldNumber;
#endif  // !_MSC_VER

TaskProto::TaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskProto::InitAsDefaultInstance() {
  data_ = const_cast< ::app::message::TaskDataProto*>(&::app::message::TaskDataProto::default_instance());
}

TaskProto::TaskProto(const TaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskProto::~TaskProto() {
  SharedDtor();
}

void TaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void TaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskProto_descriptor_;
}

const TaskProto& TaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskProto* TaskProto::default_instance_ = NULL;

TaskProto* TaskProto::New() const {
  return new TaskProto;
}

void TaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::app::message::TaskDataProto::Clear();
    }
  }
  progress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .app.message.TaskDataProto data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // repeated int32 progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_progress())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_progress())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .app.message.TaskDataProto data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // repeated int32 progress = 3;
  for (int i = 0; i < this->progress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->progress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .app.message.TaskDataProto data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // repeated int32 progress = 3;
  for (int i = 0; i < this->progress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->progress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .app.message.TaskDataProto data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated int32 progress = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->progress_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->progress(i));
    }
    total_size += 1 * this->progress_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskProto::MergeFrom(const TaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  progress_.MergeFrom(from.progress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      mutable_data()->::app::message::TaskDataProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskProto::CopyFrom(const TaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskProto::IsInitialized() const {

  return true;
}

void TaskProto::Swap(TaskProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    progress_.Swap(&other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskProto_descriptor_;
  metadata.reflection = TaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChapterTaskProto::kChapterFieldNumber;
const int ChapterTaskProto::kCompletedTaskFieldNumber;
const int ChapterTaskProto::kBaseTaskFieldNumber;
#endif  // !_MSC_VER

ChapterTaskProto::ChapterTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChapterTaskProto::InitAsDefaultInstance() {
  base_task_ = const_cast< ::app::message::TaskProto*>(&::app::message::TaskProto::default_instance());
}

ChapterTaskProto::ChapterTaskProto(const ChapterTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChapterTaskProto::SharedCtor() {
  _cached_size_ = 0;
  chapter_ = 0;
  base_task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterTaskProto::~ChapterTaskProto() {
  SharedDtor();
}

void ChapterTaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_task_;
  }
}

void ChapterTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterTaskProto_descriptor_;
}

const ChapterTaskProto& ChapterTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ChapterTaskProto* ChapterTaskProto::default_instance_ = NULL;

ChapterTaskProto* ChapterTaskProto::New() const {
  return new ChapterTaskProto;
}

void ChapterTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_ = 0;
    if (has_base_task()) {
      if (base_task_ != NULL) base_task_->::app::message::TaskProto::Clear();
    }
  }
  completed_task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_completed_task;
        break;
      }

      // repeated bytes completed_task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completed_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_completed_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_completed_task;
        if (input->ExpectTag(26)) goto parse_base_task;
        break;
      }

      // optional .app.message.TaskProto base_task = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChapterTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter = 1;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter(), output);
  }

  // repeated bytes completed_task = 2;
  for (int i = 0; i < this->completed_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->completed_task(i), output);
  }

  // optional .app.message.TaskProto base_task = 3;
  if (has_base_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChapterTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter = 1;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter(), target);
  }

  // repeated bytes completed_task = 2;
  for (int i = 0; i < this->completed_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->completed_task(i), target);
  }

  // optional .app.message.TaskProto base_task = 3;
  if (has_base_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChapterTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter = 1;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter());
    }

    // optional .app.message.TaskProto base_task = 3;
    if (has_base_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_task());
    }

  }
  // repeated bytes completed_task = 2;
  total_size += 1 * this->completed_task_size();
  for (int i = 0; i < this->completed_task_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->completed_task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterTaskProto::MergeFrom(const ChapterTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  completed_task_.MergeFrom(from.completed_task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
    if (from.has_base_task()) {
      mutable_base_task()->::app::message::TaskProto::MergeFrom(from.base_task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterTaskProto::CopyFrom(const ChapterTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterTaskProto::IsInitialized() const {

  return true;
}

void ChapterTaskProto::Swap(ChapterTaskProto* other) {
  if (other != this) {
    std::swap(chapter_, other->chapter_);
    completed_task_.Swap(&other->completed_task_);
    std::swap(base_task_, other->base_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterTaskProto_descriptor_;
  metadata.reflection = ChapterTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChanceTaskProto::kBaseTaskFieldNumber;
const int ChanceTaskProto::kSwallowPercentFieldNumber;
const int ChanceTaskProto::kQualityFieldNumber;
const int ChanceTaskProto::kHeadImageFieldNumber;
#endif  // !_MSC_VER

ChanceTaskProto::ChanceTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChanceTaskProto::InitAsDefaultInstance() {
  base_task_ = const_cast< ::app::message::TaskProto*>(&::app::message::TaskProto::default_instance());
}

ChanceTaskProto::ChanceTaskProto(const ChanceTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChanceTaskProto::SharedCtor() {
  _cached_size_ = 0;
  base_task_ = NULL;
  swallow_percent_ = 0;
  quality_ = 0;
  head_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChanceTaskProto::~ChanceTaskProto() {
  SharedDtor();
}

void ChanceTaskProto::SharedDtor() {
  if (head_image_ != &::google::protobuf::internal::kEmptyString) {
    delete head_image_;
  }
  if (this != default_instance_) {
    delete base_task_;
  }
}

void ChanceTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChanceTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChanceTaskProto_descriptor_;
}

const ChanceTaskProto& ChanceTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ChanceTaskProto* ChanceTaskProto::default_instance_ = NULL;

ChanceTaskProto* ChanceTaskProto::New() const {
  return new ChanceTaskProto;
}

void ChanceTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_task()) {
      if (base_task_ != NULL) base_task_->::app::message::TaskProto::Clear();
    }
    swallow_percent_ = 0;
    quality_ = 0;
    if (has_head_image()) {
      if (head_image_ != &::google::protobuf::internal::kEmptyString) {
        head_image_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChanceTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.TaskProto base_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_swallow_percent;
        break;
      }

      // optional int32 swallow_percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swallow_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &swallow_percent_)));
          set_has_swallow_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head_image;
        break;
      }

      // optional string head_image = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_image().data(), this->head_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChanceTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_task(), output);
  }

  // optional int32 swallow_percent = 2;
  if (has_swallow_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->swallow_percent(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional string head_image = 4;
  if (has_head_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_image().data(), this->head_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head_image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChanceTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_task(), target);
  }

  // optional int32 swallow_percent = 2;
  if (has_swallow_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->swallow_percent(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional string head_image = 4;
  if (has_head_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_image().data(), this->head_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head_image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChanceTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.TaskProto base_task = 1;
    if (has_base_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_task());
    }

    // optional int32 swallow_percent = 2;
    if (has_swallow_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swallow_percent());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional string head_image = 4;
    if (has_head_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChanceTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChanceTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChanceTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChanceTaskProto::MergeFrom(const ChanceTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_task()) {
      mutable_base_task()->::app::message::TaskProto::MergeFrom(from.base_task());
    }
    if (from.has_swallow_percent()) {
      set_swallow_percent(from.swallow_percent());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_head_image()) {
      set_head_image(from.head_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChanceTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanceTaskProto::CopyFrom(const ChanceTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanceTaskProto::IsInitialized() const {

  return true;
}

void ChanceTaskProto::Swap(ChanceTaskProto* other) {
  if (other != this) {
    std::swap(base_task_, other->base_task_);
    std::swap(swallow_percent_, other->swallow_percent_);
    std::swap(quality_, other->quality_);
    std::swap(head_image_, other->head_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChanceTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChanceTaskProto_descriptor_;
  metadata.reflection = ChanceTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskProto::kBaseTaskFieldNumber;
const int DailyTaskProto::kRoundFieldNumber;
const int DailyTaskProto::kDiffiStarFieldNumber;
const int DailyTaskProto::kPrizeStarFieldNumber;
#endif  // !_MSC_VER

DailyTaskProto::DailyTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskProto::InitAsDefaultInstance() {
  base_task_ = const_cast< ::app::message::TaskProto*>(&::app::message::TaskProto::default_instance());
}

DailyTaskProto::DailyTaskProto(const DailyTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskProto::SharedCtor() {
  _cached_size_ = 0;
  base_task_ = NULL;
  round_ = 0;
  diffi_star_ = 0;
  prize_star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskProto::~DailyTaskProto() {
  SharedDtor();
}

void DailyTaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_task_;
  }
}

void DailyTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskProto_descriptor_;
}

const DailyTaskProto& DailyTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

DailyTaskProto* DailyTaskProto::default_instance_ = NULL;

DailyTaskProto* DailyTaskProto::New() const {
  return new DailyTaskProto;
}

void DailyTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_task()) {
      if (base_task_ != NULL) base_task_->::app::message::TaskProto::Clear();
    }
    round_ = 0;
    diffi_star_ = 0;
    prize_star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.TaskProto base_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_round;
        break;
      }

      // optional int32 round = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diffi_star;
        break;
      }

      // optional int32 diffi_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diffi_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diffi_star_)));
          set_has_diffi_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prize_star;
        break;
      }

      // optional int32 prize_star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prize_star_)));
          set_has_prize_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_task(), output);
  }

  // optional int32 round = 2;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round(), output);
  }

  // optional int32 diffi_star = 3;
  if (has_diffi_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->diffi_star(), output);
  }

  // optional int32 prize_star = 4;
  if (has_prize_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prize_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_task(), target);
  }

  // optional int32 round = 2;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->round(), target);
  }

  // optional int32 diffi_star = 3;
  if (has_diffi_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->diffi_star(), target);
  }

  // optional int32 prize_star = 4;
  if (has_prize_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prize_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.TaskProto base_task = 1;
    if (has_base_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_task());
    }

    // optional int32 round = 2;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 diffi_star = 3;
    if (has_diffi_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diffi_star());
    }

    // optional int32 prize_star = 4;
    if (has_prize_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prize_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskProto::MergeFrom(const DailyTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_task()) {
      mutable_base_task()->::app::message::TaskProto::MergeFrom(from.base_task());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_diffi_star()) {
      set_diffi_star(from.diffi_star());
    }
    if (from.has_prize_star()) {
      set_prize_star(from.prize_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskProto::CopyFrom(const DailyTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskProto::IsInitialized() const {

  return true;
}

void DailyTaskProto::Swap(DailyTaskProto* other) {
  if (other != this) {
    std::swap(base_task_, other->base_task_);
    std::swap(round_, other->round_);
    std::swap(diffi_star_, other->diffi_star_);
    std::swap(prize_star_, other->prize_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskProto_descriptor_;
  metadata.reflection = DailyTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewYearDailyTaskProto::kBaseTaskFieldNumber;
const int NewYearDailyTaskProto::kRoundFieldNumber;
#endif  // !_MSC_VER

NewYearDailyTaskProto::NewYearDailyTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewYearDailyTaskProto::InitAsDefaultInstance() {
  base_task_ = const_cast< ::app::message::TaskProto*>(&::app::message::TaskProto::default_instance());
}

NewYearDailyTaskProto::NewYearDailyTaskProto(const NewYearDailyTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewYearDailyTaskProto::SharedCtor() {
  _cached_size_ = 0;
  base_task_ = NULL;
  round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewYearDailyTaskProto::~NewYearDailyTaskProto() {
  SharedDtor();
}

void NewYearDailyTaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_task_;
  }
}

void NewYearDailyTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewYearDailyTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewYearDailyTaskProto_descriptor_;
}

const NewYearDailyTaskProto& NewYearDailyTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

NewYearDailyTaskProto* NewYearDailyTaskProto::default_instance_ = NULL;

NewYearDailyTaskProto* NewYearDailyTaskProto::New() const {
  return new NewYearDailyTaskProto;
}

void NewYearDailyTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_task()) {
      if (base_task_ != NULL) base_task_->::app::message::TaskProto::Clear();
    }
    round_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewYearDailyTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.TaskProto base_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_round;
        break;
      }

      // optional int32 round = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewYearDailyTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_task(), output);
  }

  // optional int32 round = 2;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewYearDailyTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_task(), target);
  }

  // optional int32 round = 2;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewYearDailyTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.TaskProto base_task = 1;
    if (has_base_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_task());
    }

    // optional int32 round = 2;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewYearDailyTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewYearDailyTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewYearDailyTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewYearDailyTaskProto::MergeFrom(const NewYearDailyTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_task()) {
      mutable_base_task()->::app::message::TaskProto::MergeFrom(from.base_task());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewYearDailyTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearDailyTaskProto::CopyFrom(const NewYearDailyTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearDailyTaskProto::IsInitialized() const {

  return true;
}

void NewYearDailyTaskProto::Swap(NewYearDailyTaskProto* other) {
  if (other != this) {
    std::swap(base_task_, other->base_task_);
    std::swap(round_, other->round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewYearDailyTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewYearDailyTaskProto_descriptor_;
  metadata.reflection = NewYearDailyTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildTaskProto::kBaseTaskFieldNumber;
const int GuildTaskProto::kRoundFieldNumber;
#endif  // !_MSC_VER

GuildTaskProto::GuildTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildTaskProto::InitAsDefaultInstance() {
  base_task_ = const_cast< ::app::message::TaskProto*>(&::app::message::TaskProto::default_instance());
}

GuildTaskProto::GuildTaskProto(const GuildTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildTaskProto::SharedCtor() {
  _cached_size_ = 0;
  base_task_ = NULL;
  round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildTaskProto::~GuildTaskProto() {
  SharedDtor();
}

void GuildTaskProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_task_;
  }
}

void GuildTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTaskProto_descriptor_;
}

const GuildTaskProto& GuildTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

GuildTaskProto* GuildTaskProto::default_instance_ = NULL;

GuildTaskProto* GuildTaskProto::New() const {
  return new GuildTaskProto;
}

void GuildTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_task()) {
      if (base_task_ != NULL) base_task_->::app::message::TaskProto::Clear();
    }
    round_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.TaskProto base_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_round;
        break;
      }

      // optional int32 round = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_task(), output);
  }

  // optional int32 round = 2;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.TaskProto base_task = 1;
  if (has_base_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_task(), target);
  }

  // optional int32 round = 2;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.TaskProto base_task = 1;
    if (has_base_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_task());
    }

    // optional int32 round = 2;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildTaskProto::MergeFrom(const GuildTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_task()) {
      mutable_base_task()->::app::message::TaskProto::MergeFrom(from.base_task());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTaskProto::CopyFrom(const GuildTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTaskProto::IsInitialized() const {

  return true;
}

void GuildTaskProto::Swap(GuildTaskProto* other) {
  if (other != this) {
    std::swap(base_task_, other->base_task_);
    std::swap(round_, other->round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildTaskProto_descriptor_;
  metadata.reflection = GuildTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPlantTaskDataProto::kAcceptNpcIdFieldNumber;
const int GuildPlantTaskDataProto::kCompleteNpcIdFieldNumber;
const int GuildPlantTaskDataProto::kTaskIdFieldNumber;
const int GuildPlantTaskDataProto::kBaseTaskFieldNumber;
const int GuildPlantTaskDataProto::kRipeDegreePrizeFieldNumber;
const int GuildPlantTaskDataProto::kPhaseFieldNumber;
const int GuildPlantTaskDataProto::kTimesLimitFieldNumber;
#endif  // !_MSC_VER

GuildPlantTaskDataProto::GuildPlantTaskDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPlantTaskDataProto::InitAsDefaultInstance() {
  base_task_ = const_cast< ::app::message::TaskDataProto*>(&::app::message::TaskDataProto::default_instance());
}

GuildPlantTaskDataProto::GuildPlantTaskDataProto(const GuildPlantTaskDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPlantTaskDataProto::SharedCtor() {
  _cached_size_ = 0;
  accept_npc_id_ = 0;
  complete_npc_id_ = 0;
  task_id_ = 0;
  base_task_ = NULL;
  ripe_degree_prize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPlantTaskDataProto::~GuildPlantTaskDataProto() {
  SharedDtor();
}

void GuildPlantTaskDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_task_;
  }
}

void GuildPlantTaskDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPlantTaskDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPlantTaskDataProto_descriptor_;
}

const GuildPlantTaskDataProto& GuildPlantTaskDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

GuildPlantTaskDataProto* GuildPlantTaskDataProto::default_instance_ = NULL;

GuildPlantTaskDataProto* GuildPlantTaskDataProto::New() const {
  return new GuildPlantTaskDataProto;
}

void GuildPlantTaskDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accept_npc_id_ = 0;
    complete_npc_id_ = 0;
    task_id_ = 0;
    if (has_base_task()) {
      if (base_task_ != NULL) base_task_->::app::message::TaskDataProto::Clear();
    }
    ripe_degree_prize_ = 0;
  }
  phase_.Clear();
  times_limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPlantTaskDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 accept_npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_npc_id_)));
          set_has_accept_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_complete_npc_id;
        break;
      }

      // optional int32 complete_npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complete_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &complete_npc_id_)));
          set_has_complete_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // optional int32 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base_task;
        break;
      }

      // optional .app.message.TaskDataProto base_task = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ripe_degree_prize;
        break;
      }

      // optional int32 ripe_degree_prize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ripe_degree_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ripe_degree_prize_)));
          set_has_ripe_degree_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_phase;
        break;
      }

      // repeated int32 phase = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_phase())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_phase())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_phase;
        if (input->ExpectTag(56)) goto parse_times_limit;
        break;
      }

      // repeated int32 times_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_times_limit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_times_limit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times_limit;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildPlantTaskDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 accept_npc_id = 1;
  if (has_accept_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->accept_npc_id(), output);
  }

  // optional int32 complete_npc_id = 2;
  if (has_complete_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->complete_npc_id(), output);
  }

  // optional int32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_id(), output);
  }

  // optional .app.message.TaskDataProto base_task = 4;
  if (has_base_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base_task(), output);
  }

  // optional int32 ripe_degree_prize = 5;
  if (has_ripe_degree_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ripe_degree_prize(), output);
  }

  // repeated int32 phase = 6;
  for (int i = 0; i < this->phase_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->phase(i), output);
  }

  // repeated int32 times_limit = 7;
  for (int i = 0; i < this->times_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->times_limit(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPlantTaskDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 accept_npc_id = 1;
  if (has_accept_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->accept_npc_id(), target);
  }

  // optional int32 complete_npc_id = 2;
  if (has_complete_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->complete_npc_id(), target);
  }

  // optional int32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_id(), target);
  }

  // optional .app.message.TaskDataProto base_task = 4;
  if (has_base_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base_task(), target);
  }

  // optional int32 ripe_degree_prize = 5;
  if (has_ripe_degree_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ripe_degree_prize(), target);
  }

  // repeated int32 phase = 6;
  for (int i = 0; i < this->phase_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->phase(i), target);
  }

  // repeated int32 times_limit = 7;
  for (int i = 0; i < this->times_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->times_limit(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPlantTaskDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 accept_npc_id = 1;
    if (has_accept_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept_npc_id());
    }

    // optional int32 complete_npc_id = 2;
    if (has_complete_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->complete_npc_id());
    }

    // optional int32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional .app.message.TaskDataProto base_task = 4;
    if (has_base_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_task());
    }

    // optional int32 ripe_degree_prize = 5;
    if (has_ripe_degree_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ripe_degree_prize());
    }

  }
  // repeated int32 phase = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->phase_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->phase(i));
    }
    total_size += 1 * this->phase_size() + data_size;
  }

  // repeated int32 times_limit = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->times_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->times_limit(i));
    }
    total_size += 1 * this->times_limit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPlantTaskDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPlantTaskDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPlantTaskDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPlantTaskDataProto::MergeFrom(const GuildPlantTaskDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  phase_.MergeFrom(from.phase_);
  times_limit_.MergeFrom(from.times_limit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accept_npc_id()) {
      set_accept_npc_id(from.accept_npc_id());
    }
    if (from.has_complete_npc_id()) {
      set_complete_npc_id(from.complete_npc_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_base_task()) {
      mutable_base_task()->::app::message::TaskDataProto::MergeFrom(from.base_task());
    }
    if (from.has_ripe_degree_prize()) {
      set_ripe_degree_prize(from.ripe_degree_prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPlantTaskDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPlantTaskDataProto::CopyFrom(const GuildPlantTaskDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPlantTaskDataProto::IsInitialized() const {

  return true;
}

void GuildPlantTaskDataProto::Swap(GuildPlantTaskDataProto* other) {
  if (other != this) {
    std::swap(accept_npc_id_, other->accept_npc_id_);
    std::swap(complete_npc_id_, other->complete_npc_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(base_task_, other->base_task_);
    std::swap(ripe_degree_prize_, other->ripe_degree_prize_);
    phase_.Swap(&other->phase_);
    times_limit_.Swap(&other->times_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPlantTaskDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPlantTaskDataProto_descriptor_;
  metadata.reflection = GuildPlantTaskDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskTargetProto::kTypeFieldNumber;
const int TaskTargetProto::kNpcIdFieldNumber;
const int TaskTargetProto::kNpcDialogFieldNumber;
const int TaskTargetProto::kKillMonsterIdFieldNumber;
const int TaskTargetProto::kKillMonsterCountFieldNumber;
const int TaskTargetProto::kDropGoodsMonsterIdFieldNumber;
const int TaskTargetProto::kDropGoodsCountFieldNumber;
const int TaskTargetProto::kDropGoodsDataFieldNumber;
const int TaskTargetProto::kDropGoodsNameFieldNumber;
const int TaskTargetProto::kCollectGoodsTypeFieldNumber;
const int TaskTargetProto::kCollectGoodsCountFieldNumber;
const int TaskTargetProto::kCollectGoodsDataFieldNumber;
const int TaskTargetProto::kUpgradeLevelFieldNumber;
const int TaskTargetProto::kUpgradeRecommendMonsterFieldNumber;
const int TaskTargetProto::kDepotGoodsDataFieldNumber;
const int TaskTargetProto::kDepotGoodsCountFieldNumber;
const int TaskTargetProto::kDungeonFieldNumber;
#endif  // !_MSC_VER

TaskTargetProto::TaskTargetProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskTargetProto::InitAsDefaultInstance() {
}

TaskTargetProto::TaskTargetProto(const TaskTargetProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskTargetProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  npc_id_ = 0;
  npc_dialog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kill_monster_id_ = 0;
  kill_monster_count_ = 0;
  drop_goods_monster_id_ = 0;
  drop_goods_count_ = 0;
  drop_goods_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  drop_goods_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collect_goods_type_ = 0;
  collect_goods_count_ = 0;
  collect_goods_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upgrade_level_ = 0;
  upgrade_recommend_monster_ = 0;
  depot_goods_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  depot_goods_count_ = 0;
  dungeon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskTargetProto::~TaskTargetProto() {
  SharedDtor();
}

void TaskTargetProto::SharedDtor() {
  if (npc_dialog_ != &::google::protobuf::internal::kEmptyString) {
    delete npc_dialog_;
  }
  if (drop_goods_data_ != &::google::protobuf::internal::kEmptyString) {
    delete drop_goods_data_;
  }
  if (drop_goods_name_ != &::google::protobuf::internal::kEmptyString) {
    delete drop_goods_name_;
  }
  if (collect_goods_data_ != &::google::protobuf::internal::kEmptyString) {
    delete collect_goods_data_;
  }
  if (depot_goods_data_ != &::google::protobuf::internal::kEmptyString) {
    delete depot_goods_data_;
  }
  if (this != default_instance_) {
  }
}

void TaskTargetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskTargetProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskTargetProto_descriptor_;
}

const TaskTargetProto& TaskTargetProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskTargetProto* TaskTargetProto::default_instance_ = NULL;

TaskTargetProto* TaskTargetProto::New() const {
  return new TaskTargetProto;
}

void TaskTargetProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    npc_id_ = 0;
    if (has_npc_dialog()) {
      if (npc_dialog_ != &::google::protobuf::internal::kEmptyString) {
        npc_dialog_->clear();
      }
    }
    kill_monster_id_ = 0;
    kill_monster_count_ = 0;
    drop_goods_monster_id_ = 0;
    drop_goods_count_ = 0;
    if (has_drop_goods_data()) {
      if (drop_goods_data_ != &::google::protobuf::internal::kEmptyString) {
        drop_goods_data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_drop_goods_name()) {
      if (drop_goods_name_ != &::google::protobuf::internal::kEmptyString) {
        drop_goods_name_->clear();
      }
    }
    collect_goods_type_ = 0;
    collect_goods_count_ = 0;
    if (has_collect_goods_data()) {
      if (collect_goods_data_ != &::google::protobuf::internal::kEmptyString) {
        collect_goods_data_->clear();
      }
    }
    upgrade_level_ = 0;
    upgrade_recommend_monster_ = 0;
    if (has_depot_goods_data()) {
      if (depot_goods_data_ != &::google::protobuf::internal::kEmptyString) {
        depot_goods_data_->clear();
      }
    }
    depot_goods_count_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dungeon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskTargetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_id;
        break;
      }

      // optional int32 npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc_dialog;
        break;
      }

      // optional bytes npc_dialog = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_dialog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_npc_dialog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kill_monster_id;
        break;
      }

      // optional int32 kill_monster_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_monster_id_)));
          set_has_kill_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_kill_monster_count;
        break;
      }

      // optional int32 kill_monster_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_monster_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_monster_count_)));
          set_has_kill_monster_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_drop_goods_monster_id;
        break;
      }

      // optional int32 drop_goods_monster_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_goods_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_goods_monster_id_)));
          set_has_drop_goods_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_drop_goods_count;
        break;
      }

      // optional int32 drop_goods_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_goods_count_)));
          set_has_drop_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_drop_goods_data;
        break;
      }

      // optional bytes drop_goods_data = 23 [deprecated = true];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_goods_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_drop_goods_name;
        break;
      }

      // optional bytes drop_goods_name = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_goods_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_goods_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_collect_goods_type;
        break;
      }

      // optional int32 collect_goods_type = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_goods_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_goods_type_)));
          set_has_collect_goods_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_collect_goods_count;
        break;
      }

      // optional int32 collect_goods_count = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_goods_count_)));
          set_has_collect_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_collect_goods_data;
        break;
      }

      // optional bytes collect_goods_data = 33 [deprecated = true];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collect_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collect_goods_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_upgrade_level;
        break;
      }

      // optional int32 upgrade_level = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_level_)));
          set_has_upgrade_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_upgrade_recommend_monster;
        break;
      }

      // optional int32 upgrade_recommend_monster = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_recommend_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_recommend_monster_)));
          set_has_upgrade_recommend_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_depot_goods_data;
        break;
      }

      // optional bytes depot_goods_data = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depot_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_depot_goods_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_depot_goods_count;
        break;
      }

      // optional int32 depot_goods_count = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depot_goods_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depot_goods_count_)));
          set_has_depot_goods_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_dungeon;
        break;
      }

      // optional int32 dungeon = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_)));
          set_has_dungeon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskTargetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 npc_id = 2;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npc_id(), output);
  }

  // optional bytes npc_dialog = 3;
  if (has_npc_dialog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->npc_dialog(), output);
  }

  // optional int32 kill_monster_id = 11;
  if (has_kill_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->kill_monster_id(), output);
  }

  // optional int32 kill_monster_count = 12;
  if (has_kill_monster_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->kill_monster_count(), output);
  }

  // optional int32 drop_goods_monster_id = 21;
  if (has_drop_goods_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->drop_goods_monster_id(), output);
  }

  // optional int32 drop_goods_count = 22;
  if (has_drop_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->drop_goods_count(), output);
  }

  // optional bytes drop_goods_data = 23 [deprecated = true];
  if (has_drop_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->drop_goods_data(), output);
  }

  // optional bytes drop_goods_name = 24;
  if (has_drop_goods_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->drop_goods_name(), output);
  }

  // optional int32 collect_goods_type = 31;
  if (has_collect_goods_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->collect_goods_type(), output);
  }

  // optional int32 collect_goods_count = 32;
  if (has_collect_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->collect_goods_count(), output);
  }

  // optional bytes collect_goods_data = 33 [deprecated = true];
  if (has_collect_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      33, this->collect_goods_data(), output);
  }

  // optional int32 upgrade_level = 41;
  if (has_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->upgrade_level(), output);
  }

  // optional int32 upgrade_recommend_monster = 42;
  if (has_upgrade_recommend_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->upgrade_recommend_monster(), output);
  }

  // optional bytes depot_goods_data = 51;
  if (has_depot_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      51, this->depot_goods_data(), output);
  }

  // optional int32 depot_goods_count = 52;
  if (has_depot_goods_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->depot_goods_count(), output);
  }

  // optional int32 dungeon = 61;
  if (has_dungeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->dungeon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskTargetProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 npc_id = 2;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npc_id(), target);
  }

  // optional bytes npc_dialog = 3;
  if (has_npc_dialog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->npc_dialog(), target);
  }

  // optional int32 kill_monster_id = 11;
  if (has_kill_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->kill_monster_id(), target);
  }

  // optional int32 kill_monster_count = 12;
  if (has_kill_monster_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->kill_monster_count(), target);
  }

  // optional int32 drop_goods_monster_id = 21;
  if (has_drop_goods_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->drop_goods_monster_id(), target);
  }

  // optional int32 drop_goods_count = 22;
  if (has_drop_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->drop_goods_count(), target);
  }

  // optional bytes drop_goods_data = 23 [deprecated = true];
  if (has_drop_goods_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->drop_goods_data(), target);
  }

  // optional bytes drop_goods_name = 24;
  if (has_drop_goods_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->drop_goods_name(), target);
  }

  // optional int32 collect_goods_type = 31;
  if (has_collect_goods_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->collect_goods_type(), target);
  }

  // optional int32 collect_goods_count = 32;
  if (has_collect_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->collect_goods_count(), target);
  }

  // optional bytes collect_goods_data = 33 [deprecated = true];
  if (has_collect_goods_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->collect_goods_data(), target);
  }

  // optional int32 upgrade_level = 41;
  if (has_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->upgrade_level(), target);
  }

  // optional int32 upgrade_recommend_monster = 42;
  if (has_upgrade_recommend_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->upgrade_recommend_monster(), target);
  }

  // optional bytes depot_goods_data = 51;
  if (has_depot_goods_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        51, this->depot_goods_data(), target);
  }

  // optional int32 depot_goods_count = 52;
  if (has_depot_goods_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->depot_goods_count(), target);
  }

  // optional int32 dungeon = 61;
  if (has_dungeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->dungeon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskTargetProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 npc_id = 2;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }

    // optional bytes npc_dialog = 3;
    if (has_npc_dialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->npc_dialog());
    }

    // optional int32 kill_monster_id = 11;
    if (has_kill_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_monster_id());
    }

    // optional int32 kill_monster_count = 12;
    if (has_kill_monster_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_monster_count());
    }

    // optional int32 drop_goods_monster_id = 21;
    if (has_drop_goods_monster_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_goods_monster_id());
    }

    // optional int32 drop_goods_count = 22;
    if (has_drop_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_goods_count());
    }

    // optional bytes drop_goods_data = 23 [deprecated = true];
    if (has_drop_goods_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->drop_goods_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes drop_goods_name = 24;
    if (has_drop_goods_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->drop_goods_name());
    }

    // optional int32 collect_goods_type = 31;
    if (has_collect_goods_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_goods_type());
    }

    // optional int32 collect_goods_count = 32;
    if (has_collect_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_goods_count());
    }

    // optional bytes collect_goods_data = 33 [deprecated = true];
    if (has_collect_goods_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->collect_goods_data());
    }

    // optional int32 upgrade_level = 41;
    if (has_upgrade_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_level());
    }

    // optional int32 upgrade_recommend_monster = 42;
    if (has_upgrade_recommend_monster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_recommend_monster());
    }

    // optional bytes depot_goods_data = 51;
    if (has_depot_goods_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->depot_goods_data());
    }

    // optional int32 depot_goods_count = 52;
    if (has_depot_goods_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depot_goods_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 dungeon = 61;
    if (has_dungeon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskTargetProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskTargetProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskTargetProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskTargetProto::MergeFrom(const TaskTargetProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_npc_dialog()) {
      set_npc_dialog(from.npc_dialog());
    }
    if (from.has_kill_monster_id()) {
      set_kill_monster_id(from.kill_monster_id());
    }
    if (from.has_kill_monster_count()) {
      set_kill_monster_count(from.kill_monster_count());
    }
    if (from.has_drop_goods_monster_id()) {
      set_drop_goods_monster_id(from.drop_goods_monster_id());
    }
    if (from.has_drop_goods_count()) {
      set_drop_goods_count(from.drop_goods_count());
    }
    if (from.has_drop_goods_data()) {
      set_drop_goods_data(from.drop_goods_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_drop_goods_name()) {
      set_drop_goods_name(from.drop_goods_name());
    }
    if (from.has_collect_goods_type()) {
      set_collect_goods_type(from.collect_goods_type());
    }
    if (from.has_collect_goods_count()) {
      set_collect_goods_count(from.collect_goods_count());
    }
    if (from.has_collect_goods_data()) {
      set_collect_goods_data(from.collect_goods_data());
    }
    if (from.has_upgrade_level()) {
      set_upgrade_level(from.upgrade_level());
    }
    if (from.has_upgrade_recommend_monster()) {
      set_upgrade_recommend_monster(from.upgrade_recommend_monster());
    }
    if (from.has_depot_goods_data()) {
      set_depot_goods_data(from.depot_goods_data());
    }
    if (from.has_depot_goods_count()) {
      set_depot_goods_count(from.depot_goods_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dungeon()) {
      set_dungeon(from.dungeon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskTargetProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskTargetProto::CopyFrom(const TaskTargetProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskTargetProto::IsInitialized() const {

  return true;
}

void TaskTargetProto::Swap(TaskTargetProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(npc_dialog_, other->npc_dialog_);
    std::swap(kill_monster_id_, other->kill_monster_id_);
    std::swap(kill_monster_count_, other->kill_monster_count_);
    std::swap(drop_goods_monster_id_, other->drop_goods_monster_id_);
    std::swap(drop_goods_count_, other->drop_goods_count_);
    std::swap(drop_goods_data_, other->drop_goods_data_);
    std::swap(drop_goods_name_, other->drop_goods_name_);
    std::swap(collect_goods_type_, other->collect_goods_type_);
    std::swap(collect_goods_count_, other->collect_goods_count_);
    std::swap(collect_goods_data_, other->collect_goods_data_);
    std::swap(upgrade_level_, other->upgrade_level_);
    std::swap(upgrade_recommend_monster_, other->upgrade_recommend_monster_);
    std::swap(depot_goods_data_, other->depot_goods_data_);
    std::swap(depot_goods_count_, other->depot_goods_count_);
    std::swap(dungeon_, other->dungeon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskTargetProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskTargetProto_descriptor_;
  metadata.reflection = TaskTargetProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
