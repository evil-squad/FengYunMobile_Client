// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daily_auction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "daily_auction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DailyAuctionConfigProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyAuctionConfigProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleDailyAuctionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleDailyAuctionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalAuctionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalAuctionData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_daily_5fauction_2eproto() {
  protobuf_AddDesc_daily_5fauction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "daily_auction.proto");
  GOOGLE_CHECK(file != NULL);
  DailyAuctionConfigProto_descriptor_ = file->message_type(0);
  static const int DailyAuctionConfigProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyAuctionConfigProto, config_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyAuctionConfigProto, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyAuctionConfigProto, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyAuctionConfigProto, auction_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyAuctionConfigProto, yuanbao_price_),
  };
  DailyAuctionConfigProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyAuctionConfigProto_descriptor_,
      DailyAuctionConfigProto::default_instance_,
      DailyAuctionConfigProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyAuctionConfigProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyAuctionConfigProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyAuctionConfigProto));
  SingleDailyAuctionConfig_descriptor_ = file->message_type(1);
  static const int SingleDailyAuctionConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDailyAuctionConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDailyAuctionConfig, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDailyAuctionConfig, minyuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDailyAuctionConfig, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDailyAuctionConfig, min_auction_goods_),
  };
  SingleDailyAuctionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleDailyAuctionConfig_descriptor_,
      SingleDailyAuctionConfig::default_instance_,
      SingleDailyAuctionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDailyAuctionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDailyAuctionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleDailyAuctionConfig));
  GlobalAuctionData_descriptor_ = file->message_type(2);
  static const int GlobalAuctionData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAuctionData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAuctionData, herod_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAuctionData, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAuctionData, current_max_yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAuctionData, current_max_price_),
  };
  GlobalAuctionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalAuctionData_descriptor_,
      GlobalAuctionData::default_instance_,
      GlobalAuctionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAuctionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAuctionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalAuctionData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_daily_5fauction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyAuctionConfigProto_descriptor_, &DailyAuctionConfigProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleDailyAuctionConfig_descriptor_, &SingleDailyAuctionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalAuctionData_descriptor_, &GlobalAuctionData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_daily_5fauction_2eproto() {
  delete DailyAuctionConfigProto::default_instance_;
  delete DailyAuctionConfigProto_reflection_;
  delete SingleDailyAuctionConfig::default_instance_;
  delete SingleDailyAuctionConfig_reflection_;
  delete GlobalAuctionData::default_instance_;
  delete GlobalAuctionData_reflection_;
}

void protobuf_AddDesc_daily_5fauction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023daily_auction.proto\022\013app.message\032\013good"
    "s.proto\"\251\001\n\027DailyAuctionConfigProto\022:\n\013c"
    "onfig_list\030\001 \003(\0132%.app.message.SingleDai"
    "lyAuctionConfig\022\022\n\nstart_time\030\002 \001(\003\022\020\n\010e"
    "nd_time\030\003 \001(\003\022\025\n\rauction_goods\030\004 \001(\014\022\025\n\r"
    "yuanbao_price\030\005 \001(\005\"\226\001\n\030SingleDailyAucti"
    "onConfig\022\n\n\002id\030\001 \001(\005\022\014\n\004desc\030\002 \001(\014\022\026\n\nmi"
    "nYuanbao\030\003 \001(\005B\002\030\001\022-\n\005prize\030\004 \001(\0132\036.app."
    "message.GoodsWrapperProto\022\031\n\021min_auction"
    "_goods\030\005 \001(\005\"\200\001\n\021GlobalAuctionData\022\n\n\002id"
    "\030\001 \003(\005\022\020\n\010herod_id\030\002 \003(\003\022\021\n\thero_name\030\003 "
    "\003(\014\022\037\n\023current_max_yuanbao\030\004 \003(\005B\002\030\001\022\031\n\021"
    "current_max_price\030\005 \003(\005B%\n\014app.protobufB"
    "\023DailyAuctionContentH\001", 542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "daily_auction.proto", &protobuf_RegisterTypes);
  DailyAuctionConfigProto::default_instance_ = new DailyAuctionConfigProto();
  SingleDailyAuctionConfig::default_instance_ = new SingleDailyAuctionConfig();
  GlobalAuctionData::default_instance_ = new GlobalAuctionData();
  DailyAuctionConfigProto::default_instance_->InitAsDefaultInstance();
  SingleDailyAuctionConfig::default_instance_->InitAsDefaultInstance();
  GlobalAuctionData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_daily_5fauction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_daily_5fauction_2eproto {
  StaticDescriptorInitializer_daily_5fauction_2eproto() {
    protobuf_AddDesc_daily_5fauction_2eproto();
  }
} static_descriptor_initializer_daily_5fauction_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DailyAuctionConfigProto::kConfigListFieldNumber;
const int DailyAuctionConfigProto::kStartTimeFieldNumber;
const int DailyAuctionConfigProto::kEndTimeFieldNumber;
const int DailyAuctionConfigProto::kAuctionGoodsFieldNumber;
const int DailyAuctionConfigProto::kYuanbaoPriceFieldNumber;
#endif  // !_MSC_VER

DailyAuctionConfigProto::DailyAuctionConfigProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyAuctionConfigProto::InitAsDefaultInstance() {
}

DailyAuctionConfigProto::DailyAuctionConfigProto(const DailyAuctionConfigProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyAuctionConfigProto::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  auction_goods_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yuanbao_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyAuctionConfigProto::~DailyAuctionConfigProto() {
  SharedDtor();
}

void DailyAuctionConfigProto::SharedDtor() {
  if (auction_goods_ != &::google::protobuf::internal::kEmptyString) {
    delete auction_goods_;
  }
  if (this != default_instance_) {
  }
}

void DailyAuctionConfigProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyAuctionConfigProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyAuctionConfigProto_descriptor_;
}

const DailyAuctionConfigProto& DailyAuctionConfigProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_5fauction_2eproto();
  return *default_instance_;
}

DailyAuctionConfigProto* DailyAuctionConfigProto::default_instance_ = NULL;

DailyAuctionConfigProto* DailyAuctionConfigProto::New() const {
  return new DailyAuctionConfigProto;
}

void DailyAuctionConfigProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    if (has_auction_goods()) {
      if (auction_goods_ != &::google::protobuf::internal::kEmptyString) {
        auction_goods_->clear();
      }
    }
    yuanbao_price_ = 0;
  }
  config_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyAuctionConfigProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.SingleDailyAuctionConfig config_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_config_list;
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_auction_goods;
        break;
      }

      // optional bytes auction_goods = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auction_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auction_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_yuanbao_price;
        break;
      }

      // optional int32 yuanbao_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yuanbao_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbao_price_)));
          set_has_yuanbao_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyAuctionConfigProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.SingleDailyAuctionConfig config_list = 1;
  for (int i = 0; i < this->config_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config_list(i), output);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional int64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time(), output);
  }

  // optional bytes auction_goods = 4;
  if (has_auction_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->auction_goods(), output);
  }

  // optional int32 yuanbao_price = 5;
  if (has_yuanbao_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->yuanbao_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyAuctionConfigProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.SingleDailyAuctionConfig config_list = 1;
  for (int i = 0; i < this->config_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config_list(i), target);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  // optional int64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_time(), target);
  }

  // optional bytes auction_goods = 4;
  if (has_auction_goods()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->auction_goods(), target);
  }

  // optional int32 yuanbao_price = 5;
  if (has_yuanbao_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->yuanbao_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyAuctionConfigProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional bytes auction_goods = 4;
    if (has_auction_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auction_goods());
    }

    // optional int32 yuanbao_price = 5;
    if (has_yuanbao_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbao_price());
    }

  }
  // repeated .app.message.SingleDailyAuctionConfig config_list = 1;
  total_size += 1 * this->config_list_size();
  for (int i = 0; i < this->config_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyAuctionConfigProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyAuctionConfigProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyAuctionConfigProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyAuctionConfigProto::MergeFrom(const DailyAuctionConfigProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_list_.MergeFrom(from.config_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_auction_goods()) {
      set_auction_goods(from.auction_goods());
    }
    if (from.has_yuanbao_price()) {
      set_yuanbao_price(from.yuanbao_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyAuctionConfigProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyAuctionConfigProto::CopyFrom(const DailyAuctionConfigProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyAuctionConfigProto::IsInitialized() const {

  return true;
}

void DailyAuctionConfigProto::Swap(DailyAuctionConfigProto* other) {
  if (other != this) {
    config_list_.Swap(&other->config_list_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(auction_goods_, other->auction_goods_);
    std::swap(yuanbao_price_, other->yuanbao_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyAuctionConfigProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyAuctionConfigProto_descriptor_;
  metadata.reflection = DailyAuctionConfigProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleDailyAuctionConfig::kIdFieldNumber;
const int SingleDailyAuctionConfig::kDescFieldNumber;
const int SingleDailyAuctionConfig::kMinYuanbaoFieldNumber;
const int SingleDailyAuctionConfig::kPrizeFieldNumber;
const int SingleDailyAuctionConfig::kMinAuctionGoodsFieldNumber;
#endif  // !_MSC_VER

SingleDailyAuctionConfig::SingleDailyAuctionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleDailyAuctionConfig::InitAsDefaultInstance() {
  prize_ = const_cast< ::app::message::GoodsWrapperProto*>(&::app::message::GoodsWrapperProto::default_instance());
}

SingleDailyAuctionConfig::SingleDailyAuctionConfig(const SingleDailyAuctionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleDailyAuctionConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minyuanbao_ = 0;
  prize_ = NULL;
  min_auction_goods_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleDailyAuctionConfig::~SingleDailyAuctionConfig() {
  SharedDtor();
}

void SingleDailyAuctionConfig::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
    delete prize_;
  }
}

void SingleDailyAuctionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleDailyAuctionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleDailyAuctionConfig_descriptor_;
}

const SingleDailyAuctionConfig& SingleDailyAuctionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_5fauction_2eproto();
  return *default_instance_;
}

SingleDailyAuctionConfig* SingleDailyAuctionConfig::default_instance_ = NULL;

SingleDailyAuctionConfig* SingleDailyAuctionConfig::New() const {
  return new SingleDailyAuctionConfig;
}

void SingleDailyAuctionConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    minyuanbao_ = 0;
    if (has_prize()) {
      if (prize_ != NULL) prize_->::app::message::GoodsWrapperProto::Clear();
    }
    min_auction_goods_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleDailyAuctionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minYuanbao;
        break;
      }

      // optional int32 minYuanbao = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minYuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minyuanbao_)));
          set_has_minyuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize;
        break;
      }

      // optional .app.message.GoodsWrapperProto prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_auction_goods;
        break;
      }

      // optional int32 min_auction_goods = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_auction_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_auction_goods_)));
          set_has_min_auction_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleDailyAuctionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->desc(), output);
  }

  // optional int32 minYuanbao = 3 [deprecated = true];
  if (has_minyuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minyuanbao(), output);
  }

  // optional .app.message.GoodsWrapperProto prize = 4;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize(), output);
  }

  // optional int32 min_auction_goods = 5;
  if (has_min_auction_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_auction_goods(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleDailyAuctionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes desc = 2;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // optional int32 minYuanbao = 3 [deprecated = true];
  if (has_minyuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minyuanbao(), target);
  }

  // optional .app.message.GoodsWrapperProto prize = 4;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize(), target);
  }

  // optional int32 min_auction_goods = 5;
  if (has_min_auction_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_auction_goods(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleDailyAuctionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional int32 minYuanbao = 3 [deprecated = true];
    if (has_minyuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minyuanbao());
    }

    // optional .app.message.GoodsWrapperProto prize = 4;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }

    // optional int32 min_auction_goods = 5;
    if (has_min_auction_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_auction_goods());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleDailyAuctionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleDailyAuctionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleDailyAuctionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleDailyAuctionConfig::MergeFrom(const SingleDailyAuctionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_minyuanbao()) {
      set_minyuanbao(from.minyuanbao());
    }
    if (from.has_prize()) {
      mutable_prize()->::app::message::GoodsWrapperProto::MergeFrom(from.prize());
    }
    if (from.has_min_auction_goods()) {
      set_min_auction_goods(from.min_auction_goods());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleDailyAuctionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleDailyAuctionConfig::CopyFrom(const SingleDailyAuctionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDailyAuctionConfig::IsInitialized() const {

  return true;
}

void SingleDailyAuctionConfig::Swap(SingleDailyAuctionConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    std::swap(minyuanbao_, other->minyuanbao_);
    std::swap(prize_, other->prize_);
    std::swap(min_auction_goods_, other->min_auction_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleDailyAuctionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleDailyAuctionConfig_descriptor_;
  metadata.reflection = SingleDailyAuctionConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalAuctionData::kIdFieldNumber;
const int GlobalAuctionData::kHerodIdFieldNumber;
const int GlobalAuctionData::kHeroNameFieldNumber;
const int GlobalAuctionData::kCurrentMaxYuanbaoFieldNumber;
const int GlobalAuctionData::kCurrentMaxPriceFieldNumber;
#endif  // !_MSC_VER

GlobalAuctionData::GlobalAuctionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalAuctionData::InitAsDefaultInstance() {
}

GlobalAuctionData::GlobalAuctionData(const GlobalAuctionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalAuctionData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalAuctionData::~GlobalAuctionData() {
  SharedDtor();
}

void GlobalAuctionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalAuctionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalAuctionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalAuctionData_descriptor_;
}

const GlobalAuctionData& GlobalAuctionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_5fauction_2eproto();
  return *default_instance_;
}

GlobalAuctionData* GlobalAuctionData::default_instance_ = NULL;

GlobalAuctionData* GlobalAuctionData::New() const {
  return new GlobalAuctionData;
}

void GlobalAuctionData::Clear() {
  id_.Clear();
  herod_id_.Clear();
  hero_name_.Clear();
  current_max_yuanbao_.Clear();
  current_max_price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalAuctionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(16)) goto parse_herod_id;
        break;
      }

      // repeated int64 herod_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_herod_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_herod_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_herod_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_herod_id;
        if (input->ExpectTag(26)) goto parse_hero_name;
        break;
      }

      // repeated bytes hero_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hero_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_name;
        if (input->ExpectTag(32)) goto parse_current_max_yuanbao;
        break;
      }

      // repeated int32 current_max_yuanbao = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_max_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_current_max_yuanbao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_current_max_yuanbao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_max_yuanbao;
        if (input->ExpectTag(40)) goto parse_current_max_price;
        break;
      }

      // repeated int32 current_max_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_max_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_current_max_price())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_current_max_price())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_current_max_price;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalAuctionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  // repeated int64 herod_id = 2;
  for (int i = 0; i < this->herod_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->herod_id(i), output);
  }

  // repeated bytes hero_name = 3;
  for (int i = 0; i < this->hero_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hero_name(i), output);
  }

  // repeated int32 current_max_yuanbao = 4 [deprecated = true];
  for (int i = 0; i < this->current_max_yuanbao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->current_max_yuanbao(i), output);
  }

  // repeated int32 current_max_price = 5;
  for (int i = 0; i < this->current_max_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->current_max_price(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalAuctionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  // repeated int64 herod_id = 2;
  for (int i = 0; i < this->herod_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->herod_id(i), target);
  }

  // repeated bytes hero_name = 3;
  for (int i = 0; i < this->hero_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->hero_name(i), target);
  }

  // repeated int32 current_max_yuanbao = 4 [deprecated = true];
  for (int i = 0; i < this->current_max_yuanbao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->current_max_yuanbao(i), target);
  }

  // repeated int32 current_max_price = 5;
  for (int i = 0; i < this->current_max_price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->current_max_price(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalAuctionData::ByteSize() const {
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated int64 herod_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->herod_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->herod_id(i));
    }
    total_size += 1 * this->herod_id_size() + data_size;
  }

  // repeated bytes hero_name = 3;
  total_size += 1 * this->hero_name_size();
  for (int i = 0; i < this->hero_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hero_name(i));
  }

  // repeated int32 current_max_yuanbao = 4 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->current_max_yuanbao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->current_max_yuanbao(i));
    }
    total_size += 1 * this->current_max_yuanbao_size() + data_size;
  }

  // repeated int32 current_max_price = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_max_price_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->current_max_price(i));
    }
    total_size += 1 * this->current_max_price_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalAuctionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalAuctionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalAuctionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalAuctionData::MergeFrom(const GlobalAuctionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  herod_id_.MergeFrom(from.herod_id_);
  hero_name_.MergeFrom(from.hero_name_);
  current_max_yuanbao_.MergeFrom(from.current_max_yuanbao_);
  current_max_price_.MergeFrom(from.current_max_price_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalAuctionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalAuctionData::CopyFrom(const GlobalAuctionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalAuctionData::IsInitialized() const {

  return true;
}

void GlobalAuctionData::Swap(GlobalAuctionData* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    herod_id_.Swap(&other->herod_id_);
    hero_name_.Swap(&other->hero_name_);
    current_max_yuanbao_.Swap(&other->current_max_yuanbao_);
    current_max_price_.Swap(&other->current_max_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalAuctionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalAuctionData_descriptor_;
  metadata.reflection = GlobalAuctionData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
