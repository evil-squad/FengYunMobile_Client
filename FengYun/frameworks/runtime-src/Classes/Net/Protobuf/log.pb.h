// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#ifndef PROTOBUF_log_2eproto__INCLUDED
#define PROTOBUF_log_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "goods_server.pb.h"
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_2eproto();
void protobuf_AssignDesc_log_2eproto();
void protobuf_ShutdownFile_log_2eproto();

class TradeFailProto;
class TradeGoodsProto;
class ConsumeLogProto;
class AllConsumeLogProto;
class LogEnum;

enum LogEnum_LogType {
  LogEnum_LogType_CreateRole = 1,
  LogEnum_LogType_RoleLevelUp = 2,
  LogEnum_LogType_SpeSkillLevelUp = 3,
  LogEnum_LogType_RoleLogin = 4,
  LogEnum_LogType_RoleLogout = 5,
  LogEnum_LogType_AccountLogin = 6,
  LogEnum_LogType_AccountLogout = 7,
  LogEnum_LogType_OnlineCount = 8,
  LogEnum_LogType_Offline = 9,
  LogEnum_LogType_Recharge = 10,
  LogEnum_LogType_Shop = 11,
  LogEnum_LogType_AddGoods = 12,
  LogEnum_LogType_SubGoods = 13,
  LogEnum_LogType_AddItem = 14,
  LogEnum_LogType_UseItem = 15,
  LogEnum_LogType_DestroyItem = 16,
  LogEnum_LogType_DiscardItem = 17,
  LogEnum_LogType_TaskStart = 18,
  LogEnum_LogType_TaskFinished = 19,
  LogEnum_LogType_PartyBuild = 20,
  LogEnum_LogType_PartyDismiss = 21,
  LogEnum_LogType_PartyLevelUp = 22,
  LogEnum_LogType_PartyAddMember = 23,
  LogEnum_LogType_PartyDelMember = 24,
  LogEnum_LogType_StallStart = 25,
  LogEnum_LogType_StallEnd = 26,
  LogEnum_LogType_StallTrade = 27,
  LogEnum_LogType_P2PDeal = 28,
  LogEnum_LogType_CallBack = 29,
  LogEnum_LogType_NpcTrade = 30,
  LogEnum_LogType_LearnSkill = 31,
  LogEnum_LogType_ChMap = 32,
  LogEnum_LogType_RcvAccessory = 33,
  LogEnum_LogType_StartPostToken = 34,
  LogEnum_LogType_EndPostToken = 35,
  LogEnum_LogType_PostTokenTrade = 36,
  LogEnum_LogType_ItemFlow = 37,
  LogEnum_LogType_ArmFlow = 38,
  LogEnum_LogType_MoneyFlow = 39,
  LogEnum_LogType_TaskPromotionRank = 40
};
bool LogEnum_LogType_IsValid(int value);
const LogEnum_LogType LogEnum_LogType_LogType_MIN = LogEnum_LogType_CreateRole;
const LogEnum_LogType LogEnum_LogType_LogType_MAX = LogEnum_LogType_TaskPromotionRank;
const int LogEnum_LogType_LogType_ARRAYSIZE = LogEnum_LogType_LogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEnum_LogType_descriptor();
inline const ::std::string& LogEnum_LogType_Name(LogEnum_LogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEnum_LogType_descriptor(), value);
}
inline bool LogEnum_LogType_Parse(
    const ::std::string& name, LogEnum_LogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEnum_LogType>(
    LogEnum_LogType_descriptor(), name, value);
}
enum LogEnum_OperateObject {
  LogEnum_OperateObject_HERO = 0,
  LogEnum_OperateObject_EXP = 1,
  LogEnum_OperateObject_LEVEL = 2,
  LogEnum_OperateObject_MONEY = 3,
  LogEnum_OperateObject_REAL_AIR = 4,
  LogEnum_OperateObject_LIJIN = 5,
  LogEnum_OperateObject_YUANBAO = 6,
  LogEnum_OperateObject_PK_AMOUNT = 7,
  LogEnum_OperateObject_GUILD_LILIAN = 8,
  LogEnum_OperateObject_GUILD_GX = 9,
  LogEnum_OperateObject_TASK = 10,
  LogEnum_OperateObject_GOODS = 11,
  LogEnum_OperateObject_SPELL = 12,
  LogEnum_OperateObject_MOUNT = 13,
  LogEnum_OperateObject_MOUNT_SPELL = 14,
  LogEnum_OperateObject_GEM = 15,
  LogEnum_OperateObject_BOW = 16,
  LogEnum_OperateObject_ARROW = 17,
  LogEnum_OperateObject_SWEAPON = 18,
  LogEnum_OperateObject_SWEAPON_SOUL = 19,
  LogEnum_OperateObject_MAIL = 20,
  LogEnum_OperateObject_DUNGEON = 21,
  LogEnum_OperateObject_SCENE = 22,
  LogEnum_OperateObject_GUILD = 23,
  LogEnum_OperateObject_GUILD_ASSETS = 24,
  LogEnum_OperateObject_EQUIPMENT = 25,
  LogEnum_OperateObject_SCENE_GOODS = 26,
  LogEnum_OperateObject_SOU_SHEN_POINT = 27,
  LogEnum_OperateObject_PET_SPELL = 28,
  LogEnum_OperateObject_TIAN_JIE = 29,
  LogEnum_OperateObject_TIAN_JIE_SPELL = 30,
  LogEnum_OperateObject_TIAN_ZUI = 31,
  LogEnum_OperateObject_TIAN_ZUI_SPELL = 32,
  LogEnum_OperateObject_HONOR = 33,
  LogEnum_OperateObject_SHENG_WANG = 34
};
bool LogEnum_OperateObject_IsValid(int value);
const LogEnum_OperateObject LogEnum_OperateObject_OperateObject_MIN = LogEnum_OperateObject_HERO;
const LogEnum_OperateObject LogEnum_OperateObject_OperateObject_MAX = LogEnum_OperateObject_SHENG_WANG;
const int LogEnum_OperateObject_OperateObject_ARRAYSIZE = LogEnum_OperateObject_OperateObject_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEnum_OperateObject_descriptor();
inline const ::std::string& LogEnum_OperateObject_Name(LogEnum_OperateObject value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEnum_OperateObject_descriptor(), value);
}
inline bool LogEnum_OperateObject_Parse(
    const ::std::string& name, LogEnum_OperateObject* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEnum_OperateObject>(
    LogEnum_OperateObject_descriptor(), name, value);
}
enum LogEnum_OperateType {
  LogEnum_OperateType_INTERNAL = 0,
  LogEnum_OperateType_SYSTEM = 1,
  LogEnum_OperateType_GM = 2,
  LogEnum_OperateType_LOGIN = 3,
  LogEnum_OperateType_LOGOUT = 4,
  LogEnum_OperateType_SCENE_ENTER = 10,
  LogEnum_OperateType_SCENE_LEAVE = 11,
  LogEnum_OperateType_SCENE_TRANSPORT = 12,
  LogEnum_OperateType_KILL_HERO = 13,
  LogEnum_OperateType_KILL_MONSTER = 14,
  LogEnum_OperateType_RELIVE = 15,
  LogEnum_OperateType_MEDITATE = 16,
  LogEnum_OperateType_MONSTER_DROP = 17,
  LogEnum_OperateType_TERRITORY_STAY = 18,
  LogEnum_OperateType_TASK_DONE = 21,
  LogEnum_OperateType_TASK_DONE_PAY = 22,
  LogEnum_OperateType_TASK_DONE_ALL_PAY = 23,
  LogEnum_OperateType_TASK_CHANGE_DIFFICULTY = 24,
  LogEnum_OperateType_TASK_CHANGE_PRIZE = 25,
  LogEnum_OperateType_TASK_SWALLOW = 26,
  LogEnum_OperateType_TASK_REDUCE_GOODS = 27,
  LogEnum_OperateType_TASK_COLLECT_GOODS = 28,
  LogEnum_OperateType_TASK_DROP_GOODS = 29,
  LogEnum_OperateType_RECHARGE = 30,
  LogEnum_OperateType_TRADE = 31,
  LogEnum_OperateType_COLLECT_AUCTION_PRIZE = 32,
  LogEnum_OperateType_SALE_ON = 33,
  LogEnum_OperateType_SALE_OFF = 34,
  LogEnum_OperateType_SALE_BUY = 35,
  LogEnum_OperateType_SALE_TAX = 36,
  LogEnum_OperateType_TRADE_TAX = 37,
  LogEnum_OperateType_GOODS_USE = 40,
  LogEnum_OperateType_SCENE_GOODS_PICK_UP = 41,
  LogEnum_OperateType_SCENE_GOODS_DROP = 42,
  LogEnum_OperateType_OPEN_GRID = 43,
  LogEnum_OperateType_BIND_ON_EQUIP = 44,
  LogEnum_OperateType_ZHAO_HUI = 45,
  LogEnum_OperateType_TU_HAO = 46,
  LogEnum_OperateType_FULI_CARD_USE = 47,
  LogEnum_OperateType_SKILL_UPDATE = 50,
  LogEnum_OperateType_RANK_ADMIRE = 59,
  LogEnum_OperateType_SHOP_BUY = 60,
  LogEnum_OperateType_SHOP_BUY_BACK = 61,
  LogEnum_OperateType_SHOP_SELL = 62,
  LogEnum_OperateType_SOU_SHEN_BUY = 63,
  LogEnum_OperateType_RESET_DUNGEON = 70,
  LogEnum_OperateType_AUTO_FINISH_DUNGEON = 71,
  LogEnum_OperateType_AUTO_FINISH_ALL_DUNGEON = 72,
  LogEnum_OperateType_AUTO_FINISH_DUNGEON_IMMEDIATE = 73,
  LogEnum_OperateType_COLLECT_DUNGEON_PRIZE = 74,
  LogEnum_OperateType_COLLECT_DUNGEON_TEMP_PRIZE = 75,
  LogEnum_OperateType_COLLECT_FIRST_PASS_PRIZE = 76,
  LogEnum_OperateType_CATCH_FIRE_MONKEY = 77,
  LogEnum_OperateType_CHALLENGE_DROP = 78,
  LogEnum_OperateType_COLLECT_BOSS_PRIZE = 79,
  LogEnum_OperateType_GUILD_CREATE = 90,
  LogEnum_OperateType_GUILD_DISSOLVE = 91,
  LogEnum_OperateType_GUILD_DONATE = 92,
  LogEnum_OperateType_GUILD_BANNER_UPGRADE = 93,
  LogEnum_OperateType_GUILD_BANNER_RENAME = 94,
  LogEnum_OperateType_GUILD_BANNER_MODIFY = 95,
  LogEnum_OperateType_GUILD_BUY = 96,
  LogEnum_OperateType_GUILD_JOIN = 97,
  LogEnum_OperateType_GUILD_LEAVE = 98,
  LogEnum_OperateType_GUILD_TOWER_UPGRADE = 99,
  LogEnum_OperateType_MOUNT_UPGRADE = 100,
  LogEnum_OperateType_MO_SHI_UPGRADE = 101,
  LogEnum_OperateType_SUPER_ARM_UPGRADE = 105,
  LogEnum_OperateType_REFINED_FORGE = 110,
  LogEnum_OperateType_QUALITY_FORGE = 111,
  LogEnum_OperateType_LEVEL_FORGE = 112,
  LogEnum_OperateType_MELT = 113,
  LogEnum_OperateType_MELT_GAOJI = 114,
  LogEnum_OperateType_TI_PIN = 115,
  LogEnum_OperateType_REFRESH_BIAO_QUALITY = 116,
  LogEnum_OperateType_BIAO_REACH_DEST = 117,
  LogEnum_OperateType_BIAO_BEI_JIE_OWNER = 118,
  LogEnum_OperateType_BIAO_BEI_JIE_ATTACKER = 119,
  LogEnum_OperateType_GEM_MERGE = 120,
  LogEnum_OperateType_GEM_UPDATE = 121,
  LogEnum_OperateType_HE_CHENG_EQUIP = 122,
  LogEnum_OperateType_HE_CHENG_GOODS = 123,
  LogEnum_OperateType_HE_CHENG_PET_EQUIP = 758,
  LogEnum_OperateType_BOW_UPGRADE = 130,
  LogEnum_OperateType_ARROW_UPGRADE = 131,
  LogEnum_OperateType_WEAPON_UPGRADE = 140,
  LogEnum_OperateType_WEAPON_SOUL_UPGRADE = 141,
  LogEnum_OperateType_COLLECT_VIP_WEAPON = 142,
  LogEnum_OperateType_LEARN_MAGIC_WEAPON_SPELL = 143,
  LogEnum_OperateType_COLLECT_VIP_PRIZE = 150,
  LogEnum_OperateType_COLLECT_VIP_WEEKLY_PRIZE = 151,
  LogEnum_OperateType_SEND_MAIL = 160,
  LogEnum_OperateType_COLLECT_MAIL = 161,
  LogEnum_OperateType_PAID_CHAT = 170,
  LogEnum_OperateType_COUPON = 178,
  LogEnum_OperateType_ACTIVITY_PAYBACK = 179,
  LogEnum_OperateType_SIGN = 180,
  LogEnum_OperateType_COLLECT_SIGN_PRIZE = 181,
  LogEnum_OperateType_LOTTERY = 82,
  LogEnum_OperateType_COLLECT_LOTTERY_PRIZE = 183,
  LogEnum_OperateType_COLLECT_OFFLINE_EXP = 184,
  LogEnum_OperateType_DIVINE = 185,
  LogEnum_OperateType_COLLECT_MICRO_FIRST_LOGIN_PRIZE = 186,
  LogEnum_OperateType_COLLECT_MICRO_DAILY_LOGIN_PRIZE = 187,
  LogEnum_OperateType_PHOENIX_REFINE = 188,
  LogEnum_OperateType_EXAM = 189,
  LogEnum_OperateType_SWORD_SACRIFICE_SCENE_RADIATE_PRIZE = 190,
  LogEnum_OperateType_SWORD_SACRIFICE_HERO_RADIATE_PRIZE = 191,
  LogEnum_OperateType_SWORD_SACRIFICE_FOR_MONEY = 192,
  LogEnum_OperateType_SWORD_SACRIFICE_FOR_YUANBAO = 193,
  LogEnum_OperateType_COLLECT_SINGLE_STORY_PRIZE = 194,
  LogEnum_OperateType_HUO_LIN_PERIODIC = 195,
  LogEnum_OperateType_TERRITORY_PRIZE = 196,
  LogEnum_OperateType_TERRITORY_WIN = 197,
  LogEnum_OperateType_TERRITORY_LOSE = 198,
  LogEnum_OperateType_TERRITORY_KILL_HERO = 199,
  LogEnum_OperateType_PET_ADD_LIFE = 220,
  LogEnum_OperateType_PET_EAT_GOODS = 221,
  LogEnum_OperateType_TIAN_JIE_UPGRADE = 222,
  LogEnum_OperateType_TIAN_ZUI_UPGRADE = 223,
  LogEnum_OperateType_ONE_ON_ONE_ADD_CHALLENGE_TIMES = 230,
  LogEnum_OperateType_ONE_ON_ONE_ADD_CHALLENGE_REFINED_TIMES = 231,
  LogEnum_OperateType_ONE_ON_ONE_RESET_COOLDOWN = 232,
  LogEnum_OperateType_ONE_ON_ONE_HOURLY_PRIZE = 233,
  LogEnum_OperateType_ONE_ON_ONE_DAILY_PRIZE = 234,
  LogEnum_OperateType_ONE_ON_ONE_CHALLENGE_PRIZE = 235,
  LogEnum_OperateType_EXCHANGE_GOODS = 240,
  LogEnum_OperateType_SHENG_WANG_TASK_DONE = 245,
  LogEnum_OperateType_EXCHANGE_SHENG_WANG_GOODS = 246,
  LogEnum_OperateType_GUILD_CITY_PRIZE = 250,
  LogEnum_OperateType_GUILD_FIGHT_STAY = 251,
  LogEnum_OperateType_GUILD_FIGHT_WIN = 252,
  LogEnum_OperateType_GUILD_FIGHT_LOSE = 253,
  LogEnum_OperateType_GUILD_FIGHT_KILL_HERO = 254,
  LogEnum_OperateType_LONG_CITY_PRIZE = 260,
  LogEnum_OperateType_LONG_CITY_STAY = 261,
  LogEnum_OperateType_LONG_CITY_WIN = 262,
  LogEnum_OperateType_LONG_CITY_LOSE = 263,
  LogEnum_OperateType_LONG_CITY_KILL_HERO = 264,
  LogEnum_OperateType_LONG_CITY_BEEN_KILLED = 265,
  LogEnum_OperateType_RECHARGE_REBATE = 266,
  LogEnum_OperateType_UPGRADE_PROMOTION = 267,
  LogEnum_OperateType_PLATFORM_SPEED = 268,
  LogEnum_OperateType_RANK_PROMOTION = 269,
  LogEnum_OperateType_DAILY_CONSUME = 270,
  LogEnum_OperateType_DING_ZHI = 271,
  LogEnum_OperateType_DRAW_PRIZE = 272,
  LogEnum_OperateType_WL_FIRST_RECHARGE = 280,
  LogEnum_OperateType_WL_FIRST_LOGIN_PRIZE = 281,
  LogEnum_OperateType_DISCOUNT_STORE_BUY = 282,
  LogEnum_OperateType_USE_YUANBAO_PACKAGE = 283,
  LogEnum_OperateType_INVEST_UPGRADE_BANK = 284,
  LogEnum_OperateType_INVEST_MONTHLY_BANK = 285,
  LogEnum_OperateType_COLLECT_UPGRADE_BANK_INCOME = 286,
  LogEnum_OperateType_COLLECT_MONTHLY_BANK_INCOME = 287,
  LogEnum_OperateType_COLLECT_MONTHLY_BANK_ONLINE_INCOME = 288,
  LogEnum_OperateType_COLLECT_PLATFORM_VIP_PRIZE = 289,
  LogEnum_OperateType_CLEAR_BINDED_YUANBAO = 290,
  LogEnum_OperateType_USE_LEGEND_CARD = 291,
  LogEnum_OperateType_USE_CRIT_CARD = 292,
  LogEnum_OperateType_RESET_KONG_CI = 300,
  LogEnum_OperateType_KONG_CI_SD = 301,
  LogEnum_OperateType_COLLECT_KONG_CI_FIRST_PASS_PRIZE = 302,
  LogEnum_OperateType_COLLECT_KONG_CI_SD_PRIZE = 303,
  LogEnum_OperateType_COLLECT_KONG_CI_PRIZE = 304,
  LogEnum_OperateType_COLLECT_PLATFORM_PRIZE = 305,
  LogEnum_OperateType_COLLECT_WEIXIN_PRIZE = 306,
  LogEnum_OperateType_ARENA_BUY = 310,
  LogEnum_OperateType_GUILD_DUNGEON_COLLECT_BOSS_PRIZE = 311,
  LogEnum_OperateType_GUILD_PVP_PERIODIC = 312,
  LogEnum_OperateType_GUILD_PVP_BOSS_DEAD_PRIZE = 313,
  LogEnum_OperateType_P360_SECURITY_PRIVILEGE_PRIZE = 400,
  LogEnum_OperateType_EXCHANGE_HAOLI = 401,
  LogEnum_OperateType_SHOU_CANG_UPGRADE = 402,
  LogEnum_OperateType_DOTA_PRIZE = 314,
  LogEnum_OperateType_DEMON_UPGRADE = 315,
  LogEnum_OperateType_CLOAK_UPGRADE = 316,
  LogEnum_OperateType_TIAN_XIE_UPGRADE = 655,
  LogEnum_OperateType_MARRIAGE_GOODS = 317,
  LogEnum_OperateType_NEW_HUO_LIN_PERIODIC = 318,
  LogEnum_OperateType_NEW_HUO_LIN_BOSS_DEAD_PRIZE = 319,
  LogEnum_OperateType_DIVORCE = 320,
  LogEnum_OperateType_MARRIAGE_WEDDING_GIFT = 321,
  LogEnum_OperateType_MARRIAGE_WEDDING = 322,
  LogEnum_OperateType_MARRIAGE_WEDDING_STAY = 323,
  LogEnum_OperateType_MARRIAGE_WEDDING_DRINK = 324,
  LogEnum_OperateType_MARRIAGE_GOODS_UPGRADE = 325,
  LogEnum_OperateType_MARRIAGE_WEDDING_GIFT_COLLECT = 326,
  LogEnum_OperateType_MONSTER_FIGHT_STAY = 330,
  LogEnum_OperateType_RECHARGE_EXCHANGE_LINGPAI = 403,
  LogEnum_OperateType_LUCKY_DRAW_PRIZE = 404,
  LogEnum_OperateType_YI_TIAN_SHEN_JUE = 405,
  LogEnum_OperateType_BOSS_CAI_JI = 406,
  LogEnum_OperateType_WASH_SUPER_WEAPON = 407,
  LogEnum_OperateType_PLATFORM_SUMMER_PRIZE = 408,
  LogEnum_OperateType_GLOBAL_RECHARGE_PRIZE = 409,
  LogEnum_OperateType_VIP_PROMOTION = 410,
  LogEnum_OperateType_MARRIAGE_PROMOTION = 411,
  LogEnum_OperateType_MONSTER_FIGHT_CITY_BOSS_DEAD_PRIZE = 412,
  LogEnum_OperateType_TRANSFER = 500,
  LogEnum_OperateType_JINSHAN_PLATFORM_PRIZE = 501,
  LogEnum_OperateType_UPGRADE_JING_JIE = 510,
  LogEnum_OperateType_JING_JIE_DUNGEON_PRIZE = 511,
  LogEnum_OperateType_COLLECT_LONG_YUAN_PER_PERIOD = 512,
  LogEnum_OperateType_CLEAR_LONG_YUAN_COUNTDOWN = 513,
  LogEnum_OperateType_TU_LONG_DUNGEON_PRIZE = 515,
  LogEnum_OperateType_ENTER_TIAN_MEN = 516,
  LogEnum_OperateType_COLLECT_TIAN_MEN_PRIZE = 517,
  LogEnum_OperateType_TASK_PROMOTION_TASK_FINISH = 518,
  LogEnum_OperateType_TASK_PROMOTION_POINT_COLLECT = 519,
  LogEnum_OperateType_TASK_PROMOTION_RESET = 520,
  LogEnum_OperateType_EXCHANGE_ROUNDLIBAO = 600,
  LogEnum_OperateType_EXCHANGE_MAYDAY = 601,
  LogEnum_OperateType_EXCHANGE_DAILY_CONSUME_EXCHANGE = 602,
  LogEnum_OperateType_DAILY_CARD = 603,
  LogEnum_OperateType_JIN_JIE_DAN_DEMON = 604,
  LogEnum_OperateType_JIN_JIE_DAN_CLOAK = 605,
  LogEnum_OperateType_GALLUP = 606,
  LogEnum_OperateType_LUCKY_DRAW_PRIZE_POINT_EXCHANGE = 607,
  LogEnum_OperateType_RECHARE_GOLD_TREE = 608,
  LogEnum_OperateType_DAILY_AUCTION = 609,
  LogEnum_OperateType_DAILY_LUCKY_WHEEL = 610,
  LogEnum_OperateType_MARRIAGE_STORAGE = 611,
  LogEnum_OperateType_QIAN_QIU_DA_JIE_UPGRADE = 612,
  LogEnum_OperateType_LAO_BING_BACK_GLOBAL = 613,
  LogEnum_OperateType_LAO_BING_BACK_PERSONAL = 614,
  LogEnum_OperateType_RECHARGE_EXCHANGE_JINJIE = 615,
  LogEnum_OperateType_DAO_SHI_LOGIN = 616,
  LogEnum_OperateType_DAO_SHI_WU_SHUANG_CITY = 617,
  LogEnum_OperateType_DAO_SHI_LONG_CITY = 618,
  LogEnum_OperateType_CHI_HUO_SHEN_GONG_UPGRADE = 619,
  LogEnum_OperateType_GUILD_PLANT_DO_PLANT = 620,
  LogEnum_OperateType_GUILD_PLANT_DO_UPGRADE = 621,
  LogEnum_OperateType_GUILD_PLANT_COLLECT_PRIZE = 622,
  LogEnum_OperateType_GUILD_PLANT_TASK_PRIZE = 623,
  LogEnum_OperateType_YY_TRANSFER = 624,
  LogEnum_OperateType_CHANGE_RACE = 625,
  LogEnum_OperateType_HTZ_PRIZE = 626,
  LogEnum_OperateType_NATIONAL_DAY_LOGIN_PRIZE = 627,
  LogEnum_OperateType_NATIONAL_DAY_RECHARGE_PRIZE = 628,
  LogEnum_OperateType_NATIONAL_DAY_SHOP = 632,
  LogEnum_OperateType_NEW_DRAW_PRIZE = 629,
  LogEnum_OperateType_NEW_DRAW_PRIZE_POINT_EXCHANGE = 630,
  LogEnum_OperateType_MULTI_PRIZE_ON_LIMITED_TIME_GOODS_USE = 631,
  LogEnum_OperateType_SUPER_WEAPON_MIX_GEM = 633,
  LogEnum_OperateType_SUPER_WEAPON_MOVE_GEM = 634,
  LogEnum_OperateType_SELECT_IMAGE = 635,
  LogEnum_OperateType_WANDA_MOVIE = 636,
  LogEnum_OperateType_CHENG_BA_COLLECT_PARTICIPATE_PRIZE = 637,
  LogEnum_OperateType_CHENG_BA_COLLECT_WIN_PRIZE = 638,
  LogEnum_OperateType_CHENG_BA_COLLECT_TAX_PRIZE = 639,
  LogEnum_OperateType_REXHARGE_BOX_REBATE = 640,
  LogEnum_OperateType_MOUNT_TONGLING_ACTIVE = 641,
  LogEnum_OperateType_CONSUME_BOX_REBATE = 642,
  LogEnum_OperateType_WU_LIN_GROUP_WIN = 700,
  LogEnum_OperateType_WU_LIN_GROUP_LOSE = 701,
  LogEnum_OperateType_WU_LIN_16_WIN = 702,
  LogEnum_OperateType_WU_LIN_16_LOSE = 703,
  LogEnum_OperateType_WU_LIN_8_WIN = 704,
  LogEnum_OperateType_WU_LIN_8_LOSE = 705,
  LogEnum_OperateType_WU_LIN_4_WIN = 706,
  LogEnum_OperateType_WU_LIN_4_LOSE = 707,
  LogEnum_OperateType_WU_LIN_2_WIN = 708,
  LogEnum_OperateType_WU_LIN_2_LOSE = 709,
  LogEnum_OperateType_DEL_GOODS = 710,
  LogEnum_OperateType_MO_BING_UPGRADE = 711,
  LogEnum_OperateType_MO_BING_SPELL_UPGRADE = 712,
  LogEnum_OperateType_MO_BING_RECHARGE_PRIZE = 713,
  LogEnum_OperateType_COLLECT_WEIXIN_PRIZE2 = 714,
  LogEnum_OperateType_WU_LIN_BID_PRIZE = 715,
  LogEnum_OperateType_LONG_XIAN_EXCHANGE = 716,
  LogEnum_OperateType_WASH_XUNZHANG = 717,
  LogEnum_OperateType_ZHAN_CHANG_EXCHANGE = 718,
  LogEnum_OperateType_FIGHT_AMOUNT_CHANGED_VALUE_RANK_DAILY_PRIZE = 719,
  LogEnum_OperateType_YY_PURPlE_VIP = 720,
  LogEnum_OperateType_CHRISTMAS_EXCHANGE = 721,
  LogEnum_OperateType_CHRISTMAS_DECORATE = 722,
  LogEnum_OperateType_CHRISTMAS_COLLECT_TREE_PRIZE = 723,
  LogEnum_OperateType_CHRISTMAS_LUCKY_TRY = 724,
  LogEnum_OperateType_CREDITS_SHOP = 725,
  LogEnum_OperateType_TIAO_ZHAN_EXCHANGE = 726,
  LogEnum_OperateType_TIAO_ZHAN_PAIR = 727,
  LogEnum_OperateType_TIAO_ZHAN_PAIR_TIMEOUT = 728,
  LogEnum_OperateType_TIAO_ZHAN_PAIR_RESULT_TIMEOUT = 729,
  LogEnum_OperateType_TIAO_ZHAN_UNPAIR = 730,
  LogEnum_OperateType_MONOPOLY_RANDOM_ROLL = 731,
  LogEnum_OperateType_MONOPOLY_CONTROLLABLE_ROLL = 732,
  LogEnum_OperateType_MONOPOLY_ROLL_PRIZE = 733,
  LogEnum_OperateType_MONOPOLY_ADD_ROLL_TIMES = 734,
  LogEnum_OperateType_CREDITS_DRAW_EXCHANGE = 735,
  LogEnum_OperateType_CREDITS_DRAW_DRAW = 736,
  LogEnum_OperateType_COLLECT_SHENZHUANG = 737,
  LogEnum_OperateType_GUILD_HONG_BAO_GIVE = 738,
  LogEnum_OperateType_GUILD_HONG_BAO_COLLECT = 739,
  LogEnum_OperateType_LOGIN_PROMOTION = 740,
  LogEnum_OperateType_DAILY_ONELINE_PROMOTION = 741,
  LogEnum_OperateType_LOVE_DAILY_PRIZE = 742,
  LogEnum_OperateType_LOVE_EXCHANGE = 743,
  LogEnum_OperateType_LOVE_WEIXIN = 744,
  LogEnum_OperateType_LOVE_ONLINE1 = 745,
  LogEnum_OperateType_LOVE_ONLINE2 = 746,
  LogEnum_OperateType_LOVE_ONLINE3 = 747,
  LogEnum_OperateType_LOVE_ONLINE4 = 748,
  LogEnum_OperateType_WU_DAO_UPGRADE = 749,
  LogEnum_OperateType_RECHARGE_EXCHANGE = 750,
  LogEnum_OperateType_CONSUME_EXCHANGE_PROMOTION = 751,
  LogEnum_OperateType_OFFLINE_EXCHANGE_PROMOTION = 752,
  LogEnum_OperateType_FREE_EXCHANGE = 753,
  LogEnum_OperateType_NIDAOQIANKUN = 754,
  LogEnum_OperateType_SECRET_SHOP_BUY = 755,
  LogEnum_OperateType_SECRET_SHOP_REFRESH = 756,
  LogEnum_OperateType_TONG_TAIN_TA_REFRESH = 757,
  LogEnum_OperateType_ANNIVERSARY_RECHARGE_FANLI = 759,
  LogEnum_OperateType_ANNIVERSARY_CAKE = 760,
  LogEnum_OperateType_ANNIVERSARY_DAILY_PRIZE = 761,
  LogEnum_OperateType_FIREWORK_PROMOTION = 762,
  LogEnum_OperateType_ANNIVERSARY_TASK_PRIZE = 763,
  LogEnum_OperateType_DAILY_FIRST_RECHARGE_DAILY_PRIZE = 764,
  LogEnum_OperateType_DAILY_FIRST_RECHARGE_FINAL_PRIZE = 765,
  LogEnum_OperateType_MELEE_STAY = 766,
  LogEnum_OperateType_MELEE_RELIVE = 767,
  LogEnum_OperateType_HE_CHENG_MOUNT_EQUIP = 768,
  LogEnum_OperateType_ANNIVERSARY_REFRESH_TASK = 769,
  LogEnum_OperateType_HUGE_DATA_PRIZE = 770,
  LogEnum_OperateType_ANNIVERSARY_JP_EXCHANGE = 771,
  LogEnum_OperateType_ANNIVERSARY_CONSUME_RETURN = 772,
  LogEnum_OperateType_ANNIVERSARY_VIP_DAILY_PRIZE = 773,
  LogEnum_OperateType_ANNIVERSARY_FINAL_TASK_PRIZE = 774,
  LogEnum_OperateType_SHIELD_UPGRADE = 775,
  LogEnum_OperateType_MYSTERY_DUNGEON_LING_GUANG = 776,
  LogEnum_OperateType_LING_GUANG_COST = 777,
  LogEnum_OperateType_LING_GUANG_DAILY_PICK = 778,
  LogEnum_OperateType_LING_GUANG_ADD = 779,
  LogEnum_OperateType_MOUNT_LEVEL_FORGE = 780,
  LogEnum_OperateType_PET_LEVEL_FORGE = 781,
  LogEnum_OperateType_SHIELD_LEVEL_FORGE = 782,
  LogEnum_OperateType_WUYI_RECHARGE_FANLI = 783,
  LogEnum_OperateType_MOUNT_TI_PIN = 784,
  LogEnum_OperateType_PET_TI_PIN = 785,
  LogEnum_OperateType_SHIELD_TI_PIN = 786,
  LogEnum_OperateType_LOGIN_PROMOTION2 = 787,
  LogEnum_OperateType_DAILY_FIRST_RECHARGE_DAILY_PRIZE2 = 788,
  LogEnum_OperateType_DAILY_FIRST_RECHARGE_FINAL_PRIZE2 = 789,
  LogEnum_OperateType_LAO_DONG_ZUI_GUANG_RONG = 790,
  LogEnum_OperateType_TIAN_MING_BAO_JIAN_TRIGGER = 791,
  LogEnum_OperateType_TIAN_MING_VALUES_REVERT = 792,
  LogEnum_OperateType_TIAN_MING_VALUES_RESET = 793,
  LogEnum_OperateType_HERO_BOSS_CARD_REFRESH = 794,
  LogEnum_OperateType_HERO_BOSS_CARD_CALL = 795,
  LogEnum_OperateType_HERO_BOSS_CARD_DUNGEON_FINISH = 796,
  LogEnum_OperateType_GUILD_BOSS_CARD_FEED = 797,
  LogEnum_OperateType_GUILD_BOSS_CARD_CALL = 798,
  LogEnum_OperateType_GUILD_BOSS_CARD_CALL_PRIZE = 806,
  LogEnum_OperateType_GUILD_BOSS_CARD_KILL_PRIZE = 807,
  LogEnum_OperateType_BUY_MONTHLY_CARD = 799,
  LogEnum_OperateType_MONTHLY_CARD_DAILY_PRIZE = 800,
  LogEnum_OperateType_MONTHLY_CARD_TASK_PRIZE = 801,
  LogEnum_OperateType_GOODS_ACTIVE_MONTHLY_CARD = 802,
  LogEnum_OperateType_MONTHLY_CARD_YUANBAO_FINISH_TASK = 803,
  LogEnum_OperateType_JIUWEIHU_WEAPON = 804,
  LogEnum_OperateType_HE_CHENG_SHIELD_EQUIP = 805,
  LogEnum_OperateType_TONG_TIAN_BAO_JIAN = 808,
  LogEnum_OperateType_HAIDI_MAP_FREE_TICKET = 809,
  LogEnum_OperateType_HAIDI_MAP_BISHUIDAN = 810,
  LogEnum_OperateType_HAIDI_MAP_TICKET = 811,
  LogEnum_OperateType_BU_YU_ENTER_DUNGEON = 812,
  LogEnum_OperateType_GOODS_UPGRADE = 1200,
  LogEnum_OperateType_BU_YU_SHOP = 813,
  LogEnum_OperateType_BU_YU_BUY_BULLET = 814,
  LogEnum_OperateType_GOODS_FORCE_REMOVE = 815,
  LogEnum_OperateType_QIXI_DAILY_PRIZE = 816,
  LogEnum_OperateType_JIANDAO_UPGRADE = 850,
  LogEnum_OperateType_LING_YU_UPGRADE = 851,
  LogEnum_OperateType_COMEBACK = 852,
  LogEnum_OperateType_BUY_HAMMER = 853,
  LogEnum_OperateType_BUY_DA_DI_SHU_ITEM = 854,
  LogEnum_OperateType_WELFARE_COMPENSATION = 855,
  LogEnum_OperateType_YU_YI_GE_UPGRADE = 856,
  LogEnum_OperateType_YU_YI_GE_FASHION_TO_BLESS_AMOUNT = 857,
  LogEnum_OperateType_YU_YI_GE_MOVE_FASHION = 858,
  LogEnum_OperateType_FENG_YUN_DAO_BUY_CHALLENGE_COUNT = 859,
  LogEnum_OperateType_BOW_TONGLING_ACTIVE = 860,
  LogEnum_OperateType_SYS_HONG_BAO_COLLETED = 861,
  LogEnum_OperateType_INLAY_BAO_SHI = 862,
  LogEnum_OperateType_REMOVE_BAO_SHI = 863,
  LogEnum_OperateType_BAO_SHI_RESET = 864,
  LogEnum_OperateType_BAO_SHI_HE_CHENG = 865,
  LogEnum_OperateType_EXCHANGE_COST_GOODS_AND_VALUES = 866,
  LogEnum_OperateType_PET_TONGLING_ACTIVE = 867,
  LogEnum_OperateType_PET_TONG_LING_GIFT_SPELL_UPGRADE = 868,
  LogEnum_OperateType_MO_FANG_UPGRADE = 869,
  LogEnum_OperateType_FORCE_REMOVE_FU_LI_CARD = 870,
  LogEnum_OperateType_CHOU_JIANG_FAN_LI_CHOU_JIANG = 871,
  LogEnum_OperateType_CHOU_JIANG_FAN_LI_RECHARGE = 872,
  LogEnum_OperateType_CHOU_JIANG_FAN_LI_GOODS_ADD = 873,
  LogEnum_OperateType_CHANGE_LV_HANDLER = 874,
  LogEnum_OperateType_NEW_ROBOT = 875,
  LogEnum_OperateType_DAILY_SHOP = 876
};
bool LogEnum_OperateType_IsValid(int value);
const LogEnum_OperateType LogEnum_OperateType_OperateType_MIN = LogEnum_OperateType_INTERNAL;
const LogEnum_OperateType LogEnum_OperateType_OperateType_MAX = LogEnum_OperateType_GOODS_UPGRADE;
const int LogEnum_OperateType_OperateType_ARRAYSIZE = LogEnum_OperateType_OperateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEnum_OperateType_descriptor();
inline const ::std::string& LogEnum_OperateType_Name(LogEnum_OperateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEnum_OperateType_descriptor(), value);
}
inline bool LogEnum_OperateType_Parse(
    const ::std::string& name, LogEnum_OperateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEnum_OperateType>(
    LogEnum_OperateType_descriptor(), name, value);
}
enum LogEnum_TransportType {
  LogEnum_TransportType_GATE = 1,
  LogEnum_TransportType_CHANGE_LINE = 2,
  LogEnum_TransportType_CITY_RELIVE = 3,
  LogEnum_TransportType_RETURN_CITY = 4,
  LogEnum_TransportType_TP_GOODS = 5,
  LogEnum_TransportType_NPC = 6,
  LogEnum_TransportType_MAP = 7,
  LogEnum_TransportType_TP_TASK = 8,
  LogEnum_TransportType_ASSIST = 9,
  LogEnum_TransportType_ENTER_DUNGEON = 10,
  LogEnum_TransportType_LEAVE_DUNGEON = 11,
  LogEnum_TransportType_FIRE_MONKY = 12,
  LogEnum_TransportType_GM_TP = 13,
  LogEnum_TransportType_GUILD_FIGHT = 14,
  LogEnum_TransportType_LONG_CITY = 15,
  LogEnum_TransportType_ONE_ON_ONE = 16,
  LogEnum_TransportType_MARRIAGE = 17,
  LogEnum_TransportType_GOLD_PIG = 18,
  LogEnum_TransportType_CHRISTMAS = 19,
  LogEnum_TransportType_ENTER_TIAO_ZHAN = 20,
  LogEnum_TransportType_NIAN_SHOU = 21,
  LogEnum_TransportType_ANNI_CAKE = 22,
  LogEnum_TransportType_GUILD_BOSS = 23,
  LogEnum_TransportType_HAIDI_MAP = 24
};
bool LogEnum_TransportType_IsValid(int value);
const LogEnum_TransportType LogEnum_TransportType_TransportType_MIN = LogEnum_TransportType_GATE;
const LogEnum_TransportType LogEnum_TransportType_TransportType_MAX = LogEnum_TransportType_HAIDI_MAP;
const int LogEnum_TransportType_TransportType_ARRAYSIZE = LogEnum_TransportType_TransportType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEnum_TransportType_descriptor();
inline const ::std::string& LogEnum_TransportType_Name(LogEnum_TransportType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEnum_TransportType_descriptor(), value);
}
inline bool LogEnum_TransportType_Parse(
    const ::std::string& name, LogEnum_TransportType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEnum_TransportType>(
    LogEnum_TransportType_descriptor(), name, value);
}
enum LogEnum_SceneType {
  LogEnum_SceneType_NORMAL = 0,
  LogEnum_SceneType_STORY_DUNGEON = 1,
  LogEnum_SceneType_CHALLENGE_DUNGEON = 2,
  LogEnum_SceneType_VIP_DUNGEON = 3,
  LogEnum_SceneType_DEFENCE_DUNGEON = 4,
  LogEnum_SceneType_LING_YUN_DUNGEON = 5,
  LogEnum_SceneType_SOU_SHEN_DUNGEON = 6,
  LogEnum_SceneType_LONG_MAI_DUNGEON = 7,
  LogEnum_SceneType_WU_JUE_DUNGEON = 8,
  LogEnum_SceneType_JI_JIAN_DUNGEON = 9,
  LogEnum_SceneType_HUO_LIN_DUNGEON = 10,
  LogEnum_SceneType_ARENA_DUNGEON = 11,
  LogEnum_SceneType_ZHONG_HUA_GE_DUNGEON = 12,
  LogEnum_SceneType_GUILD_DUNGEON = 13,
  LogEnum_SceneType_GUILD_PVP_DUNGEON = 14,
  LogEnum_SceneType_DOTA = 15,
  LogEnum_SceneType_NEW_HUO_LIN_DUNGEON = 16,
  LogEnum_SceneType_COUPLE_DUNGEON = 17,
  LogEnum_SceneType_JING_JIE_DUNGEON = 18,
  LogEnum_SceneType_TU_LONG_DUNGEON = 19,
  LogEnum_SceneType_TIAN_MEN_DUNGEON = 20,
  LogEnum_SceneType_XIN_MO_DUNGEON = 21,
  LogEnum_SceneType_GUILD_PLANT_DUNGEON = 22,
  LogEnum_SceneType_HTZ_DUNGEON = 23,
  LogEnum_SceneType_CHENG_BA = 24,
  LogEnum_SceneType_WU_LIN = 25,
  LogEnum_SceneType_LONG_XIAN = 26,
  LogEnum_SceneType_ZHAN_CHANG = 27,
  LogEnum_SceneType_YY_PURPLE_DUNGEON = 28,
  LogEnum_SceneType_TIAO_ZHAN = 29,
  LogEnum_SceneType_TONG_TIAN_TA = 30,
  LogEnum_SceneType_MELEE = 31,
  LogEnum_SceneType_MYSTERY_DUNGEON = 32,
  LogEnum_SceneType_BU_YU_DUNGEON = 33,
  LogEnum_SceneType_SHEN_HAI_WEI_JI = 34,
  LogEnum_SceneType_FENG_YUN_DAO = 35,
  LogEnum_SceneType_HELL_DUNGEON = 36
};
bool LogEnum_SceneType_IsValid(int value);
const LogEnum_SceneType LogEnum_SceneType_SceneType_MIN = LogEnum_SceneType_NORMAL;
const LogEnum_SceneType LogEnum_SceneType_SceneType_MAX = LogEnum_SceneType_HELL_DUNGEON;
const int LogEnum_SceneType_SceneType_ARRAYSIZE = LogEnum_SceneType_SceneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEnum_SceneType_descriptor();
inline const ::std::string& LogEnum_SceneType_Name(LogEnum_SceneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEnum_SceneType_descriptor(), value);
}
inline bool LogEnum_SceneType_Parse(
    const ::std::string& name, LogEnum_SceneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEnum_SceneType>(
    LogEnum_SceneType_descriptor(), name, value);
}
// ===================================================================

class TradeFailProto : public ::google::protobuf::Message {
 public:
  TradeFailProto();
  virtual ~TradeFailProto();

  TradeFailProto(const TradeFailProto& from);

  inline TradeFailProto& operator=(const TradeFailProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeFailProto& default_instance();

  void Swap(TradeFailProto* other);

  // implements Message ----------------------------------------------

  TradeFailProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeFailProto& from);
  void MergeFrom(const TradeFailProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 remove_yuanbao = 1;
  inline bool has_remove_yuanbao() const;
  inline void clear_remove_yuanbao();
  static const int kRemoveYuanbaoFieldNumber = 1;
  inline ::google::protobuf::int32 remove_yuanbao() const;
  inline void set_remove_yuanbao(::google::protobuf::int32 value);

  // optional int32 real_yuanbao = 2;
  inline bool has_real_yuanbao() const;
  inline void clear_real_yuanbao();
  static const int kRealYuanbaoFieldNumber = 2;
  inline ::google::protobuf::int32 real_yuanbao() const;
  inline void set_real_yuanbao(::google::protobuf::int32 value);

  // repeated .app.message.TradeGoodsProto remove_goods = 3;
  inline int remove_goods_size() const;
  inline void clear_remove_goods();
  static const int kRemoveGoodsFieldNumber = 3;
  inline const ::app::message::TradeGoodsProto& remove_goods(int index) const;
  inline ::app::message::TradeGoodsProto* mutable_remove_goods(int index);
  inline ::app::message::TradeGoodsProto* add_remove_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::TradeGoodsProto >&
      remove_goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::TradeGoodsProto >*
      mutable_remove_goods();

  // optional int64 to_add_yuanbao = 21;
  inline bool has_to_add_yuanbao() const;
  inline void clear_to_add_yuanbao();
  static const int kToAddYuanbaoFieldNumber = 21;
  inline ::google::protobuf::int64 to_add_yuanbao() const;
  inline void set_to_add_yuanbao(::google::protobuf::int64 value);

  // repeated .app.message.GoodsServerProto to_add_goods = 22;
  inline int to_add_goods_size() const;
  inline void clear_to_add_goods();
  static const int kToAddGoodsFieldNumber = 22;
  inline const ::app::message::GoodsServerProto& to_add_goods(int index) const;
  inline ::app::message::GoodsServerProto* mutable_to_add_goods(int index);
  inline ::app::message::GoodsServerProto* add_to_add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsServerProto >&
      to_add_goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsServerProto >*
      mutable_to_add_goods();

  // @@protoc_insertion_point(class_scope:app.message.TradeFailProto)
 private:
  inline void set_has_remove_yuanbao();
  inline void clear_has_remove_yuanbao();
  inline void set_has_real_yuanbao();
  inline void clear_has_real_yuanbao();
  inline void set_has_to_add_yuanbao();
  inline void clear_has_to_add_yuanbao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 remove_yuanbao_;
  ::google::protobuf::int32 real_yuanbao_;
  ::google::protobuf::RepeatedPtrField< ::app::message::TradeGoodsProto > remove_goods_;
  ::google::protobuf::int64 to_add_yuanbao_;
  ::google::protobuf::RepeatedPtrField< ::app::message::GoodsServerProto > to_add_goods_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static TradeFailProto* default_instance_;
};
// -------------------------------------------------------------------

class TradeGoodsProto : public ::google::protobuf::Message {
 public:
  TradeGoodsProto();
  virtual ~TradeGoodsProto();

  TradeGoodsProto(const TradeGoodsProto& from);

  inline TradeGoodsProto& operator=(const TradeGoodsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeGoodsProto& default_instance();

  void Swap(TradeGoodsProto* other);

  // implements Message ----------------------------------------------

  TradeGoodsProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeGoodsProto& from);
  void MergeFrom(const TradeGoodsProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.GoodsServerProto goods = 1;
  inline bool has_goods() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 1;
  inline const ::app::message::GoodsServerProto& goods() const;
  inline ::app::message::GoodsServerProto* mutable_goods();
  inline ::app::message::GoodsServerProto* release_goods();
  inline void set_allocated_goods(::app::message::GoodsServerProto* goods);

  // optional int64 identifier = 2;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  inline ::google::protobuf::int64 identifier() const;
  inline void set_identifier(::google::protobuf::int64 value);

  // optional int32 own_count = 3;
  inline bool has_own_count() const;
  inline void clear_own_count();
  static const int kOwnCountFieldNumber = 3;
  inline ::google::protobuf::int32 own_count() const;
  inline void set_own_count(::google::protobuf::int32 value);

  // optional bool is_diff = 10;
  inline bool has_is_diff() const;
  inline void clear_is_diff();
  static const int kIsDiffFieldNumber = 10;
  inline bool is_diff() const;
  inline void set_is_diff(bool value);

  // optional .app.message.GoodsServerProto diff_goods = 11;
  inline bool has_diff_goods() const;
  inline void clear_diff_goods();
  static const int kDiffGoodsFieldNumber = 11;
  inline const ::app::message::GoodsServerProto& diff_goods() const;
  inline ::app::message::GoodsServerProto* mutable_diff_goods();
  inline ::app::message::GoodsServerProto* release_diff_goods();
  inline void set_allocated_diff_goods(::app::message::GoodsServerProto* diff_goods);

  // @@protoc_insertion_point(class_scope:app.message.TradeGoodsProto)
 private:
  inline void set_has_goods();
  inline void clear_has_goods();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_own_count();
  inline void clear_has_own_count();
  inline void set_has_is_diff();
  inline void clear_has_is_diff();
  inline void set_has_diff_goods();
  inline void clear_has_diff_goods();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::GoodsServerProto* goods_;
  ::google::protobuf::int64 identifier_;
  ::google::protobuf::int32 own_count_;
  bool is_diff_;
  ::app::message::GoodsServerProto* diff_goods_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static TradeGoodsProto* default_instance_;
};
// -------------------------------------------------------------------

class ConsumeLogProto : public ::google::protobuf::Message {
 public:
  ConsumeLogProto();
  virtual ~ConsumeLogProto();

  ConsumeLogProto(const ConsumeLogProto& from);

  inline ConsumeLogProto& operator=(const ConsumeLogProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsumeLogProto& default_instance();

  void Swap(ConsumeLogProto* other);

  // implements Message ----------------------------------------------

  ConsumeLogProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsumeLogProto& from);
  void MergeFrom(const ConsumeLogProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional .app.message.LogEnum.OperateType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::app::message::LogEnum_OperateType type() const;
  inline void set_type(::app::message::LogEnum_OperateType value);

  // optional int32 consume_yuanbao = 3;
  inline bool has_consume_yuanbao() const;
  inline void clear_consume_yuanbao();
  static const int kConsumeYuanbaoFieldNumber = 3;
  inline ::google::protobuf::int32 consume_yuanbao() const;
  inline void set_consume_yuanbao(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ConsumeLogProto)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_consume_yuanbao();
  inline void clear_has_consume_yuanbao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  int type_;
  ::google::protobuf::int32 consume_yuanbao_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static ConsumeLogProto* default_instance_;
};
// -------------------------------------------------------------------

class AllConsumeLogProto : public ::google::protobuf::Message {
 public:
  AllConsumeLogProto();
  virtual ~AllConsumeLogProto();

  AllConsumeLogProto(const AllConsumeLogProto& from);

  inline AllConsumeLogProto& operator=(const AllConsumeLogProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllConsumeLogProto& default_instance();

  void Swap(AllConsumeLogProto* other);

  // implements Message ----------------------------------------------

  AllConsumeLogProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllConsumeLogProto& from);
  void MergeFrom(const AllConsumeLogProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.ConsumeLogProto log_list = 1;
  inline int log_list_size() const;
  inline void clear_log_list();
  static const int kLogListFieldNumber = 1;
  inline const ::app::message::ConsumeLogProto& log_list(int index) const;
  inline ::app::message::ConsumeLogProto* mutable_log_list(int index);
  inline ::app::message::ConsumeLogProto* add_log_list();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ConsumeLogProto >&
      log_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ConsumeLogProto >*
      mutable_log_list();

  // @@protoc_insertion_point(class_scope:app.message.AllConsumeLogProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::ConsumeLogProto > log_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static AllConsumeLogProto* default_instance_;
};
// -------------------------------------------------------------------

class LogEnum : public ::google::protobuf::Message {
 public:
  LogEnum();
  virtual ~LogEnum();

  LogEnum(const LogEnum& from);

  inline LogEnum& operator=(const LogEnum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEnum& default_instance();

  void Swap(LogEnum* other);

  // implements Message ----------------------------------------------

  LogEnum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEnum& from);
  void MergeFrom(const LogEnum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LogEnum_LogType LogType;
  static const LogType CreateRole = LogEnum_LogType_CreateRole;
  static const LogType RoleLevelUp = LogEnum_LogType_RoleLevelUp;
  static const LogType SpeSkillLevelUp = LogEnum_LogType_SpeSkillLevelUp;
  static const LogType RoleLogin = LogEnum_LogType_RoleLogin;
  static const LogType RoleLogout = LogEnum_LogType_RoleLogout;
  static const LogType AccountLogin = LogEnum_LogType_AccountLogin;
  static const LogType AccountLogout = LogEnum_LogType_AccountLogout;
  static const LogType OnlineCount = LogEnum_LogType_OnlineCount;
  static const LogType Offline = LogEnum_LogType_Offline;
  static const LogType Recharge = LogEnum_LogType_Recharge;
  static const LogType Shop = LogEnum_LogType_Shop;
  static const LogType AddGoods = LogEnum_LogType_AddGoods;
  static const LogType SubGoods = LogEnum_LogType_SubGoods;
  static const LogType AddItem = LogEnum_LogType_AddItem;
  static const LogType UseItem = LogEnum_LogType_UseItem;
  static const LogType DestroyItem = LogEnum_LogType_DestroyItem;
  static const LogType DiscardItem = LogEnum_LogType_DiscardItem;
  static const LogType TaskStart = LogEnum_LogType_TaskStart;
  static const LogType TaskFinished = LogEnum_LogType_TaskFinished;
  static const LogType PartyBuild = LogEnum_LogType_PartyBuild;
  static const LogType PartyDismiss = LogEnum_LogType_PartyDismiss;
  static const LogType PartyLevelUp = LogEnum_LogType_PartyLevelUp;
  static const LogType PartyAddMember = LogEnum_LogType_PartyAddMember;
  static const LogType PartyDelMember = LogEnum_LogType_PartyDelMember;
  static const LogType StallStart = LogEnum_LogType_StallStart;
  static const LogType StallEnd = LogEnum_LogType_StallEnd;
  static const LogType StallTrade = LogEnum_LogType_StallTrade;
  static const LogType P2PDeal = LogEnum_LogType_P2PDeal;
  static const LogType CallBack = LogEnum_LogType_CallBack;
  static const LogType NpcTrade = LogEnum_LogType_NpcTrade;
  static const LogType LearnSkill = LogEnum_LogType_LearnSkill;
  static const LogType ChMap = LogEnum_LogType_ChMap;
  static const LogType RcvAccessory = LogEnum_LogType_RcvAccessory;
  static const LogType StartPostToken = LogEnum_LogType_StartPostToken;
  static const LogType EndPostToken = LogEnum_LogType_EndPostToken;
  static const LogType PostTokenTrade = LogEnum_LogType_PostTokenTrade;
  static const LogType ItemFlow = LogEnum_LogType_ItemFlow;
  static const LogType ArmFlow = LogEnum_LogType_ArmFlow;
  static const LogType MoneyFlow = LogEnum_LogType_MoneyFlow;
  static const LogType TaskPromotionRank = LogEnum_LogType_TaskPromotionRank;
  static inline bool LogType_IsValid(int value) {
    return LogEnum_LogType_IsValid(value);
  }
  static const LogType LogType_MIN =
    LogEnum_LogType_LogType_MIN;
  static const LogType LogType_MAX =
    LogEnum_LogType_LogType_MAX;
  static const int LogType_ARRAYSIZE =
    LogEnum_LogType_LogType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogType_descriptor() {
    return LogEnum_LogType_descriptor();
  }
  static inline const ::std::string& LogType_Name(LogType value) {
    return LogEnum_LogType_Name(value);
  }
  static inline bool LogType_Parse(const ::std::string& name,
      LogType* value) {
    return LogEnum_LogType_Parse(name, value);
  }

  typedef LogEnum_OperateObject OperateObject;
  static const OperateObject HERO = LogEnum_OperateObject_HERO;
  static const OperateObject EXP = LogEnum_OperateObject_EXP;
  static const OperateObject LEVEL = LogEnum_OperateObject_LEVEL;
  static const OperateObject MONEY = LogEnum_OperateObject_MONEY;
  static const OperateObject REAL_AIR = LogEnum_OperateObject_REAL_AIR;
  static const OperateObject LIJIN = LogEnum_OperateObject_LIJIN;
  static const OperateObject YUANBAO = LogEnum_OperateObject_YUANBAO;
  static const OperateObject PK_AMOUNT = LogEnum_OperateObject_PK_AMOUNT;
  static const OperateObject GUILD_LILIAN = LogEnum_OperateObject_GUILD_LILIAN;
  static const OperateObject GUILD_GX = LogEnum_OperateObject_GUILD_GX;
  static const OperateObject TASK = LogEnum_OperateObject_TASK;
  static const OperateObject GOODS = LogEnum_OperateObject_GOODS;
  static const OperateObject SPELL = LogEnum_OperateObject_SPELL;
  static const OperateObject MOUNT = LogEnum_OperateObject_MOUNT;
  static const OperateObject MOUNT_SPELL = LogEnum_OperateObject_MOUNT_SPELL;
  static const OperateObject GEM = LogEnum_OperateObject_GEM;
  static const OperateObject BOW = LogEnum_OperateObject_BOW;
  static const OperateObject ARROW = LogEnum_OperateObject_ARROW;
  static const OperateObject SWEAPON = LogEnum_OperateObject_SWEAPON;
  static const OperateObject SWEAPON_SOUL = LogEnum_OperateObject_SWEAPON_SOUL;
  static const OperateObject MAIL = LogEnum_OperateObject_MAIL;
  static const OperateObject DUNGEON = LogEnum_OperateObject_DUNGEON;
  static const OperateObject SCENE = LogEnum_OperateObject_SCENE;
  static const OperateObject GUILD = LogEnum_OperateObject_GUILD;
  static const OperateObject GUILD_ASSETS = LogEnum_OperateObject_GUILD_ASSETS;
  static const OperateObject EQUIPMENT = LogEnum_OperateObject_EQUIPMENT;
  static const OperateObject SCENE_GOODS = LogEnum_OperateObject_SCENE_GOODS;
  static const OperateObject SOU_SHEN_POINT = LogEnum_OperateObject_SOU_SHEN_POINT;
  static const OperateObject PET_SPELL = LogEnum_OperateObject_PET_SPELL;
  static const OperateObject TIAN_JIE = LogEnum_OperateObject_TIAN_JIE;
  static const OperateObject TIAN_JIE_SPELL = LogEnum_OperateObject_TIAN_JIE_SPELL;
  static const OperateObject TIAN_ZUI = LogEnum_OperateObject_TIAN_ZUI;
  static const OperateObject TIAN_ZUI_SPELL = LogEnum_OperateObject_TIAN_ZUI_SPELL;
  static const OperateObject HONOR = LogEnum_OperateObject_HONOR;
  static const OperateObject SHENG_WANG = LogEnum_OperateObject_SHENG_WANG;
  static inline bool OperateObject_IsValid(int value) {
    return LogEnum_OperateObject_IsValid(value);
  }
  static const OperateObject OperateObject_MIN =
    LogEnum_OperateObject_OperateObject_MIN;
  static const OperateObject OperateObject_MAX =
    LogEnum_OperateObject_OperateObject_MAX;
  static const int OperateObject_ARRAYSIZE =
    LogEnum_OperateObject_OperateObject_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperateObject_descriptor() {
    return LogEnum_OperateObject_descriptor();
  }
  static inline const ::std::string& OperateObject_Name(OperateObject value) {
    return LogEnum_OperateObject_Name(value);
  }
  static inline bool OperateObject_Parse(const ::std::string& name,
      OperateObject* value) {
    return LogEnum_OperateObject_Parse(name, value);
  }

  typedef LogEnum_OperateType OperateType;
  static const OperateType INTERNAL = LogEnum_OperateType_INTERNAL;
  static const OperateType SYSTEM = LogEnum_OperateType_SYSTEM;
  static const OperateType GM = LogEnum_OperateType_GM;
  static const OperateType LOGIN = LogEnum_OperateType_LOGIN;
  static const OperateType LOGOUT = LogEnum_OperateType_LOGOUT;
  static const OperateType SCENE_ENTER = LogEnum_OperateType_SCENE_ENTER;
  static const OperateType SCENE_LEAVE = LogEnum_OperateType_SCENE_LEAVE;
  static const OperateType SCENE_TRANSPORT = LogEnum_OperateType_SCENE_TRANSPORT;
  static const OperateType KILL_HERO = LogEnum_OperateType_KILL_HERO;
  static const OperateType KILL_MONSTER = LogEnum_OperateType_KILL_MONSTER;
  static const OperateType RELIVE = LogEnum_OperateType_RELIVE;
  static const OperateType MEDITATE = LogEnum_OperateType_MEDITATE;
  static const OperateType MONSTER_DROP = LogEnum_OperateType_MONSTER_DROP;
  static const OperateType TERRITORY_STAY = LogEnum_OperateType_TERRITORY_STAY;
  static const OperateType TASK_DONE = LogEnum_OperateType_TASK_DONE;
  static const OperateType TASK_DONE_PAY = LogEnum_OperateType_TASK_DONE_PAY;
  static const OperateType TASK_DONE_ALL_PAY = LogEnum_OperateType_TASK_DONE_ALL_PAY;
  static const OperateType TASK_CHANGE_DIFFICULTY = LogEnum_OperateType_TASK_CHANGE_DIFFICULTY;
  static const OperateType TASK_CHANGE_PRIZE = LogEnum_OperateType_TASK_CHANGE_PRIZE;
  static const OperateType TASK_SWALLOW = LogEnum_OperateType_TASK_SWALLOW;
  static const OperateType TASK_REDUCE_GOODS = LogEnum_OperateType_TASK_REDUCE_GOODS;
  static const OperateType TASK_COLLECT_GOODS = LogEnum_OperateType_TASK_COLLECT_GOODS;
  static const OperateType TASK_DROP_GOODS = LogEnum_OperateType_TASK_DROP_GOODS;
  static const OperateType RECHARGE = LogEnum_OperateType_RECHARGE;
  static const OperateType TRADE = LogEnum_OperateType_TRADE;
  static const OperateType COLLECT_AUCTION_PRIZE = LogEnum_OperateType_COLLECT_AUCTION_PRIZE;
  static const OperateType SALE_ON = LogEnum_OperateType_SALE_ON;
  static const OperateType SALE_OFF = LogEnum_OperateType_SALE_OFF;
  static const OperateType SALE_BUY = LogEnum_OperateType_SALE_BUY;
  static const OperateType SALE_TAX = LogEnum_OperateType_SALE_TAX;
  static const OperateType TRADE_TAX = LogEnum_OperateType_TRADE_TAX;
  static const OperateType GOODS_USE = LogEnum_OperateType_GOODS_USE;
  static const OperateType SCENE_GOODS_PICK_UP = LogEnum_OperateType_SCENE_GOODS_PICK_UP;
  static const OperateType SCENE_GOODS_DROP = LogEnum_OperateType_SCENE_GOODS_DROP;
  static const OperateType OPEN_GRID = LogEnum_OperateType_OPEN_GRID;
  static const OperateType BIND_ON_EQUIP = LogEnum_OperateType_BIND_ON_EQUIP;
  static const OperateType ZHAO_HUI = LogEnum_OperateType_ZHAO_HUI;
  static const OperateType TU_HAO = LogEnum_OperateType_TU_HAO;
  static const OperateType FULI_CARD_USE = LogEnum_OperateType_FULI_CARD_USE;
  static const OperateType SKILL_UPDATE = LogEnum_OperateType_SKILL_UPDATE;
  static const OperateType RANK_ADMIRE = LogEnum_OperateType_RANK_ADMIRE;
  static const OperateType SHOP_BUY = LogEnum_OperateType_SHOP_BUY;
  static const OperateType SHOP_BUY_BACK = LogEnum_OperateType_SHOP_BUY_BACK;
  static const OperateType SHOP_SELL = LogEnum_OperateType_SHOP_SELL;
  static const OperateType SOU_SHEN_BUY = LogEnum_OperateType_SOU_SHEN_BUY;
  static const OperateType RESET_DUNGEON = LogEnum_OperateType_RESET_DUNGEON;
  static const OperateType AUTO_FINISH_DUNGEON = LogEnum_OperateType_AUTO_FINISH_DUNGEON;
  static const OperateType AUTO_FINISH_ALL_DUNGEON = LogEnum_OperateType_AUTO_FINISH_ALL_DUNGEON;
  static const OperateType AUTO_FINISH_DUNGEON_IMMEDIATE = LogEnum_OperateType_AUTO_FINISH_DUNGEON_IMMEDIATE;
  static const OperateType COLLECT_DUNGEON_PRIZE = LogEnum_OperateType_COLLECT_DUNGEON_PRIZE;
  static const OperateType COLLECT_DUNGEON_TEMP_PRIZE = LogEnum_OperateType_COLLECT_DUNGEON_TEMP_PRIZE;
  static const OperateType COLLECT_FIRST_PASS_PRIZE = LogEnum_OperateType_COLLECT_FIRST_PASS_PRIZE;
  static const OperateType CATCH_FIRE_MONKEY = LogEnum_OperateType_CATCH_FIRE_MONKEY;
  static const OperateType CHALLENGE_DROP = LogEnum_OperateType_CHALLENGE_DROP;
  static const OperateType COLLECT_BOSS_PRIZE = LogEnum_OperateType_COLLECT_BOSS_PRIZE;
  static const OperateType GUILD_CREATE = LogEnum_OperateType_GUILD_CREATE;
  static const OperateType GUILD_DISSOLVE = LogEnum_OperateType_GUILD_DISSOLVE;
  static const OperateType GUILD_DONATE = LogEnum_OperateType_GUILD_DONATE;
  static const OperateType GUILD_BANNER_UPGRADE = LogEnum_OperateType_GUILD_BANNER_UPGRADE;
  static const OperateType GUILD_BANNER_RENAME = LogEnum_OperateType_GUILD_BANNER_RENAME;
  static const OperateType GUILD_BANNER_MODIFY = LogEnum_OperateType_GUILD_BANNER_MODIFY;
  static const OperateType GUILD_BUY = LogEnum_OperateType_GUILD_BUY;
  static const OperateType GUILD_JOIN = LogEnum_OperateType_GUILD_JOIN;
  static const OperateType GUILD_LEAVE = LogEnum_OperateType_GUILD_LEAVE;
  static const OperateType GUILD_TOWER_UPGRADE = LogEnum_OperateType_GUILD_TOWER_UPGRADE;
  static const OperateType MOUNT_UPGRADE = LogEnum_OperateType_MOUNT_UPGRADE;
  static const OperateType MO_SHI_UPGRADE = LogEnum_OperateType_MO_SHI_UPGRADE;
  static const OperateType SUPER_ARM_UPGRADE = LogEnum_OperateType_SUPER_ARM_UPGRADE;
  static const OperateType REFINED_FORGE = LogEnum_OperateType_REFINED_FORGE;
  static const OperateType QUALITY_FORGE = LogEnum_OperateType_QUALITY_FORGE;
  static const OperateType LEVEL_FORGE = LogEnum_OperateType_LEVEL_FORGE;
  static const OperateType MELT = LogEnum_OperateType_MELT;
  static const OperateType MELT_GAOJI = LogEnum_OperateType_MELT_GAOJI;
  static const OperateType TI_PIN = LogEnum_OperateType_TI_PIN;
  static const OperateType REFRESH_BIAO_QUALITY = LogEnum_OperateType_REFRESH_BIAO_QUALITY;
  static const OperateType BIAO_REACH_DEST = LogEnum_OperateType_BIAO_REACH_DEST;
  static const OperateType BIAO_BEI_JIE_OWNER = LogEnum_OperateType_BIAO_BEI_JIE_OWNER;
  static const OperateType BIAO_BEI_JIE_ATTACKER = LogEnum_OperateType_BIAO_BEI_JIE_ATTACKER;
  static const OperateType GEM_MERGE = LogEnum_OperateType_GEM_MERGE;
  static const OperateType GEM_UPDATE = LogEnum_OperateType_GEM_UPDATE;
  static const OperateType HE_CHENG_EQUIP = LogEnum_OperateType_HE_CHENG_EQUIP;
  static const OperateType HE_CHENG_GOODS = LogEnum_OperateType_HE_CHENG_GOODS;
  static const OperateType HE_CHENG_PET_EQUIP = LogEnum_OperateType_HE_CHENG_PET_EQUIP;
  static const OperateType BOW_UPGRADE = LogEnum_OperateType_BOW_UPGRADE;
  static const OperateType ARROW_UPGRADE = LogEnum_OperateType_ARROW_UPGRADE;
  static const OperateType WEAPON_UPGRADE = LogEnum_OperateType_WEAPON_UPGRADE;
  static const OperateType WEAPON_SOUL_UPGRADE = LogEnum_OperateType_WEAPON_SOUL_UPGRADE;
  static const OperateType COLLECT_VIP_WEAPON = LogEnum_OperateType_COLLECT_VIP_WEAPON;
  static const OperateType LEARN_MAGIC_WEAPON_SPELL = LogEnum_OperateType_LEARN_MAGIC_WEAPON_SPELL;
  static const OperateType COLLECT_VIP_PRIZE = LogEnum_OperateType_COLLECT_VIP_PRIZE;
  static const OperateType COLLECT_VIP_WEEKLY_PRIZE = LogEnum_OperateType_COLLECT_VIP_WEEKLY_PRIZE;
  static const OperateType SEND_MAIL = LogEnum_OperateType_SEND_MAIL;
  static const OperateType COLLECT_MAIL = LogEnum_OperateType_COLLECT_MAIL;
  static const OperateType PAID_CHAT = LogEnum_OperateType_PAID_CHAT;
  static const OperateType COUPON = LogEnum_OperateType_COUPON;
  static const OperateType ACTIVITY_PAYBACK = LogEnum_OperateType_ACTIVITY_PAYBACK;
  static const OperateType SIGN = LogEnum_OperateType_SIGN;
  static const OperateType COLLECT_SIGN_PRIZE = LogEnum_OperateType_COLLECT_SIGN_PRIZE;
  static const OperateType LOTTERY = LogEnum_OperateType_LOTTERY;
  static const OperateType COLLECT_LOTTERY_PRIZE = LogEnum_OperateType_COLLECT_LOTTERY_PRIZE;
  static const OperateType COLLECT_OFFLINE_EXP = LogEnum_OperateType_COLLECT_OFFLINE_EXP;
  static const OperateType DIVINE = LogEnum_OperateType_DIVINE;
  static const OperateType COLLECT_MICRO_FIRST_LOGIN_PRIZE = LogEnum_OperateType_COLLECT_MICRO_FIRST_LOGIN_PRIZE;
  static const OperateType COLLECT_MICRO_DAILY_LOGIN_PRIZE = LogEnum_OperateType_COLLECT_MICRO_DAILY_LOGIN_PRIZE;
  static const OperateType PHOENIX_REFINE = LogEnum_OperateType_PHOENIX_REFINE;
  static const OperateType EXAM = LogEnum_OperateType_EXAM;
  static const OperateType SWORD_SACRIFICE_SCENE_RADIATE_PRIZE = LogEnum_OperateType_SWORD_SACRIFICE_SCENE_RADIATE_PRIZE;
  static const OperateType SWORD_SACRIFICE_HERO_RADIATE_PRIZE = LogEnum_OperateType_SWORD_SACRIFICE_HERO_RADIATE_PRIZE;
  static const OperateType SWORD_SACRIFICE_FOR_MONEY = LogEnum_OperateType_SWORD_SACRIFICE_FOR_MONEY;
  static const OperateType SWORD_SACRIFICE_FOR_YUANBAO = LogEnum_OperateType_SWORD_SACRIFICE_FOR_YUANBAO;
  static const OperateType COLLECT_SINGLE_STORY_PRIZE = LogEnum_OperateType_COLLECT_SINGLE_STORY_PRIZE;
  static const OperateType HUO_LIN_PERIODIC = LogEnum_OperateType_HUO_LIN_PERIODIC;
  static const OperateType TERRITORY_PRIZE = LogEnum_OperateType_TERRITORY_PRIZE;
  static const OperateType TERRITORY_WIN = LogEnum_OperateType_TERRITORY_WIN;
  static const OperateType TERRITORY_LOSE = LogEnum_OperateType_TERRITORY_LOSE;
  static const OperateType TERRITORY_KILL_HERO = LogEnum_OperateType_TERRITORY_KILL_HERO;
  static const OperateType PET_ADD_LIFE = LogEnum_OperateType_PET_ADD_LIFE;
  static const OperateType PET_EAT_GOODS = LogEnum_OperateType_PET_EAT_GOODS;
  static const OperateType TIAN_JIE_UPGRADE = LogEnum_OperateType_TIAN_JIE_UPGRADE;
  static const OperateType TIAN_ZUI_UPGRADE = LogEnum_OperateType_TIAN_ZUI_UPGRADE;
  static const OperateType ONE_ON_ONE_ADD_CHALLENGE_TIMES = LogEnum_OperateType_ONE_ON_ONE_ADD_CHALLENGE_TIMES;
  static const OperateType ONE_ON_ONE_ADD_CHALLENGE_REFINED_TIMES = LogEnum_OperateType_ONE_ON_ONE_ADD_CHALLENGE_REFINED_TIMES;
  static const OperateType ONE_ON_ONE_RESET_COOLDOWN = LogEnum_OperateType_ONE_ON_ONE_RESET_COOLDOWN;
  static const OperateType ONE_ON_ONE_HOURLY_PRIZE = LogEnum_OperateType_ONE_ON_ONE_HOURLY_PRIZE;
  static const OperateType ONE_ON_ONE_DAILY_PRIZE = LogEnum_OperateType_ONE_ON_ONE_DAILY_PRIZE;
  static const OperateType ONE_ON_ONE_CHALLENGE_PRIZE = LogEnum_OperateType_ONE_ON_ONE_CHALLENGE_PRIZE;
  static const OperateType EXCHANGE_GOODS = LogEnum_OperateType_EXCHANGE_GOODS;
  static const OperateType SHENG_WANG_TASK_DONE = LogEnum_OperateType_SHENG_WANG_TASK_DONE;
  static const OperateType EXCHANGE_SHENG_WANG_GOODS = LogEnum_OperateType_EXCHANGE_SHENG_WANG_GOODS;
  static const OperateType GUILD_CITY_PRIZE = LogEnum_OperateType_GUILD_CITY_PRIZE;
  static const OperateType GUILD_FIGHT_STAY = LogEnum_OperateType_GUILD_FIGHT_STAY;
  static const OperateType GUILD_FIGHT_WIN = LogEnum_OperateType_GUILD_FIGHT_WIN;
  static const OperateType GUILD_FIGHT_LOSE = LogEnum_OperateType_GUILD_FIGHT_LOSE;
  static const OperateType GUILD_FIGHT_KILL_HERO = LogEnum_OperateType_GUILD_FIGHT_KILL_HERO;
  static const OperateType LONG_CITY_PRIZE = LogEnum_OperateType_LONG_CITY_PRIZE;
  static const OperateType LONG_CITY_STAY = LogEnum_OperateType_LONG_CITY_STAY;
  static const OperateType LONG_CITY_WIN = LogEnum_OperateType_LONG_CITY_WIN;
  static const OperateType LONG_CITY_LOSE = LogEnum_OperateType_LONG_CITY_LOSE;
  static const OperateType LONG_CITY_KILL_HERO = LogEnum_OperateType_LONG_CITY_KILL_HERO;
  static const OperateType LONG_CITY_BEEN_KILLED = LogEnum_OperateType_LONG_CITY_BEEN_KILLED;
  static const OperateType RECHARGE_REBATE = LogEnum_OperateType_RECHARGE_REBATE;
  static const OperateType UPGRADE_PROMOTION = LogEnum_OperateType_UPGRADE_PROMOTION;
  static const OperateType PLATFORM_SPEED = LogEnum_OperateType_PLATFORM_SPEED;
  static const OperateType RANK_PROMOTION = LogEnum_OperateType_RANK_PROMOTION;
  static const OperateType DAILY_CONSUME = LogEnum_OperateType_DAILY_CONSUME;
  static const OperateType DING_ZHI = LogEnum_OperateType_DING_ZHI;
  static const OperateType DRAW_PRIZE = LogEnum_OperateType_DRAW_PRIZE;
  static const OperateType WL_FIRST_RECHARGE = LogEnum_OperateType_WL_FIRST_RECHARGE;
  static const OperateType WL_FIRST_LOGIN_PRIZE = LogEnum_OperateType_WL_FIRST_LOGIN_PRIZE;
  static const OperateType DISCOUNT_STORE_BUY = LogEnum_OperateType_DISCOUNT_STORE_BUY;
  static const OperateType USE_YUANBAO_PACKAGE = LogEnum_OperateType_USE_YUANBAO_PACKAGE;
  static const OperateType INVEST_UPGRADE_BANK = LogEnum_OperateType_INVEST_UPGRADE_BANK;
  static const OperateType INVEST_MONTHLY_BANK = LogEnum_OperateType_INVEST_MONTHLY_BANK;
  static const OperateType COLLECT_UPGRADE_BANK_INCOME = LogEnum_OperateType_COLLECT_UPGRADE_BANK_INCOME;
  static const OperateType COLLECT_MONTHLY_BANK_INCOME = LogEnum_OperateType_COLLECT_MONTHLY_BANK_INCOME;
  static const OperateType COLLECT_MONTHLY_BANK_ONLINE_INCOME = LogEnum_OperateType_COLLECT_MONTHLY_BANK_ONLINE_INCOME;
  static const OperateType COLLECT_PLATFORM_VIP_PRIZE = LogEnum_OperateType_COLLECT_PLATFORM_VIP_PRIZE;
  static const OperateType CLEAR_BINDED_YUANBAO = LogEnum_OperateType_CLEAR_BINDED_YUANBAO;
  static const OperateType USE_LEGEND_CARD = LogEnum_OperateType_USE_LEGEND_CARD;
  static const OperateType USE_CRIT_CARD = LogEnum_OperateType_USE_CRIT_CARD;
  static const OperateType RESET_KONG_CI = LogEnum_OperateType_RESET_KONG_CI;
  static const OperateType KONG_CI_SD = LogEnum_OperateType_KONG_CI_SD;
  static const OperateType COLLECT_KONG_CI_FIRST_PASS_PRIZE = LogEnum_OperateType_COLLECT_KONG_CI_FIRST_PASS_PRIZE;
  static const OperateType COLLECT_KONG_CI_SD_PRIZE = LogEnum_OperateType_COLLECT_KONG_CI_SD_PRIZE;
  static const OperateType COLLECT_KONG_CI_PRIZE = LogEnum_OperateType_COLLECT_KONG_CI_PRIZE;
  static const OperateType COLLECT_PLATFORM_PRIZE = LogEnum_OperateType_COLLECT_PLATFORM_PRIZE;
  static const OperateType COLLECT_WEIXIN_PRIZE = LogEnum_OperateType_COLLECT_WEIXIN_PRIZE;
  static const OperateType ARENA_BUY = LogEnum_OperateType_ARENA_BUY;
  static const OperateType GUILD_DUNGEON_COLLECT_BOSS_PRIZE = LogEnum_OperateType_GUILD_DUNGEON_COLLECT_BOSS_PRIZE;
  static const OperateType GUILD_PVP_PERIODIC = LogEnum_OperateType_GUILD_PVP_PERIODIC;
  static const OperateType GUILD_PVP_BOSS_DEAD_PRIZE = LogEnum_OperateType_GUILD_PVP_BOSS_DEAD_PRIZE;
  static const OperateType P360_SECURITY_PRIVILEGE_PRIZE = LogEnum_OperateType_P360_SECURITY_PRIVILEGE_PRIZE;
  static const OperateType EXCHANGE_HAOLI = LogEnum_OperateType_EXCHANGE_HAOLI;
  static const OperateType SHOU_CANG_UPGRADE = LogEnum_OperateType_SHOU_CANG_UPGRADE;
  static const OperateType DOTA_PRIZE = LogEnum_OperateType_DOTA_PRIZE;
  static const OperateType DEMON_UPGRADE = LogEnum_OperateType_DEMON_UPGRADE;
  static const OperateType CLOAK_UPGRADE = LogEnum_OperateType_CLOAK_UPGRADE;
  static const OperateType TIAN_XIE_UPGRADE = LogEnum_OperateType_TIAN_XIE_UPGRADE;
  static const OperateType MARRIAGE_GOODS = LogEnum_OperateType_MARRIAGE_GOODS;
  static const OperateType NEW_HUO_LIN_PERIODIC = LogEnum_OperateType_NEW_HUO_LIN_PERIODIC;
  static const OperateType NEW_HUO_LIN_BOSS_DEAD_PRIZE = LogEnum_OperateType_NEW_HUO_LIN_BOSS_DEAD_PRIZE;
  static const OperateType DIVORCE = LogEnum_OperateType_DIVORCE;
  static const OperateType MARRIAGE_WEDDING_GIFT = LogEnum_OperateType_MARRIAGE_WEDDING_GIFT;
  static const OperateType MARRIAGE_WEDDING = LogEnum_OperateType_MARRIAGE_WEDDING;
  static const OperateType MARRIAGE_WEDDING_STAY = LogEnum_OperateType_MARRIAGE_WEDDING_STAY;
  static const OperateType MARRIAGE_WEDDING_DRINK = LogEnum_OperateType_MARRIAGE_WEDDING_DRINK;
  static const OperateType MARRIAGE_GOODS_UPGRADE = LogEnum_OperateType_MARRIAGE_GOODS_UPGRADE;
  static const OperateType MARRIAGE_WEDDING_GIFT_COLLECT = LogEnum_OperateType_MARRIAGE_WEDDING_GIFT_COLLECT;
  static const OperateType MONSTER_FIGHT_STAY = LogEnum_OperateType_MONSTER_FIGHT_STAY;
  static const OperateType RECHARGE_EXCHANGE_LINGPAI = LogEnum_OperateType_RECHARGE_EXCHANGE_LINGPAI;
  static const OperateType LUCKY_DRAW_PRIZE = LogEnum_OperateType_LUCKY_DRAW_PRIZE;
  static const OperateType YI_TIAN_SHEN_JUE = LogEnum_OperateType_YI_TIAN_SHEN_JUE;
  static const OperateType BOSS_CAI_JI = LogEnum_OperateType_BOSS_CAI_JI;
  static const OperateType WASH_SUPER_WEAPON = LogEnum_OperateType_WASH_SUPER_WEAPON;
  static const OperateType PLATFORM_SUMMER_PRIZE = LogEnum_OperateType_PLATFORM_SUMMER_PRIZE;
  static const OperateType GLOBAL_RECHARGE_PRIZE = LogEnum_OperateType_GLOBAL_RECHARGE_PRIZE;
  static const OperateType VIP_PROMOTION = LogEnum_OperateType_VIP_PROMOTION;
  static const OperateType MARRIAGE_PROMOTION = LogEnum_OperateType_MARRIAGE_PROMOTION;
  static const OperateType MONSTER_FIGHT_CITY_BOSS_DEAD_PRIZE = LogEnum_OperateType_MONSTER_FIGHT_CITY_BOSS_DEAD_PRIZE;
  static const OperateType TRANSFER = LogEnum_OperateType_TRANSFER;
  static const OperateType JINSHAN_PLATFORM_PRIZE = LogEnum_OperateType_JINSHAN_PLATFORM_PRIZE;
  static const OperateType UPGRADE_JING_JIE = LogEnum_OperateType_UPGRADE_JING_JIE;
  static const OperateType JING_JIE_DUNGEON_PRIZE = LogEnum_OperateType_JING_JIE_DUNGEON_PRIZE;
  static const OperateType COLLECT_LONG_YUAN_PER_PERIOD = LogEnum_OperateType_COLLECT_LONG_YUAN_PER_PERIOD;
  static const OperateType CLEAR_LONG_YUAN_COUNTDOWN = LogEnum_OperateType_CLEAR_LONG_YUAN_COUNTDOWN;
  static const OperateType TU_LONG_DUNGEON_PRIZE = LogEnum_OperateType_TU_LONG_DUNGEON_PRIZE;
  static const OperateType ENTER_TIAN_MEN = LogEnum_OperateType_ENTER_TIAN_MEN;
  static const OperateType COLLECT_TIAN_MEN_PRIZE = LogEnum_OperateType_COLLECT_TIAN_MEN_PRIZE;
  static const OperateType TASK_PROMOTION_TASK_FINISH = LogEnum_OperateType_TASK_PROMOTION_TASK_FINISH;
  static const OperateType TASK_PROMOTION_POINT_COLLECT = LogEnum_OperateType_TASK_PROMOTION_POINT_COLLECT;
  static const OperateType TASK_PROMOTION_RESET = LogEnum_OperateType_TASK_PROMOTION_RESET;
  static const OperateType EXCHANGE_ROUNDLIBAO = LogEnum_OperateType_EXCHANGE_ROUNDLIBAO;
  static const OperateType EXCHANGE_MAYDAY = LogEnum_OperateType_EXCHANGE_MAYDAY;
  static const OperateType EXCHANGE_DAILY_CONSUME_EXCHANGE = LogEnum_OperateType_EXCHANGE_DAILY_CONSUME_EXCHANGE;
  static const OperateType DAILY_CARD = LogEnum_OperateType_DAILY_CARD;
  static const OperateType JIN_JIE_DAN_DEMON = LogEnum_OperateType_JIN_JIE_DAN_DEMON;
  static const OperateType JIN_JIE_DAN_CLOAK = LogEnum_OperateType_JIN_JIE_DAN_CLOAK;
  static const OperateType GALLUP = LogEnum_OperateType_GALLUP;
  static const OperateType LUCKY_DRAW_PRIZE_POINT_EXCHANGE = LogEnum_OperateType_LUCKY_DRAW_PRIZE_POINT_EXCHANGE;
  static const OperateType RECHARE_GOLD_TREE = LogEnum_OperateType_RECHARE_GOLD_TREE;
  static const OperateType DAILY_AUCTION = LogEnum_OperateType_DAILY_AUCTION;
  static const OperateType DAILY_LUCKY_WHEEL = LogEnum_OperateType_DAILY_LUCKY_WHEEL;
  static const OperateType MARRIAGE_STORAGE = LogEnum_OperateType_MARRIAGE_STORAGE;
  static const OperateType QIAN_QIU_DA_JIE_UPGRADE = LogEnum_OperateType_QIAN_QIU_DA_JIE_UPGRADE;
  static const OperateType LAO_BING_BACK_GLOBAL = LogEnum_OperateType_LAO_BING_BACK_GLOBAL;
  static const OperateType LAO_BING_BACK_PERSONAL = LogEnum_OperateType_LAO_BING_BACK_PERSONAL;
  static const OperateType RECHARGE_EXCHANGE_JINJIE = LogEnum_OperateType_RECHARGE_EXCHANGE_JINJIE;
  static const OperateType DAO_SHI_LOGIN = LogEnum_OperateType_DAO_SHI_LOGIN;
  static const OperateType DAO_SHI_WU_SHUANG_CITY = LogEnum_OperateType_DAO_SHI_WU_SHUANG_CITY;
  static const OperateType DAO_SHI_LONG_CITY = LogEnum_OperateType_DAO_SHI_LONG_CITY;
  static const OperateType CHI_HUO_SHEN_GONG_UPGRADE = LogEnum_OperateType_CHI_HUO_SHEN_GONG_UPGRADE;
  static const OperateType GUILD_PLANT_DO_PLANT = LogEnum_OperateType_GUILD_PLANT_DO_PLANT;
  static const OperateType GUILD_PLANT_DO_UPGRADE = LogEnum_OperateType_GUILD_PLANT_DO_UPGRADE;
  static const OperateType GUILD_PLANT_COLLECT_PRIZE = LogEnum_OperateType_GUILD_PLANT_COLLECT_PRIZE;
  static const OperateType GUILD_PLANT_TASK_PRIZE = LogEnum_OperateType_GUILD_PLANT_TASK_PRIZE;
  static const OperateType YY_TRANSFER = LogEnum_OperateType_YY_TRANSFER;
  static const OperateType CHANGE_RACE = LogEnum_OperateType_CHANGE_RACE;
  static const OperateType HTZ_PRIZE = LogEnum_OperateType_HTZ_PRIZE;
  static const OperateType NATIONAL_DAY_LOGIN_PRIZE = LogEnum_OperateType_NATIONAL_DAY_LOGIN_PRIZE;
  static const OperateType NATIONAL_DAY_RECHARGE_PRIZE = LogEnum_OperateType_NATIONAL_DAY_RECHARGE_PRIZE;
  static const OperateType NATIONAL_DAY_SHOP = LogEnum_OperateType_NATIONAL_DAY_SHOP;
  static const OperateType NEW_DRAW_PRIZE = LogEnum_OperateType_NEW_DRAW_PRIZE;
  static const OperateType NEW_DRAW_PRIZE_POINT_EXCHANGE = LogEnum_OperateType_NEW_DRAW_PRIZE_POINT_EXCHANGE;
  static const OperateType MULTI_PRIZE_ON_LIMITED_TIME_GOODS_USE = LogEnum_OperateType_MULTI_PRIZE_ON_LIMITED_TIME_GOODS_USE;
  static const OperateType SUPER_WEAPON_MIX_GEM = LogEnum_OperateType_SUPER_WEAPON_MIX_GEM;
  static const OperateType SUPER_WEAPON_MOVE_GEM = LogEnum_OperateType_SUPER_WEAPON_MOVE_GEM;
  static const OperateType SELECT_IMAGE = LogEnum_OperateType_SELECT_IMAGE;
  static const OperateType WANDA_MOVIE = LogEnum_OperateType_WANDA_MOVIE;
  static const OperateType CHENG_BA_COLLECT_PARTICIPATE_PRIZE = LogEnum_OperateType_CHENG_BA_COLLECT_PARTICIPATE_PRIZE;
  static const OperateType CHENG_BA_COLLECT_WIN_PRIZE = LogEnum_OperateType_CHENG_BA_COLLECT_WIN_PRIZE;
  static const OperateType CHENG_BA_COLLECT_TAX_PRIZE = LogEnum_OperateType_CHENG_BA_COLLECT_TAX_PRIZE;
  static const OperateType REXHARGE_BOX_REBATE = LogEnum_OperateType_REXHARGE_BOX_REBATE;
  static const OperateType MOUNT_TONGLING_ACTIVE = LogEnum_OperateType_MOUNT_TONGLING_ACTIVE;
  static const OperateType CONSUME_BOX_REBATE = LogEnum_OperateType_CONSUME_BOX_REBATE;
  static const OperateType WU_LIN_GROUP_WIN = LogEnum_OperateType_WU_LIN_GROUP_WIN;
  static const OperateType WU_LIN_GROUP_LOSE = LogEnum_OperateType_WU_LIN_GROUP_LOSE;
  static const OperateType WU_LIN_16_WIN = LogEnum_OperateType_WU_LIN_16_WIN;
  static const OperateType WU_LIN_16_LOSE = LogEnum_OperateType_WU_LIN_16_LOSE;
  static const OperateType WU_LIN_8_WIN = LogEnum_OperateType_WU_LIN_8_WIN;
  static const OperateType WU_LIN_8_LOSE = LogEnum_OperateType_WU_LIN_8_LOSE;
  static const OperateType WU_LIN_4_WIN = LogEnum_OperateType_WU_LIN_4_WIN;
  static const OperateType WU_LIN_4_LOSE = LogEnum_OperateType_WU_LIN_4_LOSE;
  static const OperateType WU_LIN_2_WIN = LogEnum_OperateType_WU_LIN_2_WIN;
  static const OperateType WU_LIN_2_LOSE = LogEnum_OperateType_WU_LIN_2_LOSE;
  static const OperateType DEL_GOODS = LogEnum_OperateType_DEL_GOODS;
  static const OperateType MO_BING_UPGRADE = LogEnum_OperateType_MO_BING_UPGRADE;
  static const OperateType MO_BING_SPELL_UPGRADE = LogEnum_OperateType_MO_BING_SPELL_UPGRADE;
  static const OperateType MO_BING_RECHARGE_PRIZE = LogEnum_OperateType_MO_BING_RECHARGE_PRIZE;
  static const OperateType COLLECT_WEIXIN_PRIZE2 = LogEnum_OperateType_COLLECT_WEIXIN_PRIZE2;
  static const OperateType WU_LIN_BID_PRIZE = LogEnum_OperateType_WU_LIN_BID_PRIZE;
  static const OperateType LONG_XIAN_EXCHANGE = LogEnum_OperateType_LONG_XIAN_EXCHANGE;
  static const OperateType WASH_XUNZHANG = LogEnum_OperateType_WASH_XUNZHANG;
  static const OperateType ZHAN_CHANG_EXCHANGE = LogEnum_OperateType_ZHAN_CHANG_EXCHANGE;
  static const OperateType FIGHT_AMOUNT_CHANGED_VALUE_RANK_DAILY_PRIZE = LogEnum_OperateType_FIGHT_AMOUNT_CHANGED_VALUE_RANK_DAILY_PRIZE;
  static const OperateType YY_PURPlE_VIP = LogEnum_OperateType_YY_PURPlE_VIP;
  static const OperateType CHRISTMAS_EXCHANGE = LogEnum_OperateType_CHRISTMAS_EXCHANGE;
  static const OperateType CHRISTMAS_DECORATE = LogEnum_OperateType_CHRISTMAS_DECORATE;
  static const OperateType CHRISTMAS_COLLECT_TREE_PRIZE = LogEnum_OperateType_CHRISTMAS_COLLECT_TREE_PRIZE;
  static const OperateType CHRISTMAS_LUCKY_TRY = LogEnum_OperateType_CHRISTMAS_LUCKY_TRY;
  static const OperateType CREDITS_SHOP = LogEnum_OperateType_CREDITS_SHOP;
  static const OperateType TIAO_ZHAN_EXCHANGE = LogEnum_OperateType_TIAO_ZHAN_EXCHANGE;
  static const OperateType TIAO_ZHAN_PAIR = LogEnum_OperateType_TIAO_ZHAN_PAIR;
  static const OperateType TIAO_ZHAN_PAIR_TIMEOUT = LogEnum_OperateType_TIAO_ZHAN_PAIR_TIMEOUT;
  static const OperateType TIAO_ZHAN_PAIR_RESULT_TIMEOUT = LogEnum_OperateType_TIAO_ZHAN_PAIR_RESULT_TIMEOUT;
  static const OperateType TIAO_ZHAN_UNPAIR = LogEnum_OperateType_TIAO_ZHAN_UNPAIR;
  static const OperateType MONOPOLY_RANDOM_ROLL = LogEnum_OperateType_MONOPOLY_RANDOM_ROLL;
  static const OperateType MONOPOLY_CONTROLLABLE_ROLL = LogEnum_OperateType_MONOPOLY_CONTROLLABLE_ROLL;
  static const OperateType MONOPOLY_ROLL_PRIZE = LogEnum_OperateType_MONOPOLY_ROLL_PRIZE;
  static const OperateType MONOPOLY_ADD_ROLL_TIMES = LogEnum_OperateType_MONOPOLY_ADD_ROLL_TIMES;
  static const OperateType CREDITS_DRAW_EXCHANGE = LogEnum_OperateType_CREDITS_DRAW_EXCHANGE;
  static const OperateType CREDITS_DRAW_DRAW = LogEnum_OperateType_CREDITS_DRAW_DRAW;
  static const OperateType COLLECT_SHENZHUANG = LogEnum_OperateType_COLLECT_SHENZHUANG;
  static const OperateType GUILD_HONG_BAO_GIVE = LogEnum_OperateType_GUILD_HONG_BAO_GIVE;
  static const OperateType GUILD_HONG_BAO_COLLECT = LogEnum_OperateType_GUILD_HONG_BAO_COLLECT;
  static const OperateType LOGIN_PROMOTION = LogEnum_OperateType_LOGIN_PROMOTION;
  static const OperateType DAILY_ONELINE_PROMOTION = LogEnum_OperateType_DAILY_ONELINE_PROMOTION;
  static const OperateType LOVE_DAILY_PRIZE = LogEnum_OperateType_LOVE_DAILY_PRIZE;
  static const OperateType LOVE_EXCHANGE = LogEnum_OperateType_LOVE_EXCHANGE;
  static const OperateType LOVE_WEIXIN = LogEnum_OperateType_LOVE_WEIXIN;
  static const OperateType LOVE_ONLINE1 = LogEnum_OperateType_LOVE_ONLINE1;
  static const OperateType LOVE_ONLINE2 = LogEnum_OperateType_LOVE_ONLINE2;
  static const OperateType LOVE_ONLINE3 = LogEnum_OperateType_LOVE_ONLINE3;
  static const OperateType LOVE_ONLINE4 = LogEnum_OperateType_LOVE_ONLINE4;
  static const OperateType WU_DAO_UPGRADE = LogEnum_OperateType_WU_DAO_UPGRADE;
  static const OperateType RECHARGE_EXCHANGE = LogEnum_OperateType_RECHARGE_EXCHANGE;
  static const OperateType CONSUME_EXCHANGE_PROMOTION = LogEnum_OperateType_CONSUME_EXCHANGE_PROMOTION;
  static const OperateType OFFLINE_EXCHANGE_PROMOTION = LogEnum_OperateType_OFFLINE_EXCHANGE_PROMOTION;
  static const OperateType FREE_EXCHANGE = LogEnum_OperateType_FREE_EXCHANGE;
  static const OperateType NIDAOQIANKUN = LogEnum_OperateType_NIDAOQIANKUN;
  static const OperateType SECRET_SHOP_BUY = LogEnum_OperateType_SECRET_SHOP_BUY;
  static const OperateType SECRET_SHOP_REFRESH = LogEnum_OperateType_SECRET_SHOP_REFRESH;
  static const OperateType TONG_TAIN_TA_REFRESH = LogEnum_OperateType_TONG_TAIN_TA_REFRESH;
  static const OperateType ANNIVERSARY_RECHARGE_FANLI = LogEnum_OperateType_ANNIVERSARY_RECHARGE_FANLI;
  static const OperateType ANNIVERSARY_CAKE = LogEnum_OperateType_ANNIVERSARY_CAKE;
  static const OperateType ANNIVERSARY_DAILY_PRIZE = LogEnum_OperateType_ANNIVERSARY_DAILY_PRIZE;
  static const OperateType FIREWORK_PROMOTION = LogEnum_OperateType_FIREWORK_PROMOTION;
  static const OperateType ANNIVERSARY_TASK_PRIZE = LogEnum_OperateType_ANNIVERSARY_TASK_PRIZE;
  static const OperateType DAILY_FIRST_RECHARGE_DAILY_PRIZE = LogEnum_OperateType_DAILY_FIRST_RECHARGE_DAILY_PRIZE;
  static const OperateType DAILY_FIRST_RECHARGE_FINAL_PRIZE = LogEnum_OperateType_DAILY_FIRST_RECHARGE_FINAL_PRIZE;
  static const OperateType MELEE_STAY = LogEnum_OperateType_MELEE_STAY;
  static const OperateType MELEE_RELIVE = LogEnum_OperateType_MELEE_RELIVE;
  static const OperateType HE_CHENG_MOUNT_EQUIP = LogEnum_OperateType_HE_CHENG_MOUNT_EQUIP;
  static const OperateType ANNIVERSARY_REFRESH_TASK = LogEnum_OperateType_ANNIVERSARY_REFRESH_TASK;
  static const OperateType HUGE_DATA_PRIZE = LogEnum_OperateType_HUGE_DATA_PRIZE;
  static const OperateType ANNIVERSARY_JP_EXCHANGE = LogEnum_OperateType_ANNIVERSARY_JP_EXCHANGE;
  static const OperateType ANNIVERSARY_CONSUME_RETURN = LogEnum_OperateType_ANNIVERSARY_CONSUME_RETURN;
  static const OperateType ANNIVERSARY_VIP_DAILY_PRIZE = LogEnum_OperateType_ANNIVERSARY_VIP_DAILY_PRIZE;
  static const OperateType ANNIVERSARY_FINAL_TASK_PRIZE = LogEnum_OperateType_ANNIVERSARY_FINAL_TASK_PRIZE;
  static const OperateType SHIELD_UPGRADE = LogEnum_OperateType_SHIELD_UPGRADE;
  static const OperateType MYSTERY_DUNGEON_LING_GUANG = LogEnum_OperateType_MYSTERY_DUNGEON_LING_GUANG;
  static const OperateType LING_GUANG_COST = LogEnum_OperateType_LING_GUANG_COST;
  static const OperateType LING_GUANG_DAILY_PICK = LogEnum_OperateType_LING_GUANG_DAILY_PICK;
  static const OperateType LING_GUANG_ADD = LogEnum_OperateType_LING_GUANG_ADD;
  static const OperateType MOUNT_LEVEL_FORGE = LogEnum_OperateType_MOUNT_LEVEL_FORGE;
  static const OperateType PET_LEVEL_FORGE = LogEnum_OperateType_PET_LEVEL_FORGE;
  static const OperateType SHIELD_LEVEL_FORGE = LogEnum_OperateType_SHIELD_LEVEL_FORGE;
  static const OperateType WUYI_RECHARGE_FANLI = LogEnum_OperateType_WUYI_RECHARGE_FANLI;
  static const OperateType MOUNT_TI_PIN = LogEnum_OperateType_MOUNT_TI_PIN;
  static const OperateType PET_TI_PIN = LogEnum_OperateType_PET_TI_PIN;
  static const OperateType SHIELD_TI_PIN = LogEnum_OperateType_SHIELD_TI_PIN;
  static const OperateType LOGIN_PROMOTION2 = LogEnum_OperateType_LOGIN_PROMOTION2;
  static const OperateType DAILY_FIRST_RECHARGE_DAILY_PRIZE2 = LogEnum_OperateType_DAILY_FIRST_RECHARGE_DAILY_PRIZE2;
  static const OperateType DAILY_FIRST_RECHARGE_FINAL_PRIZE2 = LogEnum_OperateType_DAILY_FIRST_RECHARGE_FINAL_PRIZE2;
  static const OperateType LAO_DONG_ZUI_GUANG_RONG = LogEnum_OperateType_LAO_DONG_ZUI_GUANG_RONG;
  static const OperateType TIAN_MING_BAO_JIAN_TRIGGER = LogEnum_OperateType_TIAN_MING_BAO_JIAN_TRIGGER;
  static const OperateType TIAN_MING_VALUES_REVERT = LogEnum_OperateType_TIAN_MING_VALUES_REVERT;
  static const OperateType TIAN_MING_VALUES_RESET = LogEnum_OperateType_TIAN_MING_VALUES_RESET;
  static const OperateType HERO_BOSS_CARD_REFRESH = LogEnum_OperateType_HERO_BOSS_CARD_REFRESH;
  static const OperateType HERO_BOSS_CARD_CALL = LogEnum_OperateType_HERO_BOSS_CARD_CALL;
  static const OperateType HERO_BOSS_CARD_DUNGEON_FINISH = LogEnum_OperateType_HERO_BOSS_CARD_DUNGEON_FINISH;
  static const OperateType GUILD_BOSS_CARD_FEED = LogEnum_OperateType_GUILD_BOSS_CARD_FEED;
  static const OperateType GUILD_BOSS_CARD_CALL = LogEnum_OperateType_GUILD_BOSS_CARD_CALL;
  static const OperateType GUILD_BOSS_CARD_CALL_PRIZE = LogEnum_OperateType_GUILD_BOSS_CARD_CALL_PRIZE;
  static const OperateType GUILD_BOSS_CARD_KILL_PRIZE = LogEnum_OperateType_GUILD_BOSS_CARD_KILL_PRIZE;
  static const OperateType BUY_MONTHLY_CARD = LogEnum_OperateType_BUY_MONTHLY_CARD;
  static const OperateType MONTHLY_CARD_DAILY_PRIZE = LogEnum_OperateType_MONTHLY_CARD_DAILY_PRIZE;
  static const OperateType MONTHLY_CARD_TASK_PRIZE = LogEnum_OperateType_MONTHLY_CARD_TASK_PRIZE;
  static const OperateType GOODS_ACTIVE_MONTHLY_CARD = LogEnum_OperateType_GOODS_ACTIVE_MONTHLY_CARD;
  static const OperateType MONTHLY_CARD_YUANBAO_FINISH_TASK = LogEnum_OperateType_MONTHLY_CARD_YUANBAO_FINISH_TASK;
  static const OperateType JIUWEIHU_WEAPON = LogEnum_OperateType_JIUWEIHU_WEAPON;
  static const OperateType HE_CHENG_SHIELD_EQUIP = LogEnum_OperateType_HE_CHENG_SHIELD_EQUIP;
  static const OperateType TONG_TIAN_BAO_JIAN = LogEnum_OperateType_TONG_TIAN_BAO_JIAN;
  static const OperateType HAIDI_MAP_FREE_TICKET = LogEnum_OperateType_HAIDI_MAP_FREE_TICKET;
  static const OperateType HAIDI_MAP_BISHUIDAN = LogEnum_OperateType_HAIDI_MAP_BISHUIDAN;
  static const OperateType HAIDI_MAP_TICKET = LogEnum_OperateType_HAIDI_MAP_TICKET;
  static const OperateType BU_YU_ENTER_DUNGEON = LogEnum_OperateType_BU_YU_ENTER_DUNGEON;
  static const OperateType GOODS_UPGRADE = LogEnum_OperateType_GOODS_UPGRADE;
  static const OperateType BU_YU_SHOP = LogEnum_OperateType_BU_YU_SHOP;
  static const OperateType BU_YU_BUY_BULLET = LogEnum_OperateType_BU_YU_BUY_BULLET;
  static const OperateType GOODS_FORCE_REMOVE = LogEnum_OperateType_GOODS_FORCE_REMOVE;
  static const OperateType QIXI_DAILY_PRIZE = LogEnum_OperateType_QIXI_DAILY_PRIZE;
  static const OperateType JIANDAO_UPGRADE = LogEnum_OperateType_JIANDAO_UPGRADE;
  static const OperateType LING_YU_UPGRADE = LogEnum_OperateType_LING_YU_UPGRADE;
  static const OperateType COMEBACK = LogEnum_OperateType_COMEBACK;
  static const OperateType BUY_HAMMER = LogEnum_OperateType_BUY_HAMMER;
  static const OperateType BUY_DA_DI_SHU_ITEM = LogEnum_OperateType_BUY_DA_DI_SHU_ITEM;
  static const OperateType WELFARE_COMPENSATION = LogEnum_OperateType_WELFARE_COMPENSATION;
  static const OperateType YU_YI_GE_UPGRADE = LogEnum_OperateType_YU_YI_GE_UPGRADE;
  static const OperateType YU_YI_GE_FASHION_TO_BLESS_AMOUNT = LogEnum_OperateType_YU_YI_GE_FASHION_TO_BLESS_AMOUNT;
  static const OperateType YU_YI_GE_MOVE_FASHION = LogEnum_OperateType_YU_YI_GE_MOVE_FASHION;
  static const OperateType FENG_YUN_DAO_BUY_CHALLENGE_COUNT = LogEnum_OperateType_FENG_YUN_DAO_BUY_CHALLENGE_COUNT;
  static const OperateType BOW_TONGLING_ACTIVE = LogEnum_OperateType_BOW_TONGLING_ACTIVE;
  static const OperateType SYS_HONG_BAO_COLLETED = LogEnum_OperateType_SYS_HONG_BAO_COLLETED;
  static const OperateType INLAY_BAO_SHI = LogEnum_OperateType_INLAY_BAO_SHI;
  static const OperateType REMOVE_BAO_SHI = LogEnum_OperateType_REMOVE_BAO_SHI;
  static const OperateType BAO_SHI_RESET = LogEnum_OperateType_BAO_SHI_RESET;
  static const OperateType BAO_SHI_HE_CHENG = LogEnum_OperateType_BAO_SHI_HE_CHENG;
  static const OperateType EXCHANGE_COST_GOODS_AND_VALUES = LogEnum_OperateType_EXCHANGE_COST_GOODS_AND_VALUES;
  static const OperateType PET_TONGLING_ACTIVE = LogEnum_OperateType_PET_TONGLING_ACTIVE;
  static const OperateType PET_TONG_LING_GIFT_SPELL_UPGRADE = LogEnum_OperateType_PET_TONG_LING_GIFT_SPELL_UPGRADE;
  static const OperateType MO_FANG_UPGRADE = LogEnum_OperateType_MO_FANG_UPGRADE;
  static const OperateType FORCE_REMOVE_FU_LI_CARD = LogEnum_OperateType_FORCE_REMOVE_FU_LI_CARD;
  static const OperateType CHOU_JIANG_FAN_LI_CHOU_JIANG = LogEnum_OperateType_CHOU_JIANG_FAN_LI_CHOU_JIANG;
  static const OperateType CHOU_JIANG_FAN_LI_RECHARGE = LogEnum_OperateType_CHOU_JIANG_FAN_LI_RECHARGE;
  static const OperateType CHOU_JIANG_FAN_LI_GOODS_ADD = LogEnum_OperateType_CHOU_JIANG_FAN_LI_GOODS_ADD;
  static const OperateType CHANGE_LV_HANDLER = LogEnum_OperateType_CHANGE_LV_HANDLER;
  static const OperateType NEW_ROBOT = LogEnum_OperateType_NEW_ROBOT;
  static const OperateType DAILY_SHOP = LogEnum_OperateType_DAILY_SHOP;
  static inline bool OperateType_IsValid(int value) {
    return LogEnum_OperateType_IsValid(value);
  }
  static const OperateType OperateType_MIN =
    LogEnum_OperateType_OperateType_MIN;
  static const OperateType OperateType_MAX =
    LogEnum_OperateType_OperateType_MAX;
  static const int OperateType_ARRAYSIZE =
    LogEnum_OperateType_OperateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperateType_descriptor() {
    return LogEnum_OperateType_descriptor();
  }
  static inline const ::std::string& OperateType_Name(OperateType value) {
    return LogEnum_OperateType_Name(value);
  }
  static inline bool OperateType_Parse(const ::std::string& name,
      OperateType* value) {
    return LogEnum_OperateType_Parse(name, value);
  }

  typedef LogEnum_TransportType TransportType;
  static const TransportType GATE = LogEnum_TransportType_GATE;
  static const TransportType CHANGE_LINE = LogEnum_TransportType_CHANGE_LINE;
  static const TransportType CITY_RELIVE = LogEnum_TransportType_CITY_RELIVE;
  static const TransportType RETURN_CITY = LogEnum_TransportType_RETURN_CITY;
  static const TransportType TP_GOODS = LogEnum_TransportType_TP_GOODS;
  static const TransportType NPC = LogEnum_TransportType_NPC;
  static const TransportType MAP = LogEnum_TransportType_MAP;
  static const TransportType TP_TASK = LogEnum_TransportType_TP_TASK;
  static const TransportType ASSIST = LogEnum_TransportType_ASSIST;
  static const TransportType ENTER_DUNGEON = LogEnum_TransportType_ENTER_DUNGEON;
  static const TransportType LEAVE_DUNGEON = LogEnum_TransportType_LEAVE_DUNGEON;
  static const TransportType FIRE_MONKY = LogEnum_TransportType_FIRE_MONKY;
  static const TransportType GM_TP = LogEnum_TransportType_GM_TP;
  static const TransportType GUILD_FIGHT = LogEnum_TransportType_GUILD_FIGHT;
  static const TransportType LONG_CITY = LogEnum_TransportType_LONG_CITY;
  static const TransportType ONE_ON_ONE = LogEnum_TransportType_ONE_ON_ONE;
  static const TransportType MARRIAGE = LogEnum_TransportType_MARRIAGE;
  static const TransportType GOLD_PIG = LogEnum_TransportType_GOLD_PIG;
  static const TransportType CHRISTMAS = LogEnum_TransportType_CHRISTMAS;
  static const TransportType ENTER_TIAO_ZHAN = LogEnum_TransportType_ENTER_TIAO_ZHAN;
  static const TransportType NIAN_SHOU = LogEnum_TransportType_NIAN_SHOU;
  static const TransportType ANNI_CAKE = LogEnum_TransportType_ANNI_CAKE;
  static const TransportType GUILD_BOSS = LogEnum_TransportType_GUILD_BOSS;
  static const TransportType HAIDI_MAP = LogEnum_TransportType_HAIDI_MAP;
  static inline bool TransportType_IsValid(int value) {
    return LogEnum_TransportType_IsValid(value);
  }
  static const TransportType TransportType_MIN =
    LogEnum_TransportType_TransportType_MIN;
  static const TransportType TransportType_MAX =
    LogEnum_TransportType_TransportType_MAX;
  static const int TransportType_ARRAYSIZE =
    LogEnum_TransportType_TransportType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransportType_descriptor() {
    return LogEnum_TransportType_descriptor();
  }
  static inline const ::std::string& TransportType_Name(TransportType value) {
    return LogEnum_TransportType_Name(value);
  }
  static inline bool TransportType_Parse(const ::std::string& name,
      TransportType* value) {
    return LogEnum_TransportType_Parse(name, value);
  }

  typedef LogEnum_SceneType SceneType;
  static const SceneType NORMAL = LogEnum_SceneType_NORMAL;
  static const SceneType STORY_DUNGEON = LogEnum_SceneType_STORY_DUNGEON;
  static const SceneType CHALLENGE_DUNGEON = LogEnum_SceneType_CHALLENGE_DUNGEON;
  static const SceneType VIP_DUNGEON = LogEnum_SceneType_VIP_DUNGEON;
  static const SceneType DEFENCE_DUNGEON = LogEnum_SceneType_DEFENCE_DUNGEON;
  static const SceneType LING_YUN_DUNGEON = LogEnum_SceneType_LING_YUN_DUNGEON;
  static const SceneType SOU_SHEN_DUNGEON = LogEnum_SceneType_SOU_SHEN_DUNGEON;
  static const SceneType LONG_MAI_DUNGEON = LogEnum_SceneType_LONG_MAI_DUNGEON;
  static const SceneType WU_JUE_DUNGEON = LogEnum_SceneType_WU_JUE_DUNGEON;
  static const SceneType JI_JIAN_DUNGEON = LogEnum_SceneType_JI_JIAN_DUNGEON;
  static const SceneType HUO_LIN_DUNGEON = LogEnum_SceneType_HUO_LIN_DUNGEON;
  static const SceneType ARENA_DUNGEON = LogEnum_SceneType_ARENA_DUNGEON;
  static const SceneType ZHONG_HUA_GE_DUNGEON = LogEnum_SceneType_ZHONG_HUA_GE_DUNGEON;
  static const SceneType GUILD_DUNGEON = LogEnum_SceneType_GUILD_DUNGEON;
  static const SceneType GUILD_PVP_DUNGEON = LogEnum_SceneType_GUILD_PVP_DUNGEON;
  static const SceneType DOTA = LogEnum_SceneType_DOTA;
  static const SceneType NEW_HUO_LIN_DUNGEON = LogEnum_SceneType_NEW_HUO_LIN_DUNGEON;
  static const SceneType COUPLE_DUNGEON = LogEnum_SceneType_COUPLE_DUNGEON;
  static const SceneType JING_JIE_DUNGEON = LogEnum_SceneType_JING_JIE_DUNGEON;
  static const SceneType TU_LONG_DUNGEON = LogEnum_SceneType_TU_LONG_DUNGEON;
  static const SceneType TIAN_MEN_DUNGEON = LogEnum_SceneType_TIAN_MEN_DUNGEON;
  static const SceneType XIN_MO_DUNGEON = LogEnum_SceneType_XIN_MO_DUNGEON;
  static const SceneType GUILD_PLANT_DUNGEON = LogEnum_SceneType_GUILD_PLANT_DUNGEON;
  static const SceneType HTZ_DUNGEON = LogEnum_SceneType_HTZ_DUNGEON;
  static const SceneType CHENG_BA = LogEnum_SceneType_CHENG_BA;
  static const SceneType WU_LIN = LogEnum_SceneType_WU_LIN;
  static const SceneType LONG_XIAN = LogEnum_SceneType_LONG_XIAN;
  static const SceneType ZHAN_CHANG = LogEnum_SceneType_ZHAN_CHANG;
  static const SceneType YY_PURPLE_DUNGEON = LogEnum_SceneType_YY_PURPLE_DUNGEON;
  static const SceneType TIAO_ZHAN = LogEnum_SceneType_TIAO_ZHAN;
  static const SceneType TONG_TIAN_TA = LogEnum_SceneType_TONG_TIAN_TA;
  static const SceneType MELEE = LogEnum_SceneType_MELEE;
  static const SceneType MYSTERY_DUNGEON = LogEnum_SceneType_MYSTERY_DUNGEON;
  static const SceneType BU_YU_DUNGEON = LogEnum_SceneType_BU_YU_DUNGEON;
  static const SceneType SHEN_HAI_WEI_JI = LogEnum_SceneType_SHEN_HAI_WEI_JI;
  static const SceneType FENG_YUN_DAO = LogEnum_SceneType_FENG_YUN_DAO;
  static const SceneType HELL_DUNGEON = LogEnum_SceneType_HELL_DUNGEON;
  static inline bool SceneType_IsValid(int value) {
    return LogEnum_SceneType_IsValid(value);
  }
  static const SceneType SceneType_MIN =
    LogEnum_SceneType_SceneType_MIN;
  static const SceneType SceneType_MAX =
    LogEnum_SceneType_SceneType_MAX;
  static const int SceneType_ARRAYSIZE =
    LogEnum_SceneType_SceneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SceneType_descriptor() {
    return LogEnum_SceneType_descriptor();
  }
  static inline const ::std::string& SceneType_Name(SceneType value) {
    return LogEnum_SceneType_Name(value);
  }
  static inline bool SceneType_Parse(const ::std::string& name,
      SceneType* value) {
    return LogEnum_SceneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:app.message.LogEnum)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static LogEnum* default_instance_;
};
// ===================================================================


// ===================================================================

// TradeFailProto

// optional int32 remove_yuanbao = 1;
inline bool TradeFailProto::has_remove_yuanbao() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeFailProto::set_has_remove_yuanbao() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeFailProto::clear_has_remove_yuanbao() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeFailProto::clear_remove_yuanbao() {
  remove_yuanbao_ = 0;
  clear_has_remove_yuanbao();
}
inline ::google::protobuf::int32 TradeFailProto::remove_yuanbao() const {
  return remove_yuanbao_;
}
inline void TradeFailProto::set_remove_yuanbao(::google::protobuf::int32 value) {
  set_has_remove_yuanbao();
  remove_yuanbao_ = value;
}

// optional int32 real_yuanbao = 2;
inline bool TradeFailProto::has_real_yuanbao() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeFailProto::set_has_real_yuanbao() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeFailProto::clear_has_real_yuanbao() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeFailProto::clear_real_yuanbao() {
  real_yuanbao_ = 0;
  clear_has_real_yuanbao();
}
inline ::google::protobuf::int32 TradeFailProto::real_yuanbao() const {
  return real_yuanbao_;
}
inline void TradeFailProto::set_real_yuanbao(::google::protobuf::int32 value) {
  set_has_real_yuanbao();
  real_yuanbao_ = value;
}

// repeated .app.message.TradeGoodsProto remove_goods = 3;
inline int TradeFailProto::remove_goods_size() const {
  return remove_goods_.size();
}
inline void TradeFailProto::clear_remove_goods() {
  remove_goods_.Clear();
}
inline const ::app::message::TradeGoodsProto& TradeFailProto::remove_goods(int index) const {
  return remove_goods_.Get(index);
}
inline ::app::message::TradeGoodsProto* TradeFailProto::mutable_remove_goods(int index) {
  return remove_goods_.Mutable(index);
}
inline ::app::message::TradeGoodsProto* TradeFailProto::add_remove_goods() {
  return remove_goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::TradeGoodsProto >&
TradeFailProto::remove_goods() const {
  return remove_goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::TradeGoodsProto >*
TradeFailProto::mutable_remove_goods() {
  return &remove_goods_;
}

// optional int64 to_add_yuanbao = 21;
inline bool TradeFailProto::has_to_add_yuanbao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeFailProto::set_has_to_add_yuanbao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeFailProto::clear_has_to_add_yuanbao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeFailProto::clear_to_add_yuanbao() {
  to_add_yuanbao_ = GOOGLE_LONGLONG(0);
  clear_has_to_add_yuanbao();
}
inline ::google::protobuf::int64 TradeFailProto::to_add_yuanbao() const {
  return to_add_yuanbao_;
}
inline void TradeFailProto::set_to_add_yuanbao(::google::protobuf::int64 value) {
  set_has_to_add_yuanbao();
  to_add_yuanbao_ = value;
}

// repeated .app.message.GoodsServerProto to_add_goods = 22;
inline int TradeFailProto::to_add_goods_size() const {
  return to_add_goods_.size();
}
inline void TradeFailProto::clear_to_add_goods() {
  to_add_goods_.Clear();
}
inline const ::app::message::GoodsServerProto& TradeFailProto::to_add_goods(int index) const {
  return to_add_goods_.Get(index);
}
inline ::app::message::GoodsServerProto* TradeFailProto::mutable_to_add_goods(int index) {
  return to_add_goods_.Mutable(index);
}
inline ::app::message::GoodsServerProto* TradeFailProto::add_to_add_goods() {
  return to_add_goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsServerProto >&
TradeFailProto::to_add_goods() const {
  return to_add_goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsServerProto >*
TradeFailProto::mutable_to_add_goods() {
  return &to_add_goods_;
}

// -------------------------------------------------------------------

// TradeGoodsProto

// optional .app.message.GoodsServerProto goods = 1;
inline bool TradeGoodsProto::has_goods() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeGoodsProto::set_has_goods() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeGoodsProto::clear_has_goods() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeGoodsProto::clear_goods() {
  if (goods_ != NULL) goods_->::app::message::GoodsServerProto::Clear();
  clear_has_goods();
}
inline const ::app::message::GoodsServerProto& TradeGoodsProto::goods() const {
  return goods_ != NULL ? *goods_ : *default_instance_->goods_;
}
inline ::app::message::GoodsServerProto* TradeGoodsProto::mutable_goods() {
  set_has_goods();
  if (goods_ == NULL) goods_ = new ::app::message::GoodsServerProto;
  return goods_;
}
inline ::app::message::GoodsServerProto* TradeGoodsProto::release_goods() {
  clear_has_goods();
  ::app::message::GoodsServerProto* temp = goods_;
  goods_ = NULL;
  return temp;
}
inline void TradeGoodsProto::set_allocated_goods(::app::message::GoodsServerProto* goods) {
  delete goods_;
  goods_ = goods;
  if (goods) {
    set_has_goods();
  } else {
    clear_has_goods();
  }
}

// optional int64 identifier = 2;
inline bool TradeGoodsProto::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeGoodsProto::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeGoodsProto::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeGoodsProto::clear_identifier() {
  identifier_ = GOOGLE_LONGLONG(0);
  clear_has_identifier();
}
inline ::google::protobuf::int64 TradeGoodsProto::identifier() const {
  return identifier_;
}
inline void TradeGoodsProto::set_identifier(::google::protobuf::int64 value) {
  set_has_identifier();
  identifier_ = value;
}

// optional int32 own_count = 3;
inline bool TradeGoodsProto::has_own_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeGoodsProto::set_has_own_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeGoodsProto::clear_has_own_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeGoodsProto::clear_own_count() {
  own_count_ = 0;
  clear_has_own_count();
}
inline ::google::protobuf::int32 TradeGoodsProto::own_count() const {
  return own_count_;
}
inline void TradeGoodsProto::set_own_count(::google::protobuf::int32 value) {
  set_has_own_count();
  own_count_ = value;
}

// optional bool is_diff = 10;
inline bool TradeGoodsProto::has_is_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeGoodsProto::set_has_is_diff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeGoodsProto::clear_has_is_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeGoodsProto::clear_is_diff() {
  is_diff_ = false;
  clear_has_is_diff();
}
inline bool TradeGoodsProto::is_diff() const {
  return is_diff_;
}
inline void TradeGoodsProto::set_is_diff(bool value) {
  set_has_is_diff();
  is_diff_ = value;
}

// optional .app.message.GoodsServerProto diff_goods = 11;
inline bool TradeGoodsProto::has_diff_goods() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeGoodsProto::set_has_diff_goods() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeGoodsProto::clear_has_diff_goods() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeGoodsProto::clear_diff_goods() {
  if (diff_goods_ != NULL) diff_goods_->::app::message::GoodsServerProto::Clear();
  clear_has_diff_goods();
}
inline const ::app::message::GoodsServerProto& TradeGoodsProto::diff_goods() const {
  return diff_goods_ != NULL ? *diff_goods_ : *default_instance_->diff_goods_;
}
inline ::app::message::GoodsServerProto* TradeGoodsProto::mutable_diff_goods() {
  set_has_diff_goods();
  if (diff_goods_ == NULL) diff_goods_ = new ::app::message::GoodsServerProto;
  return diff_goods_;
}
inline ::app::message::GoodsServerProto* TradeGoodsProto::release_diff_goods() {
  clear_has_diff_goods();
  ::app::message::GoodsServerProto* temp = diff_goods_;
  diff_goods_ = NULL;
  return temp;
}
inline void TradeGoodsProto::set_allocated_diff_goods(::app::message::GoodsServerProto* diff_goods) {
  delete diff_goods_;
  diff_goods_ = diff_goods;
  if (diff_goods) {
    set_has_diff_goods();
  } else {
    clear_has_diff_goods();
  }
}

// -------------------------------------------------------------------

// ConsumeLogProto

// optional int64 time = 1;
inline bool ConsumeLogProto::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsumeLogProto::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsumeLogProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsumeLogProto::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ConsumeLogProto::time() const {
  return time_;
}
inline void ConsumeLogProto::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional .app.message.LogEnum.OperateType type = 2;
inline bool ConsumeLogProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsumeLogProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsumeLogProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsumeLogProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::app::message::LogEnum_OperateType ConsumeLogProto::type() const {
  return static_cast< ::app::message::LogEnum_OperateType >(type_);
}
inline void ConsumeLogProto::set_type(::app::message::LogEnum_OperateType value) {
  assert(::app::message::LogEnum_OperateType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 consume_yuanbao = 3;
inline bool ConsumeLogProto::has_consume_yuanbao() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsumeLogProto::set_has_consume_yuanbao() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsumeLogProto::clear_has_consume_yuanbao() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsumeLogProto::clear_consume_yuanbao() {
  consume_yuanbao_ = 0;
  clear_has_consume_yuanbao();
}
inline ::google::protobuf::int32 ConsumeLogProto::consume_yuanbao() const {
  return consume_yuanbao_;
}
inline void ConsumeLogProto::set_consume_yuanbao(::google::protobuf::int32 value) {
  set_has_consume_yuanbao();
  consume_yuanbao_ = value;
}

// -------------------------------------------------------------------

// AllConsumeLogProto

// repeated .app.message.ConsumeLogProto log_list = 1;
inline int AllConsumeLogProto::log_list_size() const {
  return log_list_.size();
}
inline void AllConsumeLogProto::clear_log_list() {
  log_list_.Clear();
}
inline const ::app::message::ConsumeLogProto& AllConsumeLogProto::log_list(int index) const {
  return log_list_.Get(index);
}
inline ::app::message::ConsumeLogProto* AllConsumeLogProto::mutable_log_list(int index) {
  return log_list_.Mutable(index);
}
inline ::app::message::ConsumeLogProto* AllConsumeLogProto::add_log_list() {
  return log_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ConsumeLogProto >&
AllConsumeLogProto::log_list() const {
  return log_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ConsumeLogProto >*
AllConsumeLogProto::mutable_log_list() {
  return &log_list_;
}

// -------------------------------------------------------------------

// LogEnum


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::LogEnum_LogType>() {
  return ::app::message::LogEnum_LogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::LogEnum_OperateObject>() {
  return ::app::message::LogEnum_OperateObject_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::LogEnum_OperateType>() {
  return ::app::message::LogEnum_OperateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::LogEnum_TransportType>() {
  return ::app::message::LogEnum_TransportType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::LogEnum_SceneType>() {
  return ::app::message::LogEnum_SceneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_2eproto__INCLUDED
