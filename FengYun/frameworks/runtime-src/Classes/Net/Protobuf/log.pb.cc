// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* TradeFailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeFailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeGoodsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeGoodsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsumeLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsumeLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllConsumeLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllConsumeLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEnum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEnum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEnum_LogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEnum_OperateObject_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEnum_OperateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEnum_TransportType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEnum_SceneType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_2eproto() {
  protobuf_AddDesc_log_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log.proto");
  GOOGLE_CHECK(file != NULL);
  TradeFailProto_descriptor_ = file->message_type(0);
  static const int TradeFailProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeFailProto, remove_yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeFailProto, real_yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeFailProto, remove_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeFailProto, to_add_yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeFailProto, to_add_goods_),
  };
  TradeFailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeFailProto_descriptor_,
      TradeFailProto::default_instance_,
      TradeFailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeFailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeFailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeFailProto));
  TradeGoodsProto_descriptor_ = file->message_type(1);
  static const int TradeGoodsProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGoodsProto, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGoodsProto, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGoodsProto, own_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGoodsProto, is_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGoodsProto, diff_goods_),
  };
  TradeGoodsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeGoodsProto_descriptor_,
      TradeGoodsProto::default_instance_,
      TradeGoodsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGoodsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeGoodsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeGoodsProto));
  ConsumeLogProto_descriptor_ = file->message_type(2);
  static const int ConsumeLogProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogProto, consume_yuanbao_),
  };
  ConsumeLogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsumeLogProto_descriptor_,
      ConsumeLogProto::default_instance_,
      ConsumeLogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeLogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsumeLogProto));
  AllConsumeLogProto_descriptor_ = file->message_type(3);
  static const int AllConsumeLogProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllConsumeLogProto, log_list_),
  };
  AllConsumeLogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllConsumeLogProto_descriptor_,
      AllConsumeLogProto::default_instance_,
      AllConsumeLogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllConsumeLogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllConsumeLogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllConsumeLogProto));
  LogEnum_descriptor_ = file->message_type(4);
  static const int LogEnum_offsets_[1] = {
  };
  LogEnum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEnum_descriptor_,
      LogEnum::default_instance_,
      LogEnum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEnum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEnum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEnum));
  LogEnum_LogType_descriptor_ = LogEnum_descriptor_->enum_type(0);
  LogEnum_OperateObject_descriptor_ = LogEnum_descriptor_->enum_type(1);
  LogEnum_OperateType_descriptor_ = LogEnum_descriptor_->enum_type(2);
  LogEnum_TransportType_descriptor_ = LogEnum_descriptor_->enum_type(3);
  LogEnum_SceneType_descriptor_ = LogEnum_descriptor_->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeFailProto_descriptor_, &TradeFailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeGoodsProto_descriptor_, &TradeGoodsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsumeLogProto_descriptor_, &ConsumeLogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllConsumeLogProto_descriptor_, &AllConsumeLogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEnum_descriptor_, &LogEnum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_2eproto() {
  delete TradeFailProto::default_instance_;
  delete TradeFailProto_reflection_;
  delete TradeGoodsProto::default_instance_;
  delete TradeGoodsProto_reflection_;
  delete ConsumeLogProto::default_instance_;
  delete ConsumeLogProto_reflection_;
  delete AllConsumeLogProto::default_instance_;
  delete AllConsumeLogProto_reflection_;
  delete LogEnum::default_instance_;
  delete LogEnum_reflection_;
}

void protobuf_AddDesc_log_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_5fserver_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlog.proto\022\013app.message\032\022goods_server.p"
    "roto\"\277\001\n\016TradeFailProto\022\026\n\016remove_yuanba"
    "o\030\001 \001(\005\022\024\n\014real_yuanbao\030\002 \001(\005\0222\n\014remove_"
    "goods\030\003 \003(\0132\034.app.message.TradeGoodsProt"
    "o\022\026\n\016to_add_yuanbao\030\025 \001(\003\0223\n\014to_add_good"
    "s\030\026 \003(\0132\035.app.message.GoodsServerProto\"\252"
    "\001\n\017TradeGoodsProto\022,\n\005goods\030\001 \001(\0132\035.app."
    "message.GoodsServerProto\022\022\n\nidentifier\030\002"
    " \001(\003\022\021\n\town_count\030\003 \001(\005\022\017\n\007is_diff\030\n \001(\010"
    "\0221\n\ndiff_goods\030\013 \001(\0132\035.app.message.Goods"
    "ServerProto\"h\n\017ConsumeLogProto\022\014\n\004time\030\001"
    " \001(\003\022.\n\004type\030\002 \001(\0162 .app.message.LogEnum"
    ".OperateType\022\027\n\017consume_yuanbao\030\003 \001(\005\"D\n"
    "\022AllConsumeLogProto\022.\n\010log_list\030\001 \003(\0132\034."
    "app.message.ConsumeLogProto\"\212^\n\007LogEnum\""
    "\215\005\n\007LogType\022\016\n\nCreateRole\020\001\022\017\n\013RoleLevel"
    "Up\020\002\022\023\n\017SpeSkillLevelUp\020\003\022\r\n\tRoleLogin\020\004"
    "\022\016\n\nRoleLogout\020\005\022\020\n\014AccountLogin\020\006\022\021\n\rAc"
    "countLogout\020\007\022\017\n\013OnlineCount\020\010\022\013\n\007Offlin"
    "e\020\t\022\014\n\010Recharge\020\n\022\010\n\004Shop\020\013\022\014\n\010AddGoods\020"
    "\014\022\014\n\010SubGoods\020\r\022\013\n\007AddItem\020\016\022\013\n\007UseItem\020"
    "\017\022\017\n\013DestroyItem\020\020\022\017\n\013DiscardItem\020\021\022\r\n\tT"
    "askStart\020\022\022\020\n\014TaskFinished\020\023\022\016\n\nPartyBui"
    "ld\020\024\022\020\n\014PartyDismiss\020\025\022\020\n\014PartyLevelUp\020\026"
    "\022\022\n\016PartyAddMember\020\027\022\022\n\016PartyDelMember\020\030"
    "\022\016\n\nStallStart\020\031\022\014\n\010StallEnd\020\032\022\016\n\nStallT"
    "rade\020\033\022\013\n\007P2PDeal\020\034\022\014\n\010CallBack\020\035\022\014\n\010Npc"
    "Trade\020\036\022\016\n\nLearnSkill\020\037\022\t\n\005ChMap\020 \022\020\n\014Rc"
    "vAccessory\020!\022\022\n\016StartPostToken\020\"\022\020\n\014EndP"
    "ostToken\020#\022\022\n\016PostTokenTrade\020$\022\014\n\010ItemFl"
    "ow\020%\022\013\n\007ArmFlow\020&\022\r\n\tMoneyFlow\020\'\022\025\n\021Task"
    "PromotionRank\020(\"\346\003\n\rOperateObject\022\010\n\004HER"
    "O\020\000\022\007\n\003EXP\020\001\022\t\n\005LEVEL\020\002\022\t\n\005MONEY\020\003\022\014\n\010RE"
    "AL_AIR\020\004\022\t\n\005LIJIN\020\005\022\013\n\007YUANBAO\020\006\022\r\n\tPK_A"
    "MOUNT\020\007\022\020\n\014GUILD_LILIAN\020\010\022\014\n\010GUILD_GX\020\t\022"
    "\010\n\004TASK\020\n\022\t\n\005GOODS\020\013\022\t\n\005SPELL\020\014\022\t\n\005MOUNT"
    "\020\r\022\017\n\013MOUNT_SPELL\020\016\022\007\n\003GEM\020\017\022\007\n\003BOW\020\020\022\t\n"
    "\005ARROW\020\021\022\013\n\007SWEAPON\020\022\022\020\n\014SWEAPON_SOUL\020\023\022"
    "\010\n\004MAIL\020\024\022\013\n\007DUNGEON\020\025\022\t\n\005SCENE\020\026\022\t\n\005GUI"
    "LD\020\027\022\020\n\014GUILD_ASSETS\020\030\022\r\n\tEQUIPMENT\020\031\022\017\n"
    "\013SCENE_GOODS\020\032\022\022\n\016SOU_SHEN_POINT\020\033\022\r\n\tPE"
    "T_SPELL\020\034\022\014\n\010TIAN_JIE\020\035\022\022\n\016TIAN_JIE_SPEL"
    "L\020\036\022\014\n\010TIAN_ZUI\020\037\022\022\n\016TIAN_ZUI_SPELL\020 \022\t\n"
    "\005HONOR\020!\022\016\n\nSHENG_WANG\020\"\"\273L\n\013OperateType"
    "\022\014\n\010INTERNAL\020\000\022\n\n\006SYSTEM\020\001\022\006\n\002GM\020\002\022\t\n\005LO"
    "GIN\020\003\022\n\n\006LOGOUT\020\004\022\017\n\013SCENE_ENTER\020\n\022\017\n\013SC"
    "ENE_LEAVE\020\013\022\023\n\017SCENE_TRANSPORT\020\014\022\r\n\tKILL"
    "_HERO\020\r\022\020\n\014KILL_MONSTER\020\016\022\n\n\006RELIVE\020\017\022\014\n"
    "\010MEDITATE\020\020\022\020\n\014MONSTER_DROP\020\021\022\022\n\016TERRITO"
    "RY_STAY\020\022\022\r\n\tTASK_DONE\020\025\022\021\n\rTASK_DONE_PA"
    "Y\020\026\022\025\n\021TASK_DONE_ALL_PAY\020\027\022\032\n\026TASK_CHANG"
    "E_DIFFICULTY\020\030\022\025\n\021TASK_CHANGE_PRIZE\020\031\022\020\n"
    "\014TASK_SWALLOW\020\032\022\025\n\021TASK_REDUCE_GOODS\020\033\022\026"
    "\n\022TASK_COLLECT_GOODS\020\034\022\023\n\017TASK_DROP_GOOD"
    "S\020\035\022\014\n\010RECHARGE\020\036\022\t\n\005TRADE\020\037\022\031\n\025COLLECT_"
    "AUCTION_PRIZE\020 \022\013\n\007SALE_ON\020!\022\014\n\010SALE_OFF"
    "\020\"\022\014\n\010SALE_BUY\020#\022\014\n\010SALE_TAX\020$\022\r\n\tTRADE_"
    "TAX\020%\022\r\n\tGOODS_USE\020(\022\027\n\023SCENE_GOODS_PICK"
    "_UP\020)\022\024\n\020SCENE_GOODS_DROP\020*\022\r\n\tOPEN_GRID"
    "\020+\022\021\n\rBIND_ON_EQUIP\020,\022\014\n\010ZHAO_HUI\020-\022\n\n\006T"
    "U_HAO\020.\022\021\n\rFULI_CARD_USE\020/\022\020\n\014SKILL_UPDA"
    "TE\0202\022\017\n\013RANK_ADMIRE\020;\022\014\n\010SHOP_BUY\020<\022\021\n\rS"
    "HOP_BUY_BACK\020=\022\r\n\tSHOP_SELL\020>\022\020\n\014SOU_SHE"
    "N_BUY\020\?\022\021\n\rRESET_DUNGEON\020F\022\027\n\023AUTO_FINIS"
    "H_DUNGEON\020G\022\033\n\027AUTO_FINISH_ALL_DUNGEON\020H"
    "\022!\n\035AUTO_FINISH_DUNGEON_IMMEDIATE\020I\022\031\n\025C"
    "OLLECT_DUNGEON_PRIZE\020J\022\036\n\032COLLECT_DUNGEO"
    "N_TEMP_PRIZE\020K\022\034\n\030COLLECT_FIRST_PASS_PRI"
    "ZE\020L\022\025\n\021CATCH_FIRE_MONKEY\020M\022\022\n\016CHALLENGE"
    "_DROP\020N\022\026\n\022COLLECT_BOSS_PRIZE\020O\022\020\n\014GUILD"
    "_CREATE\020Z\022\022\n\016GUILD_DISSOLVE\020[\022\020\n\014GUILD_D"
    "ONATE\020\\\022\030\n\024GUILD_BANNER_UPGRADE\020]\022\027\n\023GUI"
    "LD_BANNER_RENAME\020^\022\027\n\023GUILD_BANNER_MODIF"
    "Y\020_\022\r\n\tGUILD_BUY\020`\022\016\n\nGUILD_JOIN\020a\022\017\n\013GU"
    "ILD_LEAVE\020b\022\027\n\023GUILD_TOWER_UPGRADE\020c\022\021\n\r"
    "MOUNT_UPGRADE\020d\022\022\n\016MO_SHI_UPGRADE\020e\022\025\n\021S"
    "UPER_ARM_UPGRADE\020i\022\021\n\rREFINED_FORGE\020n\022\021\n"
    "\rQUALITY_FORGE\020o\022\017\n\013LEVEL_FORGE\020p\022\010\n\004MEL"
    "T\020q\022\016\n\nMELT_GAOJI\020r\022\n\n\006TI_PIN\020s\022\030\n\024REFRE"
    "SH_BIAO_QUALITY\020t\022\023\n\017BIAO_REACH_DEST\020u\022\026"
    "\n\022BIAO_BEI_JIE_OWNER\020v\022\031\n\025BIAO_BEI_JIE_A"
    "TTACKER\020w\022\r\n\tGEM_MERGE\020x\022\016\n\nGEM_UPDATE\020y"
    "\022\022\n\016HE_CHENG_EQUIP\020z\022\022\n\016HE_CHENG_GOODS\020{"
    "\022\027\n\022HE_CHENG_PET_EQUIP\020\366\005\022\020\n\013BOW_UPGRADE"
    "\020\202\001\022\022\n\rARROW_UPGRADE\020\203\001\022\023\n\016WEAPON_UPGRAD"
    "E\020\214\001\022\030\n\023WEAPON_SOUL_UPGRADE\020\215\001\022\027\n\022COLLEC"
    "T_VIP_WEAPON\020\216\001\022\035\n\030LEARN_MAGIC_WEAPON_SP"
    "ELL\020\217\001\022\026\n\021COLLECT_VIP_PRIZE\020\226\001\022\035\n\030COLLEC"
    "T_VIP_WEEKLY_PRIZE\020\227\001\022\016\n\tSEND_MAIL\020\240\001\022\021\n"
    "\014COLLECT_MAIL\020\241\001\022\016\n\tPAID_CHAT\020\252\001\022\013\n\006COUP"
    "ON\020\262\001\022\025\n\020ACTIVITY_PAYBACK\020\263\001\022\t\n\004SIGN\020\264\001\022"
    "\027\n\022COLLECT_SIGN_PRIZE\020\265\001\022\013\n\007LOTTERY\020R\022\032\n"
    "\025COLLECT_LOTTERY_PRIZE\020\267\001\022\030\n\023COLLECT_OFF"
    "LINE_EXP\020\270\001\022\013\n\006DIVINE\020\271\001\022$\n\037COLLECT_MICR"
    "O_FIRST_LOGIN_PRIZE\020\272\001\022$\n\037COLLECT_MICRO_"
    "DAILY_LOGIN_PRIZE\020\273\001\022\023\n\016PHOENIX_REFINE\020\274"
    "\001\022\t\n\004EXAM\020\275\001\022(\n#SWORD_SACRIFICE_SCENE_RA"
    "DIATE_PRIZE\020\276\001\022\'\n\"SWORD_SACRIFICE_HERO_R"
    "ADIATE_PRIZE\020\277\001\022\036\n\031SWORD_SACRIFICE_FOR_M"
    "ONEY\020\300\001\022 \n\033SWORD_SACRIFICE_FOR_YUANBAO\020\301"
    "\001\022\037\n\032COLLECT_SINGLE_STORY_PRIZE\020\302\001\022\025\n\020HU"
    "O_LIN_PERIODIC\020\303\001\022\024\n\017TERRITORY_PRIZE\020\304\001\022"
    "\022\n\rTERRITORY_WIN\020\305\001\022\023\n\016TERRITORY_LOSE\020\306\001"
    "\022\030\n\023TERRITORY_KILL_HERO\020\307\001\022\021\n\014PET_ADD_LI"
    "FE\020\334\001\022\022\n\rPET_EAT_GOODS\020\335\001\022\025\n\020TIAN_JIE_UP"
    "GRADE\020\336\001\022\025\n\020TIAN_ZUI_UPGRADE\020\337\001\022#\n\036ONE_O"
    "N_ONE_ADD_CHALLENGE_TIMES\020\346\001\022+\n&ONE_ON_O"
    "NE_ADD_CHALLENGE_REFINED_TIMES\020\347\001\022\036\n\031ONE"
    "_ON_ONE_RESET_COOLDOWN\020\350\001\022\034\n\027ONE_ON_ONE_"
    "HOURLY_PRIZE\020\351\001\022\033\n\026ONE_ON_ONE_DAILY_PRIZ"
    "E\020\352\001\022\037\n\032ONE_ON_ONE_CHALLENGE_PRIZE\020\353\001\022\023\n"
    "\016EXCHANGE_GOODS\020\360\001\022\031\n\024SHENG_WANG_TASK_DO"
    "NE\020\365\001\022\036\n\031EXCHANGE_SHENG_WANG_GOODS\020\366\001\022\025\n"
    "\020GUILD_CITY_PRIZE\020\372\001\022\025\n\020GUILD_FIGHT_STAY"
    "\020\373\001\022\024\n\017GUILD_FIGHT_WIN\020\374\001\022\025\n\020GUILD_FIGHT"
    "_LOSE\020\375\001\022\032\n\025GUILD_FIGHT_KILL_HERO\020\376\001\022\024\n\017"
    "LONG_CITY_PRIZE\020\204\002\022\023\n\016LONG_CITY_STAY\020\205\002\022"
    "\022\n\rLONG_CITY_WIN\020\206\002\022\023\n\016LONG_CITY_LOSE\020\207\002"
    "\022\030\n\023LONG_CITY_KILL_HERO\020\210\002\022\032\n\025LONG_CITY_"
    "BEEN_KILLED\020\211\002\022\024\n\017RECHARGE_REBATE\020\212\002\022\026\n\021"
    "UPGRADE_PROMOTION\020\213\002\022\023\n\016PLATFORM_SPEED\020\214"
    "\002\022\023\n\016RANK_PROMOTION\020\215\002\022\022\n\rDAILY_CONSUME\020"
    "\216\002\022\r\n\010DING_ZHI\020\217\002\022\017\n\nDRAW_PRIZE\020\220\002\022\026\n\021WL"
    "_FIRST_RECHARGE\020\230\002\022\031\n\024WL_FIRST_LOGIN_PRI"
    "ZE\020\231\002\022\027\n\022DISCOUNT_STORE_BUY\020\232\002\022\030\n\023USE_YU"
    "ANBAO_PACKAGE\020\233\002\022\030\n\023INVEST_UPGRADE_BANK\020"
    "\234\002\022\030\n\023INVEST_MONTHLY_BANK\020\235\002\022 \n\033COLLECT_"
    "UPGRADE_BANK_INCOME\020\236\002\022 \n\033COLLECT_MONTHL"
    "Y_BANK_INCOME\020\237\002\022\'\n\"COLLECT_MONTHLY_BANK"
    "_ONLINE_INCOME\020\240\002\022\037\n\032COLLECT_PLATFORM_VI"
    "P_PRIZE\020\241\002\022\031\n\024CLEAR_BINDED_YUANBAO\020\242\002\022\024\n"
    "\017USE_LEGEND_CARD\020\243\002\022\022\n\rUSE_CRIT_CARD\020\244\002\022"
    "\022\n\rRESET_KONG_CI\020\254\002\022\017\n\nKONG_CI_SD\020\255\002\022%\n "
    "COLLECT_KONG_CI_FIRST_PASS_PRIZE\020\256\002\022\035\n\030C"
    "OLLECT_KONG_CI_SD_PRIZE\020\257\002\022\032\n\025COLLECT_KO"
    "NG_CI_PRIZE\020\260\002\022\033\n\026COLLECT_PLATFORM_PRIZE"
    "\020\261\002\022\031\n\024COLLECT_WEIXIN_PRIZE\020\262\002\022\016\n\tARENA_"
    "BUY\020\266\002\022%\n GUILD_DUNGEON_COLLECT_BOSS_PRI"
    "ZE\020\267\002\022\027\n\022GUILD_PVP_PERIODIC\020\270\002\022\036\n\031GUILD_"
    "PVP_BOSS_DEAD_PRIZE\020\271\002\022\"\n\035P360_SECURITY_"
    "PRIVILEGE_PRIZE\020\220\003\022\023\n\016EXCHANGE_HAOLI\020\221\003\022"
    "\026\n\021SHOU_CANG_UPGRADE\020\222\003\022\017\n\nDOTA_PRIZE\020\272\002"
    "\022\022\n\rDEMON_UPGRADE\020\273\002\022\022\n\rCLOAK_UPGRADE\020\274\002"
    "\022\025\n\020TIAN_XIE_UPGRADE\020\217\005\022\023\n\016MARRIAGE_GOOD"
    "S\020\275\002\022\031\n\024NEW_HUO_LIN_PERIODIC\020\276\002\022 \n\033NEW_H"
    "UO_LIN_BOSS_DEAD_PRIZE\020\277\002\022\014\n\007DIVORCE\020\300\002\022"
    "\032\n\025MARRIAGE_WEDDING_GIFT\020\301\002\022\025\n\020MARRIAGE_"
    "WEDDING\020\302\002\022\032\n\025MARRIAGE_WEDDING_STAY\020\303\002\022\033"
    "\n\026MARRIAGE_WEDDING_DRINK\020\304\002\022\033\n\026MARRIAGE_"
    "GOODS_UPGRADE\020\305\002\022\"\n\035MARRIAGE_WEDDING_GIF"
    "T_COLLECT\020\306\002\022\027\n\022MONSTER_FIGHT_STAY\020\312\002\022\036\n"
    "\031RECHARGE_EXCHANGE_LINGPAI\020\223\003\022\025\n\020LUCKY_D"
    "RAW_PRIZE\020\224\003\022\025\n\020YI_TIAN_SHEN_JUE\020\225\003\022\020\n\013B"
    "OSS_CAI_JI\020\226\003\022\026\n\021WASH_SUPER_WEAPON\020\227\003\022\032\n"
    "\025PLATFORM_SUMMER_PRIZE\020\230\003\022\032\n\025GLOBAL_RECH"
    "ARGE_PRIZE\020\231\003\022\022\n\rVIP_PROMOTION\020\232\003\022\027\n\022MAR"
    "RIAGE_PROMOTION\020\233\003\022\'\n\"MONSTER_FIGHT_CITY"
    "_BOSS_DEAD_PRIZE\020\234\003\022\r\n\010TRANSFER\020\364\003\022\033\n\026JI"
    "NSHAN_PLATFORM_PRIZE\020\365\003\022\025\n\020UPGRADE_JING_"
    "JIE\020\376\003\022\033\n\026JING_JIE_DUNGEON_PRIZE\020\377\003\022!\n\034C"
    "OLLECT_LONG_YUAN_PER_PERIOD\020\200\004\022\036\n\031CLEAR_"
    "LONG_YUAN_COUNTDOWN\020\201\004\022\032\n\025TU_LONG_DUNGEO"
    "N_PRIZE\020\203\004\022\023\n\016ENTER_TIAN_MEN\020\204\004\022\033\n\026COLLE"
    "CT_TIAN_MEN_PRIZE\020\205\004\022\037\n\032TASK_PROMOTION_T"
    "ASK_FINISH\020\206\004\022!\n\034TASK_PROMOTION_POINT_CO"
    "LLECT\020\207\004\022\031\n\024TASK_PROMOTION_RESET\020\210\004\022\030\n\023E"
    "XCHANGE_ROUNDLIBAO\020\330\004\022\024\n\017EXCHANGE_MAYDAY"
    "\020\331\004\022$\n\037EXCHANGE_DAILY_CONSUME_EXCHANGE\020\332"
    "\004\022\017\n\nDAILY_CARD\020\333\004\022\026\n\021JIN_JIE_DAN_DEMON\020"
    "\334\004\022\026\n\021JIN_JIE_DAN_CLOAK\020\335\004\022\013\n\006GALLUP\020\336\004\022"
    "$\n\037LUCKY_DRAW_PRIZE_POINT_EXCHANGE\020\337\004\022\026\n"
    "\021RECHARE_GOLD_TREE\020\340\004\022\022\n\rDAILY_AUCTION\020\341"
    "\004\022\026\n\021DAILY_LUCKY_WHEEL\020\342\004\022\025\n\020MARRIAGE_ST"
    "ORAGE\020\343\004\022\034\n\027QIAN_QIU_DA_JIE_UPGRADE\020\344\004\022\031"
    "\n\024LAO_BING_BACK_GLOBAL\020\345\004\022\033\n\026LAO_BING_BA"
    "CK_PERSONAL\020\346\004\022\035\n\030RECHARGE_EXCHANGE_JINJ"
    "IE\020\347\004\022\022\n\rDAO_SHI_LOGIN\020\350\004\022\033\n\026DAO_SHI_WU_"
    "SHUANG_CITY\020\351\004\022\026\n\021DAO_SHI_LONG_CITY\020\352\004\022\036"
    "\n\031CHI_HUO_SHEN_GONG_UPGRADE\020\353\004\022\031\n\024GUILD_"
    "PLANT_DO_PLANT\020\354\004\022\033\n\026GUILD_PLANT_DO_UPGR"
    "ADE\020\355\004\022\036\n\031GUILD_PLANT_COLLECT_PRIZE\020\356\004\022\033"
    "\n\026GUILD_PLANT_TASK_PRIZE\020\357\004\022\020\n\013YY_TRANSF"
    "ER\020\360\004\022\020\n\013CHANGE_RACE\020\361\004\022\016\n\tHTZ_PRIZE\020\362\004\022"
    "\035\n\030NATIONAL_DAY_LOGIN_PRIZE\020\363\004\022 \n\033NATION"
    "AL_DAY_RECHARGE_PRIZE\020\364\004\022\026\n\021NATIONAL_DAY"
    "_SHOP\020\370\004\022\023\n\016NEW_DRAW_PRIZE\020\365\004\022\"\n\035NEW_DRA"
    "W_PRIZE_POINT_EXCHANGE\020\366\004\022*\n%MULTI_PRIZE"
    "_ON_LIMITED_TIME_GOODS_USE\020\367\004\022\031\n\024SUPER_W"
    "EAPON_MIX_GEM\020\371\004\022\032\n\025SUPER_WEAPON_MOVE_GE"
    "M\020\372\004\022\021\n\014SELECT_IMAGE\020\373\004\022\020\n\013WANDA_MOVIE\020\374"
    "\004\022\'\n\"CHENG_BA_COLLECT_PARTICIPATE_PRIZE\020"
    "\375\004\022\037\n\032CHENG_BA_COLLECT_WIN_PRIZE\020\376\004\022\037\n\032C"
    "HENG_BA_COLLECT_TAX_PRIZE\020\377\004\022\030\n\023REXHARGE"
    "_BOX_REBATE\020\200\005\022\032\n\025MOUNT_TONGLING_ACTIVE\020"
    "\201\005\022\027\n\022CONSUME_BOX_REBATE\020\202\005\022\025\n\020WU_LIN_GR"
    "OUP_WIN\020\274\005\022\026\n\021WU_LIN_GROUP_LOSE\020\275\005\022\022\n\rWU"
    "_LIN_16_WIN\020\276\005\022\023\n\016WU_LIN_16_LOSE\020\277\005\022\021\n\014W"
    "U_LIN_8_WIN\020\300\005\022\022\n\rWU_LIN_8_LOSE\020\301\005\022\021\n\014WU"
    "_LIN_4_WIN\020\302\005\022\022\n\rWU_LIN_4_LOSE\020\303\005\022\021\n\014WU_"
    "LIN_2_WIN\020\304\005\022\022\n\rWU_LIN_2_LOSE\020\305\005\022\016\n\tDEL_"
    "GOODS\020\306\005\022\024\n\017MO_BING_UPGRADE\020\307\005\022\032\n\025MO_BIN"
    "G_SPELL_UPGRADE\020\310\005\022\033\n\026MO_BING_RECHARGE_P"
    "RIZE\020\311\005\022\032\n\025COLLECT_WEIXIN_PRIZE2\020\312\005\022\025\n\020W"
    "U_LIN_BID_PRIZE\020\313\005\022\027\n\022LONG_XIAN_EXCHANGE"
    "\020\314\005\022\022\n\rWASH_XUNZHANG\020\315\005\022\030\n\023ZHAN_CHANG_EX"
    "CHANGE\020\316\005\0220\n+FIGHT_AMOUNT_CHANGED_VALUE_"
    "RANK_DAILY_PRIZE\020\317\005\022\022\n\rYY_PURPlE_VIP\020\320\005\022"
    "\027\n\022CHRISTMAS_EXCHANGE\020\321\005\022\027\n\022CHRISTMAS_DE"
    "CORATE\020\322\005\022!\n\034CHRISTMAS_COLLECT_TREE_PRIZ"
    "E\020\323\005\022\030\n\023CHRISTMAS_LUCKY_TRY\020\324\005\022\021\n\014CREDIT"
    "S_SHOP\020\325\005\022\027\n\022TIAO_ZHAN_EXCHANGE\020\326\005\022\023\n\016TI"
    "AO_ZHAN_PAIR\020\327\005\022\033\n\026TIAO_ZHAN_PAIR_TIMEOU"
    "T\020\330\005\022\"\n\035TIAO_ZHAN_PAIR_RESULT_TIMEOUT\020\331\005"
    "\022\025\n\020TIAO_ZHAN_UNPAIR\020\332\005\022\031\n\024MONOPOLY_RAND"
    "OM_ROLL\020\333\005\022\037\n\032MONOPOLY_CONTROLLABLE_ROLL"
    "\020\334\005\022\030\n\023MONOPOLY_ROLL_PRIZE\020\335\005\022\034\n\027MONOPOL"
    "Y_ADD_ROLL_TIMES\020\336\005\022\032\n\025CREDITS_DRAW_EXCH"
    "ANGE\020\337\005\022\026\n\021CREDITS_DRAW_DRAW\020\340\005\022\027\n\022COLLE"
    "CT_SHENZHUANG\020\341\005\022\030\n\023GUILD_HONG_BAO_GIVE\020"
    "\342\005\022\033\n\026GUILD_HONG_BAO_COLLECT\020\343\005\022\024\n\017LOGIN"
    "_PROMOTION\020\344\005\022\034\n\027DAILY_ONELINE_PROMOTION"
    "\020\345\005\022\025\n\020LOVE_DAILY_PRIZE\020\346\005\022\022\n\rLOVE_EXCHA"
    "NGE\020\347\005\022\020\n\013LOVE_WEIXIN\020\350\005\022\021\n\014LOVE_ONLINE1"
    "\020\351\005\022\021\n\014LOVE_ONLINE2\020\352\005\022\021\n\014LOVE_ONLINE3\020\353"
    "\005\022\021\n\014LOVE_ONLINE4\020\354\005\022\023\n\016WU_DAO_UPGRADE\020\355"
    "\005\022\026\n\021RECHARGE_EXCHANGE\020\356\005\022\037\n\032CONSUME_EXC"
    "HANGE_PROMOTION\020\357\005\022\037\n\032OFFLINE_EXCHANGE_P"
    "ROMOTION\020\360\005\022\022\n\rFREE_EXCHANGE\020\361\005\022\021\n\014NIDAO"
    "QIANKUN\020\362\005\022\024\n\017SECRET_SHOP_BUY\020\363\005\022\030\n\023SECR"
    "ET_SHOP_REFRESH\020\364\005\022\031\n\024TONG_TAIN_TA_REFRE"
    "SH\020\365\005\022\037\n\032ANNIVERSARY_RECHARGE_FANLI\020\367\005\022\025"
    "\n\020ANNIVERSARY_CAKE\020\370\005\022\034\n\027ANNIVERSARY_DAI"
    "LY_PRIZE\020\371\005\022\027\n\022FIREWORK_PROMOTION\020\372\005\022\033\n\026"
    "ANNIVERSARY_TASK_PRIZE\020\373\005\022%\n DAILY_FIRST"
    "_RECHARGE_DAILY_PRIZE\020\374\005\022%\n DAILY_FIRST_"
    "RECHARGE_FINAL_PRIZE\020\375\005\022\017\n\nMELEE_STAY\020\376\005"
    "\022\021\n\014MELEE_RELIVE\020\377\005\022\031\n\024HE_CHENG_MOUNT_EQ"
    "UIP\020\200\006\022\035\n\030ANNIVERSARY_REFRESH_TASK\020\201\006\022\024\n"
    "\017HUGE_DATA_PRIZE\020\202\006\022\034\n\027ANNIVERSARY_JP_EX"
    "CHANGE\020\203\006\022\037\n\032ANNIVERSARY_CONSUME_RETURN\020"
    "\204\006\022 \n\033ANNIVERSARY_VIP_DAILY_PRIZE\020\205\006\022!\n\034"
    "ANNIVERSARY_FINAL_TASK_PRIZE\020\206\006\022\023\n\016SHIEL"
    "D_UPGRADE\020\207\006\022\037\n\032MYSTERY_DUNGEON_LING_GUA"
    "NG\020\210\006\022\024\n\017LING_GUANG_COST\020\211\006\022\032\n\025LING_GUAN"
    "G_DAILY_PICK\020\212\006\022\023\n\016LING_GUANG_ADD\020\213\006\022\026\n\021"
    "MOUNT_LEVEL_FORGE\020\214\006\022\024\n\017PET_LEVEL_FORGE\020"
    "\215\006\022\027\n\022SHIELD_LEVEL_FORGE\020\216\006\022\030\n\023WUYI_RECH"
    "ARGE_FANLI\020\217\006\022\021\n\014MOUNT_TI_PIN\020\220\006\022\017\n\nPET_"
    "TI_PIN\020\221\006\022\022\n\rSHIELD_TI_PIN\020\222\006\022\025\n\020LOGIN_P"
    "ROMOTION2\020\223\006\022&\n!DAILY_FIRST_RECHARGE_DAI"
    "LY_PRIZE2\020\224\006\022&\n!DAILY_FIRST_RECHARGE_FIN"
    "AL_PRIZE2\020\225\006\022\034\n\027LAO_DONG_ZUI_GUANG_RONG\020"
    "\226\006\022\037\n\032TIAN_MING_BAO_JIAN_TRIGGER\020\227\006\022\034\n\027T"
    "IAN_MING_VALUES_REVERT\020\230\006\022\033\n\026TIAN_MING_V"
    "ALUES_RESET\020\231\006\022\033\n\026HERO_BOSS_CARD_REFRESH"
    "\020\232\006\022\030\n\023HERO_BOSS_CARD_CALL\020\233\006\022\"\n\035HERO_BO"
    "SS_CARD_DUNGEON_FINISH\020\234\006\022\031\n\024GUILD_BOSS_"
    "CARD_FEED\020\235\006\022\031\n\024GUILD_BOSS_CARD_CALL\020\236\006\022"
    "\037\n\032GUILD_BOSS_CARD_CALL_PRIZE\020\246\006\022\037\n\032GUIL"
    "D_BOSS_CARD_KILL_PRIZE\020\247\006\022\025\n\020BUY_MONTHLY"
    "_CARD\020\237\006\022\035\n\030MONTHLY_CARD_DAILY_PRIZE\020\240\006\022"
    "\034\n\027MONTHLY_CARD_TASK_PRIZE\020\241\006\022\036\n\031GOODS_A"
    "CTIVE_MONTHLY_CARD\020\242\006\022%\n MONTHLY_CARD_YU"
    "ANBAO_FINISH_TASK\020\243\006\022\024\n\017JIUWEIHU_WEAPON\020"
    "\244\006\022\032\n\025HE_CHENG_SHIELD_EQUIP\020\245\006\022\027\n\022TONG_T"
    "IAN_BAO_JIAN\020\250\006\022\032\n\025HAIDI_MAP_FREE_TICKET"
    "\020\251\006\022\030\n\023HAIDI_MAP_BISHUIDAN\020\252\006\022\025\n\020HAIDI_M"
    "AP_TICKET\020\253\006\022\030\n\023BU_YU_ENTER_DUNGEON\020\254\006\022\022"
    "\n\rGOODS_UPGRADE\020\260\t\022\017\n\nBU_YU_SHOP\020\255\006\022\025\n\020B"
    "U_YU_BUY_BULLET\020\256\006\022\027\n\022GOODS_FORCE_REMOVE"
    "\020\257\006\022\025\n\020QIXI_DAILY_PRIZE\020\260\006\022\024\n\017JIANDAO_UP"
    "GRADE\020\322\006\022\024\n\017LING_YU_UPGRADE\020\323\006\022\r\n\010COMEBA"
    "CK\020\324\006\022\017\n\nBUY_HAMMER\020\325\006\022\027\n\022BUY_DA_DI_SHU_"
    "ITEM\020\326\006\022\031\n\024WELFARE_COMPENSATION\020\327\006\022\025\n\020YU"
    "_YI_GE_UPGRADE\020\330\006\022%\n YU_YI_GE_FASHION_TO"
    "_BLESS_AMOUNT\020\331\006\022\032\n\025YU_YI_GE_MOVE_FASHIO"
    "N\020\332\006\022%\n FENG_YUN_DAO_BUY_CHALLENGE_COUNT"
    "\020\333\006\022\030\n\023BOW_TONGLING_ACTIVE\020\334\006\022\032\n\025SYS_HON"
    "G_BAO_COLLETED\020\335\006\022\022\n\rINLAY_BAO_SHI\020\336\006\022\023\n"
    "\016REMOVE_BAO_SHI\020\337\006\022\022\n\rBAO_SHI_RESET\020\340\006\022\025"
    "\n\020BAO_SHI_HE_CHENG\020\341\006\022#\n\036EXCHANGE_COST_G"
    "OODS_AND_VALUES\020\342\006\022\030\n\023PET_TONGLING_ACTIV"
    "E\020\343\006\022%\n PET_TONG_LING_GIFT_SPELL_UPGRADE"
    "\020\344\006\022\024\n\017MO_FANG_UPGRADE\020\345\006\022\034\n\027FORCE_REMOV"
    "E_FU_LI_CARD\020\346\006\022!\n\034CHOU_JIANG_FAN_LI_CHO"
    "U_JIANG\020\347\006\022\037\n\032CHOU_JIANG_FAN_LI_RECHARGE"
    "\020\350\006\022 \n\033CHOU_JIANG_FAN_LI_GOODS_ADD\020\351\006\022\026\n"
    "\021CHANGE_LV_HANDLER\020\352\006\022\016\n\tNEW_ROBOT\020\353\006\022\017\n"
    "\nDAILY_SHOP\020\354\006\"\363\002\n\rTransportType\022\010\n\004GATE"
    "\020\001\022\017\n\013CHANGE_LINE\020\002\022\017\n\013CITY_RELIVE\020\003\022\017\n\013"
    "RETURN_CITY\020\004\022\014\n\010TP_GOODS\020\005\022\007\n\003NPC\020\006\022\007\n\003"
    "MAP\020\007\022\013\n\007TP_TASK\020\010\022\n\n\006ASSIST\020\t\022\021\n\rENTER_"
    "DUNGEON\020\n\022\021\n\rLEAVE_DUNGEON\020\013\022\016\n\nFIRE_MON"
    "KY\020\014\022\t\n\005GM_TP\020\r\022\017\n\013GUILD_FIGHT\020\016\022\r\n\tLONG"
    "_CITY\020\017\022\016\n\nONE_ON_ONE\020\020\022\014\n\010MARRIAGE\020\021\022\014\n"
    "\010GOLD_PIG\020\022\022\r\n\tCHRISTMAS\020\023\022\023\n\017ENTER_TIAO"
    "_ZHAN\020\024\022\r\n\tNIAN_SHOU\020\025\022\r\n\tANNI_CAKE\020\026\022\016\n"
    "\nGUILD_BOSS\020\027\022\r\n\tHAIDI_MAP\020\030\"\321\005\n\tSceneTy"
    "pe\022\n\n\006NORMAL\020\000\022\021\n\rSTORY_DUNGEON\020\001\022\025\n\021CHA"
    "LLENGE_DUNGEON\020\002\022\017\n\013VIP_DUNGEON\020\003\022\023\n\017DEF"
    "ENCE_DUNGEON\020\004\022\024\n\020LING_YUN_DUNGEON\020\005\022\024\n\020"
    "SOU_SHEN_DUNGEON\020\006\022\024\n\020LONG_MAI_DUNGEON\020\007"
    "\022\022\n\016WU_JUE_DUNGEON\020\010\022\023\n\017JI_JIAN_DUNGEON\020"
    "\t\022\023\n\017HUO_LIN_DUNGEON\020\n\022\021\n\rARENA_DUNGEON\020"
    "\013\022\030\n\024ZHONG_HUA_GE_DUNGEON\020\014\022\021\n\rGUILD_DUN"
    "GEON\020\r\022\025\n\021GUILD_PVP_DUNGEON\020\016\022\010\n\004DOTA\020\017\022"
    "\027\n\023NEW_HUO_LIN_DUNGEON\020\020\022\022\n\016COUPLE_DUNGE"
    "ON\020\021\022\024\n\020JING_JIE_DUNGEON\020\022\022\023\n\017TU_LONG_DU"
    "NGEON\020\023\022\024\n\020TIAN_MEN_DUNGEON\020\024\022\022\n\016XIN_MO_"
    "DUNGEON\020\025\022\027\n\023GUILD_PLANT_DUNGEON\020\026\022\017\n\013HT"
    "Z_DUNGEON\020\027\022\014\n\010CHENG_BA\020\030\022\n\n\006WU_LIN\020\031\022\r\n"
    "\tLONG_XIAN\020\032\022\016\n\nZHAN_CHANG\020\033\022\025\n\021YY_PURPL"
    "E_DUNGEON\020\034\022\r\n\tTIAO_ZHAN\020\035\022\020\n\014TONG_TIAN_"
    "TA\020\036\022\t\n\005MELEE\020\037\022\023\n\017MYSTERY_DUNGEON\020 \022\021\n\r"
    "BU_YU_DUNGEON\020!\022\023\n\017SHEN_HAI_WEI_JI\020\"\022\020\n\014"
    "FENG_YUN_DAO\020#\022\020\n\014HELL_DUNGEON\020$B\034\n\014app."
    "protobufB\nLogContentH\001", 12662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log.proto", &protobuf_RegisterTypes);
  TradeFailProto::default_instance_ = new TradeFailProto();
  TradeGoodsProto::default_instance_ = new TradeGoodsProto();
  ConsumeLogProto::default_instance_ = new ConsumeLogProto();
  AllConsumeLogProto::default_instance_ = new AllConsumeLogProto();
  LogEnum::default_instance_ = new LogEnum();
  TradeFailProto::default_instance_->InitAsDefaultInstance();
  TradeGoodsProto::default_instance_->InitAsDefaultInstance();
  ConsumeLogProto::default_instance_->InitAsDefaultInstance();
  AllConsumeLogProto::default_instance_->InitAsDefaultInstance();
  LogEnum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_2eproto {
  StaticDescriptorInitializer_log_2eproto() {
    protobuf_AddDesc_log_2eproto();
  }
} static_descriptor_initializer_log_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TradeFailProto::kRemoveYuanbaoFieldNumber;
const int TradeFailProto::kRealYuanbaoFieldNumber;
const int TradeFailProto::kRemoveGoodsFieldNumber;
const int TradeFailProto::kToAddYuanbaoFieldNumber;
const int TradeFailProto::kToAddGoodsFieldNumber;
#endif  // !_MSC_VER

TradeFailProto::TradeFailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeFailProto::InitAsDefaultInstance() {
}

TradeFailProto::TradeFailProto(const TradeFailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeFailProto::SharedCtor() {
  _cached_size_ = 0;
  remove_yuanbao_ = 0;
  real_yuanbao_ = 0;
  to_add_yuanbao_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeFailProto::~TradeFailProto() {
  SharedDtor();
}

void TradeFailProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeFailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeFailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeFailProto_descriptor_;
}

const TradeFailProto& TradeFailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

TradeFailProto* TradeFailProto::default_instance_ = NULL;

TradeFailProto* TradeFailProto::New() const {
  return new TradeFailProto;
}

void TradeFailProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remove_yuanbao_ = 0;
    real_yuanbao_ = 0;
    to_add_yuanbao_ = GOOGLE_LONGLONG(0);
  }
  remove_goods_.Clear();
  to_add_goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeFailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 remove_yuanbao = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remove_yuanbao_)));
          set_has_remove_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_real_yuanbao;
        break;
      }

      // optional int32 real_yuanbao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_yuanbao_)));
          set_has_real_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remove_goods;
        break;
      }

      // repeated .app.message.TradeGoodsProto remove_goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remove_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remove_goods;
        if (input->ExpectTag(168)) goto parse_to_add_yuanbao;
        break;
      }

      // optional int64 to_add_yuanbao = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_add_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_add_yuanbao_)));
          set_has_to_add_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_to_add_goods;
        break;
      }

      // repeated .app.message.GoodsServerProto to_add_goods = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_add_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_to_add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_to_add_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeFailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 remove_yuanbao = 1;
  if (has_remove_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remove_yuanbao(), output);
  }

  // optional int32 real_yuanbao = 2;
  if (has_real_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->real_yuanbao(), output);
  }

  // repeated .app.message.TradeGoodsProto remove_goods = 3;
  for (int i = 0; i < this->remove_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remove_goods(i), output);
  }

  // optional int64 to_add_yuanbao = 21;
  if (has_to_add_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->to_add_yuanbao(), output);
  }

  // repeated .app.message.GoodsServerProto to_add_goods = 22;
  for (int i = 0; i < this->to_add_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->to_add_goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeFailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 remove_yuanbao = 1;
  if (has_remove_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remove_yuanbao(), target);
  }

  // optional int32 real_yuanbao = 2;
  if (has_real_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->real_yuanbao(), target);
  }

  // repeated .app.message.TradeGoodsProto remove_goods = 3;
  for (int i = 0; i < this->remove_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remove_goods(i), target);
  }

  // optional int64 to_add_yuanbao = 21;
  if (has_to_add_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->to_add_yuanbao(), target);
  }

  // repeated .app.message.GoodsServerProto to_add_goods = 22;
  for (int i = 0; i < this->to_add_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->to_add_goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeFailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 remove_yuanbao = 1;
    if (has_remove_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remove_yuanbao());
    }

    // optional int32 real_yuanbao = 2;
    if (has_real_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_yuanbao());
    }

    // optional int64 to_add_yuanbao = 21;
    if (has_to_add_yuanbao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->to_add_yuanbao());
    }

  }
  // repeated .app.message.TradeGoodsProto remove_goods = 3;
  total_size += 1 * this->remove_goods_size();
  for (int i = 0; i < this->remove_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remove_goods(i));
  }

  // repeated .app.message.GoodsServerProto to_add_goods = 22;
  total_size += 2 * this->to_add_goods_size();
  for (int i = 0; i < this->to_add_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->to_add_goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeFailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeFailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeFailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeFailProto::MergeFrom(const TradeFailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  remove_goods_.MergeFrom(from.remove_goods_);
  to_add_goods_.MergeFrom(from.to_add_goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remove_yuanbao()) {
      set_remove_yuanbao(from.remove_yuanbao());
    }
    if (from.has_real_yuanbao()) {
      set_real_yuanbao(from.real_yuanbao());
    }
    if (from.has_to_add_yuanbao()) {
      set_to_add_yuanbao(from.to_add_yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeFailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeFailProto::CopyFrom(const TradeFailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeFailProto::IsInitialized() const {

  for (int i = 0; i < remove_goods_size(); i++) {
    if (!this->remove_goods(i).IsInitialized()) return false;
  }
  for (int i = 0; i < to_add_goods_size(); i++) {
    if (!this->to_add_goods(i).IsInitialized()) return false;
  }
  return true;
}

void TradeFailProto::Swap(TradeFailProto* other) {
  if (other != this) {
    std::swap(remove_yuanbao_, other->remove_yuanbao_);
    std::swap(real_yuanbao_, other->real_yuanbao_);
    remove_goods_.Swap(&other->remove_goods_);
    std::swap(to_add_yuanbao_, other->to_add_yuanbao_);
    to_add_goods_.Swap(&other->to_add_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeFailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeFailProto_descriptor_;
  metadata.reflection = TradeFailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeGoodsProto::kGoodsFieldNumber;
const int TradeGoodsProto::kIdentifierFieldNumber;
const int TradeGoodsProto::kOwnCountFieldNumber;
const int TradeGoodsProto::kIsDiffFieldNumber;
const int TradeGoodsProto::kDiffGoodsFieldNumber;
#endif  // !_MSC_VER

TradeGoodsProto::TradeGoodsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeGoodsProto::InitAsDefaultInstance() {
  goods_ = const_cast< ::app::message::GoodsServerProto*>(&::app::message::GoodsServerProto::default_instance());
  diff_goods_ = const_cast< ::app::message::GoodsServerProto*>(&::app::message::GoodsServerProto::default_instance());
}

TradeGoodsProto::TradeGoodsProto(const TradeGoodsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeGoodsProto::SharedCtor() {
  _cached_size_ = 0;
  goods_ = NULL;
  identifier_ = GOOGLE_LONGLONG(0);
  own_count_ = 0;
  is_diff_ = false;
  diff_goods_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeGoodsProto::~TradeGoodsProto() {
  SharedDtor();
}

void TradeGoodsProto::SharedDtor() {
  if (this != default_instance_) {
    delete goods_;
    delete diff_goods_;
  }
}

void TradeGoodsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeGoodsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeGoodsProto_descriptor_;
}

const TradeGoodsProto& TradeGoodsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

TradeGoodsProto* TradeGoodsProto::default_instance_ = NULL;

TradeGoodsProto* TradeGoodsProto::New() const {
  return new TradeGoodsProto;
}

void TradeGoodsProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_goods()) {
      if (goods_ != NULL) goods_->::app::message::GoodsServerProto::Clear();
    }
    identifier_ = GOOGLE_LONGLONG(0);
    own_count_ = 0;
    is_diff_ = false;
    if (has_diff_goods()) {
      if (diff_goods_ != NULL) diff_goods_->::app::message::GoodsServerProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeGoodsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsServerProto goods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_identifier;
        break;
      }

      // optional int64 identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &identifier_)));
          set_has_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_own_count;
        break;
      }

      // optional int32 own_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_count_)));
          set_has_own_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_diff;
        break;
      }

      // optional bool is_diff = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_diff_)));
          set_has_is_diff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_diff_goods;
        break;
      }

      // optional .app.message.GoodsServerProto diff_goods = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diff_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diff_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeGoodsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsServerProto goods = 1;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods(), output);
  }

  // optional int64 identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->identifier(), output);
  }

  // optional int32 own_count = 3;
  if (has_own_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->own_count(), output);
  }

  // optional bool is_diff = 10;
  if (has_is_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_diff(), output);
  }

  // optional .app.message.GoodsServerProto diff_goods = 11;
  if (has_diff_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->diff_goods(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeGoodsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsServerProto goods = 1;
  if (has_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods(), target);
  }

  // optional int64 identifier = 2;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->identifier(), target);
  }

  // optional int32 own_count = 3;
  if (has_own_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->own_count(), target);
  }

  // optional bool is_diff = 10;
  if (has_is_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_diff(), target);
  }

  // optional .app.message.GoodsServerProto diff_goods = 11;
  if (has_diff_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->diff_goods(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeGoodsProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsServerProto goods = 1;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goods());
    }

    // optional int64 identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->identifier());
    }

    // optional int32 own_count = 3;
    if (has_own_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->own_count());
    }

    // optional bool is_diff = 10;
    if (has_is_diff()) {
      total_size += 1 + 1;
    }

    // optional .app.message.GoodsServerProto diff_goods = 11;
    if (has_diff_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diff_goods());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeGoodsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeGoodsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeGoodsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeGoodsProto::MergeFrom(const TradeGoodsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods()) {
      mutable_goods()->::app::message::GoodsServerProto::MergeFrom(from.goods());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_own_count()) {
      set_own_count(from.own_count());
    }
    if (from.has_is_diff()) {
      set_is_diff(from.is_diff());
    }
    if (from.has_diff_goods()) {
      mutable_diff_goods()->::app::message::GoodsServerProto::MergeFrom(from.diff_goods());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeGoodsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeGoodsProto::CopyFrom(const TradeGoodsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeGoodsProto::IsInitialized() const {

  if (has_goods()) {
    if (!this->goods().IsInitialized()) return false;
  }
  if (has_diff_goods()) {
    if (!this->diff_goods().IsInitialized()) return false;
  }
  return true;
}

void TradeGoodsProto::Swap(TradeGoodsProto* other) {
  if (other != this) {
    std::swap(goods_, other->goods_);
    std::swap(identifier_, other->identifier_);
    std::swap(own_count_, other->own_count_);
    std::swap(is_diff_, other->is_diff_);
    std::swap(diff_goods_, other->diff_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeGoodsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeGoodsProto_descriptor_;
  metadata.reflection = TradeGoodsProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumeLogProto::kTimeFieldNumber;
const int ConsumeLogProto::kTypeFieldNumber;
const int ConsumeLogProto::kConsumeYuanbaoFieldNumber;
#endif  // !_MSC_VER

ConsumeLogProto::ConsumeLogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsumeLogProto::InitAsDefaultInstance() {
}

ConsumeLogProto::ConsumeLogProto(const ConsumeLogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsumeLogProto::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  consume_yuanbao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumeLogProto::~ConsumeLogProto() {
  SharedDtor();
}

void ConsumeLogProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConsumeLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsumeLogProto_descriptor_;
}

const ConsumeLogProto& ConsumeLogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

ConsumeLogProto* ConsumeLogProto::default_instance_ = NULL;

ConsumeLogProto* ConsumeLogProto::New() const {
  return new ConsumeLogProto;
}

void ConsumeLogProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    consume_yuanbao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsumeLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .app.message.LogEnum.OperateType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::LogEnum_OperateType_IsValid(value)) {
            set_type(static_cast< ::app::message::LogEnum_OperateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_yuanbao;
        break;
      }

      // optional int32 consume_yuanbao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_yuanbao_)));
          set_has_consume_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsumeLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional .app.message.LogEnum.OperateType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 consume_yuanbao = 3;
  if (has_consume_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consume_yuanbao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsumeLogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional .app.message.LogEnum.OperateType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 consume_yuanbao = 3;
  if (has_consume_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consume_yuanbao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsumeLogProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional .app.message.LogEnum.OperateType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 consume_yuanbao = 3;
    if (has_consume_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_yuanbao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeLogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsumeLogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsumeLogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsumeLogProto::MergeFrom(const ConsumeLogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_consume_yuanbao()) {
      set_consume_yuanbao(from.consume_yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsumeLogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeLogProto::CopyFrom(const ConsumeLogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeLogProto::IsInitialized() const {

  return true;
}

void ConsumeLogProto::Swap(ConsumeLogProto* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(consume_yuanbao_, other->consume_yuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsumeLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsumeLogProto_descriptor_;
  metadata.reflection = ConsumeLogProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllConsumeLogProto::kLogListFieldNumber;
#endif  // !_MSC_VER

AllConsumeLogProto::AllConsumeLogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllConsumeLogProto::InitAsDefaultInstance() {
}

AllConsumeLogProto::AllConsumeLogProto(const AllConsumeLogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllConsumeLogProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllConsumeLogProto::~AllConsumeLogProto() {
  SharedDtor();
}

void AllConsumeLogProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllConsumeLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllConsumeLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllConsumeLogProto_descriptor_;
}

const AllConsumeLogProto& AllConsumeLogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

AllConsumeLogProto* AllConsumeLogProto::default_instance_ = NULL;

AllConsumeLogProto* AllConsumeLogProto::New() const {
  return new AllConsumeLogProto;
}

void AllConsumeLogProto::Clear() {
  log_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllConsumeLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.ConsumeLogProto log_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllConsumeLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.ConsumeLogProto log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllConsumeLogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.ConsumeLogProto log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllConsumeLogProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.ConsumeLogProto log_list = 1;
  total_size += 1 * this->log_list_size();
  for (int i = 0; i < this->log_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllConsumeLogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllConsumeLogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllConsumeLogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllConsumeLogProto::MergeFrom(const AllConsumeLogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_list_.MergeFrom(from.log_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllConsumeLogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllConsumeLogProto::CopyFrom(const AllConsumeLogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllConsumeLogProto::IsInitialized() const {

  return true;
}

void AllConsumeLogProto::Swap(AllConsumeLogProto* other) {
  if (other != this) {
    log_list_.Swap(&other->log_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllConsumeLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllConsumeLogProto_descriptor_;
  metadata.reflection = AllConsumeLogProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogEnum_LogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEnum_LogType_descriptor_;
}
bool LogEnum_LogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogEnum_LogType LogEnum::CreateRole;
const LogEnum_LogType LogEnum::RoleLevelUp;
const LogEnum_LogType LogEnum::SpeSkillLevelUp;
const LogEnum_LogType LogEnum::RoleLogin;
const LogEnum_LogType LogEnum::RoleLogout;
const LogEnum_LogType LogEnum::AccountLogin;
const LogEnum_LogType LogEnum::AccountLogout;
const LogEnum_LogType LogEnum::OnlineCount;
const LogEnum_LogType LogEnum::Offline;
const LogEnum_LogType LogEnum::Recharge;
const LogEnum_LogType LogEnum::Shop;
const LogEnum_LogType LogEnum::AddGoods;
const LogEnum_LogType LogEnum::SubGoods;
const LogEnum_LogType LogEnum::AddItem;
const LogEnum_LogType LogEnum::UseItem;
const LogEnum_LogType LogEnum::DestroyItem;
const LogEnum_LogType LogEnum::DiscardItem;
const LogEnum_LogType LogEnum::TaskStart;
const LogEnum_LogType LogEnum::TaskFinished;
const LogEnum_LogType LogEnum::PartyBuild;
const LogEnum_LogType LogEnum::PartyDismiss;
const LogEnum_LogType LogEnum::PartyLevelUp;
const LogEnum_LogType LogEnum::PartyAddMember;
const LogEnum_LogType LogEnum::PartyDelMember;
const LogEnum_LogType LogEnum::StallStart;
const LogEnum_LogType LogEnum::StallEnd;
const LogEnum_LogType LogEnum::StallTrade;
const LogEnum_LogType LogEnum::P2PDeal;
const LogEnum_LogType LogEnum::CallBack;
const LogEnum_LogType LogEnum::NpcTrade;
const LogEnum_LogType LogEnum::LearnSkill;
const LogEnum_LogType LogEnum::ChMap;
const LogEnum_LogType LogEnum::RcvAccessory;
const LogEnum_LogType LogEnum::StartPostToken;
const LogEnum_LogType LogEnum::EndPostToken;
const LogEnum_LogType LogEnum::PostTokenTrade;
const LogEnum_LogType LogEnum::ItemFlow;
const LogEnum_LogType LogEnum::ArmFlow;
const LogEnum_LogType LogEnum::MoneyFlow;
const LogEnum_LogType LogEnum::TaskPromotionRank;
const LogEnum_LogType LogEnum::LogType_MIN;
const LogEnum_LogType LogEnum::LogType_MAX;
const int LogEnum::LogType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LogEnum_OperateObject_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEnum_OperateObject_descriptor_;
}
bool LogEnum_OperateObject_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogEnum_OperateObject LogEnum::HERO;
const LogEnum_OperateObject LogEnum::EXP;
const LogEnum_OperateObject LogEnum::LEVEL;
const LogEnum_OperateObject LogEnum::MONEY;
const LogEnum_OperateObject LogEnum::REAL_AIR;
const LogEnum_OperateObject LogEnum::LIJIN;
const LogEnum_OperateObject LogEnum::YUANBAO;
const LogEnum_OperateObject LogEnum::PK_AMOUNT;
const LogEnum_OperateObject LogEnum::GUILD_LILIAN;
const LogEnum_OperateObject LogEnum::GUILD_GX;
const LogEnum_OperateObject LogEnum::TASK;
const LogEnum_OperateObject LogEnum::GOODS;
const LogEnum_OperateObject LogEnum::SPELL;
const LogEnum_OperateObject LogEnum::MOUNT;
const LogEnum_OperateObject LogEnum::MOUNT_SPELL;
const LogEnum_OperateObject LogEnum::GEM;
const LogEnum_OperateObject LogEnum::BOW;
const LogEnum_OperateObject LogEnum::ARROW;
const LogEnum_OperateObject LogEnum::SWEAPON;
const LogEnum_OperateObject LogEnum::SWEAPON_SOUL;
const LogEnum_OperateObject LogEnum::MAIL;
const LogEnum_OperateObject LogEnum::DUNGEON;
const LogEnum_OperateObject LogEnum::SCENE;
const LogEnum_OperateObject LogEnum::GUILD;
const LogEnum_OperateObject LogEnum::GUILD_ASSETS;
const LogEnum_OperateObject LogEnum::EQUIPMENT;
const LogEnum_OperateObject LogEnum::SCENE_GOODS;
const LogEnum_OperateObject LogEnum::SOU_SHEN_POINT;
const LogEnum_OperateObject LogEnum::PET_SPELL;
const LogEnum_OperateObject LogEnum::TIAN_JIE;
const LogEnum_OperateObject LogEnum::TIAN_JIE_SPELL;
const LogEnum_OperateObject LogEnum::TIAN_ZUI;
const LogEnum_OperateObject LogEnum::TIAN_ZUI_SPELL;
const LogEnum_OperateObject LogEnum::HONOR;
const LogEnum_OperateObject LogEnum::SHENG_WANG;
const LogEnum_OperateObject LogEnum::OperateObject_MIN;
const LogEnum_OperateObject LogEnum::OperateObject_MAX;
const int LogEnum::OperateObject_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LogEnum_OperateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEnum_OperateType_descriptor_;
}
bool LogEnum_OperateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 50:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 130:
    case 131:
    case 140:
    case 141:
    case 142:
    case 143:
    case 150:
    case 151:
    case 160:
    case 161:
    case 170:
    case 178:
    case 179:
    case 180:
    case 181:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 220:
    case 221:
    case 222:
    case 223:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 240:
    case 245:
    case 246:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 330:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 500:
    case 501:
    case 510:
    case 511:
    case 512:
    case 513:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 655:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
    case 727:
    case 728:
    case 729:
    case 730:
    case 731:
    case 732:
    case 733:
    case 734:
    case 735:
    case 736:
    case 737:
    case 738:
    case 739:
    case 740:
    case 741:
    case 742:
    case 743:
    case 744:
    case 745:
    case 746:
    case 747:
    case 748:
    case 749:
    case 750:
    case 751:
    case 752:
    case 753:
    case 754:
    case 755:
    case 756:
    case 757:
    case 758:
    case 759:
    case 760:
    case 761:
    case 762:
    case 763:
    case 764:
    case 765:
    case 766:
    case 767:
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
    case 783:
    case 784:
    case 785:
    case 786:
    case 787:
    case 788:
    case 789:
    case 790:
    case 791:
    case 792:
    case 793:
    case 794:
    case 795:
    case 796:
    case 797:
    case 798:
    case 799:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 850:
    case 851:
    case 852:
    case 853:
    case 854:
    case 855:
    case 856:
    case 857:
    case 858:
    case 859:
    case 860:
    case 861:
    case 862:
    case 863:
    case 864:
    case 865:
    case 866:
    case 867:
    case 868:
    case 869:
    case 870:
    case 871:
    case 872:
    case 873:
    case 874:
    case 875:
    case 876:
    case 1200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogEnum_OperateType LogEnum::INTERNAL;
const LogEnum_OperateType LogEnum::SYSTEM;
const LogEnum_OperateType LogEnum::GM;
const LogEnum_OperateType LogEnum::LOGIN;
const LogEnum_OperateType LogEnum::LOGOUT;
const LogEnum_OperateType LogEnum::SCENE_ENTER;
const LogEnum_OperateType LogEnum::SCENE_LEAVE;
const LogEnum_OperateType LogEnum::SCENE_TRANSPORT;
const LogEnum_OperateType LogEnum::KILL_HERO;
const LogEnum_OperateType LogEnum::KILL_MONSTER;
const LogEnum_OperateType LogEnum::RELIVE;
const LogEnum_OperateType LogEnum::MEDITATE;
const LogEnum_OperateType LogEnum::MONSTER_DROP;
const LogEnum_OperateType LogEnum::TERRITORY_STAY;
const LogEnum_OperateType LogEnum::TASK_DONE;
const LogEnum_OperateType LogEnum::TASK_DONE_PAY;
const LogEnum_OperateType LogEnum::TASK_DONE_ALL_PAY;
const LogEnum_OperateType LogEnum::TASK_CHANGE_DIFFICULTY;
const LogEnum_OperateType LogEnum::TASK_CHANGE_PRIZE;
const LogEnum_OperateType LogEnum::TASK_SWALLOW;
const LogEnum_OperateType LogEnum::TASK_REDUCE_GOODS;
const LogEnum_OperateType LogEnum::TASK_COLLECT_GOODS;
const LogEnum_OperateType LogEnum::TASK_DROP_GOODS;
const LogEnum_OperateType LogEnum::RECHARGE;
const LogEnum_OperateType LogEnum::TRADE;
const LogEnum_OperateType LogEnum::COLLECT_AUCTION_PRIZE;
const LogEnum_OperateType LogEnum::SALE_ON;
const LogEnum_OperateType LogEnum::SALE_OFF;
const LogEnum_OperateType LogEnum::SALE_BUY;
const LogEnum_OperateType LogEnum::SALE_TAX;
const LogEnum_OperateType LogEnum::TRADE_TAX;
const LogEnum_OperateType LogEnum::GOODS_USE;
const LogEnum_OperateType LogEnum::SCENE_GOODS_PICK_UP;
const LogEnum_OperateType LogEnum::SCENE_GOODS_DROP;
const LogEnum_OperateType LogEnum::OPEN_GRID;
const LogEnum_OperateType LogEnum::BIND_ON_EQUIP;
const LogEnum_OperateType LogEnum::ZHAO_HUI;
const LogEnum_OperateType LogEnum::TU_HAO;
const LogEnum_OperateType LogEnum::FULI_CARD_USE;
const LogEnum_OperateType LogEnum::SKILL_UPDATE;
const LogEnum_OperateType LogEnum::RANK_ADMIRE;
const LogEnum_OperateType LogEnum::SHOP_BUY;
const LogEnum_OperateType LogEnum::SHOP_BUY_BACK;
const LogEnum_OperateType LogEnum::SHOP_SELL;
const LogEnum_OperateType LogEnum::SOU_SHEN_BUY;
const LogEnum_OperateType LogEnum::RESET_DUNGEON;
const LogEnum_OperateType LogEnum::AUTO_FINISH_DUNGEON;
const LogEnum_OperateType LogEnum::AUTO_FINISH_ALL_DUNGEON;
const LogEnum_OperateType LogEnum::AUTO_FINISH_DUNGEON_IMMEDIATE;
const LogEnum_OperateType LogEnum::COLLECT_DUNGEON_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_DUNGEON_TEMP_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_FIRST_PASS_PRIZE;
const LogEnum_OperateType LogEnum::CATCH_FIRE_MONKEY;
const LogEnum_OperateType LogEnum::CHALLENGE_DROP;
const LogEnum_OperateType LogEnum::COLLECT_BOSS_PRIZE;
const LogEnum_OperateType LogEnum::GUILD_CREATE;
const LogEnum_OperateType LogEnum::GUILD_DISSOLVE;
const LogEnum_OperateType LogEnum::GUILD_DONATE;
const LogEnum_OperateType LogEnum::GUILD_BANNER_UPGRADE;
const LogEnum_OperateType LogEnum::GUILD_BANNER_RENAME;
const LogEnum_OperateType LogEnum::GUILD_BANNER_MODIFY;
const LogEnum_OperateType LogEnum::GUILD_BUY;
const LogEnum_OperateType LogEnum::GUILD_JOIN;
const LogEnum_OperateType LogEnum::GUILD_LEAVE;
const LogEnum_OperateType LogEnum::GUILD_TOWER_UPGRADE;
const LogEnum_OperateType LogEnum::MOUNT_UPGRADE;
const LogEnum_OperateType LogEnum::MO_SHI_UPGRADE;
const LogEnum_OperateType LogEnum::SUPER_ARM_UPGRADE;
const LogEnum_OperateType LogEnum::REFINED_FORGE;
const LogEnum_OperateType LogEnum::QUALITY_FORGE;
const LogEnum_OperateType LogEnum::LEVEL_FORGE;
const LogEnum_OperateType LogEnum::MELT;
const LogEnum_OperateType LogEnum::MELT_GAOJI;
const LogEnum_OperateType LogEnum::TI_PIN;
const LogEnum_OperateType LogEnum::REFRESH_BIAO_QUALITY;
const LogEnum_OperateType LogEnum::BIAO_REACH_DEST;
const LogEnum_OperateType LogEnum::BIAO_BEI_JIE_OWNER;
const LogEnum_OperateType LogEnum::BIAO_BEI_JIE_ATTACKER;
const LogEnum_OperateType LogEnum::GEM_MERGE;
const LogEnum_OperateType LogEnum::GEM_UPDATE;
const LogEnum_OperateType LogEnum::HE_CHENG_EQUIP;
const LogEnum_OperateType LogEnum::HE_CHENG_GOODS;
const LogEnum_OperateType LogEnum::HE_CHENG_PET_EQUIP;
const LogEnum_OperateType LogEnum::BOW_UPGRADE;
const LogEnum_OperateType LogEnum::ARROW_UPGRADE;
const LogEnum_OperateType LogEnum::WEAPON_UPGRADE;
const LogEnum_OperateType LogEnum::WEAPON_SOUL_UPGRADE;
const LogEnum_OperateType LogEnum::COLLECT_VIP_WEAPON;
const LogEnum_OperateType LogEnum::LEARN_MAGIC_WEAPON_SPELL;
const LogEnum_OperateType LogEnum::COLLECT_VIP_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_VIP_WEEKLY_PRIZE;
const LogEnum_OperateType LogEnum::SEND_MAIL;
const LogEnum_OperateType LogEnum::COLLECT_MAIL;
const LogEnum_OperateType LogEnum::PAID_CHAT;
const LogEnum_OperateType LogEnum::COUPON;
const LogEnum_OperateType LogEnum::ACTIVITY_PAYBACK;
const LogEnum_OperateType LogEnum::SIGN;
const LogEnum_OperateType LogEnum::COLLECT_SIGN_PRIZE;
const LogEnum_OperateType LogEnum::LOTTERY;
const LogEnum_OperateType LogEnum::COLLECT_LOTTERY_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_OFFLINE_EXP;
const LogEnum_OperateType LogEnum::DIVINE;
const LogEnum_OperateType LogEnum::COLLECT_MICRO_FIRST_LOGIN_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_MICRO_DAILY_LOGIN_PRIZE;
const LogEnum_OperateType LogEnum::PHOENIX_REFINE;
const LogEnum_OperateType LogEnum::EXAM;
const LogEnum_OperateType LogEnum::SWORD_SACRIFICE_SCENE_RADIATE_PRIZE;
const LogEnum_OperateType LogEnum::SWORD_SACRIFICE_HERO_RADIATE_PRIZE;
const LogEnum_OperateType LogEnum::SWORD_SACRIFICE_FOR_MONEY;
const LogEnum_OperateType LogEnum::SWORD_SACRIFICE_FOR_YUANBAO;
const LogEnum_OperateType LogEnum::COLLECT_SINGLE_STORY_PRIZE;
const LogEnum_OperateType LogEnum::HUO_LIN_PERIODIC;
const LogEnum_OperateType LogEnum::TERRITORY_PRIZE;
const LogEnum_OperateType LogEnum::TERRITORY_WIN;
const LogEnum_OperateType LogEnum::TERRITORY_LOSE;
const LogEnum_OperateType LogEnum::TERRITORY_KILL_HERO;
const LogEnum_OperateType LogEnum::PET_ADD_LIFE;
const LogEnum_OperateType LogEnum::PET_EAT_GOODS;
const LogEnum_OperateType LogEnum::TIAN_JIE_UPGRADE;
const LogEnum_OperateType LogEnum::TIAN_ZUI_UPGRADE;
const LogEnum_OperateType LogEnum::ONE_ON_ONE_ADD_CHALLENGE_TIMES;
const LogEnum_OperateType LogEnum::ONE_ON_ONE_ADD_CHALLENGE_REFINED_TIMES;
const LogEnum_OperateType LogEnum::ONE_ON_ONE_RESET_COOLDOWN;
const LogEnum_OperateType LogEnum::ONE_ON_ONE_HOURLY_PRIZE;
const LogEnum_OperateType LogEnum::ONE_ON_ONE_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::ONE_ON_ONE_CHALLENGE_PRIZE;
const LogEnum_OperateType LogEnum::EXCHANGE_GOODS;
const LogEnum_OperateType LogEnum::SHENG_WANG_TASK_DONE;
const LogEnum_OperateType LogEnum::EXCHANGE_SHENG_WANG_GOODS;
const LogEnum_OperateType LogEnum::GUILD_CITY_PRIZE;
const LogEnum_OperateType LogEnum::GUILD_FIGHT_STAY;
const LogEnum_OperateType LogEnum::GUILD_FIGHT_WIN;
const LogEnum_OperateType LogEnum::GUILD_FIGHT_LOSE;
const LogEnum_OperateType LogEnum::GUILD_FIGHT_KILL_HERO;
const LogEnum_OperateType LogEnum::LONG_CITY_PRIZE;
const LogEnum_OperateType LogEnum::LONG_CITY_STAY;
const LogEnum_OperateType LogEnum::LONG_CITY_WIN;
const LogEnum_OperateType LogEnum::LONG_CITY_LOSE;
const LogEnum_OperateType LogEnum::LONG_CITY_KILL_HERO;
const LogEnum_OperateType LogEnum::LONG_CITY_BEEN_KILLED;
const LogEnum_OperateType LogEnum::RECHARGE_REBATE;
const LogEnum_OperateType LogEnum::UPGRADE_PROMOTION;
const LogEnum_OperateType LogEnum::PLATFORM_SPEED;
const LogEnum_OperateType LogEnum::RANK_PROMOTION;
const LogEnum_OperateType LogEnum::DAILY_CONSUME;
const LogEnum_OperateType LogEnum::DING_ZHI;
const LogEnum_OperateType LogEnum::DRAW_PRIZE;
const LogEnum_OperateType LogEnum::WL_FIRST_RECHARGE;
const LogEnum_OperateType LogEnum::WL_FIRST_LOGIN_PRIZE;
const LogEnum_OperateType LogEnum::DISCOUNT_STORE_BUY;
const LogEnum_OperateType LogEnum::USE_YUANBAO_PACKAGE;
const LogEnum_OperateType LogEnum::INVEST_UPGRADE_BANK;
const LogEnum_OperateType LogEnum::INVEST_MONTHLY_BANK;
const LogEnum_OperateType LogEnum::COLLECT_UPGRADE_BANK_INCOME;
const LogEnum_OperateType LogEnum::COLLECT_MONTHLY_BANK_INCOME;
const LogEnum_OperateType LogEnum::COLLECT_MONTHLY_BANK_ONLINE_INCOME;
const LogEnum_OperateType LogEnum::COLLECT_PLATFORM_VIP_PRIZE;
const LogEnum_OperateType LogEnum::CLEAR_BINDED_YUANBAO;
const LogEnum_OperateType LogEnum::USE_LEGEND_CARD;
const LogEnum_OperateType LogEnum::USE_CRIT_CARD;
const LogEnum_OperateType LogEnum::RESET_KONG_CI;
const LogEnum_OperateType LogEnum::KONG_CI_SD;
const LogEnum_OperateType LogEnum::COLLECT_KONG_CI_FIRST_PASS_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_KONG_CI_SD_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_KONG_CI_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_PLATFORM_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_WEIXIN_PRIZE;
const LogEnum_OperateType LogEnum::ARENA_BUY;
const LogEnum_OperateType LogEnum::GUILD_DUNGEON_COLLECT_BOSS_PRIZE;
const LogEnum_OperateType LogEnum::GUILD_PVP_PERIODIC;
const LogEnum_OperateType LogEnum::GUILD_PVP_BOSS_DEAD_PRIZE;
const LogEnum_OperateType LogEnum::P360_SECURITY_PRIVILEGE_PRIZE;
const LogEnum_OperateType LogEnum::EXCHANGE_HAOLI;
const LogEnum_OperateType LogEnum::SHOU_CANG_UPGRADE;
const LogEnum_OperateType LogEnum::DOTA_PRIZE;
const LogEnum_OperateType LogEnum::DEMON_UPGRADE;
const LogEnum_OperateType LogEnum::CLOAK_UPGRADE;
const LogEnum_OperateType LogEnum::TIAN_XIE_UPGRADE;
const LogEnum_OperateType LogEnum::MARRIAGE_GOODS;
const LogEnum_OperateType LogEnum::NEW_HUO_LIN_PERIODIC;
const LogEnum_OperateType LogEnum::NEW_HUO_LIN_BOSS_DEAD_PRIZE;
const LogEnum_OperateType LogEnum::DIVORCE;
const LogEnum_OperateType LogEnum::MARRIAGE_WEDDING_GIFT;
const LogEnum_OperateType LogEnum::MARRIAGE_WEDDING;
const LogEnum_OperateType LogEnum::MARRIAGE_WEDDING_STAY;
const LogEnum_OperateType LogEnum::MARRIAGE_WEDDING_DRINK;
const LogEnum_OperateType LogEnum::MARRIAGE_GOODS_UPGRADE;
const LogEnum_OperateType LogEnum::MARRIAGE_WEDDING_GIFT_COLLECT;
const LogEnum_OperateType LogEnum::MONSTER_FIGHT_STAY;
const LogEnum_OperateType LogEnum::RECHARGE_EXCHANGE_LINGPAI;
const LogEnum_OperateType LogEnum::LUCKY_DRAW_PRIZE;
const LogEnum_OperateType LogEnum::YI_TIAN_SHEN_JUE;
const LogEnum_OperateType LogEnum::BOSS_CAI_JI;
const LogEnum_OperateType LogEnum::WASH_SUPER_WEAPON;
const LogEnum_OperateType LogEnum::PLATFORM_SUMMER_PRIZE;
const LogEnum_OperateType LogEnum::GLOBAL_RECHARGE_PRIZE;
const LogEnum_OperateType LogEnum::VIP_PROMOTION;
const LogEnum_OperateType LogEnum::MARRIAGE_PROMOTION;
const LogEnum_OperateType LogEnum::MONSTER_FIGHT_CITY_BOSS_DEAD_PRIZE;
const LogEnum_OperateType LogEnum::TRANSFER;
const LogEnum_OperateType LogEnum::JINSHAN_PLATFORM_PRIZE;
const LogEnum_OperateType LogEnum::UPGRADE_JING_JIE;
const LogEnum_OperateType LogEnum::JING_JIE_DUNGEON_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_LONG_YUAN_PER_PERIOD;
const LogEnum_OperateType LogEnum::CLEAR_LONG_YUAN_COUNTDOWN;
const LogEnum_OperateType LogEnum::TU_LONG_DUNGEON_PRIZE;
const LogEnum_OperateType LogEnum::ENTER_TIAN_MEN;
const LogEnum_OperateType LogEnum::COLLECT_TIAN_MEN_PRIZE;
const LogEnum_OperateType LogEnum::TASK_PROMOTION_TASK_FINISH;
const LogEnum_OperateType LogEnum::TASK_PROMOTION_POINT_COLLECT;
const LogEnum_OperateType LogEnum::TASK_PROMOTION_RESET;
const LogEnum_OperateType LogEnum::EXCHANGE_ROUNDLIBAO;
const LogEnum_OperateType LogEnum::EXCHANGE_MAYDAY;
const LogEnum_OperateType LogEnum::EXCHANGE_DAILY_CONSUME_EXCHANGE;
const LogEnum_OperateType LogEnum::DAILY_CARD;
const LogEnum_OperateType LogEnum::JIN_JIE_DAN_DEMON;
const LogEnum_OperateType LogEnum::JIN_JIE_DAN_CLOAK;
const LogEnum_OperateType LogEnum::GALLUP;
const LogEnum_OperateType LogEnum::LUCKY_DRAW_PRIZE_POINT_EXCHANGE;
const LogEnum_OperateType LogEnum::RECHARE_GOLD_TREE;
const LogEnum_OperateType LogEnum::DAILY_AUCTION;
const LogEnum_OperateType LogEnum::DAILY_LUCKY_WHEEL;
const LogEnum_OperateType LogEnum::MARRIAGE_STORAGE;
const LogEnum_OperateType LogEnum::QIAN_QIU_DA_JIE_UPGRADE;
const LogEnum_OperateType LogEnum::LAO_BING_BACK_GLOBAL;
const LogEnum_OperateType LogEnum::LAO_BING_BACK_PERSONAL;
const LogEnum_OperateType LogEnum::RECHARGE_EXCHANGE_JINJIE;
const LogEnum_OperateType LogEnum::DAO_SHI_LOGIN;
const LogEnum_OperateType LogEnum::DAO_SHI_WU_SHUANG_CITY;
const LogEnum_OperateType LogEnum::DAO_SHI_LONG_CITY;
const LogEnum_OperateType LogEnum::CHI_HUO_SHEN_GONG_UPGRADE;
const LogEnum_OperateType LogEnum::GUILD_PLANT_DO_PLANT;
const LogEnum_OperateType LogEnum::GUILD_PLANT_DO_UPGRADE;
const LogEnum_OperateType LogEnum::GUILD_PLANT_COLLECT_PRIZE;
const LogEnum_OperateType LogEnum::GUILD_PLANT_TASK_PRIZE;
const LogEnum_OperateType LogEnum::YY_TRANSFER;
const LogEnum_OperateType LogEnum::CHANGE_RACE;
const LogEnum_OperateType LogEnum::HTZ_PRIZE;
const LogEnum_OperateType LogEnum::NATIONAL_DAY_LOGIN_PRIZE;
const LogEnum_OperateType LogEnum::NATIONAL_DAY_RECHARGE_PRIZE;
const LogEnum_OperateType LogEnum::NATIONAL_DAY_SHOP;
const LogEnum_OperateType LogEnum::NEW_DRAW_PRIZE;
const LogEnum_OperateType LogEnum::NEW_DRAW_PRIZE_POINT_EXCHANGE;
const LogEnum_OperateType LogEnum::MULTI_PRIZE_ON_LIMITED_TIME_GOODS_USE;
const LogEnum_OperateType LogEnum::SUPER_WEAPON_MIX_GEM;
const LogEnum_OperateType LogEnum::SUPER_WEAPON_MOVE_GEM;
const LogEnum_OperateType LogEnum::SELECT_IMAGE;
const LogEnum_OperateType LogEnum::WANDA_MOVIE;
const LogEnum_OperateType LogEnum::CHENG_BA_COLLECT_PARTICIPATE_PRIZE;
const LogEnum_OperateType LogEnum::CHENG_BA_COLLECT_WIN_PRIZE;
const LogEnum_OperateType LogEnum::CHENG_BA_COLLECT_TAX_PRIZE;
const LogEnum_OperateType LogEnum::REXHARGE_BOX_REBATE;
const LogEnum_OperateType LogEnum::MOUNT_TONGLING_ACTIVE;
const LogEnum_OperateType LogEnum::CONSUME_BOX_REBATE;
const LogEnum_OperateType LogEnum::WU_LIN_GROUP_WIN;
const LogEnum_OperateType LogEnum::WU_LIN_GROUP_LOSE;
const LogEnum_OperateType LogEnum::WU_LIN_16_WIN;
const LogEnum_OperateType LogEnum::WU_LIN_16_LOSE;
const LogEnum_OperateType LogEnum::WU_LIN_8_WIN;
const LogEnum_OperateType LogEnum::WU_LIN_8_LOSE;
const LogEnum_OperateType LogEnum::WU_LIN_4_WIN;
const LogEnum_OperateType LogEnum::WU_LIN_4_LOSE;
const LogEnum_OperateType LogEnum::WU_LIN_2_WIN;
const LogEnum_OperateType LogEnum::WU_LIN_2_LOSE;
const LogEnum_OperateType LogEnum::DEL_GOODS;
const LogEnum_OperateType LogEnum::MO_BING_UPGRADE;
const LogEnum_OperateType LogEnum::MO_BING_SPELL_UPGRADE;
const LogEnum_OperateType LogEnum::MO_BING_RECHARGE_PRIZE;
const LogEnum_OperateType LogEnum::COLLECT_WEIXIN_PRIZE2;
const LogEnum_OperateType LogEnum::WU_LIN_BID_PRIZE;
const LogEnum_OperateType LogEnum::LONG_XIAN_EXCHANGE;
const LogEnum_OperateType LogEnum::WASH_XUNZHANG;
const LogEnum_OperateType LogEnum::ZHAN_CHANG_EXCHANGE;
const LogEnum_OperateType LogEnum::FIGHT_AMOUNT_CHANGED_VALUE_RANK_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::YY_PURPlE_VIP;
const LogEnum_OperateType LogEnum::CHRISTMAS_EXCHANGE;
const LogEnum_OperateType LogEnum::CHRISTMAS_DECORATE;
const LogEnum_OperateType LogEnum::CHRISTMAS_COLLECT_TREE_PRIZE;
const LogEnum_OperateType LogEnum::CHRISTMAS_LUCKY_TRY;
const LogEnum_OperateType LogEnum::CREDITS_SHOP;
const LogEnum_OperateType LogEnum::TIAO_ZHAN_EXCHANGE;
const LogEnum_OperateType LogEnum::TIAO_ZHAN_PAIR;
const LogEnum_OperateType LogEnum::TIAO_ZHAN_PAIR_TIMEOUT;
const LogEnum_OperateType LogEnum::TIAO_ZHAN_PAIR_RESULT_TIMEOUT;
const LogEnum_OperateType LogEnum::TIAO_ZHAN_UNPAIR;
const LogEnum_OperateType LogEnum::MONOPOLY_RANDOM_ROLL;
const LogEnum_OperateType LogEnum::MONOPOLY_CONTROLLABLE_ROLL;
const LogEnum_OperateType LogEnum::MONOPOLY_ROLL_PRIZE;
const LogEnum_OperateType LogEnum::MONOPOLY_ADD_ROLL_TIMES;
const LogEnum_OperateType LogEnum::CREDITS_DRAW_EXCHANGE;
const LogEnum_OperateType LogEnum::CREDITS_DRAW_DRAW;
const LogEnum_OperateType LogEnum::COLLECT_SHENZHUANG;
const LogEnum_OperateType LogEnum::GUILD_HONG_BAO_GIVE;
const LogEnum_OperateType LogEnum::GUILD_HONG_BAO_COLLECT;
const LogEnum_OperateType LogEnum::LOGIN_PROMOTION;
const LogEnum_OperateType LogEnum::DAILY_ONELINE_PROMOTION;
const LogEnum_OperateType LogEnum::LOVE_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::LOVE_EXCHANGE;
const LogEnum_OperateType LogEnum::LOVE_WEIXIN;
const LogEnum_OperateType LogEnum::LOVE_ONLINE1;
const LogEnum_OperateType LogEnum::LOVE_ONLINE2;
const LogEnum_OperateType LogEnum::LOVE_ONLINE3;
const LogEnum_OperateType LogEnum::LOVE_ONLINE4;
const LogEnum_OperateType LogEnum::WU_DAO_UPGRADE;
const LogEnum_OperateType LogEnum::RECHARGE_EXCHANGE;
const LogEnum_OperateType LogEnum::CONSUME_EXCHANGE_PROMOTION;
const LogEnum_OperateType LogEnum::OFFLINE_EXCHANGE_PROMOTION;
const LogEnum_OperateType LogEnum::FREE_EXCHANGE;
const LogEnum_OperateType LogEnum::NIDAOQIANKUN;
const LogEnum_OperateType LogEnum::SECRET_SHOP_BUY;
const LogEnum_OperateType LogEnum::SECRET_SHOP_REFRESH;
const LogEnum_OperateType LogEnum::TONG_TAIN_TA_REFRESH;
const LogEnum_OperateType LogEnum::ANNIVERSARY_RECHARGE_FANLI;
const LogEnum_OperateType LogEnum::ANNIVERSARY_CAKE;
const LogEnum_OperateType LogEnum::ANNIVERSARY_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::FIREWORK_PROMOTION;
const LogEnum_OperateType LogEnum::ANNIVERSARY_TASK_PRIZE;
const LogEnum_OperateType LogEnum::DAILY_FIRST_RECHARGE_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::DAILY_FIRST_RECHARGE_FINAL_PRIZE;
const LogEnum_OperateType LogEnum::MELEE_STAY;
const LogEnum_OperateType LogEnum::MELEE_RELIVE;
const LogEnum_OperateType LogEnum::HE_CHENG_MOUNT_EQUIP;
const LogEnum_OperateType LogEnum::ANNIVERSARY_REFRESH_TASK;
const LogEnum_OperateType LogEnum::HUGE_DATA_PRIZE;
const LogEnum_OperateType LogEnum::ANNIVERSARY_JP_EXCHANGE;
const LogEnum_OperateType LogEnum::ANNIVERSARY_CONSUME_RETURN;
const LogEnum_OperateType LogEnum::ANNIVERSARY_VIP_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::ANNIVERSARY_FINAL_TASK_PRIZE;
const LogEnum_OperateType LogEnum::SHIELD_UPGRADE;
const LogEnum_OperateType LogEnum::MYSTERY_DUNGEON_LING_GUANG;
const LogEnum_OperateType LogEnum::LING_GUANG_COST;
const LogEnum_OperateType LogEnum::LING_GUANG_DAILY_PICK;
const LogEnum_OperateType LogEnum::LING_GUANG_ADD;
const LogEnum_OperateType LogEnum::MOUNT_LEVEL_FORGE;
const LogEnum_OperateType LogEnum::PET_LEVEL_FORGE;
const LogEnum_OperateType LogEnum::SHIELD_LEVEL_FORGE;
const LogEnum_OperateType LogEnum::WUYI_RECHARGE_FANLI;
const LogEnum_OperateType LogEnum::MOUNT_TI_PIN;
const LogEnum_OperateType LogEnum::PET_TI_PIN;
const LogEnum_OperateType LogEnum::SHIELD_TI_PIN;
const LogEnum_OperateType LogEnum::LOGIN_PROMOTION2;
const LogEnum_OperateType LogEnum::DAILY_FIRST_RECHARGE_DAILY_PRIZE2;
const LogEnum_OperateType LogEnum::DAILY_FIRST_RECHARGE_FINAL_PRIZE2;
const LogEnum_OperateType LogEnum::LAO_DONG_ZUI_GUANG_RONG;
const LogEnum_OperateType LogEnum::TIAN_MING_BAO_JIAN_TRIGGER;
const LogEnum_OperateType LogEnum::TIAN_MING_VALUES_REVERT;
const LogEnum_OperateType LogEnum::TIAN_MING_VALUES_RESET;
const LogEnum_OperateType LogEnum::HERO_BOSS_CARD_REFRESH;
const LogEnum_OperateType LogEnum::HERO_BOSS_CARD_CALL;
const LogEnum_OperateType LogEnum::HERO_BOSS_CARD_DUNGEON_FINISH;
const LogEnum_OperateType LogEnum::GUILD_BOSS_CARD_FEED;
const LogEnum_OperateType LogEnum::GUILD_BOSS_CARD_CALL;
const LogEnum_OperateType LogEnum::GUILD_BOSS_CARD_CALL_PRIZE;
const LogEnum_OperateType LogEnum::GUILD_BOSS_CARD_KILL_PRIZE;
const LogEnum_OperateType LogEnum::BUY_MONTHLY_CARD;
const LogEnum_OperateType LogEnum::MONTHLY_CARD_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::MONTHLY_CARD_TASK_PRIZE;
const LogEnum_OperateType LogEnum::GOODS_ACTIVE_MONTHLY_CARD;
const LogEnum_OperateType LogEnum::MONTHLY_CARD_YUANBAO_FINISH_TASK;
const LogEnum_OperateType LogEnum::JIUWEIHU_WEAPON;
const LogEnum_OperateType LogEnum::HE_CHENG_SHIELD_EQUIP;
const LogEnum_OperateType LogEnum::TONG_TIAN_BAO_JIAN;
const LogEnum_OperateType LogEnum::HAIDI_MAP_FREE_TICKET;
const LogEnum_OperateType LogEnum::HAIDI_MAP_BISHUIDAN;
const LogEnum_OperateType LogEnum::HAIDI_MAP_TICKET;
const LogEnum_OperateType LogEnum::BU_YU_ENTER_DUNGEON;
const LogEnum_OperateType LogEnum::GOODS_UPGRADE;
const LogEnum_OperateType LogEnum::BU_YU_SHOP;
const LogEnum_OperateType LogEnum::BU_YU_BUY_BULLET;
const LogEnum_OperateType LogEnum::GOODS_FORCE_REMOVE;
const LogEnum_OperateType LogEnum::QIXI_DAILY_PRIZE;
const LogEnum_OperateType LogEnum::JIANDAO_UPGRADE;
const LogEnum_OperateType LogEnum::LING_YU_UPGRADE;
const LogEnum_OperateType LogEnum::COMEBACK;
const LogEnum_OperateType LogEnum::BUY_HAMMER;
const LogEnum_OperateType LogEnum::BUY_DA_DI_SHU_ITEM;
const LogEnum_OperateType LogEnum::WELFARE_COMPENSATION;
const LogEnum_OperateType LogEnum::YU_YI_GE_UPGRADE;
const LogEnum_OperateType LogEnum::YU_YI_GE_FASHION_TO_BLESS_AMOUNT;
const LogEnum_OperateType LogEnum::YU_YI_GE_MOVE_FASHION;
const LogEnum_OperateType LogEnum::FENG_YUN_DAO_BUY_CHALLENGE_COUNT;
const LogEnum_OperateType LogEnum::BOW_TONGLING_ACTIVE;
const LogEnum_OperateType LogEnum::SYS_HONG_BAO_COLLETED;
const LogEnum_OperateType LogEnum::INLAY_BAO_SHI;
const LogEnum_OperateType LogEnum::REMOVE_BAO_SHI;
const LogEnum_OperateType LogEnum::BAO_SHI_RESET;
const LogEnum_OperateType LogEnum::BAO_SHI_HE_CHENG;
const LogEnum_OperateType LogEnum::EXCHANGE_COST_GOODS_AND_VALUES;
const LogEnum_OperateType LogEnum::PET_TONGLING_ACTIVE;
const LogEnum_OperateType LogEnum::PET_TONG_LING_GIFT_SPELL_UPGRADE;
const LogEnum_OperateType LogEnum::MO_FANG_UPGRADE;
const LogEnum_OperateType LogEnum::FORCE_REMOVE_FU_LI_CARD;
const LogEnum_OperateType LogEnum::CHOU_JIANG_FAN_LI_CHOU_JIANG;
const LogEnum_OperateType LogEnum::CHOU_JIANG_FAN_LI_RECHARGE;
const LogEnum_OperateType LogEnum::CHOU_JIANG_FAN_LI_GOODS_ADD;
const LogEnum_OperateType LogEnum::CHANGE_LV_HANDLER;
const LogEnum_OperateType LogEnum::NEW_ROBOT;
const LogEnum_OperateType LogEnum::DAILY_SHOP;
const LogEnum_OperateType LogEnum::OperateType_MIN;
const LogEnum_OperateType LogEnum::OperateType_MAX;
const int LogEnum::OperateType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LogEnum_TransportType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEnum_TransportType_descriptor_;
}
bool LogEnum_TransportType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogEnum_TransportType LogEnum::GATE;
const LogEnum_TransportType LogEnum::CHANGE_LINE;
const LogEnum_TransportType LogEnum::CITY_RELIVE;
const LogEnum_TransportType LogEnum::RETURN_CITY;
const LogEnum_TransportType LogEnum::TP_GOODS;
const LogEnum_TransportType LogEnum::NPC;
const LogEnum_TransportType LogEnum::MAP;
const LogEnum_TransportType LogEnum::TP_TASK;
const LogEnum_TransportType LogEnum::ASSIST;
const LogEnum_TransportType LogEnum::ENTER_DUNGEON;
const LogEnum_TransportType LogEnum::LEAVE_DUNGEON;
const LogEnum_TransportType LogEnum::FIRE_MONKY;
const LogEnum_TransportType LogEnum::GM_TP;
const LogEnum_TransportType LogEnum::GUILD_FIGHT;
const LogEnum_TransportType LogEnum::LONG_CITY;
const LogEnum_TransportType LogEnum::ONE_ON_ONE;
const LogEnum_TransportType LogEnum::MARRIAGE;
const LogEnum_TransportType LogEnum::GOLD_PIG;
const LogEnum_TransportType LogEnum::CHRISTMAS;
const LogEnum_TransportType LogEnum::ENTER_TIAO_ZHAN;
const LogEnum_TransportType LogEnum::NIAN_SHOU;
const LogEnum_TransportType LogEnum::ANNI_CAKE;
const LogEnum_TransportType LogEnum::GUILD_BOSS;
const LogEnum_TransportType LogEnum::HAIDI_MAP;
const LogEnum_TransportType LogEnum::TransportType_MIN;
const LogEnum_TransportType LogEnum::TransportType_MAX;
const int LogEnum::TransportType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LogEnum_SceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEnum_SceneType_descriptor_;
}
bool LogEnum_SceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogEnum_SceneType LogEnum::NORMAL;
const LogEnum_SceneType LogEnum::STORY_DUNGEON;
const LogEnum_SceneType LogEnum::CHALLENGE_DUNGEON;
const LogEnum_SceneType LogEnum::VIP_DUNGEON;
const LogEnum_SceneType LogEnum::DEFENCE_DUNGEON;
const LogEnum_SceneType LogEnum::LING_YUN_DUNGEON;
const LogEnum_SceneType LogEnum::SOU_SHEN_DUNGEON;
const LogEnum_SceneType LogEnum::LONG_MAI_DUNGEON;
const LogEnum_SceneType LogEnum::WU_JUE_DUNGEON;
const LogEnum_SceneType LogEnum::JI_JIAN_DUNGEON;
const LogEnum_SceneType LogEnum::HUO_LIN_DUNGEON;
const LogEnum_SceneType LogEnum::ARENA_DUNGEON;
const LogEnum_SceneType LogEnum::ZHONG_HUA_GE_DUNGEON;
const LogEnum_SceneType LogEnum::GUILD_DUNGEON;
const LogEnum_SceneType LogEnum::GUILD_PVP_DUNGEON;
const LogEnum_SceneType LogEnum::DOTA;
const LogEnum_SceneType LogEnum::NEW_HUO_LIN_DUNGEON;
const LogEnum_SceneType LogEnum::COUPLE_DUNGEON;
const LogEnum_SceneType LogEnum::JING_JIE_DUNGEON;
const LogEnum_SceneType LogEnum::TU_LONG_DUNGEON;
const LogEnum_SceneType LogEnum::TIAN_MEN_DUNGEON;
const LogEnum_SceneType LogEnum::XIN_MO_DUNGEON;
const LogEnum_SceneType LogEnum::GUILD_PLANT_DUNGEON;
const LogEnum_SceneType LogEnum::HTZ_DUNGEON;
const LogEnum_SceneType LogEnum::CHENG_BA;
const LogEnum_SceneType LogEnum::WU_LIN;
const LogEnum_SceneType LogEnum::LONG_XIAN;
const LogEnum_SceneType LogEnum::ZHAN_CHANG;
const LogEnum_SceneType LogEnum::YY_PURPLE_DUNGEON;
const LogEnum_SceneType LogEnum::TIAO_ZHAN;
const LogEnum_SceneType LogEnum::TONG_TIAN_TA;
const LogEnum_SceneType LogEnum::MELEE;
const LogEnum_SceneType LogEnum::MYSTERY_DUNGEON;
const LogEnum_SceneType LogEnum::BU_YU_DUNGEON;
const LogEnum_SceneType LogEnum::SHEN_HAI_WEI_JI;
const LogEnum_SceneType LogEnum::FENG_YUN_DAO;
const LogEnum_SceneType LogEnum::HELL_DUNGEON;
const LogEnum_SceneType LogEnum::SceneType_MIN;
const LogEnum_SceneType LogEnum::SceneType_MAX;
const int LogEnum::SceneType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

LogEnum::LogEnum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEnum::InitAsDefaultInstance() {
}

LogEnum::LogEnum(const LogEnum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEnum::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEnum::~LogEnum() {
  SharedDtor();
}

void LogEnum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogEnum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEnum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEnum_descriptor_;
}

const LogEnum& LogEnum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

LogEnum* LogEnum::default_instance_ = NULL;

LogEnum* LogEnum::New() const {
  return new LogEnum;
}

void LogEnum::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LogEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEnum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEnum::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEnum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEnum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEnum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEnum::MergeFrom(const LogEnum& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEnum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEnum::CopyFrom(const LogEnum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEnum::IsInitialized() const {

  return true;
}

void LogEnum::Swap(LogEnum* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEnum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEnum_descriptor_;
  metadata.reflection = LogEnum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
