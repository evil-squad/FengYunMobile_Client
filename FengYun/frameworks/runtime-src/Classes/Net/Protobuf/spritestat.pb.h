// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spritestat.proto

#ifndef PROTOBUF_spritestat_2eproto__INCLUDED
#define PROTOBUF_spritestat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_spritestat_2eproto();
void protobuf_AssignDesc_spritestat_2eproto();
void protobuf_ShutdownFile_spritestat_2eproto();

class SpriteStatProto;
class SingleStatProto;

enum StatType {
  MAX_LIFE = 0,
  MAX_STAMINA = 1,
  ATTACK = 2,
  DEFENCE = 3,
  CRIT = 4,
  ANTI_CRIT = 5,
  HIT = 6,
  DODGE = 7,
  MOVE_SPEED = 8,
  SHOOT_MOUNT_RESIST = 9,
  STUN_RESIST = 10,
  HUSH_RESIST = 11,
  SLOW_RESIST = 12,
  POISON_RESIST = 13,
  ANTI_HURT = 14,
  AD_HURT = 15,
  SUCK_HURT = 16,
  SUB_SHOOT_MOUNT_RESIST = 17,
  SUB_STUN_RESIST = 18,
  SUB_HUSH_RESIST = 19,
  SUB_SLOW_RESIST = 20,
  SUB_POISON_RESIST = 21,
  AD_MOBING_STAT = 22,
  JIN = 23,
  MU = 24,
  SHUI = 25,
  HUO = 26,
  TU = 27,
  BLEED_RESIST = 28,
  SUB_BLEED_RESIST = 29
};
bool StatType_IsValid(int value);
const StatType StatType_MIN = MAX_LIFE;
const StatType StatType_MAX = SUB_BLEED_RESIST;
const int StatType_ARRAYSIZE = StatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatType_descriptor();
inline const ::std::string& StatType_Name(StatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatType_descriptor(), value);
}
inline bool StatType_Parse(
    const ::std::string& name, StatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatType>(
    StatType_descriptor(), name, value);
}
// ===================================================================

class SpriteStatProto : public ::google::protobuf::Message {
 public:
  SpriteStatProto();
  virtual ~SpriteStatProto();

  SpriteStatProto(const SpriteStatProto& from);

  inline SpriteStatProto& operator=(const SpriteStatProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpriteStatProto& default_instance();

  void Swap(SpriteStatProto* other);

  // implements Message ----------------------------------------------

  SpriteStatProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpriteStatProto& from);
  void MergeFrom(const SpriteStatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 max_life = 1;
  inline bool has_max_life() const;
  inline void clear_max_life();
  static const int kMaxLifeFieldNumber = 1;
  inline ::google::protobuf::int64 max_life() const;
  inline void set_max_life(::google::protobuf::int64 value);

  // optional int32 max_stamina = 3;
  inline bool has_max_stamina() const;
  inline void clear_max_stamina();
  static const int kMaxStaminaFieldNumber = 3;
  inline ::google::protobuf::int32 max_stamina() const;
  inline void set_max_stamina(::google::protobuf::int32 value);

  // optional int32 attack = 4;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 4;
  inline ::google::protobuf::int32 attack() const;
  inline void set_attack(::google::protobuf::int32 value);

  // optional int32 defence = 5;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 5;
  inline ::google::protobuf::int32 defence() const;
  inline void set_defence(::google::protobuf::int32 value);

  // optional int32 crit = 6;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 6;
  inline ::google::protobuf::int32 crit() const;
  inline void set_crit(::google::protobuf::int32 value);

  // optional int32 anti_crit = 7;
  inline bool has_anti_crit() const;
  inline void clear_anti_crit();
  static const int kAntiCritFieldNumber = 7;
  inline ::google::protobuf::int32 anti_crit() const;
  inline void set_anti_crit(::google::protobuf::int32 value);

  // optional int32 hit = 8;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 8;
  inline ::google::protobuf::int32 hit() const;
  inline void set_hit(::google::protobuf::int32 value);

  // optional int32 dodge = 9;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 9;
  inline ::google::protobuf::int32 dodge() const;
  inline void set_dodge(::google::protobuf::int32 value);

  // optional int32 move_speed = 10;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 10;
  inline ::google::protobuf::int32 move_speed() const;
  inline void set_move_speed(::google::protobuf::int32 value);

  // optional int32 shoot_mount_resist = 11;
  inline bool has_shoot_mount_resist() const;
  inline void clear_shoot_mount_resist();
  static const int kShootMountResistFieldNumber = 11;
  inline ::google::protobuf::int32 shoot_mount_resist() const;
  inline void set_shoot_mount_resist(::google::protobuf::int32 value);

  // optional int32 stun_resist = 12;
  inline bool has_stun_resist() const;
  inline void clear_stun_resist();
  static const int kStunResistFieldNumber = 12;
  inline ::google::protobuf::int32 stun_resist() const;
  inline void set_stun_resist(::google::protobuf::int32 value);

  // optional int32 hush_resist = 13;
  inline bool has_hush_resist() const;
  inline void clear_hush_resist();
  static const int kHushResistFieldNumber = 13;
  inline ::google::protobuf::int32 hush_resist() const;
  inline void set_hush_resist(::google::protobuf::int32 value);

  // optional int32 slow_resist = 14;
  inline bool has_slow_resist() const;
  inline void clear_slow_resist();
  static const int kSlowResistFieldNumber = 14;
  inline ::google::protobuf::int32 slow_resist() const;
  inline void set_slow_resist(::google::protobuf::int32 value);

  // optional int32 poison_resist = 15;
  inline bool has_poison_resist() const;
  inline void clear_poison_resist();
  static const int kPoisonResistFieldNumber = 15;
  inline ::google::protobuf::int32 poison_resist() const;
  inline void set_poison_resist(::google::protobuf::int32 value);

  // optional int32 max_life_per = 16;
  inline bool has_max_life_per() const;
  inline void clear_max_life_per();
  static const int kMaxLifePerFieldNumber = 16;
  inline ::google::protobuf::int32 max_life_per() const;
  inline void set_max_life_per(::google::protobuf::int32 value);

  // optional int32 attack_per = 17;
  inline bool has_attack_per() const;
  inline void clear_attack_per();
  static const int kAttackPerFieldNumber = 17;
  inline ::google::protobuf::int32 attack_per() const;
  inline void set_attack_per(::google::protobuf::int32 value);

  // optional int32 defence_per = 18;
  inline bool has_defence_per() const;
  inline void clear_defence_per();
  static const int kDefencePerFieldNumber = 18;
  inline ::google::protobuf::int32 defence_per() const;
  inline void set_defence_per(::google::protobuf::int32 value);

  // optional int32 crit_per = 19;
  inline bool has_crit_per() const;
  inline void clear_crit_per();
  static const int kCritPerFieldNumber = 19;
  inline ::google::protobuf::int32 crit_per() const;
  inline void set_crit_per(::google::protobuf::int32 value);

  // optional int32 anti_crit_per = 20;
  inline bool has_anti_crit_per() const;
  inline void clear_anti_crit_per();
  static const int kAntiCritPerFieldNumber = 20;
  inline ::google::protobuf::int32 anti_crit_per() const;
  inline void set_anti_crit_per(::google::protobuf::int32 value);

  // optional int32 hit_per = 21;
  inline bool has_hit_per() const;
  inline void clear_hit_per();
  static const int kHitPerFieldNumber = 21;
  inline ::google::protobuf::int32 hit_per() const;
  inline void set_hit_per(::google::protobuf::int32 value);

  // optional int32 dodge_per = 22;
  inline bool has_dodge_per() const;
  inline void clear_dodge_per();
  static const int kDodgePerFieldNumber = 22;
  inline ::google::protobuf::int32 dodge_per() const;
  inline void set_dodge_per(::google::protobuf::int32 value);

  // optional int32 move_speed_per = 23;
  inline bool has_move_speed_per() const;
  inline void clear_move_speed_per();
  static const int kMoveSpeedPerFieldNumber = 23;
  inline ::google::protobuf::int32 move_speed_per() const;
  inline void set_move_speed_per(::google::protobuf::int32 value);

  // optional int32 anti_hurt = 24;
  inline bool has_anti_hurt() const;
  inline void clear_anti_hurt();
  static const int kAntiHurtFieldNumber = 24;
  inline ::google::protobuf::int32 anti_hurt() const;
  inline void set_anti_hurt(::google::protobuf::int32 value);

  // optional int32 anti_hurt_per = 25;
  inline bool has_anti_hurt_per() const;
  inline void clear_anti_hurt_per();
  static const int kAntiHurtPerFieldNumber = 25;
  inline ::google::protobuf::int32 anti_hurt_per() const;
  inline void set_anti_hurt_per(::google::protobuf::int32 value);

  // optional int32 ad_hurt = 26;
  inline bool has_ad_hurt() const;
  inline void clear_ad_hurt();
  static const int kAdHurtFieldNumber = 26;
  inline ::google::protobuf::int32 ad_hurt() const;
  inline void set_ad_hurt(::google::protobuf::int32 value);

  // optional int32 ad_hurt_per = 27;
  inline bool has_ad_hurt_per() const;
  inline void clear_ad_hurt_per();
  static const int kAdHurtPerFieldNumber = 27;
  inline ::google::protobuf::int32 ad_hurt_per() const;
  inline void set_ad_hurt_per(::google::protobuf::int32 value);

  // optional int32 suck_hurt = 28;
  inline bool has_suck_hurt() const;
  inline void clear_suck_hurt();
  static const int kSuckHurtFieldNumber = 28;
  inline ::google::protobuf::int32 suck_hurt() const;
  inline void set_suck_hurt(::google::protobuf::int32 value);

  // optional int32 suck_hurt_per = 29;
  inline bool has_suck_hurt_per() const;
  inline void clear_suck_hurt_per();
  static const int kSuckHurtPerFieldNumber = 29;
  inline ::google::protobuf::int32 suck_hurt_per() const;
  inline void set_suck_hurt_per(::google::protobuf::int32 value);

  // optional int32 sub_shoot_mount_resist = 30;
  inline bool has_sub_shoot_mount_resist() const;
  inline void clear_sub_shoot_mount_resist();
  static const int kSubShootMountResistFieldNumber = 30;
  inline ::google::protobuf::int32 sub_shoot_mount_resist() const;
  inline void set_sub_shoot_mount_resist(::google::protobuf::int32 value);

  // optional int32 sub_stun_resist = 31;
  inline bool has_sub_stun_resist() const;
  inline void clear_sub_stun_resist();
  static const int kSubStunResistFieldNumber = 31;
  inline ::google::protobuf::int32 sub_stun_resist() const;
  inline void set_sub_stun_resist(::google::protobuf::int32 value);

  // optional int32 sub_hush_resist = 32;
  inline bool has_sub_hush_resist() const;
  inline void clear_sub_hush_resist();
  static const int kSubHushResistFieldNumber = 32;
  inline ::google::protobuf::int32 sub_hush_resist() const;
  inline void set_sub_hush_resist(::google::protobuf::int32 value);

  // optional int32 sub_slow_resist = 33;
  inline bool has_sub_slow_resist() const;
  inline void clear_sub_slow_resist();
  static const int kSubSlowResistFieldNumber = 33;
  inline ::google::protobuf::int32 sub_slow_resist() const;
  inline void set_sub_slow_resist(::google::protobuf::int32 value);

  // optional int32 sub_poison_resist = 34;
  inline bool has_sub_poison_resist() const;
  inline void clear_sub_poison_resist();
  static const int kSubPoisonResistFieldNumber = 34;
  inline ::google::protobuf::int32 sub_poison_resist() const;
  inline void set_sub_poison_resist(::google::protobuf::int32 value);

  // optional int32 ad_mobing_stat_per = 35;
  inline bool has_ad_mobing_stat_per() const;
  inline void clear_ad_mobing_stat_per();
  static const int kAdMobingStatPerFieldNumber = 35;
  inline ::google::protobuf::int32 ad_mobing_stat_per() const;
  inline void set_ad_mobing_stat_per(::google::protobuf::int32 value);

  // optional int32 jin_per = 36;
  inline bool has_jin_per() const;
  inline void clear_jin_per();
  static const int kJinPerFieldNumber = 36;
  inline ::google::protobuf::int32 jin_per() const;
  inline void set_jin_per(::google::protobuf::int32 value);

  // optional int32 mu_per = 37;
  inline bool has_mu_per() const;
  inline void clear_mu_per();
  static const int kMuPerFieldNumber = 37;
  inline ::google::protobuf::int32 mu_per() const;
  inline void set_mu_per(::google::protobuf::int32 value);

  // optional int32 shui_per = 38;
  inline bool has_shui_per() const;
  inline void clear_shui_per();
  static const int kShuiPerFieldNumber = 38;
  inline ::google::protobuf::int32 shui_per() const;
  inline void set_shui_per(::google::protobuf::int32 value);

  // optional int32 huo_per = 39;
  inline bool has_huo_per() const;
  inline void clear_huo_per();
  static const int kHuoPerFieldNumber = 39;
  inline ::google::protobuf::int32 huo_per() const;
  inline void set_huo_per(::google::protobuf::int32 value);

  // optional int32 tu_per = 40;
  inline bool has_tu_per() const;
  inline void clear_tu_per();
  static const int kTuPerFieldNumber = 40;
  inline ::google::protobuf::int32 tu_per() const;
  inline void set_tu_per(::google::protobuf::int32 value);

  // optional int32 bleed_resist = 41;
  inline bool has_bleed_resist() const;
  inline void clear_bleed_resist();
  static const int kBleedResistFieldNumber = 41;
  inline ::google::protobuf::int32 bleed_resist() const;
  inline void set_bleed_resist(::google::protobuf::int32 value);

  // optional int32 sub_bleed_resist = 42;
  inline bool has_sub_bleed_resist() const;
  inline void clear_sub_bleed_resist();
  static const int kSubBleedResistFieldNumber = 42;
  inline ::google::protobuf::int32 sub_bleed_resist() const;
  inline void set_sub_bleed_resist(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.SpriteStatProto)
 private:
  inline void set_has_max_life();
  inline void clear_has_max_life();
  inline void set_has_max_stamina();
  inline void clear_has_max_stamina();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defence();
  inline void clear_has_defence();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_anti_crit();
  inline void clear_has_anti_crit();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_move_speed();
  inline void clear_has_move_speed();
  inline void set_has_shoot_mount_resist();
  inline void clear_has_shoot_mount_resist();
  inline void set_has_stun_resist();
  inline void clear_has_stun_resist();
  inline void set_has_hush_resist();
  inline void clear_has_hush_resist();
  inline void set_has_slow_resist();
  inline void clear_has_slow_resist();
  inline void set_has_poison_resist();
  inline void clear_has_poison_resist();
  inline void set_has_max_life_per();
  inline void clear_has_max_life_per();
  inline void set_has_attack_per();
  inline void clear_has_attack_per();
  inline void set_has_defence_per();
  inline void clear_has_defence_per();
  inline void set_has_crit_per();
  inline void clear_has_crit_per();
  inline void set_has_anti_crit_per();
  inline void clear_has_anti_crit_per();
  inline void set_has_hit_per();
  inline void clear_has_hit_per();
  inline void set_has_dodge_per();
  inline void clear_has_dodge_per();
  inline void set_has_move_speed_per();
  inline void clear_has_move_speed_per();
  inline void set_has_anti_hurt();
  inline void clear_has_anti_hurt();
  inline void set_has_anti_hurt_per();
  inline void clear_has_anti_hurt_per();
  inline void set_has_ad_hurt();
  inline void clear_has_ad_hurt();
  inline void set_has_ad_hurt_per();
  inline void clear_has_ad_hurt_per();
  inline void set_has_suck_hurt();
  inline void clear_has_suck_hurt();
  inline void set_has_suck_hurt_per();
  inline void clear_has_suck_hurt_per();
  inline void set_has_sub_shoot_mount_resist();
  inline void clear_has_sub_shoot_mount_resist();
  inline void set_has_sub_stun_resist();
  inline void clear_has_sub_stun_resist();
  inline void set_has_sub_hush_resist();
  inline void clear_has_sub_hush_resist();
  inline void set_has_sub_slow_resist();
  inline void clear_has_sub_slow_resist();
  inline void set_has_sub_poison_resist();
  inline void clear_has_sub_poison_resist();
  inline void set_has_ad_mobing_stat_per();
  inline void clear_has_ad_mobing_stat_per();
  inline void set_has_jin_per();
  inline void clear_has_jin_per();
  inline void set_has_mu_per();
  inline void clear_has_mu_per();
  inline void set_has_shui_per();
  inline void clear_has_shui_per();
  inline void set_has_huo_per();
  inline void clear_has_huo_per();
  inline void set_has_tu_per();
  inline void clear_has_tu_per();
  inline void set_has_bleed_resist();
  inline void clear_has_bleed_resist();
  inline void set_has_sub_bleed_resist();
  inline void clear_has_sub_bleed_resist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 max_life_;
  ::google::protobuf::int32 max_stamina_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 defence_;
  ::google::protobuf::int32 crit_;
  ::google::protobuf::int32 anti_crit_;
  ::google::protobuf::int32 hit_;
  ::google::protobuf::int32 dodge_;
  ::google::protobuf::int32 move_speed_;
  ::google::protobuf::int32 shoot_mount_resist_;
  ::google::protobuf::int32 stun_resist_;
  ::google::protobuf::int32 hush_resist_;
  ::google::protobuf::int32 slow_resist_;
  ::google::protobuf::int32 poison_resist_;
  ::google::protobuf::int32 max_life_per_;
  ::google::protobuf::int32 attack_per_;
  ::google::protobuf::int32 defence_per_;
  ::google::protobuf::int32 crit_per_;
  ::google::protobuf::int32 anti_crit_per_;
  ::google::protobuf::int32 hit_per_;
  ::google::protobuf::int32 dodge_per_;
  ::google::protobuf::int32 move_speed_per_;
  ::google::protobuf::int32 anti_hurt_;
  ::google::protobuf::int32 anti_hurt_per_;
  ::google::protobuf::int32 ad_hurt_;
  ::google::protobuf::int32 ad_hurt_per_;
  ::google::protobuf::int32 suck_hurt_;
  ::google::protobuf::int32 suck_hurt_per_;
  ::google::protobuf::int32 sub_shoot_mount_resist_;
  ::google::protobuf::int32 sub_stun_resist_;
  ::google::protobuf::int32 sub_hush_resist_;
  ::google::protobuf::int32 sub_slow_resist_;
  ::google::protobuf::int32 sub_poison_resist_;
  ::google::protobuf::int32 ad_mobing_stat_per_;
  ::google::protobuf::int32 jin_per_;
  ::google::protobuf::int32 mu_per_;
  ::google::protobuf::int32 shui_per_;
  ::google::protobuf::int32 huo_per_;
  ::google::protobuf::int32 tu_per_;
  ::google::protobuf::int32 bleed_resist_;
  ::google::protobuf::int32 sub_bleed_resist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  friend void  protobuf_AddDesc_spritestat_2eproto();
  friend void protobuf_AssignDesc_spritestat_2eproto();
  friend void protobuf_ShutdownFile_spritestat_2eproto();

  void InitAsDefaultInstance();
  static SpriteStatProto* default_instance_;
};
// -------------------------------------------------------------------

class SingleStatProto : public ::google::protobuf::Message {
 public:
  SingleStatProto();
  virtual ~SingleStatProto();

  SingleStatProto(const SingleStatProto& from);

  inline SingleStatProto& operator=(const SingleStatProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleStatProto& default_instance();

  void Swap(SingleStatProto* other);

  // implements Message ----------------------------------------------

  SingleStatProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleStatProto& from);
  void MergeFrom(const SingleStatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.StatType stat_type = 1;
  inline bool has_stat_type() const;
  inline void clear_stat_type();
  static const int kStatTypeFieldNumber = 1;
  inline ::app::message::StatType stat_type() const;
  inline void set_stat_type(::app::message::StatType value);

  // optional int32 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.SingleStatProto)
 private:
  inline void set_has_stat_type();
  inline void clear_has_stat_type();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int stat_type_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_spritestat_2eproto();
  friend void protobuf_AssignDesc_spritestat_2eproto();
  friend void protobuf_ShutdownFile_spritestat_2eproto();

  void InitAsDefaultInstance();
  static SingleStatProto* default_instance_;
};
// ===================================================================


// ===================================================================

// SpriteStatProto

// optional int64 max_life = 1;
inline bool SpriteStatProto::has_max_life() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpriteStatProto::set_has_max_life() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpriteStatProto::clear_has_max_life() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpriteStatProto::clear_max_life() {
  max_life_ = GOOGLE_LONGLONG(0);
  clear_has_max_life();
}
inline ::google::protobuf::int64 SpriteStatProto::max_life() const {
  return max_life_;
}
inline void SpriteStatProto::set_max_life(::google::protobuf::int64 value) {
  set_has_max_life();
  max_life_ = value;
}

// optional int32 max_stamina = 3;
inline bool SpriteStatProto::has_max_stamina() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpriteStatProto::set_has_max_stamina() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpriteStatProto::clear_has_max_stamina() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpriteStatProto::clear_max_stamina() {
  max_stamina_ = 0;
  clear_has_max_stamina();
}
inline ::google::protobuf::int32 SpriteStatProto::max_stamina() const {
  return max_stamina_;
}
inline void SpriteStatProto::set_max_stamina(::google::protobuf::int32 value) {
  set_has_max_stamina();
  max_stamina_ = value;
}

// optional int32 attack = 4;
inline bool SpriteStatProto::has_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpriteStatProto::set_has_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpriteStatProto::clear_has_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpriteStatProto::clear_attack() {
  attack_ = 0;
  clear_has_attack();
}
inline ::google::protobuf::int32 SpriteStatProto::attack() const {
  return attack_;
}
inline void SpriteStatProto::set_attack(::google::protobuf::int32 value) {
  set_has_attack();
  attack_ = value;
}

// optional int32 defence = 5;
inline bool SpriteStatProto::has_defence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpriteStatProto::set_has_defence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpriteStatProto::clear_has_defence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpriteStatProto::clear_defence() {
  defence_ = 0;
  clear_has_defence();
}
inline ::google::protobuf::int32 SpriteStatProto::defence() const {
  return defence_;
}
inline void SpriteStatProto::set_defence(::google::protobuf::int32 value) {
  set_has_defence();
  defence_ = value;
}

// optional int32 crit = 6;
inline bool SpriteStatProto::has_crit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpriteStatProto::set_has_crit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpriteStatProto::clear_has_crit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpriteStatProto::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline ::google::protobuf::int32 SpriteStatProto::crit() const {
  return crit_;
}
inline void SpriteStatProto::set_crit(::google::protobuf::int32 value) {
  set_has_crit();
  crit_ = value;
}

// optional int32 anti_crit = 7;
inline bool SpriteStatProto::has_anti_crit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpriteStatProto::set_has_anti_crit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpriteStatProto::clear_has_anti_crit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpriteStatProto::clear_anti_crit() {
  anti_crit_ = 0;
  clear_has_anti_crit();
}
inline ::google::protobuf::int32 SpriteStatProto::anti_crit() const {
  return anti_crit_;
}
inline void SpriteStatProto::set_anti_crit(::google::protobuf::int32 value) {
  set_has_anti_crit();
  anti_crit_ = value;
}

// optional int32 hit = 8;
inline bool SpriteStatProto::has_hit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpriteStatProto::set_has_hit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpriteStatProto::clear_has_hit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpriteStatProto::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 SpriteStatProto::hit() const {
  return hit_;
}
inline void SpriteStatProto::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
}

// optional int32 dodge = 9;
inline bool SpriteStatProto::has_dodge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpriteStatProto::set_has_dodge() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpriteStatProto::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpriteStatProto::clear_dodge() {
  dodge_ = 0;
  clear_has_dodge();
}
inline ::google::protobuf::int32 SpriteStatProto::dodge() const {
  return dodge_;
}
inline void SpriteStatProto::set_dodge(::google::protobuf::int32 value) {
  set_has_dodge();
  dodge_ = value;
}

// optional int32 move_speed = 10;
inline bool SpriteStatProto::has_move_speed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpriteStatProto::set_has_move_speed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpriteStatProto::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpriteStatProto::clear_move_speed() {
  move_speed_ = 0;
  clear_has_move_speed();
}
inline ::google::protobuf::int32 SpriteStatProto::move_speed() const {
  return move_speed_;
}
inline void SpriteStatProto::set_move_speed(::google::protobuf::int32 value) {
  set_has_move_speed();
  move_speed_ = value;
}

// optional int32 shoot_mount_resist = 11;
inline bool SpriteStatProto::has_shoot_mount_resist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SpriteStatProto::set_has_shoot_mount_resist() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SpriteStatProto::clear_has_shoot_mount_resist() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SpriteStatProto::clear_shoot_mount_resist() {
  shoot_mount_resist_ = 0;
  clear_has_shoot_mount_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::shoot_mount_resist() const {
  return shoot_mount_resist_;
}
inline void SpriteStatProto::set_shoot_mount_resist(::google::protobuf::int32 value) {
  set_has_shoot_mount_resist();
  shoot_mount_resist_ = value;
}

// optional int32 stun_resist = 12;
inline bool SpriteStatProto::has_stun_resist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SpriteStatProto::set_has_stun_resist() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SpriteStatProto::clear_has_stun_resist() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SpriteStatProto::clear_stun_resist() {
  stun_resist_ = 0;
  clear_has_stun_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::stun_resist() const {
  return stun_resist_;
}
inline void SpriteStatProto::set_stun_resist(::google::protobuf::int32 value) {
  set_has_stun_resist();
  stun_resist_ = value;
}

// optional int32 hush_resist = 13;
inline bool SpriteStatProto::has_hush_resist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SpriteStatProto::set_has_hush_resist() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SpriteStatProto::clear_has_hush_resist() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SpriteStatProto::clear_hush_resist() {
  hush_resist_ = 0;
  clear_has_hush_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::hush_resist() const {
  return hush_resist_;
}
inline void SpriteStatProto::set_hush_resist(::google::protobuf::int32 value) {
  set_has_hush_resist();
  hush_resist_ = value;
}

// optional int32 slow_resist = 14;
inline bool SpriteStatProto::has_slow_resist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SpriteStatProto::set_has_slow_resist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SpriteStatProto::clear_has_slow_resist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SpriteStatProto::clear_slow_resist() {
  slow_resist_ = 0;
  clear_has_slow_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::slow_resist() const {
  return slow_resist_;
}
inline void SpriteStatProto::set_slow_resist(::google::protobuf::int32 value) {
  set_has_slow_resist();
  slow_resist_ = value;
}

// optional int32 poison_resist = 15;
inline bool SpriteStatProto::has_poison_resist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SpriteStatProto::set_has_poison_resist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SpriteStatProto::clear_has_poison_resist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SpriteStatProto::clear_poison_resist() {
  poison_resist_ = 0;
  clear_has_poison_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::poison_resist() const {
  return poison_resist_;
}
inline void SpriteStatProto::set_poison_resist(::google::protobuf::int32 value) {
  set_has_poison_resist();
  poison_resist_ = value;
}

// optional int32 max_life_per = 16;
inline bool SpriteStatProto::has_max_life_per() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SpriteStatProto::set_has_max_life_per() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SpriteStatProto::clear_has_max_life_per() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SpriteStatProto::clear_max_life_per() {
  max_life_per_ = 0;
  clear_has_max_life_per();
}
inline ::google::protobuf::int32 SpriteStatProto::max_life_per() const {
  return max_life_per_;
}
inline void SpriteStatProto::set_max_life_per(::google::protobuf::int32 value) {
  set_has_max_life_per();
  max_life_per_ = value;
}

// optional int32 attack_per = 17;
inline bool SpriteStatProto::has_attack_per() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SpriteStatProto::set_has_attack_per() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SpriteStatProto::clear_has_attack_per() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SpriteStatProto::clear_attack_per() {
  attack_per_ = 0;
  clear_has_attack_per();
}
inline ::google::protobuf::int32 SpriteStatProto::attack_per() const {
  return attack_per_;
}
inline void SpriteStatProto::set_attack_per(::google::protobuf::int32 value) {
  set_has_attack_per();
  attack_per_ = value;
}

// optional int32 defence_per = 18;
inline bool SpriteStatProto::has_defence_per() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SpriteStatProto::set_has_defence_per() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SpriteStatProto::clear_has_defence_per() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SpriteStatProto::clear_defence_per() {
  defence_per_ = 0;
  clear_has_defence_per();
}
inline ::google::protobuf::int32 SpriteStatProto::defence_per() const {
  return defence_per_;
}
inline void SpriteStatProto::set_defence_per(::google::protobuf::int32 value) {
  set_has_defence_per();
  defence_per_ = value;
}

// optional int32 crit_per = 19;
inline bool SpriteStatProto::has_crit_per() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SpriteStatProto::set_has_crit_per() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SpriteStatProto::clear_has_crit_per() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SpriteStatProto::clear_crit_per() {
  crit_per_ = 0;
  clear_has_crit_per();
}
inline ::google::protobuf::int32 SpriteStatProto::crit_per() const {
  return crit_per_;
}
inline void SpriteStatProto::set_crit_per(::google::protobuf::int32 value) {
  set_has_crit_per();
  crit_per_ = value;
}

// optional int32 anti_crit_per = 20;
inline bool SpriteStatProto::has_anti_crit_per() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SpriteStatProto::set_has_anti_crit_per() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SpriteStatProto::clear_has_anti_crit_per() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SpriteStatProto::clear_anti_crit_per() {
  anti_crit_per_ = 0;
  clear_has_anti_crit_per();
}
inline ::google::protobuf::int32 SpriteStatProto::anti_crit_per() const {
  return anti_crit_per_;
}
inline void SpriteStatProto::set_anti_crit_per(::google::protobuf::int32 value) {
  set_has_anti_crit_per();
  anti_crit_per_ = value;
}

// optional int32 hit_per = 21;
inline bool SpriteStatProto::has_hit_per() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SpriteStatProto::set_has_hit_per() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SpriteStatProto::clear_has_hit_per() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SpriteStatProto::clear_hit_per() {
  hit_per_ = 0;
  clear_has_hit_per();
}
inline ::google::protobuf::int32 SpriteStatProto::hit_per() const {
  return hit_per_;
}
inline void SpriteStatProto::set_hit_per(::google::protobuf::int32 value) {
  set_has_hit_per();
  hit_per_ = value;
}

// optional int32 dodge_per = 22;
inline bool SpriteStatProto::has_dodge_per() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SpriteStatProto::set_has_dodge_per() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SpriteStatProto::clear_has_dodge_per() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SpriteStatProto::clear_dodge_per() {
  dodge_per_ = 0;
  clear_has_dodge_per();
}
inline ::google::protobuf::int32 SpriteStatProto::dodge_per() const {
  return dodge_per_;
}
inline void SpriteStatProto::set_dodge_per(::google::protobuf::int32 value) {
  set_has_dodge_per();
  dodge_per_ = value;
}

// optional int32 move_speed_per = 23;
inline bool SpriteStatProto::has_move_speed_per() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SpriteStatProto::set_has_move_speed_per() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SpriteStatProto::clear_has_move_speed_per() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SpriteStatProto::clear_move_speed_per() {
  move_speed_per_ = 0;
  clear_has_move_speed_per();
}
inline ::google::protobuf::int32 SpriteStatProto::move_speed_per() const {
  return move_speed_per_;
}
inline void SpriteStatProto::set_move_speed_per(::google::protobuf::int32 value) {
  set_has_move_speed_per();
  move_speed_per_ = value;
}

// optional int32 anti_hurt = 24;
inline bool SpriteStatProto::has_anti_hurt() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SpriteStatProto::set_has_anti_hurt() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SpriteStatProto::clear_has_anti_hurt() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SpriteStatProto::clear_anti_hurt() {
  anti_hurt_ = 0;
  clear_has_anti_hurt();
}
inline ::google::protobuf::int32 SpriteStatProto::anti_hurt() const {
  return anti_hurt_;
}
inline void SpriteStatProto::set_anti_hurt(::google::protobuf::int32 value) {
  set_has_anti_hurt();
  anti_hurt_ = value;
}

// optional int32 anti_hurt_per = 25;
inline bool SpriteStatProto::has_anti_hurt_per() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SpriteStatProto::set_has_anti_hurt_per() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SpriteStatProto::clear_has_anti_hurt_per() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SpriteStatProto::clear_anti_hurt_per() {
  anti_hurt_per_ = 0;
  clear_has_anti_hurt_per();
}
inline ::google::protobuf::int32 SpriteStatProto::anti_hurt_per() const {
  return anti_hurt_per_;
}
inline void SpriteStatProto::set_anti_hurt_per(::google::protobuf::int32 value) {
  set_has_anti_hurt_per();
  anti_hurt_per_ = value;
}

// optional int32 ad_hurt = 26;
inline bool SpriteStatProto::has_ad_hurt() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SpriteStatProto::set_has_ad_hurt() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SpriteStatProto::clear_has_ad_hurt() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SpriteStatProto::clear_ad_hurt() {
  ad_hurt_ = 0;
  clear_has_ad_hurt();
}
inline ::google::protobuf::int32 SpriteStatProto::ad_hurt() const {
  return ad_hurt_;
}
inline void SpriteStatProto::set_ad_hurt(::google::protobuf::int32 value) {
  set_has_ad_hurt();
  ad_hurt_ = value;
}

// optional int32 ad_hurt_per = 27;
inline bool SpriteStatProto::has_ad_hurt_per() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SpriteStatProto::set_has_ad_hurt_per() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SpriteStatProto::clear_has_ad_hurt_per() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SpriteStatProto::clear_ad_hurt_per() {
  ad_hurt_per_ = 0;
  clear_has_ad_hurt_per();
}
inline ::google::protobuf::int32 SpriteStatProto::ad_hurt_per() const {
  return ad_hurt_per_;
}
inline void SpriteStatProto::set_ad_hurt_per(::google::protobuf::int32 value) {
  set_has_ad_hurt_per();
  ad_hurt_per_ = value;
}

// optional int32 suck_hurt = 28;
inline bool SpriteStatProto::has_suck_hurt() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SpriteStatProto::set_has_suck_hurt() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SpriteStatProto::clear_has_suck_hurt() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SpriteStatProto::clear_suck_hurt() {
  suck_hurt_ = 0;
  clear_has_suck_hurt();
}
inline ::google::protobuf::int32 SpriteStatProto::suck_hurt() const {
  return suck_hurt_;
}
inline void SpriteStatProto::set_suck_hurt(::google::protobuf::int32 value) {
  set_has_suck_hurt();
  suck_hurt_ = value;
}

// optional int32 suck_hurt_per = 29;
inline bool SpriteStatProto::has_suck_hurt_per() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SpriteStatProto::set_has_suck_hurt_per() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SpriteStatProto::clear_has_suck_hurt_per() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SpriteStatProto::clear_suck_hurt_per() {
  suck_hurt_per_ = 0;
  clear_has_suck_hurt_per();
}
inline ::google::protobuf::int32 SpriteStatProto::suck_hurt_per() const {
  return suck_hurt_per_;
}
inline void SpriteStatProto::set_suck_hurt_per(::google::protobuf::int32 value) {
  set_has_suck_hurt_per();
  suck_hurt_per_ = value;
}

// optional int32 sub_shoot_mount_resist = 30;
inline bool SpriteStatProto::has_sub_shoot_mount_resist() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SpriteStatProto::set_has_sub_shoot_mount_resist() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SpriteStatProto::clear_has_sub_shoot_mount_resist() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SpriteStatProto::clear_sub_shoot_mount_resist() {
  sub_shoot_mount_resist_ = 0;
  clear_has_sub_shoot_mount_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::sub_shoot_mount_resist() const {
  return sub_shoot_mount_resist_;
}
inline void SpriteStatProto::set_sub_shoot_mount_resist(::google::protobuf::int32 value) {
  set_has_sub_shoot_mount_resist();
  sub_shoot_mount_resist_ = value;
}

// optional int32 sub_stun_resist = 31;
inline bool SpriteStatProto::has_sub_stun_resist() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SpriteStatProto::set_has_sub_stun_resist() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SpriteStatProto::clear_has_sub_stun_resist() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SpriteStatProto::clear_sub_stun_resist() {
  sub_stun_resist_ = 0;
  clear_has_sub_stun_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::sub_stun_resist() const {
  return sub_stun_resist_;
}
inline void SpriteStatProto::set_sub_stun_resist(::google::protobuf::int32 value) {
  set_has_sub_stun_resist();
  sub_stun_resist_ = value;
}

// optional int32 sub_hush_resist = 32;
inline bool SpriteStatProto::has_sub_hush_resist() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SpriteStatProto::set_has_sub_hush_resist() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SpriteStatProto::clear_has_sub_hush_resist() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SpriteStatProto::clear_sub_hush_resist() {
  sub_hush_resist_ = 0;
  clear_has_sub_hush_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::sub_hush_resist() const {
  return sub_hush_resist_;
}
inline void SpriteStatProto::set_sub_hush_resist(::google::protobuf::int32 value) {
  set_has_sub_hush_resist();
  sub_hush_resist_ = value;
}

// optional int32 sub_slow_resist = 33;
inline bool SpriteStatProto::has_sub_slow_resist() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SpriteStatProto::set_has_sub_slow_resist() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SpriteStatProto::clear_has_sub_slow_resist() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SpriteStatProto::clear_sub_slow_resist() {
  sub_slow_resist_ = 0;
  clear_has_sub_slow_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::sub_slow_resist() const {
  return sub_slow_resist_;
}
inline void SpriteStatProto::set_sub_slow_resist(::google::protobuf::int32 value) {
  set_has_sub_slow_resist();
  sub_slow_resist_ = value;
}

// optional int32 sub_poison_resist = 34;
inline bool SpriteStatProto::has_sub_poison_resist() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SpriteStatProto::set_has_sub_poison_resist() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SpriteStatProto::clear_has_sub_poison_resist() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SpriteStatProto::clear_sub_poison_resist() {
  sub_poison_resist_ = 0;
  clear_has_sub_poison_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::sub_poison_resist() const {
  return sub_poison_resist_;
}
inline void SpriteStatProto::set_sub_poison_resist(::google::protobuf::int32 value) {
  set_has_sub_poison_resist();
  sub_poison_resist_ = value;
}

// optional int32 ad_mobing_stat_per = 35;
inline bool SpriteStatProto::has_ad_mobing_stat_per() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SpriteStatProto::set_has_ad_mobing_stat_per() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SpriteStatProto::clear_has_ad_mobing_stat_per() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SpriteStatProto::clear_ad_mobing_stat_per() {
  ad_mobing_stat_per_ = 0;
  clear_has_ad_mobing_stat_per();
}
inline ::google::protobuf::int32 SpriteStatProto::ad_mobing_stat_per() const {
  return ad_mobing_stat_per_;
}
inline void SpriteStatProto::set_ad_mobing_stat_per(::google::protobuf::int32 value) {
  set_has_ad_mobing_stat_per();
  ad_mobing_stat_per_ = value;
}

// optional int32 jin_per = 36;
inline bool SpriteStatProto::has_jin_per() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SpriteStatProto::set_has_jin_per() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SpriteStatProto::clear_has_jin_per() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SpriteStatProto::clear_jin_per() {
  jin_per_ = 0;
  clear_has_jin_per();
}
inline ::google::protobuf::int32 SpriteStatProto::jin_per() const {
  return jin_per_;
}
inline void SpriteStatProto::set_jin_per(::google::protobuf::int32 value) {
  set_has_jin_per();
  jin_per_ = value;
}

// optional int32 mu_per = 37;
inline bool SpriteStatProto::has_mu_per() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SpriteStatProto::set_has_mu_per() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SpriteStatProto::clear_has_mu_per() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SpriteStatProto::clear_mu_per() {
  mu_per_ = 0;
  clear_has_mu_per();
}
inline ::google::protobuf::int32 SpriteStatProto::mu_per() const {
  return mu_per_;
}
inline void SpriteStatProto::set_mu_per(::google::protobuf::int32 value) {
  set_has_mu_per();
  mu_per_ = value;
}

// optional int32 shui_per = 38;
inline bool SpriteStatProto::has_shui_per() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SpriteStatProto::set_has_shui_per() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SpriteStatProto::clear_has_shui_per() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SpriteStatProto::clear_shui_per() {
  shui_per_ = 0;
  clear_has_shui_per();
}
inline ::google::protobuf::int32 SpriteStatProto::shui_per() const {
  return shui_per_;
}
inline void SpriteStatProto::set_shui_per(::google::protobuf::int32 value) {
  set_has_shui_per();
  shui_per_ = value;
}

// optional int32 huo_per = 39;
inline bool SpriteStatProto::has_huo_per() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SpriteStatProto::set_has_huo_per() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SpriteStatProto::clear_has_huo_per() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SpriteStatProto::clear_huo_per() {
  huo_per_ = 0;
  clear_has_huo_per();
}
inline ::google::protobuf::int32 SpriteStatProto::huo_per() const {
  return huo_per_;
}
inline void SpriteStatProto::set_huo_per(::google::protobuf::int32 value) {
  set_has_huo_per();
  huo_per_ = value;
}

// optional int32 tu_per = 40;
inline bool SpriteStatProto::has_tu_per() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SpriteStatProto::set_has_tu_per() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SpriteStatProto::clear_has_tu_per() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SpriteStatProto::clear_tu_per() {
  tu_per_ = 0;
  clear_has_tu_per();
}
inline ::google::protobuf::int32 SpriteStatProto::tu_per() const {
  return tu_per_;
}
inline void SpriteStatProto::set_tu_per(::google::protobuf::int32 value) {
  set_has_tu_per();
  tu_per_ = value;
}

// optional int32 bleed_resist = 41;
inline bool SpriteStatProto::has_bleed_resist() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SpriteStatProto::set_has_bleed_resist() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SpriteStatProto::clear_has_bleed_resist() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SpriteStatProto::clear_bleed_resist() {
  bleed_resist_ = 0;
  clear_has_bleed_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::bleed_resist() const {
  return bleed_resist_;
}
inline void SpriteStatProto::set_bleed_resist(::google::protobuf::int32 value) {
  set_has_bleed_resist();
  bleed_resist_ = value;
}

// optional int32 sub_bleed_resist = 42;
inline bool SpriteStatProto::has_sub_bleed_resist() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SpriteStatProto::set_has_sub_bleed_resist() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SpriteStatProto::clear_has_sub_bleed_resist() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SpriteStatProto::clear_sub_bleed_resist() {
  sub_bleed_resist_ = 0;
  clear_has_sub_bleed_resist();
}
inline ::google::protobuf::int32 SpriteStatProto::sub_bleed_resist() const {
  return sub_bleed_resist_;
}
inline void SpriteStatProto::set_sub_bleed_resist(::google::protobuf::int32 value) {
  set_has_sub_bleed_resist();
  sub_bleed_resist_ = value;
}

// -------------------------------------------------------------------

// SingleStatProto

// optional .app.message.StatType stat_type = 1;
inline bool SingleStatProto::has_stat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleStatProto::set_has_stat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleStatProto::clear_has_stat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleStatProto::clear_stat_type() {
  stat_type_ = 0;
  clear_has_stat_type();
}
inline ::app::message::StatType SingleStatProto::stat_type() const {
  return static_cast< ::app::message::StatType >(stat_type_);
}
inline void SingleStatProto::set_stat_type(::app::message::StatType value) {
  assert(::app::message::StatType_IsValid(value));
  set_has_stat_type();
  stat_type_ = value;
}

// optional int32 amount = 2;
inline bool SingleStatProto::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleStatProto::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleStatProto::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleStatProto::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 SingleStatProto::amount() const {
  return amount_;
}
inline void SingleStatProto::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 type = 3;
inline bool SingleStatProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleStatProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleStatProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleStatProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SingleStatProto::type() const {
  return type_;
}
inline void SingleStatProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::StatType>() {
  return ::app::message::StatType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spritestat_2eproto__INCLUDED
