// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goods_exchange_rule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "goods_exchange_rule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* GoodsExchangeRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsExchangeRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsExchangeRuleConfigProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsExchangeRuleConfigProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_goods_5fexchange_5frule_2eproto() {
  protobuf_AddDesc_goods_5fexchange_5frule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "goods_exchange_rule.proto");
  GOOGLE_CHECK(file != NULL);
  GoodsExchangeRuleProto_descriptor_ = file->message_type(0);
  static const int GoodsExchangeRuleProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, cost_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, obtain_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, detail_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, require_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, yuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, li_jin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, real_air_),
  };
  GoodsExchangeRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsExchangeRuleProto_descriptor_,
      GoodsExchangeRuleProto::default_instance_,
      GoodsExchangeRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsExchangeRuleProto));
  GoodsExchangeRuleConfigProto_descriptor_ = file->message_type(1);
  static const int GoodsExchangeRuleConfigProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleConfigProto, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleConfigProto, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleConfigProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleConfigProto, goods_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleConfigProto, rule_list_),
  };
  GoodsExchangeRuleConfigProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsExchangeRuleConfigProto_descriptor_,
      GoodsExchangeRuleConfigProto::default_instance_,
      GoodsExchangeRuleConfigProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleConfigProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsExchangeRuleConfigProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsExchangeRuleConfigProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_goods_5fexchange_5frule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsExchangeRuleProto_descriptor_, &GoodsExchangeRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsExchangeRuleConfigProto_descriptor_, &GoodsExchangeRuleConfigProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_goods_5fexchange_5frule_2eproto() {
  delete GoodsExchangeRuleProto::default_instance_;
  delete GoodsExchangeRuleProto_reflection_;
  delete GoodsExchangeRuleConfigProto::default_instance_;
  delete GoodsExchangeRuleConfigProto_reflection_;
}

void protobuf_AddDesc_goods_5fexchange_5frule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031goods_exchange_rule.proto\022\013app.message"
    "\032\013goods.proto\"\300\002\n\026GoodsExchangeRuleProto"
    "\022:\n\ncost_goods\030\002 \003(\0132&.app.message.Excha"
    "ngeGoodsWrapperProto\0224\n\014obtain_goods\030\003 \003"
    "(\0132\036.app.message.GoodsWrapperProto\0224\n\014de"
    "tail_goods\030\004 \003(\0132\036.app.message.GoodsWrap"
    "perProto\022\r\n\005limit\030\005 \001(\005\022\022\n\nlimit_type\030\006 "
    "\001(\005\022\031\n\021require_vip_level\030\007 \001(\005\022\r\n\005money\030"
    "\010 \001(\005\022\017\n\007yuanbao\030\t \001(\005\022\016\n\006li_jin\030\n \001(\005\022\020"
    "\n\010real_air\030\013 \001(\005\"\236\001\n\034GoodsExchangeRuleCo"
    "nfigProto\022\022\n\nstart_time\030\001 \001(\003\022\020\n\010end_tim"
    "e\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022\022\n\ngoods_type\030\004 \001("
    "\005\0226\n\trule_list\030\005 \003(\0132#.app.message.Goods"
    "ExchangeRuleProtoB*\n\014app.protobufB\030Goods"
    "ExchangeRuleContentH\001", 581);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goods_exchange_rule.proto", &protobuf_RegisterTypes);
  GoodsExchangeRuleProto::default_instance_ = new GoodsExchangeRuleProto();
  GoodsExchangeRuleConfigProto::default_instance_ = new GoodsExchangeRuleConfigProto();
  GoodsExchangeRuleProto::default_instance_->InitAsDefaultInstance();
  GoodsExchangeRuleConfigProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_goods_5fexchange_5frule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_goods_5fexchange_5frule_2eproto {
  StaticDescriptorInitializer_goods_5fexchange_5frule_2eproto() {
    protobuf_AddDesc_goods_5fexchange_5frule_2eproto();
  }
} static_descriptor_initializer_goods_5fexchange_5frule_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GoodsExchangeRuleProto::kCostGoodsFieldNumber;
const int GoodsExchangeRuleProto::kObtainGoodsFieldNumber;
const int GoodsExchangeRuleProto::kDetailGoodsFieldNumber;
const int GoodsExchangeRuleProto::kLimitFieldNumber;
const int GoodsExchangeRuleProto::kLimitTypeFieldNumber;
const int GoodsExchangeRuleProto::kRequireVipLevelFieldNumber;
const int GoodsExchangeRuleProto::kMoneyFieldNumber;
const int GoodsExchangeRuleProto::kYuanbaoFieldNumber;
const int GoodsExchangeRuleProto::kLiJinFieldNumber;
const int GoodsExchangeRuleProto::kRealAirFieldNumber;
#endif  // !_MSC_VER

GoodsExchangeRuleProto::GoodsExchangeRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsExchangeRuleProto::InitAsDefaultInstance() {
}

GoodsExchangeRuleProto::GoodsExchangeRuleProto(const GoodsExchangeRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsExchangeRuleProto::SharedCtor() {
  _cached_size_ = 0;
  limit_ = 0;
  limit_type_ = 0;
  require_vip_level_ = 0;
  money_ = 0;
  yuanbao_ = 0;
  li_jin_ = 0;
  real_air_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsExchangeRuleProto::~GoodsExchangeRuleProto() {
  SharedDtor();
}

void GoodsExchangeRuleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsExchangeRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsExchangeRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsExchangeRuleProto_descriptor_;
}

const GoodsExchangeRuleProto& GoodsExchangeRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fexchange_5frule_2eproto();
  return *default_instance_;
}

GoodsExchangeRuleProto* GoodsExchangeRuleProto::default_instance_ = NULL;

GoodsExchangeRuleProto* GoodsExchangeRuleProto::New() const {
  return new GoodsExchangeRuleProto;
}

void GoodsExchangeRuleProto::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    limit_ = 0;
    limit_type_ = 0;
    require_vip_level_ = 0;
    money_ = 0;
    yuanbao_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    li_jin_ = 0;
    real_air_ = 0;
  }
  cost_goods_.Clear();
  obtain_goods_.Clear();
  detail_goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsExchangeRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.ExchangeGoodsWrapperProto cost_goods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cost_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cost_goods;
        if (input->ExpectTag(26)) goto parse_obtain_goods;
        break;
      }

      // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obtain_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obtain_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obtain_goods;
        if (input->ExpectTag(34)) goto parse_detail_goods;
        break;
      }

      // repeated .app.message.GoodsWrapperProto detail_goods = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_detail_goods;
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // optional int32 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_limit_type;
        break;
      }

      // optional int32 limit_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_require_vip_level;
        break;
      }

      // optional int32 require_vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_vip_level_)));
          set_has_require_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_money;
        break;
      }

      // optional int32 money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_yuanbao;
        break;
      }

      // optional int32 yuanbao = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbao_)));
          set_has_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_li_jin;
        break;
      }

      // optional int32 li_jin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_li_jin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &li_jin_)));
          set_has_li_jin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_real_air;
        break;
      }

      // optional int32 real_air = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_air:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_air_)));
          set_has_real_air();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsExchangeRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.ExchangeGoodsWrapperProto cost_goods = 2;
  for (int i = 0; i < this->cost_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cost_goods(i), output);
  }

  // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obtain_goods(i), output);
  }

  // repeated .app.message.GoodsWrapperProto detail_goods = 4;
  for (int i = 0; i < this->detail_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->detail_goods(i), output);
  }

  // optional int32 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // optional int32 limit_type = 6;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit_type(), output);
  }

  // optional int32 require_vip_level = 7;
  if (has_require_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->require_vip_level(), output);
  }

  // optional int32 money = 8;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->money(), output);
  }

  // optional int32 yuanbao = 9;
  if (has_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->yuanbao(), output);
  }

  // optional int32 li_jin = 10;
  if (has_li_jin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->li_jin(), output);
  }

  // optional int32 real_air = 11;
  if (has_real_air()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->real_air(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsExchangeRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.ExchangeGoodsWrapperProto cost_goods = 2;
  for (int i = 0; i < this->cost_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cost_goods(i), target);
  }

  // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obtain_goods(i), target);
  }

  // repeated .app.message.GoodsWrapperProto detail_goods = 4;
  for (int i = 0; i < this->detail_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->detail_goods(i), target);
  }

  // optional int32 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // optional int32 limit_type = 6;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit_type(), target);
  }

  // optional int32 require_vip_level = 7;
  if (has_require_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->require_vip_level(), target);
  }

  // optional int32 money = 8;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->money(), target);
  }

  // optional int32 yuanbao = 9;
  if (has_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->yuanbao(), target);
  }

  // optional int32 li_jin = 10;
  if (has_li_jin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->li_jin(), target);
  }

  // optional int32 real_air = 11;
  if (has_real_air()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->real_air(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsExchangeRuleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 limit_type = 6;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_type());
    }

    // optional int32 require_vip_level = 7;
    if (has_require_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_vip_level());
    }

    // optional int32 money = 8;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 yuanbao = 9;
    if (has_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbao());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 li_jin = 10;
    if (has_li_jin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->li_jin());
    }

    // optional int32 real_air = 11;
    if (has_real_air()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_air());
    }

  }
  // repeated .app.message.ExchangeGoodsWrapperProto cost_goods = 2;
  total_size += 1 * this->cost_goods_size();
  for (int i = 0; i < this->cost_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cost_goods(i));
  }

  // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
  total_size += 1 * this->obtain_goods_size();
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obtain_goods(i));
  }

  // repeated .app.message.GoodsWrapperProto detail_goods = 4;
  total_size += 1 * this->detail_goods_size();
  for (int i = 0; i < this->detail_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail_goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsExchangeRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsExchangeRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsExchangeRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsExchangeRuleProto::MergeFrom(const GoodsExchangeRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_goods_.MergeFrom(from.cost_goods_);
  obtain_goods_.MergeFrom(from.obtain_goods_);
  detail_goods_.MergeFrom(from.detail_goods_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_require_vip_level()) {
      set_require_vip_level(from.require_vip_level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_yuanbao()) {
      set_yuanbao(from.yuanbao());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_li_jin()) {
      set_li_jin(from.li_jin());
    }
    if (from.has_real_air()) {
      set_real_air(from.real_air());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsExchangeRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsExchangeRuleProto::CopyFrom(const GoodsExchangeRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsExchangeRuleProto::IsInitialized() const {

  return true;
}

void GoodsExchangeRuleProto::Swap(GoodsExchangeRuleProto* other) {
  if (other != this) {
    cost_goods_.Swap(&other->cost_goods_);
    obtain_goods_.Swap(&other->obtain_goods_);
    detail_goods_.Swap(&other->detail_goods_);
    std::swap(limit_, other->limit_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(require_vip_level_, other->require_vip_level_);
    std::swap(money_, other->money_);
    std::swap(yuanbao_, other->yuanbao_);
    std::swap(li_jin_, other->li_jin_);
    std::swap(real_air_, other->real_air_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsExchangeRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsExchangeRuleProto_descriptor_;
  metadata.reflection = GoodsExchangeRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsExchangeRuleConfigProto::kStartTimeFieldNumber;
const int GoodsExchangeRuleConfigProto::kEndTimeFieldNumber;
const int GoodsExchangeRuleConfigProto::kTypeFieldNumber;
const int GoodsExchangeRuleConfigProto::kGoodsTypeFieldNumber;
const int GoodsExchangeRuleConfigProto::kRuleListFieldNumber;
#endif  // !_MSC_VER

GoodsExchangeRuleConfigProto::GoodsExchangeRuleConfigProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsExchangeRuleConfigProto::InitAsDefaultInstance() {
}

GoodsExchangeRuleConfigProto::GoodsExchangeRuleConfigProto(const GoodsExchangeRuleConfigProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsExchangeRuleConfigProto::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  goods_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsExchangeRuleConfigProto::~GoodsExchangeRuleConfigProto() {
  SharedDtor();
}

void GoodsExchangeRuleConfigProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsExchangeRuleConfigProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsExchangeRuleConfigProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsExchangeRuleConfigProto_descriptor_;
}

const GoodsExchangeRuleConfigProto& GoodsExchangeRuleConfigProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fexchange_5frule_2eproto();
  return *default_instance_;
}

GoodsExchangeRuleConfigProto* GoodsExchangeRuleConfigProto::default_instance_ = NULL;

GoodsExchangeRuleConfigProto* GoodsExchangeRuleConfigProto::New() const {
  return new GoodsExchangeRuleConfigProto;
}

void GoodsExchangeRuleConfigProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    goods_type_ = 0;
  }
  rule_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsExchangeRuleConfigProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goods_type;
        break;
      }

      // optional int32 goods_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_type_)));
          set_has_goods_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rule_list;
        break;
      }

      // repeated .app.message.GoodsExchangeRuleProto rule_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rule_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rule_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsExchangeRuleConfigProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  // optional int64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_time(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 goods_type = 4;
  if (has_goods_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goods_type(), output);
  }

  // repeated .app.message.GoodsExchangeRuleProto rule_list = 5;
  for (int i = 0; i < this->rule_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rule_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsExchangeRuleConfigProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time(), target);
  }

  // optional int64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_time(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 goods_type = 4;
  if (has_goods_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goods_type(), target);
  }

  // repeated .app.message.GoodsExchangeRuleProto rule_list = 5;
  for (int i = 0; i < this->rule_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rule_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsExchangeRuleConfigProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 goods_type = 4;
    if (has_goods_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_type());
    }

  }
  // repeated .app.message.GoodsExchangeRuleProto rule_list = 5;
  total_size += 1 * this->rule_list_size();
  for (int i = 0; i < this->rule_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rule_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsExchangeRuleConfigProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsExchangeRuleConfigProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsExchangeRuleConfigProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsExchangeRuleConfigProto::MergeFrom(const GoodsExchangeRuleConfigProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  rule_list_.MergeFrom(from.rule_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_goods_type()) {
      set_goods_type(from.goods_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsExchangeRuleConfigProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsExchangeRuleConfigProto::CopyFrom(const GoodsExchangeRuleConfigProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsExchangeRuleConfigProto::IsInitialized() const {

  return true;
}

void GoodsExchangeRuleConfigProto::Swap(GoodsExchangeRuleConfigProto* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(type_, other->type_);
    std::swap(goods_type_, other->goods_type_);
    rule_list_.Swap(&other->rule_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsExchangeRuleConfigProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsExchangeRuleConfigProto_descriptor_;
  metadata.reflection = GoodsExchangeRuleConfigProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
