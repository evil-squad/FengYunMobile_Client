// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gallup.proto

#ifndef PROTOBUF_gallup_2eproto__INCLUDED
#define PROTOBUF_gallup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "prize.pb.h"
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gallup_2eproto();
void protobuf_AssignDesc_gallup_2eproto();
void protobuf_ShutdownFile_gallup_2eproto();

class GallupProto;
class GallupQuestionProto;

// ===================================================================

class GallupProto : public ::google::protobuf::Message {
 public:
  GallupProto();
  virtual ~GallupProto();

  GallupProto(const GallupProto& from);

  inline GallupProto& operator=(const GallupProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GallupProto& default_instance();

  void Swap(GallupProto* other);

  // implements Message ----------------------------------------------

  GallupProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GallupProto& from);
  void MergeFrom(const GallupProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.GallupQuestionProto questions = 1;
  inline int questions_size() const;
  inline void clear_questions();
  static const int kQuestionsFieldNumber = 1;
  inline const ::app::message::GallupQuestionProto& questions(int index) const;
  inline ::app::message::GallupQuestionProto* mutable_questions(int index);
  inline ::app::message::GallupQuestionProto* add_questions();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::GallupQuestionProto >&
      questions() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::GallupQuestionProto >*
      mutable_questions();

  // optional .app.message.PrizeProto all_finish_prize = 2;
  inline bool has_all_finish_prize() const;
  inline void clear_all_finish_prize();
  static const int kAllFinishPrizeFieldNumber = 2;
  inline const ::app::message::PrizeProto& all_finish_prize() const;
  inline ::app::message::PrizeProto* mutable_all_finish_prize();
  inline ::app::message::PrizeProto* release_all_finish_prize();
  inline void set_allocated_all_finish_prize(::app::message::PrizeProto* all_finish_prize);

  // optional int32 daily_question_count = 3;
  inline bool has_daily_question_count() const;
  inline void clear_daily_question_count();
  static const int kDailyQuestionCountFieldNumber = 3;
  inline ::google::protobuf::int32 daily_question_count() const;
  inline void set_daily_question_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.GallupProto)
 private:
  inline void set_has_all_finish_prize();
  inline void clear_has_all_finish_prize();
  inline void set_has_daily_question_count();
  inline void clear_has_daily_question_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::GallupQuestionProto > questions_;
  ::app::message::PrizeProto* all_finish_prize_;
  ::google::protobuf::int32 daily_question_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gallup_2eproto();
  friend void protobuf_AssignDesc_gallup_2eproto();
  friend void protobuf_ShutdownFile_gallup_2eproto();

  void InitAsDefaultInstance();
  static GallupProto* default_instance_;
};
// -------------------------------------------------------------------

class GallupQuestionProto : public ::google::protobuf::Message {
 public:
  GallupQuestionProto();
  virtual ~GallupQuestionProto();

  GallupQuestionProto(const GallupQuestionProto& from);

  inline GallupQuestionProto& operator=(const GallupQuestionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GallupQuestionProto& default_instance();

  void Swap(GallupQuestionProto* other);

  // implements Message ----------------------------------------------

  GallupQuestionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GallupQuestionProto& from);
  void MergeFrom(const GallupQuestionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string question_1 = 1;
  inline bool has_question_1() const;
  inline void clear_question_1();
  static const int kQuestion1FieldNumber = 1;
  inline const ::std::string& question_1() const;
  inline void set_question_1(const ::std::string& value);
  inline void set_question_1(const char* value);
  inline void set_question_1(const char* value, size_t size);
  inline ::std::string* mutable_question_1();
  inline ::std::string* release_question_1();
  inline void set_allocated_question_1(::std::string* question_1);

  // optional string question_2 = 2;
  inline bool has_question_2() const;
  inline void clear_question_2();
  static const int kQuestion2FieldNumber = 2;
  inline const ::std::string& question_2() const;
  inline void set_question_2(const ::std::string& value);
  inline void set_question_2(const char* value);
  inline void set_question_2(const char* value, size_t size);
  inline ::std::string* mutable_question_2();
  inline ::std::string* release_question_2();
  inline void set_allocated_question_2(::std::string* question_2);

  // optional .app.message.PrizeProto prize = 3;
  inline bool has_prize() const;
  inline void clear_prize();
  static const int kPrizeFieldNumber = 3;
  inline const ::app::message::PrizeProto& prize() const;
  inline ::app::message::PrizeProto* mutable_prize();
  inline ::app::message::PrizeProto* release_prize();
  inline void set_allocated_prize(::app::message::PrizeProto* prize);

  // @@protoc_insertion_point(class_scope:app.message.GallupQuestionProto)
 private:
  inline void set_has_question_1();
  inline void clear_has_question_1();
  inline void set_has_question_2();
  inline void clear_has_question_2();
  inline void set_has_prize();
  inline void clear_has_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* question_1_;
  ::std::string* question_2_;
  ::app::message::PrizeProto* prize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gallup_2eproto();
  friend void protobuf_AssignDesc_gallup_2eproto();
  friend void protobuf_ShutdownFile_gallup_2eproto();

  void InitAsDefaultInstance();
  static GallupQuestionProto* default_instance_;
};
// ===================================================================


// ===================================================================

// GallupProto

// repeated .app.message.GallupQuestionProto questions = 1;
inline int GallupProto::questions_size() const {
  return questions_.size();
}
inline void GallupProto::clear_questions() {
  questions_.Clear();
}
inline const ::app::message::GallupQuestionProto& GallupProto::questions(int index) const {
  return questions_.Get(index);
}
inline ::app::message::GallupQuestionProto* GallupProto::mutable_questions(int index) {
  return questions_.Mutable(index);
}
inline ::app::message::GallupQuestionProto* GallupProto::add_questions() {
  return questions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::GallupQuestionProto >&
GallupProto::questions() const {
  return questions_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::GallupQuestionProto >*
GallupProto::mutable_questions() {
  return &questions_;
}

// optional .app.message.PrizeProto all_finish_prize = 2;
inline bool GallupProto::has_all_finish_prize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GallupProto::set_has_all_finish_prize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GallupProto::clear_has_all_finish_prize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GallupProto::clear_all_finish_prize() {
  if (all_finish_prize_ != NULL) all_finish_prize_->::app::message::PrizeProto::Clear();
  clear_has_all_finish_prize();
}
inline const ::app::message::PrizeProto& GallupProto::all_finish_prize() const {
  return all_finish_prize_ != NULL ? *all_finish_prize_ : *default_instance_->all_finish_prize_;
}
inline ::app::message::PrizeProto* GallupProto::mutable_all_finish_prize() {
  set_has_all_finish_prize();
  if (all_finish_prize_ == NULL) all_finish_prize_ = new ::app::message::PrizeProto;
  return all_finish_prize_;
}
inline ::app::message::PrizeProto* GallupProto::release_all_finish_prize() {
  clear_has_all_finish_prize();
  ::app::message::PrizeProto* temp = all_finish_prize_;
  all_finish_prize_ = NULL;
  return temp;
}
inline void GallupProto::set_allocated_all_finish_prize(::app::message::PrizeProto* all_finish_prize) {
  delete all_finish_prize_;
  all_finish_prize_ = all_finish_prize;
  if (all_finish_prize) {
    set_has_all_finish_prize();
  } else {
    clear_has_all_finish_prize();
  }
}

// optional int32 daily_question_count = 3;
inline bool GallupProto::has_daily_question_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GallupProto::set_has_daily_question_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GallupProto::clear_has_daily_question_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GallupProto::clear_daily_question_count() {
  daily_question_count_ = 0;
  clear_has_daily_question_count();
}
inline ::google::protobuf::int32 GallupProto::daily_question_count() const {
  return daily_question_count_;
}
inline void GallupProto::set_daily_question_count(::google::protobuf::int32 value) {
  set_has_daily_question_count();
  daily_question_count_ = value;
}

// -------------------------------------------------------------------

// GallupQuestionProto

// optional string question_1 = 1;
inline bool GallupQuestionProto::has_question_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GallupQuestionProto::set_has_question_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GallupQuestionProto::clear_has_question_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GallupQuestionProto::clear_question_1() {
  if (question_1_ != &::google::protobuf::internal::kEmptyString) {
    question_1_->clear();
  }
  clear_has_question_1();
}
inline const ::std::string& GallupQuestionProto::question_1() const {
  return *question_1_;
}
inline void GallupQuestionProto::set_question_1(const ::std::string& value) {
  set_has_question_1();
  if (question_1_ == &::google::protobuf::internal::kEmptyString) {
    question_1_ = new ::std::string;
  }
  question_1_->assign(value);
}
inline void GallupQuestionProto::set_question_1(const char* value) {
  set_has_question_1();
  if (question_1_ == &::google::protobuf::internal::kEmptyString) {
    question_1_ = new ::std::string;
  }
  question_1_->assign(value);
}
inline void GallupQuestionProto::set_question_1(const char* value, size_t size) {
  set_has_question_1();
  if (question_1_ == &::google::protobuf::internal::kEmptyString) {
    question_1_ = new ::std::string;
  }
  question_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GallupQuestionProto::mutable_question_1() {
  set_has_question_1();
  if (question_1_ == &::google::protobuf::internal::kEmptyString) {
    question_1_ = new ::std::string;
  }
  return question_1_;
}
inline ::std::string* GallupQuestionProto::release_question_1() {
  clear_has_question_1();
  if (question_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = question_1_;
    question_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GallupQuestionProto::set_allocated_question_1(::std::string* question_1) {
  if (question_1_ != &::google::protobuf::internal::kEmptyString) {
    delete question_1_;
  }
  if (question_1) {
    set_has_question_1();
    question_1_ = question_1;
  } else {
    clear_has_question_1();
    question_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string question_2 = 2;
inline bool GallupQuestionProto::has_question_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GallupQuestionProto::set_has_question_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GallupQuestionProto::clear_has_question_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GallupQuestionProto::clear_question_2() {
  if (question_2_ != &::google::protobuf::internal::kEmptyString) {
    question_2_->clear();
  }
  clear_has_question_2();
}
inline const ::std::string& GallupQuestionProto::question_2() const {
  return *question_2_;
}
inline void GallupQuestionProto::set_question_2(const ::std::string& value) {
  set_has_question_2();
  if (question_2_ == &::google::protobuf::internal::kEmptyString) {
    question_2_ = new ::std::string;
  }
  question_2_->assign(value);
}
inline void GallupQuestionProto::set_question_2(const char* value) {
  set_has_question_2();
  if (question_2_ == &::google::protobuf::internal::kEmptyString) {
    question_2_ = new ::std::string;
  }
  question_2_->assign(value);
}
inline void GallupQuestionProto::set_question_2(const char* value, size_t size) {
  set_has_question_2();
  if (question_2_ == &::google::protobuf::internal::kEmptyString) {
    question_2_ = new ::std::string;
  }
  question_2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GallupQuestionProto::mutable_question_2() {
  set_has_question_2();
  if (question_2_ == &::google::protobuf::internal::kEmptyString) {
    question_2_ = new ::std::string;
  }
  return question_2_;
}
inline ::std::string* GallupQuestionProto::release_question_2() {
  clear_has_question_2();
  if (question_2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = question_2_;
    question_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GallupQuestionProto::set_allocated_question_2(::std::string* question_2) {
  if (question_2_ != &::google::protobuf::internal::kEmptyString) {
    delete question_2_;
  }
  if (question_2) {
    set_has_question_2();
    question_2_ = question_2;
  } else {
    clear_has_question_2();
    question_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .app.message.PrizeProto prize = 3;
inline bool GallupQuestionProto::has_prize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GallupQuestionProto::set_has_prize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GallupQuestionProto::clear_has_prize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GallupQuestionProto::clear_prize() {
  if (prize_ != NULL) prize_->::app::message::PrizeProto::Clear();
  clear_has_prize();
}
inline const ::app::message::PrizeProto& GallupQuestionProto::prize() const {
  return prize_ != NULL ? *prize_ : *default_instance_->prize_;
}
inline ::app::message::PrizeProto* GallupQuestionProto::mutable_prize() {
  set_has_prize();
  if (prize_ == NULL) prize_ = new ::app::message::PrizeProto;
  return prize_;
}
inline ::app::message::PrizeProto* GallupQuestionProto::release_prize() {
  clear_has_prize();
  ::app::message::PrizeProto* temp = prize_;
  prize_ = NULL;
  return temp;
}
inline void GallupQuestionProto::set_allocated_prize(::app::message::PrizeProto* prize) {
  delete prize_;
  prize_ = prize;
  if (prize) {
    set_has_prize();
  } else {
    clear_has_prize();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gallup_2eproto__INCLUDED
