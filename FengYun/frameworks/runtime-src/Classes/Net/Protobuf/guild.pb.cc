// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* GuildMemberProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildHongBaosProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildHongBaosProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildHongBaoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildHongBaoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildHongBaoCollectLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildHongBaoCollectLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LongXianGuildStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LongXianGuildStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChengBaProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChengBaProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChengBaRankObjProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChengBaRankObjProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChengBaPrizeCollectHeroIdsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChengBaPrizeCollectHeroIdsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDungeonBossKilledProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDungeonBossKilledProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeFastCrossProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeFastCrossProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TongTianTaFastCrossProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TongTianTaFastCrossProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientNewsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientNewsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBossCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBossCard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_guild_2eproto() {
  protobuf_AddDesc_guild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guild.proto");
  GOOGLE_CHECK(file != NULL);
  GuildMemberProto_descriptor_ = file->message_type(0);
  static const int GuildMemberProto_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, enter_guild_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, fight_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, last_offline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, mount_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, feng_wu_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, super_arm_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, history_gift_goods_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, history_gift_goods_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, history_gift_goods_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, history_gift_goods_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, history_gift_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, super_weapon_fight_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, challenge_assist_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, challenge_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, equipment_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, tianjie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, tianzui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, equipment_resource2_),
  };
  GuildMemberProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberProto_descriptor_,
      GuildMemberProto::default_instance_,
      GuildMemberProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberProto));
  GuildProto_descriptor_ = file->message_type(1);
  static const int GuildProto_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, flag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, flag_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, flag_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, is_auto_accept_join_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, vice_leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, tang_leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, max_hero_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, gift_goods_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, gift_goods_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, gift_goods_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, gift_goods_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, gift_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, announcement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, change_announcement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, contribution_goods_already_bought_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, guild_tower_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, is_complete_guild_plant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, active_degree_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, active_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, dismiss_warning_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, friend_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, enemy_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, server_contribution_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, server_contribution_bought_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, been_added_enemy_not_notified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, been_removed_enemy_not_notified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, been_removed_friend_not_notified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, server_news_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, operator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, fast_cross_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, guild_dungeon_boss_killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, new_tang_leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, cheng_ba_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, active_hero_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, lx_guild_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, hbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, tong_tain_ta_fast_cross_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, boss_card_),
  };
  GuildProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildProto_descriptor_,
      GuildProto::default_instance_,
      GuildProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildProto));
  GuildHongBaosProto_descriptor_ = file->message_type(2);
  static const int GuildHongBaosProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaosProto, hb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaosProto, collect_log_),
  };
  GuildHongBaosProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildHongBaosProto_descriptor_,
      GuildHongBaosProto::default_instance_,
      GuildHongBaosProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaosProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaosProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildHongBaosProto));
  GuildHongBaoProto_descriptor_ = file->message_type(3);
  static const int GuildHongBaoProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, hero_name_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, hero_race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, total_yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, total_hb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, left_yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, left_hb_),
  };
  GuildHongBaoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildHongBaoProto_descriptor_,
      GuildHongBaoProto::default_instance_,
      GuildHongBaoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildHongBaoProto));
  GuildHongBaoCollectLogProto_descriptor_ = file->message_type(4);
  static const int GuildHongBaoCollectLogProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, hero_name_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, hero_race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, hb_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, hb_yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, time_),
  };
  GuildHongBaoCollectLogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildHongBaoCollectLogProto_descriptor_,
      GuildHongBaoCollectLogProto::default_instance_,
      GuildHongBaoCollectLogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildHongBaoCollectLogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildHongBaoCollectLogProto));
  LongXianGuildStatProto_descriptor_ = file->message_type(5);
  static const int LongXianGuildStatProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongXianGuildStatProto, scene_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongXianGuildStatProto, scene_reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongXianGuildStatProto, rank_msg_),
  };
  LongXianGuildStatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LongXianGuildStatProto_descriptor_,
      LongXianGuildStatProto::default_instance_,
      LongXianGuildStatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongXianGuildStatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongXianGuildStatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LongXianGuildStatProto));
  ChengBaProto_descriptor_ = file->message_type(6);
  static const int ChengBaProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, occupy_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, apply_attack_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, win_prize_collect_hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, tax_prize_collect_hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, last_reset_daily_stat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, self_rank_key_),
  };
  ChengBaProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChengBaProto_descriptor_,
      ChengBaProto::default_instance_,
      ChengBaProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChengBaProto));
  ChengBaRankObjProto_descriptor_ = file->message_type(7);
  static const int ChengBaRankObjProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, operator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, guild_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, guild_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, occupy_stat_),
  };
  ChengBaRankObjProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChengBaRankObjProto_descriptor_,
      ChengBaRankObjProto::default_instance_,
      ChengBaRankObjProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaRankObjProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChengBaRankObjProto));
  ChengBaPrizeCollectHeroIdsProto_descriptor_ = file->message_type(8);
  static const int ChengBaPrizeCollectHeroIdsProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaPrizeCollectHeroIdsProto, hero_id_),
  };
  ChengBaPrizeCollectHeroIdsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChengBaPrizeCollectHeroIdsProto_descriptor_,
      ChengBaPrizeCollectHeroIdsProto::default_instance_,
      ChengBaPrizeCollectHeroIdsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaPrizeCollectHeroIdsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChengBaPrizeCollectHeroIdsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChengBaPrizeCollectHeroIdsProto));
  GuildDungeonBossKilledProto_descriptor_ = file->message_type(9);
  static const int GuildDungeonBossKilledProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonBossKilledProto, scene_id_boss_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonBossKilledProto, boss_dead_time_),
  };
  GuildDungeonBossKilledProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDungeonBossKilledProto_descriptor_,
      GuildDungeonBossKilledProto::default_instance_,
      GuildDungeonBossKilledProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonBossKilledProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDungeonBossKilledProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDungeonBossKilledProto));
  ChallengeFastCrossProto_descriptor_ = file->message_type(10);
  static const int ChallengeFastCrossProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeFastCrossProto, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeFastCrossProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeFastCrossProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeFastCrossProto, use_time_),
  };
  ChallengeFastCrossProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeFastCrossProto_descriptor_,
      ChallengeFastCrossProto::default_instance_,
      ChallengeFastCrossProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeFastCrossProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeFastCrossProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeFastCrossProto));
  TongTianTaFastCrossProto_descriptor_ = file->message_type(11);
  static const int TongTianTaFastCrossProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianTaFastCrossProto, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianTaFastCrossProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianTaFastCrossProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianTaFastCrossProto, use_time_),
  };
  TongTianTaFastCrossProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TongTianTaFastCrossProto_descriptor_,
      TongTianTaFastCrossProto::default_instance_,
      TongTianTaFastCrossProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianTaFastCrossProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TongTianTaFastCrossProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TongTianTaFastCrossProto));
  ClientNewsProto_descriptor_ = file->message_type(12);
  static const int ClientNewsProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNewsProto, news_),
  };
  ClientNewsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientNewsProto_descriptor_,
      ClientNewsProto::default_instance_,
      ClientNewsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNewsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNewsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientNewsProto));
  ClientGuildListProto_descriptor_ = file->message_type(13);
  static const int ClientGuildListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildListProto, guild_),
  };
  ClientGuildListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildListProto_descriptor_,
      ClientGuildListProto::default_instance_,
      ClientGuildListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildListProto));
  GuildInListProto_descriptor_ = file->message_type(14);
  static const int GuildInListProto_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, flag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, flag_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, is_auto_accept_join_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, hero_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, max_hero_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, leader_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, leader_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, vice_leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, vice_leader_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, vice_leader_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, total_fight_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, operator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, territory_master_count_),
  };
  GuildInListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInListProto_descriptor_,
      GuildInListProto::default_instance_,
      GuildInListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInListProto));
  GuildBossCard_descriptor_ = file->message_type(15);
  static const int GuildBossCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCard, weekly_call_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCard, grow_up_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCard, current_card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCard, current_calling_card_id_),
  };
  GuildBossCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBossCard_descriptor_,
      GuildBossCard::default_instance_,
      GuildBossCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBossCard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberProto_descriptor_, &GuildMemberProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildProto_descriptor_, &GuildProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildHongBaosProto_descriptor_, &GuildHongBaosProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildHongBaoProto_descriptor_, &GuildHongBaoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildHongBaoCollectLogProto_descriptor_, &GuildHongBaoCollectLogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LongXianGuildStatProto_descriptor_, &LongXianGuildStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChengBaProto_descriptor_, &ChengBaProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChengBaRankObjProto_descriptor_, &ChengBaRankObjProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChengBaPrizeCollectHeroIdsProto_descriptor_, &ChengBaPrizeCollectHeroIdsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDungeonBossKilledProto_descriptor_, &GuildDungeonBossKilledProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeFastCrossProto_descriptor_, &ChallengeFastCrossProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TongTianTaFastCrossProto_descriptor_, &TongTianTaFastCrossProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientNewsProto_descriptor_, &ClientNewsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildListProto_descriptor_, &ClientGuildListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInListProto_descriptor_, &GuildInListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBossCard_descriptor_, &GuildBossCard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guild_2eproto() {
  delete GuildMemberProto::default_instance_;
  delete GuildMemberProto_reflection_;
  delete GuildProto::default_instance_;
  delete GuildProto_reflection_;
  delete GuildHongBaosProto::default_instance_;
  delete GuildHongBaosProto_reflection_;
  delete GuildHongBaoProto::default_instance_;
  delete GuildHongBaoProto_reflection_;
  delete GuildHongBaoCollectLogProto::default_instance_;
  delete GuildHongBaoCollectLogProto_reflection_;
  delete LongXianGuildStatProto::default_instance_;
  delete LongXianGuildStatProto_reflection_;
  delete ChengBaProto::default_instance_;
  delete ChengBaProto_reflection_;
  delete ChengBaRankObjProto::default_instance_;
  delete ChengBaRankObjProto_reflection_;
  delete ChengBaPrizeCollectHeroIdsProto::default_instance_;
  delete ChengBaPrizeCollectHeroIdsProto_reflection_;
  delete GuildDungeonBossKilledProto::default_instance_;
  delete GuildDungeonBossKilledProto_reflection_;
  delete ChallengeFastCrossProto::default_instance_;
  delete ChallengeFastCrossProto_reflection_;
  delete TongTianTaFastCrossProto::default_instance_;
  delete TongTianTaFastCrossProto_reflection_;
  delete ClientNewsProto::default_instance_;
  delete ClientNewsProto_reflection_;
  delete ClientGuildListProto::default_instance_;
  delete ClientGuildListProto_reflection_;
  delete GuildInListProto::default_instance_;
  delete GuildInListProto_reflection_;
  delete GuildBossCard::default_instance_;
  delete GuildBossCard_reflection_;
}

void protobuf_AddDesc_guild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013guild.proto\022\013app.message\"\227\005\n\020GuildMemb"
    "erProto\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\022\030\n\020ent"
    "er_guild_time\030\003 \001(\003\022\032\n\022contribution_poin"
    "t\030\004 \001(\005\022\021\n\tnick_name\030\005 \001(\014\022\022\n\ngroup_name"
    "\030\006 \001(\014\022\r\n\005level\030\007 \001(\005\022\024\n\014fight_amount\030\010 "
    "\001(\005\022\031\n\021last_offline_time\030\t \001(\003\022\023\n\013mount_"
    "level\030\n \001(\005\022\025\n\rfeng_wu_level\030\013 \001(\005\022\021\n\tis"
    "_online\030\014 \001(\010\022\020\n\010scene_id\030\r \001(\005\022\027\n\017super"
    "_arm_level\030\032 \001(\005\022\034\n\024history_gift_goods_1"
    "\030\016 \001(\005\022\034\n\024history_gift_goods_2\030\017 \001(\005\022\034\n\024"
    "history_gift_goods_3\030\020 \001(\005\022\034\n\024history_gi"
    "ft_goods_4\030\021 \001(\005\022\032\n\022history_gift_money\030\022"
    " \001(\003\022%\n\031super_weapon_fight_amount\030\023 \001(\005B"
    "\002\030\001\022\036\n\026challenge_assist_times\030\024 \001(\005\022\032\n\022c"
    "hallenge_sequence\030\025 \001(\005\022\036\n\022equipment_res"
    "ource\030\026 \001(\005B\002\030\001\022\014\n\004race\030\027 \001(\005\022\017\n\007tianjie"
    "\030\030 \001(\005\022\017\n\007tianzui\030\031 \001(\005\022\033\n\023equipment_res"
    "ource2\030\033 \001(\003\"\231\013\n\nGuildProto\022\022\n\nguild_nam"
    "e\030\001 \001(\014\022\021\n\tflag_name\030\002 \001(\014\022\021\n\tflag_kind\030"
    "\003 \001(\005\022\022\n\nflag_level\030\004 \001(\005\022#\n\033is_auto_acc"
    "ept_join_request\030\005 \001(\010\022.\n\007members\030\006 \003(\0132"
    "\035.app.message.GuildMemberProto\022\021\n\tleader"
    "_id\030\007 \001(\003\022\026\n\016vice_leader_id\030\010 \001(\003\022\032\n\016tan"
    "g_leader_id\030\t \001(\003B\002\030\001\022\026\n\016max_hero_count\030"
    "\n \001(\005\022\023\n\013create_time\030\013 \001(\003\022\024\n\014gift_goods"
    "_1\030\014 \001(\005\022\024\n\014gift_goods_2\030\r \001(\005\022\024\n\014gift_g"
    "oods_3\030\016 \001(\005\022\024\n\014gift_goods_4\030\017 \001(\005\022\022\n\ngi"
    "ft_money\030\020 \001(\003\022\024\n\014announcement\030\021 \001(\014\022 \n\030"
    "change_announcement_time\030\022 \001(\003\022-\n!contri"
    "bution_goods_already_bought\030\023 \003(\005B\002\030\001\022\031\n"
    "\021guild_tower_level\030\024 \001(\005\022\037\n\027is_complete_"
    "guild_plant\030\025 \001(\010\022\032\n\022active_degree_full\030"
    "2 \001(\010\022\026\n\016active_hero_id\0303 \003(\003\022\035\n\025dismiss"
    "_warning_level\0304 \001(\005\022\024\n\014friend_guild\0305 \003"
    "(\014\022\023\n\013enemy_guild\0306 \003(\014\022(\n\034server_contri"
    "bution_goods_id\0307 \003(\005B\002\030\001\022,\n server_cont"
    "ribution_bought_count\0308 \003(\005B\002\030\001\022%\n\035been_"
    "added_enemy_not_notified\0309 \003(\014\022\'\n\037been_r"
    "emoved_enemy_not_notified\030: \003(\014\022(\n been_"
    "removed_friend_not_notified\030= \003(\014\022\023\n\013ser"
    "ver_news\030; \003(\014\022\021\n\tserver_id\030< \001(\005\022\023\n\013ope"
    "rator_id\030\? \001(\005\022=\n\017fast_cross_data\030> \003(\0132"
    "$.app.message.ChallengeFastCrossProto\022K\n"
    "\031guild_dungeon_boss_killed\030@ \001(\0132(.app.m"
    "essage.GuildDungeonBossKilledProto\022\032\n\022ne"
    "w_tang_leader_id\030A \003(\003\0221\n\016cheng_ba_proto"
    "\030B \001(\0132\031.app.message.ChengBaProto\022\027\n\017act"
    "ive_hero_id2\030C \003(\003\022:\n\rlx_guild_stat\030D \001("
    "\0132#.app.message.LongXianGuildStatProto\022,"
    "\n\003hbs\030E \001(\0132\037.app.message.GuildHongBaosP"
    "roto\022K\n\034tong_tain_ta_fast_cross_data\030F \003"
    "(\0132%.app.message.TongTianTaFastCrossProt"
    "o\022-\n\tboss_card\030G \001(\0132\032.app.message.Guild"
    "BossCard\"\177\n\022GuildHongBaosProto\022*\n\002hb\030\001 \003"
    "(\0132\036.app.message.GuildHongBaoProto\022=\n\013co"
    "llect_log\030\002 \003(\0132(.app.message.GuildHongB"
    "aoCollectLogProto\"\226\001\n\021GuildHongBaoProto\022"
    "\017\n\007hero_id\030\001 \001(\003\022\027\n\017hero_name_bytes\030\002 \001("
    "\014\022\021\n\thero_race\030\003 \001(\005\022\020\n\010total_yb\030\004 \001(\005\022\020"
    "\n\010total_hb\030\005 \001(\005\022\017\n\007left_yb\030\006 \001(\005\022\017\n\007lef"
    "t_hb\030\007 \001(\005\"\207\001\n\033GuildHongBaoCollectLogPro"
    "to\022\017\n\007hero_id\030\001 \001(\003\022\027\n\017hero_name_bytes\030\002"
    " \001(\014\022\021\n\thero_race\030\003 \001(\005\022\016\n\006hb_idx\030\004 \001(\005\022"
    "\r\n\005hb_yb\030\005 \001(\005\022\014\n\004time\030\006 \001(\003\"Y\n\026LongXian"
    "GuildStatProto\022\022\n\nscene_stat\030\001 \003(\005\022\031\n\021sc"
    "ene_reset_times\030\002 \003(\005\022\020\n\010rank_msg\030\003 \003(\014\""
    "\235\002\n\014ChengBaProto\022\023\n\013occupy_stat\030\001 \003(\003\022\031\n"
    "\021apply_attack_time\030\002 \003(\003\022P\n\032win_prize_co"
    "llect_hero_ids\030\003 \003(\0132,.app.message.Cheng"
    "BaPrizeCollectHeroIdsProto\022P\n\032tax_prize_"
    "collect_hero_ids\030\004 \003(\0132,.app.message.Che"
    "ngBaPrizeCollectHeroIdsProto\022\"\n\032last_res"
    "et_daily_stat_time\030\005 \001(\003\022\025\n\rself_rank_ke"
    "y\030\006 \001(\014\"\233\001\n\023ChengBaRankObjProto\022\023\n\013opera"
    "tor_id\030\001 \001(\005\022\021\n\tserver_id\030\002 \001(\005\022\022\n\nguild"
    "_name\030\003 \001(\014\022\024\n\014guild_active\030\004 \001(\005\022\035\n\025gui"
    "ld_fighting_amount\030\005 \001(\003\022\023\n\013occupy_stat\030"
    "\006 \001(\005\"2\n\037ChengBaPrizeCollectHeroIdsProto"
    "\022\017\n\007hero_id\030\001 \003(\003\"U\n\033GuildDungeonBossKil"
    "ledProto\022\036\n\026scene_id_boss_sequence\030\001 \003(\003"
    "\022\026\n\016boss_dead_time\030\002 \003(\003\"W\n\027ChallengeFas"
    "tCrossProto\022\020\n\010sequence\030\001 \001(\005\022\n\n\002id\030\002 \001("
    "\003\022\014\n\004name\030\003 \001(\014\022\020\n\010use_time\030\004 \001(\005\"X\n\030Ton"
    "gTianTaFastCrossProto\022\020\n\010sequence\030\001 \001(\005\022"
    "\n\n\002id\030\002 \001(\003\022\014\n\004name\030\003 \001(\014\022\020\n\010use_time\030\004 "
    "\001(\005\"\037\n\017ClientNewsProto\022\014\n\004news\030\001 \003(\014\"D\n\024"
    "ClientGuildListProto\022,\n\005guild\030\001 \003(\0132\035.ap"
    "p.message.GuildInListProto\"\267\003\n\020GuildInLi"
    "stProto\022\014\n\004name\030\001 \001(\014\022\021\n\tflag_name\030\002 \001(\014"
    "\022\022\n\nflag_level\030\003 \001(\005\022#\n\033is_auto_accept_j"
    "oin_request\030\004 \001(\010\022\022\n\nhero_count\030\005 \001(\005\022\026\n"
    "\016max_hero_count\030\006 \001(\005\022\021\n\tleader_id\030\022 \001(\003"
    "\022\023\n\013leader_name\030\007 \001(\014\022\025\n\rleader_online\030\010"
    " \001(\010\022\024\n\014leader_level\030\r \001(\005\022\030\n\020vice_leade"
    "r_name\030\t \001(\014\022\032\n\022vice_leader_online\030\n \001(\010"
    "\022\031\n\021vice_leader_level\030\016 \001(\005\022\032\n\022total_fig"
    "ht_amount\030\013 \001(\003\022\023\n\013create_time\030\014 \001(\003\022\023\n\013"
    "operator_id\030\017 \001(\005\022\021\n\tserver_id\030\020 \001(\005\022\036\n\026"
    "territory_master_count\030\021 \001(\005\"{\n\rGuildBos"
    "sCard\022\031\n\021weekly_call_count\030\001 \001(\005\022\025\n\rgrow"
    "_up_point\030\002 \001(\005\022\027\n\017current_card_id\030\003 \001(\005"
    "\022\037\n\027current_calling_card_id\030\004 \001(\005B\036\n\014app"
    ".protobufB\014GuildContentH\001", 4105);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guild.proto", &protobuf_RegisterTypes);
  GuildMemberProto::default_instance_ = new GuildMemberProto();
  GuildProto::default_instance_ = new GuildProto();
  GuildHongBaosProto::default_instance_ = new GuildHongBaosProto();
  GuildHongBaoProto::default_instance_ = new GuildHongBaoProto();
  GuildHongBaoCollectLogProto::default_instance_ = new GuildHongBaoCollectLogProto();
  LongXianGuildStatProto::default_instance_ = new LongXianGuildStatProto();
  ChengBaProto::default_instance_ = new ChengBaProto();
  ChengBaRankObjProto::default_instance_ = new ChengBaRankObjProto();
  ChengBaPrizeCollectHeroIdsProto::default_instance_ = new ChengBaPrizeCollectHeroIdsProto();
  GuildDungeonBossKilledProto::default_instance_ = new GuildDungeonBossKilledProto();
  ChallengeFastCrossProto::default_instance_ = new ChallengeFastCrossProto();
  TongTianTaFastCrossProto::default_instance_ = new TongTianTaFastCrossProto();
  ClientNewsProto::default_instance_ = new ClientNewsProto();
  ClientGuildListProto::default_instance_ = new ClientGuildListProto();
  GuildInListProto::default_instance_ = new GuildInListProto();
  GuildBossCard::default_instance_ = new GuildBossCard();
  GuildMemberProto::default_instance_->InitAsDefaultInstance();
  GuildProto::default_instance_->InitAsDefaultInstance();
  GuildHongBaosProto::default_instance_->InitAsDefaultInstance();
  GuildHongBaoProto::default_instance_->InitAsDefaultInstance();
  GuildHongBaoCollectLogProto::default_instance_->InitAsDefaultInstance();
  LongXianGuildStatProto::default_instance_->InitAsDefaultInstance();
  ChengBaProto::default_instance_->InitAsDefaultInstance();
  ChengBaRankObjProto::default_instance_->InitAsDefaultInstance();
  ChengBaPrizeCollectHeroIdsProto::default_instance_->InitAsDefaultInstance();
  GuildDungeonBossKilledProto::default_instance_->InitAsDefaultInstance();
  ChallengeFastCrossProto::default_instance_->InitAsDefaultInstance();
  TongTianTaFastCrossProto::default_instance_->InitAsDefaultInstance();
  ClientNewsProto::default_instance_->InitAsDefaultInstance();
  ClientGuildListProto::default_instance_->InitAsDefaultInstance();
  GuildInListProto::default_instance_->InitAsDefaultInstance();
  GuildBossCard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guild_2eproto {
  StaticDescriptorInitializer_guild_2eproto() {
    protobuf_AddDesc_guild_2eproto();
  }
} static_descriptor_initializer_guild_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GuildMemberProto::kIdFieldNumber;
const int GuildMemberProto::kNameFieldNumber;
const int GuildMemberProto::kEnterGuildTimeFieldNumber;
const int GuildMemberProto::kContributionPointFieldNumber;
const int GuildMemberProto::kNickNameFieldNumber;
const int GuildMemberProto::kGroupNameFieldNumber;
const int GuildMemberProto::kLevelFieldNumber;
const int GuildMemberProto::kFightAmountFieldNumber;
const int GuildMemberProto::kLastOfflineTimeFieldNumber;
const int GuildMemberProto::kMountLevelFieldNumber;
const int GuildMemberProto::kFengWuLevelFieldNumber;
const int GuildMemberProto::kIsOnlineFieldNumber;
const int GuildMemberProto::kSceneIdFieldNumber;
const int GuildMemberProto::kSuperArmLevelFieldNumber;
const int GuildMemberProto::kHistoryGiftGoods1FieldNumber;
const int GuildMemberProto::kHistoryGiftGoods2FieldNumber;
const int GuildMemberProto::kHistoryGiftGoods3FieldNumber;
const int GuildMemberProto::kHistoryGiftGoods4FieldNumber;
const int GuildMemberProto::kHistoryGiftMoneyFieldNumber;
const int GuildMemberProto::kSuperWeaponFightAmountFieldNumber;
const int GuildMemberProto::kChallengeAssistTimesFieldNumber;
const int GuildMemberProto::kChallengeSequenceFieldNumber;
const int GuildMemberProto::kEquipmentResourceFieldNumber;
const int GuildMemberProto::kRaceFieldNumber;
const int GuildMemberProto::kTianjieFieldNumber;
const int GuildMemberProto::kTianzuiFieldNumber;
const int GuildMemberProto::kEquipmentResource2FieldNumber;
#endif  // !_MSC_VER

GuildMemberProto::GuildMemberProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMemberProto::InitAsDefaultInstance() {
}

GuildMemberProto::GuildMemberProto(const GuildMemberProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMemberProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enter_guild_time_ = GOOGLE_LONGLONG(0);
  contribution_point_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  fight_amount_ = 0;
  last_offline_time_ = GOOGLE_LONGLONG(0);
  mount_level_ = 0;
  feng_wu_level_ = 0;
  is_online_ = false;
  scene_id_ = 0;
  super_arm_level_ = 0;
  history_gift_goods_1_ = 0;
  history_gift_goods_2_ = 0;
  history_gift_goods_3_ = 0;
  history_gift_goods_4_ = 0;
  history_gift_money_ = GOOGLE_LONGLONG(0);
  super_weapon_fight_amount_ = 0;
  challenge_assist_times_ = 0;
  challenge_sequence_ = 0;
  equipment_resource_ = 0;
  race_ = 0;
  tianjie_ = 0;
  tianzui_ = 0;
  equipment_resource2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberProto::~GuildMemberProto() {
  SharedDtor();
}

void GuildMemberProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildMemberProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberProto_descriptor_;
}

const GuildMemberProto& GuildMemberProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMemberProto* GuildMemberProto::default_instance_ = NULL;

GuildMemberProto* GuildMemberProto::New() const {
  return new GuildMemberProto;
}

void GuildMemberProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    enter_guild_time_ = GOOGLE_LONGLONG(0);
    contribution_point_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    level_ = 0;
    fight_amount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_offline_time_ = GOOGLE_LONGLONG(0);
    mount_level_ = 0;
    feng_wu_level_ = 0;
    is_online_ = false;
    scene_id_ = 0;
    super_arm_level_ = 0;
    history_gift_goods_1_ = 0;
    history_gift_goods_2_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    history_gift_goods_3_ = 0;
    history_gift_goods_4_ = 0;
    history_gift_money_ = GOOGLE_LONGLONG(0);
    super_weapon_fight_amount_ = 0;
    challenge_assist_times_ = 0;
    challenge_sequence_ = 0;
    equipment_resource_ = 0;
    race_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tianjie_ = 0;
    tianzui_ = 0;
    equipment_resource2_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enter_guild_time;
        break;
      }

      // optional int64 enter_guild_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_guild_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enter_guild_time_)));
          set_has_enter_guild_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contribution_point;
        break;
      }

      // optional int32 contribution_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribution_point_)));
          set_has_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // optional bytes nick_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_group_name;
        break;
      }

      // optional bytes group_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight_amount;
        break;
      }

      // optional int32 fight_amount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_amount_)));
          set_has_fight_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_offline_time;
        break;
      }

      // optional int64 last_offline_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_offline_time_)));
          set_has_last_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mount_level;
        break;
      }

      // optional int32 mount_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_level_)));
          set_has_mount_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_feng_wu_level;
        break;
      }

      // optional int32 feng_wu_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feng_wu_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feng_wu_level_)));
          set_has_feng_wu_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_history_gift_goods_1;
        break;
      }

      // optional int32 history_gift_goods_1 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_gift_goods_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_gift_goods_1_)));
          set_has_history_gift_goods_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_history_gift_goods_2;
        break;
      }

      // optional int32 history_gift_goods_2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_gift_goods_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_gift_goods_2_)));
          set_has_history_gift_goods_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_history_gift_goods_3;
        break;
      }

      // optional int32 history_gift_goods_3 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_gift_goods_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_gift_goods_3_)));
          set_has_history_gift_goods_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_history_gift_goods_4;
        break;
      }

      // optional int32 history_gift_goods_4 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_gift_goods_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_gift_goods_4_)));
          set_has_history_gift_goods_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_history_gift_money;
        break;
      }

      // optional int64 history_gift_money = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_gift_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &history_gift_money_)));
          set_has_history_gift_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_super_weapon_fight_amount;
        break;
      }

      // optional int32 super_weapon_fight_amount = 19 [deprecated = true];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_weapon_fight_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_weapon_fight_amount_)));
          set_has_super_weapon_fight_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_challenge_assist_times;
        break;
      }

      // optional int32 challenge_assist_times = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_assist_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_assist_times_)));
          set_has_challenge_assist_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_challenge_sequence;
        break;
      }

      // optional int32 challenge_sequence = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_sequence_)));
          set_has_challenge_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_equipment_resource;
        break;
      }

      // optional int32 equipment_resource = 22 [deprecated = true];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipment_resource_)));
          set_has_equipment_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_race;
        break;
      }

      // optional int32 race = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tianjie;
        break;
      }

      // optional int32 tianjie = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tianjie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tianjie_)));
          set_has_tianjie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tianzui;
        break;
      }

      // optional int32 tianzui = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tianzui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tianzui_)));
          set_has_tianzui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_super_arm_level;
        break;
      }

      // optional int32 super_arm_level = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_arm_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_arm_level_)));
          set_has_super_arm_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_equipment_resource2;
        break;
      }

      // optional int64 equipment_resource2 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_resource2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipment_resource2_)));
          set_has_equipment_resource2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMemberProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int64 enter_guild_time = 3;
  if (has_enter_guild_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->enter_guild_time(), output);
  }

  // optional int32 contribution_point = 4;
  if (has_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->contribution_point(), output);
  }

  // optional bytes nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->nick_name(), output);
  }

  // optional bytes group_name = 6;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->group_name(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 fight_amount = 8;
  if (has_fight_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fight_amount(), output);
  }

  // optional int64 last_offline_time = 9;
  if (has_last_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->last_offline_time(), output);
  }

  // optional int32 mount_level = 10;
  if (has_mount_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mount_level(), output);
  }

  // optional int32 feng_wu_level = 11;
  if (has_feng_wu_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->feng_wu_level(), output);
  }

  // optional bool is_online = 12;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_online(), output);
  }

  // optional int32 scene_id = 13;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->scene_id(), output);
  }

  // optional int32 history_gift_goods_1 = 14;
  if (has_history_gift_goods_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->history_gift_goods_1(), output);
  }

  // optional int32 history_gift_goods_2 = 15;
  if (has_history_gift_goods_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->history_gift_goods_2(), output);
  }

  // optional int32 history_gift_goods_3 = 16;
  if (has_history_gift_goods_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->history_gift_goods_3(), output);
  }

  // optional int32 history_gift_goods_4 = 17;
  if (has_history_gift_goods_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->history_gift_goods_4(), output);
  }

  // optional int64 history_gift_money = 18;
  if (has_history_gift_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->history_gift_money(), output);
  }

  // optional int32 super_weapon_fight_amount = 19 [deprecated = true];
  if (has_super_weapon_fight_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->super_weapon_fight_amount(), output);
  }

  // optional int32 challenge_assist_times = 20;
  if (has_challenge_assist_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->challenge_assist_times(), output);
  }

  // optional int32 challenge_sequence = 21;
  if (has_challenge_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->challenge_sequence(), output);
  }

  // optional int32 equipment_resource = 22 [deprecated = true];
  if (has_equipment_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->equipment_resource(), output);
  }

  // optional int32 race = 23;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->race(), output);
  }

  // optional int32 tianjie = 24;
  if (has_tianjie()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tianjie(), output);
  }

  // optional int32 tianzui = 25;
  if (has_tianzui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tianzui(), output);
  }

  // optional int32 super_arm_level = 26;
  if (has_super_arm_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->super_arm_level(), output);
  }

  // optional int64 equipment_resource2 = 27;
  if (has_equipment_resource2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->equipment_resource2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMemberProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int64 enter_guild_time = 3;
  if (has_enter_guild_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->enter_guild_time(), target);
  }

  // optional int32 contribution_point = 4;
  if (has_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->contribution_point(), target);
  }

  // optional bytes nick_name = 5;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nick_name(), target);
  }

  // optional bytes group_name = 6;
  if (has_group_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->group_name(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 fight_amount = 8;
  if (has_fight_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fight_amount(), target);
  }

  // optional int64 last_offline_time = 9;
  if (has_last_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->last_offline_time(), target);
  }

  // optional int32 mount_level = 10;
  if (has_mount_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mount_level(), target);
  }

  // optional int32 feng_wu_level = 11;
  if (has_feng_wu_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->feng_wu_level(), target);
  }

  // optional bool is_online = 12;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_online(), target);
  }

  // optional int32 scene_id = 13;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->scene_id(), target);
  }

  // optional int32 history_gift_goods_1 = 14;
  if (has_history_gift_goods_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->history_gift_goods_1(), target);
  }

  // optional int32 history_gift_goods_2 = 15;
  if (has_history_gift_goods_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->history_gift_goods_2(), target);
  }

  // optional int32 history_gift_goods_3 = 16;
  if (has_history_gift_goods_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->history_gift_goods_3(), target);
  }

  // optional int32 history_gift_goods_4 = 17;
  if (has_history_gift_goods_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->history_gift_goods_4(), target);
  }

  // optional int64 history_gift_money = 18;
  if (has_history_gift_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->history_gift_money(), target);
  }

  // optional int32 super_weapon_fight_amount = 19 [deprecated = true];
  if (has_super_weapon_fight_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->super_weapon_fight_amount(), target);
  }

  // optional int32 challenge_assist_times = 20;
  if (has_challenge_assist_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->challenge_assist_times(), target);
  }

  // optional int32 challenge_sequence = 21;
  if (has_challenge_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->challenge_sequence(), target);
  }

  // optional int32 equipment_resource = 22 [deprecated = true];
  if (has_equipment_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->equipment_resource(), target);
  }

  // optional int32 race = 23;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->race(), target);
  }

  // optional int32 tianjie = 24;
  if (has_tianjie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tianjie(), target);
  }

  // optional int32 tianzui = 25;
  if (has_tianzui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tianzui(), target);
  }

  // optional int32 super_arm_level = 26;
  if (has_super_arm_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->super_arm_level(), target);
  }

  // optional int64 equipment_resource2 = 27;
  if (has_equipment_resource2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->equipment_resource2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMemberProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int64 enter_guild_time = 3;
    if (has_enter_guild_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enter_guild_time());
    }

    // optional int32 contribution_point = 4;
    if (has_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribution_point());
    }

    // optional bytes nick_name = 5;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // optional bytes group_name = 6;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_name());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 fight_amount = 8;
    if (has_fight_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_amount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 last_offline_time = 9;
    if (has_last_offline_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_offline_time());
    }

    // optional int32 mount_level = 10;
    if (has_mount_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_level());
    }

    // optional int32 feng_wu_level = 11;
    if (has_feng_wu_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feng_wu_level());
    }

    // optional bool is_online = 12;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

    // optional int32 scene_id = 13;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 super_arm_level = 26;
    if (has_super_arm_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_arm_level());
    }

    // optional int32 history_gift_goods_1 = 14;
    if (has_history_gift_goods_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_gift_goods_1());
    }

    // optional int32 history_gift_goods_2 = 15;
    if (has_history_gift_goods_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_gift_goods_2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 history_gift_goods_3 = 16;
    if (has_history_gift_goods_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_gift_goods_3());
    }

    // optional int32 history_gift_goods_4 = 17;
    if (has_history_gift_goods_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_gift_goods_4());
    }

    // optional int64 history_gift_money = 18;
    if (has_history_gift_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->history_gift_money());
    }

    // optional int32 super_weapon_fight_amount = 19 [deprecated = true];
    if (has_super_weapon_fight_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_weapon_fight_amount());
    }

    // optional int32 challenge_assist_times = 20;
    if (has_challenge_assist_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_assist_times());
    }

    // optional int32 challenge_sequence = 21;
    if (has_challenge_sequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_sequence());
    }

    // optional int32 equipment_resource = 22 [deprecated = true];
    if (has_equipment_resource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipment_resource());
    }

    // optional int32 race = 23;
    if (has_race()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 tianjie = 24;
    if (has_tianjie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tianjie());
    }

    // optional int32 tianzui = 25;
    if (has_tianzui()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tianzui());
    }

    // optional int64 equipment_resource2 = 27;
    if (has_equipment_resource2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipment_resource2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberProto::MergeFrom(const GuildMemberProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_enter_guild_time()) {
      set_enter_guild_time(from.enter_guild_time());
    }
    if (from.has_contribution_point()) {
      set_contribution_point(from.contribution_point());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight_amount()) {
      set_fight_amount(from.fight_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_offline_time()) {
      set_last_offline_time(from.last_offline_time());
    }
    if (from.has_mount_level()) {
      set_mount_level(from.mount_level());
    }
    if (from.has_feng_wu_level()) {
      set_feng_wu_level(from.feng_wu_level());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_super_arm_level()) {
      set_super_arm_level(from.super_arm_level());
    }
    if (from.has_history_gift_goods_1()) {
      set_history_gift_goods_1(from.history_gift_goods_1());
    }
    if (from.has_history_gift_goods_2()) {
      set_history_gift_goods_2(from.history_gift_goods_2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_history_gift_goods_3()) {
      set_history_gift_goods_3(from.history_gift_goods_3());
    }
    if (from.has_history_gift_goods_4()) {
      set_history_gift_goods_4(from.history_gift_goods_4());
    }
    if (from.has_history_gift_money()) {
      set_history_gift_money(from.history_gift_money());
    }
    if (from.has_super_weapon_fight_amount()) {
      set_super_weapon_fight_amount(from.super_weapon_fight_amount());
    }
    if (from.has_challenge_assist_times()) {
      set_challenge_assist_times(from.challenge_assist_times());
    }
    if (from.has_challenge_sequence()) {
      set_challenge_sequence(from.challenge_sequence());
    }
    if (from.has_equipment_resource()) {
      set_equipment_resource(from.equipment_resource());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tianjie()) {
      set_tianjie(from.tianjie());
    }
    if (from.has_tianzui()) {
      set_tianzui(from.tianzui());
    }
    if (from.has_equipment_resource2()) {
      set_equipment_resource2(from.equipment_resource2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberProto::CopyFrom(const GuildMemberProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberProto::IsInitialized() const {

  return true;
}

void GuildMemberProto::Swap(GuildMemberProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(enter_guild_time_, other->enter_guild_time_);
    std::swap(contribution_point_, other->contribution_point_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(group_name_, other->group_name_);
    std::swap(level_, other->level_);
    std::swap(fight_amount_, other->fight_amount_);
    std::swap(last_offline_time_, other->last_offline_time_);
    std::swap(mount_level_, other->mount_level_);
    std::swap(feng_wu_level_, other->feng_wu_level_);
    std::swap(is_online_, other->is_online_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(super_arm_level_, other->super_arm_level_);
    std::swap(history_gift_goods_1_, other->history_gift_goods_1_);
    std::swap(history_gift_goods_2_, other->history_gift_goods_2_);
    std::swap(history_gift_goods_3_, other->history_gift_goods_3_);
    std::swap(history_gift_goods_4_, other->history_gift_goods_4_);
    std::swap(history_gift_money_, other->history_gift_money_);
    std::swap(super_weapon_fight_amount_, other->super_weapon_fight_amount_);
    std::swap(challenge_assist_times_, other->challenge_assist_times_);
    std::swap(challenge_sequence_, other->challenge_sequence_);
    std::swap(equipment_resource_, other->equipment_resource_);
    std::swap(race_, other->race_);
    std::swap(tianjie_, other->tianjie_);
    std::swap(tianzui_, other->tianzui_);
    std::swap(equipment_resource2_, other->equipment_resource2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberProto_descriptor_;
  metadata.reflection = GuildMemberProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildProto::kGuildNameFieldNumber;
const int GuildProto::kFlagNameFieldNumber;
const int GuildProto::kFlagKindFieldNumber;
const int GuildProto::kFlagLevelFieldNumber;
const int GuildProto::kIsAutoAcceptJoinRequestFieldNumber;
const int GuildProto::kMembersFieldNumber;
const int GuildProto::kLeaderIdFieldNumber;
const int GuildProto::kViceLeaderIdFieldNumber;
const int GuildProto::kTangLeaderIdFieldNumber;
const int GuildProto::kMaxHeroCountFieldNumber;
const int GuildProto::kCreateTimeFieldNumber;
const int GuildProto::kGiftGoods1FieldNumber;
const int GuildProto::kGiftGoods2FieldNumber;
const int GuildProto::kGiftGoods3FieldNumber;
const int GuildProto::kGiftGoods4FieldNumber;
const int GuildProto::kGiftMoneyFieldNumber;
const int GuildProto::kAnnouncementFieldNumber;
const int GuildProto::kChangeAnnouncementTimeFieldNumber;
const int GuildProto::kContributionGoodsAlreadyBoughtFieldNumber;
const int GuildProto::kGuildTowerLevelFieldNumber;
const int GuildProto::kIsCompleteGuildPlantFieldNumber;
const int GuildProto::kActiveDegreeFullFieldNumber;
const int GuildProto::kActiveHeroIdFieldNumber;
const int GuildProto::kDismissWarningLevelFieldNumber;
const int GuildProto::kFriendGuildFieldNumber;
const int GuildProto::kEnemyGuildFieldNumber;
const int GuildProto::kServerContributionGoodsIdFieldNumber;
const int GuildProto::kServerContributionBoughtCountFieldNumber;
const int GuildProto::kBeenAddedEnemyNotNotifiedFieldNumber;
const int GuildProto::kBeenRemovedEnemyNotNotifiedFieldNumber;
const int GuildProto::kBeenRemovedFriendNotNotifiedFieldNumber;
const int GuildProto::kServerNewsFieldNumber;
const int GuildProto::kServerIdFieldNumber;
const int GuildProto::kOperatorIdFieldNumber;
const int GuildProto::kFastCrossDataFieldNumber;
const int GuildProto::kGuildDungeonBossKilledFieldNumber;
const int GuildProto::kNewTangLeaderIdFieldNumber;
const int GuildProto::kChengBaProtoFieldNumber;
const int GuildProto::kActiveHeroId2FieldNumber;
const int GuildProto::kLxGuildStatFieldNumber;
const int GuildProto::kHbsFieldNumber;
const int GuildProto::kTongTainTaFastCrossDataFieldNumber;
const int GuildProto::kBossCardFieldNumber;
#endif  // !_MSC_VER

GuildProto::GuildProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildProto::InitAsDefaultInstance() {
  guild_dungeon_boss_killed_ = const_cast< ::app::message::GuildDungeonBossKilledProto*>(&::app::message::GuildDungeonBossKilledProto::default_instance());
  cheng_ba_proto_ = const_cast< ::app::message::ChengBaProto*>(&::app::message::ChengBaProto::default_instance());
  lx_guild_stat_ = const_cast< ::app::message::LongXianGuildStatProto*>(&::app::message::LongXianGuildStatProto::default_instance());
  hbs_ = const_cast< ::app::message::GuildHongBaosProto*>(&::app::message::GuildHongBaosProto::default_instance());
  boss_card_ = const_cast< ::app::message::GuildBossCard*>(&::app::message::GuildBossCard::default_instance());
}

GuildProto::GuildProto(const GuildProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildProto::SharedCtor() {
  _cached_size_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_kind_ = 0;
  flag_level_ = 0;
  is_auto_accept_join_request_ = false;
  leader_id_ = GOOGLE_LONGLONG(0);
  vice_leader_id_ = GOOGLE_LONGLONG(0);
  tang_leader_id_ = GOOGLE_LONGLONG(0);
  max_hero_count_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  gift_goods_1_ = 0;
  gift_goods_2_ = 0;
  gift_goods_3_ = 0;
  gift_goods_4_ = 0;
  gift_money_ = GOOGLE_LONGLONG(0);
  announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  change_announcement_time_ = GOOGLE_LONGLONG(0);
  guild_tower_level_ = 0;
  is_complete_guild_plant_ = false;
  active_degree_full_ = false;
  dismiss_warning_level_ = 0;
  server_id_ = 0;
  operator_id_ = 0;
  guild_dungeon_boss_killed_ = NULL;
  cheng_ba_proto_ = NULL;
  lx_guild_stat_ = NULL;
  hbs_ = NULL;
  boss_card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildProto::~GuildProto() {
  SharedDtor();
}

void GuildProto::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    delete announcement_;
  }
  if (this != default_instance_) {
    delete guild_dungeon_boss_killed_;
    delete cheng_ba_proto_;
    delete lx_guild_stat_;
    delete hbs_;
    delete boss_card_;
  }
}

void GuildProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildProto_descriptor_;
}

const GuildProto& GuildProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildProto* GuildProto::default_instance_ = NULL;

GuildProto* GuildProto::New() const {
  return new GuildProto;
}

void GuildProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_flag_name()) {
      if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
        flag_name_->clear();
      }
    }
    flag_kind_ = 0;
    flag_level_ = 0;
    is_auto_accept_join_request_ = false;
    leader_id_ = GOOGLE_LONGLONG(0);
    vice_leader_id_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tang_leader_id_ = GOOGLE_LONGLONG(0);
    max_hero_count_ = 0;
    create_time_ = GOOGLE_LONGLONG(0);
    gift_goods_1_ = 0;
    gift_goods_2_ = 0;
    gift_goods_3_ = 0;
    gift_goods_4_ = 0;
    gift_money_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_announcement()) {
      if (announcement_ != &::google::protobuf::internal::kEmptyString) {
        announcement_->clear();
      }
    }
    change_announcement_time_ = GOOGLE_LONGLONG(0);
    guild_tower_level_ = 0;
    is_complete_guild_plant_ = false;
    active_degree_full_ = false;
    dismiss_warning_level_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    server_id_ = 0;
    operator_id_ = 0;
    if (has_guild_dungeon_boss_killed()) {
      if (guild_dungeon_boss_killed_ != NULL) guild_dungeon_boss_killed_->::app::message::GuildDungeonBossKilledProto::Clear();
    }
    if (has_cheng_ba_proto()) {
      if (cheng_ba_proto_ != NULL) cheng_ba_proto_->::app::message::ChengBaProto::Clear();
    }
    if (has_lx_guild_stat()) {
      if (lx_guild_stat_ != NULL) lx_guild_stat_->::app::message::LongXianGuildStatProto::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_hbs()) {
      if (hbs_ != NULL) hbs_->::app::message::GuildHongBaosProto::Clear();
    }
    if (has_boss_card()) {
      if (boss_card_ != NULL) boss_card_->::app::message::GuildBossCard::Clear();
    }
  }
  members_.Clear();
  contribution_goods_already_bought_.Clear();
  active_hero_id_.Clear();
  friend_guild_.Clear();
  enemy_guild_.Clear();
  server_contribution_goods_id_.Clear();
  server_contribution_bought_count_.Clear();
  been_added_enemy_not_notified_.Clear();
  been_removed_enemy_not_notified_.Clear();
  been_removed_friend_not_notified_.Clear();
  server_news_.Clear();
  fast_cross_data_.Clear();
  new_tang_leader_id_.Clear();
  active_hero_id2_.Clear();
  tong_tain_ta_fast_cross_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes guild_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flag_name;
        break;
      }

      // optional bytes flag_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_flag_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_kind;
        break;
      }

      // optional int32 flag_kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_kind_)));
          set_has_flag_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag_level;
        break;
      }

      // optional int32 flag_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_level_)));
          set_has_flag_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_auto_accept_join_request;
        break;
      }

      // optional bool is_auto_accept_join_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_accept_join_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_accept_join_request_)));
          set_has_is_auto_accept_join_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_members;
        break;
      }

      // repeated .app.message.GuildMemberProto members = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_members;
        if (input->ExpectTag(56)) goto parse_leader_id;
        break;
      }

      // optional int64 leader_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vice_leader_id;
        break;
      }

      // optional int64 vice_leader_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vice_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vice_leader_id_)));
          set_has_vice_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tang_leader_id;
        break;
      }

      // optional int64 tang_leader_id = 9 [deprecated = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tang_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tang_leader_id_)));
          set_has_tang_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_hero_count;
        break;
      }

      // optional int32 max_hero_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hero_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hero_count_)));
          set_has_max_hero_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gift_goods_1;
        break;
      }

      // optional int32 gift_goods_1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_goods_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_goods_1_)));
          set_has_gift_goods_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gift_goods_2;
        break;
      }

      // optional int32 gift_goods_2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_goods_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_goods_2_)));
          set_has_gift_goods_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gift_goods_3;
        break;
      }

      // optional int32 gift_goods_3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_goods_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_goods_3_)));
          set_has_gift_goods_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_gift_goods_4;
        break;
      }

      // optional int32 gift_goods_4 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_goods_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_goods_4_)));
          set_has_gift_goods_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gift_money;
        break;
      }

      // optional int64 gift_money = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gift_money_)));
          set_has_gift_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_announcement;
        break;
      }

      // optional bytes announcement = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_announcement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_change_announcement_time;
        break;
      }

      // optional int64 change_announcement_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_announcement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_announcement_time_)));
          set_has_change_announcement_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_contribution_goods_already_bought;
        break;
      }

      // repeated int32 contribution_goods_already_bought = 19 [deprecated = true];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_goods_already_bought:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_contribution_goods_already_bought())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_contribution_goods_already_bought())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_contribution_goods_already_bought;
        if (input->ExpectTag(160)) goto parse_guild_tower_level;
        break;
      }

      // optional int32 guild_tower_level = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_tower_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_tower_level_)));
          set_has_guild_tower_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_is_complete_guild_plant;
        break;
      }

      // optional bool is_complete_guild_plant = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_complete_guild_plant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_complete_guild_plant_)));
          set_has_is_complete_guild_plant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_active_degree_full;
        break;
      }

      // optional bool active_degree_full = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_degree_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_degree_full_)));
          set_has_active_degree_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_active_hero_id;
        break;
      }

      // repeated int64 active_hero_id = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 408, input, this->mutable_active_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_active_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_active_hero_id;
        if (input->ExpectTag(416)) goto parse_dismiss_warning_level;
        break;
      }

      // optional int32 dismiss_warning_level = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismiss_warning_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dismiss_warning_level_)));
          set_has_dismiss_warning_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_friend_guild;
        break;
      }

      // repeated bytes friend_guild = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_friend_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_friend_guild;
        if (input->ExpectTag(434)) goto parse_enemy_guild;
        break;
      }

      // repeated bytes enemy_guild = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_enemy_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_enemy_guild;
        if (input->ExpectTag(440)) goto parse_server_contribution_goods_id;
        break;
      }

      // repeated int32 server_contribution_goods_id = 55 [deprecated = true];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_contribution_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 440, input, this->mutable_server_contribution_goods_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_server_contribution_goods_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_server_contribution_goods_id;
        if (input->ExpectTag(448)) goto parse_server_contribution_bought_count;
        break;
      }

      // repeated int32 server_contribution_bought_count = 56 [deprecated = true];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_contribution_bought_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 448, input, this->mutable_server_contribution_bought_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_server_contribution_bought_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_server_contribution_bought_count;
        if (input->ExpectTag(458)) goto parse_been_added_enemy_not_notified;
        break;
      }

      // repeated bytes been_added_enemy_not_notified = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_been_added_enemy_not_notified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_been_added_enemy_not_notified()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_been_added_enemy_not_notified;
        if (input->ExpectTag(466)) goto parse_been_removed_enemy_not_notified;
        break;
      }

      // repeated bytes been_removed_enemy_not_notified = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_been_removed_enemy_not_notified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_been_removed_enemy_not_notified()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_been_removed_enemy_not_notified;
        if (input->ExpectTag(474)) goto parse_server_news;
        break;
      }

      // repeated bytes server_news = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_news:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_server_news()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_server_news;
        if (input->ExpectTag(480)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_been_removed_friend_not_notified;
        break;
      }

      // repeated bytes been_removed_friend_not_notified = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_been_removed_friend_not_notified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_been_removed_friend_not_notified()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_been_removed_friend_not_notified;
        if (input->ExpectTag(498)) goto parse_fast_cross_data;
        break;
      }

      // repeated .app.message.ChallengeFastCrossProto fast_cross_data = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fast_cross_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fast_cross_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_fast_cross_data;
        if (input->ExpectTag(504)) goto parse_operator_id;
        break;
      }

      // optional int32 operator_id = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator_id_)));
          set_has_operator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_guild_dungeon_boss_killed;
        break;
      }

      // optional .app.message.GuildDungeonBossKilledProto guild_dungeon_boss_killed = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_dungeon_boss_killed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_dungeon_boss_killed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_new_tang_leader_id;
        break;
      }

      // repeated int64 new_tang_leader_id = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_tang_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 520, input, this->mutable_new_tang_leader_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_new_tang_leader_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_new_tang_leader_id;
        if (input->ExpectTag(530)) goto parse_cheng_ba_proto;
        break;
      }

      // optional .app.message.ChengBaProto cheng_ba_proto = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cheng_ba_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cheng_ba_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_active_hero_id2;
        break;
      }

      // repeated int64 active_hero_id2 = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_hero_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 536, input, this->mutable_active_hero_id2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_active_hero_id2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_active_hero_id2;
        if (input->ExpectTag(546)) goto parse_lx_guild_stat;
        break;
      }

      // optional .app.message.LongXianGuildStatProto lx_guild_stat = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lx_guild_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lx_guild_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_hbs;
        break;
      }

      // optional .app.message.GuildHongBaosProto hbs = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hbs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_tong_tain_ta_fast_cross_data;
        break;
      }

      // repeated .app.message.TongTianTaFastCrossProto tong_tain_ta_fast_cross_data = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tong_tain_ta_fast_cross_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tong_tain_ta_fast_cross_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_tong_tain_ta_fast_cross_data;
        if (input->ExpectTag(570)) goto parse_boss_card;
        break;
      }

      // optional .app.message.GuildBossCard boss_card = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->guild_name(), output);
  }

  // optional bytes flag_name = 2;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->flag_name(), output);
  }

  // optional int32 flag_kind = 3;
  if (has_flag_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag_kind(), output);
  }

  // optional int32 flag_level = 4;
  if (has_flag_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag_level(), output);
  }

  // optional bool is_auto_accept_join_request = 5;
  if (has_is_auto_accept_join_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_auto_accept_join_request(), output);
  }

  // repeated .app.message.GuildMemberProto members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->members(i), output);
  }

  // optional int64 leader_id = 7;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->leader_id(), output);
  }

  // optional int64 vice_leader_id = 8;
  if (has_vice_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vice_leader_id(), output);
  }

  // optional int64 tang_leader_id = 9 [deprecated = true];
  if (has_tang_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->tang_leader_id(), output);
  }

  // optional int32 max_hero_count = 10;
  if (has_max_hero_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_hero_count(), output);
  }

  // optional int64 create_time = 11;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->create_time(), output);
  }

  // optional int32 gift_goods_1 = 12;
  if (has_gift_goods_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gift_goods_1(), output);
  }

  // optional int32 gift_goods_2 = 13;
  if (has_gift_goods_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gift_goods_2(), output);
  }

  // optional int32 gift_goods_3 = 14;
  if (has_gift_goods_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gift_goods_3(), output);
  }

  // optional int32 gift_goods_4 = 15;
  if (has_gift_goods_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gift_goods_4(), output);
  }

  // optional int64 gift_money = 16;
  if (has_gift_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->gift_money(), output);
  }

  // optional bytes announcement = 17;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->announcement(), output);
  }

  // optional int64 change_announcement_time = 18;
  if (has_change_announcement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->change_announcement_time(), output);
  }

  // repeated int32 contribution_goods_already_bought = 19 [deprecated = true];
  for (int i = 0; i < this->contribution_goods_already_bought_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->contribution_goods_already_bought(i), output);
  }

  // optional int32 guild_tower_level = 20;
  if (has_guild_tower_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->guild_tower_level(), output);
  }

  // optional bool is_complete_guild_plant = 21;
  if (has_is_complete_guild_plant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_complete_guild_plant(), output);
  }

  // optional bool active_degree_full = 50;
  if (has_active_degree_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->active_degree_full(), output);
  }

  // repeated int64 active_hero_id = 51;
  for (int i = 0; i < this->active_hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      51, this->active_hero_id(i), output);
  }

  // optional int32 dismiss_warning_level = 52;
  if (has_dismiss_warning_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->dismiss_warning_level(), output);
  }

  // repeated bytes friend_guild = 53;
  for (int i = 0; i < this->friend_guild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      53, this->friend_guild(i), output);
  }

  // repeated bytes enemy_guild = 54;
  for (int i = 0; i < this->enemy_guild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      54, this->enemy_guild(i), output);
  }

  // repeated int32 server_contribution_goods_id = 55 [deprecated = true];
  for (int i = 0; i < this->server_contribution_goods_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      55, this->server_contribution_goods_id(i), output);
  }

  // repeated int32 server_contribution_bought_count = 56 [deprecated = true];
  for (int i = 0; i < this->server_contribution_bought_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      56, this->server_contribution_bought_count(i), output);
  }

  // repeated bytes been_added_enemy_not_notified = 57;
  for (int i = 0; i < this->been_added_enemy_not_notified_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      57, this->been_added_enemy_not_notified(i), output);
  }

  // repeated bytes been_removed_enemy_not_notified = 58;
  for (int i = 0; i < this->been_removed_enemy_not_notified_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      58, this->been_removed_enemy_not_notified(i), output);
  }

  // repeated bytes server_news = 59;
  for (int i = 0; i < this->server_news_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      59, this->server_news(i), output);
  }

  // optional int32 server_id = 60;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->server_id(), output);
  }

  // repeated bytes been_removed_friend_not_notified = 61;
  for (int i = 0; i < this->been_removed_friend_not_notified_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      61, this->been_removed_friend_not_notified(i), output);
  }

  // repeated .app.message.ChallengeFastCrossProto fast_cross_data = 62;
  for (int i = 0; i < this->fast_cross_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->fast_cross_data(i), output);
  }

  // optional int32 operator_id = 63;
  if (has_operator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->operator_id(), output);
  }

  // optional .app.message.GuildDungeonBossKilledProto guild_dungeon_boss_killed = 64;
  if (has_guild_dungeon_boss_killed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->guild_dungeon_boss_killed(), output);
  }

  // repeated int64 new_tang_leader_id = 65;
  for (int i = 0; i < this->new_tang_leader_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      65, this->new_tang_leader_id(i), output);
  }

  // optional .app.message.ChengBaProto cheng_ba_proto = 66;
  if (has_cheng_ba_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->cheng_ba_proto(), output);
  }

  // repeated int64 active_hero_id2 = 67;
  for (int i = 0; i < this->active_hero_id2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      67, this->active_hero_id2(i), output);
  }

  // optional .app.message.LongXianGuildStatProto lx_guild_stat = 68;
  if (has_lx_guild_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->lx_guild_stat(), output);
  }

  // optional .app.message.GuildHongBaosProto hbs = 69;
  if (has_hbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->hbs(), output);
  }

  // repeated .app.message.TongTianTaFastCrossProto tong_tain_ta_fast_cross_data = 70;
  for (int i = 0; i < this->tong_tain_ta_fast_cross_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->tong_tain_ta_fast_cross_data(i), output);
  }

  // optional .app.message.GuildBossCard boss_card = 71;
  if (has_boss_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->boss_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes guild_name = 1;
  if (has_guild_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->guild_name(), target);
  }

  // optional bytes flag_name = 2;
  if (has_flag_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->flag_name(), target);
  }

  // optional int32 flag_kind = 3;
  if (has_flag_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag_kind(), target);
  }

  // optional int32 flag_level = 4;
  if (has_flag_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag_level(), target);
  }

  // optional bool is_auto_accept_join_request = 5;
  if (has_is_auto_accept_join_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_auto_accept_join_request(), target);
  }

  // repeated .app.message.GuildMemberProto members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->members(i), target);
  }

  // optional int64 leader_id = 7;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->leader_id(), target);
  }

  // optional int64 vice_leader_id = 8;
  if (has_vice_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vice_leader_id(), target);
  }

  // optional int64 tang_leader_id = 9 [deprecated = true];
  if (has_tang_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->tang_leader_id(), target);
  }

  // optional int32 max_hero_count = 10;
  if (has_max_hero_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_hero_count(), target);
  }

  // optional int64 create_time = 11;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->create_time(), target);
  }

  // optional int32 gift_goods_1 = 12;
  if (has_gift_goods_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gift_goods_1(), target);
  }

  // optional int32 gift_goods_2 = 13;
  if (has_gift_goods_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gift_goods_2(), target);
  }

  // optional int32 gift_goods_3 = 14;
  if (has_gift_goods_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gift_goods_3(), target);
  }

  // optional int32 gift_goods_4 = 15;
  if (has_gift_goods_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gift_goods_4(), target);
  }

  // optional int64 gift_money = 16;
  if (has_gift_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->gift_money(), target);
  }

  // optional bytes announcement = 17;
  if (has_announcement()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->announcement(), target);
  }

  // optional int64 change_announcement_time = 18;
  if (has_change_announcement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->change_announcement_time(), target);
  }

  // repeated int32 contribution_goods_already_bought = 19 [deprecated = true];
  for (int i = 0; i < this->contribution_goods_already_bought_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->contribution_goods_already_bought(i), target);
  }

  // optional int32 guild_tower_level = 20;
  if (has_guild_tower_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->guild_tower_level(), target);
  }

  // optional bool is_complete_guild_plant = 21;
  if (has_is_complete_guild_plant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_complete_guild_plant(), target);
  }

  // optional bool active_degree_full = 50;
  if (has_active_degree_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->active_degree_full(), target);
  }

  // repeated int64 active_hero_id = 51;
  for (int i = 0; i < this->active_hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(51, this->active_hero_id(i), target);
  }

  // optional int32 dismiss_warning_level = 52;
  if (has_dismiss_warning_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->dismiss_warning_level(), target);
  }

  // repeated bytes friend_guild = 53;
  for (int i = 0; i < this->friend_guild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(53, this->friend_guild(i), target);
  }

  // repeated bytes enemy_guild = 54;
  for (int i = 0; i < this->enemy_guild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(54, this->enemy_guild(i), target);
  }

  // repeated int32 server_contribution_goods_id = 55 [deprecated = true];
  for (int i = 0; i < this->server_contribution_goods_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(55, this->server_contribution_goods_id(i), target);
  }

  // repeated int32 server_contribution_bought_count = 56 [deprecated = true];
  for (int i = 0; i < this->server_contribution_bought_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(56, this->server_contribution_bought_count(i), target);
  }

  // repeated bytes been_added_enemy_not_notified = 57;
  for (int i = 0; i < this->been_added_enemy_not_notified_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(57, this->been_added_enemy_not_notified(i), target);
  }

  // repeated bytes been_removed_enemy_not_notified = 58;
  for (int i = 0; i < this->been_removed_enemy_not_notified_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(58, this->been_removed_enemy_not_notified(i), target);
  }

  // repeated bytes server_news = 59;
  for (int i = 0; i < this->server_news_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(59, this->server_news(i), target);
  }

  // optional int32 server_id = 60;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->server_id(), target);
  }

  // repeated bytes been_removed_friend_not_notified = 61;
  for (int i = 0; i < this->been_removed_friend_not_notified_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(61, this->been_removed_friend_not_notified(i), target);
  }

  // repeated .app.message.ChallengeFastCrossProto fast_cross_data = 62;
  for (int i = 0; i < this->fast_cross_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->fast_cross_data(i), target);
  }

  // optional int32 operator_id = 63;
  if (has_operator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->operator_id(), target);
  }

  // optional .app.message.GuildDungeonBossKilledProto guild_dungeon_boss_killed = 64;
  if (has_guild_dungeon_boss_killed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->guild_dungeon_boss_killed(), target);
  }

  // repeated int64 new_tang_leader_id = 65;
  for (int i = 0; i < this->new_tang_leader_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(65, this->new_tang_leader_id(i), target);
  }

  // optional .app.message.ChengBaProto cheng_ba_proto = 66;
  if (has_cheng_ba_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->cheng_ba_proto(), target);
  }

  // repeated int64 active_hero_id2 = 67;
  for (int i = 0; i < this->active_hero_id2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(67, this->active_hero_id2(i), target);
  }

  // optional .app.message.LongXianGuildStatProto lx_guild_stat = 68;
  if (has_lx_guild_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->lx_guild_stat(), target);
  }

  // optional .app.message.GuildHongBaosProto hbs = 69;
  if (has_hbs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->hbs(), target);
  }

  // repeated .app.message.TongTianTaFastCrossProto tong_tain_ta_fast_cross_data = 70;
  for (int i = 0; i < this->tong_tain_ta_fast_cross_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->tong_tain_ta_fast_cross_data(i), target);
  }

  // optional .app.message.GuildBossCard boss_card = 71;
  if (has_boss_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->boss_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes guild_name = 1;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_name());
    }

    // optional bytes flag_name = 2;
    if (has_flag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->flag_name());
    }

    // optional int32 flag_kind = 3;
    if (has_flag_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_kind());
    }

    // optional int32 flag_level = 4;
    if (has_flag_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_level());
    }

    // optional bool is_auto_accept_join_request = 5;
    if (has_is_auto_accept_join_request()) {
      total_size += 1 + 1;
    }

    // optional int64 leader_id = 7;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }

    // optional int64 vice_leader_id = 8;
    if (has_vice_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vice_leader_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 tang_leader_id = 9 [deprecated = true];
    if (has_tang_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tang_leader_id());
    }

    // optional int32 max_hero_count = 10;
    if (has_max_hero_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hero_count());
    }

    // optional int64 create_time = 11;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional int32 gift_goods_1 = 12;
    if (has_gift_goods_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_goods_1());
    }

    // optional int32 gift_goods_2 = 13;
    if (has_gift_goods_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_goods_2());
    }

    // optional int32 gift_goods_3 = 14;
    if (has_gift_goods_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_goods_3());
    }

    // optional int32 gift_goods_4 = 15;
    if (has_gift_goods_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_goods_4());
    }

    // optional int64 gift_money = 16;
    if (has_gift_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gift_money());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes announcement = 17;
    if (has_announcement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->announcement());
    }

    // optional int64 change_announcement_time = 18;
    if (has_change_announcement_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_announcement_time());
    }

    // optional int32 guild_tower_level = 20;
    if (has_guild_tower_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_tower_level());
    }

    // optional bool is_complete_guild_plant = 21;
    if (has_is_complete_guild_plant()) {
      total_size += 2 + 1;
    }

    // optional bool active_degree_full = 50;
    if (has_active_degree_full()) {
      total_size += 2 + 1;
    }

    // optional int32 dismiss_warning_level = 52;
    if (has_dismiss_warning_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dismiss_warning_level());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 server_id = 60;
    if (has_server_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 operator_id = 63;
    if (has_operator_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_id());
    }

    // optional .app.message.GuildDungeonBossKilledProto guild_dungeon_boss_killed = 64;
    if (has_guild_dungeon_boss_killed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_dungeon_boss_killed());
    }

    // optional .app.message.ChengBaProto cheng_ba_proto = 66;
    if (has_cheng_ba_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cheng_ba_proto());
    }

    // optional .app.message.LongXianGuildStatProto lx_guild_stat = 68;
    if (has_lx_guild_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lx_guild_stat());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .app.message.GuildHongBaosProto hbs = 69;
    if (has_hbs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hbs());
    }

    // optional .app.message.GuildBossCard boss_card = 71;
    if (has_boss_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_card());
    }

  }
  // repeated .app.message.GuildMemberProto members = 6;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated int32 contribution_goods_already_bought = 19 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->contribution_goods_already_bought_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->contribution_goods_already_bought(i));
    }
    total_size += 2 * this->contribution_goods_already_bought_size() + data_size;
  }

  // repeated int64 active_hero_id = 51;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->active_hero_id(i));
    }
    total_size += 2 * this->active_hero_id_size() + data_size;
  }

  // repeated bytes friend_guild = 53;
  total_size += 2 * this->friend_guild_size();
  for (int i = 0; i < this->friend_guild_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->friend_guild(i));
  }

  // repeated bytes enemy_guild = 54;
  total_size += 2 * this->enemy_guild_size();
  for (int i = 0; i < this->enemy_guild_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->enemy_guild(i));
  }

  // repeated int32 server_contribution_goods_id = 55 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->server_contribution_goods_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->server_contribution_goods_id(i));
    }
    total_size += 2 * this->server_contribution_goods_id_size() + data_size;
  }

  // repeated int32 server_contribution_bought_count = 56 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->server_contribution_bought_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->server_contribution_bought_count(i));
    }
    total_size += 2 * this->server_contribution_bought_count_size() + data_size;
  }

  // repeated bytes been_added_enemy_not_notified = 57;
  total_size += 2 * this->been_added_enemy_not_notified_size();
  for (int i = 0; i < this->been_added_enemy_not_notified_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->been_added_enemy_not_notified(i));
  }

  // repeated bytes been_removed_enemy_not_notified = 58;
  total_size += 2 * this->been_removed_enemy_not_notified_size();
  for (int i = 0; i < this->been_removed_enemy_not_notified_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->been_removed_enemy_not_notified(i));
  }

  // repeated bytes been_removed_friend_not_notified = 61;
  total_size += 2 * this->been_removed_friend_not_notified_size();
  for (int i = 0; i < this->been_removed_friend_not_notified_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->been_removed_friend_not_notified(i));
  }

  // repeated bytes server_news = 59;
  total_size += 2 * this->server_news_size();
  for (int i = 0; i < this->server_news_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->server_news(i));
  }

  // repeated .app.message.ChallengeFastCrossProto fast_cross_data = 62;
  total_size += 2 * this->fast_cross_data_size();
  for (int i = 0; i < this->fast_cross_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fast_cross_data(i));
  }

  // repeated int64 new_tang_leader_id = 65;
  {
    int data_size = 0;
    for (int i = 0; i < this->new_tang_leader_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->new_tang_leader_id(i));
    }
    total_size += 2 * this->new_tang_leader_id_size() + data_size;
  }

  // repeated int64 active_hero_id2 = 67;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_hero_id2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->active_hero_id2(i));
    }
    total_size += 2 * this->active_hero_id2_size() + data_size;
  }

  // repeated .app.message.TongTianTaFastCrossProto tong_tain_ta_fast_cross_data = 70;
  total_size += 2 * this->tong_tain_ta_fast_cross_data_size();
  for (int i = 0; i < this->tong_tain_ta_fast_cross_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tong_tain_ta_fast_cross_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildProto::MergeFrom(const GuildProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  contribution_goods_already_bought_.MergeFrom(from.contribution_goods_already_bought_);
  active_hero_id_.MergeFrom(from.active_hero_id_);
  friend_guild_.MergeFrom(from.friend_guild_);
  enemy_guild_.MergeFrom(from.enemy_guild_);
  server_contribution_goods_id_.MergeFrom(from.server_contribution_goods_id_);
  server_contribution_bought_count_.MergeFrom(from.server_contribution_bought_count_);
  been_added_enemy_not_notified_.MergeFrom(from.been_added_enemy_not_notified_);
  been_removed_enemy_not_notified_.MergeFrom(from.been_removed_enemy_not_notified_);
  been_removed_friend_not_notified_.MergeFrom(from.been_removed_friend_not_notified_);
  server_news_.MergeFrom(from.server_news_);
  fast_cross_data_.MergeFrom(from.fast_cross_data_);
  new_tang_leader_id_.MergeFrom(from.new_tang_leader_id_);
  active_hero_id2_.MergeFrom(from.active_hero_id2_);
  tong_tain_ta_fast_cross_data_.MergeFrom(from.tong_tain_ta_fast_cross_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_flag_name()) {
      set_flag_name(from.flag_name());
    }
    if (from.has_flag_kind()) {
      set_flag_kind(from.flag_kind());
    }
    if (from.has_flag_level()) {
      set_flag_level(from.flag_level());
    }
    if (from.has_is_auto_accept_join_request()) {
      set_is_auto_accept_join_request(from.is_auto_accept_join_request());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_vice_leader_id()) {
      set_vice_leader_id(from.vice_leader_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tang_leader_id()) {
      set_tang_leader_id(from.tang_leader_id());
    }
    if (from.has_max_hero_count()) {
      set_max_hero_count(from.max_hero_count());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_gift_goods_1()) {
      set_gift_goods_1(from.gift_goods_1());
    }
    if (from.has_gift_goods_2()) {
      set_gift_goods_2(from.gift_goods_2());
    }
    if (from.has_gift_goods_3()) {
      set_gift_goods_3(from.gift_goods_3());
    }
    if (from.has_gift_goods_4()) {
      set_gift_goods_4(from.gift_goods_4());
    }
    if (from.has_gift_money()) {
      set_gift_money(from.gift_money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_announcement()) {
      set_announcement(from.announcement());
    }
    if (from.has_change_announcement_time()) {
      set_change_announcement_time(from.change_announcement_time());
    }
    if (from.has_guild_tower_level()) {
      set_guild_tower_level(from.guild_tower_level());
    }
    if (from.has_is_complete_guild_plant()) {
      set_is_complete_guild_plant(from.is_complete_guild_plant());
    }
    if (from.has_active_degree_full()) {
      set_active_degree_full(from.active_degree_full());
    }
    if (from.has_dismiss_warning_level()) {
      set_dismiss_warning_level(from.dismiss_warning_level());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_operator_id()) {
      set_operator_id(from.operator_id());
    }
    if (from.has_guild_dungeon_boss_killed()) {
      mutable_guild_dungeon_boss_killed()->::app::message::GuildDungeonBossKilledProto::MergeFrom(from.guild_dungeon_boss_killed());
    }
    if (from.has_cheng_ba_proto()) {
      mutable_cheng_ba_proto()->::app::message::ChengBaProto::MergeFrom(from.cheng_ba_proto());
    }
    if (from.has_lx_guild_stat()) {
      mutable_lx_guild_stat()->::app::message::LongXianGuildStatProto::MergeFrom(from.lx_guild_stat());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_hbs()) {
      mutable_hbs()->::app::message::GuildHongBaosProto::MergeFrom(from.hbs());
    }
    if (from.has_boss_card()) {
      mutable_boss_card()->::app::message::GuildBossCard::MergeFrom(from.boss_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildProto::CopyFrom(const GuildProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildProto::IsInitialized() const {

  return true;
}

void GuildProto::Swap(GuildProto* other) {
  if (other != this) {
    std::swap(guild_name_, other->guild_name_);
    std::swap(flag_name_, other->flag_name_);
    std::swap(flag_kind_, other->flag_kind_);
    std::swap(flag_level_, other->flag_level_);
    std::swap(is_auto_accept_join_request_, other->is_auto_accept_join_request_);
    members_.Swap(&other->members_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(vice_leader_id_, other->vice_leader_id_);
    std::swap(tang_leader_id_, other->tang_leader_id_);
    std::swap(max_hero_count_, other->max_hero_count_);
    std::swap(create_time_, other->create_time_);
    std::swap(gift_goods_1_, other->gift_goods_1_);
    std::swap(gift_goods_2_, other->gift_goods_2_);
    std::swap(gift_goods_3_, other->gift_goods_3_);
    std::swap(gift_goods_4_, other->gift_goods_4_);
    std::swap(gift_money_, other->gift_money_);
    std::swap(announcement_, other->announcement_);
    std::swap(change_announcement_time_, other->change_announcement_time_);
    contribution_goods_already_bought_.Swap(&other->contribution_goods_already_bought_);
    std::swap(guild_tower_level_, other->guild_tower_level_);
    std::swap(is_complete_guild_plant_, other->is_complete_guild_plant_);
    std::swap(active_degree_full_, other->active_degree_full_);
    active_hero_id_.Swap(&other->active_hero_id_);
    std::swap(dismiss_warning_level_, other->dismiss_warning_level_);
    friend_guild_.Swap(&other->friend_guild_);
    enemy_guild_.Swap(&other->enemy_guild_);
    server_contribution_goods_id_.Swap(&other->server_contribution_goods_id_);
    server_contribution_bought_count_.Swap(&other->server_contribution_bought_count_);
    been_added_enemy_not_notified_.Swap(&other->been_added_enemy_not_notified_);
    been_removed_enemy_not_notified_.Swap(&other->been_removed_enemy_not_notified_);
    been_removed_friend_not_notified_.Swap(&other->been_removed_friend_not_notified_);
    server_news_.Swap(&other->server_news_);
    std::swap(server_id_, other->server_id_);
    std::swap(operator_id_, other->operator_id_);
    fast_cross_data_.Swap(&other->fast_cross_data_);
    std::swap(guild_dungeon_boss_killed_, other->guild_dungeon_boss_killed_);
    new_tang_leader_id_.Swap(&other->new_tang_leader_id_);
    std::swap(cheng_ba_proto_, other->cheng_ba_proto_);
    active_hero_id2_.Swap(&other->active_hero_id2_);
    std::swap(lx_guild_stat_, other->lx_guild_stat_);
    std::swap(hbs_, other->hbs_);
    tong_tain_ta_fast_cross_data_.Swap(&other->tong_tain_ta_fast_cross_data_);
    std::swap(boss_card_, other->boss_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildProto_descriptor_;
  metadata.reflection = GuildProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildHongBaosProto::kHbFieldNumber;
const int GuildHongBaosProto::kCollectLogFieldNumber;
#endif  // !_MSC_VER

GuildHongBaosProto::GuildHongBaosProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildHongBaosProto::InitAsDefaultInstance() {
}

GuildHongBaosProto::GuildHongBaosProto(const GuildHongBaosProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildHongBaosProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildHongBaosProto::~GuildHongBaosProto() {
  SharedDtor();
}

void GuildHongBaosProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildHongBaosProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildHongBaosProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildHongBaosProto_descriptor_;
}

const GuildHongBaosProto& GuildHongBaosProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildHongBaosProto* GuildHongBaosProto::default_instance_ = NULL;

GuildHongBaosProto* GuildHongBaosProto::New() const {
  return new GuildHongBaosProto;
}

void GuildHongBaosProto::Clear() {
  hb_.Clear();
  collect_log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildHongBaosProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.GuildHongBaoProto hb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hb;
        if (input->ExpectTag(18)) goto parse_collect_log;
        break;
      }

      // repeated .app.message.GuildHongBaoCollectLogProto collect_log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collect_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collect_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collect_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildHongBaosProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.GuildHongBaoProto hb = 1;
  for (int i = 0; i < this->hb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hb(i), output);
  }

  // repeated .app.message.GuildHongBaoCollectLogProto collect_log = 2;
  for (int i = 0; i < this->collect_log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->collect_log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildHongBaosProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.GuildHongBaoProto hb = 1;
  for (int i = 0; i < this->hb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hb(i), target);
  }

  // repeated .app.message.GuildHongBaoCollectLogProto collect_log = 2;
  for (int i = 0; i < this->collect_log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->collect_log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildHongBaosProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.GuildHongBaoProto hb = 1;
  total_size += 1 * this->hb_size();
  for (int i = 0; i < this->hb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hb(i));
  }

  // repeated .app.message.GuildHongBaoCollectLogProto collect_log = 2;
  total_size += 1 * this->collect_log_size();
  for (int i = 0; i < this->collect_log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collect_log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildHongBaosProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildHongBaosProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildHongBaosProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildHongBaosProto::MergeFrom(const GuildHongBaosProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  hb_.MergeFrom(from.hb_);
  collect_log_.MergeFrom(from.collect_log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildHongBaosProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildHongBaosProto::CopyFrom(const GuildHongBaosProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildHongBaosProto::IsInitialized() const {

  return true;
}

void GuildHongBaosProto::Swap(GuildHongBaosProto* other) {
  if (other != this) {
    hb_.Swap(&other->hb_);
    collect_log_.Swap(&other->collect_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildHongBaosProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildHongBaosProto_descriptor_;
  metadata.reflection = GuildHongBaosProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildHongBaoProto::kHeroIdFieldNumber;
const int GuildHongBaoProto::kHeroNameBytesFieldNumber;
const int GuildHongBaoProto::kHeroRaceFieldNumber;
const int GuildHongBaoProto::kTotalYbFieldNumber;
const int GuildHongBaoProto::kTotalHbFieldNumber;
const int GuildHongBaoProto::kLeftYbFieldNumber;
const int GuildHongBaoProto::kLeftHbFieldNumber;
#endif  // !_MSC_VER

GuildHongBaoProto::GuildHongBaoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildHongBaoProto::InitAsDefaultInstance() {
}

GuildHongBaoProto::GuildHongBaoProto(const GuildHongBaoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildHongBaoProto::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_race_ = 0;
  total_yb_ = 0;
  total_hb_ = 0;
  left_yb_ = 0;
  left_hb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildHongBaoProto::~GuildHongBaoProto() {
  SharedDtor();
}

void GuildHongBaoProto::SharedDtor() {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_bytes_;
  }
  if (this != default_instance_) {
  }
}

void GuildHongBaoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildHongBaoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildHongBaoProto_descriptor_;
}

const GuildHongBaoProto& GuildHongBaoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildHongBaoProto* GuildHongBaoProto::default_instance_ = NULL;

GuildHongBaoProto* GuildHongBaoProto::New() const {
  return new GuildHongBaoProto;
}

void GuildHongBaoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    if (has_hero_name_bytes()) {
      if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_bytes_->clear();
      }
    }
    hero_race_ = 0;
    total_yb_ = 0;
    total_hb_ = 0;
    left_yb_ = 0;
    left_hb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildHongBaoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name_bytes;
        break;
      }

      // optional bytes hero_name_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_name_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_race;
        break;
      }

      // optional int32 hero_race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_race_)));
          set_has_hero_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_yb;
        break;
      }

      // optional int32 total_yb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_yb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_yb_)));
          set_has_total_yb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_hb;
        break;
      }

      // optional int32 total_hb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_hb_)));
          set_has_total_hb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_yb;
        break;
      }

      // optional int32 left_yb = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_yb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_yb_)));
          set_has_left_yb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_left_hb;
        break;
      }

      // optional int32 left_hb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_hb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_hb_)));
          set_has_left_hb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildHongBaoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hero_name_bytes(), output);
  }

  // optional int32 hero_race = 3;
  if (has_hero_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_race(), output);
  }

  // optional int32 total_yb = 4;
  if (has_total_yb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_yb(), output);
  }

  // optional int32 total_hb = 5;
  if (has_total_hb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_hb(), output);
  }

  // optional int32 left_yb = 6;
  if (has_left_yb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_yb(), output);
  }

  // optional int32 left_hb = 7;
  if (has_left_hb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->left_hb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildHongBaoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hero_name_bytes(), target);
  }

  // optional int32 hero_race = 3;
  if (has_hero_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_race(), target);
  }

  // optional int32 total_yb = 4;
  if (has_total_yb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_yb(), target);
  }

  // optional int32 total_hb = 5;
  if (has_total_hb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_hb(), target);
  }

  // optional int32 left_yb = 6;
  if (has_left_yb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->left_yb(), target);
  }

  // optional int32 left_hb = 7;
  if (has_left_hb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->left_hb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildHongBaoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional bytes hero_name_bytes = 2;
    if (has_hero_name_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hero_name_bytes());
    }

    // optional int32 hero_race = 3;
    if (has_hero_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_race());
    }

    // optional int32 total_yb = 4;
    if (has_total_yb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_yb());
    }

    // optional int32 total_hb = 5;
    if (has_total_hb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_hb());
    }

    // optional int32 left_yb = 6;
    if (has_left_yb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_yb());
    }

    // optional int32 left_hb = 7;
    if (has_left_hb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_hb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildHongBaoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildHongBaoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildHongBaoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildHongBaoProto::MergeFrom(const GuildHongBaoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name_bytes()) {
      set_hero_name_bytes(from.hero_name_bytes());
    }
    if (from.has_hero_race()) {
      set_hero_race(from.hero_race());
    }
    if (from.has_total_yb()) {
      set_total_yb(from.total_yb());
    }
    if (from.has_total_hb()) {
      set_total_hb(from.total_hb());
    }
    if (from.has_left_yb()) {
      set_left_yb(from.left_yb());
    }
    if (from.has_left_hb()) {
      set_left_hb(from.left_hb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildHongBaoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildHongBaoProto::CopyFrom(const GuildHongBaoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildHongBaoProto::IsInitialized() const {

  return true;
}

void GuildHongBaoProto::Swap(GuildHongBaoProto* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_bytes_, other->hero_name_bytes_);
    std::swap(hero_race_, other->hero_race_);
    std::swap(total_yb_, other->total_yb_);
    std::swap(total_hb_, other->total_hb_);
    std::swap(left_yb_, other->left_yb_);
    std::swap(left_hb_, other->left_hb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildHongBaoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildHongBaoProto_descriptor_;
  metadata.reflection = GuildHongBaoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildHongBaoCollectLogProto::kHeroIdFieldNumber;
const int GuildHongBaoCollectLogProto::kHeroNameBytesFieldNumber;
const int GuildHongBaoCollectLogProto::kHeroRaceFieldNumber;
const int GuildHongBaoCollectLogProto::kHbIdxFieldNumber;
const int GuildHongBaoCollectLogProto::kHbYbFieldNumber;
const int GuildHongBaoCollectLogProto::kTimeFieldNumber;
#endif  // !_MSC_VER

GuildHongBaoCollectLogProto::GuildHongBaoCollectLogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildHongBaoCollectLogProto::InitAsDefaultInstance() {
}

GuildHongBaoCollectLogProto::GuildHongBaoCollectLogProto(const GuildHongBaoCollectLogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildHongBaoCollectLogProto::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_race_ = 0;
  hb_idx_ = 0;
  hb_yb_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildHongBaoCollectLogProto::~GuildHongBaoCollectLogProto() {
  SharedDtor();
}

void GuildHongBaoCollectLogProto::SharedDtor() {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_bytes_;
  }
  if (this != default_instance_) {
  }
}

void GuildHongBaoCollectLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildHongBaoCollectLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildHongBaoCollectLogProto_descriptor_;
}

const GuildHongBaoCollectLogProto& GuildHongBaoCollectLogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildHongBaoCollectLogProto* GuildHongBaoCollectLogProto::default_instance_ = NULL;

GuildHongBaoCollectLogProto* GuildHongBaoCollectLogProto::New() const {
  return new GuildHongBaoCollectLogProto;
}

void GuildHongBaoCollectLogProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_LONGLONG(0);
    if (has_hero_name_bytes()) {
      if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_bytes_->clear();
      }
    }
    hero_race_ = 0;
    hb_idx_ = 0;
    hb_yb_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildHongBaoCollectLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_name_bytes;
        break;
      }

      // optional bytes hero_name_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_name_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_race;
        break;
      }

      // optional int32 hero_race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_race_)));
          set_has_hero_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hb_idx;
        break;
      }

      // optional int32 hb_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hb_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hb_idx_)));
          set_has_hb_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hb_yb;
        break;
      }

      // optional int32 hb_yb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hb_yb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hb_yb_)));
          set_has_hb_yb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional int64 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildHongBaoCollectLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hero_id(), output);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hero_name_bytes(), output);
  }

  // optional int32 hero_race = 3;
  if (has_hero_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_race(), output);
  }

  // optional int32 hb_idx = 4;
  if (has_hb_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hb_idx(), output);
  }

  // optional int32 hb_yb = 5;
  if (has_hb_yb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hb_yb(), output);
  }

  // optional int64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildHongBaoCollectLogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hero_id(), target);
  }

  // optional bytes hero_name_bytes = 2;
  if (has_hero_name_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hero_name_bytes(), target);
  }

  // optional int32 hero_race = 3;
  if (has_hero_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_race(), target);
  }

  // optional int32 hb_idx = 4;
  if (has_hb_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hb_idx(), target);
  }

  // optional int32 hb_yb = 5;
  if (has_hb_yb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hb_yb(), target);
  }

  // optional int64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildHongBaoCollectLogProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

    // optional bytes hero_name_bytes = 2;
    if (has_hero_name_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hero_name_bytes());
    }

    // optional int32 hero_race = 3;
    if (has_hero_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_race());
    }

    // optional int32 hb_idx = 4;
    if (has_hb_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hb_idx());
    }

    // optional int32 hb_yb = 5;
    if (has_hb_yb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hb_yb());
    }

    // optional int64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildHongBaoCollectLogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildHongBaoCollectLogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildHongBaoCollectLogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildHongBaoCollectLogProto::MergeFrom(const GuildHongBaoCollectLogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name_bytes()) {
      set_hero_name_bytes(from.hero_name_bytes());
    }
    if (from.has_hero_race()) {
      set_hero_race(from.hero_race());
    }
    if (from.has_hb_idx()) {
      set_hb_idx(from.hb_idx());
    }
    if (from.has_hb_yb()) {
      set_hb_yb(from.hb_yb());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildHongBaoCollectLogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildHongBaoCollectLogProto::CopyFrom(const GuildHongBaoCollectLogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildHongBaoCollectLogProto::IsInitialized() const {

  return true;
}

void GuildHongBaoCollectLogProto::Swap(GuildHongBaoCollectLogProto* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_bytes_, other->hero_name_bytes_);
    std::swap(hero_race_, other->hero_race_);
    std::swap(hb_idx_, other->hb_idx_);
    std::swap(hb_yb_, other->hb_yb_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildHongBaoCollectLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildHongBaoCollectLogProto_descriptor_;
  metadata.reflection = GuildHongBaoCollectLogProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LongXianGuildStatProto::kSceneStatFieldNumber;
const int LongXianGuildStatProto::kSceneResetTimesFieldNumber;
const int LongXianGuildStatProto::kRankMsgFieldNumber;
#endif  // !_MSC_VER

LongXianGuildStatProto::LongXianGuildStatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LongXianGuildStatProto::InitAsDefaultInstance() {
}

LongXianGuildStatProto::LongXianGuildStatProto(const LongXianGuildStatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LongXianGuildStatProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LongXianGuildStatProto::~LongXianGuildStatProto() {
  SharedDtor();
}

void LongXianGuildStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LongXianGuildStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongXianGuildStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LongXianGuildStatProto_descriptor_;
}

const LongXianGuildStatProto& LongXianGuildStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

LongXianGuildStatProto* LongXianGuildStatProto::default_instance_ = NULL;

LongXianGuildStatProto* LongXianGuildStatProto::New() const {
  return new LongXianGuildStatProto;
}

void LongXianGuildStatProto::Clear() {
  scene_stat_.Clear();
  scene_reset_times_.Clear();
  rank_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LongXianGuildStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 scene_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_scene_stat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scene_stat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_scene_stat;
        if (input->ExpectTag(16)) goto parse_scene_reset_times;
        break;
      }

      // repeated int32 scene_reset_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_scene_reset_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scene_reset_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_reset_times;
        if (input->ExpectTag(26)) goto parse_rank_msg;
        break;
      }

      // repeated bytes rank_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rank_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_msg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LongXianGuildStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 scene_stat = 1;
  for (int i = 0; i < this->scene_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->scene_stat(i), output);
  }

  // repeated int32 scene_reset_times = 2;
  for (int i = 0; i < this->scene_reset_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->scene_reset_times(i), output);
  }

  // repeated bytes rank_msg = 3;
  for (int i = 0; i < this->rank_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rank_msg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LongXianGuildStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 scene_stat = 1;
  for (int i = 0; i < this->scene_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->scene_stat(i), target);
  }

  // repeated int32 scene_reset_times = 2;
  for (int i = 0; i < this->scene_reset_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->scene_reset_times(i), target);
  }

  // repeated bytes rank_msg = 3;
  for (int i = 0; i < this->rank_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->rank_msg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LongXianGuildStatProto::ByteSize() const {
  int total_size = 0;

  // repeated int32 scene_stat = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->scene_stat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scene_stat(i));
    }
    total_size += 1 * this->scene_stat_size() + data_size;
  }

  // repeated int32 scene_reset_times = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->scene_reset_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scene_reset_times(i));
    }
    total_size += 1 * this->scene_reset_times_size() + data_size;
  }

  // repeated bytes rank_msg = 3;
  total_size += 1 * this->rank_msg_size();
  for (int i = 0; i < this->rank_msg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rank_msg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongXianGuildStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LongXianGuildStatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LongXianGuildStatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LongXianGuildStatProto::MergeFrom(const LongXianGuildStatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  scene_stat_.MergeFrom(from.scene_stat_);
  scene_reset_times_.MergeFrom(from.scene_reset_times_);
  rank_msg_.MergeFrom(from.rank_msg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LongXianGuildStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongXianGuildStatProto::CopyFrom(const LongXianGuildStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongXianGuildStatProto::IsInitialized() const {

  return true;
}

void LongXianGuildStatProto::Swap(LongXianGuildStatProto* other) {
  if (other != this) {
    scene_stat_.Swap(&other->scene_stat_);
    scene_reset_times_.Swap(&other->scene_reset_times_);
    rank_msg_.Swap(&other->rank_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LongXianGuildStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LongXianGuildStatProto_descriptor_;
  metadata.reflection = LongXianGuildStatProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChengBaProto::kOccupyStatFieldNumber;
const int ChengBaProto::kApplyAttackTimeFieldNumber;
const int ChengBaProto::kWinPrizeCollectHeroIdsFieldNumber;
const int ChengBaProto::kTaxPrizeCollectHeroIdsFieldNumber;
const int ChengBaProto::kLastResetDailyStatTimeFieldNumber;
const int ChengBaProto::kSelfRankKeyFieldNumber;
#endif  // !_MSC_VER

ChengBaProto::ChengBaProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChengBaProto::InitAsDefaultInstance() {
}

ChengBaProto::ChengBaProto(const ChengBaProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChengBaProto::SharedCtor() {
  _cached_size_ = 0;
  last_reset_daily_stat_time_ = GOOGLE_LONGLONG(0);
  self_rank_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChengBaProto::~ChengBaProto() {
  SharedDtor();
}

void ChengBaProto::SharedDtor() {
  if (self_rank_key_ != &::google::protobuf::internal::kEmptyString) {
    delete self_rank_key_;
  }
  if (this != default_instance_) {
  }
}

void ChengBaProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChengBaProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChengBaProto_descriptor_;
}

const ChengBaProto& ChengBaProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ChengBaProto* ChengBaProto::default_instance_ = NULL;

ChengBaProto* ChengBaProto::New() const {
  return new ChengBaProto;
}

void ChengBaProto::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    last_reset_daily_stat_time_ = GOOGLE_LONGLONG(0);
    if (has_self_rank_key()) {
      if (self_rank_key_ != &::google::protobuf::internal::kEmptyString) {
        self_rank_key_->clear();
      }
    }
  }
  occupy_stat_.Clear();
  apply_attack_time_.Clear();
  win_prize_collect_hero_ids_.Clear();
  tax_prize_collect_hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChengBaProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 occupy_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_occupy_stat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_occupy_stat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_occupy_stat;
        if (input->ExpectTag(16)) goto parse_apply_attack_time;
        break;
      }

      // repeated int64 apply_attack_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_attack_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_apply_attack_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_apply_attack_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_attack_time;
        if (input->ExpectTag(26)) goto parse_win_prize_collect_hero_ids;
        break;
      }

      // repeated .app.message.ChengBaPrizeCollectHeroIdsProto win_prize_collect_hero_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_prize_collect_hero_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_win_prize_collect_hero_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_win_prize_collect_hero_ids;
        if (input->ExpectTag(34)) goto parse_tax_prize_collect_hero_ids;
        break;
      }

      // repeated .app.message.ChengBaPrizeCollectHeroIdsProto tax_prize_collect_hero_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tax_prize_collect_hero_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tax_prize_collect_hero_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tax_prize_collect_hero_ids;
        if (input->ExpectTag(40)) goto parse_last_reset_daily_stat_time;
        break;
      }

      // optional int64 last_reset_daily_stat_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_daily_stat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_reset_daily_stat_time_)));
          set_has_last_reset_daily_stat_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_self_rank_key;
        break;
      }

      // optional bytes self_rank_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_rank_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_self_rank_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChengBaProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 occupy_stat = 1;
  for (int i = 0; i < this->occupy_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->occupy_stat(i), output);
  }

  // repeated int64 apply_attack_time = 2;
  for (int i = 0; i < this->apply_attack_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->apply_attack_time(i), output);
  }

  // repeated .app.message.ChengBaPrizeCollectHeroIdsProto win_prize_collect_hero_ids = 3;
  for (int i = 0; i < this->win_prize_collect_hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->win_prize_collect_hero_ids(i), output);
  }

  // repeated .app.message.ChengBaPrizeCollectHeroIdsProto tax_prize_collect_hero_ids = 4;
  for (int i = 0; i < this->tax_prize_collect_hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tax_prize_collect_hero_ids(i), output);
  }

  // optional int64 last_reset_daily_stat_time = 5;
  if (has_last_reset_daily_stat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_reset_daily_stat_time(), output);
  }

  // optional bytes self_rank_key = 6;
  if (has_self_rank_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->self_rank_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChengBaProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 occupy_stat = 1;
  for (int i = 0; i < this->occupy_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->occupy_stat(i), target);
  }

  // repeated int64 apply_attack_time = 2;
  for (int i = 0; i < this->apply_attack_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->apply_attack_time(i), target);
  }

  // repeated .app.message.ChengBaPrizeCollectHeroIdsProto win_prize_collect_hero_ids = 3;
  for (int i = 0; i < this->win_prize_collect_hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->win_prize_collect_hero_ids(i), target);
  }

  // repeated .app.message.ChengBaPrizeCollectHeroIdsProto tax_prize_collect_hero_ids = 4;
  for (int i = 0; i < this->tax_prize_collect_hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tax_prize_collect_hero_ids(i), target);
  }

  // optional int64 last_reset_daily_stat_time = 5;
  if (has_last_reset_daily_stat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_reset_daily_stat_time(), target);
  }

  // optional bytes self_rank_key = 6;
  if (has_self_rank_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->self_rank_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChengBaProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional int64 last_reset_daily_stat_time = 5;
    if (has_last_reset_daily_stat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_reset_daily_stat_time());
    }

    // optional bytes self_rank_key = 6;
    if (has_self_rank_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->self_rank_key());
    }

  }
  // repeated int64 occupy_stat = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->occupy_stat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->occupy_stat(i));
    }
    total_size += 1 * this->occupy_stat_size() + data_size;
  }

  // repeated int64 apply_attack_time = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_attack_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->apply_attack_time(i));
    }
    total_size += 1 * this->apply_attack_time_size() + data_size;
  }

  // repeated .app.message.ChengBaPrizeCollectHeroIdsProto win_prize_collect_hero_ids = 3;
  total_size += 1 * this->win_prize_collect_hero_ids_size();
  for (int i = 0; i < this->win_prize_collect_hero_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->win_prize_collect_hero_ids(i));
  }

  // repeated .app.message.ChengBaPrizeCollectHeroIdsProto tax_prize_collect_hero_ids = 4;
  total_size += 1 * this->tax_prize_collect_hero_ids_size();
  for (int i = 0; i < this->tax_prize_collect_hero_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tax_prize_collect_hero_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChengBaProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChengBaProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChengBaProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChengBaProto::MergeFrom(const ChengBaProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupy_stat_.MergeFrom(from.occupy_stat_);
  apply_attack_time_.MergeFrom(from.apply_attack_time_);
  win_prize_collect_hero_ids_.MergeFrom(from.win_prize_collect_hero_ids_);
  tax_prize_collect_hero_ids_.MergeFrom(from.tax_prize_collect_hero_ids_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_last_reset_daily_stat_time()) {
      set_last_reset_daily_stat_time(from.last_reset_daily_stat_time());
    }
    if (from.has_self_rank_key()) {
      set_self_rank_key(from.self_rank_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChengBaProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChengBaProto::CopyFrom(const ChengBaProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChengBaProto::IsInitialized() const {

  return true;
}

void ChengBaProto::Swap(ChengBaProto* other) {
  if (other != this) {
    occupy_stat_.Swap(&other->occupy_stat_);
    apply_attack_time_.Swap(&other->apply_attack_time_);
    win_prize_collect_hero_ids_.Swap(&other->win_prize_collect_hero_ids_);
    tax_prize_collect_hero_ids_.Swap(&other->tax_prize_collect_hero_ids_);
    std::swap(last_reset_daily_stat_time_, other->last_reset_daily_stat_time_);
    std::swap(self_rank_key_, other->self_rank_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChengBaProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChengBaProto_descriptor_;
  metadata.reflection = ChengBaProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChengBaRankObjProto::kOperatorIdFieldNumber;
const int ChengBaRankObjProto::kServerIdFieldNumber;
const int ChengBaRankObjProto::kGuildNameFieldNumber;
const int ChengBaRankObjProto::kGuildActiveFieldNumber;
const int ChengBaRankObjProto::kGuildFightingAmountFieldNumber;
const int ChengBaRankObjProto::kOccupyStatFieldNumber;
#endif  // !_MSC_VER

ChengBaRankObjProto::ChengBaRankObjProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChengBaRankObjProto::InitAsDefaultInstance() {
}

ChengBaRankObjProto::ChengBaRankObjProto(const ChengBaRankObjProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChengBaRankObjProto::SharedCtor() {
  _cached_size_ = 0;
  operator_id_ = 0;
  server_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_active_ = 0;
  guild_fighting_amount_ = GOOGLE_LONGLONG(0);
  occupy_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChengBaRankObjProto::~ChengBaRankObjProto() {
  SharedDtor();
}

void ChengBaRankObjProto::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void ChengBaRankObjProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChengBaRankObjProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChengBaRankObjProto_descriptor_;
}

const ChengBaRankObjProto& ChengBaRankObjProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ChengBaRankObjProto* ChengBaRankObjProto::default_instance_ = NULL;

ChengBaRankObjProto* ChengBaRankObjProto::New() const {
  return new ChengBaRankObjProto;
}

void ChengBaRankObjProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operator_id_ = 0;
    server_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    guild_active_ = 0;
    guild_fighting_amount_ = GOOGLE_LONGLONG(0);
    occupy_stat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChengBaRankObjProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operator_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator_id_)));
          set_has_operator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_name;
        break;
      }

      // optional bytes guild_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guild_active;
        break;
      }

      // optional int32 guild_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_active_)));
          set_has_guild_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_fighting_amount;
        break;
      }

      // optional int64 guild_fighting_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_fighting_amount_)));
          set_has_guild_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_occupy_stat;
        break;
      }

      // optional int32 occupy_stat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupy_stat_)));
          set_has_occupy_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChengBaRankObjProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 operator_id = 1;
  if (has_operator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operator_id(), output);
  }

  // optional int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // optional bytes guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->guild_name(), output);
  }

  // optional int32 guild_active = 4;
  if (has_guild_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guild_active(), output);
  }

  // optional int64 guild_fighting_amount = 5;
  if (has_guild_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->guild_fighting_amount(), output);
  }

  // optional int32 occupy_stat = 6;
  if (has_occupy_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->occupy_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChengBaRankObjProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 operator_id = 1;
  if (has_operator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operator_id(), target);
  }

  // optional int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // optional bytes guild_name = 3;
  if (has_guild_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->guild_name(), target);
  }

  // optional int32 guild_active = 4;
  if (has_guild_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guild_active(), target);
  }

  // optional int64 guild_fighting_amount = 5;
  if (has_guild_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->guild_fighting_amount(), target);
  }

  // optional int32 occupy_stat = 6;
  if (has_occupy_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->occupy_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChengBaRankObjProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operator_id = 1;
    if (has_operator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_id());
    }

    // optional int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional bytes guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_name());
    }

    // optional int32 guild_active = 4;
    if (has_guild_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_active());
    }

    // optional int64 guild_fighting_amount = 5;
    if (has_guild_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_fighting_amount());
    }

    // optional int32 occupy_stat = 6;
    if (has_occupy_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupy_stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChengBaRankObjProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChengBaRankObjProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChengBaRankObjProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChengBaRankObjProto::MergeFrom(const ChengBaRankObjProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operator_id()) {
      set_operator_id(from.operator_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_guild_active()) {
      set_guild_active(from.guild_active());
    }
    if (from.has_guild_fighting_amount()) {
      set_guild_fighting_amount(from.guild_fighting_amount());
    }
    if (from.has_occupy_stat()) {
      set_occupy_stat(from.occupy_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChengBaRankObjProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChengBaRankObjProto::CopyFrom(const ChengBaRankObjProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChengBaRankObjProto::IsInitialized() const {

  return true;
}

void ChengBaRankObjProto::Swap(ChengBaRankObjProto* other) {
  if (other != this) {
    std::swap(operator_id_, other->operator_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_active_, other->guild_active_);
    std::swap(guild_fighting_amount_, other->guild_fighting_amount_);
    std::swap(occupy_stat_, other->occupy_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChengBaRankObjProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChengBaRankObjProto_descriptor_;
  metadata.reflection = ChengBaRankObjProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChengBaPrizeCollectHeroIdsProto::kHeroIdFieldNumber;
#endif  // !_MSC_VER

ChengBaPrizeCollectHeroIdsProto::ChengBaPrizeCollectHeroIdsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChengBaPrizeCollectHeroIdsProto::InitAsDefaultInstance() {
}

ChengBaPrizeCollectHeroIdsProto::ChengBaPrizeCollectHeroIdsProto(const ChengBaPrizeCollectHeroIdsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChengBaPrizeCollectHeroIdsProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChengBaPrizeCollectHeroIdsProto::~ChengBaPrizeCollectHeroIdsProto() {
  SharedDtor();
}

void ChengBaPrizeCollectHeroIdsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChengBaPrizeCollectHeroIdsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChengBaPrizeCollectHeroIdsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChengBaPrizeCollectHeroIdsProto_descriptor_;
}

const ChengBaPrizeCollectHeroIdsProto& ChengBaPrizeCollectHeroIdsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ChengBaPrizeCollectHeroIdsProto* ChengBaPrizeCollectHeroIdsProto::default_instance_ = NULL;

ChengBaPrizeCollectHeroIdsProto* ChengBaPrizeCollectHeroIdsProto::New() const {
  return new ChengBaPrizeCollectHeroIdsProto;
}

void ChengBaPrizeCollectHeroIdsProto::Clear() {
  hero_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChengBaPrizeCollectHeroIdsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hero_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChengBaPrizeCollectHeroIdsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 hero_id = 1;
  for (int i = 0; i < this->hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->hero_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChengBaPrizeCollectHeroIdsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 hero_id = 1;
  for (int i = 0; i < this->hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->hero_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChengBaPrizeCollectHeroIdsProto::ByteSize() const {
  int total_size = 0;

  // repeated int64 hero_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->hero_id(i));
    }
    total_size += 1 * this->hero_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChengBaPrizeCollectHeroIdsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChengBaPrizeCollectHeroIdsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChengBaPrizeCollectHeroIdsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChengBaPrizeCollectHeroIdsProto::MergeFrom(const ChengBaPrizeCollectHeroIdsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_id_.MergeFrom(from.hero_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChengBaPrizeCollectHeroIdsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChengBaPrizeCollectHeroIdsProto::CopyFrom(const ChengBaPrizeCollectHeroIdsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChengBaPrizeCollectHeroIdsProto::IsInitialized() const {

  return true;
}

void ChengBaPrizeCollectHeroIdsProto::Swap(ChengBaPrizeCollectHeroIdsProto* other) {
  if (other != this) {
    hero_id_.Swap(&other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChengBaPrizeCollectHeroIdsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChengBaPrizeCollectHeroIdsProto_descriptor_;
  metadata.reflection = ChengBaPrizeCollectHeroIdsProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDungeonBossKilledProto::kSceneIdBossSequenceFieldNumber;
const int GuildDungeonBossKilledProto::kBossDeadTimeFieldNumber;
#endif  // !_MSC_VER

GuildDungeonBossKilledProto::GuildDungeonBossKilledProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDungeonBossKilledProto::InitAsDefaultInstance() {
}

GuildDungeonBossKilledProto::GuildDungeonBossKilledProto(const GuildDungeonBossKilledProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDungeonBossKilledProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDungeonBossKilledProto::~GuildDungeonBossKilledProto() {
  SharedDtor();
}

void GuildDungeonBossKilledProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDungeonBossKilledProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDungeonBossKilledProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDungeonBossKilledProto_descriptor_;
}

const GuildDungeonBossKilledProto& GuildDungeonBossKilledProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildDungeonBossKilledProto* GuildDungeonBossKilledProto::default_instance_ = NULL;

GuildDungeonBossKilledProto* GuildDungeonBossKilledProto::New() const {
  return new GuildDungeonBossKilledProto;
}

void GuildDungeonBossKilledProto::Clear() {
  scene_id_boss_sequence_.Clear();
  boss_dead_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDungeonBossKilledProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 scene_id_boss_sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id_boss_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_scene_id_boss_sequence())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_scene_id_boss_sequence())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_scene_id_boss_sequence;
        if (input->ExpectTag(16)) goto parse_boss_dead_time;
        break;
      }

      // repeated int64 boss_dead_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_boss_dead_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_boss_dead_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_dead_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildDungeonBossKilledProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 scene_id_boss_sequence = 1;
  for (int i = 0; i < this->scene_id_boss_sequence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->scene_id_boss_sequence(i), output);
  }

  // repeated int64 boss_dead_time = 2;
  for (int i = 0; i < this->boss_dead_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->boss_dead_time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDungeonBossKilledProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 scene_id_boss_sequence = 1;
  for (int i = 0; i < this->scene_id_boss_sequence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->scene_id_boss_sequence(i), target);
  }

  // repeated int64 boss_dead_time = 2;
  for (int i = 0; i < this->boss_dead_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->boss_dead_time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDungeonBossKilledProto::ByteSize() const {
  int total_size = 0;

  // repeated int64 scene_id_boss_sequence = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->scene_id_boss_sequence_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->scene_id_boss_sequence(i));
    }
    total_size += 1 * this->scene_id_boss_sequence_size() + data_size;
  }

  // repeated int64 boss_dead_time = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_dead_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->boss_dead_time(i));
    }
    total_size += 1 * this->boss_dead_time_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDungeonBossKilledProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDungeonBossKilledProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDungeonBossKilledProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDungeonBossKilledProto::MergeFrom(const GuildDungeonBossKilledProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  scene_id_boss_sequence_.MergeFrom(from.scene_id_boss_sequence_);
  boss_dead_time_.MergeFrom(from.boss_dead_time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDungeonBossKilledProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDungeonBossKilledProto::CopyFrom(const GuildDungeonBossKilledProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDungeonBossKilledProto::IsInitialized() const {

  return true;
}

void GuildDungeonBossKilledProto::Swap(GuildDungeonBossKilledProto* other) {
  if (other != this) {
    scene_id_boss_sequence_.Swap(&other->scene_id_boss_sequence_);
    boss_dead_time_.Swap(&other->boss_dead_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDungeonBossKilledProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDungeonBossKilledProto_descriptor_;
  metadata.reflection = GuildDungeonBossKilledProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeFastCrossProto::kSequenceFieldNumber;
const int ChallengeFastCrossProto::kIdFieldNumber;
const int ChallengeFastCrossProto::kNameFieldNumber;
const int ChallengeFastCrossProto::kUseTimeFieldNumber;
#endif  // !_MSC_VER

ChallengeFastCrossProto::ChallengeFastCrossProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallengeFastCrossProto::InitAsDefaultInstance() {
}

ChallengeFastCrossProto::ChallengeFastCrossProto(const ChallengeFastCrossProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengeFastCrossProto::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeFastCrossProto::~ChallengeFastCrossProto() {
  SharedDtor();
}

void ChallengeFastCrossProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChallengeFastCrossProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeFastCrossProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeFastCrossProto_descriptor_;
}

const ChallengeFastCrossProto& ChallengeFastCrossProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ChallengeFastCrossProto* ChallengeFastCrossProto::default_instance_ = NULL;

ChallengeFastCrossProto* ChallengeFastCrossProto::New() const {
  return new ChallengeFastCrossProto;
}

void ChallengeFastCrossProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    use_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeFastCrossProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_time;
        break;
      }

      // optional int32 use_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallengeFastCrossProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 use_time = 4;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->use_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallengeFastCrossProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 use_time = 4;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->use_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallengeFastCrossProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 use_time = 4;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeFastCrossProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeFastCrossProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeFastCrossProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeFastCrossProto::MergeFrom(const ChallengeFastCrossProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeFastCrossProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeFastCrossProto::CopyFrom(const ChallengeFastCrossProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeFastCrossProto::IsInitialized() const {

  return true;
}

void ChallengeFastCrossProto::Swap(ChallengeFastCrossProto* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(use_time_, other->use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeFastCrossProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeFastCrossProto_descriptor_;
  metadata.reflection = ChallengeFastCrossProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TongTianTaFastCrossProto::kSequenceFieldNumber;
const int TongTianTaFastCrossProto::kIdFieldNumber;
const int TongTianTaFastCrossProto::kNameFieldNumber;
const int TongTianTaFastCrossProto::kUseTimeFieldNumber;
#endif  // !_MSC_VER

TongTianTaFastCrossProto::TongTianTaFastCrossProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TongTianTaFastCrossProto::InitAsDefaultInstance() {
}

TongTianTaFastCrossProto::TongTianTaFastCrossProto(const TongTianTaFastCrossProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TongTianTaFastCrossProto::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongTianTaFastCrossProto::~TongTianTaFastCrossProto() {
  SharedDtor();
}

void TongTianTaFastCrossProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TongTianTaFastCrossProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TongTianTaFastCrossProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TongTianTaFastCrossProto_descriptor_;
}

const TongTianTaFastCrossProto& TongTianTaFastCrossProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

TongTianTaFastCrossProto* TongTianTaFastCrossProto::default_instance_ = NULL;

TongTianTaFastCrossProto* TongTianTaFastCrossProto::New() const {
  return new TongTianTaFastCrossProto;
}

void TongTianTaFastCrossProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    use_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TongTianTaFastCrossProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_time;
        break;
      }

      // optional int32 use_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TongTianTaFastCrossProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 use_time = 4;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->use_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TongTianTaFastCrossProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 use_time = 4;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->use_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TongTianTaFastCrossProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 use_time = 4;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongTianTaFastCrossProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TongTianTaFastCrossProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TongTianTaFastCrossProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TongTianTaFastCrossProto::MergeFrom(const TongTianTaFastCrossProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TongTianTaFastCrossProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TongTianTaFastCrossProto::CopyFrom(const TongTianTaFastCrossProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongTianTaFastCrossProto::IsInitialized() const {

  return true;
}

void TongTianTaFastCrossProto::Swap(TongTianTaFastCrossProto* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(use_time_, other->use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TongTianTaFastCrossProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TongTianTaFastCrossProto_descriptor_;
  metadata.reflection = TongTianTaFastCrossProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientNewsProto::kNewsFieldNumber;
#endif  // !_MSC_VER

ClientNewsProto::ClientNewsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientNewsProto::InitAsDefaultInstance() {
}

ClientNewsProto::ClientNewsProto(const ClientNewsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientNewsProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientNewsProto::~ClientNewsProto() {
  SharedDtor();
}

void ClientNewsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientNewsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientNewsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNewsProto_descriptor_;
}

const ClientNewsProto& ClientNewsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ClientNewsProto* ClientNewsProto::default_instance_ = NULL;

ClientNewsProto* ClientNewsProto::New() const {
  return new ClientNewsProto;
}

void ClientNewsProto::Clear() {
  news_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientNewsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes news = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_news:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_news()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_news;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientNewsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes news = 1;
  for (int i = 0; i < this->news_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->news(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientNewsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes news = 1;
  for (int i = 0; i < this->news_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->news(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientNewsProto::ByteSize() const {
  int total_size = 0;

  // repeated bytes news = 1;
  total_size += 1 * this->news_size();
  for (int i = 0; i < this->news_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->news(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientNewsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientNewsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientNewsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientNewsProto::MergeFrom(const ClientNewsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  news_.MergeFrom(from.news_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientNewsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientNewsProto::CopyFrom(const ClientNewsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientNewsProto::IsInitialized() const {

  return true;
}

void ClientNewsProto::Swap(ClientNewsProto* other) {
  if (other != this) {
    news_.Swap(&other->news_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientNewsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientNewsProto_descriptor_;
  metadata.reflection = ClientNewsProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildListProto::kGuildFieldNumber;
#endif  // !_MSC_VER

ClientGuildListProto::ClientGuildListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientGuildListProto::InitAsDefaultInstance() {
}

ClientGuildListProto::ClientGuildListProto(const ClientGuildListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientGuildListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildListProto::~ClientGuildListProto() {
  SharedDtor();
}

void ClientGuildListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientGuildListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildListProto_descriptor_;
}

const ClientGuildListProto& ClientGuildListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ClientGuildListProto* ClientGuildListProto::default_instance_ = NULL;

ClientGuildListProto* ClientGuildListProto::New() const {
  return new ClientGuildListProto;
}

void ClientGuildListProto::Clear() {
  guild_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.GuildInListProto guild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guild;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientGuildListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.GuildInListProto guild = 1;
  for (int i = 0; i < this->guild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientGuildListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.GuildInListProto guild = 1;
  for (int i = 0; i < this->guild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientGuildListProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.GuildInListProto guild = 1;
  total_size += 1 * this->guild_size();
  for (int i = 0; i < this->guild_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildListProto::MergeFrom(const ClientGuildListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_.MergeFrom(from.guild_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildListProto::CopyFrom(const ClientGuildListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildListProto::IsInitialized() const {

  return true;
}

void ClientGuildListProto::Swap(ClientGuildListProto* other) {
  if (other != this) {
    guild_.Swap(&other->guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildListProto_descriptor_;
  metadata.reflection = ClientGuildListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInListProto::kNameFieldNumber;
const int GuildInListProto::kFlagNameFieldNumber;
const int GuildInListProto::kFlagLevelFieldNumber;
const int GuildInListProto::kIsAutoAcceptJoinRequestFieldNumber;
const int GuildInListProto::kHeroCountFieldNumber;
const int GuildInListProto::kMaxHeroCountFieldNumber;
const int GuildInListProto::kLeaderIdFieldNumber;
const int GuildInListProto::kLeaderNameFieldNumber;
const int GuildInListProto::kLeaderOnlineFieldNumber;
const int GuildInListProto::kLeaderLevelFieldNumber;
const int GuildInListProto::kViceLeaderNameFieldNumber;
const int GuildInListProto::kViceLeaderOnlineFieldNumber;
const int GuildInListProto::kViceLeaderLevelFieldNumber;
const int GuildInListProto::kTotalFightAmountFieldNumber;
const int GuildInListProto::kCreateTimeFieldNumber;
const int GuildInListProto::kOperatorIdFieldNumber;
const int GuildInListProto::kServerIdFieldNumber;
const int GuildInListProto::kTerritoryMasterCountFieldNumber;
#endif  // !_MSC_VER

GuildInListProto::GuildInListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildInListProto::InitAsDefaultInstance() {
}

GuildInListProto::GuildInListProto(const GuildInListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInListProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_level_ = 0;
  is_auto_accept_join_request_ = false;
  hero_count_ = 0;
  max_hero_count_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_online_ = false;
  leader_level_ = 0;
  vice_leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vice_leader_online_ = false;
  vice_leader_level_ = 0;
  total_fight_amount_ = GOOGLE_LONGLONG(0);
  create_time_ = GOOGLE_LONGLONG(0);
  operator_id_ = 0;
  server_id_ = 0;
  territory_master_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInListProto::~GuildInListProto() {
  SharedDtor();
}

void GuildInListProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (vice_leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete vice_leader_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildInListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInListProto_descriptor_;
}

const GuildInListProto& GuildInListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildInListProto* GuildInListProto::default_instance_ = NULL;

GuildInListProto* GuildInListProto::New() const {
  return new GuildInListProto;
}

void GuildInListProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_flag_name()) {
      if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
        flag_name_->clear();
      }
    }
    flag_level_ = 0;
    is_auto_accept_join_request_ = false;
    hero_count_ = 0;
    max_hero_count_ = 0;
    leader_id_ = GOOGLE_LONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leader_online_ = false;
    leader_level_ = 0;
    if (has_vice_leader_name()) {
      if (vice_leader_name_ != &::google::protobuf::internal::kEmptyString) {
        vice_leader_name_->clear();
      }
    }
    vice_leader_online_ = false;
    vice_leader_level_ = 0;
    total_fight_amount_ = GOOGLE_LONGLONG(0);
    create_time_ = GOOGLE_LONGLONG(0);
    operator_id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    server_id_ = 0;
    territory_master_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flag_name;
        break;
      }

      // optional bytes flag_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_flag_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_level;
        break;
      }

      // optional int32 flag_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_level_)));
          set_has_flag_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_auto_accept_join_request;
        break;
      }

      // optional bool is_auto_accept_join_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_accept_join_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_accept_join_request_)));
          set_has_is_auto_accept_join_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_count;
        break;
      }

      // optional int32 hero_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_count_)));
          set_has_hero_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_hero_count;
        break;
      }

      // optional int32 max_hero_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hero_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hero_count_)));
          set_has_max_hero_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_leader_online;
        break;
      }

      // optional bool leader_online = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_online_)));
          set_has_leader_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vice_leader_name;
        break;
      }

      // optional bytes vice_leader_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vice_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vice_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vice_leader_online;
        break;
      }

      // optional bool vice_leader_online = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vice_leader_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vice_leader_online_)));
          set_has_vice_leader_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_fight_amount;
        break;
      }

      // optional int64 total_fight_amount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_fight_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_fight_amount_)));
          set_has_total_fight_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_leader_level;
        break;
      }

      // optional int32 leader_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_level_)));
          set_has_leader_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vice_leader_level;
        break;
      }

      // optional int32 vice_leader_level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vice_leader_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vice_leader_level_)));
          set_has_vice_leader_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_operator_id;
        break;
      }

      // optional int32 operator_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator_id_)));
          set_has_operator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_territory_master_count;
        break;
      }

      // optional int32 territory_master_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_territory_master_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &territory_master_count_)));
          set_has_territory_master_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_leader_id;
        break;
      }

      // optional int64 leader_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional bytes flag_name = 2;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->flag_name(), output);
  }

  // optional int32 flag_level = 3;
  if (has_flag_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag_level(), output);
  }

  // optional bool is_auto_accept_join_request = 4;
  if (has_is_auto_accept_join_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_auto_accept_join_request(), output);
  }

  // optional int32 hero_count = 5;
  if (has_hero_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hero_count(), output);
  }

  // optional int32 max_hero_count = 6;
  if (has_max_hero_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_hero_count(), output);
  }

  // optional bytes leader_name = 7;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->leader_name(), output);
  }

  // optional bool leader_online = 8;
  if (has_leader_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->leader_online(), output);
  }

  // optional bytes vice_leader_name = 9;
  if (has_vice_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->vice_leader_name(), output);
  }

  // optional bool vice_leader_online = 10;
  if (has_vice_leader_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->vice_leader_online(), output);
  }

  // optional int64 total_fight_amount = 11;
  if (has_total_fight_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->total_fight_amount(), output);
  }

  // optional int64 create_time = 12;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->create_time(), output);
  }

  // optional int32 leader_level = 13;
  if (has_leader_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->leader_level(), output);
  }

  // optional int32 vice_leader_level = 14;
  if (has_vice_leader_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->vice_leader_level(), output);
  }

  // optional int32 operator_id = 15;
  if (has_operator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->operator_id(), output);
  }

  // optional int32 server_id = 16;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->server_id(), output);
  }

  // optional int32 territory_master_count = 17;
  if (has_territory_master_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->territory_master_count(), output);
  }

  // optional int64 leader_id = 18;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->leader_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildInListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes flag_name = 2;
  if (has_flag_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->flag_name(), target);
  }

  // optional int32 flag_level = 3;
  if (has_flag_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag_level(), target);
  }

  // optional bool is_auto_accept_join_request = 4;
  if (has_is_auto_accept_join_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_auto_accept_join_request(), target);
  }

  // optional int32 hero_count = 5;
  if (has_hero_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hero_count(), target);
  }

  // optional int32 max_hero_count = 6;
  if (has_max_hero_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_hero_count(), target);
  }

  // optional bytes leader_name = 7;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->leader_name(), target);
  }

  // optional bool leader_online = 8;
  if (has_leader_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->leader_online(), target);
  }

  // optional bytes vice_leader_name = 9;
  if (has_vice_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->vice_leader_name(), target);
  }

  // optional bool vice_leader_online = 10;
  if (has_vice_leader_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->vice_leader_online(), target);
  }

  // optional int64 total_fight_amount = 11;
  if (has_total_fight_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->total_fight_amount(), target);
  }

  // optional int64 create_time = 12;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->create_time(), target);
  }

  // optional int32 leader_level = 13;
  if (has_leader_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->leader_level(), target);
  }

  // optional int32 vice_leader_level = 14;
  if (has_vice_leader_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->vice_leader_level(), target);
  }

  // optional int32 operator_id = 15;
  if (has_operator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->operator_id(), target);
  }

  // optional int32 server_id = 16;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->server_id(), target);
  }

  // optional int32 territory_master_count = 17;
  if (has_territory_master_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->territory_master_count(), target);
  }

  // optional int64 leader_id = 18;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->leader_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildInListProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes flag_name = 2;
    if (has_flag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->flag_name());
    }

    // optional int32 flag_level = 3;
    if (has_flag_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_level());
    }

    // optional bool is_auto_accept_join_request = 4;
    if (has_is_auto_accept_join_request()) {
      total_size += 1 + 1;
    }

    // optional int32 hero_count = 5;
    if (has_hero_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_count());
    }

    // optional int32 max_hero_count = 6;
    if (has_max_hero_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hero_count());
    }

    // optional int64 leader_id = 18;
    if (has_leader_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }

    // optional bytes leader_name = 7;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool leader_online = 8;
    if (has_leader_online()) {
      total_size += 1 + 1;
    }

    // optional int32 leader_level = 13;
    if (has_leader_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_level());
    }

    // optional bytes vice_leader_name = 9;
    if (has_vice_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vice_leader_name());
    }

    // optional bool vice_leader_online = 10;
    if (has_vice_leader_online()) {
      total_size += 1 + 1;
    }

    // optional int32 vice_leader_level = 14;
    if (has_vice_leader_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vice_leader_level());
    }

    // optional int64 total_fight_amount = 11;
    if (has_total_fight_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_fight_amount());
    }

    // optional int64 create_time = 12;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional int32 operator_id = 15;
    if (has_operator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 server_id = 16;
    if (has_server_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 territory_master_count = 17;
    if (has_territory_master_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->territory_master_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInListProto::MergeFrom(const GuildInListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag_name()) {
      set_flag_name(from.flag_name());
    }
    if (from.has_flag_level()) {
      set_flag_level(from.flag_level());
    }
    if (from.has_is_auto_accept_join_request()) {
      set_is_auto_accept_join_request(from.is_auto_accept_join_request());
    }
    if (from.has_hero_count()) {
      set_hero_count(from.hero_count());
    }
    if (from.has_max_hero_count()) {
      set_max_hero_count(from.max_hero_count());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leader_online()) {
      set_leader_online(from.leader_online());
    }
    if (from.has_leader_level()) {
      set_leader_level(from.leader_level());
    }
    if (from.has_vice_leader_name()) {
      set_vice_leader_name(from.vice_leader_name());
    }
    if (from.has_vice_leader_online()) {
      set_vice_leader_online(from.vice_leader_online());
    }
    if (from.has_vice_leader_level()) {
      set_vice_leader_level(from.vice_leader_level());
    }
    if (from.has_total_fight_amount()) {
      set_total_fight_amount(from.total_fight_amount());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_operator_id()) {
      set_operator_id(from.operator_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_territory_master_count()) {
      set_territory_master_count(from.territory_master_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInListProto::CopyFrom(const GuildInListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInListProto::IsInitialized() const {

  return true;
}

void GuildInListProto::Swap(GuildInListProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(flag_name_, other->flag_name_);
    std::swap(flag_level_, other->flag_level_);
    std::swap(is_auto_accept_join_request_, other->is_auto_accept_join_request_);
    std::swap(hero_count_, other->hero_count_);
    std::swap(max_hero_count_, other->max_hero_count_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(leader_online_, other->leader_online_);
    std::swap(leader_level_, other->leader_level_);
    std::swap(vice_leader_name_, other->vice_leader_name_);
    std::swap(vice_leader_online_, other->vice_leader_online_);
    std::swap(vice_leader_level_, other->vice_leader_level_);
    std::swap(total_fight_amount_, other->total_fight_amount_);
    std::swap(create_time_, other->create_time_);
    std::swap(operator_id_, other->operator_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(territory_master_count_, other->territory_master_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInListProto_descriptor_;
  metadata.reflection = GuildInListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBossCard::kWeeklyCallCountFieldNumber;
const int GuildBossCard::kGrowUpPointFieldNumber;
const int GuildBossCard::kCurrentCardIdFieldNumber;
const int GuildBossCard::kCurrentCallingCardIdFieldNumber;
#endif  // !_MSC_VER

GuildBossCard::GuildBossCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBossCard::InitAsDefaultInstance() {
}

GuildBossCard::GuildBossCard(const GuildBossCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBossCard::SharedCtor() {
  _cached_size_ = 0;
  weekly_call_count_ = 0;
  grow_up_point_ = 0;
  current_card_id_ = 0;
  current_calling_card_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBossCard::~GuildBossCard() {
  SharedDtor();
}

void GuildBossCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBossCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBossCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBossCard_descriptor_;
}

const GuildBossCard& GuildBossCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildBossCard* GuildBossCard::default_instance_ = NULL;

GuildBossCard* GuildBossCard::New() const {
  return new GuildBossCard;
}

void GuildBossCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weekly_call_count_ = 0;
    grow_up_point_ = 0;
    current_card_id_ = 0;
    current_calling_card_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBossCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weekly_call_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekly_call_count_)));
          set_has_weekly_call_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grow_up_point;
        break;
      }

      // optional int32 grow_up_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grow_up_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_up_point_)));
          set_has_grow_up_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_card_id;
        break;
      }

      // optional int32 current_card_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_card_id_)));
          set_has_current_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_calling_card_id;
        break;
      }

      // optional int32 current_calling_card_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_calling_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_calling_card_id_)));
          set_has_current_calling_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBossCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weekly_call_count = 1;
  if (has_weekly_call_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weekly_call_count(), output);
  }

  // optional int32 grow_up_point = 2;
  if (has_grow_up_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grow_up_point(), output);
  }

  // optional int32 current_card_id = 3;
  if (has_current_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_card_id(), output);
  }

  // optional int32 current_calling_card_id = 4;
  if (has_current_calling_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_calling_card_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBossCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weekly_call_count = 1;
  if (has_weekly_call_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weekly_call_count(), target);
  }

  // optional int32 grow_up_point = 2;
  if (has_grow_up_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grow_up_point(), target);
  }

  // optional int32 current_card_id = 3;
  if (has_current_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_card_id(), target);
  }

  // optional int32 current_calling_card_id = 4;
  if (has_current_calling_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_calling_card_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBossCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weekly_call_count = 1;
    if (has_weekly_call_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekly_call_count());
    }

    // optional int32 grow_up_point = 2;
    if (has_grow_up_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_up_point());
    }

    // optional int32 current_card_id = 3;
    if (has_current_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_card_id());
    }

    // optional int32 current_calling_card_id = 4;
    if (has_current_calling_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_calling_card_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBossCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBossCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBossCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBossCard::MergeFrom(const GuildBossCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weekly_call_count()) {
      set_weekly_call_count(from.weekly_call_count());
    }
    if (from.has_grow_up_point()) {
      set_grow_up_point(from.grow_up_point());
    }
    if (from.has_current_card_id()) {
      set_current_card_id(from.current_card_id());
    }
    if (from.has_current_calling_card_id()) {
      set_current_calling_card_id(from.current_calling_card_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBossCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBossCard::CopyFrom(const GuildBossCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBossCard::IsInitialized() const {

  return true;
}

void GuildBossCard::Swap(GuildBossCard* other) {
  if (other != this) {
    std::swap(weekly_call_count_, other->weekly_call_count_);
    std::swap(grow_up_point_, other->grow_up_point_);
    std::swap(current_card_id_, other->current_card_id_);
    std::swap(current_calling_card_id_, other->current_calling_card_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBossCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBossCard_descriptor_;
  metadata.reflection = GuildBossCard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
