// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SceneTeamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneTeamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfoProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_team_2eproto() {
  protobuf_AddDesc_team_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "team.proto");
  GOOGLE_CHECK(file != NULL);
  SceneTeamProto_descriptor_ = file->message_type(0);
  static const int SceneTeamProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamProto, teams_),
  };
  SceneTeamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneTeamProto_descriptor_,
      SceneTeamProto::default_instance_,
      SceneTeamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneTeamProto));
  TeamInfoProto_descriptor_ = file->message_type(1);
  static const int TeamInfoProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, hero_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, fight_amount_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, is_auto_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, has_pwd_),
  };
  TeamInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfoProto_descriptor_,
      TeamInfoProto::default_instance_,
      TeamInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfoProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_team_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneTeamProto_descriptor_, &SceneTeamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfoProto_descriptor_, &TeamInfoProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_team_2eproto() {
  delete SceneTeamProto::default_instance_;
  delete SceneTeamProto_reflection_;
  delete TeamInfoProto::default_instance_;
  delete TeamInfoProto_reflection_;
}

void protobuf_AddDesc_team_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nteam.proto\022\013app.message\";\n\016SceneTeamPr"
    "oto\022)\n\005teams\030\001 \003(\0132\032.app.message.TeamInf"
    "oProto\"\244\001\n\rTeamInfoProto\022\017\n\007team_id\030\001 \001("
    "\005\022\022\n\nhero_count\030\002 \001(\005\022\021\n\tleader_id\030\003 \001(\003"
    "\022\023\n\013leader_name\030\004 \001(\t\022\036\n\026fight_amount_th"
    "reshold\030\005 \001(\005\022\025\n\ris_auto_start\030\006 \001(\010\022\017\n\007"
    "has_pwd\030\007 \001(\010B%\n\024app.cluster.protobufB\013T"
    "eamContentH\001", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "team.proto", &protobuf_RegisterTypes);
  SceneTeamProto::default_instance_ = new SceneTeamProto();
  TeamInfoProto::default_instance_ = new TeamInfoProto();
  SceneTeamProto::default_instance_->InitAsDefaultInstance();
  TeamInfoProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_team_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_team_2eproto {
  StaticDescriptorInitializer_team_2eproto() {
    protobuf_AddDesc_team_2eproto();
  }
} static_descriptor_initializer_team_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SceneTeamProto::kTeamsFieldNumber;
#endif  // !_MSC_VER

SceneTeamProto::SceneTeamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneTeamProto::InitAsDefaultInstance() {
}

SceneTeamProto::SceneTeamProto(const SceneTeamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneTeamProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneTeamProto::~SceneTeamProto() {
  SharedDtor();
}

void SceneTeamProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneTeamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneTeamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneTeamProto_descriptor_;
}

const SceneTeamProto& SceneTeamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

SceneTeamProto* SceneTeamProto::default_instance_ = NULL;

SceneTeamProto* SceneTeamProto::New() const {
  return new SceneTeamProto;
}

void SceneTeamProto::Clear() {
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneTeamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .app.message.TeamInfoProto teams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneTeamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .app.message.TeamInfoProto teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneTeamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .app.message.TeamInfoProto teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneTeamProto::ByteSize() const {
  int total_size = 0;

  // repeated .app.message.TeamInfoProto teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneTeamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneTeamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneTeamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneTeamProto::MergeFrom(const SceneTeamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneTeamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneTeamProto::CopyFrom(const SceneTeamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneTeamProto::IsInitialized() const {

  return true;
}

void SceneTeamProto::Swap(SceneTeamProto* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneTeamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneTeamProto_descriptor_;
  metadata.reflection = SceneTeamProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfoProto::kTeamIdFieldNumber;
const int TeamInfoProto::kHeroCountFieldNumber;
const int TeamInfoProto::kLeaderIdFieldNumber;
const int TeamInfoProto::kLeaderNameFieldNumber;
const int TeamInfoProto::kFightAmountThresholdFieldNumber;
const int TeamInfoProto::kIsAutoStartFieldNumber;
const int TeamInfoProto::kHasPwdFieldNumber;
#endif  // !_MSC_VER

TeamInfoProto::TeamInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfoProto::InitAsDefaultInstance() {
}

TeamInfoProto::TeamInfoProto(const TeamInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfoProto::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  hero_count_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_amount_threshold_ = 0;
  is_auto_start_ = false;
  has_pwd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfoProto::~TeamInfoProto() {
  SharedDtor();
}

void TeamInfoProto::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfoProto_descriptor_;
}

const TeamInfoProto& TeamInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

TeamInfoProto* TeamInfoProto::default_instance_ = NULL;

TeamInfoProto* TeamInfoProto::New() const {
  return new TeamInfoProto;
}

void TeamInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    hero_count_ = 0;
    leader_id_ = GOOGLE_LONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    fight_amount_threshold_ = 0;
    is_auto_start_ = false;
    has_pwd_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_count;
        break;
      }

      // optional int32 hero_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_count_)));
          set_has_hero_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_id;
        break;
      }

      // optional int64 leader_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leader_name;
        break;
      }

      // optional string leader_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight_amount_threshold;
        break;
      }

      // optional int32 fight_amount_threshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_amount_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_amount_threshold_)));
          set_has_fight_amount_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_auto_start;
        break;
      }

      // optional bool is_auto_start = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_start_)));
          set_has_is_auto_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_pwd;
        break;
      }

      // optional bool has_pwd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pwd_)));
          set_has_has_pwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // optional int32 hero_count = 2;
  if (has_hero_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_count(), output);
  }

  // optional int64 leader_id = 3;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->leader_id(), output);
  }

  // optional string leader_name = 4;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->leader_name(), output);
  }

  // optional int32 fight_amount_threshold = 5;
  if (has_fight_amount_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fight_amount_threshold(), output);
  }

  // optional bool is_auto_start = 6;
  if (has_is_auto_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_auto_start(), output);
  }

  // optional bool has_pwd = 7;
  if (has_has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // optional int32 hero_count = 2;
  if (has_hero_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_count(), target);
  }

  // optional int64 leader_id = 3;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->leader_id(), target);
  }

  // optional string leader_name = 4;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leader_name(), target);
  }

  // optional int32 fight_amount_threshold = 5;
  if (has_fight_amount_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fight_amount_threshold(), target);
  }

  // optional bool is_auto_start = 6;
  if (has_is_auto_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_auto_start(), target);
  }

  // optional bool has_pwd = 7;
  if (has_has_pwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional int32 hero_count = 2;
    if (has_hero_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_count());
    }

    // optional int64 leader_id = 3;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }

    // optional string leader_name = 4;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }

    // optional int32 fight_amount_threshold = 5;
    if (has_fight_amount_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_amount_threshold());
    }

    // optional bool is_auto_start = 6;
    if (has_is_auto_start()) {
      total_size += 1 + 1;
    }

    // optional bool has_pwd = 7;
    if (has_has_pwd()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfoProto::MergeFrom(const TeamInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_hero_count()) {
      set_hero_count(from.hero_count());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_fight_amount_threshold()) {
      set_fight_amount_threshold(from.fight_amount_threshold());
    }
    if (from.has_is_auto_start()) {
      set_is_auto_start(from.is_auto_start());
    }
    if (from.has_has_pwd()) {
      set_has_pwd(from.has_pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfoProto::CopyFrom(const TeamInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfoProto::IsInitialized() const {

  return true;
}

void TeamInfoProto::Swap(TeamInfoProto* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(hero_count_, other->hero_count_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(fight_amount_threshold_, other->fight_amount_threshold_);
    std::swap(is_auto_start_, other->is_auto_start_);
    std::swap(has_pwd_, other->has_pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfoProto_descriptor_;
  metadata.reflection = TeamInfoProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
