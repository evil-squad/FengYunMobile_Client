// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daily_lucky_wheel.proto

#ifndef PROTOBUF_daily_5flucky_5fwheel_2eproto__INCLUDED
#define PROTOBUF_daily_5flucky_5fwheel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "goods.pb.h"
#include "config.pb.h"
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_daily_5flucky_5fwheel_2eproto();
void protobuf_AssignDesc_daily_5flucky_5fwheel_2eproto();
void protobuf_ShutdownFile_daily_5flucky_5fwheel_2eproto();

class DailyLuckyWheelPrizeInfoProto;
class DailyLuckyWheelConfig;

// ===================================================================

class DailyLuckyWheelPrizeInfoProto : public ::google::protobuf::Message {
 public:
  DailyLuckyWheelPrizeInfoProto();
  virtual ~DailyLuckyWheelPrizeInfoProto();

  DailyLuckyWheelPrizeInfoProto(const DailyLuckyWheelPrizeInfoProto& from);

  inline DailyLuckyWheelPrizeInfoProto& operator=(const DailyLuckyWheelPrizeInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyLuckyWheelPrizeInfoProto& default_instance();

  void Swap(DailyLuckyWheelPrizeInfoProto* other);

  // implements Message ----------------------------------------------

  DailyLuckyWheelPrizeInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyLuckyWheelPrizeInfoProto& from);
  void MergeFrom(const DailyLuckyWheelPrizeInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 count = 6;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional bool game_object = 7;
  inline bool has_game_object() const;
  inline void clear_game_object();
  static const int kGameObjectFieldNumber = 7;
  inline bool game_object() const;
  inline void set_game_object(bool value);

  // @@protoc_insertion_point(class_scope:app.message.DailyLuckyWheelPrizeInfoProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_game_object();
  inline void clear_has_game_object();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 quality_;
  ::std::string* icon_;
  ::google::protobuf::int32 count_;
  bool game_object_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_daily_5flucky_5fwheel_2eproto();
  friend void protobuf_AssignDesc_daily_5flucky_5fwheel_2eproto();
  friend void protobuf_ShutdownFile_daily_5flucky_5fwheel_2eproto();

  void InitAsDefaultInstance();
  static DailyLuckyWheelPrizeInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class DailyLuckyWheelConfig : public ::google::protobuf::Message {
 public:
  DailyLuckyWheelConfig();
  virtual ~DailyLuckyWheelConfig();

  DailyLuckyWheelConfig(const DailyLuckyWheelConfig& from);

  inline DailyLuckyWheelConfig& operator=(const DailyLuckyWheelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyLuckyWheelConfig& default_instance();

  void Swap(DailyLuckyWheelConfig* other);

  // implements Message ----------------------------------------------

  DailyLuckyWheelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyLuckyWheelConfig& from);
  void MergeFrom(const DailyLuckyWheelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 log_max_count = 1;
  inline bool has_log_max_count() const;
  inline void clear_log_max_count();
  static const int kLogMaxCountFieldNumber = 1;
  inline ::google::protobuf::int32 log_max_count() const;
  inline void set_log_max_count(::google::protobuf::int32 value);

  // repeated .app.message.DailyLuckyWheelPrizeInfoProto prize_infos = 2;
  inline int prize_infos_size() const;
  inline void clear_prize_infos();
  static const int kPrizeInfosFieldNumber = 2;
  inline const ::app::message::DailyLuckyWheelPrizeInfoProto& prize_infos(int index) const;
  inline ::app::message::DailyLuckyWheelPrizeInfoProto* mutable_prize_infos(int index);
  inline ::app::message::DailyLuckyWheelPrizeInfoProto* add_prize_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::DailyLuckyWheelPrizeInfoProto >&
      prize_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::DailyLuckyWheelPrizeInfoProto >*
      mutable_prize_infos();

  // optional int64 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int64 end_time() const;
  inline void set_end_time(::google::protobuf::int64 value);

  // optional int32 daily_times = 5;
  inline bool has_daily_times() const;
  inline void clear_daily_times();
  static const int kDailyTimesFieldNumber = 5;
  inline ::google::protobuf::int32 daily_times() const;
  inline void set_daily_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.DailyLuckyWheelConfig)
 private:
  inline void set_has_log_max_count();
  inline void clear_has_log_max_count();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_daily_times();
  inline void clear_has_daily_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::DailyLuckyWheelPrizeInfoProto > prize_infos_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int32 log_max_count_;
  ::google::protobuf::int32 daily_times_;
  ::google::protobuf::int64 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_daily_5flucky_5fwheel_2eproto();
  friend void protobuf_AssignDesc_daily_5flucky_5fwheel_2eproto();
  friend void protobuf_ShutdownFile_daily_5flucky_5fwheel_2eproto();

  void InitAsDefaultInstance();
  static DailyLuckyWheelConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// DailyLuckyWheelPrizeInfoProto

// optional int32 id = 1;
inline bool DailyLuckyWheelPrizeInfoProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyLuckyWheelPrizeInfoProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DailyLuckyWheelPrizeInfoProto::id() const {
  return id_;
}
inline void DailyLuckyWheelPrizeInfoProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool DailyLuckyWheelPrizeInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyLuckyWheelPrizeInfoProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DailyLuckyWheelPrizeInfoProto::name() const {
  return *name_;
}
inline void DailyLuckyWheelPrizeInfoProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DailyLuckyWheelPrizeInfoProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DailyLuckyWheelPrizeInfoProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DailyLuckyWheelPrizeInfoProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DailyLuckyWheelPrizeInfoProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DailyLuckyWheelPrizeInfoProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes desc = 3;
inline bool DailyLuckyWheelPrizeInfoProto::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyLuckyWheelPrizeInfoProto::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& DailyLuckyWheelPrizeInfoProto::desc() const {
  return *desc_;
}
inline void DailyLuckyWheelPrizeInfoProto::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void DailyLuckyWheelPrizeInfoProto::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void DailyLuckyWheelPrizeInfoProto::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DailyLuckyWheelPrizeInfoProto::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* DailyLuckyWheelPrizeInfoProto::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DailyLuckyWheelPrizeInfoProto::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string icon = 4;
inline bool DailyLuckyWheelPrizeInfoProto::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyLuckyWheelPrizeInfoProto::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& DailyLuckyWheelPrizeInfoProto::icon() const {
  return *icon_;
}
inline void DailyLuckyWheelPrizeInfoProto::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void DailyLuckyWheelPrizeInfoProto::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void DailyLuckyWheelPrizeInfoProto::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DailyLuckyWheelPrizeInfoProto::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* DailyLuckyWheelPrizeInfoProto::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DailyLuckyWheelPrizeInfoProto::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 quality = 5;
inline bool DailyLuckyWheelPrizeInfoProto::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DailyLuckyWheelPrizeInfoProto::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 DailyLuckyWheelPrizeInfoProto::quality() const {
  return quality_;
}
inline void DailyLuckyWheelPrizeInfoProto::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 count = 6;
inline bool DailyLuckyWheelPrizeInfoProto::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DailyLuckyWheelPrizeInfoProto::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 DailyLuckyWheelPrizeInfoProto::count() const {
  return count_;
}
inline void DailyLuckyWheelPrizeInfoProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional bool game_object = 7;
inline bool DailyLuckyWheelPrizeInfoProto::has_game_object() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DailyLuckyWheelPrizeInfoProto::set_has_game_object() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_has_game_object() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DailyLuckyWheelPrizeInfoProto::clear_game_object() {
  game_object_ = false;
  clear_has_game_object();
}
inline bool DailyLuckyWheelPrizeInfoProto::game_object() const {
  return game_object_;
}
inline void DailyLuckyWheelPrizeInfoProto::set_game_object(bool value) {
  set_has_game_object();
  game_object_ = value;
}

// -------------------------------------------------------------------

// DailyLuckyWheelConfig

// optional int32 log_max_count = 1;
inline bool DailyLuckyWheelConfig::has_log_max_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyLuckyWheelConfig::set_has_log_max_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyLuckyWheelConfig::clear_has_log_max_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyLuckyWheelConfig::clear_log_max_count() {
  log_max_count_ = 0;
  clear_has_log_max_count();
}
inline ::google::protobuf::int32 DailyLuckyWheelConfig::log_max_count() const {
  return log_max_count_;
}
inline void DailyLuckyWheelConfig::set_log_max_count(::google::protobuf::int32 value) {
  set_has_log_max_count();
  log_max_count_ = value;
}

// repeated .app.message.DailyLuckyWheelPrizeInfoProto prize_infos = 2;
inline int DailyLuckyWheelConfig::prize_infos_size() const {
  return prize_infos_.size();
}
inline void DailyLuckyWheelConfig::clear_prize_infos() {
  prize_infos_.Clear();
}
inline const ::app::message::DailyLuckyWheelPrizeInfoProto& DailyLuckyWheelConfig::prize_infos(int index) const {
  return prize_infos_.Get(index);
}
inline ::app::message::DailyLuckyWheelPrizeInfoProto* DailyLuckyWheelConfig::mutable_prize_infos(int index) {
  return prize_infos_.Mutable(index);
}
inline ::app::message::DailyLuckyWheelPrizeInfoProto* DailyLuckyWheelConfig::add_prize_infos() {
  return prize_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::DailyLuckyWheelPrizeInfoProto >&
DailyLuckyWheelConfig::prize_infos() const {
  return prize_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::DailyLuckyWheelPrizeInfoProto >*
DailyLuckyWheelConfig::mutable_prize_infos() {
  return &prize_infos_;
}

// optional int64 start_time = 3;
inline bool DailyLuckyWheelConfig::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyLuckyWheelConfig::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyLuckyWheelConfig::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyLuckyWheelConfig::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 DailyLuckyWheelConfig::start_time() const {
  return start_time_;
}
inline void DailyLuckyWheelConfig::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int64 end_time = 4;
inline bool DailyLuckyWheelConfig::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyLuckyWheelConfig::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyLuckyWheelConfig::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyLuckyWheelConfig::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 DailyLuckyWheelConfig::end_time() const {
  return end_time_;
}
inline void DailyLuckyWheelConfig::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 daily_times = 5;
inline bool DailyLuckyWheelConfig::has_daily_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DailyLuckyWheelConfig::set_has_daily_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DailyLuckyWheelConfig::clear_has_daily_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DailyLuckyWheelConfig::clear_daily_times() {
  daily_times_ = 0;
  clear_has_daily_times();
}
inline ::google::protobuf::int32 DailyLuckyWheelConfig::daily_times() const {
  return daily_times_;
}
inline void DailyLuckyWheelConfig::set_daily_times(::google::protobuf::int32 value) {
  set_has_daily_times();
  daily_times_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_daily_5flucky_5fwheel_2eproto__INCLUDED
