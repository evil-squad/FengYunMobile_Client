// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lucky_prize_draw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lucky_prize_draw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* LuckyPointExchangeRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyPointExchangeRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyPrizeDrawInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyPrizeDrawInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyPrizeDrawConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyPrizeDrawConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lucky_5fprize_5fdraw_2eproto() {
  protobuf_AddDesc_lucky_5fprize_5fdraw_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lucky_prize_draw.proto");
  GOOGLE_CHECK(file != NULL);
  LuckyPointExchangeRuleProto_descriptor_ = file->message_type(0);
  static const int LuckyPointExchangeRuleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPointExchangeRuleProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPointExchangeRuleProto, point_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPointExchangeRuleProto, obtain_goods_),
  };
  LuckyPointExchangeRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyPointExchangeRuleProto_descriptor_,
      LuckyPointExchangeRuleProto::default_instance_,
      LuckyPointExchangeRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPointExchangeRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPointExchangeRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyPointExchangeRuleProto));
  LuckyPrizeDrawInfoProto_descriptor_ = file->message_type(1);
  static const int LuckyPrizeDrawInfoProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, count_),
  };
  LuckyPrizeDrawInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyPrizeDrawInfoProto_descriptor_,
      LuckyPrizeDrawInfoProto::default_instance_,
      LuckyPrizeDrawInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyPrizeDrawInfoProto));
  LuckyPrizeDrawConfig_descriptor_ = file->message_type(2);
  static const int LuckyPrizeDrawConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, upgrade_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, prize_draw_storage_capcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, log_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, prize_draw_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, point_exchange_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, end_time_),
  };
  LuckyPrizeDrawConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyPrizeDrawConfig_descriptor_,
      LuckyPrizeDrawConfig::default_instance_,
      LuckyPrizeDrawConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyPrizeDrawConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyPrizeDrawConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lucky_5fprize_5fdraw_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyPointExchangeRuleProto_descriptor_, &LuckyPointExchangeRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyPrizeDrawInfoProto_descriptor_, &LuckyPrizeDrawInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyPrizeDrawConfig_descriptor_, &LuckyPrizeDrawConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lucky_5fprize_5fdraw_2eproto() {
  delete LuckyPointExchangeRuleProto::default_instance_;
  delete LuckyPointExchangeRuleProto_reflection_;
  delete LuckyPrizeDrawInfoProto::default_instance_;
  delete LuckyPrizeDrawInfoProto_reflection_;
  delete LuckyPrizeDrawConfig::default_instance_;
  delete LuckyPrizeDrawConfig_reflection_;
}

void protobuf_AddDesc_lucky_5fprize_5fdraw_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_goods_2eproto();
  ::app::message::protobuf_AddDesc_config_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026lucky_prize_draw.proto\022\013app.message\032\013g"
    "oods.proto\032\014config.proto\"s\n\033LuckyPointEx"
    "changeRuleProto\022\n\n\002id\030\001 \001(\005\022\022\n\npoint_cos"
    "t\030\002 \001(\005\0224\n\014obtain_goods\030\003 \003(\0132\036.app.mess"
    "age.GoodsWrapperProto\"o\n\027LuckyPrizeDrawI"
    "nfoProto\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022\014\n\004de"
    "sc\030\003 \001(\014\022\014\n\004icon\030\004 \001(\t\022\017\n\007quality\030\005 \001(\005\022"
    "\r\n\005count\030\006 \001(\005\"\260\002\n\024LuckyPrizeDrawConfig\022"
    "/\n\014upgrade_data\030\001 \001(\0132\031.app.message.Upgr"
    "adeProto\022\"\n\032prize_draw_storage_capcity\030\002"
    " \001(\005\022\025\n\rlog_max_count\030\003 \001(\005\022>\n\020prize_dra"
    "w_infos\030\004 \003(\0132$.app.message.LuckyPrizeDr"
    "awInfoProto\022F\n\024point_exchange_infos\030\005 \003("
    "\0132(.app.message.LuckyPointExchangeRulePr"
    "oto\022\022\n\nstart_time\030\006 \001(\003\022\020\n\010end_time\030\007 \001("
    "\003B&\n\014app.protobufB\024LucyPrizeDrawContentH"
    "\001", 641);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lucky_prize_draw.proto", &protobuf_RegisterTypes);
  LuckyPointExchangeRuleProto::default_instance_ = new LuckyPointExchangeRuleProto();
  LuckyPrizeDrawInfoProto::default_instance_ = new LuckyPrizeDrawInfoProto();
  LuckyPrizeDrawConfig::default_instance_ = new LuckyPrizeDrawConfig();
  LuckyPointExchangeRuleProto::default_instance_->InitAsDefaultInstance();
  LuckyPrizeDrawInfoProto::default_instance_->InitAsDefaultInstance();
  LuckyPrizeDrawConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lucky_5fprize_5fdraw_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lucky_5fprize_5fdraw_2eproto {
  StaticDescriptorInitializer_lucky_5fprize_5fdraw_2eproto() {
    protobuf_AddDesc_lucky_5fprize_5fdraw_2eproto();
  }
} static_descriptor_initializer_lucky_5fprize_5fdraw_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LuckyPointExchangeRuleProto::kIdFieldNumber;
const int LuckyPointExchangeRuleProto::kPointCostFieldNumber;
const int LuckyPointExchangeRuleProto::kObtainGoodsFieldNumber;
#endif  // !_MSC_VER

LuckyPointExchangeRuleProto::LuckyPointExchangeRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckyPointExchangeRuleProto::InitAsDefaultInstance() {
}

LuckyPointExchangeRuleProto::LuckyPointExchangeRuleProto(const LuckyPointExchangeRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckyPointExchangeRuleProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  point_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyPointExchangeRuleProto::~LuckyPointExchangeRuleProto() {
  SharedDtor();
}

void LuckyPointExchangeRuleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuckyPointExchangeRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyPointExchangeRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyPointExchangeRuleProto_descriptor_;
}

const LuckyPointExchangeRuleProto& LuckyPointExchangeRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lucky_5fprize_5fdraw_2eproto();
  return *default_instance_;
}

LuckyPointExchangeRuleProto* LuckyPointExchangeRuleProto::default_instance_ = NULL;

LuckyPointExchangeRuleProto* LuckyPointExchangeRuleProto::New() const {
  return new LuckyPointExchangeRuleProto;
}

void LuckyPointExchangeRuleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    point_cost_ = 0;
  }
  obtain_goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyPointExchangeRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point_cost;
        break;
      }

      // optional int32 point_cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_cost_)));
          set_has_point_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obtain_goods;
        break;
      }

      // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obtain_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obtain_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obtain_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckyPointExchangeRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 point_cost = 2;
  if (has_point_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point_cost(), output);
  }

  // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obtain_goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckyPointExchangeRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 point_cost = 2;
  if (has_point_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point_cost(), target);
  }

  // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obtain_goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckyPointExchangeRuleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 point_cost = 2;
    if (has_point_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point_cost());
    }

  }
  // repeated .app.message.GoodsWrapperProto obtain_goods = 3;
  total_size += 1 * this->obtain_goods_size();
  for (int i = 0; i < this->obtain_goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obtain_goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyPointExchangeRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyPointExchangeRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyPointExchangeRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyPointExchangeRuleProto::MergeFrom(const LuckyPointExchangeRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  obtain_goods_.MergeFrom(from.obtain_goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_point_cost()) {
      set_point_cost(from.point_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyPointExchangeRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyPointExchangeRuleProto::CopyFrom(const LuckyPointExchangeRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyPointExchangeRuleProto::IsInitialized() const {

  return true;
}

void LuckyPointExchangeRuleProto::Swap(LuckyPointExchangeRuleProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(point_cost_, other->point_cost_);
    obtain_goods_.Swap(&other->obtain_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyPointExchangeRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyPointExchangeRuleProto_descriptor_;
  metadata.reflection = LuckyPointExchangeRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyPrizeDrawInfoProto::kIdFieldNumber;
const int LuckyPrizeDrawInfoProto::kNameFieldNumber;
const int LuckyPrizeDrawInfoProto::kDescFieldNumber;
const int LuckyPrizeDrawInfoProto::kIconFieldNumber;
const int LuckyPrizeDrawInfoProto::kQualityFieldNumber;
const int LuckyPrizeDrawInfoProto::kCountFieldNumber;
#endif  // !_MSC_VER

LuckyPrizeDrawInfoProto::LuckyPrizeDrawInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckyPrizeDrawInfoProto::InitAsDefaultInstance() {
}

LuckyPrizeDrawInfoProto::LuckyPrizeDrawInfoProto(const LuckyPrizeDrawInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckyPrizeDrawInfoProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyPrizeDrawInfoProto::~LuckyPrizeDrawInfoProto() {
  SharedDtor();
}

void LuckyPrizeDrawInfoProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void LuckyPrizeDrawInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyPrizeDrawInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyPrizeDrawInfoProto_descriptor_;
}

const LuckyPrizeDrawInfoProto& LuckyPrizeDrawInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lucky_5fprize_5fdraw_2eproto();
  return *default_instance_;
}

LuckyPrizeDrawInfoProto* LuckyPrizeDrawInfoProto::default_instance_ = NULL;

LuckyPrizeDrawInfoProto* LuckyPrizeDrawInfoProto::New() const {
  return new LuckyPrizeDrawInfoProto;
}

void LuckyPrizeDrawInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    quality_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyPrizeDrawInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional bytes desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckyPrizeDrawInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->desc(), output);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // optional int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckyPrizeDrawInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes desc = 3;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->desc(), target);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // optional int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckyPrizeDrawInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyPrizeDrawInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyPrizeDrawInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyPrizeDrawInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyPrizeDrawInfoProto::MergeFrom(const LuckyPrizeDrawInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyPrizeDrawInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyPrizeDrawInfoProto::CopyFrom(const LuckyPrizeDrawInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyPrizeDrawInfoProto::IsInitialized() const {

  return true;
}

void LuckyPrizeDrawInfoProto::Swap(LuckyPrizeDrawInfoProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(icon_, other->icon_);
    std::swap(quality_, other->quality_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyPrizeDrawInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyPrizeDrawInfoProto_descriptor_;
  metadata.reflection = LuckyPrizeDrawInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyPrizeDrawConfig::kUpgradeDataFieldNumber;
const int LuckyPrizeDrawConfig::kPrizeDrawStorageCapcityFieldNumber;
const int LuckyPrizeDrawConfig::kLogMaxCountFieldNumber;
const int LuckyPrizeDrawConfig::kPrizeDrawInfosFieldNumber;
const int LuckyPrizeDrawConfig::kPointExchangeInfosFieldNumber;
const int LuckyPrizeDrawConfig::kStartTimeFieldNumber;
const int LuckyPrizeDrawConfig::kEndTimeFieldNumber;
#endif  // !_MSC_VER

LuckyPrizeDrawConfig::LuckyPrizeDrawConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckyPrizeDrawConfig::InitAsDefaultInstance() {
  upgrade_data_ = const_cast< ::app::message::UpgradeProto*>(&::app::message::UpgradeProto::default_instance());
}

LuckyPrizeDrawConfig::LuckyPrizeDrawConfig(const LuckyPrizeDrawConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckyPrizeDrawConfig::SharedCtor() {
  _cached_size_ = 0;
  upgrade_data_ = NULL;
  prize_draw_storage_capcity_ = 0;
  log_max_count_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyPrizeDrawConfig::~LuckyPrizeDrawConfig() {
  SharedDtor();
}

void LuckyPrizeDrawConfig::SharedDtor() {
  if (this != default_instance_) {
    delete upgrade_data_;
  }
}

void LuckyPrizeDrawConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyPrizeDrawConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyPrizeDrawConfig_descriptor_;
}

const LuckyPrizeDrawConfig& LuckyPrizeDrawConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lucky_5fprize_5fdraw_2eproto();
  return *default_instance_;
}

LuckyPrizeDrawConfig* LuckyPrizeDrawConfig::default_instance_ = NULL;

LuckyPrizeDrawConfig* LuckyPrizeDrawConfig::New() const {
  return new LuckyPrizeDrawConfig;
}

void LuckyPrizeDrawConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_upgrade_data()) {
      if (upgrade_data_ != NULL) upgrade_data_->::app::message::UpgradeProto::Clear();
    }
    prize_draw_storage_capcity_ = 0;
    log_max_count_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  prize_draw_infos_.Clear();
  point_exchange_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyPrizeDrawConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.UpgradeProto upgrade_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prize_draw_storage_capcity;
        break;
      }

      // optional int32 prize_draw_storage_capcity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_draw_storage_capcity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prize_draw_storage_capcity_)));
          set_has_prize_draw_storage_capcity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_log_max_count;
        break;
      }

      // optional int32 log_max_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_max_count_)));
          set_has_log_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize_draw_infos;
        break;
      }

      // repeated .app.message.LuckyPrizeDrawInfoProto prize_draw_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize_draw_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize_draw_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize_draw_infos;
        if (input->ExpectTag(42)) goto parse_point_exchange_infos;
        break;
      }

      // repeated .app.message.LuckyPointExchangeRuleProto point_exchange_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_exchange_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_exchange_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_point_exchange_infos;
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckyPrizeDrawConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.UpgradeProto upgrade_data = 1;
  if (has_upgrade_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->upgrade_data(), output);
  }

  // optional int32 prize_draw_storage_capcity = 2;
  if (has_prize_draw_storage_capcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prize_draw_storage_capcity(), output);
  }

  // optional int32 log_max_count = 3;
  if (has_log_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->log_max_count(), output);
  }

  // repeated .app.message.LuckyPrizeDrawInfoProto prize_draw_infos = 4;
  for (int i = 0; i < this->prize_draw_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize_draw_infos(i), output);
  }

  // repeated .app.message.LuckyPointExchangeRuleProto point_exchange_infos = 5;
  for (int i = 0; i < this->point_exchange_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->point_exchange_infos(i), output);
  }

  // optional int64 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->start_time(), output);
  }

  // optional int64 end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckyPrizeDrawConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.UpgradeProto upgrade_data = 1;
  if (has_upgrade_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->upgrade_data(), target);
  }

  // optional int32 prize_draw_storage_capcity = 2;
  if (has_prize_draw_storage_capcity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prize_draw_storage_capcity(), target);
  }

  // optional int32 log_max_count = 3;
  if (has_log_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->log_max_count(), target);
  }

  // repeated .app.message.LuckyPrizeDrawInfoProto prize_draw_infos = 4;
  for (int i = 0; i < this->prize_draw_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize_draw_infos(i), target);
  }

  // repeated .app.message.LuckyPointExchangeRuleProto point_exchange_infos = 5;
  for (int i = 0; i < this->point_exchange_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->point_exchange_infos(i), target);
  }

  // optional int64 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->start_time(), target);
  }

  // optional int64 end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckyPrizeDrawConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.UpgradeProto upgrade_data = 1;
    if (has_upgrade_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgrade_data());
    }

    // optional int32 prize_draw_storage_capcity = 2;
    if (has_prize_draw_storage_capcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prize_draw_storage_capcity());
    }

    // optional int32 log_max_count = 3;
    if (has_log_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_max_count());
    }

    // optional int64 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  // repeated .app.message.LuckyPrizeDrawInfoProto prize_draw_infos = 4;
  total_size += 1 * this->prize_draw_infos_size();
  for (int i = 0; i < this->prize_draw_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize_draw_infos(i));
  }

  // repeated .app.message.LuckyPointExchangeRuleProto point_exchange_infos = 5;
  total_size += 1 * this->point_exchange_infos_size();
  for (int i = 0; i < this->point_exchange_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_exchange_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyPrizeDrawConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyPrizeDrawConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyPrizeDrawConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyPrizeDrawConfig::MergeFrom(const LuckyPrizeDrawConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_draw_infos_.MergeFrom(from.prize_draw_infos_);
  point_exchange_infos_.MergeFrom(from.point_exchange_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade_data()) {
      mutable_upgrade_data()->::app::message::UpgradeProto::MergeFrom(from.upgrade_data());
    }
    if (from.has_prize_draw_storage_capcity()) {
      set_prize_draw_storage_capcity(from.prize_draw_storage_capcity());
    }
    if (from.has_log_max_count()) {
      set_log_max_count(from.log_max_count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyPrizeDrawConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyPrizeDrawConfig::CopyFrom(const LuckyPrizeDrawConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyPrizeDrawConfig::IsInitialized() const {

  return true;
}

void LuckyPrizeDrawConfig::Swap(LuckyPrizeDrawConfig* other) {
  if (other != this) {
    std::swap(upgrade_data_, other->upgrade_data_);
    std::swap(prize_draw_storage_capcity_, other->prize_draw_storage_capcity_);
    std::swap(log_max_count_, other->log_max_count_);
    prize_draw_infos_.Swap(&other->prize_draw_infos_);
    point_exchange_infos_.Swap(&other->point_exchange_infos_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyPrizeDrawConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyPrizeDrawConfig_descriptor_;
  metadata.reflection = LuckyPrizeDrawConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
