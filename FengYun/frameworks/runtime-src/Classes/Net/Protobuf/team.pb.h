// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#ifndef PROTOBUF_team_2eproto__INCLUDED
#define PROTOBUF_team_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_team_2eproto();
void protobuf_AssignDesc_team_2eproto();
void protobuf_ShutdownFile_team_2eproto();

class SceneTeamProto;
class TeamInfoProto;

// ===================================================================

class SceneTeamProto : public ::google::protobuf::Message {
 public:
  SceneTeamProto();
  virtual ~SceneTeamProto();

  SceneTeamProto(const SceneTeamProto& from);

  inline SceneTeamProto& operator=(const SceneTeamProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneTeamProto& default_instance();

  void Swap(SceneTeamProto* other);

  // implements Message ----------------------------------------------

  SceneTeamProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneTeamProto& from);
  void MergeFrom(const SceneTeamProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.TeamInfoProto teams = 1;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 1;
  inline const ::app::message::TeamInfoProto& teams(int index) const;
  inline ::app::message::TeamInfoProto* mutable_teams(int index);
  inline ::app::message::TeamInfoProto* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::TeamInfoProto >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::TeamInfoProto >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:app.message.SceneTeamProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::TeamInfoProto > teams_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_team_2eproto();
  friend void protobuf_AssignDesc_team_2eproto();
  friend void protobuf_ShutdownFile_team_2eproto();

  void InitAsDefaultInstance();
  static SceneTeamProto* default_instance_;
};
// -------------------------------------------------------------------

class TeamInfoProto : public ::google::protobuf::Message {
 public:
  TeamInfoProto();
  virtual ~TeamInfoProto();

  TeamInfoProto(const TeamInfoProto& from);

  inline TeamInfoProto& operator=(const TeamInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfoProto& default_instance();

  void Swap(TeamInfoProto* other);

  // implements Message ----------------------------------------------

  TeamInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfoProto& from);
  void MergeFrom(const TeamInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // optional int32 hero_count = 2;
  inline bool has_hero_count() const;
  inline void clear_hero_count();
  static const int kHeroCountFieldNumber = 2;
  inline ::google::protobuf::int32 hero_count() const;
  inline void set_hero_count(::google::protobuf::int32 value);

  // optional int64 leader_id = 3;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  inline ::google::protobuf::int64 leader_id() const;
  inline void set_leader_id(::google::protobuf::int64 value);

  // optional string leader_name = 4;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 4;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const char* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional int32 fight_amount_threshold = 5;
  inline bool has_fight_amount_threshold() const;
  inline void clear_fight_amount_threshold();
  static const int kFightAmountThresholdFieldNumber = 5;
  inline ::google::protobuf::int32 fight_amount_threshold() const;
  inline void set_fight_amount_threshold(::google::protobuf::int32 value);

  // optional bool is_auto_start = 6;
  inline bool has_is_auto_start() const;
  inline void clear_is_auto_start();
  static const int kIsAutoStartFieldNumber = 6;
  inline bool is_auto_start() const;
  inline void set_is_auto_start(bool value);

  // optional bool has_pwd = 7;
  inline bool has_has_pwd() const;
  inline void clear_has_pwd();
  static const int kHasPwdFieldNumber = 7;
  inline bool has_pwd() const;
  inline void set_has_pwd(bool value);

  // @@protoc_insertion_point(class_scope:app.message.TeamInfoProto)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_hero_count();
  inline void clear_has_hero_count();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_fight_amount_threshold();
  inline void clear_has_fight_amount_threshold();
  inline void set_has_is_auto_start();
  inline void clear_has_is_auto_start();
  inline void set_has_has_pwd();
  inline void clear_has_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 team_id_;
  ::google::protobuf::int32 hero_count_;
  ::google::protobuf::int64 leader_id_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 fight_amount_threshold_;
  bool is_auto_start_;
  bool has_pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_team_2eproto();
  friend void protobuf_AssignDesc_team_2eproto();
  friend void protobuf_ShutdownFile_team_2eproto();

  void InitAsDefaultInstance();
  static TeamInfoProto* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneTeamProto

// repeated .app.message.TeamInfoProto teams = 1;
inline int SceneTeamProto::teams_size() const {
  return teams_.size();
}
inline void SceneTeamProto::clear_teams() {
  teams_.Clear();
}
inline const ::app::message::TeamInfoProto& SceneTeamProto::teams(int index) const {
  return teams_.Get(index);
}
inline ::app::message::TeamInfoProto* SceneTeamProto::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::app::message::TeamInfoProto* SceneTeamProto::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::TeamInfoProto >&
SceneTeamProto::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::TeamInfoProto >*
SceneTeamProto::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// TeamInfoProto

// optional int32 team_id = 1;
inline bool TeamInfoProto::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfoProto::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfoProto::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfoProto::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 TeamInfoProto::team_id() const {
  return team_id_;
}
inline void TeamInfoProto::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional int32 hero_count = 2;
inline bool TeamInfoProto::has_hero_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfoProto::set_has_hero_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfoProto::clear_has_hero_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfoProto::clear_hero_count() {
  hero_count_ = 0;
  clear_has_hero_count();
}
inline ::google::protobuf::int32 TeamInfoProto::hero_count() const {
  return hero_count_;
}
inline void TeamInfoProto::set_hero_count(::google::protobuf::int32 value) {
  set_has_hero_count();
  hero_count_ = value;
}

// optional int64 leader_id = 3;
inline bool TeamInfoProto::has_leader_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamInfoProto::set_has_leader_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamInfoProto::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamInfoProto::clear_leader_id() {
  leader_id_ = GOOGLE_LONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::int64 TeamInfoProto::leader_id() const {
  return leader_id_;
}
inline void TeamInfoProto::set_leader_id(::google::protobuf::int64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// optional string leader_name = 4;
inline bool TeamInfoProto::has_leader_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfoProto::set_has_leader_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfoProto::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamInfoProto::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& TeamInfoProto::leader_name() const {
  return *leader_name_;
}
inline void TeamInfoProto::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void TeamInfoProto::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void TeamInfoProto::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamInfoProto::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* TeamInfoProto::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamInfoProto::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fight_amount_threshold = 5;
inline bool TeamInfoProto::has_fight_amount_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfoProto::set_has_fight_amount_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfoProto::clear_has_fight_amount_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamInfoProto::clear_fight_amount_threshold() {
  fight_amount_threshold_ = 0;
  clear_has_fight_amount_threshold();
}
inline ::google::protobuf::int32 TeamInfoProto::fight_amount_threshold() const {
  return fight_amount_threshold_;
}
inline void TeamInfoProto::set_fight_amount_threshold(::google::protobuf::int32 value) {
  set_has_fight_amount_threshold();
  fight_amount_threshold_ = value;
}

// optional bool is_auto_start = 6;
inline bool TeamInfoProto::has_is_auto_start() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamInfoProto::set_has_is_auto_start() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamInfoProto::clear_has_is_auto_start() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamInfoProto::clear_is_auto_start() {
  is_auto_start_ = false;
  clear_has_is_auto_start();
}
inline bool TeamInfoProto::is_auto_start() const {
  return is_auto_start_;
}
inline void TeamInfoProto::set_is_auto_start(bool value) {
  set_has_is_auto_start();
  is_auto_start_ = value;
}

// optional bool has_pwd = 7;
inline bool TeamInfoProto::has_has_pwd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamInfoProto::set_has_has_pwd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamInfoProto::clear_has_has_pwd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamInfoProto::clear_has_pwd() {
  has_pwd_ = false;
  clear_has_has_pwd();
}
inline bool TeamInfoProto::has_pwd() const {
  return has_pwd_;
}
inline void TeamInfoProto::set_has_pwd(bool value) {
  set_has_has_pwd();
  has_pwd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_team_2eproto__INCLUDED
