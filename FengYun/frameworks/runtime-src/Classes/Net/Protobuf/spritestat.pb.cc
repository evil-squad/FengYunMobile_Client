// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spritestat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spritestat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SpriteStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpriteStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleStatProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_spritestat_2eproto() {
  protobuf_AddDesc_spritestat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spritestat.proto");
  GOOGLE_CHECK(file != NULL);
  SpriteStatProto_descriptor_ = file->message_type(0);
  static const int SpriteStatProto_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, max_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, max_stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, anti_crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, shoot_mount_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, stun_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, hush_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, slow_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, poison_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, max_life_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, attack_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, defence_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, crit_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, anti_crit_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, hit_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, dodge_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, move_speed_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, anti_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, anti_hurt_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, ad_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, ad_hurt_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, suck_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, suck_hurt_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, sub_shoot_mount_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, sub_stun_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, sub_hush_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, sub_slow_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, sub_poison_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, ad_mobing_stat_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, jin_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, mu_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, shui_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, huo_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, tu_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, bleed_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, sub_bleed_resist_),
  };
  SpriteStatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpriteStatProto_descriptor_,
      SpriteStatProto::default_instance_,
      SpriteStatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteStatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpriteStatProto));
  SingleStatProto_descriptor_ = file->message_type(1);
  static const int SingleStatProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStatProto, stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStatProto, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStatProto, type_),
  };
  SingleStatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleStatProto_descriptor_,
      SingleStatProto::default_instance_,
      SingleStatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleStatProto));
  StatType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spritestat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpriteStatProto_descriptor_, &SpriteStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleStatProto_descriptor_, &SingleStatProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spritestat_2eproto() {
  delete SpriteStatProto::default_instance_;
  delete SpriteStatProto_reflection_;
  delete SingleStatProto::default_instance_;
  delete SingleStatProto_reflection_;
}

void protobuf_AddDesc_spritestat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020spritestat.proto\022\013app.message\"\340\006\n\017Spri"
    "teStatProto\022\020\n\010max_life\030\001 \001(\003\022\023\n\013max_sta"
    "mina\030\003 \001(\005\022\016\n\006attack\030\004 \001(\005\022\017\n\007defence\030\005 "
    "\001(\005\022\014\n\004crit\030\006 \001(\005\022\021\n\tanti_crit\030\007 \001(\005\022\013\n\003"
    "hit\030\010 \001(\005\022\r\n\005dodge\030\t \001(\005\022\022\n\nmove_speed\030\n"
    " \001(\005\022\032\n\022shoot_mount_resist\030\013 \001(\005\022\023\n\013stun"
    "_resist\030\014 \001(\005\022\023\n\013hush_resist\030\r \001(\005\022\023\n\013sl"
    "ow_resist\030\016 \001(\005\022\025\n\rpoison_resist\030\017 \001(\005\022\024"
    "\n\014max_life_per\030\020 \001(\005\022\022\n\nattack_per\030\021 \001(\005"
    "\022\023\n\013defence_per\030\022 \001(\005\022\020\n\010crit_per\030\023 \001(\005\022"
    "\025\n\ranti_crit_per\030\024 \001(\005\022\017\n\007hit_per\030\025 \001(\005\022"
    "\021\n\tdodge_per\030\026 \001(\005\022\026\n\016move_speed_per\030\027 \001"
    "(\005\022\021\n\tanti_hurt\030\030 \001(\005\022\025\n\ranti_hurt_per\030\031"
    " \001(\005\022\017\n\007ad_hurt\030\032 \001(\005\022\023\n\013ad_hurt_per\030\033 \001"
    "(\005\022\021\n\tsuck_hurt\030\034 \001(\005\022\025\n\rsuck_hurt_per\030\035"
    " \001(\005\022\036\n\026sub_shoot_mount_resist\030\036 \001(\005\022\027\n\017"
    "sub_stun_resist\030\037 \001(\005\022\027\n\017sub_hush_resist"
    "\030  \001(\005\022\027\n\017sub_slow_resist\030! \001(\005\022\031\n\021sub_p"
    "oison_resist\030\" \001(\005\022\032\n\022ad_mobing_stat_per"
    "\030# \001(\005\022\017\n\007jin_per\030$ \001(\005\022\016\n\006mu_per\030% \001(\005\022"
    "\020\n\010shui_per\030& \001(\005\022\017\n\007huo_per\030\' \001(\005\022\016\n\006tu"
    "_per\030( \001(\005\022\024\n\014bleed_resist\030) \001(\005\022\030\n\020sub_"
    "bleed_resist\030* \001(\005\"Y\n\017SingleStatProto\022(\n"
    "\tstat_type\030\001 \001(\0162\025.app.message.StatType\022"
    "\016\n\006amount\030\002 \001(\005\022\014\n\004type\030\003 \001(\005*\342\003\n\010StatTy"
    "pe\022\014\n\010MAX_LIFE\020\000\022\017\n\013MAX_STAMINA\020\001\022\n\n\006ATT"
    "ACK\020\002\022\013\n\007DEFENCE\020\003\022\010\n\004CRIT\020\004\022\r\n\tANTI_CRI"
    "T\020\005\022\007\n\003HIT\020\006\022\t\n\005DODGE\020\007\022\016\n\nMOVE_SPEED\020\010\022"
    "\026\n\022SHOOT_MOUNT_RESIST\020\t\022\017\n\013STUN_RESIST\020\n"
    "\022\017\n\013HUSH_RESIST\020\013\022\017\n\013SLOW_RESIST\020\014\022\021\n\rPO"
    "ISON_RESIST\020\r\022\r\n\tANTI_HURT\020\016\022\013\n\007AD_HURT\020"
    "\017\022\r\n\tSUCK_HURT\020\020\022\032\n\026SUB_SHOOT_MOUNT_RESI"
    "ST\020\021\022\023\n\017SUB_STUN_RESIST\020\022\022\023\n\017SUB_HUSH_RE"
    "SIST\020\023\022\023\n\017SUB_SLOW_RESIST\020\024\022\025\n\021SUB_POISO"
    "N_RESIST\020\025\022\022\n\016AD_MOBING_STAT\020\026\022\007\n\003JIN\020\027\022"
    "\006\n\002MU\020\030\022\010\n\004SHUI\020\031\022\007\n\003HUO\020\032\022\006\n\002TU\020\033\022\020\n\014BL"
    "EED_RESIST\020\034\022\024\n\020SUB_BLEED_RESIST\020\035B#\n\014ap"
    "p.protobufB\021SpriteStatContentH\001", 1511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spritestat.proto", &protobuf_RegisterTypes);
  SpriteStatProto::default_instance_ = new SpriteStatProto();
  SingleStatProto::default_instance_ = new SingleStatProto();
  SpriteStatProto::default_instance_->InitAsDefaultInstance();
  SingleStatProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spritestat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spritestat_2eproto {
  StaticDescriptorInitializer_spritestat_2eproto() {
    protobuf_AddDesc_spritestat_2eproto();
  }
} static_descriptor_initializer_spritestat_2eproto_;
const ::google::protobuf::EnumDescriptor* StatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatType_descriptor_;
}
bool StatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SpriteStatProto::kMaxLifeFieldNumber;
const int SpriteStatProto::kMaxStaminaFieldNumber;
const int SpriteStatProto::kAttackFieldNumber;
const int SpriteStatProto::kDefenceFieldNumber;
const int SpriteStatProto::kCritFieldNumber;
const int SpriteStatProto::kAntiCritFieldNumber;
const int SpriteStatProto::kHitFieldNumber;
const int SpriteStatProto::kDodgeFieldNumber;
const int SpriteStatProto::kMoveSpeedFieldNumber;
const int SpriteStatProto::kShootMountResistFieldNumber;
const int SpriteStatProto::kStunResistFieldNumber;
const int SpriteStatProto::kHushResistFieldNumber;
const int SpriteStatProto::kSlowResistFieldNumber;
const int SpriteStatProto::kPoisonResistFieldNumber;
const int SpriteStatProto::kMaxLifePerFieldNumber;
const int SpriteStatProto::kAttackPerFieldNumber;
const int SpriteStatProto::kDefencePerFieldNumber;
const int SpriteStatProto::kCritPerFieldNumber;
const int SpriteStatProto::kAntiCritPerFieldNumber;
const int SpriteStatProto::kHitPerFieldNumber;
const int SpriteStatProto::kDodgePerFieldNumber;
const int SpriteStatProto::kMoveSpeedPerFieldNumber;
const int SpriteStatProto::kAntiHurtFieldNumber;
const int SpriteStatProto::kAntiHurtPerFieldNumber;
const int SpriteStatProto::kAdHurtFieldNumber;
const int SpriteStatProto::kAdHurtPerFieldNumber;
const int SpriteStatProto::kSuckHurtFieldNumber;
const int SpriteStatProto::kSuckHurtPerFieldNumber;
const int SpriteStatProto::kSubShootMountResistFieldNumber;
const int SpriteStatProto::kSubStunResistFieldNumber;
const int SpriteStatProto::kSubHushResistFieldNumber;
const int SpriteStatProto::kSubSlowResistFieldNumber;
const int SpriteStatProto::kSubPoisonResistFieldNumber;
const int SpriteStatProto::kAdMobingStatPerFieldNumber;
const int SpriteStatProto::kJinPerFieldNumber;
const int SpriteStatProto::kMuPerFieldNumber;
const int SpriteStatProto::kShuiPerFieldNumber;
const int SpriteStatProto::kHuoPerFieldNumber;
const int SpriteStatProto::kTuPerFieldNumber;
const int SpriteStatProto::kBleedResistFieldNumber;
const int SpriteStatProto::kSubBleedResistFieldNumber;
#endif  // !_MSC_VER

SpriteStatProto::SpriteStatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpriteStatProto::InitAsDefaultInstance() {
}

SpriteStatProto::SpriteStatProto(const SpriteStatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpriteStatProto::SharedCtor() {
  _cached_size_ = 0;
  max_life_ = GOOGLE_LONGLONG(0);
  max_stamina_ = 0;
  attack_ = 0;
  defence_ = 0;
  crit_ = 0;
  anti_crit_ = 0;
  hit_ = 0;
  dodge_ = 0;
  move_speed_ = 0;
  shoot_mount_resist_ = 0;
  stun_resist_ = 0;
  hush_resist_ = 0;
  slow_resist_ = 0;
  poison_resist_ = 0;
  max_life_per_ = 0;
  attack_per_ = 0;
  defence_per_ = 0;
  crit_per_ = 0;
  anti_crit_per_ = 0;
  hit_per_ = 0;
  dodge_per_ = 0;
  move_speed_per_ = 0;
  anti_hurt_ = 0;
  anti_hurt_per_ = 0;
  ad_hurt_ = 0;
  ad_hurt_per_ = 0;
  suck_hurt_ = 0;
  suck_hurt_per_ = 0;
  sub_shoot_mount_resist_ = 0;
  sub_stun_resist_ = 0;
  sub_hush_resist_ = 0;
  sub_slow_resist_ = 0;
  sub_poison_resist_ = 0;
  ad_mobing_stat_per_ = 0;
  jin_per_ = 0;
  mu_per_ = 0;
  shui_per_ = 0;
  huo_per_ = 0;
  tu_per_ = 0;
  bleed_resist_ = 0;
  sub_bleed_resist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpriteStatProto::~SpriteStatProto() {
  SharedDtor();
}

void SpriteStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpriteStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpriteStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpriteStatProto_descriptor_;
}

const SpriteStatProto& SpriteStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spritestat_2eproto();
  return *default_instance_;
}

SpriteStatProto* SpriteStatProto::default_instance_ = NULL;

SpriteStatProto* SpriteStatProto::New() const {
  return new SpriteStatProto;
}

void SpriteStatProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_life_ = GOOGLE_LONGLONG(0);
    max_stamina_ = 0;
    attack_ = 0;
    defence_ = 0;
    crit_ = 0;
    anti_crit_ = 0;
    hit_ = 0;
    dodge_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    move_speed_ = 0;
    shoot_mount_resist_ = 0;
    stun_resist_ = 0;
    hush_resist_ = 0;
    slow_resist_ = 0;
    poison_resist_ = 0;
    max_life_per_ = 0;
    attack_per_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    defence_per_ = 0;
    crit_per_ = 0;
    anti_crit_per_ = 0;
    hit_per_ = 0;
    dodge_per_ = 0;
    move_speed_per_ = 0;
    anti_hurt_ = 0;
    anti_hurt_per_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ad_hurt_ = 0;
    ad_hurt_per_ = 0;
    suck_hurt_ = 0;
    suck_hurt_per_ = 0;
    sub_shoot_mount_resist_ = 0;
    sub_stun_resist_ = 0;
    sub_hush_resist_ = 0;
    sub_slow_resist_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    sub_poison_resist_ = 0;
    ad_mobing_stat_per_ = 0;
    jin_per_ = 0;
    mu_per_ = 0;
    shui_per_ = 0;
    huo_per_ = 0;
    tu_per_ = 0;
    bleed_resist_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    sub_bleed_resist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpriteStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 max_life = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_life_)));
          set_has_max_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_stamina;
        break;
      }

      // optional int32 max_stamina = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_stamina_)));
          set_has_max_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack;
        break;
      }

      // optional int32 attack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defence;
        break;
      }

      // optional int32 defence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_crit;
        break;
      }

      // optional int32 crit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_anti_crit;
        break;
      }

      // optional int32 anti_crit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_crit_)));
          set_has_anti_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hit;
        break;
      }

      // optional int32 hit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dodge;
        break;
      }

      // optional int32 dodge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_shoot_mount_resist;
        break;
      }

      // optional int32 shoot_mount_resist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoot_mount_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoot_mount_resist_)));
          set_has_shoot_mount_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stun_resist;
        break;
      }

      // optional int32 stun_resist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stun_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stun_resist_)));
          set_has_stun_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hush_resist;
        break;
      }

      // optional int32 hush_resist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hush_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hush_resist_)));
          set_has_hush_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_slow_resist;
        break;
      }

      // optional int32 slow_resist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slow_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_resist_)));
          set_has_slow_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_poison_resist;
        break;
      }

      // optional int32 poison_resist = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poison_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poison_resist_)));
          set_has_poison_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_max_life_per;
        break;
      }

      // optional int32 max_life_per = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_life_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_life_per_)));
          set_has_max_life_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_attack_per;
        break;
      }

      // optional int32 attack_per = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_per_)));
          set_has_attack_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_defence_per;
        break;
      }

      // optional int32 defence_per = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_per_)));
          set_has_defence_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_crit_per;
        break;
      }

      // optional int32 crit_per = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_per_)));
          set_has_crit_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_anti_crit_per;
        break;
      }

      // optional int32 anti_crit_per = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_crit_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_crit_per_)));
          set_has_anti_crit_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_hit_per;
        break;
      }

      // optional int32 hit_per = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_per_)));
          set_has_hit_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_dodge_per;
        break;
      }

      // optional int32 dodge_per = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodge_per_)));
          set_has_dodge_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_move_speed_per;
        break;
      }

      // optional int32 move_speed_per = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_per_)));
          set_has_move_speed_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_anti_hurt;
        break;
      }

      // optional int32 anti_hurt = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_hurt_)));
          set_has_anti_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_anti_hurt_per;
        break;
      }

      // optional int32 anti_hurt_per = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_hurt_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_hurt_per_)));
          set_has_anti_hurt_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_ad_hurt;
        break;
      }

      // optional int32 ad_hurt = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_hurt_)));
          set_has_ad_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_ad_hurt_per;
        break;
      }

      // optional int32 ad_hurt_per = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_hurt_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_hurt_per_)));
          set_has_ad_hurt_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_suck_hurt;
        break;
      }

      // optional int32 suck_hurt = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suck_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suck_hurt_)));
          set_has_suck_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_suck_hurt_per;
        break;
      }

      // optional int32 suck_hurt_per = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suck_hurt_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suck_hurt_per_)));
          set_has_suck_hurt_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_sub_shoot_mount_resist;
        break;
      }

      // optional int32 sub_shoot_mount_resist = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_shoot_mount_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_shoot_mount_resist_)));
          set_has_sub_shoot_mount_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_sub_stun_resist;
        break;
      }

      // optional int32 sub_stun_resist = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_stun_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_stun_resist_)));
          set_has_sub_stun_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_sub_hush_resist;
        break;
      }

      // optional int32 sub_hush_resist = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_hush_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_hush_resist_)));
          set_has_sub_hush_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_sub_slow_resist;
        break;
      }

      // optional int32 sub_slow_resist = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_slow_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_slow_resist_)));
          set_has_sub_slow_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_sub_poison_resist;
        break;
      }

      // optional int32 sub_poison_resist = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_poison_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_poison_resist_)));
          set_has_sub_poison_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_ad_mobing_stat_per;
        break;
      }

      // optional int32 ad_mobing_stat_per = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_mobing_stat_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_mobing_stat_per_)));
          set_has_ad_mobing_stat_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_jin_per;
        break;
      }

      // optional int32 jin_per = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jin_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jin_per_)));
          set_has_jin_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_mu_per;
        break;
      }

      // optional int32 mu_per = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mu_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mu_per_)));
          set_has_mu_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_shui_per;
        break;
      }

      // optional int32 shui_per = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shui_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shui_per_)));
          set_has_shui_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_huo_per;
        break;
      }

      // optional int32 huo_per = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huo_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huo_per_)));
          set_has_huo_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_tu_per;
        break;
      }

      // optional int32 tu_per = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tu_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tu_per_)));
          set_has_tu_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_bleed_resist;
        break;
      }

      // optional int32 bleed_resist = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bleed_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bleed_resist_)));
          set_has_bleed_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_sub_bleed_resist;
        break;
      }

      // optional int32 sub_bleed_resist = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_bleed_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_bleed_resist_)));
          set_has_sub_bleed_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpriteStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 max_life = 1;
  if (has_max_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_life(), output);
  }

  // optional int32 max_stamina = 3;
  if (has_max_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_stamina(), output);
  }

  // optional int32 attack = 4;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack(), output);
  }

  // optional int32 defence = 5;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defence(), output);
  }

  // optional int32 crit = 6;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crit(), output);
  }

  // optional int32 anti_crit = 7;
  if (has_anti_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->anti_crit(), output);
  }

  // optional int32 hit = 8;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hit(), output);
  }

  // optional int32 dodge = 9;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dodge(), output);
  }

  // optional int32 move_speed = 10;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->move_speed(), output);
  }

  // optional int32 shoot_mount_resist = 11;
  if (has_shoot_mount_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->shoot_mount_resist(), output);
  }

  // optional int32 stun_resist = 12;
  if (has_stun_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stun_resist(), output);
  }

  // optional int32 hush_resist = 13;
  if (has_hush_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hush_resist(), output);
  }

  // optional int32 slow_resist = 14;
  if (has_slow_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->slow_resist(), output);
  }

  // optional int32 poison_resist = 15;
  if (has_poison_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->poison_resist(), output);
  }

  // optional int32 max_life_per = 16;
  if (has_max_life_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_life_per(), output);
  }

  // optional int32 attack_per = 17;
  if (has_attack_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->attack_per(), output);
  }

  // optional int32 defence_per = 18;
  if (has_defence_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->defence_per(), output);
  }

  // optional int32 crit_per = 19;
  if (has_crit_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->crit_per(), output);
  }

  // optional int32 anti_crit_per = 20;
  if (has_anti_crit_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->anti_crit_per(), output);
  }

  // optional int32 hit_per = 21;
  if (has_hit_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->hit_per(), output);
  }

  // optional int32 dodge_per = 22;
  if (has_dodge_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->dodge_per(), output);
  }

  // optional int32 move_speed_per = 23;
  if (has_move_speed_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->move_speed_per(), output);
  }

  // optional int32 anti_hurt = 24;
  if (has_anti_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->anti_hurt(), output);
  }

  // optional int32 anti_hurt_per = 25;
  if (has_anti_hurt_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->anti_hurt_per(), output);
  }

  // optional int32 ad_hurt = 26;
  if (has_ad_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ad_hurt(), output);
  }

  // optional int32 ad_hurt_per = 27;
  if (has_ad_hurt_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ad_hurt_per(), output);
  }

  // optional int32 suck_hurt = 28;
  if (has_suck_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->suck_hurt(), output);
  }

  // optional int32 suck_hurt_per = 29;
  if (has_suck_hurt_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->suck_hurt_per(), output);
  }

  // optional int32 sub_shoot_mount_resist = 30;
  if (has_sub_shoot_mount_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->sub_shoot_mount_resist(), output);
  }

  // optional int32 sub_stun_resist = 31;
  if (has_sub_stun_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->sub_stun_resist(), output);
  }

  // optional int32 sub_hush_resist = 32;
  if (has_sub_hush_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->sub_hush_resist(), output);
  }

  // optional int32 sub_slow_resist = 33;
  if (has_sub_slow_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->sub_slow_resist(), output);
  }

  // optional int32 sub_poison_resist = 34;
  if (has_sub_poison_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->sub_poison_resist(), output);
  }

  // optional int32 ad_mobing_stat_per = 35;
  if (has_ad_mobing_stat_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->ad_mobing_stat_per(), output);
  }

  // optional int32 jin_per = 36;
  if (has_jin_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->jin_per(), output);
  }

  // optional int32 mu_per = 37;
  if (has_mu_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->mu_per(), output);
  }

  // optional int32 shui_per = 38;
  if (has_shui_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->shui_per(), output);
  }

  // optional int32 huo_per = 39;
  if (has_huo_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->huo_per(), output);
  }

  // optional int32 tu_per = 40;
  if (has_tu_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->tu_per(), output);
  }

  // optional int32 bleed_resist = 41;
  if (has_bleed_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->bleed_resist(), output);
  }

  // optional int32 sub_bleed_resist = 42;
  if (has_sub_bleed_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->sub_bleed_resist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpriteStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 max_life = 1;
  if (has_max_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_life(), target);
  }

  // optional int32 max_stamina = 3;
  if (has_max_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_stamina(), target);
  }

  // optional int32 attack = 4;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attack(), target);
  }

  // optional int32 defence = 5;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defence(), target);
  }

  // optional int32 crit = 6;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crit(), target);
  }

  // optional int32 anti_crit = 7;
  if (has_anti_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->anti_crit(), target);
  }

  // optional int32 hit = 8;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hit(), target);
  }

  // optional int32 dodge = 9;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dodge(), target);
  }

  // optional int32 move_speed = 10;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->move_speed(), target);
  }

  // optional int32 shoot_mount_resist = 11;
  if (has_shoot_mount_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->shoot_mount_resist(), target);
  }

  // optional int32 stun_resist = 12;
  if (has_stun_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stun_resist(), target);
  }

  // optional int32 hush_resist = 13;
  if (has_hush_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hush_resist(), target);
  }

  // optional int32 slow_resist = 14;
  if (has_slow_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->slow_resist(), target);
  }

  // optional int32 poison_resist = 15;
  if (has_poison_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->poison_resist(), target);
  }

  // optional int32 max_life_per = 16;
  if (has_max_life_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->max_life_per(), target);
  }

  // optional int32 attack_per = 17;
  if (has_attack_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->attack_per(), target);
  }

  // optional int32 defence_per = 18;
  if (has_defence_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->defence_per(), target);
  }

  // optional int32 crit_per = 19;
  if (has_crit_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->crit_per(), target);
  }

  // optional int32 anti_crit_per = 20;
  if (has_anti_crit_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->anti_crit_per(), target);
  }

  // optional int32 hit_per = 21;
  if (has_hit_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->hit_per(), target);
  }

  // optional int32 dodge_per = 22;
  if (has_dodge_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->dodge_per(), target);
  }

  // optional int32 move_speed_per = 23;
  if (has_move_speed_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->move_speed_per(), target);
  }

  // optional int32 anti_hurt = 24;
  if (has_anti_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->anti_hurt(), target);
  }

  // optional int32 anti_hurt_per = 25;
  if (has_anti_hurt_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->anti_hurt_per(), target);
  }

  // optional int32 ad_hurt = 26;
  if (has_ad_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ad_hurt(), target);
  }

  // optional int32 ad_hurt_per = 27;
  if (has_ad_hurt_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ad_hurt_per(), target);
  }

  // optional int32 suck_hurt = 28;
  if (has_suck_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->suck_hurt(), target);
  }

  // optional int32 suck_hurt_per = 29;
  if (has_suck_hurt_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->suck_hurt_per(), target);
  }

  // optional int32 sub_shoot_mount_resist = 30;
  if (has_sub_shoot_mount_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->sub_shoot_mount_resist(), target);
  }

  // optional int32 sub_stun_resist = 31;
  if (has_sub_stun_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->sub_stun_resist(), target);
  }

  // optional int32 sub_hush_resist = 32;
  if (has_sub_hush_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->sub_hush_resist(), target);
  }

  // optional int32 sub_slow_resist = 33;
  if (has_sub_slow_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->sub_slow_resist(), target);
  }

  // optional int32 sub_poison_resist = 34;
  if (has_sub_poison_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->sub_poison_resist(), target);
  }

  // optional int32 ad_mobing_stat_per = 35;
  if (has_ad_mobing_stat_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->ad_mobing_stat_per(), target);
  }

  // optional int32 jin_per = 36;
  if (has_jin_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->jin_per(), target);
  }

  // optional int32 mu_per = 37;
  if (has_mu_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->mu_per(), target);
  }

  // optional int32 shui_per = 38;
  if (has_shui_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->shui_per(), target);
  }

  // optional int32 huo_per = 39;
  if (has_huo_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->huo_per(), target);
  }

  // optional int32 tu_per = 40;
  if (has_tu_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->tu_per(), target);
  }

  // optional int32 bleed_resist = 41;
  if (has_bleed_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->bleed_resist(), target);
  }

  // optional int32 sub_bleed_resist = 42;
  if (has_sub_bleed_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->sub_bleed_resist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpriteStatProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 max_life = 1;
    if (has_max_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_life());
    }

    // optional int32 max_stamina = 3;
    if (has_max_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_stamina());
    }

    // optional int32 attack = 4;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 defence = 5;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }

    // optional int32 crit = 6;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 anti_crit = 7;
    if (has_anti_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anti_crit());
    }

    // optional int32 hit = 8;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

    // optional int32 dodge = 9;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodge());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 move_speed = 10;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional int32 shoot_mount_resist = 11;
    if (has_shoot_mount_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoot_mount_resist());
    }

    // optional int32 stun_resist = 12;
    if (has_stun_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stun_resist());
    }

    // optional int32 hush_resist = 13;
    if (has_hush_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hush_resist());
    }

    // optional int32 slow_resist = 14;
    if (has_slow_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slow_resist());
    }

    // optional int32 poison_resist = 15;
    if (has_poison_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poison_resist());
    }

    // optional int32 max_life_per = 16;
    if (has_max_life_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_life_per());
    }

    // optional int32 attack_per = 17;
    if (has_attack_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_per());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 defence_per = 18;
    if (has_defence_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_per());
    }

    // optional int32 crit_per = 19;
    if (has_crit_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit_per());
    }

    // optional int32 anti_crit_per = 20;
    if (has_anti_crit_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anti_crit_per());
    }

    // optional int32 hit_per = 21;
    if (has_hit_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_per());
    }

    // optional int32 dodge_per = 22;
    if (has_dodge_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodge_per());
    }

    // optional int32 move_speed_per = 23;
    if (has_move_speed_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed_per());
    }

    // optional int32 anti_hurt = 24;
    if (has_anti_hurt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anti_hurt());
    }

    // optional int32 anti_hurt_per = 25;
    if (has_anti_hurt_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anti_hurt_per());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 ad_hurt = 26;
    if (has_ad_hurt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad_hurt());
    }

    // optional int32 ad_hurt_per = 27;
    if (has_ad_hurt_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad_hurt_per());
    }

    // optional int32 suck_hurt = 28;
    if (has_suck_hurt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suck_hurt());
    }

    // optional int32 suck_hurt_per = 29;
    if (has_suck_hurt_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suck_hurt_per());
    }

    // optional int32 sub_shoot_mount_resist = 30;
    if (has_sub_shoot_mount_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_shoot_mount_resist());
    }

    // optional int32 sub_stun_resist = 31;
    if (has_sub_stun_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_stun_resist());
    }

    // optional int32 sub_hush_resist = 32;
    if (has_sub_hush_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_hush_resist());
    }

    // optional int32 sub_slow_resist = 33;
    if (has_sub_slow_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_slow_resist());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 sub_poison_resist = 34;
    if (has_sub_poison_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_poison_resist());
    }

    // optional int32 ad_mobing_stat_per = 35;
    if (has_ad_mobing_stat_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad_mobing_stat_per());
    }

    // optional int32 jin_per = 36;
    if (has_jin_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jin_per());
    }

    // optional int32 mu_per = 37;
    if (has_mu_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mu_per());
    }

    // optional int32 shui_per = 38;
    if (has_shui_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shui_per());
    }

    // optional int32 huo_per = 39;
    if (has_huo_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huo_per());
    }

    // optional int32 tu_per = 40;
    if (has_tu_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tu_per());
    }

    // optional int32 bleed_resist = 41;
    if (has_bleed_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bleed_resist());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 sub_bleed_resist = 42;
    if (has_sub_bleed_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_bleed_resist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpriteStatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpriteStatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpriteStatProto::MergeFrom(const SpriteStatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_life()) {
      set_max_life(from.max_life());
    }
    if (from.has_max_stamina()) {
      set_max_stamina(from.max_stamina());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_anti_crit()) {
      set_anti_crit(from.anti_crit());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_shoot_mount_resist()) {
      set_shoot_mount_resist(from.shoot_mount_resist());
    }
    if (from.has_stun_resist()) {
      set_stun_resist(from.stun_resist());
    }
    if (from.has_hush_resist()) {
      set_hush_resist(from.hush_resist());
    }
    if (from.has_slow_resist()) {
      set_slow_resist(from.slow_resist());
    }
    if (from.has_poison_resist()) {
      set_poison_resist(from.poison_resist());
    }
    if (from.has_max_life_per()) {
      set_max_life_per(from.max_life_per());
    }
    if (from.has_attack_per()) {
      set_attack_per(from.attack_per());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_defence_per()) {
      set_defence_per(from.defence_per());
    }
    if (from.has_crit_per()) {
      set_crit_per(from.crit_per());
    }
    if (from.has_anti_crit_per()) {
      set_anti_crit_per(from.anti_crit_per());
    }
    if (from.has_hit_per()) {
      set_hit_per(from.hit_per());
    }
    if (from.has_dodge_per()) {
      set_dodge_per(from.dodge_per());
    }
    if (from.has_move_speed_per()) {
      set_move_speed_per(from.move_speed_per());
    }
    if (from.has_anti_hurt()) {
      set_anti_hurt(from.anti_hurt());
    }
    if (from.has_anti_hurt_per()) {
      set_anti_hurt_per(from.anti_hurt_per());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ad_hurt()) {
      set_ad_hurt(from.ad_hurt());
    }
    if (from.has_ad_hurt_per()) {
      set_ad_hurt_per(from.ad_hurt_per());
    }
    if (from.has_suck_hurt()) {
      set_suck_hurt(from.suck_hurt());
    }
    if (from.has_suck_hurt_per()) {
      set_suck_hurt_per(from.suck_hurt_per());
    }
    if (from.has_sub_shoot_mount_resist()) {
      set_sub_shoot_mount_resist(from.sub_shoot_mount_resist());
    }
    if (from.has_sub_stun_resist()) {
      set_sub_stun_resist(from.sub_stun_resist());
    }
    if (from.has_sub_hush_resist()) {
      set_sub_hush_resist(from.sub_hush_resist());
    }
    if (from.has_sub_slow_resist()) {
      set_sub_slow_resist(from.sub_slow_resist());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sub_poison_resist()) {
      set_sub_poison_resist(from.sub_poison_resist());
    }
    if (from.has_ad_mobing_stat_per()) {
      set_ad_mobing_stat_per(from.ad_mobing_stat_per());
    }
    if (from.has_jin_per()) {
      set_jin_per(from.jin_per());
    }
    if (from.has_mu_per()) {
      set_mu_per(from.mu_per());
    }
    if (from.has_shui_per()) {
      set_shui_per(from.shui_per());
    }
    if (from.has_huo_per()) {
      set_huo_per(from.huo_per());
    }
    if (from.has_tu_per()) {
      set_tu_per(from.tu_per());
    }
    if (from.has_bleed_resist()) {
      set_bleed_resist(from.bleed_resist());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_sub_bleed_resist()) {
      set_sub_bleed_resist(from.sub_bleed_resist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpriteStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteStatProto::CopyFrom(const SpriteStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteStatProto::IsInitialized() const {

  return true;
}

void SpriteStatProto::Swap(SpriteStatProto* other) {
  if (other != this) {
    std::swap(max_life_, other->max_life_);
    std::swap(max_stamina_, other->max_stamina_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(crit_, other->crit_);
    std::swap(anti_crit_, other->anti_crit_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(shoot_mount_resist_, other->shoot_mount_resist_);
    std::swap(stun_resist_, other->stun_resist_);
    std::swap(hush_resist_, other->hush_resist_);
    std::swap(slow_resist_, other->slow_resist_);
    std::swap(poison_resist_, other->poison_resist_);
    std::swap(max_life_per_, other->max_life_per_);
    std::swap(attack_per_, other->attack_per_);
    std::swap(defence_per_, other->defence_per_);
    std::swap(crit_per_, other->crit_per_);
    std::swap(anti_crit_per_, other->anti_crit_per_);
    std::swap(hit_per_, other->hit_per_);
    std::swap(dodge_per_, other->dodge_per_);
    std::swap(move_speed_per_, other->move_speed_per_);
    std::swap(anti_hurt_, other->anti_hurt_);
    std::swap(anti_hurt_per_, other->anti_hurt_per_);
    std::swap(ad_hurt_, other->ad_hurt_);
    std::swap(ad_hurt_per_, other->ad_hurt_per_);
    std::swap(suck_hurt_, other->suck_hurt_);
    std::swap(suck_hurt_per_, other->suck_hurt_per_);
    std::swap(sub_shoot_mount_resist_, other->sub_shoot_mount_resist_);
    std::swap(sub_stun_resist_, other->sub_stun_resist_);
    std::swap(sub_hush_resist_, other->sub_hush_resist_);
    std::swap(sub_slow_resist_, other->sub_slow_resist_);
    std::swap(sub_poison_resist_, other->sub_poison_resist_);
    std::swap(ad_mobing_stat_per_, other->ad_mobing_stat_per_);
    std::swap(jin_per_, other->jin_per_);
    std::swap(mu_per_, other->mu_per_);
    std::swap(shui_per_, other->shui_per_);
    std::swap(huo_per_, other->huo_per_);
    std::swap(tu_per_, other->tu_per_);
    std::swap(bleed_resist_, other->bleed_resist_);
    std::swap(sub_bleed_resist_, other->sub_bleed_resist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpriteStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpriteStatProto_descriptor_;
  metadata.reflection = SpriteStatProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleStatProto::kStatTypeFieldNumber;
const int SingleStatProto::kAmountFieldNumber;
const int SingleStatProto::kTypeFieldNumber;
#endif  // !_MSC_VER

SingleStatProto::SingleStatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleStatProto::InitAsDefaultInstance() {
}

SingleStatProto::SingleStatProto(const SingleStatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleStatProto::SharedCtor() {
  _cached_size_ = 0;
  stat_type_ = 0;
  amount_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleStatProto::~SingleStatProto() {
  SharedDtor();
}

void SingleStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleStatProto_descriptor_;
}

const SingleStatProto& SingleStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spritestat_2eproto();
  return *default_instance_;
}

SingleStatProto* SingleStatProto::default_instance_ = NULL;

SingleStatProto* SingleStatProto::New() const {
  return new SingleStatProto;
}

void SingleStatProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_type_ = 0;
    amount_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.StatType stat_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::StatType_IsValid(value)) {
            set_stat_type(static_cast< ::app::message::StatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.StatType stat_type = 1;
  if (has_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_type(), output);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.StatType stat_type = 1;
  if (has_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_type(), target);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleStatProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.StatType stat_type = 1;
    if (has_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_type());
    }

    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleStatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleStatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleStatProto::MergeFrom(const SingleStatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_type()) {
      set_stat_type(from.stat_type());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleStatProto::CopyFrom(const SingleStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleStatProto::IsInitialized() const {

  return true;
}

void SingleStatProto::Swap(SingleStatProto* other) {
  if (other != this) {
    std::swap(stat_type_, other->stat_type_);
    std::swap(amount_, other->amount_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleStatProto_descriptor_;
  metadata.reflection = SingleStatProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
