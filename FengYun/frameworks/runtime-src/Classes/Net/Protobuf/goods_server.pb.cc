// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goods_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "goods_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* GoodsServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsServerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentServerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentBaoShiServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentBaoShiServerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountEquipmentServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountEquipmentServerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShieldEquipmentServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShieldEquipmentServerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEquipmentServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEquipmentServerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaoShiServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaoShiServerProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GoodsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Quality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MedicineEfficacy_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_goods_5fserver_2eproto() {
  protobuf_AddDesc_goods_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "goods_server.proto");
  GOOGLE_CHECK(file != NULL);
  GoodsServerProto_descriptor_ = file->message_type(0);
  static const int GoodsServerProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, can_use_time_),
  };
  GoodsServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsServerProto_descriptor_,
      GoodsServerProto::default_instance_,
      GoodsServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsServerProto, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsServerProto));
  EquipmentServerProto_descriptor_ = file->message_type(1);
  static const int EquipmentServerProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, refined_upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, is_unmeltable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, ti_pin_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, xun_zhang_random_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, fashion_random_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, fashion_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, bao_shis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, bao_shi_version_),
  };
  EquipmentServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentServerProto_descriptor_,
      EquipmentServerProto::default_instance_,
      EquipmentServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentServerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentServerProto));
  EquipmentBaoShiServerProto_descriptor_ = file->message_type(2);
  static const int EquipmentBaoShiServerProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiServerProto, hole_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiServerProto, bao_shi_),
  };
  EquipmentBaoShiServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentBaoShiServerProto_descriptor_,
      EquipmentBaoShiServerProto::default_instance_,
      EquipmentBaoShiServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiServerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentBaoShiServerProto));
  MountEquipmentServerProto_descriptor_ = file->message_type(3);
  static const int MountEquipmentServerProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentServerProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentServerProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentServerProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentServerProto, refined_upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentServerProto, ti_pin_val_),
  };
  MountEquipmentServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountEquipmentServerProto_descriptor_,
      MountEquipmentServerProto::default_instance_,
      MountEquipmentServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentServerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountEquipmentServerProto));
  ShieldEquipmentServerProto_descriptor_ = file->message_type(4);
  static const int ShieldEquipmentServerProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentServerProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentServerProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentServerProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentServerProto, refined_upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentServerProto, ti_pin_val_),
  };
  ShieldEquipmentServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShieldEquipmentServerProto_descriptor_,
      ShieldEquipmentServerProto::default_instance_,
      ShieldEquipmentServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentServerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShieldEquipmentServerProto));
  PetEquipmentServerProto_descriptor_ = file->message_type(5);
  static const int PetEquipmentServerProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentServerProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentServerProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentServerProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentServerProto, refined_upgrade_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentServerProto, ti_pin_val_),
  };
  PetEquipmentServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEquipmentServerProto_descriptor_,
      PetEquipmentServerProto::default_instance_,
      PetEquipmentServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentServerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEquipmentServerProto));
  BaoShiServerProto_descriptor_ = file->message_type(6);
  static const int BaoShiServerProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, basestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, attachstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, totalstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, fightingamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, bao_shi_version_),
  };
  BaoShiServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaoShiServerProto_descriptor_,
      BaoShiServerProto::default_instance_,
      BaoShiServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiServerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaoShiServerProto));
  GoodsType_descriptor_ = file->enum_type(0);
  Quality_descriptor_ = file->enum_type(1);
  MedicineEfficacy_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_goods_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsServerProto_descriptor_, &GoodsServerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentServerProto_descriptor_, &EquipmentServerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentBaoShiServerProto_descriptor_, &EquipmentBaoShiServerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountEquipmentServerProto_descriptor_, &MountEquipmentServerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShieldEquipmentServerProto_descriptor_, &ShieldEquipmentServerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEquipmentServerProto_descriptor_, &PetEquipmentServerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaoShiServerProto_descriptor_, &BaoShiServerProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_goods_5fserver_2eproto() {
  delete GoodsServerProto::default_instance_;
  delete GoodsServerProto_reflection_;
  delete EquipmentServerProto::default_instance_;
  delete EquipmentServerProto_reflection_;
  delete EquipmentBaoShiServerProto::default_instance_;
  delete EquipmentBaoShiServerProto_reflection_;
  delete MountEquipmentServerProto::default_instance_;
  delete MountEquipmentServerProto_reflection_;
  delete ShieldEquipmentServerProto::default_instance_;
  delete ShieldEquipmentServerProto_reflection_;
  delete PetEquipmentServerProto::default_instance_;
  delete PetEquipmentServerProto_reflection_;
  delete BaoShiServerProto::default_instance_;
  delete BaoShiServerProto_reflection_;
}

void protobuf_AddDesc_goods_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_spritestat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022goods_server.proto\022\013app.message\032\020sprit"
    "estat.proto\"\200\001\n\020GoodsServerProto\022\n\n\002id\030\001"
    " \001(\005\022\020\n\004type\030\002 \001(\005B\002\030\001\022\r\n\005count\030\003 \001(\005\022\016\n"
    "\006binded\030\004 \001(\010\022\023\n\013expire_time\030\005 \001(\003\022\024\n\014ca"
    "n_use_time\030\006 \001(\003*\004\0102\020d\"\342\003\n\024EquipmentServ"
    "erProto\022\025\n\rrefined_times\030\001 \001(\005\022\035\n\025refine"
    "d_upgrade_times\030\005 \001(\005\022\017\n\007quality\030\007 \001(\005\022\027"
    "\n\017added_stat_type\030\010 \001(\005\022\025\n\ris_unmeltable"
    "\030\t \001(\010\022\022\n\nti_pin_val\030\n \001(\005\022<\n\026xun_zhang_"
    "random_stats\030\013 \003(\0132\034.app.message.SingleS"
    "tatProto\022:\n\024fashion_random_stats\030\014 \003(\0132\034"
    ".app.message.SingleStatProto\022\033\n\023fashion_"
    "expire_time\030\r \001(\003\0229\n\010bao_shis\030\016 \003(\0132\'.ap"
    "p.message.EquipmentBaoShiServerProto\022\027\n\017"
    "bao_shi_version\030\017 \001(\0032T\n\ngoodsProto\022\035.ap"
    "p.message.GoodsServerProto\0303 \001(\0132!.app.m"
    "essage.EquipmentServerProto\"^\n\032Equipment"
    "BaoShiServerProto\022\020\n\010hole_num\030\001 \001(\005\022.\n\007b"
    "ao_shi\030\002 \001(\0132\035.app.message.GoodsServerPr"
    "oto\"\352\001\n\031MountEquipmentServerProto\022\025\n\rref"
    "ined_times\030\001 \001(\005\022\027\n\017added_stat_type\030\002 \001("
    "\005\022\017\n\007quality\030\003 \001(\005\022\035\n\025refined_upgrade_ti"
    "mes\030\004 \001(\005\022\022\n\nti_pin_val\030\005 \001(\0052Y\n\ngoodsPr"
    "oto\022\035.app.message.GoodsServerProto\0304 \001(\013"
    "2&.app.message.MountEquipmentServerProto"
    "\"\354\001\n\032ShieldEquipmentServerProto\022\025\n\rrefin"
    "ed_times\030\001 \001(\005\022\027\n\017added_stat_type\030\002 \001(\005\022"
    "\017\n\007quality\030\003 \001(\005\022\035\n\025refined_upgrade_time"
    "s\030\004 \001(\005\022\022\n\nti_pin_val\030\005 \001(\0052Z\n\ngoodsProt"
    "o\022\035.app.message.GoodsServerProto\0306 \001(\0132\'"
    ".app.message.ShieldEquipmentServerProto\""
    "\346\001\n\027PetEquipmentServerProto\022\025\n\rrefined_t"
    "imes\030\001 \001(\005\022\027\n\017added_stat_type\030\002 \001(\005\022\017\n\007q"
    "uality\030\003 \001(\005\022\035\n\025refined_upgrade_times\030\004 "
    "\001(\005\022\022\n\nti_pin_val\030\005 \001(\0052W\n\ngoodsProto\022\035."
    "app.message.GoodsServerProto\0305 \001(\0132$.app"
    ".message.PetEquipmentServerProto\"\327\002\n\021Bao"
    "ShiServerProto\022\014\n\004icon\030\001 \001(\t\022\014\n\004name\030\002 \001"
    "(\t\022.\n\010baseStat\030\003 \003(\0132\034.app.message.Singl"
    "eStatProto\0220\n\nattachStat\030\004 \001(\0132\034.app.mes"
    "sage.SingleStatProto\022/\n\ttotalStat\030\005 \001(\0132"
    "\034.app.message.SpriteStatProto\022\026\n\016fightin"
    "gAmount\030\006 \001(\005\022\017\n\007quality\030\007 \001(\005\022\027\n\017bao_sh"
    "i_version\030\010 \001(\0032Q\n\ngoodsProto\022\035.app.mess"
    "age.GoodsServerProto\0307 \001(\0132\036.app.message"
    ".BaoShiServerProto*\274\006\n\tGoodsType\022\r\n\tEQUI"
    "PMENT\020\001\022\014\n\010MEDICINE\020\002\022\007\n\003GEM\020\003\022\022\n\016TRANSP"
    "ORTATION\020\004\022\r\n\tTASK_BOOK\020\005\022\016\n\nSPELL_BOOK\020"
    "\006\022\013\n\007PACKAGE\020\007\022\n\n\006SCRIPT\020\010\022\t\n\005PANEL\020\t\022\n\n"
    "\006NORMAL\020\n\022\010\n\004TASK\020\013\022\014\n\010MATERIAL\020\014\022\023\n\017MOU"
    "NT_EQUIPMENT\020\r\022\t\n\005XINFA\020\016\022\023\n\017YUANBAO_PAC"
    "KAGE\020\017\022\017\n\013LEGEND_CARD\020\020\022\r\n\tCRIT_CARD\020\021\022\020"
    "\n\014REFINED_STAT\020\022\022\t\n\005BLESS\020\023\022\021\n\rPET_EQUIP"
    "MENT\020\024\022\016\n\nDAILY_CARD\020\025\022\017\n\013JIN_JIE_DAN\020\026\022"
    "\026\n\022JIN_JIE_LUCKY_CARD\020\027\022\021\n\rMARRIAGE_GIFT"
    "\020\030\022%\n!MULTI_PRIZE_ON_LIMITED_TIME_GOODS\020"
    "\031\022\r\n\tFULI_CARD\020\032\022\r\n\tCHRISTMAS\020\033\022\024\n\020SHIEL"
    "D_EQUIPMENT\020\034\022\037\n\033QIAN_NENG_HUAN_HUA_LIMI"
    "T_UP\020\035\022\027\n\023MONTHLY_CARD_ACTIVE\020\036\022\013\n\007BAO_S"
    "HI\020\037\022&\n\"PET_TONG_LING_GIFT_SPELL_EXP_GOO"
    "DS\020 \022\r\n\tEXP_GOODS\0202\022\017\n\013MONEY_GOODS\0203\022\022\n\016"
    "REAL_AIR_GOODS\0204\022\017\n\013LIJIN_GOODS\0205\022\021\n\rYUA"
    "NBAO_GOODS\0206\022\024\n\020SUPER_WEAPON_GEM\0207\022\021\n\rBI"
    "ANPAO_GOODS\0208\022\023\n\017NI_DAO_QIAN_KUN\0209\022\014\n\010FI"
    "REWORK\020:\022\010\n\004CAKE\020;\022\016\n\nLING_GUANG\020=\022\033\n\027CH"
    "OU_JIANG_FAN_LI_CHIPS\020>\022\013\n\007SPECIAL\020c\022\013\n\007"
    "UPGRADE\020x*V\n\007Quality\022\t\n\005WHITE\020\000\022\t\n\005GREEN"
    "\020\001\022\010\n\004BLUE\020\002\022\n\n\006PURPLE\020\003\022\n\n\006ORANGE\020\004\022\007\n\003"
    "RED\020\005\022\n\n\006GOLDEN\020\006*\350\002\n\020MedicineEfficacy\022\010"
    "\n\004LIFE\020\001\022\010\n\004BUFF\020\002\022\r\n\tPK_AMOUNT\020\003\022\007\n\003EXP"
    "\020\005\022\014\n\010REAL_AIR\020\006\022\r\n\tADD_MONEY\020\007\022\r\n\tADD_L"
    "IJIN\020\010\022\020\n\014GUILD_LILIAN\020\t\022\026\n\022GUILD_CONTRI"
    "BUTION\020\n\022\013\n\007STAMINA\020\013\022\017\n\013JUMP_SHIELD\020\014\022\r"
    "\n\tADD_LEVEL\020\025\022\014\n\010ADD_STAT\020\026\022\031\n\025ADD_SPELL"
    "_LEVEL_LIMIT\020\027\022\026\n\022ADD_EXP_NEXT_LEVEL\020\030\022\020"
    "\n\014ADD_PET_STAT\020\031\022\035\n\031UPGRADE_CLOAK_SMALL_"
    "LEVEL\020\032\022\035\n\031UPGRADE_DEMON_SMALL_LEVEL\020\033\022\024"
    "\n\020PET_MEIRENZHIXIN\020\034B$\n\014app.protobufB\022Go"
    "odsServerContentH\001", 3138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goods_server.proto", &protobuf_RegisterTypes);
  GoodsServerProto::default_instance_ = new GoodsServerProto();
  EquipmentServerProto::default_instance_ = new EquipmentServerProto();
  EquipmentBaoShiServerProto::default_instance_ = new EquipmentBaoShiServerProto();
  MountEquipmentServerProto::default_instance_ = new MountEquipmentServerProto();
  ShieldEquipmentServerProto::default_instance_ = new ShieldEquipmentServerProto();
  PetEquipmentServerProto::default_instance_ = new PetEquipmentServerProto();
  BaoShiServerProto::default_instance_ = new BaoShiServerProto();
  GoodsServerProto::default_instance_->InitAsDefaultInstance();
  EquipmentServerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::app::message::GoodsServerProto::default_instance(),
    51, 11, false, false,
    &::app::message::EquipmentServerProto::default_instance());
  EquipmentBaoShiServerProto::default_instance_->InitAsDefaultInstance();
  MountEquipmentServerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::app::message::GoodsServerProto::default_instance(),
    52, 11, false, false,
    &::app::message::MountEquipmentServerProto::default_instance());
  ShieldEquipmentServerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::app::message::GoodsServerProto::default_instance(),
    54, 11, false, false,
    &::app::message::ShieldEquipmentServerProto::default_instance());
  PetEquipmentServerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::app::message::GoodsServerProto::default_instance(),
    53, 11, false, false,
    &::app::message::PetEquipmentServerProto::default_instance());
  BaoShiServerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::app::message::GoodsServerProto::default_instance(),
    55, 11, false, false,
    &::app::message::BaoShiServerProto::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_goods_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_goods_5fserver_2eproto {
  StaticDescriptorInitializer_goods_5fserver_2eproto() {
    protobuf_AddDesc_goods_5fserver_2eproto();
  }
} static_descriptor_initializer_goods_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* GoodsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsType_descriptor_;
}
bool GoodsType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 62:
    case 99:
    case 120:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Quality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quality_descriptor_;
}
bool Quality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MedicineEfficacy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicineEfficacy_descriptor_;
}
bool MedicineEfficacy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsServerProto::kIdFieldNumber;
const int GoodsServerProto::kTypeFieldNumber;
const int GoodsServerProto::kCountFieldNumber;
const int GoodsServerProto::kBindedFieldNumber;
const int GoodsServerProto::kExpireTimeFieldNumber;
const int GoodsServerProto::kCanUseTimeFieldNumber;
#endif  // !_MSC_VER

GoodsServerProto::GoodsServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsServerProto::InitAsDefaultInstance() {
}

GoodsServerProto::GoodsServerProto(const GoodsServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsServerProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  count_ = 0;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  can_use_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsServerProto::~GoodsServerProto() {
  SharedDtor();
}

void GoodsServerProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsServerProto_descriptor_;
}

const GoodsServerProto& GoodsServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fserver_2eproto();
  return *default_instance_;
}

GoodsServerProto* GoodsServerProto::default_instance_ = NULL;

GoodsServerProto* GoodsServerProto::New() const {
  return new GoodsServerProto;
}

void GoodsServerProto::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    count_ = 0;
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    can_use_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_binded;
        break;
      }

      // optional bool binded = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_use_time;
        break;
      }

      // optional int64 can_use_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_use_time_)));
          set_has_can_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2 [deprecated = true];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional bool binded = 4;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->binded(), output);
  }

  // optional int64 expire_time = 5;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expire_time(), output);
  }

  // optional int64 can_use_time = 6;
  if (has_can_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->can_use_time(), output);
  }

  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2 [deprecated = true];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional bool binded = 4;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->binded(), target);
  }

  // optional int64 expire_time = 5;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expire_time(), target);
  }

  // optional int64 can_use_time = 6;
  if (has_can_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->can_use_time(), target);
  }

  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2 [deprecated = true];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool binded = 4;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 5;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional int64 can_use_time = 6;
    if (has_can_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_use_time());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsServerProto::MergeFrom(const GoodsServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_can_use_time()) {
      set_can_use_time(from.can_use_time());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsServerProto::CopyFrom(const GoodsServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsServerProto::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void GoodsServerProto::Swap(GoodsServerProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(can_use_time_, other->can_use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata GoodsServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsServerProto_descriptor_;
  metadata.reflection = GoodsServerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentServerProto::kRefinedTimesFieldNumber;
const int EquipmentServerProto::kRefinedUpgradeTimesFieldNumber;
const int EquipmentServerProto::kQualityFieldNumber;
const int EquipmentServerProto::kAddedStatTypeFieldNumber;
const int EquipmentServerProto::kIsUnmeltableFieldNumber;
const int EquipmentServerProto::kTiPinValFieldNumber;
const int EquipmentServerProto::kXunZhangRandomStatsFieldNumber;
const int EquipmentServerProto::kFashionRandomStatsFieldNumber;
const int EquipmentServerProto::kFashionExpireTimeFieldNumber;
const int EquipmentServerProto::kBaoShisFieldNumber;
const int EquipmentServerProto::kBaoShiVersionFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int EquipmentServerProto::kGoodsProtoFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::app::message::GoodsServerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::app::message::EquipmentServerProto >, 11, false >
  EquipmentServerProto::goodsProto(kGoodsProtoFieldNumber, ::app::message::EquipmentServerProto::default_instance());
EquipmentServerProto::EquipmentServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentServerProto::InitAsDefaultInstance() {
}

EquipmentServerProto::EquipmentServerProto(const EquipmentServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentServerProto::SharedCtor() {
  _cached_size_ = 0;
  refined_times_ = 0;
  refined_upgrade_times_ = 0;
  quality_ = 0;
  added_stat_type_ = 0;
  is_unmeltable_ = false;
  ti_pin_val_ = 0;
  fashion_expire_time_ = GOOGLE_LONGLONG(0);
  bao_shi_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentServerProto::~EquipmentServerProto() {
  SharedDtor();
}

void EquipmentServerProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentServerProto_descriptor_;
}

const EquipmentServerProto& EquipmentServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fserver_2eproto();
  return *default_instance_;
}

EquipmentServerProto* EquipmentServerProto::default_instance_ = NULL;

EquipmentServerProto* EquipmentServerProto::New() const {
  return new EquipmentServerProto;
}

void EquipmentServerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refined_times_ = 0;
    refined_upgrade_times_ = 0;
    quality_ = 0;
    added_stat_type_ = 0;
    is_unmeltable_ = false;
    ti_pin_val_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fashion_expire_time_ = GOOGLE_LONGLONG(0);
    bao_shi_version_ = GOOGLE_LONGLONG(0);
  }
  xun_zhang_random_stats_.Clear();
  fashion_random_stats_.Clear();
  bao_shis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refined_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refined_upgrade_times;
        break;
      }

      // optional int32 refined_upgrade_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_upgrade_times_)));
          set_has_refined_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_unmeltable;
        break;
      }

      // optional bool is_unmeltable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_unmeltable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unmeltable_)));
          set_has_is_unmeltable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_xun_zhang_random_stats;
        break;
      }

      // repeated .app.message.SingleStatProto xun_zhang_random_stats = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xun_zhang_random_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xun_zhang_random_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_xun_zhang_random_stats;
        if (input->ExpectTag(98)) goto parse_fashion_random_stats;
        break;
      }

      // repeated .app.message.SingleStatProto fashion_random_stats = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion_random_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashion_random_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fashion_random_stats;
        if (input->ExpectTag(104)) goto parse_fashion_expire_time;
        break;
      }

      // optional int64 fashion_expire_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fashion_expire_time_)));
          set_has_fashion_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bao_shis;
        break;
      }

      // repeated .app.message.EquipmentBaoShiServerProto bao_shis = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bao_shis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bao_shis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bao_shis;
        if (input->ExpectTag(120)) goto parse_bao_shi_version;
        break;
      }

      // optional int64 bao_shi_version = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bao_shi_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bao_shi_version_)));
          set_has_bao_shi_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refined_times(), output);
  }

  // optional int32 refined_upgrade_times = 5;
  if (has_refined_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refined_upgrade_times(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  // optional int32 added_stat_type = 8;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->added_stat_type(), output);
  }

  // optional bool is_unmeltable = 9;
  if (has_is_unmeltable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_unmeltable(), output);
  }

  // optional int32 ti_pin_val = 10;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ti_pin_val(), output);
  }

  // repeated .app.message.SingleStatProto xun_zhang_random_stats = 11;
  for (int i = 0; i < this->xun_zhang_random_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->xun_zhang_random_stats(i), output);
  }

  // repeated .app.message.SingleStatProto fashion_random_stats = 12;
  for (int i = 0; i < this->fashion_random_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fashion_random_stats(i), output);
  }

  // optional int64 fashion_expire_time = 13;
  if (has_fashion_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->fashion_expire_time(), output);
  }

  // repeated .app.message.EquipmentBaoShiServerProto bao_shis = 14;
  for (int i = 0; i < this->bao_shis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->bao_shis(i), output);
  }

  // optional int64 bao_shi_version = 15;
  if (has_bao_shi_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->bao_shi_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refined_times(), target);
  }

  // optional int32 refined_upgrade_times = 5;
  if (has_refined_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refined_upgrade_times(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  // optional int32 added_stat_type = 8;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->added_stat_type(), target);
  }

  // optional bool is_unmeltable = 9;
  if (has_is_unmeltable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_unmeltable(), target);
  }

  // optional int32 ti_pin_val = 10;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ti_pin_val(), target);
  }

  // repeated .app.message.SingleStatProto xun_zhang_random_stats = 11;
  for (int i = 0; i < this->xun_zhang_random_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->xun_zhang_random_stats(i), target);
  }

  // repeated .app.message.SingleStatProto fashion_random_stats = 12;
  for (int i = 0; i < this->fashion_random_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fashion_random_stats(i), target);
  }

  // optional int64 fashion_expire_time = 13;
  if (has_fashion_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->fashion_expire_time(), target);
  }

  // repeated .app.message.EquipmentBaoShiServerProto bao_shis = 14;
  for (int i = 0; i < this->bao_shis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->bao_shis(i), target);
  }

  // optional int64 bao_shi_version = 15;
  if (has_bao_shi_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->bao_shi_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refined_times = 1;
    if (has_refined_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

    // optional int32 refined_upgrade_times = 5;
    if (has_refined_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_upgrade_times());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 added_stat_type = 8;
    if (has_added_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional bool is_unmeltable = 9;
    if (has_is_unmeltable()) {
      total_size += 1 + 1;
    }

    // optional int32 ti_pin_val = 10;
    if (has_ti_pin_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 fashion_expire_time = 13;
    if (has_fashion_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fashion_expire_time());
    }

    // optional int64 bao_shi_version = 15;
    if (has_bao_shi_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bao_shi_version());
    }

  }
  // repeated .app.message.SingleStatProto xun_zhang_random_stats = 11;
  total_size += 1 * this->xun_zhang_random_stats_size();
  for (int i = 0; i < this->xun_zhang_random_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xun_zhang_random_stats(i));
  }

  // repeated .app.message.SingleStatProto fashion_random_stats = 12;
  total_size += 1 * this->fashion_random_stats_size();
  for (int i = 0; i < this->fashion_random_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashion_random_stats(i));
  }

  // repeated .app.message.EquipmentBaoShiServerProto bao_shis = 14;
  total_size += 1 * this->bao_shis_size();
  for (int i = 0; i < this->bao_shis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bao_shis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentServerProto::MergeFrom(const EquipmentServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  xun_zhang_random_stats_.MergeFrom(from.xun_zhang_random_stats_);
  fashion_random_stats_.MergeFrom(from.fashion_random_stats_);
  bao_shis_.MergeFrom(from.bao_shis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
    if (from.has_refined_upgrade_times()) {
      set_refined_upgrade_times(from.refined_upgrade_times());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_is_unmeltable()) {
      set_is_unmeltable(from.is_unmeltable());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fashion_expire_time()) {
      set_fashion_expire_time(from.fashion_expire_time());
    }
    if (from.has_bao_shi_version()) {
      set_bao_shi_version(from.bao_shi_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentServerProto::CopyFrom(const EquipmentServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentServerProto::IsInitialized() const {

  for (int i = 0; i < bao_shis_size(); i++) {
    if (!this->bao_shis(i).IsInitialized()) return false;
  }
  return true;
}

void EquipmentServerProto::Swap(EquipmentServerProto* other) {
  if (other != this) {
    std::swap(refined_times_, other->refined_times_);
    std::swap(refined_upgrade_times_, other->refined_upgrade_times_);
    std::swap(quality_, other->quality_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(is_unmeltable_, other->is_unmeltable_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    xun_zhang_random_stats_.Swap(&other->xun_zhang_random_stats_);
    fashion_random_stats_.Swap(&other->fashion_random_stats_);
    std::swap(fashion_expire_time_, other->fashion_expire_time_);
    bao_shis_.Swap(&other->bao_shis_);
    std::swap(bao_shi_version_, other->bao_shi_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentServerProto_descriptor_;
  metadata.reflection = EquipmentServerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentBaoShiServerProto::kHoleNumFieldNumber;
const int EquipmentBaoShiServerProto::kBaoShiFieldNumber;
#endif  // !_MSC_VER

EquipmentBaoShiServerProto::EquipmentBaoShiServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentBaoShiServerProto::InitAsDefaultInstance() {
  bao_shi_ = const_cast< ::app::message::GoodsServerProto*>(&::app::message::GoodsServerProto::default_instance());
}

EquipmentBaoShiServerProto::EquipmentBaoShiServerProto(const EquipmentBaoShiServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentBaoShiServerProto::SharedCtor() {
  _cached_size_ = 0;
  hole_num_ = 0;
  bao_shi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentBaoShiServerProto::~EquipmentBaoShiServerProto() {
  SharedDtor();
}

void EquipmentBaoShiServerProto::SharedDtor() {
  if (this != default_instance_) {
    delete bao_shi_;
  }
}

void EquipmentBaoShiServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentBaoShiServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentBaoShiServerProto_descriptor_;
}

const EquipmentBaoShiServerProto& EquipmentBaoShiServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fserver_2eproto();
  return *default_instance_;
}

EquipmentBaoShiServerProto* EquipmentBaoShiServerProto::default_instance_ = NULL;

EquipmentBaoShiServerProto* EquipmentBaoShiServerProto::New() const {
  return new EquipmentBaoShiServerProto;
}

void EquipmentBaoShiServerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hole_num_ = 0;
    if (has_bao_shi()) {
      if (bao_shi_ != NULL) bao_shi_->::app::message::GoodsServerProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentBaoShiServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hole_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_num_)));
          set_has_hole_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bao_shi;
        break;
      }

      // optional .app.message.GoodsServerProto bao_shi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bao_shi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bao_shi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentBaoShiServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hole_num = 1;
  if (has_hole_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hole_num(), output);
  }

  // optional .app.message.GoodsServerProto bao_shi = 2;
  if (has_bao_shi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bao_shi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentBaoShiServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hole_num = 1;
  if (has_hole_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hole_num(), target);
  }

  // optional .app.message.GoodsServerProto bao_shi = 2;
  if (has_bao_shi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bao_shi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentBaoShiServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hole_num = 1;
    if (has_hole_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_num());
    }

    // optional .app.message.GoodsServerProto bao_shi = 2;
    if (has_bao_shi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bao_shi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentBaoShiServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentBaoShiServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentBaoShiServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentBaoShiServerProto::MergeFrom(const EquipmentBaoShiServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hole_num()) {
      set_hole_num(from.hole_num());
    }
    if (from.has_bao_shi()) {
      mutable_bao_shi()->::app::message::GoodsServerProto::MergeFrom(from.bao_shi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentBaoShiServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentBaoShiServerProto::CopyFrom(const EquipmentBaoShiServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentBaoShiServerProto::IsInitialized() const {

  if (has_bao_shi()) {
    if (!this->bao_shi().IsInitialized()) return false;
  }
  return true;
}

void EquipmentBaoShiServerProto::Swap(EquipmentBaoShiServerProto* other) {
  if (other != this) {
    std::swap(hole_num_, other->hole_num_);
    std::swap(bao_shi_, other->bao_shi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentBaoShiServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentBaoShiServerProto_descriptor_;
  metadata.reflection = EquipmentBaoShiServerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountEquipmentServerProto::kRefinedTimesFieldNumber;
const int MountEquipmentServerProto::kAddedStatTypeFieldNumber;
const int MountEquipmentServerProto::kQualityFieldNumber;
const int MountEquipmentServerProto::kRefinedUpgradeTimesFieldNumber;
const int MountEquipmentServerProto::kTiPinValFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int MountEquipmentServerProto::kGoodsProtoFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::app::message::GoodsServerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::app::message::MountEquipmentServerProto >, 11, false >
  MountEquipmentServerProto::goodsProto(kGoodsProtoFieldNumber, ::app::message::MountEquipmentServerProto::default_instance());
MountEquipmentServerProto::MountEquipmentServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountEquipmentServerProto::InitAsDefaultInstance() {
}

MountEquipmentServerProto::MountEquipmentServerProto(const MountEquipmentServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountEquipmentServerProto::SharedCtor() {
  _cached_size_ = 0;
  refined_times_ = 0;
  added_stat_type_ = 0;
  quality_ = 0;
  refined_upgrade_times_ = 0;
  ti_pin_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountEquipmentServerProto::~MountEquipmentServerProto() {
  SharedDtor();
}

void MountEquipmentServerProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountEquipmentServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountEquipmentServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountEquipmentServerProto_descriptor_;
}

const MountEquipmentServerProto& MountEquipmentServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fserver_2eproto();
  return *default_instance_;
}

MountEquipmentServerProto* MountEquipmentServerProto::default_instance_ = NULL;

MountEquipmentServerProto* MountEquipmentServerProto::New() const {
  return new MountEquipmentServerProto;
}

void MountEquipmentServerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refined_times_ = 0;
    added_stat_type_ = 0;
    quality_ = 0;
    refined_upgrade_times_ = 0;
    ti_pin_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountEquipmentServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refined_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refined_upgrade_times;
        break;
      }

      // optional int32 refined_upgrade_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_upgrade_times_)));
          set_has_refined_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountEquipmentServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refined_times(), output);
  }

  // optional int32 added_stat_type = 2;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->added_stat_type(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int32 refined_upgrade_times = 4;
  if (has_refined_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refined_upgrade_times(), output);
  }

  // optional int32 ti_pin_val = 5;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ti_pin_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountEquipmentServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refined_times(), target);
  }

  // optional int32 added_stat_type = 2;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->added_stat_type(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int32 refined_upgrade_times = 4;
  if (has_refined_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refined_upgrade_times(), target);
  }

  // optional int32 ti_pin_val = 5;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ti_pin_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountEquipmentServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refined_times = 1;
    if (has_refined_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

    // optional int32 added_stat_type = 2;
    if (has_added_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 refined_upgrade_times = 4;
    if (has_refined_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_upgrade_times());
    }

    // optional int32 ti_pin_val = 5;
    if (has_ti_pin_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountEquipmentServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountEquipmentServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountEquipmentServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountEquipmentServerProto::MergeFrom(const MountEquipmentServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_refined_upgrade_times()) {
      set_refined_upgrade_times(from.refined_upgrade_times());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountEquipmentServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountEquipmentServerProto::CopyFrom(const MountEquipmentServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountEquipmentServerProto::IsInitialized() const {

  return true;
}

void MountEquipmentServerProto::Swap(MountEquipmentServerProto* other) {
  if (other != this) {
    std::swap(refined_times_, other->refined_times_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(quality_, other->quality_);
    std::swap(refined_upgrade_times_, other->refined_upgrade_times_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountEquipmentServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountEquipmentServerProto_descriptor_;
  metadata.reflection = MountEquipmentServerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShieldEquipmentServerProto::kRefinedTimesFieldNumber;
const int ShieldEquipmentServerProto::kAddedStatTypeFieldNumber;
const int ShieldEquipmentServerProto::kQualityFieldNumber;
const int ShieldEquipmentServerProto::kRefinedUpgradeTimesFieldNumber;
const int ShieldEquipmentServerProto::kTiPinValFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ShieldEquipmentServerProto::kGoodsProtoFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::app::message::GoodsServerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::app::message::ShieldEquipmentServerProto >, 11, false >
  ShieldEquipmentServerProto::goodsProto(kGoodsProtoFieldNumber, ::app::message::ShieldEquipmentServerProto::default_instance());
ShieldEquipmentServerProto::ShieldEquipmentServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShieldEquipmentServerProto::InitAsDefaultInstance() {
}

ShieldEquipmentServerProto::ShieldEquipmentServerProto(const ShieldEquipmentServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShieldEquipmentServerProto::SharedCtor() {
  _cached_size_ = 0;
  refined_times_ = 0;
  added_stat_type_ = 0;
  quality_ = 0;
  refined_upgrade_times_ = 0;
  ti_pin_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShieldEquipmentServerProto::~ShieldEquipmentServerProto() {
  SharedDtor();
}

void ShieldEquipmentServerProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShieldEquipmentServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShieldEquipmentServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShieldEquipmentServerProto_descriptor_;
}

const ShieldEquipmentServerProto& ShieldEquipmentServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fserver_2eproto();
  return *default_instance_;
}

ShieldEquipmentServerProto* ShieldEquipmentServerProto::default_instance_ = NULL;

ShieldEquipmentServerProto* ShieldEquipmentServerProto::New() const {
  return new ShieldEquipmentServerProto;
}

void ShieldEquipmentServerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refined_times_ = 0;
    added_stat_type_ = 0;
    quality_ = 0;
    refined_upgrade_times_ = 0;
    ti_pin_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShieldEquipmentServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refined_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refined_upgrade_times;
        break;
      }

      // optional int32 refined_upgrade_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_upgrade_times_)));
          set_has_refined_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShieldEquipmentServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refined_times(), output);
  }

  // optional int32 added_stat_type = 2;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->added_stat_type(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int32 refined_upgrade_times = 4;
  if (has_refined_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refined_upgrade_times(), output);
  }

  // optional int32 ti_pin_val = 5;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ti_pin_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShieldEquipmentServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refined_times(), target);
  }

  // optional int32 added_stat_type = 2;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->added_stat_type(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int32 refined_upgrade_times = 4;
  if (has_refined_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refined_upgrade_times(), target);
  }

  // optional int32 ti_pin_val = 5;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ti_pin_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShieldEquipmentServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refined_times = 1;
    if (has_refined_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

    // optional int32 added_stat_type = 2;
    if (has_added_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 refined_upgrade_times = 4;
    if (has_refined_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_upgrade_times());
    }

    // optional int32 ti_pin_val = 5;
    if (has_ti_pin_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldEquipmentServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShieldEquipmentServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShieldEquipmentServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShieldEquipmentServerProto::MergeFrom(const ShieldEquipmentServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_refined_upgrade_times()) {
      set_refined_upgrade_times(from.refined_upgrade_times());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShieldEquipmentServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShieldEquipmentServerProto::CopyFrom(const ShieldEquipmentServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldEquipmentServerProto::IsInitialized() const {

  return true;
}

void ShieldEquipmentServerProto::Swap(ShieldEquipmentServerProto* other) {
  if (other != this) {
    std::swap(refined_times_, other->refined_times_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(quality_, other->quality_);
    std::swap(refined_upgrade_times_, other->refined_upgrade_times_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShieldEquipmentServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShieldEquipmentServerProto_descriptor_;
  metadata.reflection = ShieldEquipmentServerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEquipmentServerProto::kRefinedTimesFieldNumber;
const int PetEquipmentServerProto::kAddedStatTypeFieldNumber;
const int PetEquipmentServerProto::kQualityFieldNumber;
const int PetEquipmentServerProto::kRefinedUpgradeTimesFieldNumber;
const int PetEquipmentServerProto::kTiPinValFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PetEquipmentServerProto::kGoodsProtoFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::app::message::GoodsServerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::app::message::PetEquipmentServerProto >, 11, false >
  PetEquipmentServerProto::goodsProto(kGoodsProtoFieldNumber, ::app::message::PetEquipmentServerProto::default_instance());
PetEquipmentServerProto::PetEquipmentServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetEquipmentServerProto::InitAsDefaultInstance() {
}

PetEquipmentServerProto::PetEquipmentServerProto(const PetEquipmentServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetEquipmentServerProto::SharedCtor() {
  _cached_size_ = 0;
  refined_times_ = 0;
  added_stat_type_ = 0;
  quality_ = 0;
  refined_upgrade_times_ = 0;
  ti_pin_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEquipmentServerProto::~PetEquipmentServerProto() {
  SharedDtor();
}

void PetEquipmentServerProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEquipmentServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEquipmentServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEquipmentServerProto_descriptor_;
}

const PetEquipmentServerProto& PetEquipmentServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fserver_2eproto();
  return *default_instance_;
}

PetEquipmentServerProto* PetEquipmentServerProto::default_instance_ = NULL;

PetEquipmentServerProto* PetEquipmentServerProto::New() const {
  return new PetEquipmentServerProto;
}

void PetEquipmentServerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refined_times_ = 0;
    added_stat_type_ = 0;
    quality_ = 0;
    refined_upgrade_times_ = 0;
    ti_pin_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEquipmentServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refined_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refined_upgrade_times;
        break;
      }

      // optional int32 refined_upgrade_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_upgrade_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_upgrade_times_)));
          set_has_refined_upgrade_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetEquipmentServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refined_times(), output);
  }

  // optional int32 added_stat_type = 2;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->added_stat_type(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int32 refined_upgrade_times = 4;
  if (has_refined_upgrade_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refined_upgrade_times(), output);
  }

  // optional int32 ti_pin_val = 5;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ti_pin_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetEquipmentServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refined_times = 1;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refined_times(), target);
  }

  // optional int32 added_stat_type = 2;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->added_stat_type(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int32 refined_upgrade_times = 4;
  if (has_refined_upgrade_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refined_upgrade_times(), target);
  }

  // optional int32 ti_pin_val = 5;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ti_pin_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetEquipmentServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refined_times = 1;
    if (has_refined_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

    // optional int32 added_stat_type = 2;
    if (has_added_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 refined_upgrade_times = 4;
    if (has_refined_upgrade_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_upgrade_times());
    }

    // optional int32 ti_pin_val = 5;
    if (has_ti_pin_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEquipmentServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEquipmentServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEquipmentServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEquipmentServerProto::MergeFrom(const PetEquipmentServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_refined_upgrade_times()) {
      set_refined_upgrade_times(from.refined_upgrade_times());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEquipmentServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEquipmentServerProto::CopyFrom(const PetEquipmentServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEquipmentServerProto::IsInitialized() const {

  return true;
}

void PetEquipmentServerProto::Swap(PetEquipmentServerProto* other) {
  if (other != this) {
    std::swap(refined_times_, other->refined_times_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(quality_, other->quality_);
    std::swap(refined_upgrade_times_, other->refined_upgrade_times_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEquipmentServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEquipmentServerProto_descriptor_;
  metadata.reflection = PetEquipmentServerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaoShiServerProto::kIconFieldNumber;
const int BaoShiServerProto::kNameFieldNumber;
const int BaoShiServerProto::kBaseStatFieldNumber;
const int BaoShiServerProto::kAttachStatFieldNumber;
const int BaoShiServerProto::kTotalStatFieldNumber;
const int BaoShiServerProto::kFightingAmountFieldNumber;
const int BaoShiServerProto::kQualityFieldNumber;
const int BaoShiServerProto::kBaoShiVersionFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int BaoShiServerProto::kGoodsProtoFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::app::message::GoodsServerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::app::message::BaoShiServerProto >, 11, false >
  BaoShiServerProto::goodsProto(kGoodsProtoFieldNumber, ::app::message::BaoShiServerProto::default_instance());
BaoShiServerProto::BaoShiServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaoShiServerProto::InitAsDefaultInstance() {
  attachstat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  totalstat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

BaoShiServerProto::BaoShiServerProto(const BaoShiServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaoShiServerProto::SharedCtor() {
  _cached_size_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attachstat_ = NULL;
  totalstat_ = NULL;
  fightingamount_ = 0;
  quality_ = 0;
  bao_shi_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaoShiServerProto::~BaoShiServerProto() {
  SharedDtor();
}

void BaoShiServerProto::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete attachstat_;
    delete totalstat_;
  }
}

void BaoShiServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaoShiServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaoShiServerProto_descriptor_;
}

const BaoShiServerProto& BaoShiServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_5fserver_2eproto();
  return *default_instance_;
}

BaoShiServerProto* BaoShiServerProto::default_instance_ = NULL;

BaoShiServerProto* BaoShiServerProto::New() const {
  return new BaoShiServerProto;
}

void BaoShiServerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_attachstat()) {
      if (attachstat_ != NULL) attachstat_->::app::message::SingleStatProto::Clear();
    }
    if (has_totalstat()) {
      if (totalstat_ != NULL) totalstat_->::app::message::SpriteStatProto::Clear();
    }
    fightingamount_ = 0;
    quality_ = 0;
    bao_shi_version_ = GOOGLE_LONGLONG(0);
  }
  basestat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaoShiServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseStat;
        break;
      }

      // repeated .app.message.SingleStatProto baseStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basestat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseStat;
        if (input->ExpectTag(34)) goto parse_attachStat;
        break;
      }

      // optional .app.message.SingleStatProto attachStat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_totalStat;
        break;
      }

      // optional .app.message.SpriteStatProto totalStat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totalstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fightingAmount;
        break;
      }

      // optional int32 fightingAmount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightingAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightingamount_)));
          set_has_fightingamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bao_shi_version;
        break;
      }

      // optional int64 bao_shi_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bao_shi_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bao_shi_version_)));
          set_has_bao_shi_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaoShiServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->icon(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .app.message.SingleStatProto baseStat = 3;
  for (int i = 0; i < this->basestat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basestat(i), output);
  }

  // optional .app.message.SingleStatProto attachStat = 4;
  if (has_attachstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attachstat(), output);
  }

  // optional .app.message.SpriteStatProto totalStat = 5;
  if (has_totalstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->totalstat(), output);
  }

  // optional int32 fightingAmount = 6;
  if (has_fightingamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fightingamount(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  // optional int64 bao_shi_version = 8;
  if (has_bao_shi_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->bao_shi_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaoShiServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->icon(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .app.message.SingleStatProto baseStat = 3;
  for (int i = 0; i < this->basestat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basestat(i), target);
  }

  // optional .app.message.SingleStatProto attachStat = 4;
  if (has_attachstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attachstat(), target);
  }

  // optional .app.message.SpriteStatProto totalStat = 5;
  if (has_totalstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->totalstat(), target);
  }

  // optional int32 fightingAmount = 6;
  if (has_fightingamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fightingamount(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  // optional int64 bao_shi_version = 8;
  if (has_bao_shi_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->bao_shi_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaoShiServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .app.message.SingleStatProto attachStat = 4;
    if (has_attachstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachstat());
    }

    // optional .app.message.SpriteStatProto totalStat = 5;
    if (has_totalstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totalstat());
    }

    // optional int32 fightingAmount = 6;
    if (has_fightingamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightingamount());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 bao_shi_version = 8;
    if (has_bao_shi_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bao_shi_version());
    }

  }
  // repeated .app.message.SingleStatProto baseStat = 3;
  total_size += 1 * this->basestat_size();
  for (int i = 0; i < this->basestat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basestat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaoShiServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaoShiServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaoShiServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaoShiServerProto::MergeFrom(const BaoShiServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  basestat_.MergeFrom(from.basestat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_attachstat()) {
      mutable_attachstat()->::app::message::SingleStatProto::MergeFrom(from.attachstat());
    }
    if (from.has_totalstat()) {
      mutable_totalstat()->::app::message::SpriteStatProto::MergeFrom(from.totalstat());
    }
    if (from.has_fightingamount()) {
      set_fightingamount(from.fightingamount());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_bao_shi_version()) {
      set_bao_shi_version(from.bao_shi_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaoShiServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaoShiServerProto::CopyFrom(const BaoShiServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaoShiServerProto::IsInitialized() const {

  return true;
}

void BaoShiServerProto::Swap(BaoShiServerProto* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(name_, other->name_);
    basestat_.Swap(&other->basestat_);
    std::swap(attachstat_, other->attachstat_);
    std::swap(totalstat_, other->totalstat_);
    std::swap(fightingamount_, other->fightingamount_);
    std::swap(quality_, other->quality_);
    std::swap(bao_shi_version_, other->bao_shi_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaoShiServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaoShiServerProto_descriptor_;
  metadata.reflection = BaoShiServerProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
