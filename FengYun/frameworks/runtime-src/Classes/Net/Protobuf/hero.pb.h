// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero.proto

#ifndef PROTOBUF_hero_2eproto__INCLUDED
#define PROTOBUF_hero_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "goods.pb.h"
#include "config.pb.h"
#include "spritestat.pb.h"
#include "task.pb.h"
#include "prize.pb.h"
#include "dungeon.pb.h"
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hero_2eproto();
void protobuf_AssignDesc_hero_2eproto();
void protobuf_ShutdownFile_hero_2eproto();

class HeroProto;
class MoFangClientProto;
class PetTongLingClientProto;
class PetTongLingGiftSpellClientProto;
class PetTongLingSingleSpellClientProto;
class BowTongLingClientProto;
class FengYunDaoRankProto;
class FengYunDaoRankProto_FengYunDaoRankData;
class FengYunDaoProto;
class HeroYuYiGeProtos;
class HeroYuYiGeProto;
class HeroWelfareCompensationProto;
class HeroWelfareCompensationProto_WelfareCompensationProto;
class LingYuProto;
class TongTianBaoJianTaskProto;
class DefenceDungeonStateClientProto;
class HugeDataProto;
class NiDaoQianKunClient;
class MoBingProto;
class MoBingStatProto;
class MoBingBlessProto;
class DaoShiProto;
class HeroJingJieProto;
class HeroJingJieDataProto;
class GuildDungeonCollectedPrizeProto;
class ShouCangProto;
class AchievementProto;
class AchievementInfoProto;
class HeroSuperArmProto;
class PetProto;
class PetLevelProto;
class DemonProto;
class TianZuiProto;
class TianJieProto;
class BowProto;
class CombineXinfaSpellProto;
class FightingAmountProto;
class GoodsContainerProto;
class GoodsContainerUnlockProto;
class HeroClearedProto;
class ChallengeResultProto;
class OtherHeroProto;
class ClientRelation;
class SingleRelation;
class ClientRelationDetail;
class ChatMessage;
class ChatMessage_ChatGoods;
class JianDaoProto;
class TianXieProto;
class WuDaoProto;
class CloakProto;
class YitianshenjueProto;
class MountProto;
class MountAddedDataProto;
class SuperWeaponProto;
class StoryDungeonStatProto;
class StoryDungeonFinishStatProto;
class StoryDungeonCollectablePrizeProto;
class HeroMarriageProto;
class MarriageStorageProto;
class MarriageStorageLogProto;
class HeroLoveProto;
class HeroLoveExchangeProto;
class ArenaFightingTeamRankTeamInfoProto;
class ArenaFightingTeamRankMemberInfoProto;
class ClientYuanbaoCostLogProto;
class ClientSingleYuanbaoCostLogProto;
class HeroAnniversaryProto;
class HeroAnniversaryTaskProto;
class SingleHeroAnniversaryDailyTaskProto;
class ShieldProto;
class SingleShieldProto;
class HeroBossCard;
class HaidiProto;
class HaidiProto_HaidiLeftTime;
class HaidiInfoProto;
class HaidiInfoProto_HaidiOverTime;
class HeroComebackProto;

enum LoginType {
  INTERNAL = 0,
  WEB = 1,
  MICRO_CLIENT = 2,
  GM_LOGIN = 3,
  NWE_ROBOT = 4
};
bool LoginType_IsValid(int value);
const LoginType LoginType_MIN = INTERNAL;
const LoginType LoginType_MAX = NWE_ROBOT;
const int LoginType_ARRAYSIZE = LoginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginType_descriptor();
inline const ::std::string& LoginType_Name(LoginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginType_descriptor(), value);
}
inline bool LoginType_Parse(
    const ::std::string& name, LoginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginType>(
    LoginType_descriptor(), name, value);
}
// ===================================================================

class HeroProto : public ::google::protobuf::Message {
 public:
  HeroProto();
  virtual ~HeroProto();

  HeroProto(const HeroProto& from);

  inline HeroProto& operator=(const HeroProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroProto& default_instance();

  void Swap(HeroProto* other);

  // implements Message ----------------------------------------------

  HeroProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroProto& from);
  void MergeFrom(const HeroProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 race = 2;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 2;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 sceneID = 3;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 3;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional int32 yuanbao = 4;
  inline bool has_yuanbao() const;
  inline void clear_yuanbao();
  static const int kYuanbaoFieldNumber = 4;
  inline ::google::protobuf::int32 yuanbao() const;
  inline void set_yuanbao(::google::protobuf::int32 value);

  // optional int32 lijin = 5;
  inline bool has_lijin() const;
  inline void clear_lijin();
  static const int kLijinFieldNumber = 5;
  inline ::google::protobuf::int32 lijin() const;
  inline void set_lijin(::google::protobuf::int32 value);

  // optional int32 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional .app.message.GoodsContainerProto depot = 7;
  inline bool has_depot() const;
  inline void clear_depot();
  static const int kDepotFieldNumber = 7;
  inline const ::app::message::GoodsContainerProto& depot() const;
  inline ::app::message::GoodsContainerProto* mutable_depot();
  inline ::app::message::GoodsContainerProto* release_depot();
  inline void set_allocated_depot(::app::message::GoodsContainerProto* depot);

  // optional int32 real_air = 9;
  inline bool has_real_air() const;
  inline void clear_real_air();
  static const int kRealAirFieldNumber = 9;
  inline ::google::protobuf::int32 real_air() const;
  inline void set_real_air(::google::protobuf::int32 value);

  // optional int32 fighting_amount = 10;
  inline bool has_fighting_amount() const;
  inline void clear_fighting_amount();
  static const int kFightingAmountFieldNumber = 10;
  inline ::google::protobuf::int32 fighting_amount() const;
  inline void set_fighting_amount(::google::protobuf::int32 value);

  // optional .app.message.SpriteStatProto total_stat = 11;
  inline bool has_total_stat() const;
  inline void clear_total_stat();
  static const int kTotalStatFieldNumber = 11;
  inline const ::app::message::SpriteStatProto& total_stat() const;
  inline ::app::message::SpriteStatProto* mutable_total_stat();
  inline ::app::message::SpriteStatProto* release_total_stat();
  inline void set_allocated_total_stat(::app::message::SpriteStatProto* total_stat);

  // repeated int32 equiped_pos = 12;
  inline int equiped_pos_size() const;
  inline void clear_equiped_pos();
  static const int kEquipedPosFieldNumber = 12;
  inline ::google::protobuf::int32 equiped_pos(int index) const;
  inline void set_equiped_pos(int index, ::google::protobuf::int32 value);
  inline void add_equiped_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equiped_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equiped_pos();

  // repeated .app.message.EquipmentDataProto equipment_datas = 13;
  inline int equipment_datas_size() const;
  inline void clear_equipment_datas();
  static const int kEquipmentDatasFieldNumber = 13;
  inline const ::app::message::EquipmentDataProto& equipment_datas(int index) const;
  inline ::app::message::EquipmentDataProto* mutable_equipment_datas(int index);
  inline ::app::message::EquipmentDataProto* add_equipment_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >&
      equipment_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >*
      mutable_equipment_datas();

  // repeated .app.message.EquipmentProto equipments = 14;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 14;
  inline const ::app::message::EquipmentProto& equipments(int index) const;
  inline ::app::message::EquipmentProto* mutable_equipments(int index);
  inline ::app::message::EquipmentProto* add_equipments();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >&
      equipments() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >*
      mutable_equipments();

  // optional int64 exp = 15;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 15;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int64 upgrade_exp = 16;
  inline bool has_upgrade_exp() const;
  inline void clear_upgrade_exp();
  static const int kUpgradeExpFieldNumber = 16;
  inline ::google::protobuf::int64 upgrade_exp() const;
  inline void set_upgrade_exp(::google::protobuf::int64 value);

  // optional int64 equipment_resources = 17;
  inline bool has_equipment_resources() const;
  inline void clear_equipment_resources();
  static const int kEquipmentResourcesFieldNumber = 17;
  inline ::google::protobuf::int64 equipment_resources() const;
  inline void set_equipment_resources(::google::protobuf::int64 value);

  // optional bool has_storage = 18;
  inline bool has_has_storage() const;
  inline void clear_has_storage();
  static const int kHasStorageFieldNumber = 18;
  inline bool has_storage() const;
  inline void set_has_storage(bool value);

  // repeated bytes buy_back_goods_datas = 19;
  inline int buy_back_goods_datas_size() const;
  inline void clear_buy_back_goods_datas();
  static const int kBuyBackGoodsDatasFieldNumber = 19;
  inline const ::std::string& buy_back_goods_datas(int index) const;
  inline ::std::string* mutable_buy_back_goods_datas(int index);
  inline void set_buy_back_goods_datas(int index, const ::std::string& value);
  inline void set_buy_back_goods_datas(int index, const char* value);
  inline void set_buy_back_goods_datas(int index, const void* value, size_t size);
  inline ::std::string* add_buy_back_goods_datas();
  inline void add_buy_back_goods_datas(const ::std::string& value);
  inline void add_buy_back_goods_datas(const char* value);
  inline void add_buy_back_goods_datas(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& buy_back_goods_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_buy_back_goods_datas();

  // repeated bytes buy_back_goods_list = 20;
  inline int buy_back_goods_list_size() const;
  inline void clear_buy_back_goods_list();
  static const int kBuyBackGoodsListFieldNumber = 20;
  inline const ::std::string& buy_back_goods_list(int index) const;
  inline ::std::string* mutable_buy_back_goods_list(int index);
  inline void set_buy_back_goods_list(int index, const ::std::string& value);
  inline void set_buy_back_goods_list(int index, const char* value);
  inline void set_buy_back_goods_list(int index, const void* value, size_t size);
  inline ::std::string* add_buy_back_goods_list();
  inline void add_buy_back_goods_list(const ::std::string& value);
  inline void add_buy_back_goods_list(const char* value);
  inline void add_buy_back_goods_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& buy_back_goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_buy_back_goods_list();

  // optional bool team_auto_accept_invite = 21 [default = true];
  inline bool has_team_auto_accept_invite() const;
  inline void clear_team_auto_accept_invite();
  static const int kTeamAutoAcceptInviteFieldNumber = 21;
  inline bool team_auto_accept_invite() const;
  inline void set_team_auto_accept_invite(bool value);

  // optional bool team_auto_accept_request = 22 [default = true];
  inline bool has_team_auto_accept_request() const;
  inline void clear_team_auto_accept_request();
  static const int kTeamAutoAcceptRequestFieldNumber = 22;
  inline bool team_auto_accept_request() const;
  inline void set_team_auto_accept_request(bool value);

  // optional bool team_forbid_other_invite_me_join = 115;
  inline bool has_team_forbid_other_invite_me_join() const;
  inline void clear_team_forbid_other_invite_me_join();
  static const int kTeamForbidOtherInviteMeJoinFieldNumber = 115;
  inline bool team_forbid_other_invite_me_join() const;
  inline void set_team_forbid_other_invite_me_join(bool value);

  // optional bool trade_auto_reject_invite = 23;
  inline bool has_trade_auto_reject_invite() const;
  inline void clear_trade_auto_reject_invite();
  static const int kTradeAutoRejectInviteFieldNumber = 23;
  inline bool trade_auto_reject_invite() const;
  inline void set_trade_auto_reject_invite(bool value);

  // optional .app.message.HeroTaskProto task = 24;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 24;
  inline const ::app::message::HeroTaskProto& task() const;
  inline ::app::message::HeroTaskProto* mutable_task();
  inline ::app::message::HeroTaskProto* release_task();
  inline void set_allocated_task(::app::message::HeroTaskProto* task);

  // optional int64 client_only_config_1 = 25;
  inline bool has_client_only_config_1() const;
  inline void clear_client_only_config_1();
  static const int kClientOnlyConfig1FieldNumber = 25;
  inline ::google::protobuf::int64 client_only_config_1() const;
  inline void set_client_only_config_1(::google::protobuf::int64 value);

  // repeated int32 client_only_int_configs = 26;
  inline int client_only_int_configs_size() const;
  inline void clear_client_only_int_configs();
  static const int kClientOnlyIntConfigsFieldNumber = 26;
  inline ::google::protobuf::int32 client_only_int_configs(int index) const;
  inline void set_client_only_int_configs(int index, ::google::protobuf::int32 value);
  inline void add_client_only_int_configs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      client_only_int_configs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_client_only_int_configs();

  // optional bytes guild_name = 27;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 27;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const void* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional bool guild_auto_accept_invite = 28;
  inline bool has_guild_auto_accept_invite() const;
  inline void clear_guild_auto_accept_invite();
  static const int kGuildAutoAcceptInviteFieldNumber = 28;
  inline bool guild_auto_accept_invite() const;
  inline void set_guild_auto_accept_invite(bool value);

  // optional bool guild_forbid_other_invite_me_join = 29;
  inline bool has_guild_forbid_other_invite_me_join() const;
  inline void clear_guild_forbid_other_invite_me_join();
  static const int kGuildForbidOtherInviteMeJoinFieldNumber = 29;
  inline bool guild_forbid_other_invite_me_join() const;
  inline void set_guild_forbid_other_invite_me_join(bool value);

  // optional int32 guild_flag_level = 56;
  inline bool has_guild_flag_level() const;
  inline void clear_guild_flag_level();
  static const int kGuildFlagLevelFieldNumber = 56;
  inline ::google::protobuf::int32 guild_flag_level() const;
  inline void set_guild_flag_level(::google::protobuf::int32 value);

  // optional int32 guild_li_lian = 30;
  inline bool has_guild_li_lian() const;
  inline void clear_guild_li_lian();
  static const int kGuildLiLianFieldNumber = 30;
  inline ::google::protobuf::int32 guild_li_lian() const;
  inline void set_guild_li_lian(::google::protobuf::int32 value);

  // optional int32 guild_contribution = 31;
  inline bool has_guild_contribution() const;
  inline void clear_guild_contribution();
  static const int kGuildContributionFieldNumber = 31;
  inline ::google::protobuf::int32 guild_contribution() const;
  inline void set_guild_contribution(::google::protobuf::int32 value);

  // repeated bytes friend_guild_name = 32;
  inline int friend_guild_name_size() const;
  inline void clear_friend_guild_name();
  static const int kFriendGuildNameFieldNumber = 32;
  inline const ::std::string& friend_guild_name(int index) const;
  inline ::std::string* mutable_friend_guild_name(int index);
  inline void set_friend_guild_name(int index, const ::std::string& value);
  inline void set_friend_guild_name(int index, const char* value);
  inline void set_friend_guild_name(int index, const void* value, size_t size);
  inline ::std::string* add_friend_guild_name();
  inline void add_friend_guild_name(const ::std::string& value);
  inline void add_friend_guild_name(const char* value);
  inline void add_friend_guild_name(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& friend_guild_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friend_guild_name();

  // repeated bytes enemy_guild_name = 33;
  inline int enemy_guild_name_size() const;
  inline void clear_enemy_guild_name();
  static const int kEnemyGuildNameFieldNumber = 33;
  inline const ::std::string& enemy_guild_name(int index) const;
  inline ::std::string* mutable_enemy_guild_name(int index);
  inline void set_enemy_guild_name(int index, const ::std::string& value);
  inline void set_enemy_guild_name(int index, const char* value);
  inline void set_enemy_guild_name(int index, const void* value, size_t size);
  inline ::std::string* add_enemy_guild_name();
  inline void add_enemy_guild_name(const ::std::string& value);
  inline void add_enemy_guild_name(const char* value);
  inline void add_enemy_guild_name(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& enemy_guild_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_enemy_guild_name();

  // optional bool is_ws_city_master = 57;
  inline bool has_is_ws_city_master() const;
  inline void clear_is_ws_city_master();
  static const int kIsWsCityMasterFieldNumber = 57;
  inline bool is_ws_city_master() const;
  inline void set_is_ws_city_master(bool value);

  // optional bool is_long_city_master = 58;
  inline bool has_is_long_city_master() const;
  inline void clear_is_long_city_master();
  static const int kIsLongCityMasterFieldNumber = 58;
  inline bool is_long_city_master() const;
  inline void set_is_long_city_master(bool value);

  // optional bool is_guild_leader = 59;
  inline bool has_is_guild_leader() const;
  inline void clear_is_guild_leader();
  static const int kIsGuildLeaderFieldNumber = 59;
  inline bool is_guild_leader() const;
  inline void set_is_guild_leader(bool value);

  // optional bool is_territory_leader = 60;
  inline bool has_is_territory_leader() const;
  inline void clear_is_territory_leader();
  static const int kIsTerritoryLeaderFieldNumber = 60;
  inline bool is_territory_leader() const;
  inline void set_is_territory_leader(bool value);

  // optional int64 accumulated_offline_time = 34;
  inline bool has_accumulated_offline_time() const;
  inline void clear_accumulated_offline_time();
  static const int kAccumulatedOfflineTimeFieldNumber = 34;
  inline ::google::protobuf::int64 accumulated_offline_time() const;
  inline void set_accumulated_offline_time(::google::protobuf::int64 value);

  // optional int32 vip_exp = 35;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 35;
  inline ::google::protobuf::int32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int32 value);

  // repeated .app.message.StoryDungeonStatProto story_dungeon_proto = 36;
  inline int story_dungeon_proto_size() const;
  inline void clear_story_dungeon_proto();
  static const int kStoryDungeonProtoFieldNumber = 36;
  inline const ::app::message::StoryDungeonStatProto& story_dungeon_proto(int index) const;
  inline ::app::message::StoryDungeonStatProto* mutable_story_dungeon_proto(int index);
  inline ::app::message::StoryDungeonStatProto* add_story_dungeon_proto();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonStatProto >&
      story_dungeon_proto() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonStatProto >*
      mutable_story_dungeon_proto();

  // repeated .app.message.StoryDungeonCollectablePrizeProto story_dungeon_collectable_prize_proto = 37;
  inline int story_dungeon_collectable_prize_proto_size() const;
  inline void clear_story_dungeon_collectable_prize_proto();
  static const int kStoryDungeonCollectablePrizeProtoFieldNumber = 37;
  inline const ::app::message::StoryDungeonCollectablePrizeProto& story_dungeon_collectable_prize_proto(int index) const;
  inline ::app::message::StoryDungeonCollectablePrizeProto* mutable_story_dungeon_collectable_prize_proto(int index);
  inline ::app::message::StoryDungeonCollectablePrizeProto* add_story_dungeon_collectable_prize_proto();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonCollectablePrizeProto >&
      story_dungeon_collectable_prize_proto() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonCollectablePrizeProto >*
      mutable_story_dungeon_collectable_prize_proto();

  // optional int32 auto_finish_story_id = 38;
  inline bool has_auto_finish_story_id() const;
  inline void clear_auto_finish_story_id();
  static const int kAutoFinishStoryIdFieldNumber = 38;
  inline ::google::protobuf::int32 auto_finish_story_id() const;
  inline void set_auto_finish_story_id(::google::protobuf::int32 value);

  // optional int64 auto_finish_story_complete_time = 39;
  inline bool has_auto_finish_story_complete_time() const;
  inline void clear_auto_finish_story_complete_time();
  static const int kAutoFinishStoryCompleteTimeFieldNumber = 39;
  inline ::google::protobuf::int64 auto_finish_story_complete_time() const;
  inline void set_auto_finish_story_complete_time(::google::protobuf::int64 value);

  // optional int32 finished_challenge_dungeon_sequence_id = 40;
  inline bool has_finished_challenge_dungeon_sequence_id() const;
  inline void clear_finished_challenge_dungeon_sequence_id();
  static const int kFinishedChallengeDungeonSequenceIdFieldNumber = 40;
  inline ::google::protobuf::int32 finished_challenge_dungeon_sequence_id() const;
  inline void set_finished_challenge_dungeon_sequence_id(::google::protobuf::int32 value);

  // repeated int32 finished_vip_dungeon_id = 46;
  inline int finished_vip_dungeon_id_size() const;
  inline void clear_finished_vip_dungeon_id();
  static const int kFinishedVipDungeonIdFieldNumber = 46;
  inline ::google::protobuf::int32 finished_vip_dungeon_id(int index) const;
  inline void set_finished_vip_dungeon_id(int index, ::google::protobuf::int32 value);
  inline void add_finished_vip_dungeon_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished_vip_dungeon_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished_vip_dungeon_id();

  // optional int32 defence_today_finished_batch = 41 [deprecated = true];
  inline bool has_defence_today_finished_batch() const PROTOBUF_DEPRECATED;
  inline void clear_defence_today_finished_batch() PROTOBUF_DEPRECATED;
  static const int kDefenceTodayFinishedBatchFieldNumber = 41;
  inline ::google::protobuf::int32 defence_today_finished_batch() const PROTOBUF_DEPRECATED;
  inline void set_defence_today_finished_batch(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 defence_history_max_batch = 42 [deprecated = true];
  inline bool has_defence_history_max_batch() const PROTOBUF_DEPRECATED;
  inline void clear_defence_history_max_batch() PROTOBUF_DEPRECATED;
  static const int kDefenceHistoryMaxBatchFieldNumber = 42;
  inline ::google::protobuf::int32 defence_history_max_batch() const PROTOBUF_DEPRECATED;
  inline void set_defence_history_max_batch(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 defence_today_reset_count = 44;
  inline bool has_defence_today_reset_count() const;
  inline void clear_defence_today_reset_count();
  static const int kDefenceTodayResetCountFieldNumber = 44;
  inline ::google::protobuf::int32 defence_today_reset_count() const;
  inline void set_defence_today_reset_count(::google::protobuf::int32 value);

  // optional int32 defence_collected_first_pass_prize = 45 [deprecated = true];
  inline bool has_defence_collected_first_pass_prize() const PROTOBUF_DEPRECATED;
  inline void clear_defence_collected_first_pass_prize() PROTOBUF_DEPRECATED;
  static const int kDefenceCollectedFirstPassPrizeFieldNumber = 45;
  inline ::google::protobuf::int32 defence_collected_first_pass_prize() const PROTOBUF_DEPRECATED;
  inline void set_defence_collected_first_pass_prize(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // repeated bytes defence_collectable_prize = 47 [deprecated = true];
  inline int defence_collectable_prize_size() const PROTOBUF_DEPRECATED;
  inline void clear_defence_collectable_prize() PROTOBUF_DEPRECATED;
  static const int kDefenceCollectablePrizeFieldNumber = 47;
  inline const ::std::string& defence_collectable_prize(int index) const PROTOBUF_DEPRECATED;
  inline ::std::string* mutable_defence_collectable_prize(int index) PROTOBUF_DEPRECATED;
  inline void set_defence_collectable_prize(int index, const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void set_defence_collectable_prize(int index, const char* value) PROTOBUF_DEPRECATED;
  inline void set_defence_collectable_prize(int index, const void* value, size_t size) PROTOBUF_DEPRECATED;
  inline ::std::string* add_defence_collectable_prize() PROTOBUF_DEPRECATED;
  inline void add_defence_collectable_prize(const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void add_defence_collectable_prize(const char* value) PROTOBUF_DEPRECATED;
  inline void add_defence_collectable_prize(const void* value, size_t size) PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& defence_collectable_prize() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_defence_collectable_prize() PROTOBUF_DEPRECATED;

  // optional int32 sou_shen_point = 48;
  inline bool has_sou_shen_point() const;
  inline void clear_sou_shen_point();
  static const int kSouShenPointFieldNumber = 48;
  inline ::google::protobuf::int32 sou_shen_point() const;
  inline void set_sou_shen_point(::google::protobuf::int32 value);

  // repeated int32 sou_shen_today_passed_id = 49;
  inline int sou_shen_today_passed_id_size() const;
  inline void clear_sou_shen_today_passed_id();
  static const int kSouShenTodayPassedIdFieldNumber = 49;
  inline ::google::protobuf::int32 sou_shen_today_passed_id(int index) const;
  inline void set_sou_shen_today_passed_id(int index, ::google::protobuf::int32 value);
  inline void add_sou_shen_today_passed_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sou_shen_today_passed_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sou_shen_today_passed_id();

  // repeated int32 sou_shen_life_passed_id = 50;
  inline int sou_shen_life_passed_id_size() const;
  inline void clear_sou_shen_life_passed_id();
  static const int kSouShenLifePassedIdFieldNumber = 50;
  inline ::google::protobuf::int32 sou_shen_life_passed_id(int index) const;
  inline void set_sou_shen_life_passed_id(int index, ::google::protobuf::int32 value);
  inline void add_sou_shen_life_passed_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sou_shen_life_passed_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sou_shen_life_passed_id();

  // optional int32 ling_yun_today_entered_times = 51;
  inline bool has_ling_yun_today_entered_times() const;
  inline void clear_ling_yun_today_entered_times();
  static const int kLingYunTodayEnteredTimesFieldNumber = 51;
  inline ::google::protobuf::int32 ling_yun_today_entered_times() const;
  inline void set_ling_yun_today_entered_times(::google::protobuf::int32 value);

  // optional int32 ling_yun_today_finish_state = 130;
  inline bool has_ling_yun_today_finish_state() const;
  inline void clear_ling_yun_today_finish_state();
  static const int kLingYunTodayFinishStateFieldNumber = 130;
  inline ::google::protobuf::int32 ling_yun_today_finish_state() const;
  inline void set_ling_yun_today_finish_state(::google::protobuf::int32 value);

  // repeated .app.message.GroupDungeonCollectablePrizeProto group_collectable_prize_proto = 52;
  inline int group_collectable_prize_proto_size() const;
  inline void clear_group_collectable_prize_proto();
  static const int kGroupCollectablePrizeProtoFieldNumber = 52;
  inline const ::app::message::GroupDungeonCollectablePrizeProto& group_collectable_prize_proto(int index) const;
  inline ::app::message::GroupDungeonCollectablePrizeProto* mutable_group_collectable_prize_proto(int index);
  inline ::app::message::GroupDungeonCollectablePrizeProto* add_group_collectable_prize_proto();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::GroupDungeonCollectablePrizeProto >&
      group_collectable_prize_proto() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::GroupDungeonCollectablePrizeProto >*
      mutable_group_collectable_prize_proto();

  // optional bool long_mai_today_first_passed = 53;
  inline bool has_long_mai_today_first_passed() const;
  inline void clear_long_mai_today_first_passed();
  static const int kLongMaiTodayFirstPassedFieldNumber = 53;
  inline bool long_mai_today_first_passed() const;
  inline void set_long_mai_today_first_passed(bool value);

  // optional int32 wu_jue_today_entered_times = 54;
  inline bool has_wu_jue_today_entered_times() const;
  inline void clear_wu_jue_today_entered_times();
  static const int kWuJueTodayEnteredTimesFieldNumber = 54;
  inline ::google::protobuf::int32 wu_jue_today_entered_times() const;
  inline void set_wu_jue_today_entered_times(::google::protobuf::int32 value);

  // optional int32 wu_jue_today_collected_first_try_transport_prize_times = 242;
  inline bool has_wu_jue_today_collected_first_try_transport_prize_times() const;
  inline void clear_wu_jue_today_collected_first_try_transport_prize_times();
  static const int kWuJueTodayCollectedFirstTryTransportPrizeTimesFieldNumber = 242;
  inline ::google::protobuf::int32 wu_jue_today_collected_first_try_transport_prize_times() const;
  inline void set_wu_jue_today_collected_first_try_transport_prize_times(::google::protobuf::int32 value);

  // repeated int32 territory_today_collected_prize_scene_id = 55;
  inline int territory_today_collected_prize_scene_id_size() const;
  inline void clear_territory_today_collected_prize_scene_id();
  static const int kTerritoryTodayCollectedPrizeSceneIdFieldNumber = 55;
  inline ::google::protobuf::int32 territory_today_collected_prize_scene_id(int index) const;
  inline void set_territory_today_collected_prize_scene_id(int index, ::google::protobuf::int32 value);
  inline void add_territory_today_collected_prize_scene_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      territory_today_collected_prize_scene_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_territory_today_collected_prize_scene_id();

  // repeated int32 daily_activity_result = 68;
  inline int daily_activity_result_size() const;
  inline void clear_daily_activity_result();
  static const int kDailyActivityResultFieldNumber = 68;
  inline ::google::protobuf::int32 daily_activity_result(int index) const;
  inline void set_daily_activity_result(int index, ::google::protobuf::int32 value);
  inline void add_daily_activity_result(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      daily_activity_result() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_daily_activity_result();

  // optional int32 sheng_wang = 69;
  inline bool has_sheng_wang() const;
  inline void clear_sheng_wang();
  static const int kShengWangFieldNumber = 69;
  inline ::google::protobuf::int32 sheng_wang() const;
  inline void set_sheng_wang(::google::protobuf::int32 value);

  // repeated int32 sheng_wang_task = 70;
  inline int sheng_wang_task_size() const;
  inline void clear_sheng_wang_task();
  static const int kShengWangTaskFieldNumber = 70;
  inline ::google::protobuf::int32 sheng_wang_task(int index) const;
  inline void set_sheng_wang_task(int index, ::google::protobuf::int32 value);
  inline void add_sheng_wang_task(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sheng_wang_task() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sheng_wang_task();

  // optional int32 use_free_chat_times = 71;
  inline bool has_use_free_chat_times() const;
  inline void clear_use_free_chat_times();
  static const int kUseFreeChatTimesFieldNumber = 71;
  inline ::google::protobuf::int32 use_free_chat_times() const;
  inline void set_use_free_chat_times(::google::protobuf::int32 value);

  // repeated int32 gems = 72;
  inline int gems_size() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 72;
  inline ::google::protobuf::int32 gems(int index) const;
  inline void set_gems(int index, ::google::protobuf::int32 value);
  inline void add_gems(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gems() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gems();

  // optional .app.message.BowProto bow = 73;
  inline bool has_bow() const;
  inline void clear_bow();
  static const int kBowFieldNumber = 73;
  inline const ::app::message::BowProto& bow() const;
  inline ::app::message::BowProto* mutable_bow();
  inline ::app::message::BowProto* release_bow();
  inline void set_allocated_bow(::app::message::BowProto* bow);

  // repeated int64 admired_hero = 74;
  inline int admired_hero_size() const;
  inline void clear_admired_hero();
  static const int kAdmiredHeroFieldNumber = 74;
  inline ::google::protobuf::int64 admired_hero(int index) const;
  inline void set_admired_hero(int index, ::google::protobuf::int64 value);
  inline void add_admired_hero(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      admired_hero() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_admired_hero();

  // optional int64 last_logout_time = 75;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 75;
  inline ::google::protobuf::int64 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::int64 value);

  // optional int32 collected_vip_prize = 76;
  inline bool has_collected_vip_prize() const;
  inline void clear_collected_vip_prize();
  static const int kCollectedVipPrizeFieldNumber = 76;
  inline ::google::protobuf::int32 collected_vip_prize() const;
  inline void set_collected_vip_prize(::google::protobuf::int32 value);

  // optional int64 next_collect_vip_weekly_prize_time = 77;
  inline bool has_next_collect_vip_weekly_prize_time() const;
  inline void clear_next_collect_vip_weekly_prize_time();
  static const int kNextCollectVipWeeklyPrizeTimeFieldNumber = 77;
  inline ::google::protobuf::int64 next_collect_vip_weekly_prize_time() const;
  inline void set_next_collect_vip_weekly_prize_time(::google::protobuf::int64 value);

  // optional int32 using_weapon = 78;
  inline bool has_using_weapon() const;
  inline void clear_using_weapon();
  static const int kUsingWeaponFieldNumber = 78;
  inline ::google::protobuf::int32 using_weapon() const;
  inline void set_using_weapon(::google::protobuf::int32 value);

  // repeated .app.message.SuperWeaponProto super_weapon = 79;
  inline int super_weapon_size() const;
  inline void clear_super_weapon();
  static const int kSuperWeaponFieldNumber = 79;
  inline const ::app::message::SuperWeaponProto& super_weapon(int index) const;
  inline ::app::message::SuperWeaponProto* mutable_super_weapon(int index);
  inline ::app::message::SuperWeaponProto* add_super_weapon();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SuperWeaponProto >&
      super_weapon() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SuperWeaponProto >*
      mutable_super_weapon();

  // optional .app.message.SpriteStatProto super_weapon_max_level_add_stat = 236;
  inline bool has_super_weapon_max_level_add_stat() const;
  inline void clear_super_weapon_max_level_add_stat();
  static const int kSuperWeaponMaxLevelAddStatFieldNumber = 236;
  inline const ::app::message::SpriteStatProto& super_weapon_max_level_add_stat() const;
  inline ::app::message::SpriteStatProto* mutable_super_weapon_max_level_add_stat();
  inline ::app::message::SpriteStatProto* release_super_weapon_max_level_add_stat();
  inline void set_allocated_super_weapon_max_level_add_stat(::app::message::SpriteStatProto* super_weapon_max_level_add_stat);

  // optional bool has_magic_weapon = 298;
  inline bool has_has_magic_weapon() const;
  inline void clear_has_magic_weapon();
  static const int kHasMagicWeaponFieldNumber = 298;
  inline bool has_magic_weapon() const;
  inline void set_has_magic_weapon(bool value);

  // optional .app.message.SpriteStatProto magic_added_stat = 237;
  inline bool has_magic_added_stat() const;
  inline void clear_magic_added_stat();
  static const int kMagicAddedStatFieldNumber = 237;
  inline const ::app::message::SpriteStatProto& magic_added_stat() const;
  inline ::app::message::SpriteStatProto* mutable_magic_added_stat();
  inline ::app::message::SpriteStatProto* release_magic_added_stat();
  inline void set_allocated_magic_added_stat(::app::message::SpriteStatProto* magic_added_stat);

  // optional .app.message.SpriteStatProto magic_not_saved_added_stat = 238;
  inline bool has_magic_not_saved_added_stat() const;
  inline void clear_magic_not_saved_added_stat();
  static const int kMagicNotSavedAddedStatFieldNumber = 238;
  inline const ::app::message::SpriteStatProto& magic_not_saved_added_stat() const;
  inline ::app::message::SpriteStatProto* mutable_magic_not_saved_added_stat();
  inline ::app::message::SpriteStatProto* release_magic_not_saved_added_stat();
  inline void set_allocated_magic_not_saved_added_stat(::app::message::SpriteStatProto* magic_not_saved_added_stat);

  // repeated bool has_unlock_magic_weapon_gem = 239;
  inline int has_unlock_magic_weapon_gem_size() const;
  inline void clear_has_unlock_magic_weapon_gem();
  static const int kHasUnlockMagicWeaponGemFieldNumber = 239;
  inline bool has_unlock_magic_weapon_gem(int index) const;
  inline void set_has_unlock_magic_weapon_gem(int index, bool value);
  inline void add_has_unlock_magic_weapon_gem(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      has_unlock_magic_weapon_gem() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_has_unlock_magic_weapon_gem();

  // repeated int32 magic_weapon_gem_level = 240;
  inline int magic_weapon_gem_level_size() const;
  inline void clear_magic_weapon_gem_level();
  static const int kMagicWeaponGemLevelFieldNumber = 240;
  inline ::google::protobuf::int32 magic_weapon_gem_level(int index) const;
  inline void set_magic_weapon_gem_level(int index, ::google::protobuf::int32 value);
  inline void add_magic_weapon_gem_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      magic_weapon_gem_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_magic_weapon_gem_level();

  // repeated bool magic_weapon_gem_binded = 241;
  inline int magic_weapon_gem_binded_size() const;
  inline void clear_magic_weapon_gem_binded();
  static const int kMagicWeaponGemBindedFieldNumber = 241;
  inline bool magic_weapon_gem_binded(int index) const;
  inline void set_magic_weapon_gem_binded(int index, bool value);
  inline void add_magic_weapon_gem_binded(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      magic_weapon_gem_binded() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_magic_weapon_gem_binded();

  // optional int32 divine_times = 80;
  inline bool has_divine_times() const;
  inline void clear_divine_times();
  static const int kDivineTimesFieldNumber = 80;
  inline ::google::protobuf::int32 divine_times() const;
  inline void set_divine_times(::google::protobuf::int32 value);

  // optional int32 divine_amount = 81 [deprecated = true];
  inline bool has_divine_amount() const PROTOBUF_DEPRECATED;
  inline void clear_divine_amount() PROTOBUF_DEPRECATED;
  static const int kDivineAmountFieldNumber = 81;
  inline ::google::protobuf::int32 divine_amount() const PROTOBUF_DEPRECATED;
  inline void set_divine_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 divine_storage_goods_count = 82;
  inline bool has_divine_storage_goods_count() const;
  inline void clear_divine_storage_goods_count();
  static const int kDivineStorageGoodsCountFieldNumber = 82;
  inline ::google::protobuf::int32 divine_storage_goods_count() const;
  inline void set_divine_storage_goods_count(::google::protobuf::int32 value);

  // optional .app.message.MountProto mount = 83;
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 83;
  inline const ::app::message::MountProto& mount() const;
  inline ::app::message::MountProto* mutable_mount();
  inline ::app::message::MountProto* release_mount();
  inline void set_allocated_mount(::app::message::MountProto* mount);

  // optional int32 lottery = 84;
  inline bool has_lottery() const;
  inline void clear_lottery();
  static const int kLotteryFieldNumber = 84;
  inline ::google::protobuf::int32 lottery() const;
  inline void set_lottery(::google::protobuf::int32 value);

  // optional int64 daily_online_acc_time = 85;
  inline bool has_daily_online_acc_time() const;
  inline void clear_daily_online_acc_time();
  static const int kDailyOnlineAccTimeFieldNumber = 85;
  inline ::google::protobuf::int64 daily_online_acc_time() const;
  inline void set_daily_online_acc_time(::google::protobuf::int64 value);

  // optional int32 sign = 86;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 86;
  inline ::google::protobuf::int32 sign() const;
  inline void set_sign(::google::protobuf::int32 value);

  // optional int32 sign_prize = 87;
  inline bool has_sign_prize() const;
  inline void clear_sign_prize();
  static const int kSignPrizeFieldNumber = 87;
  inline ::google::protobuf::int32 sign_prize() const;
  inline void set_sign_prize(::google::protobuf::int32 value);

  // optional int32 replenish_sign_times = 88;
  inline bool has_replenish_sign_times() const;
  inline void clear_replenish_sign_times();
  static const int kReplenishSignTimesFieldNumber = 88;
  inline ::google::protobuf::int32 replenish_sign_times() const;
  inline void set_replenish_sign_times(::google::protobuf::int32 value);

  // optional int64 next_reduce_pk_amount_time = 89;
  inline bool has_next_reduce_pk_amount_time() const;
  inline void clear_next_reduce_pk_amount_time();
  static const int kNextReducePkAmountTimeFieldNumber = 89;
  inline ::google::protobuf::int64 next_reduce_pk_amount_time() const;
  inline void set_next_reduce_pk_amount_time(::google::protobuf::int64 value);

  // optional int32 pk_amount = 90;
  inline bool has_pk_amount() const;
  inline void clear_pk_amount();
  static const int kPkAmountFieldNumber = 90;
  inline ::google::protobuf::int32 pk_amount() const;
  inline void set_pk_amount(::google::protobuf::int32 value);

  // optional int64 relive_protected_end_time = 91;
  inline bool has_relive_protected_end_time() const;
  inline void clear_relive_protected_end_time();
  static const int kReliveProtectedEndTimeFieldNumber = 91;
  inline ::google::protobuf::int64 relive_protected_end_time() const;
  inline void set_relive_protected_end_time(::google::protobuf::int64 value);

  // optional int32 total_sign_times = 92;
  inline bool has_total_sign_times() const;
  inline void clear_total_sign_times();
  static const int kTotalSignTimesFieldNumber = 92;
  inline ::google::protobuf::int32 total_sign_times() const;
  inline void set_total_sign_times(::google::protobuf::int32 value);

  // optional int32 total_recharge_yuanbao = 93;
  inline bool has_total_recharge_yuanbao() const;
  inline void clear_total_recharge_yuanbao();
  static const int kTotalRechargeYuanbaoFieldNumber = 93;
  inline ::google::protobuf::int32 total_recharge_yuanbao() const;
  inline void set_total_recharge_yuanbao(::google::protobuf::int32 value);

  // repeated bytes lottery_goods_static_data = 94;
  inline int lottery_goods_static_data_size() const;
  inline void clear_lottery_goods_static_data();
  static const int kLotteryGoodsStaticDataFieldNumber = 94;
  inline const ::std::string& lottery_goods_static_data(int index) const;
  inline ::std::string* mutable_lottery_goods_static_data(int index);
  inline void set_lottery_goods_static_data(int index, const ::std::string& value);
  inline void set_lottery_goods_static_data(int index, const char* value);
  inline void set_lottery_goods_static_data(int index, const void* value, size_t size);
  inline ::std::string* add_lottery_goods_static_data();
  inline void add_lottery_goods_static_data(const ::std::string& value);
  inline void add_lottery_goods_static_data(const char* value);
  inline void add_lottery_goods_static_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& lottery_goods_static_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lottery_goods_static_data();

  // repeated bytes lottery_goods_dynamic_data = 95;
  inline int lottery_goods_dynamic_data_size() const;
  inline void clear_lottery_goods_dynamic_data();
  static const int kLotteryGoodsDynamicDataFieldNumber = 95;
  inline const ::std::string& lottery_goods_dynamic_data(int index) const;
  inline ::std::string* mutable_lottery_goods_dynamic_data(int index);
  inline void set_lottery_goods_dynamic_data(int index, const ::std::string& value);
  inline void set_lottery_goods_dynamic_data(int index, const char* value);
  inline void set_lottery_goods_dynamic_data(int index, const void* value, size_t size);
  inline ::std::string* add_lottery_goods_dynamic_data();
  inline void add_lottery_goods_dynamic_data(const ::std::string& value);
  inline void add_lottery_goods_dynamic_data(const char* value);
  inline void add_lottery_goods_dynamic_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& lottery_goods_dynamic_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lottery_goods_dynamic_data();

  // optional .app.message.PetProto pet = 96;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 96;
  inline const ::app::message::PetProto& pet() const;
  inline ::app::message::PetProto* mutable_pet();
  inline ::app::message::PetProto* release_pet();
  inline void set_allocated_pet(::app::message::PetProto* pet);

  // optional bool has_recharge = 97;
  inline bool has_has_recharge() const;
  inline void clear_has_recharge();
  static const int kHasRechargeFieldNumber = 97;
  inline bool has_recharge() const;
  inline void set_has_recharge(bool value);

  // optional int32 spell_added_upgrade_level = 144;
  inline bool has_spell_added_upgrade_level() const;
  inline void clear_spell_added_upgrade_level();
  static const int kSpellAddedUpgradeLevelFieldNumber = 144;
  inline ::google::protobuf::int32 spell_added_upgrade_level() const;
  inline void set_spell_added_upgrade_level(::google::protobuf::int32 value);

  // repeated .app.message.CombineXinfaSpellProto combine_spells = 98;
  inline int combine_spells_size() const;
  inline void clear_combine_spells();
  static const int kCombineSpellsFieldNumber = 98;
  inline const ::app::message::CombineXinfaSpellProto& combine_spells(int index) const;
  inline ::app::message::CombineXinfaSpellProto* mutable_combine_spells(int index);
  inline ::app::message::CombineXinfaSpellProto* add_combine_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::CombineXinfaSpellProto >&
      combine_spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::CombineXinfaSpellProto >*
      mutable_combine_spells();

  // repeated .app.message.ActiveSpell passive_spell = 99;
  inline int passive_spell_size() const;
  inline void clear_passive_spell();
  static const int kPassiveSpellFieldNumber = 99;
  inline const ::app::message::ActiveSpell& passive_spell(int index) const;
  inline ::app::message::ActiveSpell* mutable_passive_spell(int index);
  inline ::app::message::ActiveSpell* add_passive_spell();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      passive_spell() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_passive_spell();

  // repeated .app.message.ActiveSpell active_spell = 100 [deprecated = true];
  inline int active_spell_size() const PROTOBUF_DEPRECATED;
  inline void clear_active_spell() PROTOBUF_DEPRECATED;
  static const int kActiveSpellFieldNumber = 100;
  inline const ::app::message::ActiveSpell& active_spell(int index) const PROTOBUF_DEPRECATED;
  inline ::app::message::ActiveSpell* mutable_active_spell(int index) PROTOBUF_DEPRECATED;
  inline ::app::message::ActiveSpell* add_active_spell() PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      active_spell() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_active_spell() PROTOBUF_DEPRECATED;

  // repeated int32 active_spell_used_times = 101 [deprecated = true];
  inline int active_spell_used_times_size() const PROTOBUF_DEPRECATED;
  inline void clear_active_spell_used_times() PROTOBUF_DEPRECATED;
  static const int kActiveSpellUsedTimesFieldNumber = 101;
  inline ::google::protobuf::int32 active_spell_used_times(int index) const PROTOBUF_DEPRECATED;
  inline void set_active_spell_used_times(int index, ::google::protobuf::int32 value) PROTOBUF_DEPRECATED;
  inline void add_active_spell_used_times(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      active_spell_used_times() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_active_spell_used_times() PROTOBUF_DEPRECATED;

  // repeated int32 shortcut_spell_type = 102;
  inline int shortcut_spell_type_size() const;
  inline void clear_shortcut_spell_type();
  static const int kShortcutSpellTypeFieldNumber = 102;
  inline ::google::protobuf::int32 shortcut_spell_type(int index) const;
  inline void set_shortcut_spell_type(int index, ::google::protobuf::int32 value);
  inline void add_shortcut_spell_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shortcut_spell_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shortcut_spell_type();

  // repeated int32 shortcut_spell_pos = 103;
  inline int shortcut_spell_pos_size() const;
  inline void clear_shortcut_spell_pos();
  static const int kShortcutSpellPosFieldNumber = 103;
  inline ::google::protobuf::int32 shortcut_spell_pos(int index) const;
  inline void set_shortcut_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_shortcut_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shortcut_spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shortcut_spell_pos();

  // optional int32 default_spell_pos = 104;
  inline bool has_default_spell_pos() const;
  inline void clear_default_spell_pos();
  static const int kDefaultSpellPosFieldNumber = 104;
  inline ::google::protobuf::int32 default_spell_pos() const;
  inline void set_default_spell_pos(::google::protobuf::int32 value);

  // optional int32 jump_shield = 105;
  inline bool has_jump_shield() const;
  inline void clear_jump_shield();
  static const int kJumpShieldFieldNumber = 105;
  inline ::google::protobuf::int32 jump_shield() const;
  inline void set_jump_shield(::google::protobuf::int32 value);

  // optional int32 stamina = 106;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 106;
  inline ::google::protobuf::int32 stamina() const;
  inline void set_stamina(::google::protobuf::int32 value);

  // optional .app.message.ClientRelation client_relation = 107;
  inline bool has_client_relation() const;
  inline void clear_client_relation();
  static const int kClientRelationFieldNumber = 107;
  inline const ::app::message::ClientRelation& client_relation() const;
  inline ::app::message::ClientRelation* mutable_client_relation();
  inline ::app::message::ClientRelation* release_client_relation();
  inline void set_allocated_client_relation(::app::message::ClientRelation* client_relation);

  // repeated int32 func_bits = 108;
  inline int func_bits_size() const;
  inline void clear_func_bits();
  static const int kFuncBitsFieldNumber = 108;
  inline ::google::protobuf::int32 func_bits(int index) const;
  inline void set_func_bits(int index, ::google::protobuf::int32 value);
  inline void add_func_bits(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      func_bits() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_func_bits();

  // optional int32 rage_amount = 109;
  inline bool has_rage_amount() const;
  inline void clear_rage_amount();
  static const int kRageAmountFieldNumber = 109;
  inline ::google::protobuf::int32 rage_amount() const;
  inline void set_rage_amount(::google::protobuf::int32 value);

  // optional int64 create_time = 110;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 110;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // optional bool is_collect_local_login_first_prize = 111;
  inline bool has_is_collect_local_login_first_prize() const;
  inline void clear_is_collect_local_login_first_prize();
  static const int kIsCollectLocalLoginFirstPrizeFieldNumber = 111;
  inline bool is_collect_local_login_first_prize() const;
  inline void set_is_collect_local_login_first_prize(bool value);

  // optional bool is_collect_local_login_daily_prize = 112;
  inline bool has_is_collect_local_login_daily_prize() const;
  inline void clear_is_collect_local_login_daily_prize();
  static const int kIsCollectLocalLoginDailyPrizeFieldNumber = 112;
  inline bool is_collect_local_login_daily_prize() const;
  inline void set_is_collect_local_login_daily_prize(bool value);

  // optional int32 phoenix_refine_times = 113 [deprecated = true];
  inline bool has_phoenix_refine_times() const PROTOBUF_DEPRECATED;
  inline void clear_phoenix_refine_times() PROTOBUF_DEPRECATED;
  static const int kPhoenixRefineTimesFieldNumber = 113;
  inline ::google::protobuf::int32 phoenix_refine_times() const PROTOBUF_DEPRECATED;
  inline void set_phoenix_refine_times(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional bool is_cross_single_story = 114;
  inline bool has_is_cross_single_story() const;
  inline void clear_is_cross_single_story();
  static const int kIsCrossSingleStoryFieldNumber = 114;
  inline bool is_cross_single_story() const;
  inline void set_is_cross_single_story(bool value);

  // optional int32 phoenix_money_refine_times = 116;
  inline bool has_phoenix_money_refine_times() const;
  inline void clear_phoenix_money_refine_times();
  static const int kPhoenixMoneyRefineTimesFieldNumber = 116;
  inline ::google::protobuf::int32 phoenix_money_refine_times() const;
  inline void set_phoenix_money_refine_times(::google::protobuf::int32 value);

  // optional int32 phoenix_lijin_refine_times = 117;
  inline bool has_phoenix_lijin_refine_times() const;
  inline void clear_phoenix_lijin_refine_times();
  static const int kPhoenixLijinRefineTimesFieldNumber = 117;
  inline ::google::protobuf::int32 phoenix_lijin_refine_times() const;
  inline void set_phoenix_lijin_refine_times(::google::protobuf::int32 value);

  // optional int32 phoenix_yuanbao_refine_times = 118;
  inline bool has_phoenix_yuanbao_refine_times() const;
  inline void clear_phoenix_yuanbao_refine_times();
  static const int kPhoenixYuanbaoRefineTimesFieldNumber = 118;
  inline ::google::protobuf::int32 phoenix_yuanbao_refine_times() const;
  inline void set_phoenix_yuanbao_refine_times(::google::protobuf::int32 value);

  // optional int32 login_day = 119;
  inline bool has_login_day() const;
  inline void clear_login_day();
  static const int kLoginDayFieldNumber = 119;
  inline ::google::protobuf::int32 login_day() const;
  inline void set_login_day(::google::protobuf::int32 value);

  // optional int32 tu_long_today_entered_times = 120;
  inline bool has_tu_long_today_entered_times() const;
  inline void clear_tu_long_today_entered_times();
  static const int kTuLongTodayEnteredTimesFieldNumber = 120;
  inline ::google::protobuf::int32 tu_long_today_entered_times() const;
  inline void set_tu_long_today_entered_times(::google::protobuf::int32 value);

  // optional int32 melt_amount = 121;
  inline bool has_melt_amount() const;
  inline void clear_melt_amount();
  static const int kMeltAmountFieldNumber = 121;
  inline ::google::protobuf::int32 melt_amount() const;
  inline void set_melt_amount(::google::protobuf::int32 value);

  // optional int32 challenge_dungeon_daily_times = 122;
  inline bool has_challenge_dungeon_daily_times() const;
  inline void clear_challenge_dungeon_daily_times();
  static const int kChallengeDungeonDailyTimesFieldNumber = 122;
  inline ::google::protobuf::int32 challenge_dungeon_daily_times() const;
  inline void set_challenge_dungeon_daily_times(::google::protobuf::int32 value);

  // optional int32 challenge_dungeon_assist_times = 123;
  inline bool has_challenge_dungeon_assist_times() const;
  inline void clear_challenge_dungeon_assist_times();
  static const int kChallengeDungeonAssistTimesFieldNumber = 123;
  inline ::google::protobuf::int32 challenge_dungeon_assist_times() const;
  inline void set_challenge_dungeon_assist_times(::google::protobuf::int32 value);

  // repeated int32 challenge_dungeon_use_times = 124;
  inline int challenge_dungeon_use_times_size() const;
  inline void clear_challenge_dungeon_use_times();
  static const int kChallengeDungeonUseTimesFieldNumber = 124;
  inline ::google::protobuf::int32 challenge_dungeon_use_times(int index) const;
  inline void set_challenge_dungeon_use_times(int index, ::google::protobuf::int32 value);
  inline void add_challenge_dungeon_use_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      challenge_dungeon_use_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_challenge_dungeon_use_times();

  // optional int32 honor = 125;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 125;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // optional .app.message.TianZuiProto tian_zui = 126;
  inline bool has_tian_zui() const;
  inline void clear_tian_zui();
  static const int kTianZuiFieldNumber = 126;
  inline const ::app::message::TianZuiProto& tian_zui() const;
  inline ::app::message::TianZuiProto* mutable_tian_zui();
  inline ::app::message::TianZuiProto* release_tian_zui();
  inline void set_allocated_tian_zui(::app::message::TianZuiProto* tian_zui);

  // optional .app.message.TianJieProto tian_jie = 127;
  inline bool has_tian_jie() const;
  inline void clear_tian_jie();
  static const int kTianJieFieldNumber = 127;
  inline const ::app::message::TianJieProto& tian_jie() const;
  inline ::app::message::TianJieProto* mutable_tian_jie();
  inline ::app::message::TianJieProto* release_tian_jie();
  inline void set_allocated_tian_jie(::app::message::TianJieProto* tian_jie);

  // optional int32 first_recharge_collect_index = 129;
  inline bool has_first_recharge_collect_index() const;
  inline void clear_first_recharge_collect_index();
  static const int kFirstRechargeCollectIndexFieldNumber = 129;
  inline ::google::protobuf::int32 first_recharge_collect_index() const;
  inline void set_first_recharge_collect_index(::google::protobuf::int32 value);

  // optional int32 login_prize_info = 131;
  inline bool has_login_prize_info() const;
  inline void clear_login_prize_info();
  static const int kLoginPrizeInfoFieldNumber = 131;
  inline ::google::protobuf::int32 login_prize_info() const;
  inline void set_login_prize_info(::google::protobuf::int32 value);

  // optional int32 invest_upgrade_bank_money = 132;
  inline bool has_invest_upgrade_bank_money() const;
  inline void clear_invest_upgrade_bank_money();
  static const int kInvestUpgradeBankMoneyFieldNumber = 132;
  inline ::google::protobuf::int32 invest_upgrade_bank_money() const;
  inline void set_invest_upgrade_bank_money(::google::protobuf::int32 value);

  // repeated int32 collect_upgrade_bank_level = 133;
  inline int collect_upgrade_bank_level_size() const;
  inline void clear_collect_upgrade_bank_level();
  static const int kCollectUpgradeBankLevelFieldNumber = 133;
  inline ::google::protobuf::int32 collect_upgrade_bank_level(int index) const;
  inline void set_collect_upgrade_bank_level(int index, ::google::protobuf::int32 value);
  inline void add_collect_upgrade_bank_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      collect_upgrade_bank_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_collect_upgrade_bank_level();

  // repeated int32 collect_upgrade_bank_lijin = 134;
  inline int collect_upgrade_bank_lijin_size() const;
  inline void clear_collect_upgrade_bank_lijin();
  static const int kCollectUpgradeBankLijinFieldNumber = 134;
  inline ::google::protobuf::int32 collect_upgrade_bank_lijin(int index) const;
  inline void set_collect_upgrade_bank_lijin(int index, ::google::protobuf::int32 value);
  inline void add_collect_upgrade_bank_lijin(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      collect_upgrade_bank_lijin() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_collect_upgrade_bank_lijin();

  // optional int32 invest_monthly_bank_money = 135;
  inline bool has_invest_monthly_bank_money() const;
  inline void clear_invest_monthly_bank_money();
  static const int kInvestMonthlyBankMoneyFieldNumber = 135;
  inline ::google::protobuf::int32 invest_monthly_bank_money() const;
  inline void set_invest_monthly_bank_money(::google::protobuf::int32 value);

  // optional int64 invest_monthly_bank_time = 136;
  inline bool has_invest_monthly_bank_time() const;
  inline void clear_invest_monthly_bank_time();
  static const int kInvestMonthlyBankTimeFieldNumber = 136;
  inline ::google::protobuf::int64 invest_monthly_bank_time() const;
  inline void set_invest_monthly_bank_time(::google::protobuf::int64 value);

  // optional int64 monthly_bank_prev_collect_time = 137;
  inline bool has_monthly_bank_prev_collect_time() const;
  inline void clear_monthly_bank_prev_collect_time();
  static const int kMonthlyBankPrevCollectTimeFieldNumber = 137;
  inline ::google::protobuf::int64 monthly_bank_prev_collect_time() const;
  inline void set_monthly_bank_prev_collect_time(::google::protobuf::int64 value);

  // optional int64 monthly_bank_prev_collect_time2 = 138;
  inline bool has_monthly_bank_prev_collect_time2() const;
  inline void clear_monthly_bank_prev_collect_time2();
  static const int kMonthlyBankPrevCollectTime2FieldNumber = 138;
  inline ::google::protobuf::int64 monthly_bank_prev_collect_time2() const;
  inline void set_monthly_bank_prev_collect_time2(::google::protobuf::int64 value);

  // optional int32 monthly_bank_online_lijin = 139;
  inline bool has_monthly_bank_online_lijin() const;
  inline void clear_monthly_bank_online_lijin();
  static const int kMonthlyBankOnlineLijinFieldNumber = 139;
  inline ::google::protobuf::int32 monthly_bank_online_lijin() const;
  inline void set_monthly_bank_online_lijin(::google::protobuf::int32 value);

  // optional int32 monthly_bank_base_lijin = 140;
  inline bool has_monthly_bank_base_lijin() const;
  inline void clear_monthly_bank_base_lijin();
  static const int kMonthlyBankBaseLijinFieldNumber = 140;
  inline ::google::protobuf::int32 monthly_bank_base_lijin() const;
  inline void set_monthly_bank_base_lijin(::google::protobuf::int32 value);

  // optional int32 monthly_bank_online_hours = 141;
  inline bool has_monthly_bank_online_hours() const;
  inline void clear_monthly_bank_online_hours();
  static const int kMonthlyBankOnlineHoursFieldNumber = 141;
  inline ::google::protobuf::int32 monthly_bank_online_hours() const;
  inline void set_monthly_bank_online_hours(::google::protobuf::int32 value);

  // optional int64 total_online_time = 142;
  inline bool has_total_online_time() const;
  inline void clear_total_online_time();
  static const int kTotalOnlineTimeFieldNumber = 142;
  inline ::google::protobuf::int64 total_online_time() const;
  inline void set_total_online_time(::google::protobuf::int64 value);

  // optional .app.message.AchievementInfoProto achievement = 143;
  inline bool has_achievement() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 143;
  inline const ::app::message::AchievementInfoProto& achievement() const;
  inline ::app::message::AchievementInfoProto* mutable_achievement();
  inline ::app::message::AchievementInfoProto* release_achievement();
  inline void set_allocated_achievement(::app::message::AchievementInfoProto* achievement);

  // optional .app.message.ShouCangProto shou_cang = 200;
  inline bool has_shou_cang() const;
  inline void clear_shou_cang();
  static const int kShouCangFieldNumber = 200;
  inline const ::app::message::ShouCangProto& shou_cang() const;
  inline ::app::message::ShouCangProto* mutable_shou_cang();
  inline ::app::message::ShouCangProto* release_shou_cang();
  inline void set_allocated_shou_cang(::app::message::ShouCangProto* shou_cang);

  // optional bool zhong_hua_ge_today_first_passed = 201;
  inline bool has_zhong_hua_ge_today_first_passed() const;
  inline void clear_zhong_hua_ge_today_first_passed();
  static const int kZhongHuaGeTodayFirstPassedFieldNumber = 201;
  inline bool zhong_hua_ge_today_first_passed() const;
  inline void set_zhong_hua_ge_today_first_passed(bool value);

  // optional int32 gaoji_melt_amount = 202;
  inline bool has_gaoji_melt_amount() const;
  inline void clear_gaoji_melt_amount();
  static const int kGaojiMeltAmountFieldNumber = 202;
  inline ::google::protobuf::int32 gaoji_melt_amount() const;
  inline void set_gaoji_melt_amount(::google::protobuf::int32 value);

  // optional int32 left_ya_biao_times_today = 203;
  inline bool has_left_ya_biao_times_today() const;
  inline void clear_left_ya_biao_times_today();
  static const int kLeftYaBiaoTimesTodayFieldNumber = 203;
  inline ::google::protobuf::int32 left_ya_biao_times_today() const;
  inline void set_left_ya_biao_times_today(::google::protobuf::int32 value);

  // optional int32 left_jie_biao_times_today = 204;
  inline bool has_left_jie_biao_times_today() const;
  inline void clear_left_jie_biao_times_today();
  static const int kLeftJieBiaoTimesTodayFieldNumber = 204;
  inline ::google::protobuf::int32 left_jie_biao_times_today() const;
  inline void set_left_jie_biao_times_today(::google::protobuf::int32 value);

  // optional bool has_safe_code = 205;
  inline bool has_has_safe_code() const;
  inline void clear_has_safe_code();
  static const int kHasSafeCodeFieldNumber = 205;
  inline bool has_safe_code() const;
  inline void set_has_safe_code(bool value);

  // optional string safe_code_question = 206;
  inline bool has_safe_code_question() const;
  inline void clear_safe_code_question();
  static const int kSafeCodeQuestionFieldNumber = 206;
  inline const ::std::string& safe_code_question() const;
  inline void set_safe_code_question(const ::std::string& value);
  inline void set_safe_code_question(const char* value);
  inline void set_safe_code_question(const char* value, size_t size);
  inline ::std::string* mutable_safe_code_question();
  inline ::std::string* release_safe_code_question();
  inline void set_allocated_safe_code_question(::std::string* safe_code_question);

  // repeated int32 jin_jie_lucky_card_type = 207;
  inline int jin_jie_lucky_card_type_size() const;
  inline void clear_jin_jie_lucky_card_type();
  static const int kJinJieLuckyCardTypeFieldNumber = 207;
  inline ::google::protobuf::int32 jin_jie_lucky_card_type(int index) const;
  inline void set_jin_jie_lucky_card_type(int index, ::google::protobuf::int32 value);
  inline void add_jin_jie_lucky_card_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jin_jie_lucky_card_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jin_jie_lucky_card_type();

  // repeated int64 jin_jie_lucky_card_expire_time = 208;
  inline int jin_jie_lucky_card_expire_time_size() const;
  inline void clear_jin_jie_lucky_card_expire_time();
  static const int kJinJieLuckyCardExpireTimeFieldNumber = 208;
  inline ::google::protobuf::int64 jin_jie_lucky_card_expire_time(int index) const;
  inline void set_jin_jie_lucky_card_expire_time(int index, ::google::protobuf::int64 value);
  inline void add_jin_jie_lucky_card_expire_time(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      jin_jie_lucky_card_expire_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_jin_jie_lucky_card_expire_time();

  // repeated int32 jin_jie_lucky_card_rate = 209;
  inline int jin_jie_lucky_card_rate_size() const;
  inline void clear_jin_jie_lucky_card_rate();
  static const int kJinJieLuckyCardRateFieldNumber = 209;
  inline ::google::protobuf::int32 jin_jie_lucky_card_rate(int index) const;
  inline void set_jin_jie_lucky_card_rate(int index, ::google::protobuf::int32 value);
  inline void add_jin_jie_lucky_card_rate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jin_jie_lucky_card_rate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jin_jie_lucky_card_rate();

  // repeated int32 daily_card_use_stat_goods_id = 210;
  inline int daily_card_use_stat_goods_id_size() const;
  inline void clear_daily_card_use_stat_goods_id();
  static const int kDailyCardUseStatGoodsIdFieldNumber = 210;
  inline ::google::protobuf::int32 daily_card_use_stat_goods_id(int index) const;
  inline void set_daily_card_use_stat_goods_id(int index, ::google::protobuf::int32 value);
  inline void add_daily_card_use_stat_goods_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      daily_card_use_stat_goods_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_daily_card_use_stat_goods_id();

  // repeated int32 daily_card_use_stat_use_count = 211;
  inline int daily_card_use_stat_use_count_size() const;
  inline void clear_daily_card_use_stat_use_count();
  static const int kDailyCardUseStatUseCountFieldNumber = 211;
  inline ::google::protobuf::int32 daily_card_use_stat_use_count(int index) const;
  inline void set_daily_card_use_stat_use_count(int index, ::google::protobuf::int32 value);
  inline void add_daily_card_use_stat_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      daily_card_use_stat_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_daily_card_use_stat_use_count();

  // repeated int32 mo_shi_type = 212;
  inline int mo_shi_type_size() const;
  inline void clear_mo_shi_type();
  static const int kMoShiTypeFieldNumber = 212;
  inline ::google::protobuf::int32 mo_shi_type(int index) const;
  inline void set_mo_shi_type(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_type();

  // repeated int32 mo_shi_level = 213;
  inline int mo_shi_level_size() const;
  inline void clear_mo_shi_level();
  static const int kMoShiLevelFieldNumber = 213;
  inline ::google::protobuf::int32 mo_shi_level(int index) const;
  inline void set_mo_shi_level(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_level();

  // repeated int32 mo_shi_bless_amount = 214;
  inline int mo_shi_bless_amount_size() const;
  inline void clear_mo_shi_bless_amount();
  static const int kMoShiBlessAmountFieldNumber = 214;
  inline ::google::protobuf::int32 mo_shi_bless_amount(int index) const;
  inline void set_mo_shi_bless_amount(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_bless_amount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_bless_amount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_bless_amount();

  // repeated int64 mo_shi_bless_amount_clear_time = 215;
  inline int mo_shi_bless_amount_clear_time_size() const;
  inline void clear_mo_shi_bless_amount_clear_time();
  static const int kMoShiBlessAmountClearTimeFieldNumber = 215;
  inline ::google::protobuf::int64 mo_shi_bless_amount_clear_time(int index) const;
  inline void set_mo_shi_bless_amount_clear_time(int index, ::google::protobuf::int64 value);
  inline void add_mo_shi_bless_amount_clear_time(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      mo_shi_bless_amount_clear_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_mo_shi_bless_amount_clear_time();

  // repeated int32 mo_shi_spell_id = 216;
  inline int mo_shi_spell_id_size() const;
  inline void clear_mo_shi_spell_id();
  static const int kMoShiSpellIdFieldNumber = 216;
  inline ::google::protobuf::int32 mo_shi_spell_id(int index) const;
  inline void set_mo_shi_spell_id(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_spell_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_spell_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_spell_id();

  // optional bool mo_shi_is_hide = 510;
  inline bool has_mo_shi_is_hide() const;
  inline void clear_mo_shi_is_hide();
  static const int kMoShiIsHideFieldNumber = 510;
  inline bool mo_shi_is_hide() const;
  inline void set_mo_shi_is_hide(bool value);

  // repeated int32 qian_qiu_da_jie_type = 217;
  inline int qian_qiu_da_jie_type_size() const;
  inline void clear_qian_qiu_da_jie_type();
  static const int kQianQiuDaJieTypeFieldNumber = 217;
  inline ::google::protobuf::int32 qian_qiu_da_jie_type(int index) const;
  inline void set_qian_qiu_da_jie_type(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_type();

  // repeated int32 qian_qiu_da_jie_level = 218;
  inline int qian_qiu_da_jie_level_size() const;
  inline void clear_qian_qiu_da_jie_level();
  static const int kQianQiuDaJieLevelFieldNumber = 218;
  inline ::google::protobuf::int32 qian_qiu_da_jie_level(int index) const;
  inline void set_qian_qiu_da_jie_level(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_level();

  // repeated int32 qian_qiu_da_jie_bless_amount = 219;
  inline int qian_qiu_da_jie_bless_amount_size() const;
  inline void clear_qian_qiu_da_jie_bless_amount();
  static const int kQianQiuDaJieBlessAmountFieldNumber = 219;
  inline ::google::protobuf::int32 qian_qiu_da_jie_bless_amount(int index) const;
  inline void set_qian_qiu_da_jie_bless_amount(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_bless_amount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_bless_amount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_bless_amount();

  // repeated int64 qian_qiu_da_jie_bless_amount_clear_time = 220;
  inline int qian_qiu_da_jie_bless_amount_clear_time_size() const;
  inline void clear_qian_qiu_da_jie_bless_amount_clear_time();
  static const int kQianQiuDaJieBlessAmountClearTimeFieldNumber = 220;
  inline ::google::protobuf::int64 qian_qiu_da_jie_bless_amount_clear_time(int index) const;
  inline void set_qian_qiu_da_jie_bless_amount_clear_time(int index, ::google::protobuf::int64 value);
  inline void add_qian_qiu_da_jie_bless_amount_clear_time(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      qian_qiu_da_jie_bless_amount_clear_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_qian_qiu_da_jie_bless_amount_clear_time();

  // repeated int32 qian_qiu_da_jie_qian_neng_use_count = 340;
  inline int qian_qiu_da_jie_qian_neng_use_count_size() const;
  inline void clear_qian_qiu_da_jie_qian_neng_use_count();
  static const int kQianQiuDaJieQianNengUseCountFieldNumber = 340;
  inline ::google::protobuf::int32 qian_qiu_da_jie_qian_neng_use_count(int index) const;
  inline void set_qian_qiu_da_jie_qian_neng_use_count(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_qian_neng_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_qian_neng_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_qian_neng_use_count();

  // repeated int32 qian_qiu_da_jie_huan_hua_use_count = 341;
  inline int qian_qiu_da_jie_huan_hua_use_count_size() const;
  inline void clear_qian_qiu_da_jie_huan_hua_use_count();
  static const int kQianQiuDaJieHuanHuaUseCountFieldNumber = 341;
  inline ::google::protobuf::int32 qian_qiu_da_jie_huan_hua_use_count(int index) const;
  inline void set_qian_qiu_da_jie_huan_hua_use_count(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_huan_hua_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_huan_hua_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_huan_hua_use_count();

  // optional bool qian_qiu_da_jie_is_hide = 508;
  inline bool has_qian_qiu_da_jie_is_hide() const;
  inline void clear_qian_qiu_da_jie_is_hide();
  static const int kQianQiuDaJieIsHideFieldNumber = 508;
  inline bool qian_qiu_da_jie_is_hide() const;
  inline void set_qian_qiu_da_jie_is_hide(bool value);

  // repeated int32 qian_qiu_da_jie_qian_neng_extra_max_use_count = 384;
  inline int qian_qiu_da_jie_qian_neng_extra_max_use_count_size() const;
  inline void clear_qian_qiu_da_jie_qian_neng_extra_max_use_count();
  static const int kQianQiuDaJieQianNengExtraMaxUseCountFieldNumber = 384;
  inline ::google::protobuf::int32 qian_qiu_da_jie_qian_neng_extra_max_use_count(int index) const;
  inline void set_qian_qiu_da_jie_qian_neng_extra_max_use_count(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_qian_neng_extra_max_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_qian_neng_extra_max_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_qian_neng_extra_max_use_count();

  // repeated int32 qian_qiu_da_jie_huan_hua_extra_max_use_count = 385;
  inline int qian_qiu_da_jie_huan_hua_extra_max_use_count_size() const;
  inline void clear_qian_qiu_da_jie_huan_hua_extra_max_use_count();
  static const int kQianQiuDaJieHuanHuaExtraMaxUseCountFieldNumber = 385;
  inline ::google::protobuf::int32 qian_qiu_da_jie_huan_hua_extra_max_use_count(int index) const;
  inline void set_qian_qiu_da_jie_huan_hua_extra_max_use_count(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_huan_hua_extra_max_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_huan_hua_extra_max_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_huan_hua_extra_max_use_count();

  // repeated int32 qian_qiu_da_jie_qian_neng_max_use_count_extra_times = 386;
  inline int qian_qiu_da_jie_qian_neng_max_use_count_extra_times_size() const;
  inline void clear_qian_qiu_da_jie_qian_neng_max_use_count_extra_times();
  static const int kQianQiuDaJieQianNengMaxUseCountExtraTimesFieldNumber = 386;
  inline ::google::protobuf::int32 qian_qiu_da_jie_qian_neng_max_use_count_extra_times(int index) const;
  inline void set_qian_qiu_da_jie_qian_neng_max_use_count_extra_times(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_qian_neng_max_use_count_extra_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_qian_neng_max_use_count_extra_times();

  // repeated int32 qian_qiu_da_jie_huan_hua_max_use_count_extra_times = 387;
  inline int qian_qiu_da_jie_huan_hua_max_use_count_extra_times_size() const;
  inline void clear_qian_qiu_da_jie_huan_hua_max_use_count_extra_times();
  static const int kQianQiuDaJieHuanHuaMaxUseCountExtraTimesFieldNumber = 387;
  inline ::google::protobuf::int32 qian_qiu_da_jie_huan_hua_max_use_count_extra_times(int index) const;
  inline void set_qian_qiu_da_jie_huan_hua_max_use_count_extra_times(int index, ::google::protobuf::int32 value);
  inline void add_qian_qiu_da_jie_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qian_qiu_da_jie_huan_hua_max_use_count_extra_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qian_qiu_da_jie_huan_hua_max_use_count_extra_times();

  // optional int32 long_yuan = 221;
  inline bool has_long_yuan() const;
  inline void clear_long_yuan();
  static const int kLongYuanFieldNumber = 221;
  inline ::google::protobuf::int32 long_yuan() const;
  inline void set_long_yuan(::google::protobuf::int32 value);

  // optional .app.message.HeroJingJieProto jing_jie = 222;
  inline bool has_jing_jie() const;
  inline void clear_jing_jie();
  static const int kJingJieFieldNumber = 222;
  inline const ::app::message::HeroJingJieProto& jing_jie() const;
  inline ::app::message::HeroJingJieProto* mutable_jing_jie();
  inline ::app::message::HeroJingJieProto* release_jing_jie();
  inline void set_allocated_jing_jie(::app::message::HeroJingJieProto* jing_jie);

  // repeated int32 mo_shi_qian_neng_use_count = 223;
  inline int mo_shi_qian_neng_use_count_size() const;
  inline void clear_mo_shi_qian_neng_use_count();
  static const int kMoShiQianNengUseCountFieldNumber = 223;
  inline ::google::protobuf::int32 mo_shi_qian_neng_use_count(int index) const;
  inline void set_mo_shi_qian_neng_use_count(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_qian_neng_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_qian_neng_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_qian_neng_use_count();

  // repeated int32 mo_shi_huan_hua_use_count = 224;
  inline int mo_shi_huan_hua_use_count_size() const;
  inline void clear_mo_shi_huan_hua_use_count();
  static const int kMoShiHuanHuaUseCountFieldNumber = 224;
  inline ::google::protobuf::int32 mo_shi_huan_hua_use_count(int index) const;
  inline void set_mo_shi_huan_hua_use_count(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_huan_hua_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_huan_hua_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_huan_hua_use_count();

  // repeated int32 mo_shi_qian_neng_extra_max_use_count = 388;
  inline int mo_shi_qian_neng_extra_max_use_count_size() const;
  inline void clear_mo_shi_qian_neng_extra_max_use_count();
  static const int kMoShiQianNengExtraMaxUseCountFieldNumber = 388;
  inline ::google::protobuf::int32 mo_shi_qian_neng_extra_max_use_count(int index) const;
  inline void set_mo_shi_qian_neng_extra_max_use_count(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_qian_neng_extra_max_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_qian_neng_extra_max_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_qian_neng_extra_max_use_count();

  // repeated int32 mo_shi_huan_hua_extra_max_use_count = 389;
  inline int mo_shi_huan_hua_extra_max_use_count_size() const;
  inline void clear_mo_shi_huan_hua_extra_max_use_count();
  static const int kMoShiHuanHuaExtraMaxUseCountFieldNumber = 389;
  inline ::google::protobuf::int32 mo_shi_huan_hua_extra_max_use_count(int index) const;
  inline void set_mo_shi_huan_hua_extra_max_use_count(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_huan_hua_extra_max_use_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_huan_hua_extra_max_use_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_huan_hua_extra_max_use_count();

  // repeated int32 mo_shi_qian_neng_max_use_count_extra_times = 390;
  inline int mo_shi_qian_neng_max_use_count_extra_times_size() const;
  inline void clear_mo_shi_qian_neng_max_use_count_extra_times();
  static const int kMoShiQianNengMaxUseCountExtraTimesFieldNumber = 390;
  inline ::google::protobuf::int32 mo_shi_qian_neng_max_use_count_extra_times(int index) const;
  inline void set_mo_shi_qian_neng_max_use_count_extra_times(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_qian_neng_max_use_count_extra_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_qian_neng_max_use_count_extra_times();

  // repeated int32 mo_shi_huan_hua_max_use_count_extra_times = 391;
  inline int mo_shi_huan_hua_max_use_count_extra_times_size() const;
  inline void clear_mo_shi_huan_hua_max_use_count_extra_times();
  static const int kMoShiHuanHuaMaxUseCountExtraTimesFieldNumber = 391;
  inline ::google::protobuf::int32 mo_shi_huan_hua_max_use_count_extra_times(int index) const;
  inline void set_mo_shi_huan_hua_max_use_count_extra_times(int index, ::google::protobuf::int32 value);
  inline void add_mo_shi_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_shi_huan_hua_max_use_count_extra_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_shi_huan_hua_max_use_count_extra_times();

  // optional int32 chi_huo_shen_gong_jie_shu = 225;
  inline bool has_chi_huo_shen_gong_jie_shu() const;
  inline void clear_chi_huo_shen_gong_jie_shu();
  static const int kChiHuoShenGongJieShuFieldNumber = 225;
  inline ::google::protobuf::int32 chi_huo_shen_gong_jie_shu() const;
  inline void set_chi_huo_shen_gong_jie_shu(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_ceng_shu = 226;
  inline bool has_chi_huo_shen_gong_ceng_shu() const;
  inline void clear_chi_huo_shen_gong_ceng_shu();
  static const int kChiHuoShenGongCengShuFieldNumber = 226;
  inline ::google::protobuf::int32 chi_huo_shen_gong_ceng_shu() const;
  inline void set_chi_huo_shen_gong_ceng_shu(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_bless_amount = 227;
  inline bool has_chi_huo_shen_gong_bless_amount() const;
  inline void clear_chi_huo_shen_gong_bless_amount();
  static const int kChiHuoShenGongBlessAmountFieldNumber = 227;
  inline ::google::protobuf::int32 chi_huo_shen_gong_bless_amount() const;
  inline void set_chi_huo_shen_gong_bless_amount(::google::protobuf::int32 value);

  // optional int64 chi_huo_shen_gong_bless_amount_clear_time = 228;
  inline bool has_chi_huo_shen_gong_bless_amount_clear_time() const;
  inline void clear_chi_huo_shen_gong_bless_amount_clear_time();
  static const int kChiHuoShenGongBlessAmountClearTimeFieldNumber = 228;
  inline ::google::protobuf::int64 chi_huo_shen_gong_bless_amount_clear_time() const;
  inline void set_chi_huo_shen_gong_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 chi_huo_shen_gong_qian_neng_use_count = 350;
  inline bool has_chi_huo_shen_gong_qian_neng_use_count() const;
  inline void clear_chi_huo_shen_gong_qian_neng_use_count();
  static const int kChiHuoShenGongQianNengUseCountFieldNumber = 350;
  inline ::google::protobuf::int32 chi_huo_shen_gong_qian_neng_use_count() const;
  inline void set_chi_huo_shen_gong_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_huan_hua_use_count = 351;
  inline bool has_chi_huo_shen_gong_huan_hua_use_count() const;
  inline void clear_chi_huo_shen_gong_huan_hua_use_count();
  static const int kChiHuoShenGongHuanHuaUseCountFieldNumber = 351;
  inline ::google::protobuf::int32 chi_huo_shen_gong_huan_hua_use_count() const;
  inline void set_chi_huo_shen_gong_huan_hua_use_count(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_qian_neng_extra_max_use_count = 392;
  inline bool has_chi_huo_shen_gong_qian_neng_extra_max_use_count() const;
  inline void clear_chi_huo_shen_gong_qian_neng_extra_max_use_count();
  static const int kChiHuoShenGongQianNengExtraMaxUseCountFieldNumber = 392;
  inline ::google::protobuf::int32 chi_huo_shen_gong_qian_neng_extra_max_use_count() const;
  inline void set_chi_huo_shen_gong_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_huan_hua_extra_max_use_count = 393;
  inline bool has_chi_huo_shen_gong_huan_hua_extra_max_use_count() const;
  inline void clear_chi_huo_shen_gong_huan_hua_extra_max_use_count();
  static const int kChiHuoShenGongHuanHuaExtraMaxUseCountFieldNumber = 393;
  inline ::google::protobuf::int32 chi_huo_shen_gong_huan_hua_extra_max_use_count() const;
  inline void set_chi_huo_shen_gong_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times = 394;
  inline bool has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times() const;
  inline void clear_chi_huo_shen_gong_qian_neng_max_use_count_extra_times();
  static const int kChiHuoShenGongQianNengMaxUseCountExtraTimesFieldNumber = 394;
  inline ::google::protobuf::int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times() const;
  inline void set_chi_huo_shen_gong_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times = 395;
  inline bool has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times() const;
  inline void clear_chi_huo_shen_gong_huan_hua_max_use_count_extra_times();
  static const int kChiHuoShenGongHuanHuaMaxUseCountExtraTimesFieldNumber = 395;
  inline ::google::protobuf::int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times() const;
  inline void set_chi_huo_shen_gong_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional bool chi_huo_shen_gong_is_hide = 509;
  inline bool has_chi_huo_shen_gong_is_hide() const;
  inline void clear_chi_huo_shen_gong_is_hide();
  static const int kChiHuoShenGongIsHideFieldNumber = 509;
  inline bool chi_huo_shen_gong_is_hide() const;
  inline void set_chi_huo_shen_gong_is_hide(bool value);

  // optional int32 draw_prize_point = 230;
  inline bool has_draw_prize_point() const;
  inline void clear_draw_prize_point();
  static const int kDrawPrizePointFieldNumber = 230;
  inline ::google::protobuf::int32 draw_prize_point() const;
  inline void set_draw_prize_point(::google::protobuf::int32 value);

  // optional int32 draw_prize_storage_goods_count = 231;
  inline bool has_draw_prize_storage_goods_count() const;
  inline void clear_draw_prize_storage_goods_count();
  static const int kDrawPrizeStorageGoodsCountFieldNumber = 231;
  inline ::google::protobuf::int32 draw_prize_storage_goods_count() const;
  inline void set_draw_prize_storage_goods_count(::google::protobuf::int32 value);

  // repeated int32 draw_prize_exchange_count = 232;
  inline int draw_prize_exchange_count_size() const;
  inline void clear_draw_prize_exchange_count();
  static const int kDrawPrizeExchangeCountFieldNumber = 232;
  inline ::google::protobuf::int32 draw_prize_exchange_count(int index) const;
  inline void set_draw_prize_exchange_count(int index, ::google::protobuf::int32 value);
  inline void add_draw_prize_exchange_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      draw_prize_exchange_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_draw_prize_exchange_count();

  // optional int32 lucky_draw_prize_point = 233;
  inline bool has_lucky_draw_prize_point() const;
  inline void clear_lucky_draw_prize_point();
  static const int kLuckyDrawPrizePointFieldNumber = 233;
  inline ::google::protobuf::int32 lucky_draw_prize_point() const;
  inline void set_lucky_draw_prize_point(::google::protobuf::int32 value);

  // optional int32 lucky_draw_prize_storage_goods_count = 234;
  inline bool has_lucky_draw_prize_storage_goods_count() const;
  inline void clear_lucky_draw_prize_storage_goods_count();
  static const int kLuckyDrawPrizeStorageGoodsCountFieldNumber = 234;
  inline ::google::protobuf::int32 lucky_draw_prize_storage_goods_count() const;
  inline void set_lucky_draw_prize_storage_goods_count(::google::protobuf::int32 value);

  // optional int32 new_draw_prize_point = 333;
  inline bool has_new_draw_prize_point() const;
  inline void clear_new_draw_prize_point();
  static const int kNewDrawPrizePointFieldNumber = 333;
  inline ::google::protobuf::int32 new_draw_prize_point() const;
  inline void set_new_draw_prize_point(::google::protobuf::int32 value);

  // optional int32 new_draw_prize_storage_goods_count = 334;
  inline bool has_new_draw_prize_storage_goods_count() const;
  inline void clear_new_draw_prize_storage_goods_count();
  static const int kNewDrawPrizeStorageGoodsCountFieldNumber = 334;
  inline ::google::protobuf::int32 new_draw_prize_storage_goods_count() const;
  inline void set_new_draw_prize_storage_goods_count(::google::protobuf::int32 value);

  // optional .app.message.YitianshenjueProto yitianshenjue_info = 235;
  inline bool has_yitianshenjue_info() const;
  inline void clear_yitianshenjue_info();
  static const int kYitianshenjueInfoFieldNumber = 235;
  inline const ::app::message::YitianshenjueProto& yitianshenjue_info() const;
  inline ::app::message::YitianshenjueProto* mutable_yitianshenjue_info();
  inline ::app::message::YitianshenjueProto* release_yitianshenjue_info();
  inline void set_allocated_yitianshenjue_info(::app::message::YitianshenjueProto* yitianshenjue_info);

  // optional int32 daily_wheel_count = 270;
  inline bool has_daily_wheel_count() const;
  inline void clear_daily_wheel_count();
  static const int kDailyWheelCountFieldNumber = 270;
  inline ::google::protobuf::int32 daily_wheel_count() const;
  inline void set_daily_wheel_count(::google::protobuf::int32 value);

  // repeated int32 finished_xin_mo_scene_id = 280;
  inline int finished_xin_mo_scene_id_size() const;
  inline void clear_finished_xin_mo_scene_id();
  static const int kFinishedXinMoSceneIdFieldNumber = 280;
  inline ::google::protobuf::int32 finished_xin_mo_scene_id(int index) const;
  inline void set_finished_xin_mo_scene_id(int index, ::google::protobuf::int32 value);
  inline void add_finished_xin_mo_scene_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished_xin_mo_scene_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished_xin_mo_scene_id();

  // repeated int64 collected_recharge_rank_promotion_prize = 299;
  inline int collected_recharge_rank_promotion_prize_size() const;
  inline void clear_collected_recharge_rank_promotion_prize();
  static const int kCollectedRechargeRankPromotionPrizeFieldNumber = 299;
  inline ::google::protobuf::int64 collected_recharge_rank_promotion_prize(int index) const;
  inline void set_collected_recharge_rank_promotion_prize(int index, ::google::protobuf::int64 value);
  inline void add_collected_recharge_rank_promotion_prize(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      collected_recharge_rank_promotion_prize() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_collected_recharge_rank_promotion_prize();

  // repeated int64 collected_rank_promotion_prize = 300;
  inline int collected_rank_promotion_prize_size() const;
  inline void clear_collected_rank_promotion_prize();
  static const int kCollectedRankPromotionPrizeFieldNumber = 300;
  inline ::google::protobuf::int64 collected_rank_promotion_prize(int index) const;
  inline void set_collected_rank_promotion_prize(int index, ::google::protobuf::int64 value);
  inline void add_collected_rank_promotion_prize(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      collected_rank_promotion_prize() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_collected_rank_promotion_prize();

  // optional int32 arena_pair_point = 301;
  inline bool has_arena_pair_point() const;
  inline void clear_arena_pair_point();
  static const int kArenaPairPointFieldNumber = 301;
  inline ::google::protobuf::int32 arena_pair_point() const;
  inline void set_arena_pair_point(::google::protobuf::int32 value);

  // optional int32 today_finished_arena_count = 302;
  inline bool has_today_finished_arena_count() const;
  inline void clear_today_finished_arena_count();
  static const int kTodayFinishedArenaCountFieldNumber = 302;
  inline ::google::protobuf::int32 today_finished_arena_count() const;
  inline void set_today_finished_arena_count(::google::protobuf::int32 value);

  // optional int32 arena_shop_point = 303;
  inline bool has_arena_shop_point() const;
  inline void clear_arena_shop_point();
  static const int kArenaShopPointFieldNumber = 303;
  inline ::google::protobuf::int32 arena_shop_point() const;
  inline void set_arena_shop_point(::google::protobuf::int32 value);

  // optional int32 arena_collectable_shop_point = 304;
  inline bool has_arena_collectable_shop_point() const;
  inline void clear_arena_collectable_shop_point();
  static const int kArenaCollectableShopPointFieldNumber = 304;
  inline ::google::protobuf::int32 arena_collectable_shop_point() const;
  inline void set_arena_collectable_shop_point(::google::protobuf::int32 value);

  // optional int32 arena_yesterday_finish_count = 305;
  inline bool has_arena_yesterday_finish_count() const;
  inline void clear_arena_yesterday_finish_count();
  static const int kArenaYesterdayFinishCountFieldNumber = 305;
  inline ::google::protobuf::int32 arena_yesterday_finish_count() const;
  inline void set_arena_yesterday_finish_count(::google::protobuf::int32 value);

  // optional int32 arena_yesterday_pair_point = 306;
  inline bool has_arena_yesterday_pair_point() const;
  inline void clear_arena_yesterday_pair_point();
  static const int kArenaYesterdayPairPointFieldNumber = 306;
  inline ::google::protobuf::int32 arena_yesterday_pair_point() const;
  inline void set_arena_yesterday_pair_point(::google::protobuf::int32 value);

  // optional int32 arena_yesterday_original_shop_point = 307;
  inline bool has_arena_yesterday_original_shop_point() const;
  inline void clear_arena_yesterday_original_shop_point();
  static const int kArenaYesterdayOriginalShopPointFieldNumber = 307;
  inline ::google::protobuf::int32 arena_yesterday_original_shop_point() const;
  inline void set_arena_yesterday_original_shop_point(::google::protobuf::int32 value);

  // optional int32 arena_shop_point_added_today_by_win = 308;
  inline bool has_arena_shop_point_added_today_by_win() const;
  inline void clear_arena_shop_point_added_today_by_win();
  static const int kArenaShopPointAddedTodayByWinFieldNumber = 308;
  inline ::google::protobuf::int32 arena_shop_point_added_today_by_win() const;
  inline void set_arena_shop_point_added_today_by_win(::google::protobuf::int32 value);

  // optional int64 next_can_use_guild_lilian_time = 310;
  inline bool has_next_can_use_guild_lilian_time() const;
  inline void clear_next_can_use_guild_lilian_time();
  static const int kNextCanUseGuildLilianTimeFieldNumber = 310;
  inline ::google::protobuf::int64 next_can_use_guild_lilian_time() const;
  inline void set_next_can_use_guild_lilian_time(::google::protobuf::int64 value);

  // optional .app.message.GuildDungeonCollectedPrizeProto guild_dungeon_collected_prize = 311;
  inline bool has_guild_dungeon_collected_prize() const;
  inline void clear_guild_dungeon_collected_prize();
  static const int kGuildDungeonCollectedPrizeFieldNumber = 311;
  inline const ::app::message::GuildDungeonCollectedPrizeProto& guild_dungeon_collected_prize() const;
  inline ::app::message::GuildDungeonCollectedPrizeProto* mutable_guild_dungeon_collected_prize();
  inline ::app::message::GuildDungeonCollectedPrizeProto* release_guild_dungeon_collected_prize();
  inline void set_allocated_guild_dungeon_collected_prize(::app::message::GuildDungeonCollectedPrizeProto* guild_dungeon_collected_prize);

  // optional .app.message.HeroSuperArmProto super_arm = 312;
  inline bool has_super_arm() const;
  inline void clear_super_arm();
  static const int kSuperArmFieldNumber = 312;
  inline const ::app::message::HeroSuperArmProto& super_arm() const;
  inline ::app::message::HeroSuperArmProto* mutable_super_arm();
  inline ::app::message::HeroSuperArmProto* release_super_arm();
  inline void set_allocated_super_arm(::app::message::HeroSuperArmProto* super_arm);

  // optional .app.message.DemonProto demon = 313;
  inline bool has_demon() const;
  inline void clear_demon();
  static const int kDemonFieldNumber = 313;
  inline const ::app::message::DemonProto& demon() const;
  inline ::app::message::DemonProto* mutable_demon();
  inline ::app::message::DemonProto* release_demon();
  inline void set_allocated_demon(::app::message::DemonProto* demon);

  // optional .app.message.CloakProto cloak = 314;
  inline bool has_cloak() const;
  inline void clear_cloak();
  static const int kCloakFieldNumber = 314;
  inline const ::app::message::CloakProto& cloak() const;
  inline ::app::message::CloakProto* mutable_cloak();
  inline ::app::message::CloakProto* release_cloak();
  inline void set_allocated_cloak(::app::message::CloakProto* cloak);

  // optional int64 pet_combine_added_life = 315;
  inline bool has_pet_combine_added_life() const;
  inline void clear_pet_combine_added_life();
  static const int kPetCombineAddedLifeFieldNumber = 315;
  inline ::google::protobuf::int64 pet_combine_added_life() const;
  inline void set_pet_combine_added_life(::google::protobuf::int64 value);

  // optional int64 pet_next_can_combine_time = 316;
  inline bool has_pet_next_can_combine_time() const;
  inline void clear_pet_next_can_combine_time();
  static const int kPetNextCanCombineTimeFieldNumber = 316;
  inline ::google::protobuf::int64 pet_next_can_combine_time() const;
  inline void set_pet_next_can_combine_time(::google::protobuf::int64 value);

  // optional int32 gallup_answered_question_count = 317;
  inline bool has_gallup_answered_question_count() const;
  inline void clear_gallup_answered_question_count();
  static const int kGallupAnsweredQuestionCountFieldNumber = 317;
  inline ::google::protobuf::int32 gallup_answered_question_count() const;
  inline void set_gallup_answered_question_count(::google::protobuf::int32 value);

  // optional int32 gallup_today_answered_question_count = 318;
  inline bool has_gallup_today_answered_question_count() const;
  inline void clear_gallup_today_answered_question_count();
  static const int kGallupTodayAnsweredQuestionCountFieldNumber = 318;
  inline ::google::protobuf::int32 gallup_today_answered_question_count() const;
  inline void set_gallup_today_answered_question_count(::google::protobuf::int32 value);

  // optional .app.message.HeroMarriageProto marriage = 319;
  inline bool has_marriage() const;
  inline void clear_marriage();
  static const int kMarriageFieldNumber = 319;
  inline const ::app::message::HeroMarriageProto& marriage() const;
  inline ::app::message::HeroMarriageProto* mutable_marriage();
  inline ::app::message::HeroMarriageProto* release_marriage();
  inline void set_allocated_marriage(::app::message::HeroMarriageProto* marriage);

  // optional int64 wash_super_weapon_bless_clear_time = 320;
  inline bool has_wash_super_weapon_bless_clear_time() const;
  inline void clear_wash_super_weapon_bless_clear_time();
  static const int kWashSuperWeaponBlessClearTimeFieldNumber = 320;
  inline ::google::protobuf::int64 wash_super_weapon_bless_clear_time() const;
  inline void set_wash_super_weapon_bless_clear_time(::google::protobuf::int64 value);

  // optional int32 tian_men_times = 321;
  inline bool has_tian_men_times() const;
  inline void clear_tian_men_times();
  static const int kTianMenTimesFieldNumber = 321;
  inline ::google::protobuf::int32 tian_men_times() const;
  inline void set_tian_men_times(::google::protobuf::int32 value);

  // optional bool has_collect_guild_plant_prize = 322;
  inline bool has_has_collect_guild_plant_prize() const;
  inline void clear_has_collect_guild_plant_prize();
  static const int kHasCollectGuildPlantPrizeFieldNumber = 322;
  inline bool has_collect_guild_plant_prize() const;
  inline void set_has_collect_guild_plant_prize(bool value);

  // optional bool hide_city_master = 323;
  inline bool has_hide_city_master() const;
  inline void clear_hide_city_master();
  static const int kHideCityMasterFieldNumber = 323;
  inline bool hide_city_master() const;
  inline void set_hide_city_master(bool value);

  // optional bool hide_long_city_master = 324;
  inline bool has_hide_long_city_master() const;
  inline void clear_hide_long_city_master();
  static const int kHideLongCityMasterFieldNumber = 324;
  inline bool hide_long_city_master() const;
  inline void set_hide_long_city_master(bool value);

  // optional int32 p37_vip_prize_count_flag = 325;
  inline bool has_p37_vip_prize_count_flag() const;
  inline void clear_p37_vip_prize_count_flag();
  static const int kP37VipPrizeCountFlagFieldNumber = 325;
  inline ::google::protobuf::int32 p37_vip_prize_count_flag() const;
  inline void set_p37_vip_prize_count_flag(::google::protobuf::int32 value);

  // optional int64 last_change_name_time = 326;
  inline bool has_last_change_name_time() const;
  inline void clear_last_change_name_time();
  static const int kLastChangeNameTimeFieldNumber = 326;
  inline ::google::protobuf::int64 last_change_name_time() const;
  inline void set_last_change_name_time(::google::protobuf::int64 value);

  // optional int64 next_can_change_race_time = 327;
  inline bool has_next_can_change_race_time() const;
  inline void clear_next_can_change_race_time();
  static const int kNextCanChangeRaceTimeFieldNumber = 327;
  inline ::google::protobuf::int64 next_can_change_race_time() const;
  inline void set_next_can_change_race_time(::google::protobuf::int64 value);

  // optional int32 htz_times = 328;
  inline bool has_htz_times() const;
  inline void clear_htz_times();
  static const int kHtzTimesFieldNumber = 328;
  inline ::google::protobuf::int32 htz_times() const;
  inline void set_htz_times(::google::protobuf::int32 value);

  // optional int32 htz_max_destroy_record = 329;
  inline bool has_htz_max_destroy_record() const;
  inline void clear_htz_max_destroy_record();
  static const int kHtzMaxDestroyRecordFieldNumber = 329;
  inline ::google::protobuf::int32 htz_max_destroy_record() const;
  inline void set_htz_max_destroy_record(::google::protobuf::int32 value);

  // optional int32 htz_time_record = 330;
  inline bool has_htz_time_record() const;
  inline void clear_htz_time_record();
  static const int kHtzTimeRecordFieldNumber = 330;
  inline ::google::protobuf::int32 htz_time_record() const;
  inline void set_htz_time_record(::google::protobuf::int32 value);

  // repeated int32 limit_count_goods_id = 331;
  inline int limit_count_goods_id_size() const;
  inline void clear_limit_count_goods_id();
  static const int kLimitCountGoodsIdFieldNumber = 331;
  inline ::google::protobuf::int32 limit_count_goods_id(int index) const;
  inline void set_limit_count_goods_id(int index, ::google::protobuf::int32 value);
  inline void add_limit_count_goods_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      limit_count_goods_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_limit_count_goods_id();

  // repeated int32 limit_count_goods_use_times = 332;
  inline int limit_count_goods_use_times_size() const;
  inline void clear_limit_count_goods_use_times();
  static const int kLimitCountGoodsUseTimesFieldNumber = 332;
  inline ::google::protobuf::int32 limit_count_goods_use_times(int index) const;
  inline void set_limit_count_goods_use_times(int index, ::google::protobuf::int32 value);
  inline void add_limit_count_goods_use_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      limit_count_goods_use_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_limit_count_goods_use_times();

  // repeated int64 single_wash_super_weapon_bless_clear_time = 335;
  inline int single_wash_super_weapon_bless_clear_time_size() const;
  inline void clear_single_wash_super_weapon_bless_clear_time();
  static const int kSingleWashSuperWeaponBlessClearTimeFieldNumber = 335;
  inline ::google::protobuf::int64 single_wash_super_weapon_bless_clear_time(int index) const;
  inline void set_single_wash_super_weapon_bless_clear_time(int index, ::google::protobuf::int64 value);
  inline void add_single_wash_super_weapon_bless_clear_time(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      single_wash_super_weapon_bless_clear_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_single_wash_super_weapon_bless_clear_time();

  // repeated int32 single_wash_super_weapon_bless_type = 336;
  inline int single_wash_super_weapon_bless_type_size() const;
  inline void clear_single_wash_super_weapon_bless_type();
  static const int kSingleWashSuperWeaponBlessTypeFieldNumber = 336;
  inline ::google::protobuf::int32 single_wash_super_weapon_bless_type(int index) const;
  inline void set_single_wash_super_weapon_bless_type(int index, ::google::protobuf::int32 value);
  inline void add_single_wash_super_weapon_bless_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      single_wash_super_weapon_bless_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_single_wash_super_weapon_bless_type();

  // optional bytes arena_fighting_team_name_bytes = 337;
  inline bool has_arena_fighting_team_name_bytes() const;
  inline void clear_arena_fighting_team_name_bytes();
  static const int kArenaFightingTeamNameBytesFieldNumber = 337;
  inline const ::std::string& arena_fighting_team_name_bytes() const;
  inline void set_arena_fighting_team_name_bytes(const ::std::string& value);
  inline void set_arena_fighting_team_name_bytes(const char* value);
  inline void set_arena_fighting_team_name_bytes(const void* value, size_t size);
  inline ::std::string* mutable_arena_fighting_team_name_bytes();
  inline ::std::string* release_arena_fighting_team_name_bytes();
  inline void set_allocated_arena_fighting_team_name_bytes(::std::string* arena_fighting_team_name_bytes);

  // optional int32 arena_fighting_team_shop_point = 338;
  inline bool has_arena_fighting_team_shop_point() const;
  inline void clear_arena_fighting_team_shop_point();
  static const int kArenaFightingTeamShopPointFieldNumber = 338;
  inline ::google::protobuf::int32 arena_fighting_team_shop_point() const;
  inline void set_arena_fighting_team_shop_point(::google::protobuf::int32 value);

  // optional int32 arena_fighting_team_shop_point_added_today_by_win = 339;
  inline bool has_arena_fighting_team_shop_point_added_today_by_win() const;
  inline void clear_arena_fighting_team_shop_point_added_today_by_win();
  static const int kArenaFightingTeamShopPointAddedTodayByWinFieldNumber = 339;
  inline ::google::protobuf::int32 arena_fighting_team_shop_point_added_today_by_win() const;
  inline void set_arena_fighting_team_shop_point_added_today_by_win(::google::protobuf::int32 value);

  // optional .app.message.MoBingProto mo_bing_proto = 342;
  inline bool has_mo_bing_proto() const;
  inline void clear_mo_bing_proto();
  static const int kMoBingProtoFieldNumber = 342;
  inline const ::app::message::MoBingProto& mo_bing_proto() const;
  inline ::app::message::MoBingProto* mutable_mo_bing_proto();
  inline ::app::message::MoBingProto* release_mo_bing_proto();
  inline void set_allocated_mo_bing_proto(::app::message::MoBingProto* mo_bing_proto);

  // optional int32 use_mount_tongling_id = 343;
  inline bool has_use_mount_tongling_id() const;
  inline void clear_use_mount_tongling_id();
  static const int kUseMountTonglingIdFieldNumber = 343;
  inline ::google::protobuf::int32 use_mount_tongling_id() const;
  inline void set_use_mount_tongling_id(::google::protobuf::int32 value);

  // repeated int32 active_mount_tongling_ids = 344;
  inline int active_mount_tongling_ids_size() const;
  inline void clear_active_mount_tongling_ids();
  static const int kActiveMountTonglingIdsFieldNumber = 344;
  inline ::google::protobuf::int32 active_mount_tongling_ids(int index) const;
  inline void set_active_mount_tongling_ids(int index, ::google::protobuf::int32 value);
  inline void add_active_mount_tongling_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      active_mount_tongling_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_active_mount_tongling_ids();

  // optional int64 change_use_mount_tongling_id_cd_time = 345;
  inline bool has_change_use_mount_tongling_id_cd_time() const;
  inline void clear_change_use_mount_tongling_id_cd_time();
  static const int kChangeUseMountTonglingIdCdTimeFieldNumber = 345;
  inline ::google::protobuf::int64 change_use_mount_tongling_id_cd_time() const;
  inline void set_change_use_mount_tongling_id_cd_time(::google::protobuf::int64 value);

  // repeated int32 mount_tongling_wake_value = 357;
  inline int mount_tongling_wake_value_size() const;
  inline void clear_mount_tongling_wake_value();
  static const int kMountTonglingWakeValueFieldNumber = 357;
  inline ::google::protobuf::int32 mount_tongling_wake_value(int index) const;
  inline void set_mount_tongling_wake_value(int index, ::google::protobuf::int32 value);
  inline void add_mount_tongling_wake_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mount_tongling_wake_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mount_tongling_wake_value();

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat1 = 346;
  inline int not_save_xun_zhang_random_stat1_size() const;
  inline void clear_not_save_xun_zhang_random_stat1();
  static const int kNotSaveXunZhangRandomStat1FieldNumber = 346;
  inline const ::app::message::SingleStatProto& not_save_xun_zhang_random_stat1(int index) const;
  inline ::app::message::SingleStatProto* mutable_not_save_xun_zhang_random_stat1(int index);
  inline ::app::message::SingleStatProto* add_not_save_xun_zhang_random_stat1();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      not_save_xun_zhang_random_stat1() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_not_save_xun_zhang_random_stat1();

  // repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat2 = 347;
  inline int not_save_xun_zhang_random_stat2_size() const;
  inline void clear_not_save_xun_zhang_random_stat2();
  static const int kNotSaveXunZhangRandomStat2FieldNumber = 347;
  inline const ::app::message::SingleStatProto& not_save_xun_zhang_random_stat2(int index) const;
  inline ::app::message::SingleStatProto* mutable_not_save_xun_zhang_random_stat2(int index);
  inline ::app::message::SingleStatProto* add_not_save_xun_zhang_random_stat2();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      not_save_xun_zhang_random_stat2() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_not_save_xun_zhang_random_stat2();

  // optional bool finished_collected_fight_amout_changed_value_rank_daily_prize = 348;
  inline bool has_finished_collected_fight_amout_changed_value_rank_daily_prize() const;
  inline void clear_finished_collected_fight_amout_changed_value_rank_daily_prize();
  static const int kFinishedCollectedFightAmoutChangedValueRankDailyPrizeFieldNumber = 348;
  inline bool finished_collected_fight_amout_changed_value_rank_daily_prize() const;
  inline void set_finished_collected_fight_amout_changed_value_rank_daily_prize(bool value);

  // repeated int32 finished_yy_purple_dungeon_count = 349;
  inline int finished_yy_purple_dungeon_count_size() const;
  inline void clear_finished_yy_purple_dungeon_count();
  static const int kFinishedYyPurpleDungeonCountFieldNumber = 349;
  inline ::google::protobuf::int32 finished_yy_purple_dungeon_count(int index) const;
  inline void set_finished_yy_purple_dungeon_count(int index, ::google::protobuf::int32 value);
  inline void add_finished_yy_purple_dungeon_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished_yy_purple_dungeon_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished_yy_purple_dungeon_count();

  // repeated int32 he_cheng_goods_id = 353;
  inline int he_cheng_goods_id_size() const;
  inline void clear_he_cheng_goods_id();
  static const int kHeChengGoodsIdFieldNumber = 353;
  inline ::google::protobuf::int32 he_cheng_goods_id(int index) const;
  inline void set_he_cheng_goods_id(int index, ::google::protobuf::int32 value);
  inline void add_he_cheng_goods_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      he_cheng_goods_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_he_cheng_goods_id();

  // repeated int32 he_cheng_goods_count = 354;
  inline int he_cheng_goods_count_size() const;
  inline void clear_he_cheng_goods_count();
  static const int kHeChengGoodsCountFieldNumber = 354;
  inline ::google::protobuf::int32 he_cheng_goods_count(int index) const;
  inline void set_he_cheng_goods_count(int index, ::google::protobuf::int32 value);
  inline void add_he_cheng_goods_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      he_cheng_goods_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_he_cheng_goods_count();

  // optional int32 christmas_storage_goods_count = 355;
  inline bool has_christmas_storage_goods_count() const;
  inline void clear_christmas_storage_goods_count();
  static const int kChristmasStorageGoodsCountFieldNumber = 355;
  inline ::google::protobuf::int32 christmas_storage_goods_count() const;
  inline void set_christmas_storage_goods_count(::google::protobuf::int32 value);

  // optional int32 credits = 356;
  inline bool has_credits() const;
  inline void clear_credits();
  static const int kCreditsFieldNumber = 356;
  inline ::google::protobuf::int32 credits() const;
  inline void set_credits(::google::protobuf::int32 value);

  // optional int32 monopoly_now_cell_id = 358;
  inline bool has_monopoly_now_cell_id() const;
  inline void clear_monopoly_now_cell_id();
  static const int kMonopolyNowCellIdFieldNumber = 358;
  inline ::google::protobuf::int32 monopoly_now_cell_id() const;
  inline void set_monopoly_now_cell_id(::google::protobuf::int32 value);

  // optional int32 monopoly_now_roll_times_cost = 359;
  inline bool has_monopoly_now_roll_times_cost() const;
  inline void clear_monopoly_now_roll_times_cost();
  static const int kMonopolyNowRollTimesCostFieldNumber = 359;
  inline ::google::protobuf::int32 monopoly_now_roll_times_cost() const;
  inline void set_monopoly_now_roll_times_cost(::google::protobuf::int32 value);

  // optional int32 monopoly_roll_times = 360;
  inline bool has_monopoly_roll_times() const;
  inline void clear_monopoly_roll_times();
  static const int kMonopolyRollTimesFieldNumber = 360;
  inline ::google::protobuf::int32 monopoly_roll_times() const;
  inline void set_monopoly_roll_times(::google::protobuf::int32 value);

  // optional int32 monopoly_buy_roll_times = 361;
  inline bool has_monopoly_buy_roll_times() const;
  inline void clear_monopoly_buy_roll_times();
  static const int kMonopolyBuyRollTimesFieldNumber = 361;
  inline ::google::protobuf::int32 monopoly_buy_roll_times() const;
  inline void set_monopoly_buy_roll_times(::google::protobuf::int32 value);

  // optional int32 credits_draw_storage_goods_count = 362;
  inline bool has_credits_draw_storage_goods_count() const;
  inline void clear_credits_draw_storage_goods_count();
  static const int kCreditsDrawStorageGoodsCountFieldNumber = 362;
  inline ::google::protobuf::int32 credits_draw_storage_goods_count() const;
  inline void set_credits_draw_storage_goods_count(::google::protobuf::int32 value);

  // optional .app.message.HeroLoveProto love = 363;
  inline bool has_love() const;
  inline void clear_love();
  static const int kLoveFieldNumber = 363;
  inline const ::app::message::HeroLoveProto& love() const;
  inline ::app::message::HeroLoveProto* mutable_love();
  inline ::app::message::HeroLoveProto* release_love();
  inline void set_allocated_love(::app::message::HeroLoveProto* love);

  // optional .app.message.WuDaoProto wu_dao = 364;
  inline bool has_wu_dao() const;
  inline void clear_wu_dao();
  static const int kWuDaoFieldNumber = 364;
  inline const ::app::message::WuDaoProto& wu_dao() const;
  inline ::app::message::WuDaoProto* mutable_wu_dao();
  inline ::app::message::WuDaoProto* release_wu_dao();
  inline void set_allocated_wu_dao(::app::message::WuDaoProto* wu_dao);

  // optional .app.message.NiDaoQianKunClient ni_dao_qian_kun = 365;
  inline bool has_ni_dao_qian_kun() const;
  inline void clear_ni_dao_qian_kun();
  static const int kNiDaoQianKunFieldNumber = 365;
  inline const ::app::message::NiDaoQianKunClient& ni_dao_qian_kun() const;
  inline ::app::message::NiDaoQianKunClient* mutable_ni_dao_qian_kun();
  inline ::app::message::NiDaoQianKunClient* release_ni_dao_qian_kun();
  inline void set_allocated_ni_dao_qian_kun(::app::message::NiDaoQianKunClient* ni_dao_qian_kun);

  // optional int32 finished_tong_tian_ta_dungeon_sequence = 366;
  inline bool has_finished_tong_tian_ta_dungeon_sequence() const;
  inline void clear_finished_tong_tian_ta_dungeon_sequence();
  static const int kFinishedTongTianTaDungeonSequenceFieldNumber = 366;
  inline ::google::protobuf::int32 finished_tong_tian_ta_dungeon_sequence() const;
  inline void set_finished_tong_tian_ta_dungeon_sequence(::google::protobuf::int32 value);

  // optional int32 tong_tian_ta_dungeon_daily_times = 367;
  inline bool has_tong_tian_ta_dungeon_daily_times() const;
  inline void clear_tong_tian_ta_dungeon_daily_times();
  static const int kTongTianTaDungeonDailyTimesFieldNumber = 367;
  inline ::google::protobuf::int32 tong_tian_ta_dungeon_daily_times() const;
  inline void set_tong_tian_ta_dungeon_daily_times(::google::protobuf::int32 value);

  // repeated int32 tong_tian_ta_dungeon_use_times = 368;
  inline int tong_tian_ta_dungeon_use_times_size() const;
  inline void clear_tong_tian_ta_dungeon_use_times();
  static const int kTongTianTaDungeonUseTimesFieldNumber = 368;
  inline ::google::protobuf::int32 tong_tian_ta_dungeon_use_times(int index) const;
  inline void set_tong_tian_ta_dungeon_use_times(int index, ::google::protobuf::int32 value);
  inline void add_tong_tian_ta_dungeon_use_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tong_tian_ta_dungeon_use_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tong_tian_ta_dungeon_use_times();

  // optional int32 tong_tian_ta_dungeon_refresh_times = 369;
  inline bool has_tong_tian_ta_dungeon_refresh_times() const;
  inline void clear_tong_tian_ta_dungeon_refresh_times();
  static const int kTongTianTaDungeonRefreshTimesFieldNumber = 369;
  inline ::google::protobuf::int32 tong_tian_ta_dungeon_refresh_times() const;
  inline void set_tong_tian_ta_dungeon_refresh_times(::google::protobuf::int32 value);

  // optional .app.message.HeroAnniversaryProto anniversary = 370;
  inline bool has_anniversary() const;
  inline void clear_anniversary();
  static const int kAnniversaryFieldNumber = 370;
  inline const ::app::message::HeroAnniversaryProto& anniversary() const;
  inline ::app::message::HeroAnniversaryProto* mutable_anniversary();
  inline ::app::message::HeroAnniversaryProto* release_anniversary();
  inline void set_allocated_anniversary(::app::message::HeroAnniversaryProto* anniversary);

  // repeated int32 firework_color_values = 371;
  inline int firework_color_values_size() const;
  inline void clear_firework_color_values();
  static const int kFireworkColorValuesFieldNumber = 371;
  inline ::google::protobuf::int32 firework_color_values(int index) const;
  inline void set_firework_color_values(int index, ::google::protobuf::int32 value);
  inline void add_firework_color_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      firework_color_values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_firework_color_values();

  // optional int64 firework_promotion_start_time = 372;
  inline bool has_firework_promotion_start_time() const;
  inline void clear_firework_promotion_start_time();
  static const int kFireworkPromotionStartTimeFieldNumber = 372;
  inline ::google::protobuf::int64 firework_promotion_start_time() const;
  inline void set_firework_promotion_start_time(::google::protobuf::int64 value);

  // optional int64 firework_promotion_end_time = 373;
  inline bool has_firework_promotion_end_time() const;
  inline void clear_firework_promotion_end_time();
  static const int kFireworkPromotionEndTimeFieldNumber = 373;
  inline ::google::protobuf::int64 firework_promotion_end_time() const;
  inline void set_firework_promotion_end_time(::google::protobuf::int64 value);

  // optional .app.message.HeroAnniversaryTaskProto anniversary_task = 374;
  inline bool has_anniversary_task() const;
  inline void clear_anniversary_task();
  static const int kAnniversaryTaskFieldNumber = 374;
  inline const ::app::message::HeroAnniversaryTaskProto& anniversary_task() const;
  inline ::app::message::HeroAnniversaryTaskProto* mutable_anniversary_task();
  inline ::app::message::HeroAnniversaryTaskProto* release_anniversary_task();
  inline void set_allocated_anniversary_task(::app::message::HeroAnniversaryTaskProto* anniversary_task);

  // optional bool is_gain_huege_data_prize = 375;
  inline bool has_is_gain_huege_data_prize() const;
  inline void clear_is_gain_huege_data_prize();
  static const int kIsGainHuegeDataPrizeFieldNumber = 375;
  inline bool is_gain_huege_data_prize() const;
  inline void set_is_gain_huege_data_prize(bool value);

  // optional .app.message.ShieldProto shield = 376;
  inline bool has_shield() const;
  inline void clear_shield();
  static const int kShieldFieldNumber = 376;
  inline const ::app::message::ShieldProto& shield() const;
  inline ::app::message::ShieldProto* mutable_shield();
  inline ::app::message::ShieldProto* release_shield();
  inline void set_allocated_shield(::app::message::ShieldProto* shield);

  // repeated int32 finished_ling_yun_id = 378;
  inline int finished_ling_yun_id_size() const;
  inline void clear_finished_ling_yun_id();
  static const int kFinishedLingYunIdFieldNumber = 378;
  inline ::google::protobuf::int32 finished_ling_yun_id(int index) const;
  inline void set_finished_ling_yun_id(int index, ::google::protobuf::int32 value);
  inline void add_finished_ling_yun_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished_ling_yun_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished_ling_yun_id();

  // repeated int32 finished_long_mai_id = 377;
  inline int finished_long_mai_id_size() const;
  inline void clear_finished_long_mai_id();
  static const int kFinishedLongMaiIdFieldNumber = 377;
  inline ::google::protobuf::int32 finished_long_mai_id(int index) const;
  inline void set_finished_long_mai_id(int index, ::google::protobuf::int32 value);
  inline void add_finished_long_mai_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished_long_mai_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished_long_mai_id();

  // repeated int32 finished_zhong_hua_ge_id = 379;
  inline int finished_zhong_hua_ge_id_size() const;
  inline void clear_finished_zhong_hua_ge_id();
  static const int kFinishedZhongHuaGeIdFieldNumber = 379;
  inline ::google::protobuf::int32 finished_zhong_hua_ge_id(int index) const;
  inline void set_finished_zhong_hua_ge_id(int index, ::google::protobuf::int32 value);
  inline void add_finished_zhong_hua_ge_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished_zhong_hua_ge_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished_zhong_hua_ge_id();

  // repeated .app.message.DefenceDungeonStateClientProto defence_dungeon_state = 380;
  inline int defence_dungeon_state_size() const;
  inline void clear_defence_dungeon_state();
  static const int kDefenceDungeonStateFieldNumber = 380;
  inline const ::app::message::DefenceDungeonStateClientProto& defence_dungeon_state(int index) const;
  inline ::app::message::DefenceDungeonStateClientProto* mutable_defence_dungeon_state(int index);
  inline ::app::message::DefenceDungeonStateClientProto* add_defence_dungeon_state();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::DefenceDungeonStateClientProto >&
      defence_dungeon_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::DefenceDungeonStateClientProto >*
      mutable_defence_dungeon_state();

  // optional int32 ling_guang = 381;
  inline bool has_ling_guang() const;
  inline void clear_ling_guang();
  static const int kLingGuangFieldNumber = 381;
  inline ::google::protobuf::int32 ling_guang() const;
  inline void set_ling_guang(::google::protobuf::int32 value);

  // optional int32 ling_guang_pick = 382;
  inline bool has_ling_guang_pick() const;
  inline void clear_ling_guang_pick();
  static const int kLingGuangPickFieldNumber = 382;
  inline ::google::protobuf::int32 ling_guang_pick() const;
  inline void set_ling_guang_pick(::google::protobuf::int32 value);

  // optional int32 mystery_dungeon_use_time = 383;
  inline bool has_mystery_dungeon_use_time() const;
  inline void clear_mystery_dungeon_use_time();
  static const int kMysteryDungeonUseTimeFieldNumber = 383;
  inline ::google::protobuf::int32 mystery_dungeon_use_time() const;
  inline void set_mystery_dungeon_use_time(::google::protobuf::int32 value);

  // optional .app.message.HeroBossCard boss_card = 396;
  inline bool has_boss_card() const;
  inline void clear_boss_card();
  static const int kBossCardFieldNumber = 396;
  inline const ::app::message::HeroBossCard& boss_card() const;
  inline ::app::message::HeroBossCard* mutable_boss_card();
  inline ::app::message::HeroBossCard* release_boss_card();
  inline void set_allocated_boss_card(::app::message::HeroBossCard* boss_card);

  // optional .app.message.HaidiInfoProto haidi = 397;
  inline bool has_haidi() const;
  inline void clear_haidi();
  static const int kHaidiFieldNumber = 397;
  inline const ::app::message::HaidiInfoProto& haidi() const;
  inline ::app::message::HaidiInfoProto* mutable_haidi();
  inline ::app::message::HaidiInfoProto* release_haidi();
  inline void set_allocated_haidi(::app::message::HaidiInfoProto* haidi);

  // optional int32 bow_tong_ling_display_id = 398;
  inline bool has_bow_tong_ling_display_id() const;
  inline void clear_bow_tong_ling_display_id();
  static const int kBowTongLingDisplayIdFieldNumber = 398;
  inline ::google::protobuf::int32 bow_tong_ling_display_id() const;
  inline void set_bow_tong_ling_display_id(::google::protobuf::int32 value);

  // repeated .app.message.BowTongLingClientProto bow_tong_ling = 399;
  inline int bow_tong_ling_size() const;
  inline void clear_bow_tong_ling();
  static const int kBowTongLingFieldNumber = 399;
  inline const ::app::message::BowTongLingClientProto& bow_tong_ling(int index) const;
  inline ::app::message::BowTongLingClientProto* mutable_bow_tong_ling(int index);
  inline ::app::message::BowTongLingClientProto* add_bow_tong_ling();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::BowTongLingClientProto >&
      bow_tong_ling() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::BowTongLingClientProto >*
      mutable_bow_tong_ling();

  // optional int64 sys_hong_bao_colleted_time = 400;
  inline bool has_sys_hong_bao_colleted_time() const;
  inline void clear_sys_hong_bao_colleted_time();
  static const int kSysHongBaoColletedTimeFieldNumber = 400;
  inline ::google::protobuf::int64 sys_hong_bao_colleted_time() const;
  inline void set_sys_hong_bao_colleted_time(::google::protobuf::int64 value);

  // optional .app.message.TianXieProto tian_xie = 500;
  inline bool has_tian_xie() const;
  inline void clear_tian_xie();
  static const int kTianXieFieldNumber = 500;
  inline const ::app::message::TianXieProto& tian_xie() const;
  inline ::app::message::TianXieProto* mutable_tian_xie();
  inline ::app::message::TianXieProto* release_tian_xie();
  inline void set_allocated_tian_xie(::app::message::TianXieProto* tian_xie);

  // optional .app.message.JianDaoProto jianDao = 501;
  inline bool has_jiandao() const;
  inline void clear_jiandao();
  static const int kJianDaoFieldNumber = 501;
  inline const ::app::message::JianDaoProto& jiandao() const;
  inline ::app::message::JianDaoProto* mutable_jiandao();
  inline ::app::message::JianDaoProto* release_jiandao();
  inline void set_allocated_jiandao(::app::message::JianDaoProto* jiandao);

  // optional .app.message.LingYuProto lingYu = 502;
  inline bool has_lingyu() const;
  inline void clear_lingyu();
  static const int kLingYuFieldNumber = 502;
  inline const ::app::message::LingYuProto& lingyu() const;
  inline ::app::message::LingYuProto* mutable_lingyu();
  inline ::app::message::LingYuProto* release_lingyu();
  inline void set_allocated_lingyu(::app::message::LingYuProto* lingyu);

  // optional .app.message.FengYunDaoProto fengYunDao = 503;
  inline bool has_fengyundao() const;
  inline void clear_fengyundao();
  static const int kFengYunDaoFieldNumber = 503;
  inline const ::app::message::FengYunDaoProto& fengyundao() const;
  inline ::app::message::FengYunDaoProto* mutable_fengyundao();
  inline ::app::message::FengYunDaoProto* release_fengyundao();
  inline void set_allocated_fengyundao(::app::message::FengYunDaoProto* fengyundao);

  // repeated .app.message.PetTongLingClientProto pet_tong_ling = 504;
  inline int pet_tong_ling_size() const;
  inline void clear_pet_tong_ling();
  static const int kPetTongLingFieldNumber = 504;
  inline const ::app::message::PetTongLingClientProto& pet_tong_ling(int index) const;
  inline ::app::message::PetTongLingClientProto* mutable_pet_tong_ling(int index);
  inline ::app::message::PetTongLingClientProto* add_pet_tong_ling();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingClientProto >&
      pet_tong_ling() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingClientProto >*
      mutable_pet_tong_ling();

  // optional int32 pet_tong_ling_display_id = 505;
  inline bool has_pet_tong_ling_display_id() const;
  inline void clear_pet_tong_ling_display_id();
  static const int kPetTongLingDisplayIdFieldNumber = 505;
  inline ::google::protobuf::int32 pet_tong_ling_display_id() const;
  inline void set_pet_tong_ling_display_id(::google::protobuf::int32 value);

  // repeated .app.message.PetTongLingSingleSpellClientProto pet_tong_ling_single_spell = 506;
  inline int pet_tong_ling_single_spell_size() const;
  inline void clear_pet_tong_ling_single_spell();
  static const int kPetTongLingSingleSpellFieldNumber = 506;
  inline const ::app::message::PetTongLingSingleSpellClientProto& pet_tong_ling_single_spell(int index) const;
  inline ::app::message::PetTongLingSingleSpellClientProto* mutable_pet_tong_ling_single_spell(int index);
  inline ::app::message::PetTongLingSingleSpellClientProto* add_pet_tong_ling_single_spell();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingSingleSpellClientProto >&
      pet_tong_ling_single_spell() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingSingleSpellClientProto >*
      mutable_pet_tong_ling_single_spell();

  // optional .app.message.MoFangClientProto mo_fang = 507;
  inline bool has_mo_fang() const;
  inline void clear_mo_fang();
  static const int kMoFangFieldNumber = 507;
  inline const ::app::message::MoFangClientProto& mo_fang() const;
  inline ::app::message::MoFangClientProto* mutable_mo_fang();
  inline ::app::message::MoFangClientProto* release_mo_fang();
  inline void set_allocated_mo_fang(::app::message::MoFangClientProto* mo_fang);

  // optional int32 hell_dungeon_enter_count = 515;
  inline bool has_hell_dungeon_enter_count() const;
  inline void clear_hell_dungeon_enter_count();
  static const int kHellDungeonEnterCountFieldNumber = 515;
  inline ::google::protobuf::int32 hell_dungeon_enter_count() const;
  inline void set_hell_dungeon_enter_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroProto)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_yuanbao();
  inline void clear_has_yuanbao();
  inline void set_has_lijin();
  inline void clear_has_lijin();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_depot();
  inline void clear_has_depot();
  inline void set_has_real_air();
  inline void clear_has_real_air();
  inline void set_has_fighting_amount();
  inline void clear_has_fighting_amount();
  inline void set_has_total_stat();
  inline void clear_has_total_stat();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_upgrade_exp();
  inline void clear_has_upgrade_exp();
  inline void set_has_equipment_resources();
  inline void clear_has_equipment_resources();
  inline void set_has_has_storage();
  inline void clear_has_has_storage();
  inline void set_has_team_auto_accept_invite();
  inline void clear_has_team_auto_accept_invite();
  inline void set_has_team_auto_accept_request();
  inline void clear_has_team_auto_accept_request();
  inline void set_has_team_forbid_other_invite_me_join();
  inline void clear_has_team_forbid_other_invite_me_join();
  inline void set_has_trade_auto_reject_invite();
  inline void clear_has_trade_auto_reject_invite();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_client_only_config_1();
  inline void clear_has_client_only_config_1();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_guild_auto_accept_invite();
  inline void clear_has_guild_auto_accept_invite();
  inline void set_has_guild_forbid_other_invite_me_join();
  inline void clear_has_guild_forbid_other_invite_me_join();
  inline void set_has_guild_flag_level();
  inline void clear_has_guild_flag_level();
  inline void set_has_guild_li_lian();
  inline void clear_has_guild_li_lian();
  inline void set_has_guild_contribution();
  inline void clear_has_guild_contribution();
  inline void set_has_is_ws_city_master();
  inline void clear_has_is_ws_city_master();
  inline void set_has_is_long_city_master();
  inline void clear_has_is_long_city_master();
  inline void set_has_is_guild_leader();
  inline void clear_has_is_guild_leader();
  inline void set_has_is_territory_leader();
  inline void clear_has_is_territory_leader();
  inline void set_has_accumulated_offline_time();
  inline void clear_has_accumulated_offline_time();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_auto_finish_story_id();
  inline void clear_has_auto_finish_story_id();
  inline void set_has_auto_finish_story_complete_time();
  inline void clear_has_auto_finish_story_complete_time();
  inline void set_has_finished_challenge_dungeon_sequence_id();
  inline void clear_has_finished_challenge_dungeon_sequence_id();
  inline void set_has_defence_today_finished_batch();
  inline void clear_has_defence_today_finished_batch();
  inline void set_has_defence_history_max_batch();
  inline void clear_has_defence_history_max_batch();
  inline void set_has_defence_today_reset_count();
  inline void clear_has_defence_today_reset_count();
  inline void set_has_defence_collected_first_pass_prize();
  inline void clear_has_defence_collected_first_pass_prize();
  inline void set_has_sou_shen_point();
  inline void clear_has_sou_shen_point();
  inline void set_has_ling_yun_today_entered_times();
  inline void clear_has_ling_yun_today_entered_times();
  inline void set_has_ling_yun_today_finish_state();
  inline void clear_has_ling_yun_today_finish_state();
  inline void set_has_long_mai_today_first_passed();
  inline void clear_has_long_mai_today_first_passed();
  inline void set_has_wu_jue_today_entered_times();
  inline void clear_has_wu_jue_today_entered_times();
  inline void set_has_wu_jue_today_collected_first_try_transport_prize_times();
  inline void clear_has_wu_jue_today_collected_first_try_transport_prize_times();
  inline void set_has_sheng_wang();
  inline void clear_has_sheng_wang();
  inline void set_has_use_free_chat_times();
  inline void clear_has_use_free_chat_times();
  inline void set_has_bow();
  inline void clear_has_bow();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_collected_vip_prize();
  inline void clear_has_collected_vip_prize();
  inline void set_has_next_collect_vip_weekly_prize_time();
  inline void clear_has_next_collect_vip_weekly_prize_time();
  inline void set_has_using_weapon();
  inline void clear_has_using_weapon();
  inline void set_has_super_weapon_max_level_add_stat();
  inline void clear_has_super_weapon_max_level_add_stat();
  inline void set_has_has_magic_weapon();
  inline void clear_has_has_magic_weapon();
  inline void set_has_magic_added_stat();
  inline void clear_has_magic_added_stat();
  inline void set_has_magic_not_saved_added_stat();
  inline void clear_has_magic_not_saved_added_stat();
  inline void set_has_divine_times();
  inline void clear_has_divine_times();
  inline void set_has_divine_amount();
  inline void clear_has_divine_amount();
  inline void set_has_divine_storage_goods_count();
  inline void clear_has_divine_storage_goods_count();
  inline void set_has_mount();
  inline void clear_has_mount();
  inline void set_has_lottery();
  inline void clear_has_lottery();
  inline void set_has_daily_online_acc_time();
  inline void clear_has_daily_online_acc_time();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_sign_prize();
  inline void clear_has_sign_prize();
  inline void set_has_replenish_sign_times();
  inline void clear_has_replenish_sign_times();
  inline void set_has_next_reduce_pk_amount_time();
  inline void clear_has_next_reduce_pk_amount_time();
  inline void set_has_pk_amount();
  inline void clear_has_pk_amount();
  inline void set_has_relive_protected_end_time();
  inline void clear_has_relive_protected_end_time();
  inline void set_has_total_sign_times();
  inline void clear_has_total_sign_times();
  inline void set_has_total_recharge_yuanbao();
  inline void clear_has_total_recharge_yuanbao();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_has_recharge();
  inline void clear_has_has_recharge();
  inline void set_has_spell_added_upgrade_level();
  inline void clear_has_spell_added_upgrade_level();
  inline void set_has_default_spell_pos();
  inline void clear_has_default_spell_pos();
  inline void set_has_jump_shield();
  inline void clear_has_jump_shield();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_client_relation();
  inline void clear_has_client_relation();
  inline void set_has_rage_amount();
  inline void clear_has_rage_amount();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_is_collect_local_login_first_prize();
  inline void clear_has_is_collect_local_login_first_prize();
  inline void set_has_is_collect_local_login_daily_prize();
  inline void clear_has_is_collect_local_login_daily_prize();
  inline void set_has_phoenix_refine_times();
  inline void clear_has_phoenix_refine_times();
  inline void set_has_is_cross_single_story();
  inline void clear_has_is_cross_single_story();
  inline void set_has_phoenix_money_refine_times();
  inline void clear_has_phoenix_money_refine_times();
  inline void set_has_phoenix_lijin_refine_times();
  inline void clear_has_phoenix_lijin_refine_times();
  inline void set_has_phoenix_yuanbao_refine_times();
  inline void clear_has_phoenix_yuanbao_refine_times();
  inline void set_has_login_day();
  inline void clear_has_login_day();
  inline void set_has_tu_long_today_entered_times();
  inline void clear_has_tu_long_today_entered_times();
  inline void set_has_melt_amount();
  inline void clear_has_melt_amount();
  inline void set_has_challenge_dungeon_daily_times();
  inline void clear_has_challenge_dungeon_daily_times();
  inline void set_has_challenge_dungeon_assist_times();
  inline void clear_has_challenge_dungeon_assist_times();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_tian_zui();
  inline void clear_has_tian_zui();
  inline void set_has_tian_jie();
  inline void clear_has_tian_jie();
  inline void set_has_first_recharge_collect_index();
  inline void clear_has_first_recharge_collect_index();
  inline void set_has_login_prize_info();
  inline void clear_has_login_prize_info();
  inline void set_has_invest_upgrade_bank_money();
  inline void clear_has_invest_upgrade_bank_money();
  inline void set_has_invest_monthly_bank_money();
  inline void clear_has_invest_monthly_bank_money();
  inline void set_has_invest_monthly_bank_time();
  inline void clear_has_invest_monthly_bank_time();
  inline void set_has_monthly_bank_prev_collect_time();
  inline void clear_has_monthly_bank_prev_collect_time();
  inline void set_has_monthly_bank_prev_collect_time2();
  inline void clear_has_monthly_bank_prev_collect_time2();
  inline void set_has_monthly_bank_online_lijin();
  inline void clear_has_monthly_bank_online_lijin();
  inline void set_has_monthly_bank_base_lijin();
  inline void clear_has_monthly_bank_base_lijin();
  inline void set_has_monthly_bank_online_hours();
  inline void clear_has_monthly_bank_online_hours();
  inline void set_has_total_online_time();
  inline void clear_has_total_online_time();
  inline void set_has_achievement();
  inline void clear_has_achievement();
  inline void set_has_shou_cang();
  inline void clear_has_shou_cang();
  inline void set_has_zhong_hua_ge_today_first_passed();
  inline void clear_has_zhong_hua_ge_today_first_passed();
  inline void set_has_gaoji_melt_amount();
  inline void clear_has_gaoji_melt_amount();
  inline void set_has_left_ya_biao_times_today();
  inline void clear_has_left_ya_biao_times_today();
  inline void set_has_left_jie_biao_times_today();
  inline void clear_has_left_jie_biao_times_today();
  inline void set_has_has_safe_code();
  inline void clear_has_has_safe_code();
  inline void set_has_safe_code_question();
  inline void clear_has_safe_code_question();
  inline void set_has_mo_shi_is_hide();
  inline void clear_has_mo_shi_is_hide();
  inline void set_has_qian_qiu_da_jie_is_hide();
  inline void clear_has_qian_qiu_da_jie_is_hide();
  inline void set_has_long_yuan();
  inline void clear_has_long_yuan();
  inline void set_has_jing_jie();
  inline void clear_has_jing_jie();
  inline void set_has_chi_huo_shen_gong_jie_shu();
  inline void clear_has_chi_huo_shen_gong_jie_shu();
  inline void set_has_chi_huo_shen_gong_ceng_shu();
  inline void clear_has_chi_huo_shen_gong_ceng_shu();
  inline void set_has_chi_huo_shen_gong_bless_amount();
  inline void clear_has_chi_huo_shen_gong_bless_amount();
  inline void set_has_chi_huo_shen_gong_bless_amount_clear_time();
  inline void clear_has_chi_huo_shen_gong_bless_amount_clear_time();
  inline void set_has_chi_huo_shen_gong_qian_neng_use_count();
  inline void clear_has_chi_huo_shen_gong_qian_neng_use_count();
  inline void set_has_chi_huo_shen_gong_huan_hua_use_count();
  inline void clear_has_chi_huo_shen_gong_huan_hua_use_count();
  inline void set_has_chi_huo_shen_gong_qian_neng_extra_max_use_count();
  inline void clear_has_chi_huo_shen_gong_qian_neng_extra_max_use_count();
  inline void set_has_chi_huo_shen_gong_huan_hua_extra_max_use_count();
  inline void clear_has_chi_huo_shen_gong_huan_hua_extra_max_use_count();
  inline void set_has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times();
  inline void clear_has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times();
  inline void set_has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times();
  inline void clear_has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times();
  inline void set_has_chi_huo_shen_gong_is_hide();
  inline void clear_has_chi_huo_shen_gong_is_hide();
  inline void set_has_draw_prize_point();
  inline void clear_has_draw_prize_point();
  inline void set_has_draw_prize_storage_goods_count();
  inline void clear_has_draw_prize_storage_goods_count();
  inline void set_has_lucky_draw_prize_point();
  inline void clear_has_lucky_draw_prize_point();
  inline void set_has_lucky_draw_prize_storage_goods_count();
  inline void clear_has_lucky_draw_prize_storage_goods_count();
  inline void set_has_new_draw_prize_point();
  inline void clear_has_new_draw_prize_point();
  inline void set_has_new_draw_prize_storage_goods_count();
  inline void clear_has_new_draw_prize_storage_goods_count();
  inline void set_has_yitianshenjue_info();
  inline void clear_has_yitianshenjue_info();
  inline void set_has_daily_wheel_count();
  inline void clear_has_daily_wheel_count();
  inline void set_has_arena_pair_point();
  inline void clear_has_arena_pair_point();
  inline void set_has_today_finished_arena_count();
  inline void clear_has_today_finished_arena_count();
  inline void set_has_arena_shop_point();
  inline void clear_has_arena_shop_point();
  inline void set_has_arena_collectable_shop_point();
  inline void clear_has_arena_collectable_shop_point();
  inline void set_has_arena_yesterday_finish_count();
  inline void clear_has_arena_yesterday_finish_count();
  inline void set_has_arena_yesterday_pair_point();
  inline void clear_has_arena_yesterday_pair_point();
  inline void set_has_arena_yesterday_original_shop_point();
  inline void clear_has_arena_yesterday_original_shop_point();
  inline void set_has_arena_shop_point_added_today_by_win();
  inline void clear_has_arena_shop_point_added_today_by_win();
  inline void set_has_next_can_use_guild_lilian_time();
  inline void clear_has_next_can_use_guild_lilian_time();
  inline void set_has_guild_dungeon_collected_prize();
  inline void clear_has_guild_dungeon_collected_prize();
  inline void set_has_super_arm();
  inline void clear_has_super_arm();
  inline void set_has_demon();
  inline void clear_has_demon();
  inline void set_has_cloak();
  inline void clear_has_cloak();
  inline void set_has_pet_combine_added_life();
  inline void clear_has_pet_combine_added_life();
  inline void set_has_pet_next_can_combine_time();
  inline void clear_has_pet_next_can_combine_time();
  inline void set_has_gallup_answered_question_count();
  inline void clear_has_gallup_answered_question_count();
  inline void set_has_gallup_today_answered_question_count();
  inline void clear_has_gallup_today_answered_question_count();
  inline void set_has_marriage();
  inline void clear_has_marriage();
  inline void set_has_wash_super_weapon_bless_clear_time();
  inline void clear_has_wash_super_weapon_bless_clear_time();
  inline void set_has_tian_men_times();
  inline void clear_has_tian_men_times();
  inline void set_has_has_collect_guild_plant_prize();
  inline void clear_has_has_collect_guild_plant_prize();
  inline void set_has_hide_city_master();
  inline void clear_has_hide_city_master();
  inline void set_has_hide_long_city_master();
  inline void clear_has_hide_long_city_master();
  inline void set_has_p37_vip_prize_count_flag();
  inline void clear_has_p37_vip_prize_count_flag();
  inline void set_has_last_change_name_time();
  inline void clear_has_last_change_name_time();
  inline void set_has_next_can_change_race_time();
  inline void clear_has_next_can_change_race_time();
  inline void set_has_htz_times();
  inline void clear_has_htz_times();
  inline void set_has_htz_max_destroy_record();
  inline void clear_has_htz_max_destroy_record();
  inline void set_has_htz_time_record();
  inline void clear_has_htz_time_record();
  inline void set_has_arena_fighting_team_name_bytes();
  inline void clear_has_arena_fighting_team_name_bytes();
  inline void set_has_arena_fighting_team_shop_point();
  inline void clear_has_arena_fighting_team_shop_point();
  inline void set_has_arena_fighting_team_shop_point_added_today_by_win();
  inline void clear_has_arena_fighting_team_shop_point_added_today_by_win();
  inline void set_has_mo_bing_proto();
  inline void clear_has_mo_bing_proto();
  inline void set_has_use_mount_tongling_id();
  inline void clear_has_use_mount_tongling_id();
  inline void set_has_change_use_mount_tongling_id_cd_time();
  inline void clear_has_change_use_mount_tongling_id_cd_time();
  inline void set_has_finished_collected_fight_amout_changed_value_rank_daily_prize();
  inline void clear_has_finished_collected_fight_amout_changed_value_rank_daily_prize();
  inline void set_has_christmas_storage_goods_count();
  inline void clear_has_christmas_storage_goods_count();
  inline void set_has_credits();
  inline void clear_has_credits();
  inline void set_has_monopoly_now_cell_id();
  inline void clear_has_monopoly_now_cell_id();
  inline void set_has_monopoly_now_roll_times_cost();
  inline void clear_has_monopoly_now_roll_times_cost();
  inline void set_has_monopoly_roll_times();
  inline void clear_has_monopoly_roll_times();
  inline void set_has_monopoly_buy_roll_times();
  inline void clear_has_monopoly_buy_roll_times();
  inline void set_has_credits_draw_storage_goods_count();
  inline void clear_has_credits_draw_storage_goods_count();
  inline void set_has_love();
  inline void clear_has_love();
  inline void set_has_wu_dao();
  inline void clear_has_wu_dao();
  inline void set_has_ni_dao_qian_kun();
  inline void clear_has_ni_dao_qian_kun();
  inline void set_has_finished_tong_tian_ta_dungeon_sequence();
  inline void clear_has_finished_tong_tian_ta_dungeon_sequence();
  inline void set_has_tong_tian_ta_dungeon_daily_times();
  inline void clear_has_tong_tian_ta_dungeon_daily_times();
  inline void set_has_tong_tian_ta_dungeon_refresh_times();
  inline void clear_has_tong_tian_ta_dungeon_refresh_times();
  inline void set_has_anniversary();
  inline void clear_has_anniversary();
  inline void set_has_firework_promotion_start_time();
  inline void clear_has_firework_promotion_start_time();
  inline void set_has_firework_promotion_end_time();
  inline void clear_has_firework_promotion_end_time();
  inline void set_has_anniversary_task();
  inline void clear_has_anniversary_task();
  inline void set_has_is_gain_huege_data_prize();
  inline void clear_has_is_gain_huege_data_prize();
  inline void set_has_shield();
  inline void clear_has_shield();
  inline void set_has_ling_guang();
  inline void clear_has_ling_guang();
  inline void set_has_ling_guang_pick();
  inline void clear_has_ling_guang_pick();
  inline void set_has_mystery_dungeon_use_time();
  inline void clear_has_mystery_dungeon_use_time();
  inline void set_has_boss_card();
  inline void clear_has_boss_card();
  inline void set_has_haidi();
  inline void clear_has_haidi();
  inline void set_has_bow_tong_ling_display_id();
  inline void clear_has_bow_tong_ling_display_id();
  inline void set_has_sys_hong_bao_colleted_time();
  inline void clear_has_sys_hong_bao_colleted_time();
  inline void set_has_tian_xie();
  inline void clear_has_tian_xie();
  inline void set_has_jiandao();
  inline void clear_has_jiandao();
  inline void set_has_lingyu();
  inline void clear_has_lingyu();
  inline void set_has_fengyundao();
  inline void clear_has_fengyundao();
  inline void set_has_pet_tong_ling_display_id();
  inline void clear_has_pet_tong_ling_display_id();
  inline void set_has_mo_fang();
  inline void clear_has_mo_fang();
  inline void set_has_hell_dungeon_enter_count();
  inline void clear_has_hell_dungeon_enter_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 yuanbao_;
  ::google::protobuf::int32 lijin_;
  ::google::protobuf::int32 money_;
  ::app::message::GoodsContainerProto* depot_;
  ::google::protobuf::int32 real_air_;
  ::google::protobuf::int32 fighting_amount_;
  ::app::message::SpriteStatProto* total_stat_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equiped_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto > equipment_datas_;
  ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto > equipments_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int64 upgrade_exp_;
  ::google::protobuf::int64 equipment_resources_;
  ::google::protobuf::RepeatedPtrField< ::std::string> buy_back_goods_datas_;
  ::google::protobuf::RepeatedPtrField< ::std::string> buy_back_goods_list_;
  ::app::message::HeroTaskProto* task_;
  bool has_storage_;
  bool team_auto_accept_invite_;
  bool team_auto_accept_request_;
  bool team_forbid_other_invite_me_join_;
  bool trade_auto_reject_invite_;
  bool guild_auto_accept_invite_;
  bool guild_forbid_other_invite_me_join_;
  bool is_ws_city_master_;
  ::google::protobuf::int64 client_only_config_1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > client_only_int_configs_;
  ::std::string* guild_name_;
  ::google::protobuf::int32 guild_flag_level_;
  ::google::protobuf::int32 guild_li_lian_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friend_guild_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> enemy_guild_name_;
  ::google::protobuf::int32 guild_contribution_;
  ::google::protobuf::int32 vip_exp_;
  ::google::protobuf::int64 accumulated_offline_time_;
  ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonStatProto > story_dungeon_proto_;
  ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonCollectablePrizeProto > story_dungeon_collectable_prize_proto_;
  bool is_long_city_master_;
  bool is_guild_leader_;
  bool is_territory_leader_;
  bool long_mai_today_first_passed_;
  ::google::protobuf::int32 auto_finish_story_id_;
  ::google::protobuf::int64 auto_finish_story_complete_time_;
  ::google::protobuf::int32 finished_challenge_dungeon_sequence_id_;
  ::google::protobuf::int32 defence_today_finished_batch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_vip_dungeon_id_;
  ::google::protobuf::int32 defence_history_max_batch_;
  ::google::protobuf::int32 defence_today_reset_count_;
  ::google::protobuf::int32 defence_collected_first_pass_prize_;
  ::google::protobuf::int32 sou_shen_point_;
  ::google::protobuf::RepeatedPtrField< ::std::string> defence_collectable_prize_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sou_shen_today_passed_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sou_shen_life_passed_id_;
  ::google::protobuf::int32 ling_yun_today_entered_times_;
  ::google::protobuf::int32 ling_yun_today_finish_state_;
  ::google::protobuf::RepeatedPtrField< ::app::message::GroupDungeonCollectablePrizeProto > group_collectable_prize_proto_;
  ::google::protobuf::int32 wu_jue_today_entered_times_;
  ::google::protobuf::int32 wu_jue_today_collected_first_try_transport_prize_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > territory_today_collected_prize_scene_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > daily_activity_result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sheng_wang_task_;
  ::google::protobuf::int32 sheng_wang_;
  ::google::protobuf::int32 use_free_chat_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gems_;
  ::app::message::BowProto* bow_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > admired_hero_;
  ::google::protobuf::int64 last_logout_time_;
  ::google::protobuf::int64 next_collect_vip_weekly_prize_time_;
  ::google::protobuf::int32 collected_vip_prize_;
  ::google::protobuf::int32 using_weapon_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SuperWeaponProto > super_weapon_;
  ::app::message::SpriteStatProto* super_weapon_max_level_add_stat_;
  ::app::message::SpriteStatProto* magic_added_stat_;
  ::app::message::SpriteStatProto* magic_not_saved_added_stat_;
  ::google::protobuf::RepeatedField< bool > has_unlock_magic_weapon_gem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > magic_weapon_gem_level_;
  ::google::protobuf::RepeatedField< bool > magic_weapon_gem_binded_;
  ::google::protobuf::int32 divine_times_;
  ::google::protobuf::int32 divine_amount_;
  ::google::protobuf::int32 divine_storage_goods_count_;
  ::google::protobuf::int32 lottery_;
  ::app::message::MountProto* mount_;
  ::google::protobuf::int64 daily_online_acc_time_;
  ::google::protobuf::int32 sign_;
  ::google::protobuf::int32 sign_prize_;
  ::google::protobuf::int64 next_reduce_pk_amount_time_;
  ::google::protobuf::int32 replenish_sign_times_;
  ::google::protobuf::int32 pk_amount_;
  ::google::protobuf::int64 relive_protected_end_time_;
  ::google::protobuf::int32 total_sign_times_;
  ::google::protobuf::int32 total_recharge_yuanbao_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lottery_goods_static_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lottery_goods_dynamic_data_;
  ::app::message::PetProto* pet_;
  ::google::protobuf::int32 spell_added_upgrade_level_;
  bool has_magic_weapon_;
  bool has_recharge_;
  bool is_collect_local_login_first_prize_;
  bool is_collect_local_login_daily_prize_;
  ::google::protobuf::RepeatedPtrField< ::app::message::CombineXinfaSpellProto > combine_spells_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > passive_spell_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > active_spell_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > active_spell_used_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shortcut_spell_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shortcut_spell_pos_;
  ::google::protobuf::int32 default_spell_pos_;
  ::google::protobuf::int32 jump_shield_;
  ::app::message::ClientRelation* client_relation_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int32 rage_amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > func_bits_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int32 phoenix_refine_times_;
  ::google::protobuf::int32 phoenix_money_refine_times_;
  ::google::protobuf::int32 phoenix_lijin_refine_times_;
  ::google::protobuf::int32 phoenix_yuanbao_refine_times_;
  ::google::protobuf::int32 login_day_;
  ::google::protobuf::int32 tu_long_today_entered_times_;
  ::google::protobuf::int32 melt_amount_;
  ::google::protobuf::int32 challenge_dungeon_daily_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > challenge_dungeon_use_times_;
  ::google::protobuf::int32 challenge_dungeon_assist_times_;
  ::google::protobuf::int32 honor_;
  ::app::message::TianZuiProto* tian_zui_;
  ::app::message::TianJieProto* tian_jie_;
  ::google::protobuf::int32 first_recharge_collect_index_;
  ::google::protobuf::int32 login_prize_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > collect_upgrade_bank_level_;
  ::google::protobuf::int32 invest_upgrade_bank_money_;
  ::google::protobuf::int32 invest_monthly_bank_money_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > collect_upgrade_bank_lijin_;
  ::google::protobuf::int64 invest_monthly_bank_time_;
  ::google::protobuf::int64 monthly_bank_prev_collect_time_;
  ::google::protobuf::int64 monthly_bank_prev_collect_time2_;
  ::google::protobuf::int32 monthly_bank_online_lijin_;
  ::google::protobuf::int32 monthly_bank_base_lijin_;
  ::google::protobuf::int64 total_online_time_;
  ::google::protobuf::int32 monthly_bank_online_hours_;
  bool is_cross_single_story_;
  bool zhong_hua_ge_today_first_passed_;
  bool has_safe_code_;
  bool mo_shi_is_hide_;
  ::app::message::AchievementInfoProto* achievement_;
  ::app::message::ShouCangProto* shou_cang_;
  ::google::protobuf::int32 gaoji_melt_amount_;
  ::google::protobuf::int32 left_ya_biao_times_today_;
  ::std::string* safe_code_question_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jin_jie_lucky_card_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > jin_jie_lucky_card_expire_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jin_jie_lucky_card_rate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > daily_card_use_stat_goods_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > daily_card_use_stat_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_bless_amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > mo_shi_bless_amount_clear_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_spell_id_;
  ::google::protobuf::int32 left_jie_biao_times_today_;
  ::google::protobuf::int32 long_yuan_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_bless_amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > qian_qiu_da_jie_bless_amount_clear_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_qian_neng_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_huan_hua_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_qian_neng_extra_max_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_huan_hua_extra_max_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_qian_neng_max_use_count_extra_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qian_qiu_da_jie_huan_hua_max_use_count_extra_times_;
  ::app::message::HeroJingJieProto* jing_jie_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_qian_neng_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_huan_hua_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_qian_neng_extra_max_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_huan_hua_extra_max_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_qian_neng_max_use_count_extra_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_shi_huan_hua_max_use_count_extra_times_;
  ::google::protobuf::int32 chi_huo_shen_gong_jie_shu_;
  ::google::protobuf::int32 chi_huo_shen_gong_ceng_shu_;
  ::google::protobuf::int32 chi_huo_shen_gong_bless_amount_;
  ::google::protobuf::int32 chi_huo_shen_gong_qian_neng_use_count_;
  ::google::protobuf::int64 chi_huo_shen_gong_bless_amount_clear_time_;
  ::google::protobuf::int32 chi_huo_shen_gong_huan_hua_use_count_;
  ::google::protobuf::int32 chi_huo_shen_gong_qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 chi_huo_shen_gong_huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times_;
  ::google::protobuf::int32 draw_prize_point_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > draw_prize_exchange_count_;
  ::google::protobuf::int32 draw_prize_storage_goods_count_;
  ::google::protobuf::int32 lucky_draw_prize_point_;
  ::google::protobuf::int32 lucky_draw_prize_storage_goods_count_;
  ::google::protobuf::int32 new_draw_prize_point_;
  ::google::protobuf::int32 new_draw_prize_storage_goods_count_;
  ::google::protobuf::int32 daily_wheel_count_;
  ::app::message::YitianshenjueProto* yitianshenjue_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_xin_mo_scene_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > collected_recharge_rank_promotion_prize_;
  bool qian_qiu_da_jie_is_hide_;
  bool chi_huo_shen_gong_is_hide_;
  bool has_collect_guild_plant_prize_;
  bool hide_city_master_;
  ::google::protobuf::int32 arena_pair_point_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > collected_rank_promotion_prize_;
  ::google::protobuf::int32 today_finished_arena_count_;
  ::google::protobuf::int32 arena_shop_point_;
  ::google::protobuf::int32 arena_collectable_shop_point_;
  ::google::protobuf::int32 arena_yesterday_finish_count_;
  ::google::protobuf::int32 arena_yesterday_pair_point_;
  ::google::protobuf::int32 arena_yesterday_original_shop_point_;
  ::google::protobuf::int64 next_can_use_guild_lilian_time_;
  ::app::message::GuildDungeonCollectedPrizeProto* guild_dungeon_collected_prize_;
  ::app::message::HeroSuperArmProto* super_arm_;
  ::app::message::DemonProto* demon_;
  ::google::protobuf::int32 arena_shop_point_added_today_by_win_;
  ::google::protobuf::int32 gallup_answered_question_count_;
  ::app::message::CloakProto* cloak_;
  ::google::protobuf::int64 pet_combine_added_life_;
  ::google::protobuf::int64 pet_next_can_combine_time_;
  ::app::message::HeroMarriageProto* marriage_;
  ::google::protobuf::int32 gallup_today_answered_question_count_;
  ::google::protobuf::int32 tian_men_times_;
  ::google::protobuf::int64 wash_super_weapon_bless_clear_time_;
  ::google::protobuf::int64 last_change_name_time_;
  ::google::protobuf::int32 p37_vip_prize_count_flag_;
  ::google::protobuf::int32 htz_times_;
  ::google::protobuf::int64 next_can_change_race_time_;
  ::google::protobuf::int32 htz_max_destroy_record_;
  ::google::protobuf::int32 htz_time_record_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > limit_count_goods_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > limit_count_goods_use_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > single_wash_super_weapon_bless_clear_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > single_wash_super_weapon_bless_type_;
  ::std::string* arena_fighting_team_name_bytes_;
  ::google::protobuf::int32 arena_fighting_team_shop_point_;
  ::google::protobuf::int32 arena_fighting_team_shop_point_added_today_by_win_;
  ::app::message::MoBingProto* mo_bing_proto_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > active_mount_tongling_ids_;
  ::google::protobuf::int64 change_use_mount_tongling_id_cd_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mount_tongling_wake_value_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > not_save_xun_zhang_random_stat1_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > not_save_xun_zhang_random_stat2_;
  ::google::protobuf::int32 use_mount_tongling_id_;
  bool hide_long_city_master_;
  bool finished_collected_fight_amout_changed_value_rank_daily_prize_;
  bool is_gain_huege_data_prize_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_yy_purple_dungeon_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > he_cheng_goods_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > he_cheng_goods_count_;
  ::google::protobuf::int32 christmas_storage_goods_count_;
  ::google::protobuf::int32 credits_;
  ::google::protobuf::int32 monopoly_now_cell_id_;
  ::google::protobuf::int32 monopoly_now_roll_times_cost_;
  ::google::protobuf::int32 monopoly_roll_times_;
  ::google::protobuf::int32 monopoly_buy_roll_times_;
  ::app::message::HeroLoveProto* love_;
  ::google::protobuf::int32 credits_draw_storage_goods_count_;
  ::google::protobuf::int32 finished_tong_tian_ta_dungeon_sequence_;
  ::app::message::WuDaoProto* wu_dao_;
  ::app::message::NiDaoQianKunClient* ni_dao_qian_kun_;
  ::google::protobuf::int32 tong_tian_ta_dungeon_daily_times_;
  ::google::protobuf::int32 tong_tian_ta_dungeon_refresh_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tong_tian_ta_dungeon_use_times_;
  ::app::message::HeroAnniversaryProto* anniversary_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > firework_color_values_;
  ::google::protobuf::int64 firework_promotion_start_time_;
  ::google::protobuf::int64 firework_promotion_end_time_;
  ::app::message::HeroAnniversaryTaskProto* anniversary_task_;
  ::app::message::ShieldProto* shield_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_ling_yun_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_long_mai_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_zhong_hua_ge_id_;
  ::google::protobuf::RepeatedPtrField< ::app::message::DefenceDungeonStateClientProto > defence_dungeon_state_;
  ::google::protobuf::int32 ling_guang_;
  ::google::protobuf::int32 ling_guang_pick_;
  ::app::message::HeroBossCard* boss_card_;
  ::google::protobuf::int32 mystery_dungeon_use_time_;
  ::google::protobuf::int32 bow_tong_ling_display_id_;
  ::app::message::HaidiInfoProto* haidi_;
  ::google::protobuf::RepeatedPtrField< ::app::message::BowTongLingClientProto > bow_tong_ling_;
  ::google::protobuf::int64 sys_hong_bao_colleted_time_;
  ::app::message::TianXieProto* tian_xie_;
  ::app::message::JianDaoProto* jiandao_;
  ::app::message::LingYuProto* lingyu_;
  ::app::message::FengYunDaoProto* fengyundao_;
  ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingClientProto > pet_tong_ling_;
  ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingSingleSpellClientProto > pet_tong_ling_single_spell_;
  ::google::protobuf::int32 pet_tong_ling_display_id_;
  ::google::protobuf::int32 hell_dungeon_enter_count_;
  ::app::message::MoFangClientProto* mo_fang_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(291 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroProto* default_instance_;
};
// -------------------------------------------------------------------

class MoFangClientProto : public ::google::protobuf::Message {
 public:
  MoFangClientProto();
  virtual ~MoFangClientProto();

  MoFangClientProto(const MoFangClientProto& from);

  inline MoFangClientProto& operator=(const MoFangClientProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoFangClientProto& default_instance();

  void Swap(MoFangClientProto* other);

  // implements Message ----------------------------------------------

  MoFangClientProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoFangClientProto& from);
  void MergeFrom(const MoFangClientProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 jie_shu = 1;
  inline bool has_jie_shu() const;
  inline void clear_jie_shu();
  static const int kJieShuFieldNumber = 1;
  inline ::google::protobuf::int32 jie_shu() const;
  inline void set_jie_shu(::google::protobuf::int32 value);

  // optional int32 ceng_shu = 2;
  inline bool has_ceng_shu() const;
  inline void clear_ceng_shu();
  static const int kCengShuFieldNumber = 2;
  inline ::google::protobuf::int32 ceng_shu() const;
  inline void set_ceng_shu(::google::protobuf::int32 value);

  // optional int32 bless_amount = 3;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 3;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 4;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 4;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 qian_neng_use_count = 5;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 5;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 6;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 6;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_extra_max_use_count = 7;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 7;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 8;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 8;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 9;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 9;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 10;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 10;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MoFangClientProto)
 private:
  inline void set_has_jie_shu();
  inline void clear_has_jie_shu();
  inline void set_has_ceng_shu();
  inline void clear_has_ceng_shu();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 jie_shu_;
  ::google::protobuf::int32 ceng_shu_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MoFangClientProto* default_instance_;
};
// -------------------------------------------------------------------

class PetTongLingClientProto : public ::google::protobuf::Message {
 public:
  PetTongLingClientProto();
  virtual ~PetTongLingClientProto();

  PetTongLingClientProto(const PetTongLingClientProto& from);

  inline PetTongLingClientProto& operator=(const PetTongLingClientProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetTongLingClientProto& default_instance();

  void Swap(PetTongLingClientProto* other);

  // implements Message ----------------------------------------------

  PetTongLingClientProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetTongLingClientProto& from);
  void MergeFrom(const PetTongLingClientProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .app.message.SpriteStatProto stat = 2;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 2;
  inline const ::app::message::SpriteStatProto& stat() const;
  inline ::app::message::SpriteStatProto* mutable_stat();
  inline ::app::message::SpriteStatProto* release_stat();
  inline void set_allocated_stat(::app::message::SpriteStatProto* stat);

  // optional int32 fightAmount = 3;
  inline bool has_fightamount() const;
  inline void clear_fightamount();
  static const int kFightAmountFieldNumber = 3;
  inline ::google::protobuf::int32 fightamount() const;
  inline void set_fightamount(::google::protobuf::int32 value);

  // optional int32 upgradeTimes = 4;
  inline bool has_upgradetimes() const;
  inline void clear_upgradetimes();
  static const int kUpgradeTimesFieldNumber = 4;
  inline ::google::protobuf::int32 upgradetimes() const;
  inline void set_upgradetimes(::google::protobuf::int32 value);

  // repeated .app.message.PetTongLingGiftSpellClientProto gift_spell = 5;
  inline int gift_spell_size() const;
  inline void clear_gift_spell();
  static const int kGiftSpellFieldNumber = 5;
  inline const ::app::message::PetTongLingGiftSpellClientProto& gift_spell(int index) const;
  inline ::app::message::PetTongLingGiftSpellClientProto* mutable_gift_spell(int index);
  inline ::app::message::PetTongLingGiftSpellClientProto* add_gift_spell();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingGiftSpellClientProto >&
      gift_spell() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingGiftSpellClientProto >*
      mutable_gift_spell();

  // @@protoc_insertion_point(class_scope:app.message.PetTongLingClientProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_fightamount();
  inline void clear_has_fightamount();
  inline void set_has_upgradetimes();
  inline void clear_has_upgradetimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::SpriteStatProto* stat_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fightamount_;
  ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingGiftSpellClientProto > gift_spell_;
  ::google::protobuf::int32 upgradetimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static PetTongLingClientProto* default_instance_;
};
// -------------------------------------------------------------------

class PetTongLingGiftSpellClientProto : public ::google::protobuf::Message {
 public:
  PetTongLingGiftSpellClientProto();
  virtual ~PetTongLingGiftSpellClientProto();

  PetTongLingGiftSpellClientProto(const PetTongLingGiftSpellClientProto& from);

  inline PetTongLingGiftSpellClientProto& operator=(const PetTongLingGiftSpellClientProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetTongLingGiftSpellClientProto& default_instance();

  void Swap(PetTongLingGiftSpellClientProto* other);

  // implements Message ----------------------------------------------

  PetTongLingGiftSpellClientProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetTongLingGiftSpellClientProto& from);
  void MergeFrom(const PetTongLingGiftSpellClientProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.ActiveSpell passive_spell = 1;
  inline bool has_passive_spell() const;
  inline void clear_passive_spell();
  static const int kPassiveSpellFieldNumber = 1;
  inline const ::app::message::ActiveSpell& passive_spell() const;
  inline ::app::message::ActiveSpell* mutable_passive_spell();
  inline ::app::message::ActiveSpell* release_passive_spell();
  inline void set_allocated_passive_spell(::app::message::ActiveSpell* passive_spell);

  // optional int32 passive_spell_exp = 2;
  inline bool has_passive_spell_exp() const;
  inline void clear_passive_spell_exp();
  static const int kPassiveSpellExpFieldNumber = 2;
  inline ::google::protobuf::int32 passive_spell_exp() const;
  inline void set_passive_spell_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PetTongLingGiftSpellClientProto)
 private:
  inline void set_has_passive_spell();
  inline void clear_has_passive_spell();
  inline void set_has_passive_spell_exp();
  inline void clear_has_passive_spell_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::ActiveSpell* passive_spell_;
  ::google::protobuf::int32 passive_spell_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static PetTongLingGiftSpellClientProto* default_instance_;
};
// -------------------------------------------------------------------

class PetTongLingSingleSpellClientProto : public ::google::protobuf::Message {
 public:
  PetTongLingSingleSpellClientProto();
  virtual ~PetTongLingSingleSpellClientProto();

  PetTongLingSingleSpellClientProto(const PetTongLingSingleSpellClientProto& from);

  inline PetTongLingSingleSpellClientProto& operator=(const PetTongLingSingleSpellClientProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetTongLingSingleSpellClientProto& default_instance();

  void Swap(PetTongLingSingleSpellClientProto* other);

  // implements Message ----------------------------------------------

  PetTongLingSingleSpellClientProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetTongLingSingleSpellClientProto& from);
  void MergeFrom(const PetTongLingSingleSpellClientProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.ActiveSpell spell = 1;
  inline bool has_spell() const;
  inline void clear_spell();
  static const int kSpellFieldNumber = 1;
  inline const ::app::message::ActiveSpell& spell() const;
  inline ::app::message::ActiveSpell* mutable_spell();
  inline ::app::message::ActiveSpell* release_spell();
  inline void set_allocated_spell(::app::message::ActiveSpell* spell);

  // optional int32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PetTongLingSingleSpellClientProto)
 private:
  inline void set_has_spell();
  inline void clear_has_spell();
  inline void set_has_sequence();
  inline void clear_has_sequence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::ActiveSpell* spell_;
  ::google::protobuf::int32 sequence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static PetTongLingSingleSpellClientProto* default_instance_;
};
// -------------------------------------------------------------------

class BowTongLingClientProto : public ::google::protobuf::Message {
 public:
  BowTongLingClientProto();
  virtual ~BowTongLingClientProto();

  BowTongLingClientProto(const BowTongLingClientProto& from);

  inline BowTongLingClientProto& operator=(const BowTongLingClientProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BowTongLingClientProto& default_instance();

  void Swap(BowTongLingClientProto* other);

  // implements Message ----------------------------------------------

  BowTongLingClientProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BowTongLingClientProto& from);
  void MergeFrom(const BowTongLingClientProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .app.message.SpriteStatProto stat = 2;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 2;
  inline const ::app::message::SpriteStatProto& stat() const;
  inline ::app::message::SpriteStatProto* mutable_stat();
  inline ::app::message::SpriteStatProto* release_stat();
  inline void set_allocated_stat(::app::message::SpriteStatProto* stat);

  // optional int32 fightAmount = 3;
  inline bool has_fightamount() const;
  inline void clear_fightamount();
  static const int kFightAmountFieldNumber = 3;
  inline ::google::protobuf::int32 fightamount() const;
  inline void set_fightamount(::google::protobuf::int32 value);

  // optional int32 upgradeTimes = 4;
  inline bool has_upgradetimes() const;
  inline void clear_upgradetimes();
  static const int kUpgradeTimesFieldNumber = 4;
  inline ::google::protobuf::int32 upgradetimes() const;
  inline void set_upgradetimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.BowTongLingClientProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_fightamount();
  inline void clear_has_fightamount();
  inline void set_has_upgradetimes();
  inline void clear_has_upgradetimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::SpriteStatProto* stat_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fightamount_;
  ::google::protobuf::int32 upgradetimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static BowTongLingClientProto* default_instance_;
};
// -------------------------------------------------------------------

class FengYunDaoRankProto_FengYunDaoRankData : public ::google::protobuf::Message {
 public:
  FengYunDaoRankProto_FengYunDaoRankData();
  virtual ~FengYunDaoRankProto_FengYunDaoRankData();

  FengYunDaoRankProto_FengYunDaoRankData(const FengYunDaoRankProto_FengYunDaoRankData& from);

  inline FengYunDaoRankProto_FengYunDaoRankData& operator=(const FengYunDaoRankProto_FengYunDaoRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FengYunDaoRankProto_FengYunDaoRankData& default_instance();

  void Swap(FengYunDaoRankProto_FengYunDaoRankData* other);

  // implements Message ----------------------------------------------

  FengYunDaoRankProto_FengYunDaoRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FengYunDaoRankProto_FengYunDaoRankData& from);
  void MergeFrom(const FengYunDaoRankProto_FengYunDaoRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 pass = 3;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 3;
  inline ::google::protobuf::int32 pass() const;
  inline void set_pass(::google::protobuf::int32 value);

  // optional int32 useTime = 4;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUseTimeFieldNumber = 4;
  inline ::google::protobuf::int32 usetime() const;
  inline void set_usetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.FengYunDaoRankProto.FengYunDaoRankData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pass();
  inline void clear_has_pass();
  inline void set_has_usetime();
  inline void clear_has_usetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 pass_;
  ::google::protobuf::int32 usetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static FengYunDaoRankProto_FengYunDaoRankData* default_instance_;
};
// -------------------------------------------------------------------

class FengYunDaoRankProto : public ::google::protobuf::Message {
 public:
  FengYunDaoRankProto();
  virtual ~FengYunDaoRankProto();

  FengYunDaoRankProto(const FengYunDaoRankProto& from);

  inline FengYunDaoRankProto& operator=(const FengYunDaoRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FengYunDaoRankProto& default_instance();

  void Swap(FengYunDaoRankProto* other);

  // implements Message ----------------------------------------------

  FengYunDaoRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FengYunDaoRankProto& from);
  void MergeFrom(const FengYunDaoRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FengYunDaoRankProto_FengYunDaoRankData FengYunDaoRankData;

  // accessors -------------------------------------------------------

  // repeated .app.message.FengYunDaoRankProto.FengYunDaoRankData rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::app::message::FengYunDaoRankProto_FengYunDaoRankData& rank(int index) const;
  inline ::app::message::FengYunDaoRankProto_FengYunDaoRankData* mutable_rank(int index);
  inline ::app::message::FengYunDaoRankProto_FengYunDaoRankData* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::FengYunDaoRankProto_FengYunDaoRankData >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::FengYunDaoRankProto_FengYunDaoRankData >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:app.message.FengYunDaoRankProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::FengYunDaoRankProto_FengYunDaoRankData > rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static FengYunDaoRankProto* default_instance_;
};
// -------------------------------------------------------------------

class FengYunDaoProto : public ::google::protobuf::Message {
 public:
  FengYunDaoProto();
  virtual ~FengYunDaoProto();

  FengYunDaoProto(const FengYunDaoProto& from);

  inline FengYunDaoProto& operator=(const FengYunDaoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FengYunDaoProto& default_instance();

  void Swap(FengYunDaoProto* other);

  // implements Message ----------------------------------------------

  FengYunDaoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FengYunDaoProto& from);
  void MergeFrom(const FengYunDaoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dailyTimes = 1;
  inline bool has_dailytimes() const;
  inline void clear_dailytimes();
  static const int kDailyTimesFieldNumber = 1;
  inline ::google::protobuf::int32 dailytimes() const;
  inline void set_dailytimes(::google::protobuf::int32 value);

  // optional int32 dailyBuyTimes = 2;
  inline bool has_dailybuytimes() const;
  inline void clear_dailybuytimes();
  static const int kDailyBuyTimesFieldNumber = 2;
  inline ::google::protobuf::int32 dailybuytimes() const;
  inline void set_dailybuytimes(::google::protobuf::int32 value);

  // optional int32 firstIndex = 3;
  inline bool has_firstindex() const;
  inline void clear_firstindex();
  static const int kFirstIndexFieldNumber = 3;
  inline ::google::protobuf::int32 firstindex() const;
  inline void set_firstindex(::google::protobuf::int32 value);

  // optional int32 curIndex = 4;
  inline bool has_curindex() const;
  inline void clear_curindex();
  static const int kCurIndexFieldNumber = 4;
  inline ::google::protobuf::int32 curindex() const;
  inline void set_curindex(::google::protobuf::int32 value);

  // optional bool challengeKeep = 5;
  inline bool has_challengekeep() const;
  inline void clear_challengekeep();
  static const int kChallengeKeepFieldNumber = 5;
  inline bool challengekeep() const;
  inline void set_challengekeep(bool value);

  // @@protoc_insertion_point(class_scope:app.message.FengYunDaoProto)
 private:
  inline void set_has_dailytimes();
  inline void clear_has_dailytimes();
  inline void set_has_dailybuytimes();
  inline void clear_has_dailybuytimes();
  inline void set_has_firstindex();
  inline void clear_has_firstindex();
  inline void set_has_curindex();
  inline void clear_has_curindex();
  inline void set_has_challengekeep();
  inline void clear_has_challengekeep();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dailytimes_;
  ::google::protobuf::int32 dailybuytimes_;
  ::google::protobuf::int32 firstindex_;
  ::google::protobuf::int32 curindex_;
  bool challengekeep_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static FengYunDaoProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroYuYiGeProtos : public ::google::protobuf::Message {
 public:
  HeroYuYiGeProtos();
  virtual ~HeroYuYiGeProtos();

  HeroYuYiGeProtos(const HeroYuYiGeProtos& from);

  inline HeroYuYiGeProtos& operator=(const HeroYuYiGeProtos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroYuYiGeProtos& default_instance();

  void Swap(HeroYuYiGeProtos* other);

  // implements Message ----------------------------------------------

  HeroYuYiGeProtos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroYuYiGeProtos& from);
  void MergeFrom(const HeroYuYiGeProtos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 on_show_sequence = 1;
  inline bool has_on_show_sequence() const;
  inline void clear_on_show_sequence();
  static const int kOnShowSequenceFieldNumber = 1;
  inline ::google::protobuf::int32 on_show_sequence() const;
  inline void set_on_show_sequence(::google::protobuf::int32 value);

  // repeated .app.message.HeroYuYiGeProto protos = 2;
  inline int protos_size() const;
  inline void clear_protos();
  static const int kProtosFieldNumber = 2;
  inline const ::app::message::HeroYuYiGeProto& protos(int index) const;
  inline ::app::message::HeroYuYiGeProto* mutable_protos(int index);
  inline ::app::message::HeroYuYiGeProto* add_protos();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::HeroYuYiGeProto >&
      protos() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::HeroYuYiGeProto >*
      mutable_protos();

  // optional bool is_hide = 3;
  inline bool has_is_hide() const;
  inline void clear_is_hide();
  static const int kIsHideFieldNumber = 3;
  inline bool is_hide() const;
  inline void set_is_hide(bool value);

  // @@protoc_insertion_point(class_scope:app.message.HeroYuYiGeProtos)
 private:
  inline void set_has_on_show_sequence();
  inline void clear_has_on_show_sequence();
  inline void set_has_is_hide();
  inline void clear_has_is_hide();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::HeroYuYiGeProto > protos_;
  ::google::protobuf::int32 on_show_sequence_;
  bool is_hide_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroYuYiGeProtos* default_instance_;
};
// -------------------------------------------------------------------

class HeroYuYiGeProto : public ::google::protobuf::Message {
 public:
  HeroYuYiGeProto();
  virtual ~HeroYuYiGeProto();

  HeroYuYiGeProto(const HeroYuYiGeProto& from);

  inline HeroYuYiGeProto& operator=(const HeroYuYiGeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroYuYiGeProto& default_instance();

  void Swap(HeroYuYiGeProto* other);

  // implements Message ----------------------------------------------

  HeroYuYiGeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroYuYiGeProto& from);
  void MergeFrom(const HeroYuYiGeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sequence = 1;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);

  // optional .app.message.EquipmentProto fashion = 2;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 2;
  inline const ::app::message::EquipmentProto& fashion() const;
  inline ::app::message::EquipmentProto* mutable_fashion();
  inline ::app::message::EquipmentProto* release_fashion();
  inline void set_allocated_fashion(::app::message::EquipmentProto* fashion);

  // optional .app.message.EquipmentDataProto fashion_data = 3;
  inline bool has_fashion_data() const;
  inline void clear_fashion_data();
  static const int kFashionDataFieldNumber = 3;
  inline const ::app::message::EquipmentDataProto& fashion_data() const;
  inline ::app::message::EquipmentDataProto* mutable_fashion_data();
  inline ::app::message::EquipmentDataProto* release_fashion_data();
  inline void set_allocated_fashion_data(::app::message::EquipmentDataProto* fashion_data);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool is_use_bless_amount = 5;
  inline bool has_is_use_bless_amount() const;
  inline void clear_is_use_bless_amount();
  static const int kIsUseBlessAmountFieldNumber = 5;
  inline bool is_use_bless_amount() const;
  inline void set_is_use_bless_amount(bool value);

  // optional int32 bless_amount = 6;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 6;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 7;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 7;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 blessLv = 8;
  inline bool has_blesslv() const;
  inline void clear_blesslv();
  static const int kBlessLvFieldNumber = 8;
  inline ::google::protobuf::int32 blesslv() const;
  inline void set_blesslv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroYuYiGeProto)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_fashion_data();
  inline void clear_has_fashion_data();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_is_use_bless_amount();
  inline void clear_has_is_use_bless_amount();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_blesslv();
  inline void clear_has_blesslv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::EquipmentProto* fashion_;
  ::google::protobuf::int32 sequence_;
  ::google::protobuf::int32 level_;
  ::app::message::EquipmentDataProto* fashion_data_;
  bool is_use_bless_amount_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 blesslv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroYuYiGeProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroWelfareCompensationProto_WelfareCompensationProto : public ::google::protobuf::Message {
 public:
  HeroWelfareCompensationProto_WelfareCompensationProto();
  virtual ~HeroWelfareCompensationProto_WelfareCompensationProto();

  HeroWelfareCompensationProto_WelfareCompensationProto(const HeroWelfareCompensationProto_WelfareCompensationProto& from);

  inline HeroWelfareCompensationProto_WelfareCompensationProto& operator=(const HeroWelfareCompensationProto_WelfareCompensationProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroWelfareCompensationProto_WelfareCompensationProto& default_instance();

  void Swap(HeroWelfareCompensationProto_WelfareCompensationProto* other);

  // implements Message ----------------------------------------------

  HeroWelfareCompensationProto_WelfareCompensationProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroWelfareCompensationProto_WelfareCompensationProto& from);
  void MergeFrom(const HeroWelfareCompensationProto_WelfareCompensationProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .app.message.PrizeProto prize = 4;
  inline bool has_prize() const;
  inline void clear_prize();
  static const int kPrizeFieldNumber = 4;
  inline const ::app::message::PrizeProto& prize() const;
  inline ::app::message::PrizeProto* mutable_prize();
  inline ::app::message::PrizeProto* release_prize();
  inline void set_allocated_prize(::app::message::PrizeProto* prize);

  // @@protoc_insertion_point(class_scope:app.message.HeroWelfareCompensationProto.WelfareCompensationProto)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_prize();
  inline void clear_has_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 index_;
  ::std::string* title_;
  ::std::string* content_;
  ::app::message::PrizeProto* prize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroWelfareCompensationProto_WelfareCompensationProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroWelfareCompensationProto : public ::google::protobuf::Message {
 public:
  HeroWelfareCompensationProto();
  virtual ~HeroWelfareCompensationProto();

  HeroWelfareCompensationProto(const HeroWelfareCompensationProto& from);

  inline HeroWelfareCompensationProto& operator=(const HeroWelfareCompensationProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroWelfareCompensationProto& default_instance();

  void Swap(HeroWelfareCompensationProto* other);

  // implements Message ----------------------------------------------

  HeroWelfareCompensationProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroWelfareCompensationProto& from);
  void MergeFrom(const HeroWelfareCompensationProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HeroWelfareCompensationProto_WelfareCompensationProto WelfareCompensationProto;

  // accessors -------------------------------------------------------

  // optional .app.message.HeroWelfareCompensationProto.WelfareCompensationProto welfare = 1;
  inline bool has_welfare() const;
  inline void clear_welfare();
  static const int kWelfareFieldNumber = 1;
  inline const ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto& welfare() const;
  inline ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* mutable_welfare();
  inline ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* release_welfare();
  inline void set_allocated_welfare(::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* welfare);

  // optional int64 expireTime = 2;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 2;
  inline ::google::protobuf::int64 expiretime() const;
  inline void set_expiretime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroWelfareCompensationProto)
 private:
  inline void set_has_welfare();
  inline void clear_has_welfare();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* welfare_;
  ::google::protobuf::int64 expiretime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroWelfareCompensationProto* default_instance_;
};
// -------------------------------------------------------------------

class LingYuProto : public ::google::protobuf::Message {
 public:
  LingYuProto();
  virtual ~LingYuProto();

  LingYuProto(const LingYuProto& from);

  inline LingYuProto& operator=(const LingYuProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LingYuProto& default_instance();

  void Swap(LingYuProto* other);

  // implements Message ----------------------------------------------

  LingYuProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LingYuProto& from);
  void MergeFrom(const LingYuProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated int32 typeLevel = 2;
  inline int typelevel_size() const;
  inline void clear_typelevel();
  static const int kTypeLevelFieldNumber = 2;
  inline ::google::protobuf::int32 typelevel(int index) const;
  inline void set_typelevel(int index, ::google::protobuf::int32 value);
  inline void add_typelevel(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      typelevel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_typelevel();

  // optional int32 usingType = 3;
  inline bool has_usingtype() const;
  inline void clear_usingtype();
  static const int kUsingTypeFieldNumber = 3;
  inline ::google::protobuf::int32 usingtype() const;
  inline void set_usingtype(::google::protobuf::int32 value);

  // optional int32 bless_amount = 10;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 10;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 11;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 11;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 qian_neng_use_count = 12;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 12;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 13;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 13;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional int32 upgrade_times = 14;
  inline bool has_upgrade_times() const;
  inline void clear_upgrade_times();
  static const int kUpgradeTimesFieldNumber = 14;
  inline ::google::protobuf::int32 upgrade_times() const;
  inline void set_upgrade_times(::google::protobuf::int32 value);

  // optional int32 qian_neng_extra_max_use_count = 15;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 15;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 16;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 16;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 17;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 17;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 18;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 18;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.LingYuProto)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_usingtype();
  inline void clear_has_usingtype();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_upgrade_times();
  inline void clear_has_upgrade_times();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > typelevel_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 usingtype_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int32 upgrade_times_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static LingYuProto* default_instance_;
};
// -------------------------------------------------------------------

class TongTianBaoJianTaskProto : public ::google::protobuf::Message {
 public:
  TongTianBaoJianTaskProto();
  virtual ~TongTianBaoJianTaskProto();

  TongTianBaoJianTaskProto(const TongTianBaoJianTaskProto& from);

  inline TongTianBaoJianTaskProto& operator=(const TongTianBaoJianTaskProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TongTianBaoJianTaskProto& default_instance();

  void Swap(TongTianBaoJianTaskProto* other);

  // implements Message ----------------------------------------------

  TongTianBaoJianTaskProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TongTianBaoJianTaskProto& from);
  void MergeFrom(const TongTianBaoJianTaskProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string task_name = 2;
  inline bool has_task_name() const;
  inline void clear_task_name();
  static const int kTaskNameFieldNumber = 2;
  inline const ::std::string& task_name() const;
  inline void set_task_name(const ::std::string& value);
  inline void set_task_name(const char* value);
  inline void set_task_name(const char* value, size_t size);
  inline ::std::string* mutable_task_name();
  inline ::std::string* release_task_name();
  inline void set_allocated_task_name(::std::string* task_name);

  // optional int32 goal_target = 3;
  inline bool has_goal_target() const;
  inline void clear_goal_target();
  static const int kGoalTargetFieldNumber = 3;
  inline ::google::protobuf::int32 goal_target() const;
  inline void set_goal_target(::google::protobuf::int32 value);

  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.TongTianBaoJianTaskProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_task_name();
  inline void clear_has_task_name();
  inline void set_has_goal_target();
  inline void clear_has_goal_target();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* task_name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 goal_target_;
  ::std::string* desc_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static TongTianBaoJianTaskProto* default_instance_;
};
// -------------------------------------------------------------------

class DefenceDungeonStateClientProto : public ::google::protobuf::Message {
 public:
  DefenceDungeonStateClientProto();
  virtual ~DefenceDungeonStateClientProto();

  DefenceDungeonStateClientProto(const DefenceDungeonStateClientProto& from);

  inline DefenceDungeonStateClientProto& operator=(const DefenceDungeonStateClientProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DefenceDungeonStateClientProto& default_instance();

  void Swap(DefenceDungeonStateClientProto* other);

  // implements Message ----------------------------------------------

  DefenceDungeonStateClientProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DefenceDungeonStateClientProto& from);
  void MergeFrom(const DefenceDungeonStateClientProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dungeon_id = 1;
  inline bool has_dungeon_id() const;
  inline void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 1;
  inline ::google::protobuf::int32 dungeon_id() const;
  inline void set_dungeon_id(::google::protobuf::int32 value);

  // optional int32 defence_today_finished_batch = 2;
  inline bool has_defence_today_finished_batch() const;
  inline void clear_defence_today_finished_batch();
  static const int kDefenceTodayFinishedBatchFieldNumber = 2;
  inline ::google::protobuf::int32 defence_today_finished_batch() const;
  inline void set_defence_today_finished_batch(::google::protobuf::int32 value);

  // optional int32 defence_history_max_batch = 3;
  inline bool has_defence_history_max_batch() const;
  inline void clear_defence_history_max_batch();
  static const int kDefenceHistoryMaxBatchFieldNumber = 3;
  inline ::google::protobuf::int32 defence_history_max_batch() const;
  inline void set_defence_history_max_batch(::google::protobuf::int32 value);

  // optional int32 defence_collected_first_pass_prize = 5;
  inline bool has_defence_collected_first_pass_prize() const;
  inline void clear_defence_collected_first_pass_prize();
  static const int kDefenceCollectedFirstPassPrizeFieldNumber = 5;
  inline ::google::protobuf::int32 defence_collected_first_pass_prize() const;
  inline void set_defence_collected_first_pass_prize(::google::protobuf::int32 value);

  // repeated bytes defence_collectable_prize = 6;
  inline int defence_collectable_prize_size() const;
  inline void clear_defence_collectable_prize();
  static const int kDefenceCollectablePrizeFieldNumber = 6;
  inline const ::std::string& defence_collectable_prize(int index) const;
  inline ::std::string* mutable_defence_collectable_prize(int index);
  inline void set_defence_collectable_prize(int index, const ::std::string& value);
  inline void set_defence_collectable_prize(int index, const char* value);
  inline void set_defence_collectable_prize(int index, const void* value, size_t size);
  inline ::std::string* add_defence_collectable_prize();
  inline void add_defence_collectable_prize(const ::std::string& value);
  inline void add_defence_collectable_prize(const char* value);
  inline void add_defence_collectable_prize(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& defence_collectable_prize() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_defence_collectable_prize();

  // @@protoc_insertion_point(class_scope:app.message.DefenceDungeonStateClientProto)
 private:
  inline void set_has_dungeon_id();
  inline void clear_has_dungeon_id();
  inline void set_has_defence_today_finished_batch();
  inline void clear_has_defence_today_finished_batch();
  inline void set_has_defence_history_max_batch();
  inline void clear_has_defence_history_max_batch();
  inline void set_has_defence_collected_first_pass_prize();
  inline void clear_has_defence_collected_first_pass_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dungeon_id_;
  ::google::protobuf::int32 defence_today_finished_batch_;
  ::google::protobuf::int32 defence_history_max_batch_;
  ::google::protobuf::int32 defence_collected_first_pass_prize_;
  ::google::protobuf::RepeatedPtrField< ::std::string> defence_collectable_prize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static DefenceDungeonStateClientProto* default_instance_;
};
// -------------------------------------------------------------------

class HugeDataProto : public ::google::protobuf::Message {
 public:
  HugeDataProto();
  virtual ~HugeDataProto();

  HugeDataProto(const HugeDataProto& from);

  inline HugeDataProto& operator=(const HugeDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HugeDataProto& default_instance();

  void Swap(HugeDataProto* other);

  // implements Message ----------------------------------------------

  HugeDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HugeDataProto& from);
  void MergeFrom(const HugeDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_login_day = 1;
  inline bool has_total_login_day() const;
  inline void clear_total_login_day();
  static const int kTotalLoginDayFieldNumber = 1;
  inline ::google::protobuf::int32 total_login_day() const;
  inline void set_total_login_day(::google::protobuf::int32 value);

  // optional int32 total_login_time = 2;
  inline bool has_total_login_time() const;
  inline void clear_total_login_time();
  static const int kTotalLoginTimeFieldNumber = 2;
  inline ::google::protobuf::int32 total_login_time() const;
  inline void set_total_login_time(::google::protobuf::int32 value);

  // optional int32 fighting_amount = 3;
  inline bool has_fighting_amount() const;
  inline void clear_fighting_amount();
  static const int kFightingAmountFieldNumber = 3;
  inline ::google::protobuf::int32 fighting_amount() const;
  inline void set_fighting_amount(::google::protobuf::int32 value);

  // optional int32 total_auction_yuanbao = 4;
  inline bool has_total_auction_yuanbao() const;
  inline void clear_total_auction_yuanbao();
  static const int kTotalAuctionYuanbaoFieldNumber = 4;
  inline ::google::protobuf::int32 total_auction_yuanbao() const;
  inline void set_total_auction_yuanbao(::google::protobuf::int32 value);

  // optional int32 total_long_cheng = 5;
  inline bool has_total_long_cheng() const;
  inline void clear_total_long_cheng();
  static const int kTotalLongChengFieldNumber = 5;
  inline ::google::protobuf::int32 total_long_cheng() const;
  inline void set_total_long_cheng(::google::protobuf::int32 value);

  // optional int32 total_wu_shuang = 6;
  inline bool has_total_wu_shuang() const;
  inline void clear_total_wu_shuang();
  static const int kTotalWuShuangFieldNumber = 6;
  inline ::google::protobuf::int32 total_wu_shuang() const;
  inline void set_total_wu_shuang(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 enemy_num = 8;
  inline bool has_enemy_num() const;
  inline void clear_enemy_num();
  static const int kEnemyNumFieldNumber = 8;
  inline ::google::protobuf::int32 enemy_num() const;
  inline void set_enemy_num(::google::protobuf::int32 value);

  // optional int32 total_ling_di = 9;
  inline bool has_total_ling_di() const;
  inline void clear_total_ling_di();
  static const int kTotalLingDiFieldNumber = 9;
  inline ::google::protobuf::int32 total_ling_di() const;
  inline void set_total_ling_di(::google::protobuf::int32 value);

  // optional int64 create_time = 10;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // optional .app.message.GoodsWrapperProto huge_data_prize = 11;
  inline bool has_huge_data_prize() const;
  inline void clear_huge_data_prize();
  static const int kHugeDataPrizeFieldNumber = 11;
  inline const ::app::message::GoodsWrapperProto& huge_data_prize() const;
  inline ::app::message::GoodsWrapperProto* mutable_huge_data_prize();
  inline ::app::message::GoodsWrapperProto* release_huge_data_prize();
  inline void set_allocated_huge_data_prize(::app::message::GoodsWrapperProto* huge_data_prize);

  // @@protoc_insertion_point(class_scope:app.message.HugeDataProto)
 private:
  inline void set_has_total_login_day();
  inline void clear_has_total_login_day();
  inline void set_has_total_login_time();
  inline void clear_has_total_login_time();
  inline void set_has_fighting_amount();
  inline void clear_has_fighting_amount();
  inline void set_has_total_auction_yuanbao();
  inline void clear_has_total_auction_yuanbao();
  inline void set_has_total_long_cheng();
  inline void clear_has_total_long_cheng();
  inline void set_has_total_wu_shuang();
  inline void clear_has_total_wu_shuang();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_enemy_num();
  inline void clear_has_enemy_num();
  inline void set_has_total_ling_di();
  inline void clear_has_total_ling_di();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_huge_data_prize();
  inline void clear_has_huge_data_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 total_login_day_;
  ::google::protobuf::int32 total_login_time_;
  ::google::protobuf::int32 fighting_amount_;
  ::google::protobuf::int32 total_auction_yuanbao_;
  ::google::protobuf::int32 total_long_cheng_;
  ::google::protobuf::int32 total_wu_shuang_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 enemy_num_;
  ::google::protobuf::int64 create_time_;
  ::app::message::GoodsWrapperProto* huge_data_prize_;
  ::google::protobuf::int32 total_ling_di_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HugeDataProto* default_instance_;
};
// -------------------------------------------------------------------

class NiDaoQianKunClient : public ::google::protobuf::Message {
 public:
  NiDaoQianKunClient();
  virtual ~NiDaoQianKunClient();

  NiDaoQianKunClient(const NiDaoQianKunClient& from);

  inline NiDaoQianKunClient& operator=(const NiDaoQianKunClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NiDaoQianKunClient& default_instance();

  void Swap(NiDaoQianKunClient* other);

  // implements Message ----------------------------------------------

  NiDaoQianKunClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NiDaoQianKunClient& from);
  void MergeFrom(const NiDaoQianKunClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.SpriteStatProto sprite_stat = 1;
  inline bool has_sprite_stat() const;
  inline void clear_sprite_stat();
  static const int kSpriteStatFieldNumber = 1;
  inline const ::app::message::SpriteStatProto& sprite_stat() const;
  inline ::app::message::SpriteStatProto* mutable_sprite_stat();
  inline ::app::message::SpriteStatProto* release_sprite_stat();
  inline void set_allocated_sprite_stat(::app::message::SpriteStatProto* sprite_stat);

  // optional int32 total_use_count = 2;
  inline bool has_total_use_count() const;
  inline void clear_total_use_count();
  static const int kTotalUseCountFieldNumber = 2;
  inline ::google::protobuf::int32 total_use_count() const;
  inline void set_total_use_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.NiDaoQianKunClient)
 private:
  inline void set_has_sprite_stat();
  inline void clear_has_sprite_stat();
  inline void set_has_total_use_count();
  inline void clear_has_total_use_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::SpriteStatProto* sprite_stat_;
  ::google::protobuf::int32 total_use_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static NiDaoQianKunClient* default_instance_;
};
// -------------------------------------------------------------------

class MoBingProto : public ::google::protobuf::Message {
 public:
  MoBingProto();
  virtual ~MoBingProto();

  MoBingProto(const MoBingProto& from);

  inline MoBingProto& operator=(const MoBingProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoBingProto& default_instance();

  void Swap(MoBingProto* other);

  // implements Message ----------------------------------------------

  MoBingProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoBingProto& from);
  void MergeFrom(const MoBingProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.MoBingStatProto mo_bing_stat = 1;
  inline int mo_bing_stat_size() const;
  inline void clear_mo_bing_stat();
  static const int kMoBingStatFieldNumber = 1;
  inline const ::app::message::MoBingStatProto& mo_bing_stat(int index) const;
  inline ::app::message::MoBingStatProto* mutable_mo_bing_stat(int index);
  inline ::app::message::MoBingStatProto* add_mo_bing_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::MoBingStatProto >&
      mo_bing_stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::MoBingStatProto >*
      mutable_mo_bing_stat();

  // repeated int32 mo_bing_equip_type = 2;
  inline int mo_bing_equip_type_size() const;
  inline void clear_mo_bing_equip_type();
  static const int kMoBingEquipTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mo_bing_equip_type(int index) const;
  inline void set_mo_bing_equip_type(int index, ::google::protobuf::int32 value);
  inline void add_mo_bing_equip_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_bing_equip_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_bing_equip_type();

  // optional int32 spell_point = 3;
  inline bool has_spell_point() const;
  inline void clear_spell_point();
  static const int kSpellPointFieldNumber = 3;
  inline ::google::protobuf::int32 spell_point() const;
  inline void set_spell_point(::google::protobuf::int32 value);

  // optional int64 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::int64 end_time() const;
  inline void set_end_time(::google::protobuf::int64 value);

  // optional bool has_collect_prize_today = 6;
  inline bool has_has_collect_prize_today() const;
  inline void clear_has_collect_prize_today();
  static const int kHasCollectPrizeTodayFieldNumber = 6;
  inline bool has_collect_prize_today() const;
  inline void set_has_collect_prize_today(bool value);

  // @@protoc_insertion_point(class_scope:app.message.MoBingProto)
 private:
  inline void set_has_spell_point();
  inline void clear_has_spell_point();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_has_collect_prize_today();
  inline void clear_has_has_collect_prize_today();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::MoBingStatProto > mo_bing_stat_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_bing_equip_type_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int32 spell_point_;
  bool has_collect_prize_today_;
  ::google::protobuf::int64 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MoBingProto* default_instance_;
};
// -------------------------------------------------------------------

class MoBingStatProto : public ::google::protobuf::Message {
 public:
  MoBingStatProto();
  virtual ~MoBingStatProto();

  MoBingStatProto(const MoBingStatProto& from);

  inline MoBingStatProto& operator=(const MoBingStatProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoBingStatProto& default_instance();

  void Swap(MoBingStatProto* other);

  // implements Message ----------------------------------------------

  MoBingStatProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoBingStatProto& from);
  void MergeFrom(const MoBingStatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated int32 spell_type = 3;
  inline int spell_type_size() const;
  inline void clear_spell_type();
  static const int kSpellTypeFieldNumber = 3;
  inline ::google::protobuf::int32 spell_type(int index) const;
  inline void set_spell_type(int index, ::google::protobuf::int32 value);
  inline void add_spell_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_type();

  // repeated int32 spell_level = 4;
  inline int spell_level_size() const;
  inline void clear_spell_level();
  static const int kSpellLevelFieldNumber = 4;
  inline ::google::protobuf::int32 spell_level(int index) const;
  inline void set_spell_level(int index, ::google::protobuf::int32 value);
  inline void add_spell_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_level();

  // optional .app.message.MoBingBlessProto bless_proto = 5;
  inline bool has_bless_proto() const;
  inline void clear_bless_proto();
  static const int kBlessProtoFieldNumber = 5;
  inline const ::app::message::MoBingBlessProto& bless_proto() const;
  inline ::app::message::MoBingBlessProto* mutable_bless_proto();
  inline ::app::message::MoBingBlessProto* release_bless_proto();
  inline void set_allocated_bless_proto(::app::message::MoBingBlessProto* bless_proto);

  // @@protoc_insertion_point(class_scope:app.message.MoBingStatProto)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_bless_proto();
  inline void clear_has_bless_proto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_level_;
  ::app::message::MoBingBlessProto* bless_proto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MoBingStatProto* default_instance_;
};
// -------------------------------------------------------------------

class MoBingBlessProto : public ::google::protobuf::Message {
 public:
  MoBingBlessProto();
  virtual ~MoBingBlessProto();

  MoBingBlessProto(const MoBingBlessProto& from);

  inline MoBingBlessProto& operator=(const MoBingBlessProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoBingBlessProto& default_instance();

  void Swap(MoBingBlessProto* other);

  // implements Message ----------------------------------------------

  MoBingBlessProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoBingBlessProto& from);
  void MergeFrom(const MoBingBlessProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 upgrade_times = 1;
  inline bool has_upgrade_times() const;
  inline void clear_upgrade_times();
  static const int kUpgradeTimesFieldNumber = 1;
  inline ::google::protobuf::int32 upgrade_times() const;
  inline void set_upgrade_times(::google::protobuf::int32 value);

  // optional int32 bless_amount = 2;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 2;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 3;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 3;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 bless_his_max_amount = 4;
  inline bool has_bless_his_max_amount() const;
  inline void clear_bless_his_max_amount();
  static const int kBlessHisMaxAmountFieldNumber = 4;
  inline ::google::protobuf::int32 bless_his_max_amount() const;
  inline void set_bless_his_max_amount(::google::protobuf::int32 value);

  // optional int32 add_bless_clear_time_count = 5;
  inline bool has_add_bless_clear_time_count() const;
  inline void clear_add_bless_clear_time_count();
  static const int kAddBlessClearTimeCountFieldNumber = 5;
  inline ::google::protobuf::int32 add_bless_clear_time_count() const;
  inline void set_add_bless_clear_time_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MoBingBlessProto)
 private:
  inline void set_has_upgrade_times();
  inline void clear_has_upgrade_times();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_bless_his_max_amount();
  inline void clear_has_bless_his_max_amount();
  inline void set_has_add_bless_clear_time_count();
  inline void clear_has_add_bless_clear_time_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 upgrade_times_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_his_max_amount_;
  ::google::protobuf::int32 add_bless_clear_time_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MoBingBlessProto* default_instance_;
};
// -------------------------------------------------------------------

class DaoShiProto : public ::google::protobuf::Message {
 public:
  DaoShiProto();
  virtual ~DaoShiProto();

  DaoShiProto(const DaoShiProto& from);

  inline DaoShiProto& operator=(const DaoShiProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DaoShiProto& default_instance();

  void Swap(DaoShiProto* other);

  // implements Message ----------------------------------------------

  DaoShiProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DaoShiProto& from);
  void MergeFrom(const DaoShiProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes redis_big_key = 1;
  inline bool has_redis_big_key() const;
  inline void clear_redis_big_key();
  static const int kRedisBigKeyFieldNumber = 1;
  inline const ::std::string& redis_big_key() const;
  inline void set_redis_big_key(const ::std::string& value);
  inline void set_redis_big_key(const char* value);
  inline void set_redis_big_key(const void* value, size_t size);
  inline ::std::string* mutable_redis_big_key();
  inline ::std::string* release_redis_big_key();
  inline void set_allocated_redis_big_key(::std::string* redis_big_key);

  // optional bool has_applied = 2;
  inline bool has_has_applied() const;
  inline void clear_has_applied();
  static const int kHasAppliedFieldNumber = 2;
  inline bool has_applied() const;
  inline void set_has_applied(bool value);

  // optional bool is_dao_shi = 3;
  inline bool has_is_dao_shi() const;
  inline void clear_is_dao_shi();
  static const int kIsDaoShiFieldNumber = 3;
  inline bool is_dao_shi() const;
  inline void set_is_dao_shi(bool value);

  // optional int32 login_days = 4;
  inline bool has_login_days() const;
  inline void clear_login_days();
  static const int kLoginDaysFieldNumber = 4;
  inline ::google::protobuf::int32 login_days() const;
  inline void set_login_days(::google::protobuf::int32 value);

  // optional bool has_collected_login_prize = 5;
  inline bool has_has_collected_login_prize() const;
  inline void clear_has_collected_login_prize();
  static const int kHasCollectedLoginPrizeFieldNumber = 5;
  inline bool has_collected_login_prize() const;
  inline void set_has_collected_login_prize(bool value);

  // optional bool can_collect_wu_shuang_city_prize = 6;
  inline bool has_can_collect_wu_shuang_city_prize() const;
  inline void clear_can_collect_wu_shuang_city_prize();
  static const int kCanCollectWuShuangCityPrizeFieldNumber = 6;
  inline bool can_collect_wu_shuang_city_prize() const;
  inline void set_can_collect_wu_shuang_city_prize(bool value);

  // optional bool has_collected_wu_shuang_city_prize = 7;
  inline bool has_has_collected_wu_shuang_city_prize() const;
  inline void clear_has_collected_wu_shuang_city_prize();
  static const int kHasCollectedWuShuangCityPrizeFieldNumber = 7;
  inline bool has_collected_wu_shuang_city_prize() const;
  inline void set_has_collected_wu_shuang_city_prize(bool value);

  // optional bool can_collect_long_city_prize = 8;
  inline bool has_can_collect_long_city_prize() const;
  inline void clear_can_collect_long_city_prize();
  static const int kCanCollectLongCityPrizeFieldNumber = 8;
  inline bool can_collect_long_city_prize() const;
  inline void set_can_collect_long_city_prize(bool value);

  // optional bool has_collected_long_city_prize = 9;
  inline bool has_has_collected_long_city_prize() const;
  inline void clear_has_collected_long_city_prize();
  static const int kHasCollectedLongCityPrizeFieldNumber = 9;
  inline bool has_collected_long_city_prize() const;
  inline void set_has_collected_long_city_prize(bool value);

  // @@protoc_insertion_point(class_scope:app.message.DaoShiProto)
 private:
  inline void set_has_redis_big_key();
  inline void clear_has_redis_big_key();
  inline void set_has_has_applied();
  inline void clear_has_has_applied();
  inline void set_has_is_dao_shi();
  inline void clear_has_is_dao_shi();
  inline void set_has_login_days();
  inline void clear_has_login_days();
  inline void set_has_has_collected_login_prize();
  inline void clear_has_has_collected_login_prize();
  inline void set_has_can_collect_wu_shuang_city_prize();
  inline void clear_has_can_collect_wu_shuang_city_prize();
  inline void set_has_has_collected_wu_shuang_city_prize();
  inline void clear_has_has_collected_wu_shuang_city_prize();
  inline void set_has_can_collect_long_city_prize();
  inline void clear_has_can_collect_long_city_prize();
  inline void set_has_has_collected_long_city_prize();
  inline void clear_has_has_collected_long_city_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* redis_big_key_;
  ::google::protobuf::int32 login_days_;
  bool has_applied_;
  bool is_dao_shi_;
  bool has_collected_login_prize_;
  bool can_collect_wu_shuang_city_prize_;
  bool has_collected_wu_shuang_city_prize_;
  bool can_collect_long_city_prize_;
  bool has_collected_long_city_prize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static DaoShiProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroJingJieProto : public ::google::protobuf::Message {
 public:
  HeroJingJieProto();
  virtual ~HeroJingJieProto();

  HeroJingJieProto(const HeroJingJieProto& from);

  inline HeroJingJieProto& operator=(const HeroJingJieProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroJingJieProto& default_instance();

  void Swap(HeroJingJieProto* other);

  // implements Message ----------------------------------------------

  HeroJingJieProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroJingJieProto& from);
  void MergeFrom(const HeroJingJieProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.HeroJingJieDataProto jing_jie = 1;
  inline int jing_jie_size() const;
  inline void clear_jing_jie();
  static const int kJingJieFieldNumber = 1;
  inline const ::app::message::HeroJingJieDataProto& jing_jie(int index) const;
  inline ::app::message::HeroJingJieDataProto* mutable_jing_jie(int index);
  inline ::app::message::HeroJingJieDataProto* add_jing_jie();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::HeroJingJieDataProto >&
      jing_jie() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::HeroJingJieDataProto >*
      mutable_jing_jie();

  // @@protoc_insertion_point(class_scope:app.message.HeroJingJieProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::HeroJingJieDataProto > jing_jie_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroJingJieProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroJingJieDataProto : public ::google::protobuf::Message {
 public:
  HeroJingJieDataProto();
  virtual ~HeroJingJieDataProto();

  HeroJingJieDataProto(const HeroJingJieDataProto& from);

  inline HeroJingJieDataProto& operator=(const HeroJingJieDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroJingJieDataProto& default_instance();

  void Swap(HeroJingJieDataProto* other);

  // implements Message ----------------------------------------------

  HeroJingJieDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroJingJieDataProto& from);
  void MergeFrom(const HeroJingJieDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 jing_jie_id = 1;
  inline bool has_jing_jie_id() const;
  inline void clear_jing_jie_id();
  static const int kJingJieIdFieldNumber = 1;
  inline ::google::protobuf::int32 jing_jie_id() const;
  inline void set_jing_jie_id(::google::protobuf::int32 value);

  // optional int32 jing_jie_big_level = 2;
  inline bool has_jing_jie_big_level() const;
  inline void clear_jing_jie_big_level();
  static const int kJingJieBigLevelFieldNumber = 2;
  inline ::google::protobuf::int32 jing_jie_big_level() const;
  inline void set_jing_jie_big_level(::google::protobuf::int32 value);

  // optional int32 jing_jie_small_level = 3;
  inline bool has_jing_jie_small_level() const;
  inline void clear_jing_jie_small_level();
  static const int kJingJieSmallLevelFieldNumber = 3;
  inline ::google::protobuf::int32 jing_jie_small_level() const;
  inline void set_jing_jie_small_level(::google::protobuf::int32 value);

  // optional int32 today_collect_long_yuan_count = 4;
  inline bool has_today_collect_long_yuan_count() const;
  inline void clear_today_collect_long_yuan_count();
  static const int kTodayCollectLongYuanCountFieldNumber = 4;
  inline ::google::protobuf::int32 today_collect_long_yuan_count() const;
  inline void set_today_collect_long_yuan_count(::google::protobuf::int32 value);

  // optional int64 next_collect_long_yuan_time = 5;
  inline bool has_next_collect_long_yuan_time() const;
  inline void clear_next_collect_long_yuan_time();
  static const int kNextCollectLongYuanTimeFieldNumber = 5;
  inline ::google::protobuf::int64 next_collect_long_yuan_time() const;
  inline void set_next_collect_long_yuan_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroJingJieDataProto)
 private:
  inline void set_has_jing_jie_id();
  inline void clear_has_jing_jie_id();
  inline void set_has_jing_jie_big_level();
  inline void clear_has_jing_jie_big_level();
  inline void set_has_jing_jie_small_level();
  inline void clear_has_jing_jie_small_level();
  inline void set_has_today_collect_long_yuan_count();
  inline void clear_has_today_collect_long_yuan_count();
  inline void set_has_next_collect_long_yuan_time();
  inline void clear_has_next_collect_long_yuan_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 jing_jie_id_;
  ::google::protobuf::int32 jing_jie_big_level_;
  ::google::protobuf::int32 jing_jie_small_level_;
  ::google::protobuf::int32 today_collect_long_yuan_count_;
  ::google::protobuf::int64 next_collect_long_yuan_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroJingJieDataProto* default_instance_;
};
// -------------------------------------------------------------------

class GuildDungeonCollectedPrizeProto : public ::google::protobuf::Message {
 public:
  GuildDungeonCollectedPrizeProto();
  virtual ~GuildDungeonCollectedPrizeProto();

  GuildDungeonCollectedPrizeProto(const GuildDungeonCollectedPrizeProto& from);

  inline GuildDungeonCollectedPrizeProto& operator=(const GuildDungeonCollectedPrizeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildDungeonCollectedPrizeProto& default_instance();

  void Swap(GuildDungeonCollectedPrizeProto* other);

  // implements Message ----------------------------------------------

  GuildDungeonCollectedPrizeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildDungeonCollectedPrizeProto& from);
  void MergeFrom(const GuildDungeonCollectedPrizeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 expire_time = 1;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 1;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // repeated int32 collected_prize = 2;
  inline int collected_prize_size() const;
  inline void clear_collected_prize();
  static const int kCollectedPrizeFieldNumber = 2;
  inline ::google::protobuf::int32 collected_prize(int index) const;
  inline void set_collected_prize(int index, ::google::protobuf::int32 value);
  inline void add_collected_prize(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      collected_prize() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_collected_prize();

  // @@protoc_insertion_point(class_scope:app.message.GuildDungeonCollectedPrizeProto)
 private:
  inline void set_has_expire_time();
  inline void clear_has_expire_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expire_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > collected_prize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static GuildDungeonCollectedPrizeProto* default_instance_;
};
// -------------------------------------------------------------------

class ShouCangProto : public ::google::protobuf::Message {
 public:
  ShouCangProto();
  virtual ~ShouCangProto();

  ShouCangProto(const ShouCangProto& from);

  inline ShouCangProto& operator=(const ShouCangProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShouCangProto& default_instance();

  void Swap(ShouCangProto* other);

  // implements Message ----------------------------------------------

  ShouCangProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShouCangProto& from);
  void MergeFrom(const ShouCangProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 type = 1;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type(int index) const;
  inline void set_type(int index, ::google::protobuf::int32 value);
  inline void add_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_type();

  // repeated int32 level = 2;
  inline int level_size() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level(int index) const;
  inline void set_level(int index, ::google::protobuf::int32 value);
  inline void add_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_level();

  // @@protoc_insertion_point(class_scope:app.message.ShouCangProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ShouCangProto* default_instance_;
};
// -------------------------------------------------------------------

class AchievementProto : public ::google::protobuf::Message {
 public:
  AchievementProto();
  virtual ~AchievementProto();

  AchievementProto(const AchievementProto& from);

  inline AchievementProto& operator=(const AchievementProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementProto& default_instance();

  void Swap(AchievementProto* other);

  // implements Message ----------------------------------------------

  AchievementProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementProto& from);
  void MergeFrom(const AchievementProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 achieved_type = 1;
  inline bool has_achieved_type() const;
  inline void clear_achieved_type();
  static const int kAchievedTypeFieldNumber = 1;
  inline ::google::protobuf::int32 achieved_type() const;
  inline void set_achieved_type(::google::protobuf::int32 value);

  // optional int32 achieved_id = 2;
  inline bool has_achieved_id() const;
  inline void clear_achieved_id();
  static const int kAchievedIdFieldNumber = 2;
  inline ::google::protobuf::int32 achieved_id() const;
  inline void set_achieved_id(::google::protobuf::int32 value);

  // optional int32 progress = 3;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  inline ::google::protobuf::int32 progress() const;
  inline void set_progress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.AchievementProto)
 private:
  inline void set_has_achieved_type();
  inline void clear_has_achieved_type();
  inline void set_has_achieved_id();
  inline void clear_has_achieved_id();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 achieved_type_;
  ::google::protobuf::int32 achieved_id_;
  ::google::protobuf::int32 progress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static AchievementProto* default_instance_;
};
// -------------------------------------------------------------------

class AchievementInfoProto : public ::google::protobuf::Message {
 public:
  AchievementInfoProto();
  virtual ~AchievementInfoProto();

  AchievementInfoProto(const AchievementInfoProto& from);

  inline AchievementInfoProto& operator=(const AchievementInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementInfoProto& default_instance();

  void Swap(AchievementInfoProto* other);

  // implements Message ----------------------------------------------

  AchievementInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementInfoProto& from);
  void MergeFrom(const AchievementInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.AchievementProto achieved = 1;
  inline int achieved_size() const;
  inline void clear_achieved();
  static const int kAchievedFieldNumber = 1;
  inline const ::app::message::AchievementProto& achieved(int index) const;
  inline ::app::message::AchievementProto* mutable_achieved(int index);
  inline ::app::message::AchievementProto* add_achieved();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::AchievementProto >&
      achieved() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::AchievementProto >*
      mutable_achieved();

  // optional int32 achievement_points = 2;
  inline bool has_achievement_points() const;
  inline void clear_achievement_points();
  static const int kAchievementPointsFieldNumber = 2;
  inline ::google::protobuf::int32 achievement_points() const;
  inline void set_achievement_points(::google::protobuf::int32 value);

  // repeated int32 nickname_id = 21;
  inline int nickname_id_size() const;
  inline void clear_nickname_id();
  static const int kNicknameIdFieldNumber = 21;
  inline ::google::protobuf::int32 nickname_id(int index) const;
  inline void set_nickname_id(int index, ::google::protobuf::int32 value);
  inline void add_nickname_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nickname_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nickname_id();

  // optional int32 using_nickname = 22;
  inline bool has_using_nickname() const;
  inline void clear_using_nickname();
  static const int kUsingNicknameFieldNumber = 22;
  inline ::google::protobuf::int32 using_nickname() const;
  inline void set_using_nickname(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.AchievementInfoProto)
 private:
  inline void set_has_achievement_points();
  inline void clear_has_achievement_points();
  inline void set_has_using_nickname();
  inline void clear_has_using_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::AchievementProto > achieved_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nickname_id_;
  ::google::protobuf::int32 achievement_points_;
  ::google::protobuf::int32 using_nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static AchievementInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroSuperArmProto : public ::google::protobuf::Message {
 public:
  HeroSuperArmProto();
  virtual ~HeroSuperArmProto();

  HeroSuperArmProto(const HeroSuperArmProto& from);

  inline HeroSuperArmProto& operator=(const HeroSuperArmProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroSuperArmProto& default_instance();

  void Swap(HeroSuperArmProto* other);

  // implements Message ----------------------------------------------

  HeroSuperArmProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroSuperArmProto& from);
  void MergeFrom(const HeroSuperArmProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 resource = 5;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 5;
  inline ::google::protobuf::int32 resource() const;
  inline void set_resource(::google::protobuf::int32 value);

  // optional int32 bless_amount = 10;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 10;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 11;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 11;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // repeated int32 spell_pos = 12;
  inline int spell_pos_size() const;
  inline void clear_spell_pos();
  static const int kSpellPosFieldNumber = 12;
  inline ::google::protobuf::int32 spell_pos(int index) const;
  inline void set_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_pos();

  // repeated .app.message.ActiveSpell spells = 13;
  inline int spells_size() const;
  inline void clear_spells();
  static const int kSpellsFieldNumber = 13;
  inline const ::app::message::ActiveSpell& spells(int index) const;
  inline ::app::message::ActiveSpell* mutable_spells(int index);
  inline ::app::message::ActiveSpell* add_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_spells();

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional bool is_hide_huan_hua = 24;
  inline bool has_is_hide_huan_hua() const;
  inline void clear_is_hide_huan_hua();
  static const int kIsHideHuanHuaFieldNumber = 24;
  inline bool is_hide_huan_hua() const;
  inline void set_is_hide_huan_hua(bool value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroSuperArmProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_is_hide_huan_hua();
  inline void clear_has_is_hide_huan_hua();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 resource_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > spells_;
  ::google::protobuf::int32 huan_hua_use_count_;
  bool is_hide_huan_hua_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroSuperArmProto* default_instance_;
};
// -------------------------------------------------------------------

class PetProto : public ::google::protobuf::Message {
 public:
  PetProto();
  virtual ~PetProto();

  PetProto(const PetProto& from);

  inline PetProto& operator=(const PetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetProto& default_instance();

  void Swap(PetProto* other);

  // implements Message ----------------------------------------------

  PetProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetProto& from);
  void MergeFrom(const PetProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.PetLevelProto data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::app::message::PetLevelProto& data() const;
  inline ::app::message::PetLevelProto* mutable_data();
  inline ::app::message::PetLevelProto* release_data();
  inline void set_allocated_data(::app::message::PetLevelProto* data);

  // optional int32 added_max_life = 2;
  inline bool has_added_max_life() const;
  inline void clear_added_max_life();
  static const int kAddedMaxLifeFieldNumber = 2;
  inline ::google::protobuf::int32 added_max_life() const;
  inline void set_added_max_life(::google::protobuf::int32 value);

  // optional int32 added_attack = 3;
  inline bool has_added_attack() const;
  inline void clear_added_attack();
  static const int kAddedAttackFieldNumber = 3;
  inline ::google::protobuf::int32 added_attack() const;
  inline void set_added_attack(::google::protobuf::int32 value);

  // optional int32 added_defence = 4;
  inline bool has_added_defence() const;
  inline void clear_added_defence();
  static const int kAddedDefenceFieldNumber = 4;
  inline ::google::protobuf::int32 added_defence() const;
  inline void set_added_defence(::google::protobuf::int32 value);

  // optional int64 expire_time = 5;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 5;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // repeated int32 equipment_pos = 6;
  inline int equipment_pos_size() const;
  inline void clear_equipment_pos();
  static const int kEquipmentPosFieldNumber = 6;
  inline ::google::protobuf::int32 equipment_pos(int index) const;
  inline void set_equipment_pos(int index, ::google::protobuf::int32 value);
  inline void add_equipment_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equipment_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equipment_pos();

  // repeated bytes equipment_static_data = 7;
  inline int equipment_static_data_size() const;
  inline void clear_equipment_static_data();
  static const int kEquipmentStaticDataFieldNumber = 7;
  inline const ::std::string& equipment_static_data(int index) const;
  inline ::std::string* mutable_equipment_static_data(int index);
  inline void set_equipment_static_data(int index, const ::std::string& value);
  inline void set_equipment_static_data(int index, const char* value);
  inline void set_equipment_static_data(int index, const void* value, size_t size);
  inline ::std::string* add_equipment_static_data();
  inline void add_equipment_static_data(const ::std::string& value);
  inline void add_equipment_static_data(const char* value);
  inline void add_equipment_static_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& equipment_static_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_equipment_static_data();

  // repeated bytes equipment_dynamic_data = 8;
  inline int equipment_dynamic_data_size() const;
  inline void clear_equipment_dynamic_data();
  static const int kEquipmentDynamicDataFieldNumber = 8;
  inline const ::std::string& equipment_dynamic_data(int index) const;
  inline ::std::string* mutable_equipment_dynamic_data(int index);
  inline void set_equipment_dynamic_data(int index, const ::std::string& value);
  inline void set_equipment_dynamic_data(int index, const char* value);
  inline void set_equipment_dynamic_data(int index, const void* value, size_t size);
  inline ::std::string* add_equipment_dynamic_data();
  inline void add_equipment_dynamic_data(const ::std::string& value);
  inline void add_equipment_dynamic_data(const char* value);
  inline void add_equipment_dynamic_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& equipment_dynamic_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_equipment_dynamic_data();

  // optional int32 monster = 20 [deprecated = true];
  inline bool has_monster() const PROTOBUF_DEPRECATED;
  inline void clear_monster() PROTOBUF_DEPRECATED;
  static const int kMonsterFieldNumber = 20;
  inline ::google::protobuf::int32 monster() const PROTOBUF_DEPRECATED;
  inline void set_monster(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int64 relive_time = 21;
  inline bool has_relive_time() const;
  inline void clear_relive_time();
  static const int kReliveTimeFieldNumber = 21;
  inline ::google::protobuf::int64 relive_time() const;
  inline void set_relive_time(::google::protobuf::int64 value);

  // repeated int32 spell_pos = 30;
  inline int spell_pos_size() const;
  inline void clear_spell_pos();
  static const int kSpellPosFieldNumber = 30;
  inline ::google::protobuf::int32 spell_pos(int index) const;
  inline void set_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_pos();

  // repeated .app.message.ActiveSpell spells = 31;
  inline int spells_size() const;
  inline void clear_spells();
  static const int kSpellsFieldNumber = 31;
  inline const ::app::message::ActiveSpell& spells(int index) const;
  inline ::app::message::ActiveSpell* mutable_spells(int index);
  inline ::app::message::ActiveSpell* add_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_spells();

  // optional int32 use_zizhidan_count = 32;
  inline bool has_use_zizhidan_count() const;
  inline void clear_use_zizhidan_count();
  static const int kUseZizhidanCountFieldNumber = 32;
  inline ::google::protobuf::int32 use_zizhidan_count() const;
  inline void set_use_zizhidan_count(::google::protobuf::int32 value);

  // optional int32 use_meirenzhixin_count = 33;
  inline bool has_use_meirenzhixin_count() const;
  inline void clear_use_meirenzhixin_count();
  static const int kUseMeirenzhixinCountFieldNumber = 33;
  inline ::google::protobuf::int32 use_meirenzhixin_count() const;
  inline void set_use_meirenzhixin_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PetProto)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_added_max_life();
  inline void clear_has_added_max_life();
  inline void set_has_added_attack();
  inline void clear_has_added_attack();
  inline void set_has_added_defence();
  inline void clear_has_added_defence();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_monster();
  inline void clear_has_monster();
  inline void set_has_relive_time();
  inline void clear_has_relive_time();
  inline void set_has_use_zizhidan_count();
  inline void clear_has_use_zizhidan_count();
  inline void set_has_use_meirenzhixin_count();
  inline void clear_has_use_meirenzhixin_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::PetLevelProto* data_;
  ::google::protobuf::int32 added_max_life_;
  ::google::protobuf::int32 added_attack_;
  ::google::protobuf::int64 expire_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equipment_pos_;
  ::google::protobuf::int32 added_defence_;
  ::google::protobuf::int32 monster_;
  ::google::protobuf::RepeatedPtrField< ::std::string> equipment_static_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> equipment_dynamic_data_;
  ::google::protobuf::int64 relive_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > spells_;
  ::google::protobuf::int32 use_zizhidan_count_;
  ::google::protobuf::int32 use_meirenzhixin_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static PetProto* default_instance_;
};
// -------------------------------------------------------------------

class PetLevelProto : public ::google::protobuf::Message {
 public:
  PetLevelProto();
  virtual ~PetLevelProto();

  PetLevelProto(const PetLevelProto& from);

  inline PetLevelProto& operator=(const PetLevelProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetLevelProto& default_instance();

  void Swap(PetLevelProto* other);

  // implements Message ----------------------------------------------

  PetLevelProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetLevelProto& from);
  void MergeFrom(const PetLevelProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 default_added_max_life = 2;
  inline bool has_default_added_max_life() const;
  inline void clear_default_added_max_life();
  static const int kDefaultAddedMaxLifeFieldNumber = 2;
  inline ::google::protobuf::int64 default_added_max_life() const;
  inline void set_default_added_max_life(::google::protobuf::int64 value);

  // optional int32 default_added_attack = 3;
  inline bool has_default_added_attack() const;
  inline void clear_default_added_attack();
  static const int kDefaultAddedAttackFieldNumber = 3;
  inline ::google::protobuf::int32 default_added_attack() const;
  inline void set_default_added_attack(::google::protobuf::int32 value);

  // optional int32 default_added_defence = 4;
  inline bool has_default_added_defence() const;
  inline void clear_default_added_defence();
  static const int kDefaultAddedDefenceFieldNumber = 4;
  inline ::google::protobuf::int32 default_added_defence() const;
  inline void set_default_added_defence(::google::protobuf::int32 value);

  // optional int32 max_added_max_life = 5;
  inline bool has_max_added_max_life() const;
  inline void clear_max_added_max_life();
  static const int kMaxAddedMaxLifeFieldNumber = 5;
  inline ::google::protobuf::int32 max_added_max_life() const;
  inline void set_max_added_max_life(::google::protobuf::int32 value);

  // optional int32 max_added_max_attack = 6;
  inline bool has_max_added_max_attack() const;
  inline void clear_max_added_max_attack();
  static const int kMaxAddedMaxAttackFieldNumber = 6;
  inline ::google::protobuf::int32 max_added_max_attack() const;
  inline void set_max_added_max_attack(::google::protobuf::int32 value);

  // optional int32 max_added_max_defence = 7;
  inline bool has_max_added_max_defence() const;
  inline void clear_max_added_max_defence();
  static const int kMaxAddedMaxDefenceFieldNumber = 7;
  inline ::google::protobuf::int32 max_added_max_defence() const;
  inline void set_max_added_max_defence(::google::protobuf::int32 value);

  // optional .app.message.SpriteStatProto fixed_stat = 8;
  inline bool has_fixed_stat() const;
  inline void clear_fixed_stat();
  static const int kFixedStatFieldNumber = 8;
  inline const ::app::message::SpriteStatProto& fixed_stat() const;
  inline ::app::message::SpriteStatProto* mutable_fixed_stat();
  inline ::app::message::SpriteStatProto* release_fixed_stat();
  inline void set_allocated_fixed_stat(::app::message::SpriteStatProto* fixed_stat);

  // optional .app.message.SpriteStatProto percent_stat = 9;
  inline bool has_percent_stat() const;
  inline void clear_percent_stat();
  static const int kPercentStatFieldNumber = 9;
  inline const ::app::message::SpriteStatProto& percent_stat() const;
  inline ::app::message::SpriteStatProto* mutable_percent_stat();
  inline ::app::message::SpriteStatProto* release_percent_stat();
  inline void set_allocated_percent_stat(::app::message::SpriteStatProto* percent_stat);

  // optional int32 static_hurt = 10;
  inline bool has_static_hurt() const;
  inline void clear_static_hurt();
  static const int kStaticHurtFieldNumber = 10;
  inline ::google::protobuf::int32 static_hurt() const;
  inline void set_static_hurt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.PetLevelProto)
 private:
  inline void set_has_default_added_max_life();
  inline void clear_has_default_added_max_life();
  inline void set_has_default_added_attack();
  inline void clear_has_default_added_attack();
  inline void set_has_default_added_defence();
  inline void clear_has_default_added_defence();
  inline void set_has_max_added_max_life();
  inline void clear_has_max_added_max_life();
  inline void set_has_max_added_max_attack();
  inline void clear_has_max_added_max_attack();
  inline void set_has_max_added_max_defence();
  inline void clear_has_max_added_max_defence();
  inline void set_has_fixed_stat();
  inline void clear_has_fixed_stat();
  inline void set_has_percent_stat();
  inline void clear_has_percent_stat();
  inline void set_has_static_hurt();
  inline void clear_has_static_hurt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 default_added_max_life_;
  ::google::protobuf::int32 default_added_attack_;
  ::google::protobuf::int32 default_added_defence_;
  ::google::protobuf::int32 max_added_max_life_;
  ::google::protobuf::int32 max_added_max_attack_;
  ::app::message::SpriteStatProto* fixed_stat_;
  ::google::protobuf::int32 max_added_max_defence_;
  ::google::protobuf::int32 static_hurt_;
  ::app::message::SpriteStatProto* percent_stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static PetLevelProto* default_instance_;
};
// -------------------------------------------------------------------

class DemonProto : public ::google::protobuf::Message {
 public:
  DemonProto();
  virtual ~DemonProto();

  DemonProto(const DemonProto& from);

  inline DemonProto& operator=(const DemonProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemonProto& default_instance();

  void Swap(DemonProto* other);

  // implements Message ----------------------------------------------

  DemonProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemonProto& from);
  void MergeFrom(const DemonProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.DemonConfigProto demon = 1;
  inline bool has_demon() const;
  inline void clear_demon();
  static const int kDemonFieldNumber = 1;
  inline const ::app::message::DemonConfigProto& demon() const;
  inline ::app::message::DemonConfigProto* mutable_demon();
  inline ::app::message::DemonConfigProto* release_demon();
  inline void set_allocated_demon(::app::message::DemonConfigProto* demon);

  // optional int32 bless_amount = 10;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 10;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 11;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 11;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional bool is_in_demon_state = 12;
  inline bool has_is_in_demon_state() const;
  inline void clear_is_in_demon_state();
  static const int kIsInDemonStateFieldNumber = 12;
  inline bool is_in_demon_state() const;
  inline void set_is_in_demon_state(bool value);

  // optional int64 next_can_turn_demon_time = 13;
  inline bool has_next_can_turn_demon_time() const;
  inline void clear_next_can_turn_demon_time();
  static const int kNextCanTurnDemonTimeFieldNumber = 13;
  inline ::google::protobuf::int64 next_can_turn_demon_time() const;
  inline void set_next_can_turn_demon_time(::google::protobuf::int64 value);

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional bool is_hide = 23;
  inline bool has_is_hide() const;
  inline void clear_is_hide();
  static const int kIsHideFieldNumber = 23;
  inline bool is_hide() const;
  inline void set_is_hide(bool value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.DemonProto)
 private:
  inline void set_has_demon();
  inline void clear_has_demon();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_is_in_demon_state();
  inline void clear_has_is_in_demon_state();
  inline void set_has_next_can_turn_demon_time();
  inline void clear_has_next_can_turn_demon_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_is_hide();
  inline void clear_has_is_hide();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::DemonConfigProto* demon_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int64 next_can_turn_demon_time_;
  bool is_in_demon_state_;
  bool is_hide_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static DemonProto* default_instance_;
};
// -------------------------------------------------------------------

class TianZuiProto : public ::google::protobuf::Message {
 public:
  TianZuiProto();
  virtual ~TianZuiProto();

  TianZuiProto(const TianZuiProto& from);

  inline TianZuiProto& operator=(const TianZuiProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TianZuiProto& default_instance();

  void Swap(TianZuiProto* other);

  // implements Message ----------------------------------------------

  TianZuiProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TianZuiProto& from);
  void MergeFrom(const TianZuiProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 bless_amount = 10;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 10;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 11;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 11;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // repeated int32 spell_pos = 12;
  inline int spell_pos_size() const;
  inline void clear_spell_pos();
  static const int kSpellPosFieldNumber = 12;
  inline ::google::protobuf::int32 spell_pos(int index) const;
  inline void set_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_pos();

  // repeated .app.message.ActiveSpell spells = 13;
  inline int spells_size() const;
  inline void clear_spells();
  static const int kSpellsFieldNumber = 13;
  inline const ::app::message::ActiveSpell& spells(int index) const;
  inline ::app::message::ActiveSpell* mutable_spells(int index);
  inline ::app::message::ActiveSpell* add_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_spells();

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional bool is_hide_huan_hua = 24;
  inline bool has_is_hide_huan_hua() const;
  inline void clear_is_hide_huan_hua();
  static const int kIsHideHuanHuaFieldNumber = 24;
  inline bool is_hide_huan_hua() const;
  inline void set_is_hide_huan_hua(bool value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.TianZuiProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_is_hide_huan_hua();
  inline void clear_has_is_hide_huan_hua();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > spells_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  bool is_hide_huan_hua_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static TianZuiProto* default_instance_;
};
// -------------------------------------------------------------------

class TianJieProto : public ::google::protobuf::Message {
 public:
  TianJieProto();
  virtual ~TianJieProto();

  TianJieProto(const TianJieProto& from);

  inline TianJieProto& operator=(const TianJieProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TianJieProto& default_instance();

  void Swap(TianJieProto* other);

  // implements Message ----------------------------------------------

  TianJieProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TianJieProto& from);
  void MergeFrom(const TianJieProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 bless_amount = 10;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 10;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 11;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 11;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // repeated int32 spell_pos = 12;
  inline int spell_pos_size() const;
  inline void clear_spell_pos();
  static const int kSpellPosFieldNumber = 12;
  inline ::google::protobuf::int32 spell_pos(int index) const;
  inline void set_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_pos();

  // repeated .app.message.ActiveSpell spells = 13;
  inline int spells_size() const;
  inline void clear_spells();
  static const int kSpellsFieldNumber = 13;
  inline const ::app::message::ActiveSpell& spells(int index) const;
  inline ::app::message::ActiveSpell* mutable_spells(int index);
  inline ::app::message::ActiveSpell* add_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_spells();

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional bool is_hide_huan_hua = 24;
  inline bool has_is_hide_huan_hua() const;
  inline void clear_is_hide_huan_hua();
  static const int kIsHideHuanHuaFieldNumber = 24;
  inline bool is_hide_huan_hua() const;
  inline void set_is_hide_huan_hua(bool value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.TianJieProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_is_hide_huan_hua();
  inline void clear_has_is_hide_huan_hua();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > spells_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  bool is_hide_huan_hua_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static TianJieProto* default_instance_;
};
// -------------------------------------------------------------------

class BowProto : public ::google::protobuf::Message {
 public:
  BowProto();
  virtual ~BowProto();

  BowProto(const BowProto& from);

  inline BowProto& operator=(const BowProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BowProto& default_instance();

  void Swap(BowProto* other);

  // implements Message ----------------------------------------------

  BowProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BowProto& from);
  void MergeFrom(const BowProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bow = 1;
  inline bool has_bow() const;
  inline void clear_bow();
  static const int kBowFieldNumber = 1;
  inline ::google::protobuf::int32 bow() const;
  inline void set_bow(::google::protobuf::int32 value);

  // optional int32 arrow = 2;
  inline bool has_arrow() const;
  inline void clear_arrow();
  static const int kArrowFieldNumber = 2;
  inline ::google::protobuf::int32 arrow() const;
  inline void set_arrow(::google::protobuf::int32 value);

  // optional int32 bless_amount = 3;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 3;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 4;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 4;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 resource = 5;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 5;
  inline ::google::protobuf::int32 resource() const;
  inline void set_resource(::google::protobuf::int32 value);

  // optional int32 arrow_star = 20 [deprecated = true];
  inline bool has_arrow_star() const PROTOBUF_DEPRECATED;
  inline void clear_arrow_star() PROTOBUF_DEPRECATED;
  static const int kArrowStarFieldNumber = 20;
  inline ::google::protobuf::int32 arrow_star() const PROTOBUF_DEPRECATED;
  inline void set_arrow_star(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 arrow_exp = 21 [deprecated = true];
  inline bool has_arrow_exp() const PROTOBUF_DEPRECATED;
  inline void clear_arrow_exp() PROTOBUF_DEPRECATED;
  static const int kArrowExpFieldNumber = 21;
  inline ::google::protobuf::int32 arrow_exp() const PROTOBUF_DEPRECATED;
  inline void set_arrow_exp(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional bool is_hide_huan_hua = 24;
  inline bool has_is_hide_huan_hua() const;
  inline void clear_is_hide_huan_hua();
  static const int kIsHideHuanHuaFieldNumber = 24;
  inline bool is_hide_huan_hua() const;
  inline void set_is_hide_huan_hua(bool value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 qian_neng_use_count = 31;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 31;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 32;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 32;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.BowProto)
 private:
  inline void set_has_bow();
  inline void clear_has_bow();
  inline void set_has_arrow();
  inline void clear_has_arrow();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_arrow_star();
  inline void clear_has_arrow_star();
  inline void set_has_arrow_exp();
  inline void clear_has_arrow_exp();
  inline void set_has_is_hide_huan_hua();
  inline void clear_has_is_hide_huan_hua();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bow_;
  ::google::protobuf::int32 arrow_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int32 resource_;
  ::google::protobuf::int32 arrow_star_;
  ::google::protobuf::int32 arrow_exp_;
  bool is_hide_huan_hua_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static BowProto* default_instance_;
};
// -------------------------------------------------------------------

class CombineXinfaSpellProto : public ::google::protobuf::Message {
 public:
  CombineXinfaSpellProto();
  virtual ~CombineXinfaSpellProto();

  CombineXinfaSpellProto(const CombineXinfaSpellProto& from);

  inline CombineXinfaSpellProto& operator=(const CombineXinfaSpellProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CombineXinfaSpellProto& default_instance();

  void Swap(CombineXinfaSpellProto* other);

  // implements Message ----------------------------------------------

  CombineXinfaSpellProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CombineXinfaSpellProto& from);
  void MergeFrom(const CombineXinfaSpellProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.ActiveSpell active_spell = 1;
  inline bool has_active_spell() const;
  inline void clear_active_spell();
  static const int kActiveSpellFieldNumber = 1;
  inline const ::app::message::ActiveSpell& active_spell() const;
  inline ::app::message::ActiveSpell* mutable_active_spell();
  inline ::app::message::ActiveSpell* release_active_spell();
  inline void set_allocated_active_spell(::app::message::ActiveSpell* active_spell);

  // optional int32 used_times = 2;
  inline bool has_used_times() const;
  inline void clear_used_times();
  static const int kUsedTimesFieldNumber = 2;
  inline ::google::protobuf::int32 used_times() const;
  inline void set_used_times(::google::protobuf::int32 value);

  // optional bytes static_data = 3;
  inline bool has_static_data() const;
  inline void clear_static_data();
  static const int kStaticDataFieldNumber = 3;
  inline const ::std::string& static_data() const;
  inline void set_static_data(const ::std::string& value);
  inline void set_static_data(const char* value);
  inline void set_static_data(const void* value, size_t size);
  inline ::std::string* mutable_static_data();
  inline ::std::string* release_static_data();
  inline void set_allocated_static_data(::std::string* static_data);

  // optional bytes dynamic_data = 4;
  inline bool has_dynamic_data() const;
  inline void clear_dynamic_data();
  static const int kDynamicDataFieldNumber = 4;
  inline const ::std::string& dynamic_data() const;
  inline void set_dynamic_data(const ::std::string& value);
  inline void set_dynamic_data(const char* value);
  inline void set_dynamic_data(const void* value, size_t size);
  inline ::std::string* mutable_dynamic_data();
  inline ::std::string* release_dynamic_data();
  inline void set_allocated_dynamic_data(::std::string* dynamic_data);

  // @@protoc_insertion_point(class_scope:app.message.CombineXinfaSpellProto)
 private:
  inline void set_has_active_spell();
  inline void clear_has_active_spell();
  inline void set_has_used_times();
  inline void clear_has_used_times();
  inline void set_has_static_data();
  inline void clear_has_static_data();
  inline void set_has_dynamic_data();
  inline void clear_has_dynamic_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::ActiveSpell* active_spell_;
  ::std::string* static_data_;
  ::std::string* dynamic_data_;
  ::google::protobuf::int32 used_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static CombineXinfaSpellProto* default_instance_;
};
// -------------------------------------------------------------------

class FightingAmountProto : public ::google::protobuf::Message {
 public:
  FightingAmountProto();
  virtual ~FightingAmountProto();

  FightingAmountProto(const FightingAmountProto& from);

  inline FightingAmountProto& operator=(const FightingAmountProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightingAmountProto& default_instance();

  void Swap(FightingAmountProto* other);

  // implements Message ----------------------------------------------

  FightingAmountProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightingAmountProto& from);
  void MergeFrom(const FightingAmountProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 base_fighting_amount = 1;
  inline bool has_base_fighting_amount() const;
  inline void clear_base_fighting_amount();
  static const int kBaseFightingAmountFieldNumber = 1;
  inline ::google::protobuf::int32 base_fighting_amount() const;
  inline void set_base_fighting_amount(::google::protobuf::int32 value);

  // optional int32 equipment_fighting_amount = 2;
  inline bool has_equipment_fighting_amount() const;
  inline void clear_equipment_fighting_amount();
  static const int kEquipmentFightingAmountFieldNumber = 2;
  inline ::google::protobuf::int32 equipment_fighting_amount() const;
  inline void set_equipment_fighting_amount(::google::protobuf::int32 value);

  // optional int32 spell_fighting_amount = 3;
  inline bool has_spell_fighting_amount() const;
  inline void clear_spell_fighting_amount();
  static const int kSpellFightingAmountFieldNumber = 3;
  inline ::google::protobuf::int32 spell_fighting_amount() const;
  inline void set_spell_fighting_amount(::google::protobuf::int32 value);

  // optional int32 gem_fighting_amount = 4 [deprecated = true];
  inline bool has_gem_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_gem_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kGemFightingAmountFieldNumber = 4;
  inline ::google::protobuf::int32 gem_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_gem_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 mount_fighting_amount = 5;
  inline bool has_mount_fighting_amount() const;
  inline void clear_mount_fighting_amount();
  static const int kMountFightingAmountFieldNumber = 5;
  inline ::google::protobuf::int32 mount_fighting_amount() const;
  inline void set_mount_fighting_amount(::google::protobuf::int32 value);

  // optional int32 bow_fighting_amount = 6;
  inline bool has_bow_fighting_amount() const;
  inline void clear_bow_fighting_amount();
  static const int kBowFightingAmountFieldNumber = 6;
  inline ::google::protobuf::int32 bow_fighting_amount() const;
  inline void set_bow_fighting_amount(::google::protobuf::int32 value);

  // optional int32 super_weapon_fighting_amount = 7;
  inline bool has_super_weapon_fighting_amount() const;
  inline void clear_super_weapon_fighting_amount();
  static const int kSuperWeaponFightingAmountFieldNumber = 7;
  inline ::google::protobuf::int32 super_weapon_fighting_amount() const;
  inline void set_super_weapon_fighting_amount(::google::protobuf::int32 value);

  // optional int32 super_arm_fighting_amount = 8;
  inline bool has_super_arm_fighting_amount() const;
  inline void clear_super_arm_fighting_amount();
  static const int kSuperArmFightingAmountFieldNumber = 8;
  inline ::google::protobuf::int32 super_arm_fighting_amount() const;
  inline void set_super_arm_fighting_amount(::google::protobuf::int32 value);

  // optional int32 super_weapon_xinfa_fighting_amount = 9;
  inline bool has_super_weapon_xinfa_fighting_amount() const;
  inline void clear_super_weapon_xinfa_fighting_amount();
  static const int kSuperWeaponXinfaFightingAmountFieldNumber = 9;
  inline ::google::protobuf::int32 super_weapon_xinfa_fighting_amount() const;
  inline void set_super_weapon_xinfa_fighting_amount(::google::protobuf::int32 value);

  // optional int32 tianjie_fighting_amount = 10;
  inline bool has_tianjie_fighting_amount() const;
  inline void clear_tianjie_fighting_amount();
  static const int kTianjieFightingAmountFieldNumber = 10;
  inline ::google::protobuf::int32 tianjie_fighting_amount() const;
  inline void set_tianjie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 tianzui_fighting_amount = 11;
  inline bool has_tianzui_fighting_amount() const;
  inline void clear_tianzui_fighting_amount();
  static const int kTianzuiFightingAmountFieldNumber = 11;
  inline ::google::protobuf::int32 tianzui_fighting_amount() const;
  inline void set_tianzui_fighting_amount(::google::protobuf::int32 value);

  // optional int32 shou_cang_fighting_amount = 12;
  inline bool has_shou_cang_fighting_amount() const;
  inline void clear_shou_cang_fighting_amount();
  static const int kShouCangFightingAmountFieldNumber = 12;
  inline ::google::protobuf::int32 shou_cang_fighting_amount() const;
  inline void set_shou_cang_fighting_amount(::google::protobuf::int32 value);

  // optional int32 demon_fighting_amount = 13;
  inline bool has_demon_fighting_amount() const;
  inline void clear_demon_fighting_amount();
  static const int kDemonFightingAmountFieldNumber = 13;
  inline ::google::protobuf::int32 demon_fighting_amount() const;
  inline void set_demon_fighting_amount(::google::protobuf::int32 value);

  // optional int32 cloak_fighting_amount = 14;
  inline bool has_cloak_fighting_amount() const;
  inline void clear_cloak_fighting_amount();
  static const int kCloakFightingAmountFieldNumber = 14;
  inline ::google::protobuf::int32 cloak_fighting_amount() const;
  inline void set_cloak_fighting_amount(::google::protobuf::int32 value);

  // optional int32 pet_fighting_amount = 15;
  inline bool has_pet_fighting_amount() const;
  inline void clear_pet_fighting_amount();
  static const int kPetFightingAmountFieldNumber = 15;
  inline ::google::protobuf::int32 pet_fighting_amount() const;
  inline void set_pet_fighting_amount(::google::protobuf::int32 value);

  // optional int32 yitianshenjue_fighting_amount = 16;
  inline bool has_yitianshenjue_fighting_amount() const;
  inline void clear_yitianshenjue_fighting_amount();
  static const int kYitianshenjueFightingAmountFieldNumber = 16;
  inline ::google::protobuf::int32 yitianshenjue_fighting_amount() const;
  inline void set_yitianshenjue_fighting_amount(::google::protobuf::int32 value);

  // optional int32 moshi_fighting_amount = 17;
  inline bool has_moshi_fighting_amount() const;
  inline void clear_moshi_fighting_amount();
  static const int kMoshiFightingAmountFieldNumber = 17;
  inline ::google::protobuf::int32 moshi_fighting_amount() const;
  inline void set_moshi_fighting_amount(::google::protobuf::int32 value);

  // optional int32 qianqiudajie_fighting_amount = 18;
  inline bool has_qianqiudajie_fighting_amount() const;
  inline void clear_qianqiudajie_fighting_amount();
  static const int kQianqiudajieFightingAmountFieldNumber = 18;
  inline ::google::protobuf::int32 qianqiudajie_fighting_amount() const;
  inline void set_qianqiudajie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 jing_jie_fighting_amount = 19;
  inline bool has_jing_jie_fighting_amount() const;
  inline void clear_jing_jie_fighting_amount();
  static const int kJingJieFightingAmountFieldNumber = 19;
  inline ::google::protobuf::int32 jing_jie_fighting_amount() const;
  inline void set_jing_jie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 marriage_weapon_amount = 20;
  inline bool has_marriage_weapon_amount() const;
  inline void clear_marriage_weapon_amount();
  static const int kMarriageWeaponAmountFieldNumber = 20;
  inline ::google::protobuf::int32 marriage_weapon_amount() const;
  inline void set_marriage_weapon_amount(::google::protobuf::int32 value);

  // optional int32 marriage_goods_amount = 21;
  inline bool has_marriage_goods_amount() const;
  inline void clear_marriage_goods_amount();
  static const int kMarriageGoodsAmountFieldNumber = 21;
  inline ::google::protobuf::int32 marriage_goods_amount() const;
  inline void set_marriage_goods_amount(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_fighting_amount = 22;
  inline bool has_chi_huo_shen_gong_fighting_amount() const;
  inline void clear_chi_huo_shen_gong_fighting_amount();
  static const int kChiHuoShenGongFightingAmountFieldNumber = 22;
  inline ::google::protobuf::int32 chi_huo_shen_gong_fighting_amount() const;
  inline void set_chi_huo_shen_gong_fighting_amount(::google::protobuf::int32 value);

  // optional int32 mo_bing_fighting_amount = 23;
  inline bool has_mo_bing_fighting_amount() const;
  inline void clear_mo_bing_fighting_amount();
  static const int kMoBingFightingAmountFieldNumber = 23;
  inline ::google::protobuf::int32 mo_bing_fighting_amount() const;
  inline void set_mo_bing_fighting_amount(::google::protobuf::int32 value);

  // optional int32 tian_xie_fighting_amount = 24;
  inline bool has_tian_xie_fighting_amount() const;
  inline void clear_tian_xie_fighting_amount();
  static const int kTianXieFightingAmountFieldNumber = 24;
  inline ::google::protobuf::int32 tian_xie_fighting_amount() const;
  inline void set_tian_xie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 wu_dao_fighting_amount = 25;
  inline bool has_wu_dao_fighting_amount() const;
  inline void clear_wu_dao_fighting_amount();
  static const int kWuDaoFightingAmountFieldNumber = 25;
  inline ::google::protobuf::int32 wu_dao_fighting_amount() const;
  inline void set_wu_dao_fighting_amount(::google::protobuf::int32 value);

  // repeated int32 shield_fighting_amount = 26;
  inline int shield_fighting_amount_size() const;
  inline void clear_shield_fighting_amount();
  static const int kShieldFightingAmountFieldNumber = 26;
  inline ::google::protobuf::int32 shield_fighting_amount(int index) const;
  inline void set_shield_fighting_amount(int index, ::google::protobuf::int32 value);
  inline void add_shield_fighting_amount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shield_fighting_amount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shield_fighting_amount();

  // optional int32 jiu_wei_hu_fighting_amount = 27;
  inline bool has_jiu_wei_hu_fighting_amount() const;
  inline void clear_jiu_wei_hu_fighting_amount();
  static const int kJiuWeiHuFightingAmountFieldNumber = 27;
  inline ::google::protobuf::int32 jiu_wei_hu_fighting_amount() const;
  inline void set_jiu_wei_hu_fighting_amount(::google::protobuf::int32 value);

  // optional int32 ling_yu_fighting_amount = 28;
  inline bool has_ling_yu_fighting_amount() const;
  inline void clear_ling_yu_fighting_amount();
  static const int kLingYuFightingAmountFieldNumber = 28;
  inline ::google::protobuf::int32 ling_yu_fighting_amount() const;
  inline void set_ling_yu_fighting_amount(::google::protobuf::int32 value);

  // optional int32 yu_yi_ge_fighting_amount = 29;
  inline bool has_yu_yi_ge_fighting_amount() const;
  inline void clear_yu_yi_ge_fighting_amount();
  static const int kYuYiGeFightingAmountFieldNumber = 29;
  inline ::google::protobuf::int32 yu_yi_ge_fighting_amount() const;
  inline void set_yu_yi_ge_fighting_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.FightingAmountProto)
 private:
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_equipment_fighting_amount();
  inline void clear_has_equipment_fighting_amount();
  inline void set_has_spell_fighting_amount();
  inline void clear_has_spell_fighting_amount();
  inline void set_has_gem_fighting_amount();
  inline void clear_has_gem_fighting_amount();
  inline void set_has_mount_fighting_amount();
  inline void clear_has_mount_fighting_amount();
  inline void set_has_bow_fighting_amount();
  inline void clear_has_bow_fighting_amount();
  inline void set_has_super_weapon_fighting_amount();
  inline void clear_has_super_weapon_fighting_amount();
  inline void set_has_super_arm_fighting_amount();
  inline void clear_has_super_arm_fighting_amount();
  inline void set_has_super_weapon_xinfa_fighting_amount();
  inline void clear_has_super_weapon_xinfa_fighting_amount();
  inline void set_has_tianjie_fighting_amount();
  inline void clear_has_tianjie_fighting_amount();
  inline void set_has_tianzui_fighting_amount();
  inline void clear_has_tianzui_fighting_amount();
  inline void set_has_shou_cang_fighting_amount();
  inline void clear_has_shou_cang_fighting_amount();
  inline void set_has_demon_fighting_amount();
  inline void clear_has_demon_fighting_amount();
  inline void set_has_cloak_fighting_amount();
  inline void clear_has_cloak_fighting_amount();
  inline void set_has_pet_fighting_amount();
  inline void clear_has_pet_fighting_amount();
  inline void set_has_yitianshenjue_fighting_amount();
  inline void clear_has_yitianshenjue_fighting_amount();
  inline void set_has_moshi_fighting_amount();
  inline void clear_has_moshi_fighting_amount();
  inline void set_has_qianqiudajie_fighting_amount();
  inline void clear_has_qianqiudajie_fighting_amount();
  inline void set_has_jing_jie_fighting_amount();
  inline void clear_has_jing_jie_fighting_amount();
  inline void set_has_marriage_weapon_amount();
  inline void clear_has_marriage_weapon_amount();
  inline void set_has_marriage_goods_amount();
  inline void clear_has_marriage_goods_amount();
  inline void set_has_chi_huo_shen_gong_fighting_amount();
  inline void clear_has_chi_huo_shen_gong_fighting_amount();
  inline void set_has_mo_bing_fighting_amount();
  inline void clear_has_mo_bing_fighting_amount();
  inline void set_has_tian_xie_fighting_amount();
  inline void clear_has_tian_xie_fighting_amount();
  inline void set_has_wu_dao_fighting_amount();
  inline void clear_has_wu_dao_fighting_amount();
  inline void set_has_jiu_wei_hu_fighting_amount();
  inline void clear_has_jiu_wei_hu_fighting_amount();
  inline void set_has_ling_yu_fighting_amount();
  inline void clear_has_ling_yu_fighting_amount();
  inline void set_has_yu_yi_ge_fighting_amount();
  inline void clear_has_yu_yi_ge_fighting_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 equipment_fighting_amount_;
  ::google::protobuf::int32 spell_fighting_amount_;
  ::google::protobuf::int32 gem_fighting_amount_;
  ::google::protobuf::int32 mount_fighting_amount_;
  ::google::protobuf::int32 bow_fighting_amount_;
  ::google::protobuf::int32 super_weapon_fighting_amount_;
  ::google::protobuf::int32 super_arm_fighting_amount_;
  ::google::protobuf::int32 super_weapon_xinfa_fighting_amount_;
  ::google::protobuf::int32 tianjie_fighting_amount_;
  ::google::protobuf::int32 tianzui_fighting_amount_;
  ::google::protobuf::int32 shou_cang_fighting_amount_;
  ::google::protobuf::int32 demon_fighting_amount_;
  ::google::protobuf::int32 cloak_fighting_amount_;
  ::google::protobuf::int32 pet_fighting_amount_;
  ::google::protobuf::int32 yitianshenjue_fighting_amount_;
  ::google::protobuf::int32 moshi_fighting_amount_;
  ::google::protobuf::int32 qianqiudajie_fighting_amount_;
  ::google::protobuf::int32 jing_jie_fighting_amount_;
  ::google::protobuf::int32 marriage_weapon_amount_;
  ::google::protobuf::int32 marriage_goods_amount_;
  ::google::protobuf::int32 chi_huo_shen_gong_fighting_amount_;
  ::google::protobuf::int32 mo_bing_fighting_amount_;
  ::google::protobuf::int32 tian_xie_fighting_amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shield_fighting_amount_;
  ::google::protobuf::int32 wu_dao_fighting_amount_;
  ::google::protobuf::int32 jiu_wei_hu_fighting_amount_;
  ::google::protobuf::int32 ling_yu_fighting_amount_;
  ::google::protobuf::int32 yu_yi_ge_fighting_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static FightingAmountProto* default_instance_;
};
// -------------------------------------------------------------------

class GoodsContainerProto : public ::google::protobuf::Message {
 public:
  GoodsContainerProto();
  virtual ~GoodsContainerProto();

  GoodsContainerProto(const GoodsContainerProto& from);

  inline GoodsContainerProto& operator=(const GoodsContainerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsContainerProto& default_instance();

  void Swap(GoodsContainerProto* other);

  // implements Message ----------------------------------------------

  GoodsContainerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsContainerProto& from);
  void MergeFrom(const GoodsContainerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // repeated int32 pos_list = 3;
  inline int pos_list_size() const;
  inline void clear_pos_list();
  static const int kPosListFieldNumber = 3;
  inline ::google::protobuf::int32 pos_list(int index) const;
  inline void set_pos_list(int index, ::google::protobuf::int32 value);
  inline void add_pos_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos_list();

  // optional int64 next_open_slot_time = 5 [deprecated = true];
  inline bool has_next_open_slot_time() const PROTOBUF_DEPRECATED;
  inline void clear_next_open_slot_time() PROTOBUF_DEPRECATED;
  static const int kNextOpenSlotTimeFieldNumber = 5;
  inline ::google::protobuf::int64 next_open_slot_time() const PROTOBUF_DEPRECATED;
  inline void set_next_open_slot_time(::google::protobuf::int64 value) PROTOBUF_DEPRECATED;

  // repeated .app.message.GoodsContainerUnlockProto unlock_datas = 6;
  inline int unlock_datas_size() const;
  inline void clear_unlock_datas();
  static const int kUnlockDatasFieldNumber = 6;
  inline const ::app::message::GoodsContainerUnlockProto& unlock_datas(int index) const;
  inline ::app::message::GoodsContainerUnlockProto* mutable_unlock_datas(int index);
  inline ::app::message::GoodsContainerUnlockProto* add_unlock_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsContainerUnlockProto >&
      unlock_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsContainerUnlockProto >*
      mutable_unlock_datas();

  // repeated bytes goods_data_list = 7;
  inline int goods_data_list_size() const;
  inline void clear_goods_data_list();
  static const int kGoodsDataListFieldNumber = 7;
  inline const ::std::string& goods_data_list(int index) const;
  inline ::std::string* mutable_goods_data_list(int index);
  inline void set_goods_data_list(int index, const ::std::string& value);
  inline void set_goods_data_list(int index, const char* value);
  inline void set_goods_data_list(int index, const void* value, size_t size);
  inline ::std::string* add_goods_data_list();
  inline void add_goods_data_list(const ::std::string& value);
  inline void add_goods_data_list(const char* value);
  inline void add_goods_data_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& goods_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_goods_data_list();

  // repeated bytes goods_list = 8;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 8;
  inline const ::std::string& goods_list(int index) const;
  inline ::std::string* mutable_goods_list(int index);
  inline void set_goods_list(int index, const ::std::string& value);
  inline void set_goods_list(int index, const char* value);
  inline void set_goods_list(int index, const void* value, size_t size);
  inline ::std::string* add_goods_list();
  inline void add_goods_list(const ::std::string& value);
  inline void add_goods_list(const char* value);
  inline void add_goods_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_goods_list();

  // optional .app.message.SpriteStatProto acc_stat = 9;
  inline bool has_acc_stat() const;
  inline void clear_acc_stat();
  static const int kAccStatFieldNumber = 9;
  inline const ::app::message::SpriteStatProto& acc_stat() const;
  inline ::app::message::SpriteStatProto* mutable_acc_stat();
  inline ::app::message::SpriteStatProto* release_acc_stat();
  inline void set_allocated_acc_stat(::app::message::SpriteStatProto* acc_stat);

  // optional int32 init_count = 10;
  inline bool has_init_count() const;
  inline void clear_init_count();
  static const int kInitCountFieldNumber = 10;
  inline ::google::protobuf::int32 init_count() const;
  inline void set_init_count(::google::protobuf::int32 value);

  // optional int64 acc_start_time = 11;
  inline bool has_acc_start_time() const;
  inline void clear_acc_start_time();
  static const int kAccStartTimeFieldNumber = 11;
  inline ::google::protobuf::int64 acc_start_time() const;
  inline void set_acc_start_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.GoodsContainerProto)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_next_open_slot_time();
  inline void clear_has_next_open_slot_time();
  inline void set_has_acc_stat();
  inline void clear_has_acc_stat();
  inline void set_has_init_count();
  inline void clear_has_init_count();
  inline void set_has_acc_start_time();
  inline void clear_has_acc_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_list_;
  ::google::protobuf::int64 next_open_slot_time_;
  ::google::protobuf::RepeatedPtrField< ::app::message::GoodsContainerUnlockProto > unlock_datas_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 init_count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> goods_data_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> goods_list_;
  ::app::message::SpriteStatProto* acc_stat_;
  ::google::protobuf::int64 acc_start_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static GoodsContainerProto* default_instance_;
};
// -------------------------------------------------------------------

class GoodsContainerUnlockProto : public ::google::protobuf::Message {
 public:
  GoodsContainerUnlockProto();
  virtual ~GoodsContainerUnlockProto();

  GoodsContainerUnlockProto(const GoodsContainerUnlockProto& from);

  inline GoodsContainerUnlockProto& operator=(const GoodsContainerUnlockProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsContainerUnlockProto& default_instance();

  void Swap(GoodsContainerUnlockProto* other);

  // implements Message ----------------------------------------------

  GoodsContainerUnlockProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsContainerUnlockProto& from);
  void MergeFrom(const GoodsContainerUnlockProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pos = 1 [deprecated = true];
  inline bool has_pos() const PROTOBUF_DEPRECATED;
  inline void clear_pos() PROTOBUF_DEPRECATED;
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const PROTOBUF_DEPRECATED;
  inline void set_pos(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int64 unlock_time = 2;
  inline bool has_unlock_time() const;
  inline void clear_unlock_time();
  static const int kUnlockTimeFieldNumber = 2;
  inline ::google::protobuf::int64 unlock_time() const;
  inline void set_unlock_time(::google::protobuf::int64 value);

  // optional int32 unlock_cost = 3;
  inline bool has_unlock_cost() const;
  inline void clear_unlock_cost();
  static const int kUnlockCostFieldNumber = 3;
  inline ::google::protobuf::int32 unlock_cost() const;
  inline void set_unlock_cost(::google::protobuf::int32 value);

  // optional int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional .app.message.SpriteStatProto sprite_stat = 5;
  inline bool has_sprite_stat() const;
  inline void clear_sprite_stat();
  static const int kSpriteStatFieldNumber = 5;
  inline const ::app::message::SpriteStatProto& sprite_stat() const;
  inline ::app::message::SpriteStatProto* mutable_sprite_stat();
  inline ::app::message::SpriteStatProto* release_sprite_stat();
  inline void set_allocated_sprite_stat(::app::message::SpriteStatProto* sprite_stat);

  // optional int32 open_slot_count = 6;
  inline bool has_open_slot_count() const;
  inline void clear_open_slot_count();
  static const int kOpenSlotCountFieldNumber = 6;
  inline ::google::protobuf::int32 open_slot_count() const;
  inline void set_open_slot_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.GoodsContainerUnlockProto)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_unlock_time();
  inline void clear_has_unlock_time();
  inline void set_has_unlock_cost();
  inline void clear_has_unlock_cost();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_sprite_stat();
  inline void clear_has_sprite_stat();
  inline void set_has_open_slot_count();
  inline void clear_has_open_slot_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 unlock_time_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 unlock_cost_;
  ::app::message::SpriteStatProto* sprite_stat_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 open_slot_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static GoodsContainerUnlockProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroClearedProto : public ::google::protobuf::Message {
 public:
  HeroClearedProto();
  virtual ~HeroClearedProto();

  HeroClearedProto(const HeroClearedProto& from);

  inline HeroClearedProto& operator=(const HeroClearedProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroClearedProto& default_instance();

  void Swap(HeroClearedProto* other);

  // implements Message ----------------------------------------------

  HeroClearedProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroClearedProto& from);
  void MergeFrom(const HeroClearedProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.DailyTaskProto doing_daily_task = 1;
  inline bool has_doing_daily_task() const;
  inline void clear_doing_daily_task();
  static const int kDoingDailyTaskFieldNumber = 1;
  inline const ::app::message::DailyTaskProto& doing_daily_task() const;
  inline ::app::message::DailyTaskProto* mutable_doing_daily_task();
  inline ::app::message::DailyTaskProto* release_doing_daily_task();
  inline void set_allocated_doing_daily_task(::app::message::DailyTaskProto* doing_daily_task);

  // optional .app.message.GuildTaskProto doing_guild_task = 2;
  inline bool has_doing_guild_task() const;
  inline void clear_doing_guild_task();
  static const int kDoingGuildTaskFieldNumber = 2;
  inline const ::app::message::GuildTaskProto& doing_guild_task() const;
  inline ::app::message::GuildTaskProto* mutable_doing_guild_task();
  inline ::app::message::GuildTaskProto* release_doing_guild_task();
  inline void set_allocated_doing_guild_task(::app::message::GuildTaskProto* doing_guild_task);

  // @@protoc_insertion_point(class_scope:app.message.HeroClearedProto)
 private:
  inline void set_has_doing_daily_task();
  inline void clear_has_doing_daily_task();
  inline void set_has_doing_guild_task();
  inline void clear_has_doing_guild_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::DailyTaskProto* doing_daily_task_;
  ::app::message::GuildTaskProto* doing_guild_task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroClearedProto* default_instance_;
};
// -------------------------------------------------------------------

class ChallengeResultProto : public ::google::protobuf::Message {
 public:
  ChallengeResultProto();
  virtual ~ChallengeResultProto();

  ChallengeResultProto(const ChallengeResultProto& from);

  inline ChallengeResultProto& operator=(const ChallengeResultProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeResultProto& default_instance();

  void Swap(ChallengeResultProto* other);

  // implements Message ----------------------------------------------

  ChallengeResultProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChallengeResultProto& from);
  void MergeFrom(const ChallengeResultProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 race = 4;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 4;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int64 equipment_resource = 5;
  inline bool has_equipment_resource() const;
  inline void clear_equipment_resource();
  static const int kEquipmentResourceFieldNumber = 5;
  inline ::google::protobuf::int64 equipment_resource() const;
  inline void set_equipment_resource(::google::protobuf::int64 value);

  // optional .app.message.SpriteStatProto total_stat = 6;
  inline bool has_total_stat() const;
  inline void clear_total_stat();
  static const int kTotalStatFieldNumber = 6;
  inline const ::app::message::SpriteStatProto& total_stat() const;
  inline ::app::message::SpriteStatProto* mutable_total_stat();
  inline ::app::message::SpriteStatProto* release_total_stat();
  inline void set_allocated_total_stat(::app::message::SpriteStatProto* total_stat);

  // repeated int32 spell_types = 7;
  inline int spell_types_size() const;
  inline void clear_spell_types();
  static const int kSpellTypesFieldNumber = 7;
  inline ::google::protobuf::int32 spell_types(int index) const;
  inline void set_spell_types(int index, ::google::protobuf::int32 value);
  inline void add_spell_types(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_types();

  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ChallengeResultProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_equipment_resource();
  inline void clear_has_equipment_resource();
  inline void set_has_total_stat();
  inline void clear_has_total_stat();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 race_;
  ::std::string* name_;
  ::google::protobuf::int64 equipment_resource_;
  ::app::message::SpriteStatProto* total_stat_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_types_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ChallengeResultProto* default_instance_;
};
// -------------------------------------------------------------------

class OtherHeroProto : public ::google::protobuf::Message {
 public:
  OtherHeroProto();
  virtual ~OtherHeroProto();

  OtherHeroProto(const OtherHeroProto& from);

  inline OtherHeroProto& operator=(const OtherHeroProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OtherHeroProto& default_instance();

  void Swap(OtherHeroProto* other);

  // implements Message ----------------------------------------------

  OtherHeroProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OtherHeroProto& from);
  void MergeFrom(const OtherHeroProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 race = 4;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 4;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 fighting_amount = 5;
  inline bool has_fighting_amount() const;
  inline void clear_fighting_amount();
  static const int kFightingAmountFieldNumber = 5;
  inline ::google::protobuf::int32 fighting_amount() const;
  inline void set_fighting_amount(::google::protobuf::int32 value);

  // optional .app.message.SpriteStatProto total_stat = 6;
  inline bool has_total_stat() const;
  inline void clear_total_stat();
  static const int kTotalStatFieldNumber = 6;
  inline const ::app::message::SpriteStatProto& total_stat() const;
  inline ::app::message::SpriteStatProto* mutable_total_stat();
  inline ::app::message::SpriteStatProto* release_total_stat();
  inline void set_allocated_total_stat(::app::message::SpriteStatProto* total_stat);

  // repeated int32 equiped_pos = 7;
  inline int equiped_pos_size() const;
  inline void clear_equiped_pos();
  static const int kEquipedPosFieldNumber = 7;
  inline ::google::protobuf::int32 equiped_pos(int index) const;
  inline void set_equiped_pos(int index, ::google::protobuf::int32 value);
  inline void add_equiped_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equiped_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equiped_pos();

  // repeated .app.message.EquipmentDataProto equipment_datas = 8;
  inline int equipment_datas_size() const;
  inline void clear_equipment_datas();
  static const int kEquipmentDatasFieldNumber = 8;
  inline const ::app::message::EquipmentDataProto& equipment_datas(int index) const;
  inline ::app::message::EquipmentDataProto* mutable_equipment_datas(int index);
  inline ::app::message::EquipmentDataProto* add_equipment_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >&
      equipment_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >*
      mutable_equipment_datas();

  // repeated .app.message.EquipmentProto equipments = 9;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 9;
  inline const ::app::message::EquipmentProto& equipments(int index) const;
  inline ::app::message::EquipmentProto* mutable_equipments(int index);
  inline ::app::message::EquipmentProto* add_equipments();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >&
      equipments() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >*
      mutable_equipments();

  // optional int64 equipment_resources = 10;
  inline bool has_equipment_resources() const;
  inline void clear_equipment_resources();
  static const int kEquipmentResourcesFieldNumber = 10;
  inline ::google::protobuf::int64 equipment_resources() const;
  inline void set_equipment_resources(::google::protobuf::int64 value);

  // optional int64 exp = 11;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 11;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int64 upgrade_exp = 12;
  inline bool has_upgrade_exp() const;
  inline void clear_upgrade_exp();
  static const int kUpgradeExpFieldNumber = 12;
  inline ::google::protobuf::int64 upgrade_exp() const;
  inline void set_upgrade_exp(::google::protobuf::int64 value);

  // optional int64 life = 13;
  inline bool has_life() const;
  inline void clear_life();
  static const int kLifeFieldNumber = 13;
  inline ::google::protobuf::int64 life() const;
  inline void set_life(::google::protobuf::int64 value);

  // optional int64 max_life = 14;
  inline bool has_max_life() const;
  inline void clear_max_life();
  static const int kMaxLifeFieldNumber = 14;
  inline ::google::protobuf::int64 max_life() const;
  inline void set_max_life(::google::protobuf::int64 value);

  // optional int32 real_air = 15;
  inline bool has_real_air() const;
  inline void clear_real_air();
  static const int kRealAirFieldNumber = 15;
  inline ::google::protobuf::int32 real_air() const;
  inline void set_real_air(::google::protobuf::int32 value);

  // optional int32 stamina = 16;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 16;
  inline ::google::protobuf::int32 stamina() const;
  inline void set_stamina(::google::protobuf::int32 value);

  // optional int32 max_stamina = 17;
  inline bool has_max_stamina() const;
  inline void clear_max_stamina();
  static const int kMaxStaminaFieldNumber = 17;
  inline ::google::protobuf::int32 max_stamina() const;
  inline void set_max_stamina(::google::protobuf::int32 value);

  // optional bytes guild_name = 18;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 18;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const void* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional int32 vip_exp = 19;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 19;
  inline ::google::protobuf::int32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int32 value);

  // optional int32 guild_li_lian = 30;
  inline bool has_guild_li_lian() const;
  inline void clear_guild_li_lian();
  static const int kGuildLiLianFieldNumber = 30;
  inline ::google::protobuf::int32 guild_li_lian() const;
  inline void set_guild_li_lian(::google::protobuf::int32 value);

  // optional .app.message.HeroSuperArmProto super_arm = 31;
  inline bool has_super_arm() const;
  inline void clear_super_arm();
  static const int kSuperArmFieldNumber = 31;
  inline const ::app::message::HeroSuperArmProto& super_arm() const;
  inline ::app::message::HeroSuperArmProto* mutable_super_arm();
  inline ::app::message::HeroSuperArmProto* release_super_arm();
  inline void set_allocated_super_arm(::app::message::HeroSuperArmProto* super_arm);

  // optional .app.message.CloakProto cloak = 32;
  inline bool has_cloak() const;
  inline void clear_cloak();
  static const int kCloakFieldNumber = 32;
  inline const ::app::message::CloakProto& cloak() const;
  inline ::app::message::CloakProto* mutable_cloak();
  inline ::app::message::CloakProto* release_cloak();
  inline void set_allocated_cloak(::app::message::CloakProto* cloak);

  // optional .app.message.AchievementInfoProto achievement = 80;
  inline bool has_achievement() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 80;
  inline const ::app::message::AchievementInfoProto& achievement() const;
  inline ::app::message::AchievementInfoProto* mutable_achievement();
  inline ::app::message::AchievementInfoProto* release_achievement();
  inline void set_allocated_achievement(::app::message::AchievementInfoProto* achievement);

  // optional .app.message.TianZuiProto tian_zui = 85;
  inline bool has_tian_zui() const;
  inline void clear_tian_zui();
  static const int kTianZuiFieldNumber = 85;
  inline const ::app::message::TianZuiProto& tian_zui() const;
  inline ::app::message::TianZuiProto* mutable_tian_zui();
  inline ::app::message::TianZuiProto* release_tian_zui();
  inline void set_allocated_tian_zui(::app::message::TianZuiProto* tian_zui);

  // optional .app.message.TianJieProto tian_jie = 86;
  inline bool has_tian_jie() const;
  inline void clear_tian_jie();
  static const int kTianJieFieldNumber = 86;
  inline const ::app::message::TianJieProto& tian_jie() const;
  inline ::app::message::TianJieProto* mutable_tian_jie();
  inline ::app::message::TianJieProto* release_tian_jie();
  inline void set_allocated_tian_jie(::app::message::TianJieProto* tian_jie);

  // optional .app.message.PetProto pet = 87;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 87;
  inline const ::app::message::PetProto& pet() const;
  inline ::app::message::PetProto* mutable_pet();
  inline ::app::message::PetProto* release_pet();
  inline void set_allocated_pet(::app::message::PetProto* pet);

  // repeated int32 gems = 88;
  inline int gems_size() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 88;
  inline ::google::protobuf::int32 gems(int index) const;
  inline void set_gems(int index, ::google::protobuf::int32 value);
  inline void add_gems(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gems() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gems();

  // optional .app.message.BowProto bow = 89;
  inline bool has_bow() const;
  inline void clear_bow();
  static const int kBowFieldNumber = 89;
  inline const ::app::message::BowProto& bow() const;
  inline ::app::message::BowProto* mutable_bow();
  inline ::app::message::BowProto* release_bow();
  inline void set_allocated_bow(::app::message::BowProto* bow);

  // optional int32 pk_amount = 90;
  inline bool has_pk_amount() const;
  inline void clear_pk_amount();
  static const int kPkAmountFieldNumber = 90;
  inline ::google::protobuf::int32 pk_amount() const;
  inline void set_pk_amount(::google::protobuf::int32 value);

  // optional .app.message.MountProto mount = 91;
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 91;
  inline const ::app::message::MountProto& mount() const;
  inline ::app::message::MountProto* mutable_mount();
  inline ::app::message::MountProto* release_mount();
  inline void set_allocated_mount(::app::message::MountProto* mount);

  // optional int32 equipment_fighting_amount = 92;
  inline bool has_equipment_fighting_amount() const;
  inline void clear_equipment_fighting_amount();
  static const int kEquipmentFightingAmountFieldNumber = 92;
  inline ::google::protobuf::int32 equipment_fighting_amount() const;
  inline void set_equipment_fighting_amount(::google::protobuf::int32 value);

  // optional int32 spell_fighting_amount = 93;
  inline bool has_spell_fighting_amount() const;
  inline void clear_spell_fighting_amount();
  static const int kSpellFightingAmountFieldNumber = 93;
  inline ::google::protobuf::int32 spell_fighting_amount() const;
  inline void set_spell_fighting_amount(::google::protobuf::int32 value);

  // optional int32 super_arm_fighting_amount = 94;
  inline bool has_super_arm_fighting_amount() const;
  inline void clear_super_arm_fighting_amount();
  static const int kSuperArmFightingAmountFieldNumber = 94;
  inline ::google::protobuf::int32 super_arm_fighting_amount() const;
  inline void set_super_arm_fighting_amount(::google::protobuf::int32 value);

  // optional int32 base_fighting_amount = 95;
  inline bool has_base_fighting_amount() const;
  inline void clear_base_fighting_amount();
  static const int kBaseFightingAmountFieldNumber = 95;
  inline ::google::protobuf::int32 base_fighting_amount() const;
  inline void set_base_fighting_amount(::google::protobuf::int32 value);

  // optional int32 gem_fighting_amount = 96 [deprecated = true];
  inline bool has_gem_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void clear_gem_fighting_amount() PROTOBUF_DEPRECATED;
  static const int kGemFightingAmountFieldNumber = 96;
  inline ::google::protobuf::int32 gem_fighting_amount() const PROTOBUF_DEPRECATED;
  inline void set_gem_fighting_amount(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional int32 mount_fighting_amount = 97;
  inline bool has_mount_fighting_amount() const;
  inline void clear_mount_fighting_amount();
  static const int kMountFightingAmountFieldNumber = 97;
  inline ::google::protobuf::int32 mount_fighting_amount() const;
  inline void set_mount_fighting_amount(::google::protobuf::int32 value);

  // optional int32 bow_fighting_amount = 98;
  inline bool has_bow_fighting_amount() const;
  inline void clear_bow_fighting_amount();
  static const int kBowFightingAmountFieldNumber = 98;
  inline ::google::protobuf::int32 bow_fighting_amount() const;
  inline void set_bow_fighting_amount(::google::protobuf::int32 value);

  // optional int32 super_weapon_fighting_amount = 99;
  inline bool has_super_weapon_fighting_amount() const;
  inline void clear_super_weapon_fighting_amount();
  static const int kSuperWeaponFightingAmountFieldNumber = 99;
  inline ::google::protobuf::int32 super_weapon_fighting_amount() const;
  inline void set_super_weapon_fighting_amount(::google::protobuf::int32 value);

  // optional int32 super_weapon_xinfa_fighting_amount = 100;
  inline bool has_super_weapon_xinfa_fighting_amount() const;
  inline void clear_super_weapon_xinfa_fighting_amount();
  static const int kSuperWeaponXinfaFightingAmountFieldNumber = 100;
  inline ::google::protobuf::int32 super_weapon_xinfa_fighting_amount() const;
  inline void set_super_weapon_xinfa_fighting_amount(::google::protobuf::int32 value);

  // optional int32 tianjie_fighting_amount = 101;
  inline bool has_tianjie_fighting_amount() const;
  inline void clear_tianjie_fighting_amount();
  static const int kTianjieFightingAmountFieldNumber = 101;
  inline ::google::protobuf::int32 tianjie_fighting_amount() const;
  inline void set_tianjie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 tianzui_fighting_amount = 102;
  inline bool has_tianzui_fighting_amount() const;
  inline void clear_tianzui_fighting_amount();
  static const int kTianzuiFightingAmountFieldNumber = 102;
  inline ::google::protobuf::int32 tianzui_fighting_amount() const;
  inline void set_tianzui_fighting_amount(::google::protobuf::int32 value);

  // optional int32 shou_cang_fighting_amount = 103;
  inline bool has_shou_cang_fighting_amount() const;
  inline void clear_shou_cang_fighting_amount();
  static const int kShouCangFightingAmountFieldNumber = 103;
  inline ::google::protobuf::int32 shou_cang_fighting_amount() const;
  inline void set_shou_cang_fighting_amount(::google::protobuf::int32 value);

  // optional int32 demon_fighting_amount = 104;
  inline bool has_demon_fighting_amount() const;
  inline void clear_demon_fighting_amount();
  static const int kDemonFightingAmountFieldNumber = 104;
  inline ::google::protobuf::int32 demon_fighting_amount() const;
  inline void set_demon_fighting_amount(::google::protobuf::int32 value);

  // optional int32 cloak_fighting_amount = 105;
  inline bool has_cloak_fighting_amount() const;
  inline void clear_cloak_fighting_amount();
  static const int kCloakFightingAmountFieldNumber = 105;
  inline ::google::protobuf::int32 cloak_fighting_amount() const;
  inline void set_cloak_fighting_amount(::google::protobuf::int32 value);

  // optional int32 pet_fighting_amount = 106;
  inline bool has_pet_fighting_amount() const;
  inline void clear_pet_fighting_amount();
  static const int kPetFightingAmountFieldNumber = 106;
  inline ::google::protobuf::int32 pet_fighting_amount() const;
  inline void set_pet_fighting_amount(::google::protobuf::int32 value);

  // optional int32 yitianshenjue_fighting_amount = 107;
  inline bool has_yitianshenjue_fighting_amount() const;
  inline void clear_yitianshenjue_fighting_amount();
  static const int kYitianshenjueFightingAmountFieldNumber = 107;
  inline ::google::protobuf::int32 yitianshenjue_fighting_amount() const;
  inline void set_yitianshenjue_fighting_amount(::google::protobuf::int32 value);

  // optional int32 moshi_fighting_amount = 108;
  inline bool has_moshi_fighting_amount() const;
  inline void clear_moshi_fighting_amount();
  static const int kMoshiFightingAmountFieldNumber = 108;
  inline ::google::protobuf::int32 moshi_fighting_amount() const;
  inline void set_moshi_fighting_amount(::google::protobuf::int32 value);

  // optional int32 jing_jie_fighting_amount = 112;
  inline bool has_jing_jie_fighting_amount() const;
  inline void clear_jing_jie_fighting_amount();
  static const int kJingJieFightingAmountFieldNumber = 112;
  inline ::google::protobuf::int32 jing_jie_fighting_amount() const;
  inline void set_jing_jie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 qianqiudajie_fighting_amount = 201;
  inline bool has_qianqiudajie_fighting_amount() const;
  inline void clear_qianqiudajie_fighting_amount();
  static const int kQianqiudajieFightingAmountFieldNumber = 201;
  inline ::google::protobuf::int32 qianqiudajie_fighting_amount() const;
  inline void set_qianqiudajie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 marriage_weapon_amount = 113;
  inline bool has_marriage_weapon_amount() const;
  inline void clear_marriage_weapon_amount();
  static const int kMarriageWeaponAmountFieldNumber = 113;
  inline ::google::protobuf::int32 marriage_weapon_amount() const;
  inline void set_marriage_weapon_amount(::google::protobuf::int32 value);

  // optional int32 marriage_goods_amount = 114;
  inline bool has_marriage_goods_amount() const;
  inline void clear_marriage_goods_amount();
  static const int kMarriageGoodsAmountFieldNumber = 114;
  inline ::google::protobuf::int32 marriage_goods_amount() const;
  inline void set_marriage_goods_amount(::google::protobuf::int32 value);

  // optional int32 chi_huo_shen_gong_fighting_amount = 115;
  inline bool has_chi_huo_shen_gong_fighting_amount() const;
  inline void clear_chi_huo_shen_gong_fighting_amount();
  static const int kChiHuoShenGongFightingAmountFieldNumber = 115;
  inline ::google::protobuf::int32 chi_huo_shen_gong_fighting_amount() const;
  inline void set_chi_huo_shen_gong_fighting_amount(::google::protobuf::int32 value);

  // optional int32 mo_bing_fighting_amount = 116;
  inline bool has_mo_bing_fighting_amount() const;
  inline void clear_mo_bing_fighting_amount();
  static const int kMoBingFightingAmountFieldNumber = 116;
  inline ::google::protobuf::int32 mo_bing_fighting_amount() const;
  inline void set_mo_bing_fighting_amount(::google::protobuf::int32 value);

  // optional int32 tian_xie_fighting_amount = 117;
  inline bool has_tian_xie_fighting_amount() const;
  inline void clear_tian_xie_fighting_amount();
  static const int kTianXieFightingAmountFieldNumber = 117;
  inline ::google::protobuf::int32 tian_xie_fighting_amount() const;
  inline void set_tian_xie_fighting_amount(::google::protobuf::int32 value);

  // optional int32 wu_dao_fighting_amount = 118;
  inline bool has_wu_dao_fighting_amount() const;
  inline void clear_wu_dao_fighting_amount();
  static const int kWuDaoFightingAmountFieldNumber = 118;
  inline ::google::protobuf::int32 wu_dao_fighting_amount() const;
  inline void set_wu_dao_fighting_amount(::google::protobuf::int32 value);

  // optional int32 yu_yi_ge_fighting_amount = 119;
  inline bool has_yu_yi_ge_fighting_amount() const;
  inline void clear_yu_yi_ge_fighting_amount();
  static const int kYuYiGeFightingAmountFieldNumber = 119;
  inline ::google::protobuf::int32 yu_yi_ge_fighting_amount() const;
  inline void set_yu_yi_ge_fighting_amount(::google::protobuf::int32 value);

  // optional int32 mo_fang_fighting_amount = 120;
  inline bool has_mo_fang_fighting_amount() const;
  inline void clear_mo_fang_fighting_amount();
  static const int kMoFangFightingAmountFieldNumber = 120;
  inline ::google::protobuf::int32 mo_fang_fighting_amount() const;
  inline void set_mo_fang_fighting_amount(::google::protobuf::int32 value);

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional int64 marriage_target_id = 109;
  inline bool has_marriage_target_id() const;
  inline void clear_marriage_target_id();
  static const int kMarriageTargetIdFieldNumber = 109;
  inline ::google::protobuf::int64 marriage_target_id() const;
  inline void set_marriage_target_id(::google::protobuf::int64 value);

  // optional bytes marriage_target_name = 110;
  inline bool has_marriage_target_name() const;
  inline void clear_marriage_target_name();
  static const int kMarriageTargetNameFieldNumber = 110;
  inline const ::std::string& marriage_target_name() const;
  inline void set_marriage_target_name(const ::std::string& value);
  inline void set_marriage_target_name(const char* value);
  inline void set_marriage_target_name(const void* value, size_t size);
  inline ::std::string* mutable_marriage_target_name();
  inline ::std::string* release_marriage_target_name();
  inline void set_allocated_marriage_target_name(::std::string* marriage_target_name);

  // optional int32 marriage_goods_id = 111;
  inline bool has_marriage_goods_id() const;
  inline void clear_marriage_goods_id();
  static const int kMarriageGoodsIdFieldNumber = 111;
  inline ::google::protobuf::int32 marriage_goods_id() const;
  inline void set_marriage_goods_id(::google::protobuf::int32 value);

  // optional .app.message.ShouCangProto shou_cang = 200;
  inline bool has_shou_cang() const;
  inline void clear_shou_cang();
  static const int kShouCangFieldNumber = 200;
  inline const ::app::message::ShouCangProto& shou_cang() const;
  inline ::app::message::ShouCangProto* mutable_shou_cang();
  inline ::app::message::ShouCangProto* release_shou_cang();
  inline void set_allocated_shou_cang(::app::message::ShouCangProto* shou_cang);

  // optional bytes arena_fighting_team_name_bytes = 202;
  inline bool has_arena_fighting_team_name_bytes() const;
  inline void clear_arena_fighting_team_name_bytes();
  static const int kArenaFightingTeamNameBytesFieldNumber = 202;
  inline const ::std::string& arena_fighting_team_name_bytes() const;
  inline void set_arena_fighting_team_name_bytes(const ::std::string& value);
  inline void set_arena_fighting_team_name_bytes(const char* value);
  inline void set_arena_fighting_team_name_bytes(const void* value, size_t size);
  inline ::std::string* mutable_arena_fighting_team_name_bytes();
  inline ::std::string* release_arena_fighting_team_name_bytes();
  inline void set_allocated_arena_fighting_team_name_bytes(::std::string* arena_fighting_team_name_bytes);

  // repeated int32 shield_fighting_amount = 203;
  inline int shield_fighting_amount_size() const;
  inline void clear_shield_fighting_amount();
  static const int kShieldFightingAmountFieldNumber = 203;
  inline ::google::protobuf::int32 shield_fighting_amount(int index) const;
  inline void set_shield_fighting_amount(int index, ::google::protobuf::int32 value);
  inline void add_shield_fighting_amount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shield_fighting_amount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shield_fighting_amount();

  // optional int32 jian_dao = 204;
  inline bool has_jian_dao() const;
  inline void clear_jian_dao();
  static const int kJianDaoFieldNumber = 204;
  inline ::google::protobuf::int32 jian_dao() const;
  inline void set_jian_dao(::google::protobuf::int32 value);

  // optional int32 bow_tong_ling_display_id = 205;
  inline bool has_bow_tong_ling_display_id() const;
  inline void clear_bow_tong_ling_display_id();
  static const int kBowTongLingDisplayIdFieldNumber = 205;
  inline ::google::protobuf::int32 bow_tong_ling_display_id() const;
  inline void set_bow_tong_ling_display_id(::google::protobuf::int32 value);

  // optional int32 pet_tong_ling_display_id = 206;
  inline bool has_pet_tong_ling_display_id() const;
  inline void clear_pet_tong_ling_display_id();
  static const int kPetTongLingDisplayIdFieldNumber = 206;
  inline ::google::protobuf::int32 pet_tong_ling_display_id() const;
  inline void set_pet_tong_ling_display_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.OtherHeroProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_fighting_amount();
  inline void clear_has_fighting_amount();
  inline void set_has_total_stat();
  inline void clear_has_total_stat();
  inline void set_has_equipment_resources();
  inline void clear_has_equipment_resources();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_upgrade_exp();
  inline void clear_has_upgrade_exp();
  inline void set_has_life();
  inline void clear_has_life();
  inline void set_has_max_life();
  inline void clear_has_max_life();
  inline void set_has_real_air();
  inline void clear_has_real_air();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_max_stamina();
  inline void clear_has_max_stamina();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_guild_li_lian();
  inline void clear_has_guild_li_lian();
  inline void set_has_super_arm();
  inline void clear_has_super_arm();
  inline void set_has_cloak();
  inline void clear_has_cloak();
  inline void set_has_achievement();
  inline void clear_has_achievement();
  inline void set_has_tian_zui();
  inline void clear_has_tian_zui();
  inline void set_has_tian_jie();
  inline void clear_has_tian_jie();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_bow();
  inline void clear_has_bow();
  inline void set_has_pk_amount();
  inline void clear_has_pk_amount();
  inline void set_has_mount();
  inline void clear_has_mount();
  inline void set_has_equipment_fighting_amount();
  inline void clear_has_equipment_fighting_amount();
  inline void set_has_spell_fighting_amount();
  inline void clear_has_spell_fighting_amount();
  inline void set_has_super_arm_fighting_amount();
  inline void clear_has_super_arm_fighting_amount();
  inline void set_has_base_fighting_amount();
  inline void clear_has_base_fighting_amount();
  inline void set_has_gem_fighting_amount();
  inline void clear_has_gem_fighting_amount();
  inline void set_has_mount_fighting_amount();
  inline void clear_has_mount_fighting_amount();
  inline void set_has_bow_fighting_amount();
  inline void clear_has_bow_fighting_amount();
  inline void set_has_super_weapon_fighting_amount();
  inline void clear_has_super_weapon_fighting_amount();
  inline void set_has_super_weapon_xinfa_fighting_amount();
  inline void clear_has_super_weapon_xinfa_fighting_amount();
  inline void set_has_tianjie_fighting_amount();
  inline void clear_has_tianjie_fighting_amount();
  inline void set_has_tianzui_fighting_amount();
  inline void clear_has_tianzui_fighting_amount();
  inline void set_has_shou_cang_fighting_amount();
  inline void clear_has_shou_cang_fighting_amount();
  inline void set_has_demon_fighting_amount();
  inline void clear_has_demon_fighting_amount();
  inline void set_has_cloak_fighting_amount();
  inline void clear_has_cloak_fighting_amount();
  inline void set_has_pet_fighting_amount();
  inline void clear_has_pet_fighting_amount();
  inline void set_has_yitianshenjue_fighting_amount();
  inline void clear_has_yitianshenjue_fighting_amount();
  inline void set_has_moshi_fighting_amount();
  inline void clear_has_moshi_fighting_amount();
  inline void set_has_jing_jie_fighting_amount();
  inline void clear_has_jing_jie_fighting_amount();
  inline void set_has_qianqiudajie_fighting_amount();
  inline void clear_has_qianqiudajie_fighting_amount();
  inline void set_has_marriage_weapon_amount();
  inline void clear_has_marriage_weapon_amount();
  inline void set_has_marriage_goods_amount();
  inline void clear_has_marriage_goods_amount();
  inline void set_has_chi_huo_shen_gong_fighting_amount();
  inline void clear_has_chi_huo_shen_gong_fighting_amount();
  inline void set_has_mo_bing_fighting_amount();
  inline void clear_has_mo_bing_fighting_amount();
  inline void set_has_tian_xie_fighting_amount();
  inline void clear_has_tian_xie_fighting_amount();
  inline void set_has_wu_dao_fighting_amount();
  inline void clear_has_wu_dao_fighting_amount();
  inline void set_has_yu_yi_ge_fighting_amount();
  inline void clear_has_yu_yi_ge_fighting_amount();
  inline void set_has_mo_fang_fighting_amount();
  inline void clear_has_mo_fang_fighting_amount();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_marriage_target_id();
  inline void clear_has_marriage_target_id();
  inline void set_has_marriage_target_name();
  inline void clear_has_marriage_target_name();
  inline void set_has_marriage_goods_id();
  inline void clear_has_marriage_goods_id();
  inline void set_has_shou_cang();
  inline void clear_has_shou_cang();
  inline void set_has_arena_fighting_team_name_bytes();
  inline void clear_has_arena_fighting_team_name_bytes();
  inline void set_has_jian_dao();
  inline void clear_has_jian_dao();
  inline void set_has_bow_tong_ling_display_id();
  inline void clear_has_bow_tong_ling_display_id();
  inline void set_has_pet_tong_ling_display_id();
  inline void clear_has_pet_tong_ling_display_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 race_;
  ::app::message::SpriteStatProto* total_stat_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equiped_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto > equipment_datas_;
  ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto > equipments_;
  ::google::protobuf::int32 fighting_amount_;
  ::google::protobuf::int32 real_air_;
  ::google::protobuf::int64 equipment_resources_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int64 upgrade_exp_;
  ::google::protobuf::int64 life_;
  ::google::protobuf::int64 max_life_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int32 max_stamina_;
  ::std::string* guild_name_;
  ::google::protobuf::int32 vip_exp_;
  ::google::protobuf::int32 guild_li_lian_;
  ::app::message::HeroSuperArmProto* super_arm_;
  ::app::message::CloakProto* cloak_;
  ::app::message::AchievementInfoProto* achievement_;
  ::app::message::TianZuiProto* tian_zui_;
  ::app::message::TianJieProto* tian_jie_;
  ::app::message::PetProto* pet_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gems_;
  ::app::message::BowProto* bow_;
  ::google::protobuf::int32 pk_amount_;
  ::google::protobuf::int32 equipment_fighting_amount_;
  ::app::message::MountProto* mount_;
  ::google::protobuf::int32 spell_fighting_amount_;
  ::google::protobuf::int32 super_arm_fighting_amount_;
  ::google::protobuf::int32 base_fighting_amount_;
  ::google::protobuf::int32 gem_fighting_amount_;
  ::google::protobuf::int32 mount_fighting_amount_;
  ::google::protobuf::int32 bow_fighting_amount_;
  ::google::protobuf::int32 super_weapon_fighting_amount_;
  ::google::protobuf::int32 super_weapon_xinfa_fighting_amount_;
  ::google::protobuf::int32 tianjie_fighting_amount_;
  ::google::protobuf::int32 tianzui_fighting_amount_;
  ::google::protobuf::int32 shou_cang_fighting_amount_;
  ::google::protobuf::int32 demon_fighting_amount_;
  ::google::protobuf::int32 cloak_fighting_amount_;
  ::google::protobuf::int32 pet_fighting_amount_;
  ::google::protobuf::int32 yitianshenjue_fighting_amount_;
  ::google::protobuf::int32 moshi_fighting_amount_;
  ::google::protobuf::int32 jing_jie_fighting_amount_;
  ::google::protobuf::int32 qianqiudajie_fighting_amount_;
  ::google::protobuf::int32 marriage_weapon_amount_;
  ::google::protobuf::int32 marriage_goods_amount_;
  ::google::protobuf::int32 chi_huo_shen_gong_fighting_amount_;
  ::google::protobuf::int32 mo_bing_fighting_amount_;
  ::google::protobuf::int32 tian_xie_fighting_amount_;
  ::google::protobuf::int32 wu_dao_fighting_amount_;
  ::google::protobuf::int32 yu_yi_ge_fighting_amount_;
  ::google::protobuf::int32 mo_fang_fighting_amount_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int64 marriage_target_id_;
  ::std::string* marriage_target_name_;
  ::app::message::ShouCangProto* shou_cang_;
  ::std::string* arena_fighting_team_name_bytes_;
  ::google::protobuf::int32 marriage_goods_id_;
  ::google::protobuf::int32 jian_dao_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shield_fighting_amount_;
  ::google::protobuf::int32 bow_tong_ling_display_id_;
  ::google::protobuf::int32 pet_tong_ling_display_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(68 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static OtherHeroProto* default_instance_;
};
// -------------------------------------------------------------------

class ClientRelation : public ::google::protobuf::Message {
 public:
  ClientRelation();
  virtual ~ClientRelation();

  ClientRelation(const ClientRelation& from);

  inline ClientRelation& operator=(const ClientRelation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRelation& default_instance();

  void Swap(ClientRelation* other);

  // implements Message ----------------------------------------------

  ClientRelation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRelation& from);
  void MergeFrom(const ClientRelation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 friend_id = 1;
  inline int friend_id_size() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int64 friend_id(int index) const;
  inline void set_friend_id(int index, ::google::protobuf::int64 value);
  inline void add_friend_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      friend_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_friend_id();

  // repeated int64 enemy_id = 2;
  inline int enemy_id_size() const;
  inline void clear_enemy_id();
  static const int kEnemyIdFieldNumber = 2;
  inline ::google::protobuf::int64 enemy_id(int index) const;
  inline void set_enemy_id(int index, ::google::protobuf::int64 value);
  inline void add_enemy_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      enemy_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_enemy_id();

  // repeated int64 enemy_kill_history = 3;
  inline int enemy_kill_history_size() const;
  inline void clear_enemy_kill_history();
  static const int kEnemyKillHistoryFieldNumber = 3;
  inline ::google::protobuf::int64 enemy_kill_history(int index) const;
  inline void set_enemy_kill_history(int index, ::google::protobuf::int64 value);
  inline void add_enemy_kill_history(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      enemy_kill_history() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_enemy_kill_history();

  // repeated int64 black_list_id = 4;
  inline int black_list_id_size() const;
  inline void clear_black_list_id();
  static const int kBlackListIdFieldNumber = 4;
  inline ::google::protobuf::int64 black_list_id(int index) const;
  inline void set_black_list_id(int index, ::google::protobuf::int64 value);
  inline void add_black_list_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      black_list_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_black_list_id();

  // repeated int64 recent_id = 5;
  inline int recent_id_size() const;
  inline void clear_recent_id();
  static const int kRecentIdFieldNumber = 5;
  inline ::google::protobuf::int64 recent_id(int index) const;
  inline void set_recent_id(int index, ::google::protobuf::int64 value);
  inline void add_recent_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      recent_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_recent_id();

  // optional bool hide_my_location = 6;
  inline bool has_hide_my_location() const;
  inline void clear_hide_my_location();
  static const int kHideMyLocationFieldNumber = 6;
  inline bool hide_my_location() const;
  inline void set_hide_my_location(bool value);

  // optional bool hide_offline_relation = 7;
  inline bool has_hide_offline_relation() const;
  inline void clear_hide_offline_relation();
  static const int kHideOfflineRelationFieldNumber = 7;
  inline bool hide_offline_relation() const;
  inline void set_hide_offline_relation(bool value);

  // optional bool hide_big_head = 8;
  inline bool has_hide_big_head() const;
  inline void clear_hide_big_head();
  static const int kHideBigHeadFieldNumber = 8;
  inline bool hide_big_head() const;
  inline void set_hide_big_head(bool value);

  // optional bool show_enemy_event = 9;
  inline bool has_show_enemy_event() const;
  inline void clear_show_enemy_event();
  static const int kShowEnemyEventFieldNumber = 9;
  inline bool show_enemy_event() const;
  inline void set_show_enemy_event(bool value);

  // optional bool forbid_been_added_as_friend = 10;
  inline bool has_forbid_been_added_as_friend() const;
  inline void clear_forbid_been_added_as_friend();
  static const int kForbidBeenAddedAsFriendFieldNumber = 10;
  inline bool forbid_been_added_as_friend() const;
  inline void set_forbid_been_added_as_friend(bool value);

  // @@protoc_insertion_point(class_scope:app.message.ClientRelation)
 private:
  inline void set_has_hide_my_location();
  inline void clear_has_hide_my_location();
  inline void set_has_hide_offline_relation();
  inline void clear_has_hide_offline_relation();
  inline void set_has_hide_big_head();
  inline void clear_has_hide_big_head();
  inline void set_has_show_enemy_event();
  inline void clear_has_show_enemy_event();
  inline void set_has_forbid_been_added_as_friend();
  inline void clear_has_forbid_been_added_as_friend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > friend_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > enemy_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > enemy_kill_history_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > black_list_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > recent_id_;
  bool hide_my_location_;
  bool hide_offline_relation_;
  bool hide_big_head_;
  bool show_enemy_event_;
  bool forbid_been_added_as_friend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ClientRelation* default_instance_;
};
// -------------------------------------------------------------------

class SingleRelation : public ::google::protobuf::Message {
 public:
  SingleRelation();
  virtual ~SingleRelation();

  SingleRelation(const SingleRelation& from);

  inline SingleRelation& operator=(const SingleRelation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleRelation& default_instance();

  void Swap(SingleRelation* other);

  // implements Message ----------------------------------------------

  SingleRelation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleRelation& from);
  void MergeFrom(const SingleRelation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes mood = 3;
  inline bool has_mood() const;
  inline void clear_mood();
  static const int kMoodFieldNumber = 3;
  inline const ::std::string& mood() const;
  inline void set_mood(const ::std::string& value);
  inline void set_mood(const char* value);
  inline void set_mood(const void* value, size_t size);
  inline ::std::string* mutable_mood();
  inline ::std::string* release_mood();
  inline void set_allocated_mood(::std::string* mood);

  // optional int32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 line_number = 6;
  inline bool has_line_number() const;
  inline void clear_line_number();
  static const int kLineNumberFieldNumber = 6;
  inline ::google::protobuf::int32 line_number() const;
  inline void set_line_number(::google::protobuf::int32 value);

  // optional bool has_sell = 7;
  inline bool has_has_sell() const;
  inline void clear_has_sell();
  static const int kHasSellFieldNumber = 7;
  inline bool has_sell() const;
  inline void set_has_sell(bool value);

  // optional int32 race = 8;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 8;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional bool forbid_been_added_as_friend = 9;
  inline bool has_forbid_been_added_as_friend() const;
  inline void clear_forbid_been_added_as_friend();
  static const int kForbidBeenAddedAsFriendFieldNumber = 9;
  inline bool forbid_been_added_as_friend() const;
  inline void set_forbid_been_added_as_friend(bool value);

  // @@protoc_insertion_point(class_scope:app.message.SingleRelation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mood();
  inline void clear_has_mood();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_line_number();
  inline void clear_has_line_number();
  inline void set_has_has_sell();
  inline void clear_has_has_sell();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_forbid_been_added_as_friend();
  inline void clear_has_forbid_been_added_as_friend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* mood_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 line_number_;
  ::google::protobuf::int32 race_;
  bool has_sell_;
  bool forbid_been_added_as_friend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static SingleRelation* default_instance_;
};
// -------------------------------------------------------------------

class ClientRelationDetail : public ::google::protobuf::Message {
 public:
  ClientRelationDetail();
  virtual ~ClientRelationDetail();

  ClientRelationDetail(const ClientRelationDetail& from);

  inline ClientRelationDetail& operator=(const ClientRelationDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRelationDetail& default_instance();

  void Swap(ClientRelationDetail* other);

  // implements Message ----------------------------------------------

  ClientRelationDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRelationDetail& from);
  void MergeFrom(const ClientRelationDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.SingleRelation detail = 1;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 1;
  inline const ::app::message::SingleRelation& detail(int index) const;
  inline ::app::message::SingleRelation* mutable_detail(int index);
  inline ::app::message::SingleRelation* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleRelation >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleRelation >*
      mutable_detail();

  // repeated bool is_online = 2;
  inline int is_online_size() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 2;
  inline bool is_online(int index) const;
  inline void set_is_online(int index, bool value);
  inline void add_is_online(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      is_online() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_is_online();

  // optional bytes self_mood = 3;
  inline bool has_self_mood() const;
  inline void clear_self_mood();
  static const int kSelfMoodFieldNumber = 3;
  inline const ::std::string& self_mood() const;
  inline void set_self_mood(const ::std::string& value);
  inline void set_self_mood(const char* value);
  inline void set_self_mood(const void* value, size_t size);
  inline ::std::string* mutable_self_mood();
  inline ::std::string* release_self_mood();
  inline void set_allocated_self_mood(::std::string* self_mood);

  // optional int32 been_added_friend_count = 4;
  inline bool has_been_added_friend_count() const;
  inline void clear_been_added_friend_count();
  static const int kBeenAddedFriendCountFieldNumber = 4;
  inline ::google::protobuf::int32 been_added_friend_count() const;
  inline void set_been_added_friend_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ClientRelationDetail)
 private:
  inline void set_has_self_mood();
  inline void clear_has_self_mood();
  inline void set_has_been_added_friend_count();
  inline void clear_has_been_added_friend_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::SingleRelation > detail_;
  ::google::protobuf::RepeatedField< bool > is_online_;
  ::std::string* self_mood_;
  ::google::protobuf::int32 been_added_friend_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ClientRelationDetail* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessage_ChatGoods : public ::google::protobuf::Message {
 public:
  ChatMessage_ChatGoods();
  virtual ~ChatMessage_ChatGoods();

  ChatMessage_ChatGoods(const ChatMessage_ChatGoods& from);

  inline ChatMessage_ChatGoods& operator=(const ChatMessage_ChatGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage_ChatGoods& default_instance();

  void Swap(ChatMessage_ChatGoods* other);

  // implements Message ----------------------------------------------

  ChatMessage_ChatGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage_ChatGoods& from);
  void MergeFrom(const ChatMessage_ChatGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional bytes dynamic_info = 4;
  inline bool has_dynamic_info() const;
  inline void clear_dynamic_info();
  static const int kDynamicInfoFieldNumber = 4;
  inline const ::std::string& dynamic_info() const;
  inline void set_dynamic_info(const ::std::string& value);
  inline void set_dynamic_info(const char* value);
  inline void set_dynamic_info(const void* value, size_t size);
  inline ::std::string* mutable_dynamic_info();
  inline ::std::string* release_dynamic_info();
  inline void set_allocated_dynamic_info(::std::string* dynamic_info);

  // @@protoc_insertion_point(class_scope:app.message.ChatMessage.ChatGoods)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_dynamic_info();
  inline void clear_has_dynamic_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 quality_;
  ::std::string* dynamic_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage_ChatGoods* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatMessage_ChatGoods ChatGoods;

  // accessors -------------------------------------------------------

  // optional string speech = 1;
  inline bool has_speech() const;
  inline void clear_speech();
  static const int kSpeechFieldNumber = 1;
  inline const ::std::string& speech() const;
  inline void set_speech(const ::std::string& value);
  inline void set_speech(const char* value);
  inline void set_speech(const char* value, size_t size);
  inline ::std::string* mutable_speech();
  inline ::std::string* release_speech();
  inline void set_allocated_speech(::std::string* speech);

  // repeated .app.message.ChatMessage.ChatGoods chat_goods = 2;
  inline int chat_goods_size() const;
  inline void clear_chat_goods();
  static const int kChatGoodsFieldNumber = 2;
  inline const ::app::message::ChatMessage_ChatGoods& chat_goods(int index) const;
  inline ::app::message::ChatMessage_ChatGoods* mutable_chat_goods(int index);
  inline ::app::message::ChatMessage_ChatGoods* add_chat_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ChatMessage_ChatGoods >&
      chat_goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ChatMessage_ChatGoods >*
      mutable_chat_goods();

  // optional int32 check_sum = 3;
  inline bool has_check_sum() const;
  inline void clear_check_sum();
  static const int kCheckSumFieldNumber = 3;
  inline ::google::protobuf::int32 check_sum() const;
  inline void set_check_sum(::google::protobuf::int32 value);

  // optional bool has_my_pos = 20;
  inline bool has_has_my_pos() const;
  inline void clear_has_my_pos();
  static const int kHasMyPosFieldNumber = 20;
  inline bool has_my_pos() const;
  inline void set_has_my_pos(bool value);

  // repeated int32 gem = 21;
  inline int gem_size() const;
  inline void clear_gem();
  static const int kGemFieldNumber = 21;
  inline ::google::protobuf::int32 gem(int index) const;
  inline void set_gem(int index, ::google::protobuf::int32 value);
  inline void add_gem(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gem() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gem();

  // optional bytes hero_name = 4;
  inline bool has_hero_name() const;
  inline void clear_hero_name();
  static const int kHeroNameFieldNumber = 4;
  inline const ::std::string& hero_name() const;
  inline void set_hero_name(const ::std::string& value);
  inline void set_hero_name(const char* value);
  inline void set_hero_name(const void* value, size_t size);
  inline ::std::string* mutable_hero_name();
  inline ::std::string* release_hero_name();
  inline void set_allocated_hero_name(::std::string* hero_name);

  // optional int64 hero_id = 5;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 5;
  inline ::google::protobuf::int64 hero_id() const;
  inline void set_hero_id(::google::protobuf::int64 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool is_vip = 7;
  inline bool has_is_vip() const;
  inline void clear_is_vip();
  static const int kIsVipFieldNumber = 7;
  inline bool is_vip() const;
  inline void set_is_vip(bool value);

  // optional int32 scene_id = 8;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 8;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // optional int32 scene_x = 9;
  inline bool has_scene_x() const;
  inline void clear_scene_x();
  static const int kSceneXFieldNumber = 9;
  inline ::google::protobuf::int32 scene_x() const;
  inline void set_scene_x(::google::protobuf::int32 value);

  // optional int32 scene_y = 10;
  inline bool has_scene_y() const;
  inline void clear_scene_y();
  static const int kSceneYFieldNumber = 10;
  inline ::google::protobuf::int32 scene_y() const;
  inline void set_scene_y(::google::protobuf::int32 value);

  // optional int32 scene_line = 11;
  inline bool has_scene_line() const;
  inline void clear_scene_line();
  static const int kSceneLineFieldNumber = 11;
  inline ::google::protobuf::int32 scene_line() const;
  inline void set_scene_line(::google::protobuf::int32 value);

  // optional bool is_ws_city_master = 13;
  inline bool has_is_ws_city_master() const;
  inline void clear_is_ws_city_master();
  static const int kIsWsCityMasterFieldNumber = 13;
  inline bool is_ws_city_master() const;
  inline void set_is_ws_city_master(bool value);

  // optional bool is_long_city_master = 14;
  inline bool has_is_long_city_master() const;
  inline void clear_is_long_city_master();
  static const int kIsLongCityMasterFieldNumber = 14;
  inline bool is_long_city_master() const;
  inline void set_is_long_city_master(bool value);

  // optional int32 city_master_type = 15;
  inline bool has_city_master_type() const;
  inline void clear_city_master_type();
  static const int kCityMasterTypeFieldNumber = 15;
  inline ::google::protobuf::int32 city_master_type() const;
  inline void set_city_master_type(::google::protobuf::int32 value);

  // optional bool is_gm = 18;
  inline bool has_is_gm() const;
  inline void clear_is_gm();
  static const int kIsGmFieldNumber = 18;
  inline bool is_gm() const;
  inline void set_is_gm(bool value);

  // optional int32 platform_vip = 19;
  inline bool has_platform_vip() const;
  inline void clear_platform_vip();
  static const int kPlatformVipFieldNumber = 19;
  inline ::google::protobuf::int32 platform_vip() const;
  inline void set_platform_vip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ChatMessage)
 private:
  inline void set_has_speech();
  inline void clear_has_speech();
  inline void set_has_check_sum();
  inline void clear_has_check_sum();
  inline void set_has_has_my_pos();
  inline void clear_has_has_my_pos();
  inline void set_has_hero_name();
  inline void clear_has_hero_name();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_is_vip();
  inline void clear_has_is_vip();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_x();
  inline void clear_has_scene_x();
  inline void set_has_scene_y();
  inline void clear_has_scene_y();
  inline void set_has_scene_line();
  inline void clear_has_scene_line();
  inline void set_has_is_ws_city_master();
  inline void clear_has_is_ws_city_master();
  inline void set_has_is_long_city_master();
  inline void clear_has_is_long_city_master();
  inline void set_has_city_master_type();
  inline void clear_has_city_master_type();
  inline void set_has_is_gm();
  inline void clear_has_is_gm();
  inline void set_has_platform_vip();
  inline void clear_has_platform_vip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* speech_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ChatMessage_ChatGoods > chat_goods_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gem_;
  ::google::protobuf::int32 check_sum_;
  ::google::protobuf::int32 level_;
  ::std::string* hero_name_;
  ::google::protobuf::int64 hero_id_;
  ::google::protobuf::int32 scene_id_;
  bool has_my_pos_;
  bool is_vip_;
  bool is_ws_city_master_;
  bool is_long_city_master_;
  ::google::protobuf::int32 scene_x_;
  ::google::protobuf::int32 scene_y_;
  ::google::protobuf::int32 scene_line_;
  ::google::protobuf::int32 city_master_type_;
  bool is_gm_;
  ::google::protobuf::int32 platform_vip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class JianDaoProto : public ::google::protobuf::Message {
 public:
  JianDaoProto();
  virtual ~JianDaoProto();

  JianDaoProto(const JianDaoProto& from);

  inline JianDaoProto& operator=(const JianDaoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JianDaoProto& default_instance();

  void Swap(JianDaoProto* other);

  // implements Message ----------------------------------------------

  JianDaoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JianDaoProto& from);
  void MergeFrom(const JianDaoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 storeExp = 1;
  inline bool has_storeexp() const;
  inline void clear_storeexp();
  static const int kStoreExpFieldNumber = 1;
  inline ::google::protobuf::int64 storeexp() const;
  inline void set_storeexp(::google::protobuf::int64 value);

  // optional int32 tianJianLv = 2;
  inline bool has_tianjianlv() const;
  inline void clear_tianjianlv();
  static const int kTianJianLvFieldNumber = 2;
  inline ::google::protobuf::int32 tianjianlv() const;
  inline void set_tianjianlv(::google::protobuf::int32 value);

  // optional int32 moJianLv = 3;
  inline bool has_mojianlv() const;
  inline void clear_mojianlv();
  static const int kMoJianLvFieldNumber = 3;
  inline ::google::protobuf::int32 mojianlv() const;
  inline void set_mojianlv(::google::protobuf::int32 value);

  // optional int32 feiXianLv = 4;
  inline bool has_feixianlv() const;
  inline void clear_feixianlv();
  static const int kFeiXianLvFieldNumber = 4;
  inline ::google::protobuf::int32 feixianlv() const;
  inline void set_feixianlv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.JianDaoProto)
 private:
  inline void set_has_storeexp();
  inline void clear_has_storeexp();
  inline void set_has_tianjianlv();
  inline void clear_has_tianjianlv();
  inline void set_has_mojianlv();
  inline void clear_has_mojianlv();
  inline void set_has_feixianlv();
  inline void clear_has_feixianlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 storeexp_;
  ::google::protobuf::int32 tianjianlv_;
  ::google::protobuf::int32 mojianlv_;
  ::google::protobuf::int32 feixianlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static JianDaoProto* default_instance_;
};
// -------------------------------------------------------------------

class TianXieProto : public ::google::protobuf::Message {
 public:
  TianXieProto();
  virtual ~TianXieProto();

  TianXieProto(const TianXieProto& from);

  inline TianXieProto& operator=(const TianXieProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TianXieProto& default_instance();

  void Swap(TianXieProto* other);

  // implements Message ----------------------------------------------

  TianXieProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TianXieProto& from);
  void MergeFrom(const TianXieProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.TianXieConfigProto tian_xie = 1;
  inline bool has_tian_xie() const;
  inline void clear_tian_xie();
  static const int kTianXieFieldNumber = 1;
  inline const ::app::message::TianXieConfigProto& tian_xie() const;
  inline ::app::message::TianXieConfigProto* mutable_tian_xie();
  inline ::app::message::TianXieConfigProto* release_tian_xie();
  inline void set_allocated_tian_xie(::app::message::TianXieConfigProto* tian_xie);

  // optional int32 bless_amount = 10;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 10;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 11;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 11;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // repeated int32 minor_slot_pos = 2;
  inline int minor_slot_pos_size() const;
  inline void clear_minor_slot_pos();
  static const int kMinorSlotPosFieldNumber = 2;
  inline ::google::protobuf::int32 minor_slot_pos(int index) const;
  inline void set_minor_slot_pos(int index, ::google::protobuf::int32 value);
  inline void add_minor_slot_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      minor_slot_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_minor_slot_pos();

  // repeated int32 minor_slot_nickname = 3;
  inline int minor_slot_nickname_size() const;
  inline void clear_minor_slot_nickname();
  static const int kMinorSlotNicknameFieldNumber = 3;
  inline ::google::protobuf::int32 minor_slot_nickname(int index) const;
  inline void set_minor_slot_nickname(int index, ::google::protobuf::int32 value);
  inline void add_minor_slot_nickname(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      minor_slot_nickname() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_minor_slot_nickname();

  // repeated int32 major_slot_pos = 4;
  inline int major_slot_pos_size() const;
  inline void clear_major_slot_pos();
  static const int kMajorSlotPosFieldNumber = 4;
  inline ::google::protobuf::int32 major_slot_pos(int index) const;
  inline void set_major_slot_pos(int index, ::google::protobuf::int32 value);
  inline void add_major_slot_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      major_slot_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_major_slot_pos();

  // repeated int32 major_slot_nickname = 5;
  inline int major_slot_nickname_size() const;
  inline void clear_major_slot_nickname();
  static const int kMajorSlotNicknameFieldNumber = 5;
  inline ::google::protobuf::int32 major_slot_nickname(int index) const;
  inline void set_major_slot_nickname(int index, ::google::protobuf::int32 value);
  inline void add_major_slot_nickname(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      major_slot_nickname() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_major_slot_nickname();

  // optional int32 upgrade_times = 6;
  inline bool has_upgrade_times() const;
  inline void clear_upgrade_times();
  static const int kUpgradeTimesFieldNumber = 6;
  inline ::google::protobuf::int32 upgrade_times() const;
  inline void set_upgrade_times(::google::protobuf::int32 value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.TianXieProto)
 private:
  inline void set_has_tian_xie();
  inline void clear_has_tian_xie();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_upgrade_times();
  inline void clear_has_upgrade_times();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::TianXieConfigProto* tian_xie_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > minor_slot_pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > minor_slot_nickname_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int32 upgrade_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > major_slot_pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > major_slot_nickname_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static TianXieProto* default_instance_;
};
// -------------------------------------------------------------------

class WuDaoProto : public ::google::protobuf::Message {
 public:
  WuDaoProto();
  virtual ~WuDaoProto();

  WuDaoProto(const WuDaoProto& from);

  inline WuDaoProto& operator=(const WuDaoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WuDaoProto& default_instance();

  void Swap(WuDaoProto* other);

  // implements Message ----------------------------------------------

  WuDaoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WuDaoProto& from);
  void MergeFrom(const WuDaoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.WuDaoConfigProto wu_dao = 1;
  inline bool has_wu_dao() const;
  inline void clear_wu_dao();
  static const int kWuDaoFieldNumber = 1;
  inline const ::app::message::WuDaoConfigProto& wu_dao() const;
  inline ::app::message::WuDaoConfigProto* mutable_wu_dao();
  inline ::app::message::WuDaoConfigProto* release_wu_dao();
  inline void set_allocated_wu_dao(::app::message::WuDaoConfigProto* wu_dao);

  // optional int32 bless_amount = 2;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 2;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 3;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 3;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // repeated int32 mo_bing_equip_type = 10;
  inline int mo_bing_equip_type_size() const;
  inline void clear_mo_bing_equip_type();
  static const int kMoBingEquipTypeFieldNumber = 10;
  inline ::google::protobuf::int32 mo_bing_equip_type(int index) const;
  inline void set_mo_bing_equip_type(int index, ::google::protobuf::int32 value);
  inline void add_mo_bing_equip_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mo_bing_equip_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mo_bing_equip_type();

  // optional int32 upgrade_times = 6;
  inline bool has_upgrade_times() const;
  inline void clear_upgrade_times();
  static const int kUpgradeTimesFieldNumber = 6;
  inline ::google::protobuf::int32 upgrade_times() const;
  inline void set_upgrade_times(::google::protobuf::int32 value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.WuDaoProto)
 private:
  inline void set_has_wu_dao();
  inline void clear_has_wu_dao();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_upgrade_times();
  inline void clear_has_upgrade_times();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::WuDaoConfigProto* wu_dao_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int32 bless_amount_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mo_bing_equip_type_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int32 upgrade_times_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static WuDaoProto* default_instance_;
};
// -------------------------------------------------------------------

class CloakProto : public ::google::protobuf::Message {
 public:
  CloakProto();
  virtual ~CloakProto();

  CloakProto(const CloakProto& from);

  inline CloakProto& operator=(const CloakProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloakProto& default_instance();

  void Swap(CloakProto* other);

  // implements Message ----------------------------------------------

  CloakProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloakProto& from);
  void MergeFrom(const CloakProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.CloakConfigProto cloak = 1;
  inline bool has_cloak() const;
  inline void clear_cloak();
  static const int kCloakFieldNumber = 1;
  inline const ::app::message::CloakConfigProto& cloak() const;
  inline ::app::message::CloakConfigProto* mutable_cloak();
  inline ::app::message::CloakConfigProto* release_cloak();
  inline void set_allocated_cloak(::app::message::CloakConfigProto* cloak);

  // optional int32 bless_amount = 10;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 10;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 11;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 11;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // repeated int32 spell_pos = 12;
  inline int spell_pos_size() const;
  inline void clear_spell_pos();
  static const int kSpellPosFieldNumber = 12;
  inline ::google::protobuf::int32 spell_pos(int index) const;
  inline void set_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_pos();

  // repeated .app.message.ActiveSpell spells = 13;
  inline int spells_size() const;
  inline void clear_spells();
  static const int kSpellsFieldNumber = 13;
  inline const ::app::message::ActiveSpell& spells(int index) const;
  inline ::app::message::ActiveSpell* mutable_spells(int index);
  inline ::app::message::ActiveSpell* add_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_spells();

  // optional bool is_show = 14;
  inline bool has_is_show() const;
  inline void clear_is_show();
  static const int kIsShowFieldNumber = 14;
  inline bool is_show() const;
  inline void set_is_show(bool value);

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.CloakProto)
 private:
  inline void set_has_cloak();
  inline void clear_has_cloak();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_is_show();
  inline void clear_has_is_show();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::CloakConfigProto* cloak_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_pos_;
  ::google::protobuf::int32 bless_amount_;
  bool is_show_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > spells_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static CloakProto* default_instance_;
};
// -------------------------------------------------------------------

class YitianshenjueProto : public ::google::protobuf::Message {
 public:
  YitianshenjueProto();
  virtual ~YitianshenjueProto();

  YitianshenjueProto(const YitianshenjueProto& from);

  inline YitianshenjueProto& operator=(const YitianshenjueProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YitianshenjueProto& default_instance();

  void Swap(YitianshenjueProto* other);

  // implements Message ----------------------------------------------

  YitianshenjueProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YitianshenjueProto& from);
  void MergeFrom(const YitianshenjueProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.SpriteStatProto stat_info = 1;
  inline bool has_stat_info() const;
  inline void clear_stat_info();
  static const int kStatInfoFieldNumber = 1;
  inline const ::app::message::SpriteStatProto& stat_info() const;
  inline ::app::message::SpriteStatProto* mutable_stat_info();
  inline ::app::message::SpriteStatProto* release_stat_info();
  inline void set_allocated_stat_info(::app::message::SpriteStatProto* stat_info);

  // repeated .app.message.SingleStatProto current_add_stat = 2;
  inline int current_add_stat_size() const;
  inline void clear_current_add_stat();
  static const int kCurrentAddStatFieldNumber = 2;
  inline const ::app::message::SingleStatProto& current_add_stat(int index) const;
  inline ::app::message::SingleStatProto* mutable_current_add_stat(int index);
  inline ::app::message::SingleStatProto* add_current_add_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      current_add_stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_current_add_stat();

  // repeated .app.message.SingleStatProto next_add_stat = 3;
  inline int next_add_stat_size() const;
  inline void clear_next_add_stat();
  static const int kNextAddStatFieldNumber = 3;
  inline const ::app::message::SingleStatProto& next_add_stat(int index) const;
  inline ::app::message::SingleStatProto* mutable_next_add_stat(int index);
  inline ::app::message::SingleStatProto* add_next_add_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
      next_add_stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
      mutable_next_add_stat();

  // optional int32 current_cuilian_value = 4;
  inline bool has_current_cuilian_value() const;
  inline void clear_current_cuilian_value();
  static const int kCurrentCuilianValueFieldNumber = 4;
  inline ::google::protobuf::int32 current_cuilian_value() const;
  inline void set_current_cuilian_value(::google::protobuf::int32 value);

  // optional int32 equipment_cuilian_count = 5;
  inline bool has_equipment_cuilian_count() const;
  inline void clear_equipment_cuilian_count();
  static const int kEquipmentCuilianCountFieldNumber = 5;
  inline ::google::protobuf::int32 equipment_cuilian_count() const;
  inline void set_equipment_cuilian_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.YitianshenjueProto)
 private:
  inline void set_has_stat_info();
  inline void clear_has_stat_info();
  inline void set_has_current_cuilian_value();
  inline void clear_has_current_cuilian_value();
  inline void set_has_equipment_cuilian_count();
  inline void clear_has_equipment_cuilian_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::SpriteStatProto* stat_info_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > current_add_stat_;
  ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto > next_add_stat_;
  ::google::protobuf::int32 current_cuilian_value_;
  ::google::protobuf::int32 equipment_cuilian_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static YitianshenjueProto* default_instance_;
};
// -------------------------------------------------------------------

class MountProto : public ::google::protobuf::Message {
 public:
  MountProto();
  virtual ~MountProto();

  MountProto(const MountProto& from);

  inline MountProto& operator=(const MountProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MountProto& default_instance();

  void Swap(MountProto* other);

  // implements Message ----------------------------------------------

  MountProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountProto& from);
  void MergeFrom(const MountProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 best_mount = 1;
  inline bool has_best_mount() const;
  inline void clear_best_mount();
  static const int kBestMountFieldNumber = 1;
  inline ::google::protobuf::int32 best_mount() const;
  inline void set_best_mount(::google::protobuf::int32 value);

  // optional int32 riding_mount = 2;
  inline bool has_riding_mount() const;
  inline void clear_riding_mount();
  static const int kRidingMountFieldNumber = 2;
  inline ::google::protobuf::int32 riding_mount() const;
  inline void set_riding_mount(::google::protobuf::int32 value);

  // optional bool is_ride = 3;
  inline bool has_is_ride() const;
  inline void clear_is_ride();
  static const int kIsRideFieldNumber = 3;
  inline bool is_ride() const;
  inline void set_is_ride(bool value);

  // optional int64 buy_time = 5;
  inline bool has_buy_time() const;
  inline void clear_buy_time();
  static const int kBuyTimeFieldNumber = 5;
  inline ::google::protobuf::int64 buy_time() const;
  inline void set_buy_time(::google::protobuf::int64 value);

  // optional int32 bless_amount = 6;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 6;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 7;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 7;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional .app.message.MountAddedDataProto added_data = 8;
  inline bool has_added_data() const;
  inline void clear_added_data();
  static const int kAddedDataFieldNumber = 8;
  inline const ::app::message::MountAddedDataProto& added_data() const;
  inline ::app::message::MountAddedDataProto* mutable_added_data();
  inline ::app::message::MountAddedDataProto* release_added_data();
  inline void set_allocated_added_data(::app::message::MountAddedDataProto* added_data);

  // repeated int32 spell_pos = 12;
  inline int spell_pos_size() const;
  inline void clear_spell_pos();
  static const int kSpellPosFieldNumber = 12;
  inline ::google::protobuf::int32 spell_pos(int index) const;
  inline void set_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spell_pos();

  // repeated .app.message.ActiveSpell spells = 13;
  inline int spells_size() const;
  inline void clear_spells();
  static const int kSpellsFieldNumber = 13;
  inline const ::app::message::ActiveSpell& spells(int index) const;
  inline ::app::message::ActiveSpell* mutable_spells(int index);
  inline ::app::message::ActiveSpell* add_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_spells();

  // repeated int32 equipment_pos = 14;
  inline int equipment_pos_size() const;
  inline void clear_equipment_pos();
  static const int kEquipmentPosFieldNumber = 14;
  inline ::google::protobuf::int32 equipment_pos(int index) const;
  inline void set_equipment_pos(int index, ::google::protobuf::int32 value);
  inline void add_equipment_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equipment_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equipment_pos();

  // repeated bytes equipment_static_data = 15;
  inline int equipment_static_data_size() const;
  inline void clear_equipment_static_data();
  static const int kEquipmentStaticDataFieldNumber = 15;
  inline const ::std::string& equipment_static_data(int index) const;
  inline ::std::string* mutable_equipment_static_data(int index);
  inline void set_equipment_static_data(int index, const ::std::string& value);
  inline void set_equipment_static_data(int index, const char* value);
  inline void set_equipment_static_data(int index, const void* value, size_t size);
  inline ::std::string* add_equipment_static_data();
  inline void add_equipment_static_data(const ::std::string& value);
  inline void add_equipment_static_data(const char* value);
  inline void add_equipment_static_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& equipment_static_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_equipment_static_data();

  // repeated bytes equipment_dynamic_data = 16;
  inline int equipment_dynamic_data_size() const;
  inline void clear_equipment_dynamic_data();
  static const int kEquipmentDynamicDataFieldNumber = 16;
  inline const ::std::string& equipment_dynamic_data(int index) const;
  inline ::std::string* mutable_equipment_dynamic_data(int index);
  inline void set_equipment_dynamic_data(int index, const ::std::string& value);
  inline void set_equipment_dynamic_data(int index, const char* value);
  inline void set_equipment_dynamic_data(int index, const void* value, size_t size);
  inline ::std::string* add_equipment_dynamic_data();
  inline void add_equipment_dynamic_data(const ::std::string& value);
  inline void add_equipment_dynamic_data(const char* value);
  inline void add_equipment_dynamic_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& equipment_dynamic_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_equipment_dynamic_data();

  // optional int32 qian_neng_use_count = 21;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 21;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 22;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 22;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional bool is_hide_huan_hua = 24;
  inline bool has_is_hide_huan_hua() const;
  inline void clear_is_hide_huan_hua();
  static const int kIsHideHuanHuaFieldNumber = 24;
  inline bool is_hide_huan_hua() const;
  inline void set_is_hide_huan_hua(bool value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MountProto)
 private:
  inline void set_has_best_mount();
  inline void clear_has_best_mount();
  inline void set_has_riding_mount();
  inline void clear_has_riding_mount();
  inline void set_has_is_ride();
  inline void clear_has_is_ride();
  inline void set_has_buy_time();
  inline void clear_has_buy_time();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_added_data();
  inline void clear_has_added_data();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_is_hide_huan_hua();
  inline void clear_has_is_hide_huan_hua();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 best_mount_;
  ::google::protobuf::int32 riding_mount_;
  ::google::protobuf::int64 buy_time_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::app::message::MountAddedDataProto* added_data_;
  ::google::protobuf::int32 bless_amount_;
  bool is_ride_;
  bool is_hide_huan_hua_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spell_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > spells_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equipment_pos_;
  ::google::protobuf::RepeatedPtrField< ::std::string> equipment_static_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> equipment_dynamic_data_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MountProto* default_instance_;
};
// -------------------------------------------------------------------

class MountAddedDataProto : public ::google::protobuf::Message {
 public:
  MountAddedDataProto();
  virtual ~MountAddedDataProto();

  MountAddedDataProto(const MountAddedDataProto& from);

  inline MountAddedDataProto& operator=(const MountAddedDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MountAddedDataProto& default_instance();

  void Swap(MountAddedDataProto* other);

  // implements Message ----------------------------------------------

  MountAddedDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountAddedDataProto& from);
  void MergeFrom(const MountAddedDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.SpriteStatProto added_stat = 2;
  inline int added_stat_size() const;
  inline void clear_added_stat();
  static const int kAddedStatFieldNumber = 2;
  inline const ::app::message::SpriteStatProto& added_stat(int index) const;
  inline ::app::message::SpriteStatProto* mutable_added_stat(int index);
  inline ::app::message::SpriteStatProto* add_added_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SpriteStatProto >&
      added_stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SpriteStatProto >*
      mutable_added_stat();

  // repeated int32 added_fighting_amount = 3;
  inline int added_fighting_amount_size() const;
  inline void clear_added_fighting_amount();
  static const int kAddedFightingAmountFieldNumber = 3;
  inline ::google::protobuf::int32 added_fighting_amount(int index) const;
  inline void set_added_fighting_amount(int index, ::google::protobuf::int32 value);
  inline void add_added_fighting_amount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      added_fighting_amount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_added_fighting_amount();

  // @@protoc_insertion_point(class_scope:app.message.MountAddedDataProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::SpriteStatProto > added_stat_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > added_fighting_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MountAddedDataProto* default_instance_;
};
// -------------------------------------------------------------------

class SuperWeaponProto : public ::google::protobuf::Message {
 public:
  SuperWeaponProto();
  virtual ~SuperWeaponProto();

  SuperWeaponProto(const SuperWeaponProto& from);

  inline SuperWeaponProto& operator=(const SuperWeaponProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuperWeaponProto& default_instance();

  void Swap(SuperWeaponProto* other);

  // implements Message ----------------------------------------------

  SuperWeaponProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuperWeaponProto& from);
  void MergeFrom(const SuperWeaponProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 upgrade_pos = 2;
  inline bool has_upgrade_pos() const;
  inline void clear_upgrade_pos();
  static const int kUpgradePosFieldNumber = 2;
  inline ::google::protobuf::int32 upgrade_pos() const;
  inline void set_upgrade_pos(::google::protobuf::int32 value);

  // optional .app.message.UpgradeProto next_upgrade_data = 6;
  inline bool has_next_upgrade_data() const;
  inline void clear_next_upgrade_data();
  static const int kNextUpgradeDataFieldNumber = 6;
  inline const ::app::message::UpgradeProto& next_upgrade_data() const;
  inline ::app::message::UpgradeProto* mutable_next_upgrade_data();
  inline ::app::message::UpgradeProto* release_next_upgrade_data();
  inline void set_allocated_next_upgrade_data(::app::message::UpgradeProto* next_upgrade_data);

  // optional bool has_unlock_soul = 7;
  inline bool has_has_unlock_soul() const;
  inline void clear_has_unlock_soul();
  static const int kHasUnlockSoulFieldNumber = 7;
  inline bool has_unlock_soul() const;
  inline void set_has_unlock_soul(bool value);

  // optional bool has_unlock_weapon = 8;
  inline bool has_has_unlock_weapon() const;
  inline void clear_has_unlock_weapon();
  static const int kHasUnlockWeaponFieldNumber = 8;
  inline bool has_unlock_weapon() const;
  inline void set_has_unlock_weapon(bool value);

  // optional bool has_unlock_magic_spell = 9;
  inline bool has_has_unlock_magic_spell() const;
  inline void clear_has_unlock_magic_spell();
  static const int kHasUnlockMagicSpellFieldNumber = 9;
  inline bool has_unlock_magic_spell() const;
  inline void set_has_unlock_magic_spell(bool value);

  // optional .app.message.SpriteStatProto added_stat = 10;
  inline bool has_added_stat() const;
  inline void clear_added_stat();
  static const int kAddedStatFieldNumber = 10;
  inline const ::app::message::SpriteStatProto& added_stat() const;
  inline ::app::message::SpriteStatProto* mutable_added_stat();
  inline ::app::message::SpriteStatProto* release_added_stat();
  inline void set_allocated_added_stat(::app::message::SpriteStatProto* added_stat);

  // optional .app.message.SpriteStatProto not_saved_added_stat = 11;
  inline bool has_not_saved_added_stat() const;
  inline void clear_not_saved_added_stat();
  static const int kNotSavedAddedStatFieldNumber = 11;
  inline const ::app::message::SpriteStatProto& not_saved_added_stat() const;
  inline ::app::message::SpriteStatProto* mutable_not_saved_added_stat();
  inline ::app::message::SpriteStatProto* release_not_saved_added_stat();
  inline void set_allocated_not_saved_added_stat(::app::message::SpriteStatProto* not_saved_added_stat);

  // repeated bool has_unlock_weapon_gem = 12;
  inline int has_unlock_weapon_gem_size() const;
  inline void clear_has_unlock_weapon_gem();
  static const int kHasUnlockWeaponGemFieldNumber = 12;
  inline bool has_unlock_weapon_gem(int index) const;
  inline void set_has_unlock_weapon_gem(int index, bool value);
  inline void add_has_unlock_weapon_gem(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      has_unlock_weapon_gem() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_has_unlock_weapon_gem();

  // repeated int32 weapon_gem_level = 13;
  inline int weapon_gem_level_size() const;
  inline void clear_weapon_gem_level();
  static const int kWeaponGemLevelFieldNumber = 13;
  inline ::google::protobuf::int32 weapon_gem_level(int index) const;
  inline void set_weapon_gem_level(int index, ::google::protobuf::int32 value);
  inline void add_weapon_gem_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      weapon_gem_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_weapon_gem_level();

  // repeated bool weapon_gem_binded = 14;
  inline int weapon_gem_binded_size() const;
  inline void clear_weapon_gem_binded();
  static const int kWeaponGemBindedFieldNumber = 14;
  inline bool weapon_gem_binded(int index) const;
  inline void set_weapon_gem_binded(int index, bool value);
  inline void add_weapon_gem_binded(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      weapon_gem_binded() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_weapon_gem_binded();

  // repeated int32 super_upgrade_pos = 21;
  inline int super_upgrade_pos_size() const;
  inline void clear_super_upgrade_pos();
  static const int kSuperUpgradePosFieldNumber = 21;
  inline ::google::protobuf::int32 super_upgrade_pos(int index) const;
  inline void set_super_upgrade_pos(int index, ::google::protobuf::int32 value);
  inline void add_super_upgrade_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      super_upgrade_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_super_upgrade_pos();

  // optional .app.message.SpriteStatProto super_upgrade_stat = 22;
  inline bool has_super_upgrade_stat() const;
  inline void clear_super_upgrade_stat();
  static const int kSuperUpgradeStatFieldNumber = 22;
  inline const ::app::message::SpriteStatProto& super_upgrade_stat() const;
  inline ::app::message::SpriteStatProto* mutable_super_upgrade_stat();
  inline ::app::message::SpriteStatProto* release_super_upgrade_stat();
  inline void set_allocated_super_upgrade_stat(::app::message::SpriteStatProto* super_upgrade_stat);

  // @@protoc_insertion_point(class_scope:app.message.SuperWeaponProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_upgrade_pos();
  inline void clear_has_upgrade_pos();
  inline void set_has_next_upgrade_data();
  inline void clear_has_next_upgrade_data();
  inline void set_has_has_unlock_soul();
  inline void clear_has_has_unlock_soul();
  inline void set_has_has_unlock_weapon();
  inline void clear_has_has_unlock_weapon();
  inline void set_has_has_unlock_magic_spell();
  inline void clear_has_has_unlock_magic_spell();
  inline void set_has_added_stat();
  inline void clear_has_added_stat();
  inline void set_has_not_saved_added_stat();
  inline void clear_has_not_saved_added_stat();
  inline void set_has_super_upgrade_stat();
  inline void clear_has_super_upgrade_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 upgrade_pos_;
  ::app::message::UpgradeProto* next_upgrade_data_;
  ::app::message::SpriteStatProto* added_stat_;
  ::app::message::SpriteStatProto* not_saved_added_stat_;
  ::google::protobuf::RepeatedField< bool > has_unlock_weapon_gem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > weapon_gem_level_;
  ::google::protobuf::RepeatedField< bool > weapon_gem_binded_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > super_upgrade_pos_;
  ::app::message::SpriteStatProto* super_upgrade_stat_;
  bool has_unlock_soul_;
  bool has_unlock_weapon_;
  bool has_unlock_magic_spell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static SuperWeaponProto* default_instance_;
};
// -------------------------------------------------------------------

class StoryDungeonStatProto : public ::google::protobuf::Message {
 public:
  StoryDungeonStatProto();
  virtual ~StoryDungeonStatProto();

  StoryDungeonStatProto(const StoryDungeonStatProto& from);

  inline StoryDungeonStatProto& operator=(const StoryDungeonStatProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoryDungeonStatProto& default_instance();

  void Swap(StoryDungeonStatProto* other);

  // implements Message ----------------------------------------------

  StoryDungeonStatProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoryDungeonStatProto& from);
  void MergeFrom(const StoryDungeonStatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dungeon_id = 1;
  inline bool has_dungeon_id() const;
  inline void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 1;
  inline ::google::protobuf::int32 dungeon_id() const;
  inline void set_dungeon_id(::google::protobuf::int32 value);

  // optional bool is_finished_today = 2;
  inline bool has_is_finished_today() const;
  inline void clear_is_finished_today();
  static const int kIsFinishedTodayFieldNumber = 2;
  inline bool is_finished_today() const;
  inline void set_is_finished_today(bool value);

  // optional int32 fastest_record = 3;
  inline bool has_fastest_record() const;
  inline void clear_fastest_record();
  static const int kFastestRecordFieldNumber = 3;
  inline ::google::protobuf::int32 fastest_record() const;
  inline void set_fastest_record(::google::protobuf::int32 value);

  // optional bool can_not_enter_today = 4;
  inline bool has_can_not_enter_today() const;
  inline void clear_can_not_enter_today();
  static const int kCanNotEnterTodayFieldNumber = 4;
  inline bool can_not_enter_today() const;
  inline void set_can_not_enter_today(bool value);

  // @@protoc_insertion_point(class_scope:app.message.StoryDungeonStatProto)
 private:
  inline void set_has_dungeon_id();
  inline void clear_has_dungeon_id();
  inline void set_has_is_finished_today();
  inline void clear_has_is_finished_today();
  inline void set_has_fastest_record();
  inline void clear_has_fastest_record();
  inline void set_has_can_not_enter_today();
  inline void clear_has_can_not_enter_today();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dungeon_id_;
  ::google::protobuf::int32 fastest_record_;
  bool is_finished_today_;
  bool can_not_enter_today_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static StoryDungeonStatProto* default_instance_;
};
// -------------------------------------------------------------------

class StoryDungeonFinishStatProto : public ::google::protobuf::Message {
 public:
  StoryDungeonFinishStatProto();
  virtual ~StoryDungeonFinishStatProto();

  StoryDungeonFinishStatProto(const StoryDungeonFinishStatProto& from);

  inline StoryDungeonFinishStatProto& operator=(const StoryDungeonFinishStatProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoryDungeonFinishStatProto& default_instance();

  void Swap(StoryDungeonFinishStatProto* other);

  // implements Message ----------------------------------------------

  StoryDungeonFinishStatProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoryDungeonFinishStatProto& from);
  void MergeFrom(const StoryDungeonFinishStatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_time = 1;
  inline bool has_total_time() const;
  inline void clear_total_time();
  static const int kTotalTimeFieldNumber = 1;
  inline ::google::protobuf::int32 total_time() const;
  inline void set_total_time(::google::protobuf::int32 value);

  // optional int32 dead_count = 2;
  inline bool has_dead_count() const;
  inline void clear_dead_count();
  static const int kDeadCountFieldNumber = 2;
  inline ::google::protobuf::int32 dead_count() const;
  inline void set_dead_count(::google::protobuf::int32 value);

  // optional int32 monster_exp = 3;
  inline bool has_monster_exp() const;
  inline void clear_monster_exp();
  static const int kMonsterExpFieldNumber = 3;
  inline ::google::protobuf::int32 monster_exp() const;
  inline void set_monster_exp(::google::protobuf::int32 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 total_time_faster = 7;
  inline bool has_total_time_faster() const;
  inline void clear_total_time_faster();
  static const int kTotalTimeFasterFieldNumber = 7;
  inline ::google::protobuf::int32 total_time_faster() const;
  inline void set_total_time_faster(::google::protobuf::int32 value);

  // repeated .app.message.GoodsWrapperProto score_s_prize = 5;
  inline int score_s_prize_size() const;
  inline void clear_score_s_prize();
  static const int kScoreSPrizeFieldNumber = 5;
  inline const ::app::message::GoodsWrapperProto& score_s_prize(int index) const;
  inline ::app::message::GoodsWrapperProto* mutable_score_s_prize(int index);
  inline ::app::message::GoodsWrapperProto* add_score_s_prize();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >&
      score_s_prize() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >*
      mutable_score_s_prize();

  // repeated .app.message.GoodsWrapperProto vip_prize = 6;
  inline int vip_prize_size() const;
  inline void clear_vip_prize();
  static const int kVipPrizeFieldNumber = 6;
  inline const ::app::message::GoodsWrapperProto& vip_prize(int index) const;
  inline ::app::message::GoodsWrapperProto* mutable_vip_prize(int index);
  inline ::app::message::GoodsWrapperProto* add_vip_prize();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >&
      vip_prize() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >*
      mutable_vip_prize();

  // @@protoc_insertion_point(class_scope:app.message.StoryDungeonFinishStatProto)
 private:
  inline void set_has_total_time();
  inline void clear_has_total_time();
  inline void set_has_dead_count();
  inline void clear_has_dead_count();
  inline void set_has_monster_exp();
  inline void clear_has_monster_exp();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_total_time_faster();
  inline void clear_has_total_time_faster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 total_time_;
  ::google::protobuf::int32 dead_count_;
  ::google::protobuf::int32 monster_exp_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto > score_s_prize_;
  ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto > vip_prize_;
  ::google::protobuf::int32 total_time_faster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static StoryDungeonFinishStatProto* default_instance_;
};
// -------------------------------------------------------------------

class StoryDungeonCollectablePrizeProto : public ::google::protobuf::Message {
 public:
  StoryDungeonCollectablePrizeProto();
  virtual ~StoryDungeonCollectablePrizeProto();

  StoryDungeonCollectablePrizeProto(const StoryDungeonCollectablePrizeProto& from);

  inline StoryDungeonCollectablePrizeProto& operator=(const StoryDungeonCollectablePrizeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoryDungeonCollectablePrizeProto& default_instance();

  void Swap(StoryDungeonCollectablePrizeProto* other);

  // implements Message ----------------------------------------------

  StoryDungeonCollectablePrizeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoryDungeonCollectablePrizeProto& from);
  void MergeFrom(const StoryDungeonCollectablePrizeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dungeon_id = 1;
  inline bool has_dungeon_id() const;
  inline void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 1;
  inline ::google::protobuf::int32 dungeon_id() const;
  inline void set_dungeon_id(::google::protobuf::int32 value);

  // optional bool no_score_s_prize = 2;
  inline bool has_no_score_s_prize() const;
  inline void clear_no_score_s_prize();
  static const int kNoScoreSPrizeFieldNumber = 2;
  inline bool no_score_s_prize() const;
  inline void set_no_score_s_prize(bool value);

  // optional bool has_first_pass_prize = 3;
  inline bool has_has_first_pass_prize() const;
  inline void clear_has_first_pass_prize();
  static const int kHasFirstPassPrizeFieldNumber = 3;
  inline bool has_first_pass_prize() const;
  inline void set_has_first_pass_prize(bool value);

  // optional int64 expire_time = 4;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 4;
  inline ::google::protobuf::int64 expire_time() const;
  inline void set_expire_time(::google::protobuf::int64 value);

  // optional bytes randomed_s_prize = 5;
  inline bool has_randomed_s_prize() const;
  inline void clear_randomed_s_prize();
  static const int kRandomedSPrizeFieldNumber = 5;
  inline const ::std::string& randomed_s_prize() const;
  inline void set_randomed_s_prize(const ::std::string& value);
  inline void set_randomed_s_prize(const char* value);
  inline void set_randomed_s_prize(const void* value, size_t size);
  inline ::std::string* mutable_randomed_s_prize();
  inline ::std::string* release_randomed_s_prize();
  inline void set_allocated_randomed_s_prize(::std::string* randomed_s_prize);

  // optional bytes randomed_vip_prize = 6;
  inline bool has_randomed_vip_prize() const;
  inline void clear_randomed_vip_prize();
  static const int kRandomedVipPrizeFieldNumber = 6;
  inline const ::std::string& randomed_vip_prize() const;
  inline void set_randomed_vip_prize(const ::std::string& value);
  inline void set_randomed_vip_prize(const char* value);
  inline void set_randomed_vip_prize(const void* value, size_t size);
  inline ::std::string* mutable_randomed_vip_prize();
  inline ::std::string* release_randomed_vip_prize();
  inline void set_allocated_randomed_vip_prize(::std::string* randomed_vip_prize);

  // @@protoc_insertion_point(class_scope:app.message.StoryDungeonCollectablePrizeProto)
 private:
  inline void set_has_dungeon_id();
  inline void clear_has_dungeon_id();
  inline void set_has_no_score_s_prize();
  inline void clear_has_no_score_s_prize();
  inline void set_has_has_first_pass_prize();
  inline void clear_has_has_first_pass_prize();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_randomed_s_prize();
  inline void clear_has_randomed_s_prize();
  inline void set_has_randomed_vip_prize();
  inline void clear_has_randomed_vip_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dungeon_id_;
  bool no_score_s_prize_;
  bool has_first_pass_prize_;
  ::google::protobuf::int64 expire_time_;
  ::std::string* randomed_s_prize_;
  ::std::string* randomed_vip_prize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static StoryDungeonCollectablePrizeProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroMarriageProto : public ::google::protobuf::Message {
 public:
  HeroMarriageProto();
  virtual ~HeroMarriageProto();

  HeroMarriageProto(const HeroMarriageProto& from);

  inline HeroMarriageProto& operator=(const HeroMarriageProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroMarriageProto& default_instance();

  void Swap(HeroMarriageProto* other);

  // implements Message ----------------------------------------------

  HeroMarriageProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroMarriageProto& from);
  void MergeFrom(const HeroMarriageProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline ::google::protobuf::int64 target_id() const;
  inline void set_target_id(::google::protobuf::int64 value);

  // optional bytes target_name = 2;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const void* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // optional int32 weapon_level = 3;
  inline bool has_weapon_level() const;
  inline void clear_weapon_level();
  static const int kWeaponLevelFieldNumber = 3;
  inline ::google::protobuf::int32 weapon_level() const;
  inline void set_weapon_level(::google::protobuf::int32 value);

  // optional int32 hao_gan = 4;
  inline bool has_hao_gan() const;
  inline void clear_hao_gan();
  static const int kHaoGanFieldNumber = 4;
  inline ::google::protobuf::int32 hao_gan() const;
  inline void set_hao_gan(::google::protobuf::int32 value);

  // optional int32 marriage_goods_id = 5;
  inline bool has_marriage_goods_id() const;
  inline void clear_marriage_goods_id();
  static const int kMarriageGoodsIdFieldNumber = 5;
  inline ::google::protobuf::int32 marriage_goods_id() const;
  inline void set_marriage_goods_id(::google::protobuf::int32 value);

  // optional int64 marriage_time = 6;
  inline bool has_marriage_time() const;
  inline void clear_marriage_time();
  static const int kMarriageTimeFieldNumber = 6;
  inline ::google::protobuf::int64 marriage_time() const;
  inline void set_marriage_time(::google::protobuf::int64 value);

  // optional int32 hao_gan_today = 7;
  inline bool has_hao_gan_today() const;
  inline void clear_hao_gan_today();
  static const int kHaoGanTodayFieldNumber = 7;
  inline ::google::protobuf::int32 hao_gan_today() const;
  inline void set_hao_gan_today(::google::protobuf::int32 value);

  // optional int32 target_race = 8;
  inline bool has_target_race() const;
  inline void clear_target_race();
  static const int kTargetRaceFieldNumber = 8;
  inline ::google::protobuf::int32 target_race() const;
  inline void set_target_race(::google::protobuf::int32 value);

  // optional bool lao_chu_nv = 9;
  inline bool has_lao_chu_nv() const;
  inline void clear_lao_chu_nv();
  static const int kLaoChuNvFieldNumber = 9;
  inline bool lao_chu_nv() const;
  inline void set_lao_chu_nv(bool value);

  // optional int64 wedding_time = 10;
  inline bool has_wedding_time() const;
  inline void clear_wedding_time();
  static const int kWeddingTimeFieldNumber = 10;
  inline ::google::protobuf::int64 wedding_time() const;
  inline void set_wedding_time(::google::protobuf::int64 value);

  // optional int32 couple_dungeon_times = 11;
  inline bool has_couple_dungeon_times() const;
  inline void clear_couple_dungeon_times();
  static const int kCoupleDungeonTimesFieldNumber = 11;
  inline ::google::protobuf::int32 couple_dungeon_times() const;
  inline void set_couple_dungeon_times(::google::protobuf::int32 value);

  // optional int32 huanhua_count = 12;
  inline bool has_huanhua_count() const;
  inline void clear_huanhua_count();
  static const int kHuanhuaCountFieldNumber = 12;
  inline ::google::protobuf::int32 huanhua_count() const;
  inline void set_huanhua_count(::google::protobuf::int32 value);

  // optional bool is_hide_huan_hua = 13;
  inline bool has_is_hide_huan_hua() const;
  inline void clear_is_hide_huan_hua();
  static const int kIsHideHuanHuaFieldNumber = 13;
  inline bool is_hide_huan_hua() const;
  inline void set_is_hide_huan_hua(bool value);

  // optional int32 huan_hua_extra_max_use_count = 25;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 26;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional bool daily_prize_collected = 27;
  inline bool has_daily_prize_collected() const;
  inline void clear_daily_prize_collected();
  static const int kDailyPrizeCollectedFieldNumber = 27;
  inline bool daily_prize_collected() const;
  inline void set_daily_prize_collected(bool value);

  // repeated int32 collectable_gift_id = 21;
  inline int collectable_gift_id_size() const;
  inline void clear_collectable_gift_id();
  static const int kCollectableGiftIdFieldNumber = 21;
  inline ::google::protobuf::int32 collectable_gift_id(int index) const;
  inline void set_collectable_gift_id(int index, ::google::protobuf::int32 value);
  inline void add_collectable_gift_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      collectable_gift_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_collectable_gift_id();

  // repeated int32 collectable_gift_count = 22;
  inline int collectable_gift_count_size() const;
  inline void clear_collectable_gift_count();
  static const int kCollectableGiftCountFieldNumber = 22;
  inline ::google::protobuf::int32 collectable_gift_count(int index) const;
  inline void set_collectable_gift_count(int index, ::google::protobuf::int32 value);
  inline void add_collectable_gift_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      collectable_gift_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_collectable_gift_count();

  // optional int64 next_check_both_online_add_hao_gan_time = 23;
  inline bool has_next_check_both_online_add_hao_gan_time() const;
  inline void clear_next_check_both_online_add_hao_gan_time();
  static const int kNextCheckBothOnlineAddHaoGanTimeFieldNumber = 23;
  inline ::google::protobuf::int64 next_check_both_online_add_hao_gan_time() const;
  inline void set_next_check_both_online_add_hao_gan_time(::google::protobuf::int64 value);

  // optional int32 total_hao_gan = 24;
  inline bool has_total_hao_gan() const;
  inline void clear_total_hao_gan();
  static const int kTotalHaoGanFieldNumber = 24;
  inline ::google::protobuf::int32 total_hao_gan() const;
  inline void set_total_hao_gan(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroMarriageProto)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_weapon_level();
  inline void clear_has_weapon_level();
  inline void set_has_hao_gan();
  inline void clear_has_hao_gan();
  inline void set_has_marriage_goods_id();
  inline void clear_has_marriage_goods_id();
  inline void set_has_marriage_time();
  inline void clear_has_marriage_time();
  inline void set_has_hao_gan_today();
  inline void clear_has_hao_gan_today();
  inline void set_has_target_race();
  inline void clear_has_target_race();
  inline void set_has_lao_chu_nv();
  inline void clear_has_lao_chu_nv();
  inline void set_has_wedding_time();
  inline void clear_has_wedding_time();
  inline void set_has_couple_dungeon_times();
  inline void clear_has_couple_dungeon_times();
  inline void set_has_huanhua_count();
  inline void clear_has_huanhua_count();
  inline void set_has_is_hide_huan_hua();
  inline void clear_has_is_hide_huan_hua();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();
  inline void set_has_daily_prize_collected();
  inline void clear_has_daily_prize_collected();
  inline void set_has_next_check_both_online_add_hao_gan_time();
  inline void clear_has_next_check_both_online_add_hao_gan_time();
  inline void set_has_total_hao_gan();
  inline void clear_has_total_hao_gan();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 target_id_;
  ::std::string* target_name_;
  ::google::protobuf::int32 weapon_level_;
  ::google::protobuf::int32 hao_gan_;
  ::google::protobuf::int64 marriage_time_;
  ::google::protobuf::int32 marriage_goods_id_;
  ::google::protobuf::int32 hao_gan_today_;
  ::google::protobuf::int32 target_race_;
  ::google::protobuf::int32 couple_dungeon_times_;
  ::google::protobuf::int64 wedding_time_;
  ::google::protobuf::int32 huanhua_count_;
  bool lao_chu_nv_;
  bool is_hide_huan_hua_;
  bool daily_prize_collected_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > collectable_gift_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > collectable_gift_count_;
  ::google::protobuf::int64 next_check_both_online_add_hao_gan_time_;
  ::google::protobuf::int32 total_hao_gan_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroMarriageProto* default_instance_;
};
// -------------------------------------------------------------------

class MarriageStorageProto : public ::google::protobuf::Message {
 public:
  MarriageStorageProto();
  virtual ~MarriageStorageProto();

  MarriageStorageProto(const MarriageStorageProto& from);

  inline MarriageStorageProto& operator=(const MarriageStorageProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarriageStorageProto& default_instance();

  void Swap(MarriageStorageProto* other);

  // implements Message ----------------------------------------------

  MarriageStorageProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarriageStorageProto& from);
  void MergeFrom(const MarriageStorageProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // repeated int32 pos_list = 2;
  inline int pos_list_size() const;
  inline void clear_pos_list();
  static const int kPosListFieldNumber = 2;
  inline ::google::protobuf::int32 pos_list(int index) const;
  inline void set_pos_list(int index, ::google::protobuf::int32 value);
  inline void add_pos_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos_list();

  // repeated bytes goods_data_list = 3;
  inline int goods_data_list_size() const;
  inline void clear_goods_data_list();
  static const int kGoodsDataListFieldNumber = 3;
  inline const ::std::string& goods_data_list(int index) const;
  inline ::std::string* mutable_goods_data_list(int index);
  inline void set_goods_data_list(int index, const ::std::string& value);
  inline void set_goods_data_list(int index, const char* value);
  inline void set_goods_data_list(int index, const void* value, size_t size);
  inline ::std::string* add_goods_data_list();
  inline void add_goods_data_list(const ::std::string& value);
  inline void add_goods_data_list(const char* value);
  inline void add_goods_data_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& goods_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_goods_data_list();

  // repeated bytes goods_list = 4;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 4;
  inline const ::std::string& goods_list(int index) const;
  inline ::std::string* mutable_goods_list(int index);
  inline void set_goods_list(int index, const ::std::string& value);
  inline void set_goods_list(int index, const char* value);
  inline void set_goods_list(int index, const void* value, size_t size);
  inline ::std::string* add_goods_list();
  inline void add_goods_list(const ::std::string& value);
  inline void add_goods_list(const char* value);
  inline void add_goods_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_goods_list();

  // repeated .app.message.MarriageStorageLogProto log = 5;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 5;
  inline const ::app::message::MarriageStorageLogProto& log(int index) const;
  inline ::app::message::MarriageStorageLogProto* mutable_log(int index);
  inline ::app::message::MarriageStorageLogProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::MarriageStorageLogProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::MarriageStorageLogProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:app.message.MarriageStorageProto)
 private:
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> goods_data_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> goods_list_;
  ::google::protobuf::RepeatedPtrField< ::app::message::MarriageStorageLogProto > log_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MarriageStorageProto* default_instance_;
};
// -------------------------------------------------------------------

class MarriageStorageLogProto : public ::google::protobuf::Message {
 public:
  MarriageStorageLogProto();
  virtual ~MarriageStorageLogProto();

  MarriageStorageLogProto(const MarriageStorageLogProto& from);

  inline MarriageStorageLogProto& operator=(const MarriageStorageLogProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarriageStorageLogProto& default_instance();

  void Swap(MarriageStorageLogProto* other);

  // implements Message ----------------------------------------------

  MarriageStorageLogProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarriageStorageLogProto& from);
  void MergeFrom(const MarriageStorageLogProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional bytes hero_name_bytes = 2;
  inline bool has_hero_name_bytes() const;
  inline void clear_hero_name_bytes();
  static const int kHeroNameBytesFieldNumber = 2;
  inline const ::std::string& hero_name_bytes() const;
  inline void set_hero_name_bytes(const ::std::string& value);
  inline void set_hero_name_bytes(const char* value);
  inline void set_hero_name_bytes(const void* value, size_t size);
  inline ::std::string* mutable_hero_name_bytes();
  inline ::std::string* release_hero_name_bytes();
  inline void set_allocated_hero_name_bytes(::std::string* hero_name_bytes);

  // optional bytes goods_name_bytes = 3;
  inline bool has_goods_name_bytes() const;
  inline void clear_goods_name_bytes();
  static const int kGoodsNameBytesFieldNumber = 3;
  inline const ::std::string& goods_name_bytes() const;
  inline void set_goods_name_bytes(const ::std::string& value);
  inline void set_goods_name_bytes(const char* value);
  inline void set_goods_name_bytes(const void* value, size_t size);
  inline ::std::string* mutable_goods_name_bytes();
  inline ::std::string* release_goods_name_bytes();
  inline void set_allocated_goods_name_bytes(::std::string* goods_name_bytes);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.MarriageStorageLogProto)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_hero_name_bytes();
  inline void clear_has_hero_name_bytes();
  inline void set_has_goods_name_bytes();
  inline void clear_has_goods_name_bytes();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::std::string* hero_name_bytes_;
  ::std::string* goods_name_bytes_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static MarriageStorageLogProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroLoveProto : public ::google::protobuf::Message {
 public:
  HeroLoveProto();
  virtual ~HeroLoveProto();

  HeroLoveProto(const HeroLoveProto& from);

  inline HeroLoveProto& operator=(const HeroLoveProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroLoveProto& default_instance();

  void Swap(HeroLoveProto* other);

  // implements Message ----------------------------------------------

  HeroLoveProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroLoveProto& from);
  void MergeFrom(const HeroLoveProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool daily_collected = 1;
  inline bool has_daily_collected() const;
  inline void clear_daily_collected();
  static const int kDailyCollectedFieldNumber = 1;
  inline bool daily_collected() const;
  inline void set_daily_collected(bool value);

  // optional int32 exchange_point = 2;
  inline bool has_exchange_point() const;
  inline void clear_exchange_point();
  static const int kExchangePointFieldNumber = 2;
  inline ::google::protobuf::int32 exchange_point() const;
  inline void set_exchange_point(::google::protobuf::int32 value);

  // repeated int32 exchange_id = 3;
  inline int exchange_id_size() const;
  inline void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 3;
  inline ::google::protobuf::int32 exchange_id(int index) const;
  inline void set_exchange_id(int index, ::google::protobuf::int32 value);
  inline void add_exchange_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      exchange_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_exchange_id();

  // repeated int32 exchange_today_count = 4;
  inline int exchange_today_count_size() const;
  inline void clear_exchange_today_count();
  static const int kExchangeTodayCountFieldNumber = 4;
  inline ::google::protobuf::int32 exchange_today_count(int index) const;
  inline void set_exchange_today_count(int index, ::google::protobuf::int32 value);
  inline void add_exchange_today_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      exchange_today_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_exchange_today_count();

  // optional int32 online_collected_max_minutes = 5;
  inline bool has_online_collected_max_minutes() const;
  inline void clear_online_collected_max_minutes();
  static const int kOnlineCollectedMaxMinutesFieldNumber = 5;
  inline ::google::protobuf::int32 online_collected_max_minutes() const;
  inline void set_online_collected_max_minutes(::google::protobuf::int32 value);

  // optional int32 online_today_minutes = 6;
  inline bool has_online_today_minutes() const;
  inline void clear_online_today_minutes();
  static const int kOnlineTodayMinutesFieldNumber = 6;
  inline ::google::protobuf::int32 online_today_minutes() const;
  inline void set_online_today_minutes(::google::protobuf::int32 value);

  // optional int32 online_minutes = 7;
  inline bool has_online_minutes() const;
  inline void clear_online_minutes();
  static const int kOnlineMinutesFieldNumber = 7;
  inline ::google::protobuf::int32 online_minutes() const;
  inline void set_online_minutes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroLoveProto)
 private:
  inline void set_has_daily_collected();
  inline void clear_has_daily_collected();
  inline void set_has_exchange_point();
  inline void clear_has_exchange_point();
  inline void set_has_online_collected_max_minutes();
  inline void clear_has_online_collected_max_minutes();
  inline void set_has_online_today_minutes();
  inline void clear_has_online_today_minutes();
  inline void set_has_online_minutes();
  inline void clear_has_online_minutes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool daily_collected_;
  ::google::protobuf::int32 exchange_point_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > exchange_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > exchange_today_count_;
  ::google::protobuf::int32 online_collected_max_minutes_;
  ::google::protobuf::int32 online_today_minutes_;
  ::google::protobuf::int32 online_minutes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroLoveProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroLoveExchangeProto : public ::google::protobuf::Message {
 public:
  HeroLoveExchangeProto();
  virtual ~HeroLoveExchangeProto();

  HeroLoveExchangeProto(const HeroLoveExchangeProto& from);

  inline HeroLoveExchangeProto& operator=(const HeroLoveExchangeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroLoveExchangeProto& default_instance();

  void Swap(HeroLoveExchangeProto* other);

  // implements Message ----------------------------------------------

  HeroLoveExchangeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroLoveExchangeProto& from);
  void MergeFrom(const HeroLoveExchangeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 exchange_point = 1;
  inline bool has_exchange_point() const;
  inline void clear_exchange_point();
  static const int kExchangePointFieldNumber = 1;
  inline ::google::protobuf::int32 exchange_point() const;
  inline void set_exchange_point(::google::protobuf::int32 value);

  // repeated int32 exchange_id = 2;
  inline int exchange_id_size() const;
  inline void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 2;
  inline ::google::protobuf::int32 exchange_id(int index) const;
  inline void set_exchange_id(int index, ::google::protobuf::int32 value);
  inline void add_exchange_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      exchange_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_exchange_id();

  // repeated int32 exchange_today_count = 3;
  inline int exchange_today_count_size() const;
  inline void clear_exchange_today_count();
  static const int kExchangeTodayCountFieldNumber = 3;
  inline ::google::protobuf::int32 exchange_today_count(int index) const;
  inline void set_exchange_today_count(int index, ::google::protobuf::int32 value);
  inline void add_exchange_today_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      exchange_today_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_exchange_today_count();

  // @@protoc_insertion_point(class_scope:app.message.HeroLoveExchangeProto)
 private:
  inline void set_has_exchange_point();
  inline void clear_has_exchange_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > exchange_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > exchange_today_count_;
  ::google::protobuf::int32 exchange_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroLoveExchangeProto* default_instance_;
};
// -------------------------------------------------------------------

class ArenaFightingTeamRankTeamInfoProto : public ::google::protobuf::Message {
 public:
  ArenaFightingTeamRankTeamInfoProto();
  virtual ~ArenaFightingTeamRankTeamInfoProto();

  ArenaFightingTeamRankTeamInfoProto(const ArenaFightingTeamRankTeamInfoProto& from);

  inline ArenaFightingTeamRankTeamInfoProto& operator=(const ArenaFightingTeamRankTeamInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaFightingTeamRankTeamInfoProto& default_instance();

  void Swap(ArenaFightingTeamRankTeamInfoProto* other);

  // implements Message ----------------------------------------------

  ArenaFightingTeamRankTeamInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaFightingTeamRankTeamInfoProto& from);
  void MergeFrom(const ArenaFightingTeamRankTeamInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.ArenaFightingTeamRankMemberInfoProto member_info = 1;
  inline int member_info_size() const;
  inline void clear_member_info();
  static const int kMemberInfoFieldNumber = 1;
  inline const ::app::message::ArenaFightingTeamRankMemberInfoProto& member_info(int index) const;
  inline ::app::message::ArenaFightingTeamRankMemberInfoProto* mutable_member_info(int index);
  inline ::app::message::ArenaFightingTeamRankMemberInfoProto* add_member_info();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ArenaFightingTeamRankMemberInfoProto >&
      member_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ArenaFightingTeamRankMemberInfoProto >*
      mutable_member_info();

  // @@protoc_insertion_point(class_scope:app.message.ArenaFightingTeamRankTeamInfoProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::ArenaFightingTeamRankMemberInfoProto > member_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ArenaFightingTeamRankTeamInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class ArenaFightingTeamRankMemberInfoProto : public ::google::protobuf::Message {
 public:
  ArenaFightingTeamRankMemberInfoProto();
  virtual ~ArenaFightingTeamRankMemberInfoProto();

  ArenaFightingTeamRankMemberInfoProto(const ArenaFightingTeamRankMemberInfoProto& from);

  inline ArenaFightingTeamRankMemberInfoProto& operator=(const ArenaFightingTeamRankMemberInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaFightingTeamRankMemberInfoProto& default_instance();

  void Swap(ArenaFightingTeamRankMemberInfoProto* other);

  // implements Message ----------------------------------------------

  ArenaFightingTeamRankMemberInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaFightingTeamRankMemberInfoProto& from);
  void MergeFrom(const ArenaFightingTeamRankMemberInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::int64 hero_id() const;
  inline void set_hero_id(::google::protobuf::int64 value);

  // optional bytes hero_name_bytes = 2;
  inline bool has_hero_name_bytes() const;
  inline void clear_hero_name_bytes();
  static const int kHeroNameBytesFieldNumber = 2;
  inline const ::std::string& hero_name_bytes() const;
  inline void set_hero_name_bytes(const ::std::string& value);
  inline void set_hero_name_bytes(const char* value);
  inline void set_hero_name_bytes(const void* value, size_t size);
  inline ::std::string* mutable_hero_name_bytes();
  inline ::std::string* release_hero_name_bytes();
  inline void set_allocated_hero_name_bytes(::std::string* hero_name_bytes);

  // optional int32 hero_race = 3;
  inline bool has_hero_race() const;
  inline void clear_hero_race();
  static const int kHeroRaceFieldNumber = 3;
  inline ::google::protobuf::int32 hero_race() const;
  inline void set_hero_race(::google::protobuf::int32 value);

  // optional int32 hero_fighting_amount = 4;
  inline bool has_hero_fighting_amount() const;
  inline void clear_hero_fighting_amount();
  static const int kHeroFightingAmountFieldNumber = 4;
  inline ::google::protobuf::int32 hero_fighting_amount() const;
  inline void set_hero_fighting_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ArenaFightingTeamRankMemberInfoProto)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_name_bytes();
  inline void clear_has_hero_name_bytes();
  inline void set_has_hero_race();
  inline void clear_has_hero_race();
  inline void set_has_hero_fighting_amount();
  inline void clear_has_hero_fighting_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 hero_id_;
  ::std::string* hero_name_bytes_;
  ::google::protobuf::int32 hero_race_;
  ::google::protobuf::int32 hero_fighting_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ArenaFightingTeamRankMemberInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class ClientYuanbaoCostLogProto : public ::google::protobuf::Message {
 public:
  ClientYuanbaoCostLogProto();
  virtual ~ClientYuanbaoCostLogProto();

  ClientYuanbaoCostLogProto(const ClientYuanbaoCostLogProto& from);

  inline ClientYuanbaoCostLogProto& operator=(const ClientYuanbaoCostLogProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientYuanbaoCostLogProto& default_instance();

  void Swap(ClientYuanbaoCostLogProto* other);

  // implements Message ----------------------------------------------

  ClientYuanbaoCostLogProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientYuanbaoCostLogProto& from);
  void MergeFrom(const ClientYuanbaoCostLogProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.ClientSingleYuanbaoCostLogProto single_yuanbao_cost_logs = 1;
  inline int single_yuanbao_cost_logs_size() const;
  inline void clear_single_yuanbao_cost_logs();
  static const int kSingleYuanbaoCostLogsFieldNumber = 1;
  inline const ::app::message::ClientSingleYuanbaoCostLogProto& single_yuanbao_cost_logs(int index) const;
  inline ::app::message::ClientSingleYuanbaoCostLogProto* mutable_single_yuanbao_cost_logs(int index);
  inline ::app::message::ClientSingleYuanbaoCostLogProto* add_single_yuanbao_cost_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ClientSingleYuanbaoCostLogProto >&
      single_yuanbao_cost_logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ClientSingleYuanbaoCostLogProto >*
      mutable_single_yuanbao_cost_logs();

  // @@protoc_insertion_point(class_scope:app.message.ClientYuanbaoCostLogProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::ClientSingleYuanbaoCostLogProto > single_yuanbao_cost_logs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ClientYuanbaoCostLogProto* default_instance_;
};
// -------------------------------------------------------------------

class ClientSingleYuanbaoCostLogProto : public ::google::protobuf::Message {
 public:
  ClientSingleYuanbaoCostLogProto();
  virtual ~ClientSingleYuanbaoCostLogProto();

  ClientSingleYuanbaoCostLogProto(const ClientSingleYuanbaoCostLogProto& from);

  inline ClientSingleYuanbaoCostLogProto& operator=(const ClientSingleYuanbaoCostLogProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSingleYuanbaoCostLogProto& default_instance();

  void Swap(ClientSingleYuanbaoCostLogProto* other);

  // implements Message ----------------------------------------------

  ClientSingleYuanbaoCostLogProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientSingleYuanbaoCostLogProto& from);
  void MergeFrom(const ClientSingleYuanbaoCostLogProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 yuanbao = 3;
  inline bool has_yuanbao() const;
  inline void clear_yuanbao();
  static const int kYuanbaoFieldNumber = 3;
  inline ::google::protobuf::int32 yuanbao() const;
  inline void set_yuanbao(::google::protobuf::int32 value);

  // optional int32 bindYuanbao = 4;
  inline bool has_bindyuanbao() const;
  inline void clear_bindyuanbao();
  static const int kBindYuanbaoFieldNumber = 4;
  inline ::google::protobuf::int32 bindyuanbao() const;
  inline void set_bindyuanbao(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ClientSingleYuanbaoCostLogProto)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_yuanbao();
  inline void clear_has_yuanbao();
  inline void set_has_bindyuanbao();
  inline void clear_has_bindyuanbao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 yuanbao_;
  ::google::protobuf::int32 bindyuanbao_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ClientSingleYuanbaoCostLogProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroAnniversaryProto : public ::google::protobuf::Message {
 public:
  HeroAnniversaryProto();
  virtual ~HeroAnniversaryProto();

  HeroAnniversaryProto(const HeroAnniversaryProto& from);

  inline HeroAnniversaryProto& operator=(const HeroAnniversaryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroAnniversaryProto& default_instance();

  void Swap(HeroAnniversaryProto* other);

  // implements Message ----------------------------------------------

  HeroAnniversaryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroAnniversaryProto& from);
  void MergeFrom(const HeroAnniversaryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool cake_today_collected = 1;
  inline bool has_cake_today_collected() const;
  inline void clear_cake_today_collected();
  static const int kCakeTodayCollectedFieldNumber = 1;
  inline bool cake_today_collected() const;
  inline void set_cake_today_collected(bool value);

  // optional bool daily_normal_collected = 2;
  inline bool has_daily_normal_collected() const;
  inline void clear_daily_normal_collected();
  static const int kDailyNormalCollectedFieldNumber = 2;
  inline bool daily_normal_collected() const;
  inline void set_daily_normal_collected(bool value);

  // optional bool daily_vip_collected = 3;
  inline bool has_daily_vip_collected() const;
  inline void clear_daily_vip_collected();
  static const int kDailyVipCollectedFieldNumber = 3;
  inline bool daily_vip_collected() const;
  inline void set_daily_vip_collected(bool value);

  // optional int32 recharge_yuanbao = 4;
  inline bool has_recharge_yuanbao() const;
  inline void clear_recharge_yuanbao();
  static const int kRechargeYuanbaoFieldNumber = 4;
  inline ::google::protobuf::int32 recharge_yuanbao() const;
  inline void set_recharge_yuanbao(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroAnniversaryProto)
 private:
  inline void set_has_cake_today_collected();
  inline void clear_has_cake_today_collected();
  inline void set_has_daily_normal_collected();
  inline void clear_has_daily_normal_collected();
  inline void set_has_daily_vip_collected();
  inline void clear_has_daily_vip_collected();
  inline void set_has_recharge_yuanbao();
  inline void clear_has_recharge_yuanbao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool cake_today_collected_;
  bool daily_normal_collected_;
  bool daily_vip_collected_;
  ::google::protobuf::int32 recharge_yuanbao_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroAnniversaryProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroAnniversaryTaskProto : public ::google::protobuf::Message {
 public:
  HeroAnniversaryTaskProto();
  virtual ~HeroAnniversaryTaskProto();

  HeroAnniversaryTaskProto(const HeroAnniversaryTaskProto& from);

  inline HeroAnniversaryTaskProto& operator=(const HeroAnniversaryTaskProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroAnniversaryTaskProto& default_instance();

  void Swap(HeroAnniversaryTaskProto* other);

  // implements Message ----------------------------------------------

  HeroAnniversaryTaskProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroAnniversaryTaskProto& from);
  void MergeFrom(const HeroAnniversaryTaskProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.SingleHeroAnniversaryDailyTaskProto current_task = 1;
  inline bool has_current_task() const;
  inline void clear_current_task();
  static const int kCurrentTaskFieldNumber = 1;
  inline const ::app::message::SingleHeroAnniversaryDailyTaskProto& current_task() const;
  inline ::app::message::SingleHeroAnniversaryDailyTaskProto* mutable_current_task();
  inline ::app::message::SingleHeroAnniversaryDailyTaskProto* release_current_task();
  inline void set_allocated_current_task(::app::message::SingleHeroAnniversaryDailyTaskProto* current_task);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional bool final_prize_collected = 3 [default = false];
  inline bool has_final_prize_collected() const;
  inline void clear_final_prize_collected();
  static const int kFinalPrizeCollectedFieldNumber = 3;
  inline bool final_prize_collected() const;
  inline void set_final_prize_collected(bool value);

  // @@protoc_insertion_point(class_scope:app.message.HeroAnniversaryTaskProto)
 private:
  inline void set_has_current_task();
  inline void clear_has_current_task();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_final_prize_collected();
  inline void clear_has_final_prize_collected();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::SingleHeroAnniversaryDailyTaskProto* current_task_;
  ::google::protobuf::int32 index_;
  bool final_prize_collected_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroAnniversaryTaskProto* default_instance_;
};
// -------------------------------------------------------------------

class SingleHeroAnniversaryDailyTaskProto : public ::google::protobuf::Message {
 public:
  SingleHeroAnniversaryDailyTaskProto();
  virtual ~SingleHeroAnniversaryDailyTaskProto();

  SingleHeroAnniversaryDailyTaskProto(const SingleHeroAnniversaryDailyTaskProto& from);

  inline SingleHeroAnniversaryDailyTaskProto& operator=(const SingleHeroAnniversaryDailyTaskProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleHeroAnniversaryDailyTaskProto& default_instance();

  void Swap(SingleHeroAnniversaryDailyTaskProto* other);

  // implements Message ----------------------------------------------

  SingleHeroAnniversaryDailyTaskProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleHeroAnniversaryDailyTaskProto& from);
  void MergeFrom(const SingleHeroAnniversaryDailyTaskProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.SingleAnniversaryDailyTaskProto task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::app::message::SingleAnniversaryDailyTaskProto& task() const;
  inline ::app::message::SingleAnniversaryDailyTaskProto* mutable_task();
  inline ::app::message::SingleAnniversaryDailyTaskProto* release_task();
  inline void set_allocated_task(::app::message::SingleAnniversaryDailyTaskProto* task);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional bool is_completed = 3;
  inline bool has_is_completed() const;
  inline void clear_is_completed();
  static const int kIsCompletedFieldNumber = 3;
  inline bool is_completed() const;
  inline void set_is_completed(bool value);

  // optional bool prize_collected = 4;
  inline bool has_prize_collected() const;
  inline void clear_prize_collected();
  static const int kPrizeCollectedFieldNumber = 4;
  inline bool prize_collected() const;
  inline void set_prize_collected(bool value);

  // optional int32 refresh_times = 5;
  inline bool has_refresh_times() const;
  inline void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 5;
  inline ::google::protobuf::int32 refresh_times() const;
  inline void set_refresh_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.SingleHeroAnniversaryDailyTaskProto)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_is_completed();
  inline void clear_has_is_completed();
  inline void set_has_prize_collected();
  inline void clear_has_prize_collected();
  inline void set_has_refresh_times();
  inline void clear_has_refresh_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::SingleAnniversaryDailyTaskProto* task_;
  ::google::protobuf::int32 count_;
  bool is_completed_;
  bool prize_collected_;
  ::google::protobuf::int32 refresh_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static SingleHeroAnniversaryDailyTaskProto* default_instance_;
};
// -------------------------------------------------------------------

class ShieldProto : public ::google::protobuf::Message {
 public:
  ShieldProto();
  virtual ~ShieldProto();

  ShieldProto(const ShieldProto& from);

  inline ShieldProto& operator=(const ShieldProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShieldProto& default_instance();

  void Swap(ShieldProto* other);

  // implements Message ----------------------------------------------

  ShieldProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShieldProto& from);
  void MergeFrom(const ShieldProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .app.message.SingleShieldProto shields = 1;
  inline int shields_size() const;
  inline void clear_shields();
  static const int kShieldsFieldNumber = 1;
  inline const ::app::message::SingleShieldProto& shields(int index) const;
  inline ::app::message::SingleShieldProto* mutable_shields(int index);
  inline ::app::message::SingleShieldProto* add_shields();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleShieldProto >&
      shields() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleShieldProto >*
      mutable_shields();

  // optional int32 current_id = 3;
  inline bool has_current_id() const;
  inline void clear_current_id();
  static const int kCurrentIdFieldNumber = 3;
  inline ::google::protobuf::int32 current_id() const;
  inline void set_current_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.ShieldProto)
 private:
  inline void set_has_current_id();
  inline void clear_has_current_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::SingleShieldProto > shields_;
  ::google::protobuf::int32 current_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static ShieldProto* default_instance_;
};
// -------------------------------------------------------------------

class SingleShieldProto : public ::google::protobuf::Message {
 public:
  SingleShieldProto();
  virtual ~SingleShieldProto();

  SingleShieldProto(const SingleShieldProto& from);

  inline SingleShieldProto& operator=(const SingleShieldProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleShieldProto& default_instance();

  void Swap(SingleShieldProto* other);

  // implements Message ----------------------------------------------

  SingleShieldProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleShieldProto& from);
  void MergeFrom(const SingleShieldProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .app.message.ShieldDataProto data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::app::message::ShieldDataProto& data() const;
  inline ::app::message::ShieldDataProto* mutable_data();
  inline ::app::message::ShieldDataProto* release_data();
  inline void set_allocated_data(::app::message::ShieldDataProto* data);

  // optional .app.message.ShieldLevelDataProto level_data = 2;
  inline bool has_level_data() const;
  inline void clear_level_data();
  static const int kLevelDataFieldNumber = 2;
  inline const ::app::message::ShieldLevelDataProto& level_data() const;
  inline ::app::message::ShieldLevelDataProto* mutable_level_data();
  inline ::app::message::ShieldLevelDataProto* release_level_data();
  inline void set_allocated_level_data(::app::message::ShieldLevelDataProto* level_data);

  // optional .app.message.ActiveSpell special_spell_1 = 3;
  inline bool has_special_spell_1() const;
  inline void clear_special_spell_1();
  static const int kSpecialSpell1FieldNumber = 3;
  inline const ::app::message::ActiveSpell& special_spell_1() const;
  inline ::app::message::ActiveSpell* mutable_special_spell_1();
  inline ::app::message::ActiveSpell* release_special_spell_1();
  inline void set_allocated_special_spell_1(::app::message::ActiveSpell* special_spell_1);

  // optional .app.message.ActiveSpell special_spell_2 = 4;
  inline bool has_special_spell_2() const;
  inline void clear_special_spell_2();
  static const int kSpecialSpell2FieldNumber = 4;
  inline const ::app::message::ActiveSpell& special_spell_2() const;
  inline ::app::message::ActiveSpell* mutable_special_spell_2();
  inline ::app::message::ActiveSpell* release_special_spell_2();
  inline void set_allocated_special_spell_2(::app::message::ActiveSpell* special_spell_2);

  // repeated int32 normal_spell_pos = 5;
  inline int normal_spell_pos_size() const;
  inline void clear_normal_spell_pos();
  static const int kNormalSpellPosFieldNumber = 5;
  inline ::google::protobuf::int32 normal_spell_pos(int index) const;
  inline void set_normal_spell_pos(int index, ::google::protobuf::int32 value);
  inline void add_normal_spell_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      normal_spell_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_normal_spell_pos();

  // repeated .app.message.ActiveSpell normal_spells = 6;
  inline int normal_spells_size() const;
  inline void clear_normal_spells();
  static const int kNormalSpellsFieldNumber = 6;
  inline const ::app::message::ActiveSpell& normal_spells(int index) const;
  inline ::app::message::ActiveSpell* mutable_normal_spells(int index);
  inline ::app::message::ActiveSpell* add_normal_spells();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
      normal_spells() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
      mutable_normal_spells();

  // repeated int32 equipment_pos = 7;
  inline int equipment_pos_size() const;
  inline void clear_equipment_pos();
  static const int kEquipmentPosFieldNumber = 7;
  inline ::google::protobuf::int32 equipment_pos(int index) const;
  inline void set_equipment_pos(int index, ::google::protobuf::int32 value);
  inline void add_equipment_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equipment_pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equipment_pos();

  // repeated bytes equipment_static_data = 8;
  inline int equipment_static_data_size() const;
  inline void clear_equipment_static_data();
  static const int kEquipmentStaticDataFieldNumber = 8;
  inline const ::std::string& equipment_static_data(int index) const;
  inline ::std::string* mutable_equipment_static_data(int index);
  inline void set_equipment_static_data(int index, const ::std::string& value);
  inline void set_equipment_static_data(int index, const char* value);
  inline void set_equipment_static_data(int index, const void* value, size_t size);
  inline ::std::string* add_equipment_static_data();
  inline void add_equipment_static_data(const ::std::string& value);
  inline void add_equipment_static_data(const char* value);
  inline void add_equipment_static_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& equipment_static_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_equipment_static_data();

  // repeated bytes equipment_dynamic_data = 9;
  inline int equipment_dynamic_data_size() const;
  inline void clear_equipment_dynamic_data();
  static const int kEquipmentDynamicDataFieldNumber = 9;
  inline const ::std::string& equipment_dynamic_data(int index) const;
  inline ::std::string* mutable_equipment_dynamic_data(int index);
  inline void set_equipment_dynamic_data(int index, const ::std::string& value);
  inline void set_equipment_dynamic_data(int index, const char* value);
  inline void set_equipment_dynamic_data(int index, const void* value, size_t size);
  inline ::std::string* add_equipment_dynamic_data();
  inline void add_equipment_dynamic_data(const ::std::string& value);
  inline void add_equipment_dynamic_data(const char* value);
  inline void add_equipment_dynamic_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& equipment_dynamic_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_equipment_dynamic_data();

  // optional int32 qian_neng_use_count = 10;
  inline bool has_qian_neng_use_count() const;
  inline void clear_qian_neng_use_count();
  static const int kQianNengUseCountFieldNumber = 10;
  inline ::google::protobuf::int32 qian_neng_use_count() const;
  inline void set_qian_neng_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_use_count = 11;
  inline bool has_huan_hua_use_count() const;
  inline void clear_huan_hua_use_count();
  static const int kHuanHuaUseCountFieldNumber = 11;
  inline ::google::protobuf::int32 huan_hua_use_count() const;
  inline void set_huan_hua_use_count(::google::protobuf::int32 value);

  // optional int32 bless_amount = 12;
  inline bool has_bless_amount() const;
  inline void clear_bless_amount();
  static const int kBlessAmountFieldNumber = 12;
  inline ::google::protobuf::int32 bless_amount() const;
  inline void set_bless_amount(::google::protobuf::int32 value);

  // optional int64 bless_amount_clear_time = 13;
  inline bool has_bless_amount_clear_time() const;
  inline void clear_bless_amount_clear_time();
  static const int kBlessAmountClearTimeFieldNumber = 13;
  inline ::google::protobuf::int64 bless_amount_clear_time() const;
  inline void set_bless_amount_clear_time(::google::protobuf::int64 value);

  // optional int64 exp = 14;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 14;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional bool is_super_model = 15;
  inline bool has_is_super_model() const;
  inline void clear_is_super_model();
  static const int kIsSuperModelFieldNumber = 15;
  inline bool is_super_model() const;
  inline void set_is_super_model(bool value);

  // optional bool is_super_model_2 = 17;
  inline bool has_is_super_model_2() const;
  inline void clear_is_super_model_2();
  static const int kIsSuperModel2FieldNumber = 17;
  inline bool is_super_model_2() const;
  inline void set_is_super_model_2(bool value);

  // optional int32 nickname_id = 18;
  inline bool has_nickname_id() const;
  inline void clear_nickname_id();
  static const int kNicknameIdFieldNumber = 18;
  inline ::google::protobuf::int32 nickname_id() const;
  inline void set_nickname_id(::google::protobuf::int32 value);

  // optional int32 upgrade_times = 16;
  inline bool has_upgrade_times() const;
  inline void clear_upgrade_times();
  static const int kUpgradeTimesFieldNumber = 16;
  inline ::google::protobuf::int32 upgrade_times() const;
  inline void set_upgrade_times(::google::protobuf::int32 value);

  // optional int32 qian_neng_extra_max_use_count = 25;
  inline bool has_qian_neng_extra_max_use_count() const;
  inline void clear_qian_neng_extra_max_use_count();
  static const int kQianNengExtraMaxUseCountFieldNumber = 25;
  inline ::google::protobuf::int32 qian_neng_extra_max_use_count() const;
  inline void set_qian_neng_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 huan_hua_extra_max_use_count = 26;
  inline bool has_huan_hua_extra_max_use_count() const;
  inline void clear_huan_hua_extra_max_use_count();
  static const int kHuanHuaExtraMaxUseCountFieldNumber = 26;
  inline ::google::protobuf::int32 huan_hua_extra_max_use_count() const;
  inline void set_huan_hua_extra_max_use_count(::google::protobuf::int32 value);

  // optional int32 qian_neng_max_use_count_extra_times = 27;
  inline bool has_qian_neng_max_use_count_extra_times() const;
  inline void clear_qian_neng_max_use_count_extra_times();
  static const int kQianNengMaxUseCountExtraTimesFieldNumber = 27;
  inline ::google::protobuf::int32 qian_neng_max_use_count_extra_times() const;
  inline void set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value);

  // optional int32 huan_hua_max_use_count_extra_times = 28;
  inline bool has_huan_hua_max_use_count_extra_times() const;
  inline void clear_huan_hua_max_use_count_extra_times();
  static const int kHuanHuaMaxUseCountExtraTimesFieldNumber = 28;
  inline ::google::protobuf::int32 huan_hua_max_use_count_extra_times() const;
  inline void set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.SingleShieldProto)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_level_data();
  inline void clear_has_level_data();
  inline void set_has_special_spell_1();
  inline void clear_has_special_spell_1();
  inline void set_has_special_spell_2();
  inline void clear_has_special_spell_2();
  inline void set_has_qian_neng_use_count();
  inline void clear_has_qian_neng_use_count();
  inline void set_has_huan_hua_use_count();
  inline void clear_has_huan_hua_use_count();
  inline void set_has_bless_amount();
  inline void clear_has_bless_amount();
  inline void set_has_bless_amount_clear_time();
  inline void clear_has_bless_amount_clear_time();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_is_super_model();
  inline void clear_has_is_super_model();
  inline void set_has_is_super_model_2();
  inline void clear_has_is_super_model_2();
  inline void set_has_nickname_id();
  inline void clear_has_nickname_id();
  inline void set_has_upgrade_times();
  inline void clear_has_upgrade_times();
  inline void set_has_qian_neng_extra_max_use_count();
  inline void clear_has_qian_neng_extra_max_use_count();
  inline void set_has_huan_hua_extra_max_use_count();
  inline void clear_has_huan_hua_extra_max_use_count();
  inline void set_has_qian_neng_max_use_count_extra_times();
  inline void clear_has_qian_neng_max_use_count_extra_times();
  inline void set_has_huan_hua_max_use_count_extra_times();
  inline void clear_has_huan_hua_max_use_count_extra_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::app::message::ShieldDataProto* data_;
  ::app::message::ShieldLevelDataProto* level_data_;
  ::app::message::ActiveSpell* special_spell_1_;
  ::app::message::ActiveSpell* special_spell_2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > normal_spell_pos_;
  ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell > normal_spells_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equipment_pos_;
  ::google::protobuf::RepeatedPtrField< ::std::string> equipment_static_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> equipment_dynamic_data_;
  ::google::protobuf::int32 qian_neng_use_count_;
  ::google::protobuf::int32 huan_hua_use_count_;
  ::google::protobuf::int64 bless_amount_clear_time_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 bless_amount_;
  bool is_super_model_;
  bool is_super_model_2_;
  ::google::protobuf::int32 nickname_id_;
  ::google::protobuf::int32 upgrade_times_;
  ::google::protobuf::int32 qian_neng_extra_max_use_count_;
  ::google::protobuf::int32 huan_hua_extra_max_use_count_;
  ::google::protobuf::int32 qian_neng_max_use_count_extra_times_;
  ::google::protobuf::int32 huan_hua_max_use_count_extra_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static SingleShieldProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroBossCard : public ::google::protobuf::Message {
 public:
  HeroBossCard();
  virtual ~HeroBossCard();

  HeroBossCard(const HeroBossCard& from);

  inline HeroBossCard& operator=(const HeroBossCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroBossCard& default_instance();

  void Swap(HeroBossCard* other);

  // implements Message ----------------------------------------------

  HeroBossCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroBossCard& from);
  void MergeFrom(const HeroBossCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 today_call_count = 1;
  inline bool has_today_call_count() const;
  inline void clear_today_call_count();
  static const int kTodayCallCountFieldNumber = 1;
  inline ::google::protobuf::int32 today_call_count() const;
  inline void set_today_call_count(::google::protobuf::int32 value);

  // optional int32 current_card_id = 2;
  inline bool has_current_card_id() const;
  inline void clear_current_card_id();
  static const int kCurrentCardIdFieldNumber = 2;
  inline ::google::protobuf::int32 current_card_id() const;
  inline void set_current_card_id(::google::protobuf::int32 value);

  // optional int32 current_calling_card_id = 3;
  inline bool has_current_calling_card_id() const;
  inline void clear_current_calling_card_id();
  static const int kCurrentCallingCardIdFieldNumber = 3;
  inline ::google::protobuf::int32 current_calling_card_id() const;
  inline void set_current_calling_card_id(::google::protobuf::int32 value);

  // optional int64 dungeon_expired_time = 4;
  inline bool has_dungeon_expired_time() const;
  inline void clear_dungeon_expired_time();
  static const int kDungeonExpiredTimeFieldNumber = 4;
  inline ::google::protobuf::int64 dungeon_expired_time() const;
  inline void set_dungeon_expired_time(::google::protobuf::int64 value);

  // optional int32 guild_boss_card_kill_prize_count = 5;
  inline bool has_guild_boss_card_kill_prize_count() const;
  inline void clear_guild_boss_card_kill_prize_count();
  static const int kGuildBossCardKillPrizeCountFieldNumber = 5;
  inline ::google::protobuf::int32 guild_boss_card_kill_prize_count() const;
  inline void set_guild_boss_card_kill_prize_count(::google::protobuf::int32 value);

  // optional int32 guild_boss_card_call_prize_count = 7;
  inline bool has_guild_boss_card_call_prize_count() const;
  inline void clear_guild_boss_card_call_prize_count();
  static const int kGuildBossCardCallPrizeCountFieldNumber = 7;
  inline ::google::protobuf::int32 guild_boss_card_call_prize_count() const;
  inline void set_guild_boss_card_call_prize_count(::google::protobuf::int32 value);

  // optional int32 reset_week_of_year = 6;
  inline bool has_reset_week_of_year() const;
  inline void clear_reset_week_of_year();
  static const int kResetWeekOfYearFieldNumber = 6;
  inline ::google::protobuf::int32 reset_week_of_year() const;
  inline void set_reset_week_of_year(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroBossCard)
 private:
  inline void set_has_today_call_count();
  inline void clear_has_today_call_count();
  inline void set_has_current_card_id();
  inline void clear_has_current_card_id();
  inline void set_has_current_calling_card_id();
  inline void clear_has_current_calling_card_id();
  inline void set_has_dungeon_expired_time();
  inline void clear_has_dungeon_expired_time();
  inline void set_has_guild_boss_card_kill_prize_count();
  inline void clear_has_guild_boss_card_kill_prize_count();
  inline void set_has_guild_boss_card_call_prize_count();
  inline void clear_has_guild_boss_card_call_prize_count();
  inline void set_has_reset_week_of_year();
  inline void clear_has_reset_week_of_year();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 today_call_count_;
  ::google::protobuf::int32 current_card_id_;
  ::google::protobuf::int64 dungeon_expired_time_;
  ::google::protobuf::int32 current_calling_card_id_;
  ::google::protobuf::int32 guild_boss_card_kill_prize_count_;
  ::google::protobuf::int32 guild_boss_card_call_prize_count_;
  ::google::protobuf::int32 reset_week_of_year_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroBossCard* default_instance_;
};
// -------------------------------------------------------------------

class HaidiProto_HaidiLeftTime : public ::google::protobuf::Message {
 public:
  HaidiProto_HaidiLeftTime();
  virtual ~HaidiProto_HaidiLeftTime();

  HaidiProto_HaidiLeftTime(const HaidiProto_HaidiLeftTime& from);

  inline HaidiProto_HaidiLeftTime& operator=(const HaidiProto_HaidiLeftTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HaidiProto_HaidiLeftTime& default_instance();

  void Swap(HaidiProto_HaidiLeftTime* other);

  // implements Message ----------------------------------------------

  HaidiProto_HaidiLeftTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HaidiProto_HaidiLeftTime& from);
  void MergeFrom(const HaidiProto_HaidiLeftTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 haidilevel = 1;
  inline bool has_haidilevel() const;
  inline void clear_haidilevel();
  static const int kHaidilevelFieldNumber = 1;
  inline ::google::protobuf::int32 haidilevel() const;
  inline void set_haidilevel(::google::protobuf::int32 value);

  // required int32 leftTime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HaidiProto.HaidiLeftTime)
 private:
  inline void set_has_haidilevel();
  inline void clear_has_haidilevel();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 haidilevel_;
  ::google::protobuf::int32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HaidiProto_HaidiLeftTime* default_instance_;
};
// -------------------------------------------------------------------

class HaidiProto : public ::google::protobuf::Message {
 public:
  HaidiProto();
  virtual ~HaidiProto();

  HaidiProto(const HaidiProto& from);

  inline HaidiProto& operator=(const HaidiProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HaidiProto& default_instance();

  void Swap(HaidiProto* other);

  // implements Message ----------------------------------------------

  HaidiProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HaidiProto& from);
  void MergeFrom(const HaidiProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HaidiProto_HaidiLeftTime HaidiLeftTime;

  // accessors -------------------------------------------------------

  // optional bool today_free_ticket_collected = 1;
  inline bool has_today_free_ticket_collected() const;
  inline void clear_today_free_ticket_collected();
  static const int kTodayFreeTicketCollectedFieldNumber = 1;
  inline bool today_free_ticket_collected() const;
  inline void set_today_free_ticket_collected(bool value);

  // optional bool bishuidan_used = 2;
  inline bool has_bishuidan_used() const;
  inline void clear_bishuidan_used();
  static const int kBishuidanUsedFieldNumber = 2;
  inline bool bishuidan_used() const;
  inline void set_bishuidan_used(bool value);

  // repeated .app.message.HaidiProto.HaidiLeftTime leftTime = 3;
  inline int lefttime_size() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 3;
  inline const ::app::message::HaidiProto_HaidiLeftTime& lefttime(int index) const;
  inline ::app::message::HaidiProto_HaidiLeftTime* mutable_lefttime(int index);
  inline ::app::message::HaidiProto_HaidiLeftTime* add_lefttime();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::HaidiProto_HaidiLeftTime >&
      lefttime() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::HaidiProto_HaidiLeftTime >*
      mutable_lefttime();

  // optional int32 is_new_version = 4;
  inline bool has_is_new_version() const;
  inline void clear_is_new_version();
  static const int kIsNewVersionFieldNumber = 4;
  inline ::google::protobuf::int32 is_new_version() const;
  inline void set_is_new_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:app.message.HaidiProto)
 private:
  inline void set_has_today_free_ticket_collected();
  inline void clear_has_today_free_ticket_collected();
  inline void set_has_bishuidan_used();
  inline void clear_has_bishuidan_used();
  inline void set_has_is_new_version();
  inline void clear_has_is_new_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool today_free_ticket_collected_;
  bool bishuidan_used_;
  ::google::protobuf::int32 is_new_version_;
  ::google::protobuf::RepeatedPtrField< ::app::message::HaidiProto_HaidiLeftTime > lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HaidiProto* default_instance_;
};
// -------------------------------------------------------------------

class HaidiInfoProto_HaidiOverTime : public ::google::protobuf::Message {
 public:
  HaidiInfoProto_HaidiOverTime();
  virtual ~HaidiInfoProto_HaidiOverTime();

  HaidiInfoProto_HaidiOverTime(const HaidiInfoProto_HaidiOverTime& from);

  inline HaidiInfoProto_HaidiOverTime& operator=(const HaidiInfoProto_HaidiOverTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HaidiInfoProto_HaidiOverTime& default_instance();

  void Swap(HaidiInfoProto_HaidiOverTime* other);

  // implements Message ----------------------------------------------

  HaidiInfoProto_HaidiOverTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HaidiInfoProto_HaidiOverTime& from);
  void MergeFrom(const HaidiInfoProto_HaidiOverTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 haidilevel = 1;
  inline bool has_haidilevel() const;
  inline void clear_haidilevel();
  static const int kHaidilevelFieldNumber = 1;
  inline ::google::protobuf::int32 haidilevel() const;
  inline void set_haidilevel(::google::protobuf::int32 value);

  // required int64 overTime = 2;
  inline bool has_overtime() const;
  inline void clear_overtime();
  static const int kOverTimeFieldNumber = 2;
  inline ::google::protobuf::int64 overtime() const;
  inline void set_overtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.HaidiInfoProto.HaidiOverTime)
 private:
  inline void set_has_haidilevel();
  inline void clear_has_haidilevel();
  inline void set_has_overtime();
  inline void clear_has_overtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 overtime_;
  ::google::protobuf::int32 haidilevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HaidiInfoProto_HaidiOverTime* default_instance_;
};
// -------------------------------------------------------------------

class HaidiInfoProto : public ::google::protobuf::Message {
 public:
  HaidiInfoProto();
  virtual ~HaidiInfoProto();

  HaidiInfoProto(const HaidiInfoProto& from);

  inline HaidiInfoProto& operator=(const HaidiInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HaidiInfoProto& default_instance();

  void Swap(HaidiInfoProto* other);

  // implements Message ----------------------------------------------

  HaidiInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HaidiInfoProto& from);
  void MergeFrom(const HaidiInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HaidiInfoProto_HaidiOverTime HaidiOverTime;

  // accessors -------------------------------------------------------

  // optional bool today_free_ticket_collected = 1;
  inline bool has_today_free_ticket_collected() const;
  inline void clear_today_free_ticket_collected();
  static const int kTodayFreeTicketCollectedFieldNumber = 1;
  inline bool today_free_ticket_collected() const;
  inline void set_today_free_ticket_collected(bool value);

  // optional bool bishuidan_used = 2;
  inline bool has_bishuidan_used() const;
  inline void clear_bishuidan_used();
  static const int kBishuidanUsedFieldNumber = 2;
  inline bool bishuidan_used() const;
  inline void set_bishuidan_used(bool value);

  // repeated .app.message.HaidiInfoProto.HaidiOverTime overTime = 3;
  inline int overtime_size() const;
  inline void clear_overtime();
  static const int kOverTimeFieldNumber = 3;
  inline const ::app::message::HaidiInfoProto_HaidiOverTime& overtime(int index) const;
  inline ::app::message::HaidiInfoProto_HaidiOverTime* mutable_overtime(int index);
  inline ::app::message::HaidiInfoProto_HaidiOverTime* add_overtime();
  inline const ::google::protobuf::RepeatedPtrField< ::app::message::HaidiInfoProto_HaidiOverTime >&
      overtime() const;
  inline ::google::protobuf::RepeatedPtrField< ::app::message::HaidiInfoProto_HaidiOverTime >*
      mutable_overtime();

  // @@protoc_insertion_point(class_scope:app.message.HaidiInfoProto)
 private:
  inline void set_has_today_free_ticket_collected();
  inline void clear_has_today_free_ticket_collected();
  inline void set_has_bishuidan_used();
  inline void clear_has_bishuidan_used();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::app::message::HaidiInfoProto_HaidiOverTime > overtime_;
  bool today_free_ticket_collected_;
  bool bishuidan_used_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HaidiInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class HeroComebackProto : public ::google::protobuf::Message {
 public:
  HeroComebackProto();
  virtual ~HeroComebackProto();

  HeroComebackProto(const HeroComebackProto& from);

  inline HeroComebackProto& operator=(const HeroComebackProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroComebackProto& default_instance();

  void Swap(HeroComebackProto* other);

  // implements Message ----------------------------------------------

  HeroComebackProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroComebackProto& from);
  void MergeFrom(const HeroComebackProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_collected = 1;
  inline bool has_is_collected() const;
  inline void clear_is_collected();
  static const int kIsCollectedFieldNumber = 1;
  inline bool is_collected() const;
  inline void set_is_collected(bool value);

  // optional bool is_vip_collected = 2;
  inline bool has_is_vip_collected() const;
  inline void clear_is_vip_collected();
  static const int kIsVipCollectedFieldNumber = 2;
  inline bool is_vip_collected() const;
  inline void set_is_vip_collected(bool value);

  // optional int64 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int64 end_time() const;
  inline void set_end_time(::google::protobuf::int64 value);

  // optional int64 last_logout_time_before_start = 5;
  inline bool has_last_logout_time_before_start() const;
  inline void clear_last_logout_time_before_start();
  static const int kLastLogoutTimeBeforeStartFieldNumber = 5;
  inline ::google::protobuf::int64 last_logout_time_before_start() const;
  inline void set_last_logout_time_before_start(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:app.message.HeroComebackProto)
 private:
  inline void set_has_is_collected();
  inline void clear_has_is_collected();
  inline void set_has_is_vip_collected();
  inline void clear_has_is_vip_collected();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_last_logout_time_before_start();
  inline void clear_has_last_logout_time_before_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int64 last_logout_time_before_start_;
  bool is_collected_;
  bool is_vip_collected_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hero_2eproto();
  friend void protobuf_AssignDesc_hero_2eproto();
  friend void protobuf_ShutdownFile_hero_2eproto();

  void InitAsDefaultInstance();
  static HeroComebackProto* default_instance_;
};
// ===================================================================


// ===================================================================

// HeroProto

// optional int32 level = 1;
inline bool HeroProto::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroProto::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 HeroProto::level() const {
  return level_;
}
inline void HeroProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 race = 2;
inline bool HeroProto::has_race() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroProto::set_has_race() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroProto::clear_has_race() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroProto::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 HeroProto::race() const {
  return race_;
}
inline void HeroProto::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 sceneID = 3;
inline bool HeroProto::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroProto::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroProto::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 HeroProto::sceneid() const {
  return sceneid_;
}
inline void HeroProto::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional int32 yuanbao = 4;
inline bool HeroProto::has_yuanbao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroProto::set_has_yuanbao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroProto::clear_has_yuanbao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroProto::clear_yuanbao() {
  yuanbao_ = 0;
  clear_has_yuanbao();
}
inline ::google::protobuf::int32 HeroProto::yuanbao() const {
  return yuanbao_;
}
inline void HeroProto::set_yuanbao(::google::protobuf::int32 value) {
  set_has_yuanbao();
  yuanbao_ = value;
}

// optional int32 lijin = 5;
inline bool HeroProto::has_lijin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroProto::set_has_lijin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroProto::clear_has_lijin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroProto::clear_lijin() {
  lijin_ = 0;
  clear_has_lijin();
}
inline ::google::protobuf::int32 HeroProto::lijin() const {
  return lijin_;
}
inline void HeroProto::set_lijin(::google::protobuf::int32 value) {
  set_has_lijin();
  lijin_ = value;
}

// optional int32 money = 6;
inline bool HeroProto::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeroProto::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeroProto::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeroProto::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 HeroProto::money() const {
  return money_;
}
inline void HeroProto::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional .app.message.GoodsContainerProto depot = 7;
inline bool HeroProto::has_depot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_depot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeroProto::clear_has_depot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeroProto::clear_depot() {
  if (depot_ != NULL) depot_->::app::message::GoodsContainerProto::Clear();
  clear_has_depot();
}
inline const ::app::message::GoodsContainerProto& HeroProto::depot() const {
  return depot_ != NULL ? *depot_ : *default_instance_->depot_;
}
inline ::app::message::GoodsContainerProto* HeroProto::mutable_depot() {
  set_has_depot();
  if (depot_ == NULL) depot_ = new ::app::message::GoodsContainerProto;
  return depot_;
}
inline ::app::message::GoodsContainerProto* HeroProto::release_depot() {
  clear_has_depot();
  ::app::message::GoodsContainerProto* temp = depot_;
  depot_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_depot(::app::message::GoodsContainerProto* depot) {
  delete depot_;
  depot_ = depot;
  if (depot) {
    set_has_depot();
  } else {
    clear_has_depot();
  }
}

// optional int32 real_air = 9;
inline bool HeroProto::has_real_air() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeroProto::set_has_real_air() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeroProto::clear_has_real_air() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeroProto::clear_real_air() {
  real_air_ = 0;
  clear_has_real_air();
}
inline ::google::protobuf::int32 HeroProto::real_air() const {
  return real_air_;
}
inline void HeroProto::set_real_air(::google::protobuf::int32 value) {
  set_has_real_air();
  real_air_ = value;
}

// optional int32 fighting_amount = 10;
inline bool HeroProto::has_fighting_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeroProto::set_has_fighting_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HeroProto::clear_has_fighting_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HeroProto::clear_fighting_amount() {
  fighting_amount_ = 0;
  clear_has_fighting_amount();
}
inline ::google::protobuf::int32 HeroProto::fighting_amount() const {
  return fighting_amount_;
}
inline void HeroProto::set_fighting_amount(::google::protobuf::int32 value) {
  set_has_fighting_amount();
  fighting_amount_ = value;
}

// optional .app.message.SpriteStatProto total_stat = 11;
inline bool HeroProto::has_total_stat() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeroProto::set_has_total_stat() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HeroProto::clear_has_total_stat() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HeroProto::clear_total_stat() {
  if (total_stat_ != NULL) total_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_total_stat();
}
inline const ::app::message::SpriteStatProto& HeroProto::total_stat() const {
  return total_stat_ != NULL ? *total_stat_ : *default_instance_->total_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::mutable_total_stat() {
  set_has_total_stat();
  if (total_stat_ == NULL) total_stat_ = new ::app::message::SpriteStatProto;
  return total_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::release_total_stat() {
  clear_has_total_stat();
  ::app::message::SpriteStatProto* temp = total_stat_;
  total_stat_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_total_stat(::app::message::SpriteStatProto* total_stat) {
  delete total_stat_;
  total_stat_ = total_stat;
  if (total_stat) {
    set_has_total_stat();
  } else {
    clear_has_total_stat();
  }
}

// repeated int32 equiped_pos = 12;
inline int HeroProto::equiped_pos_size() const {
  return equiped_pos_.size();
}
inline void HeroProto::clear_equiped_pos() {
  equiped_pos_.Clear();
}
inline ::google::protobuf::int32 HeroProto::equiped_pos(int index) const {
  return equiped_pos_.Get(index);
}
inline void HeroProto::set_equiped_pos(int index, ::google::protobuf::int32 value) {
  equiped_pos_.Set(index, value);
}
inline void HeroProto::add_equiped_pos(::google::protobuf::int32 value) {
  equiped_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::equiped_pos() const {
  return equiped_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_equiped_pos() {
  return &equiped_pos_;
}

// repeated .app.message.EquipmentDataProto equipment_datas = 13;
inline int HeroProto::equipment_datas_size() const {
  return equipment_datas_.size();
}
inline void HeroProto::clear_equipment_datas() {
  equipment_datas_.Clear();
}
inline const ::app::message::EquipmentDataProto& HeroProto::equipment_datas(int index) const {
  return equipment_datas_.Get(index);
}
inline ::app::message::EquipmentDataProto* HeroProto::mutable_equipment_datas(int index) {
  return equipment_datas_.Mutable(index);
}
inline ::app::message::EquipmentDataProto* HeroProto::add_equipment_datas() {
  return equipment_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >&
HeroProto::equipment_datas() const {
  return equipment_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >*
HeroProto::mutable_equipment_datas() {
  return &equipment_datas_;
}

// repeated .app.message.EquipmentProto equipments = 14;
inline int HeroProto::equipments_size() const {
  return equipments_.size();
}
inline void HeroProto::clear_equipments() {
  equipments_.Clear();
}
inline const ::app::message::EquipmentProto& HeroProto::equipments(int index) const {
  return equipments_.Get(index);
}
inline ::app::message::EquipmentProto* HeroProto::mutable_equipments(int index) {
  return equipments_.Mutable(index);
}
inline ::app::message::EquipmentProto* HeroProto::add_equipments() {
  return equipments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >&
HeroProto::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >*
HeroProto::mutable_equipments() {
  return &equipments_;
}

// optional int64 exp = 15;
inline bool HeroProto::has_exp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HeroProto::set_has_exp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HeroProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HeroProto::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 HeroProto::exp() const {
  return exp_;
}
inline void HeroProto::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 upgrade_exp = 16;
inline bool HeroProto::has_upgrade_exp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HeroProto::set_has_upgrade_exp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HeroProto::clear_has_upgrade_exp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HeroProto::clear_upgrade_exp() {
  upgrade_exp_ = GOOGLE_LONGLONG(0);
  clear_has_upgrade_exp();
}
inline ::google::protobuf::int64 HeroProto::upgrade_exp() const {
  return upgrade_exp_;
}
inline void HeroProto::set_upgrade_exp(::google::protobuf::int64 value) {
  set_has_upgrade_exp();
  upgrade_exp_ = value;
}

// optional int64 equipment_resources = 17;
inline bool HeroProto::has_equipment_resources() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HeroProto::set_has_equipment_resources() {
  _has_bits_[0] |= 0x00008000u;
}
inline void HeroProto::clear_has_equipment_resources() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void HeroProto::clear_equipment_resources() {
  equipment_resources_ = GOOGLE_LONGLONG(0);
  clear_has_equipment_resources();
}
inline ::google::protobuf::int64 HeroProto::equipment_resources() const {
  return equipment_resources_;
}
inline void HeroProto::set_equipment_resources(::google::protobuf::int64 value) {
  set_has_equipment_resources();
  equipment_resources_ = value;
}

// optional bool has_storage = 18;
inline bool HeroProto::has_has_storage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void HeroProto::set_has_has_storage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void HeroProto::clear_has_has_storage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void HeroProto::clear_has_storage() {
  has_storage_ = false;
  clear_has_has_storage();
}
inline bool HeroProto::has_storage() const {
  return has_storage_;
}
inline void HeroProto::set_has_storage(bool value) {
  set_has_has_storage();
  has_storage_ = value;
}

// repeated bytes buy_back_goods_datas = 19;
inline int HeroProto::buy_back_goods_datas_size() const {
  return buy_back_goods_datas_.size();
}
inline void HeroProto::clear_buy_back_goods_datas() {
  buy_back_goods_datas_.Clear();
}
inline const ::std::string& HeroProto::buy_back_goods_datas(int index) const {
  return buy_back_goods_datas_.Get(index);
}
inline ::std::string* HeroProto::mutable_buy_back_goods_datas(int index) {
  return buy_back_goods_datas_.Mutable(index);
}
inline void HeroProto::set_buy_back_goods_datas(int index, const ::std::string& value) {
  buy_back_goods_datas_.Mutable(index)->assign(value);
}
inline void HeroProto::set_buy_back_goods_datas(int index, const char* value) {
  buy_back_goods_datas_.Mutable(index)->assign(value);
}
inline void HeroProto::set_buy_back_goods_datas(int index, const void* value, size_t size) {
  buy_back_goods_datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::add_buy_back_goods_datas() {
  return buy_back_goods_datas_.Add();
}
inline void HeroProto::add_buy_back_goods_datas(const ::std::string& value) {
  buy_back_goods_datas_.Add()->assign(value);
}
inline void HeroProto::add_buy_back_goods_datas(const char* value) {
  buy_back_goods_datas_.Add()->assign(value);
}
inline void HeroProto::add_buy_back_goods_datas(const void* value, size_t size) {
  buy_back_goods_datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeroProto::buy_back_goods_datas() const {
  return buy_back_goods_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeroProto::mutable_buy_back_goods_datas() {
  return &buy_back_goods_datas_;
}

// repeated bytes buy_back_goods_list = 20;
inline int HeroProto::buy_back_goods_list_size() const {
  return buy_back_goods_list_.size();
}
inline void HeroProto::clear_buy_back_goods_list() {
  buy_back_goods_list_.Clear();
}
inline const ::std::string& HeroProto::buy_back_goods_list(int index) const {
  return buy_back_goods_list_.Get(index);
}
inline ::std::string* HeroProto::mutable_buy_back_goods_list(int index) {
  return buy_back_goods_list_.Mutable(index);
}
inline void HeroProto::set_buy_back_goods_list(int index, const ::std::string& value) {
  buy_back_goods_list_.Mutable(index)->assign(value);
}
inline void HeroProto::set_buy_back_goods_list(int index, const char* value) {
  buy_back_goods_list_.Mutable(index)->assign(value);
}
inline void HeroProto::set_buy_back_goods_list(int index, const void* value, size_t size) {
  buy_back_goods_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::add_buy_back_goods_list() {
  return buy_back_goods_list_.Add();
}
inline void HeroProto::add_buy_back_goods_list(const ::std::string& value) {
  buy_back_goods_list_.Add()->assign(value);
}
inline void HeroProto::add_buy_back_goods_list(const char* value) {
  buy_back_goods_list_.Add()->assign(value);
}
inline void HeroProto::add_buy_back_goods_list(const void* value, size_t size) {
  buy_back_goods_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeroProto::buy_back_goods_list() const {
  return buy_back_goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeroProto::mutable_buy_back_goods_list() {
  return &buy_back_goods_list_;
}

// optional bool team_auto_accept_invite = 21 [default = true];
inline bool HeroProto::has_team_auto_accept_invite() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_team_auto_accept_invite() {
  _has_bits_[0] |= 0x00080000u;
}
inline void HeroProto::clear_has_team_auto_accept_invite() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void HeroProto::clear_team_auto_accept_invite() {
  team_auto_accept_invite_ = true;
  clear_has_team_auto_accept_invite();
}
inline bool HeroProto::team_auto_accept_invite() const {
  return team_auto_accept_invite_;
}
inline void HeroProto::set_team_auto_accept_invite(bool value) {
  set_has_team_auto_accept_invite();
  team_auto_accept_invite_ = value;
}

// optional bool team_auto_accept_request = 22 [default = true];
inline bool HeroProto::has_team_auto_accept_request() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void HeroProto::set_has_team_auto_accept_request() {
  _has_bits_[0] |= 0x00100000u;
}
inline void HeroProto::clear_has_team_auto_accept_request() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void HeroProto::clear_team_auto_accept_request() {
  team_auto_accept_request_ = true;
  clear_has_team_auto_accept_request();
}
inline bool HeroProto::team_auto_accept_request() const {
  return team_auto_accept_request_;
}
inline void HeroProto::set_team_auto_accept_request(bool value) {
  set_has_team_auto_accept_request();
  team_auto_accept_request_ = value;
}

// optional bool team_forbid_other_invite_me_join = 115;
inline bool HeroProto::has_team_forbid_other_invite_me_join() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void HeroProto::set_has_team_forbid_other_invite_me_join() {
  _has_bits_[0] |= 0x00200000u;
}
inline void HeroProto::clear_has_team_forbid_other_invite_me_join() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void HeroProto::clear_team_forbid_other_invite_me_join() {
  team_forbid_other_invite_me_join_ = false;
  clear_has_team_forbid_other_invite_me_join();
}
inline bool HeroProto::team_forbid_other_invite_me_join() const {
  return team_forbid_other_invite_me_join_;
}
inline void HeroProto::set_team_forbid_other_invite_me_join(bool value) {
  set_has_team_forbid_other_invite_me_join();
  team_forbid_other_invite_me_join_ = value;
}

// optional bool trade_auto_reject_invite = 23;
inline bool HeroProto::has_trade_auto_reject_invite() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void HeroProto::set_has_trade_auto_reject_invite() {
  _has_bits_[0] |= 0x00400000u;
}
inline void HeroProto::clear_has_trade_auto_reject_invite() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void HeroProto::clear_trade_auto_reject_invite() {
  trade_auto_reject_invite_ = false;
  clear_has_trade_auto_reject_invite();
}
inline bool HeroProto::trade_auto_reject_invite() const {
  return trade_auto_reject_invite_;
}
inline void HeroProto::set_trade_auto_reject_invite(bool value) {
  set_has_trade_auto_reject_invite();
  trade_auto_reject_invite_ = value;
}

// optional .app.message.HeroTaskProto task = 24;
inline bool HeroProto::has_task() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void HeroProto::set_has_task() {
  _has_bits_[0] |= 0x00800000u;
}
inline void HeroProto::clear_has_task() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void HeroProto::clear_task() {
  if (task_ != NULL) task_->::app::message::HeroTaskProto::Clear();
  clear_has_task();
}
inline const ::app::message::HeroTaskProto& HeroProto::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::app::message::HeroTaskProto* HeroProto::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::app::message::HeroTaskProto;
  return task_;
}
inline ::app::message::HeroTaskProto* HeroProto::release_task() {
  clear_has_task();
  ::app::message::HeroTaskProto* temp = task_;
  task_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_task(::app::message::HeroTaskProto* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// optional int64 client_only_config_1 = 25;
inline bool HeroProto::has_client_only_config_1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void HeroProto::set_has_client_only_config_1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void HeroProto::clear_has_client_only_config_1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void HeroProto::clear_client_only_config_1() {
  client_only_config_1_ = GOOGLE_LONGLONG(0);
  clear_has_client_only_config_1();
}
inline ::google::protobuf::int64 HeroProto::client_only_config_1() const {
  return client_only_config_1_;
}
inline void HeroProto::set_client_only_config_1(::google::protobuf::int64 value) {
  set_has_client_only_config_1();
  client_only_config_1_ = value;
}

// repeated int32 client_only_int_configs = 26;
inline int HeroProto::client_only_int_configs_size() const {
  return client_only_int_configs_.size();
}
inline void HeroProto::clear_client_only_int_configs() {
  client_only_int_configs_.Clear();
}
inline ::google::protobuf::int32 HeroProto::client_only_int_configs(int index) const {
  return client_only_int_configs_.Get(index);
}
inline void HeroProto::set_client_only_int_configs(int index, ::google::protobuf::int32 value) {
  client_only_int_configs_.Set(index, value);
}
inline void HeroProto::add_client_only_int_configs(::google::protobuf::int32 value) {
  client_only_int_configs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::client_only_int_configs() const {
  return client_only_int_configs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_client_only_int_configs() {
  return &client_only_int_configs_;
}

// optional bytes guild_name = 27;
inline bool HeroProto::has_guild_name() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_guild_name() {
  _has_bits_[0] |= 0x04000000u;
}
inline void HeroProto::clear_has_guild_name() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void HeroProto::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& HeroProto::guild_name() const {
  return *guild_name_;
}
inline void HeroProto::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void HeroProto::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void HeroProto::set_guild_name(const void* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* HeroProto::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeroProto::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool guild_auto_accept_invite = 28;
inline bool HeroProto::has_guild_auto_accept_invite() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_guild_auto_accept_invite() {
  _has_bits_[0] |= 0x08000000u;
}
inline void HeroProto::clear_has_guild_auto_accept_invite() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void HeroProto::clear_guild_auto_accept_invite() {
  guild_auto_accept_invite_ = false;
  clear_has_guild_auto_accept_invite();
}
inline bool HeroProto::guild_auto_accept_invite() const {
  return guild_auto_accept_invite_;
}
inline void HeroProto::set_guild_auto_accept_invite(bool value) {
  set_has_guild_auto_accept_invite();
  guild_auto_accept_invite_ = value;
}

// optional bool guild_forbid_other_invite_me_join = 29;
inline bool HeroProto::has_guild_forbid_other_invite_me_join() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void HeroProto::set_has_guild_forbid_other_invite_me_join() {
  _has_bits_[0] |= 0x10000000u;
}
inline void HeroProto::clear_has_guild_forbid_other_invite_me_join() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void HeroProto::clear_guild_forbid_other_invite_me_join() {
  guild_forbid_other_invite_me_join_ = false;
  clear_has_guild_forbid_other_invite_me_join();
}
inline bool HeroProto::guild_forbid_other_invite_me_join() const {
  return guild_forbid_other_invite_me_join_;
}
inline void HeroProto::set_guild_forbid_other_invite_me_join(bool value) {
  set_has_guild_forbid_other_invite_me_join();
  guild_forbid_other_invite_me_join_ = value;
}

// optional int32 guild_flag_level = 56;
inline bool HeroProto::has_guild_flag_level() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void HeroProto::set_has_guild_flag_level() {
  _has_bits_[0] |= 0x20000000u;
}
inline void HeroProto::clear_has_guild_flag_level() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void HeroProto::clear_guild_flag_level() {
  guild_flag_level_ = 0;
  clear_has_guild_flag_level();
}
inline ::google::protobuf::int32 HeroProto::guild_flag_level() const {
  return guild_flag_level_;
}
inline void HeroProto::set_guild_flag_level(::google::protobuf::int32 value) {
  set_has_guild_flag_level();
  guild_flag_level_ = value;
}

// optional int32 guild_li_lian = 30;
inline bool HeroProto::has_guild_li_lian() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void HeroProto::set_has_guild_li_lian() {
  _has_bits_[0] |= 0x40000000u;
}
inline void HeroProto::clear_has_guild_li_lian() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void HeroProto::clear_guild_li_lian() {
  guild_li_lian_ = 0;
  clear_has_guild_li_lian();
}
inline ::google::protobuf::int32 HeroProto::guild_li_lian() const {
  return guild_li_lian_;
}
inline void HeroProto::set_guild_li_lian(::google::protobuf::int32 value) {
  set_has_guild_li_lian();
  guild_li_lian_ = value;
}

// optional int32 guild_contribution = 31;
inline bool HeroProto::has_guild_contribution() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void HeroProto::set_has_guild_contribution() {
  _has_bits_[0] |= 0x80000000u;
}
inline void HeroProto::clear_has_guild_contribution() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void HeroProto::clear_guild_contribution() {
  guild_contribution_ = 0;
  clear_has_guild_contribution();
}
inline ::google::protobuf::int32 HeroProto::guild_contribution() const {
  return guild_contribution_;
}
inline void HeroProto::set_guild_contribution(::google::protobuf::int32 value) {
  set_has_guild_contribution();
  guild_contribution_ = value;
}

// repeated bytes friend_guild_name = 32;
inline int HeroProto::friend_guild_name_size() const {
  return friend_guild_name_.size();
}
inline void HeroProto::clear_friend_guild_name() {
  friend_guild_name_.Clear();
}
inline const ::std::string& HeroProto::friend_guild_name(int index) const {
  return friend_guild_name_.Get(index);
}
inline ::std::string* HeroProto::mutable_friend_guild_name(int index) {
  return friend_guild_name_.Mutable(index);
}
inline void HeroProto::set_friend_guild_name(int index, const ::std::string& value) {
  friend_guild_name_.Mutable(index)->assign(value);
}
inline void HeroProto::set_friend_guild_name(int index, const char* value) {
  friend_guild_name_.Mutable(index)->assign(value);
}
inline void HeroProto::set_friend_guild_name(int index, const void* value, size_t size) {
  friend_guild_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::add_friend_guild_name() {
  return friend_guild_name_.Add();
}
inline void HeroProto::add_friend_guild_name(const ::std::string& value) {
  friend_guild_name_.Add()->assign(value);
}
inline void HeroProto::add_friend_guild_name(const char* value) {
  friend_guild_name_.Add()->assign(value);
}
inline void HeroProto::add_friend_guild_name(const void* value, size_t size) {
  friend_guild_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeroProto::friend_guild_name() const {
  return friend_guild_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeroProto::mutable_friend_guild_name() {
  return &friend_guild_name_;
}

// repeated bytes enemy_guild_name = 33;
inline int HeroProto::enemy_guild_name_size() const {
  return enemy_guild_name_.size();
}
inline void HeroProto::clear_enemy_guild_name() {
  enemy_guild_name_.Clear();
}
inline const ::std::string& HeroProto::enemy_guild_name(int index) const {
  return enemy_guild_name_.Get(index);
}
inline ::std::string* HeroProto::mutable_enemy_guild_name(int index) {
  return enemy_guild_name_.Mutable(index);
}
inline void HeroProto::set_enemy_guild_name(int index, const ::std::string& value) {
  enemy_guild_name_.Mutable(index)->assign(value);
}
inline void HeroProto::set_enemy_guild_name(int index, const char* value) {
  enemy_guild_name_.Mutable(index)->assign(value);
}
inline void HeroProto::set_enemy_guild_name(int index, const void* value, size_t size) {
  enemy_guild_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::add_enemy_guild_name() {
  return enemy_guild_name_.Add();
}
inline void HeroProto::add_enemy_guild_name(const ::std::string& value) {
  enemy_guild_name_.Add()->assign(value);
}
inline void HeroProto::add_enemy_guild_name(const char* value) {
  enemy_guild_name_.Add()->assign(value);
}
inline void HeroProto::add_enemy_guild_name(const void* value, size_t size) {
  enemy_guild_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeroProto::enemy_guild_name() const {
  return enemy_guild_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeroProto::mutable_enemy_guild_name() {
  return &enemy_guild_name_;
}

// optional bool is_ws_city_master = 57;
inline bool HeroProto::has_is_ws_city_master() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_is_ws_city_master() {
  _has_bits_[1] |= 0x00000004u;
}
inline void HeroProto::clear_has_is_ws_city_master() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void HeroProto::clear_is_ws_city_master() {
  is_ws_city_master_ = false;
  clear_has_is_ws_city_master();
}
inline bool HeroProto::is_ws_city_master() const {
  return is_ws_city_master_;
}
inline void HeroProto::set_is_ws_city_master(bool value) {
  set_has_is_ws_city_master();
  is_ws_city_master_ = value;
}

// optional bool is_long_city_master = 58;
inline bool HeroProto::has_is_long_city_master() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void HeroProto::set_has_is_long_city_master() {
  _has_bits_[1] |= 0x00000008u;
}
inline void HeroProto::clear_has_is_long_city_master() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void HeroProto::clear_is_long_city_master() {
  is_long_city_master_ = false;
  clear_has_is_long_city_master();
}
inline bool HeroProto::is_long_city_master() const {
  return is_long_city_master_;
}
inline void HeroProto::set_is_long_city_master(bool value) {
  set_has_is_long_city_master();
  is_long_city_master_ = value;
}

// optional bool is_guild_leader = 59;
inline bool HeroProto::has_is_guild_leader() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void HeroProto::set_has_is_guild_leader() {
  _has_bits_[1] |= 0x00000010u;
}
inline void HeroProto::clear_has_is_guild_leader() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void HeroProto::clear_is_guild_leader() {
  is_guild_leader_ = false;
  clear_has_is_guild_leader();
}
inline bool HeroProto::is_guild_leader() const {
  return is_guild_leader_;
}
inline void HeroProto::set_is_guild_leader(bool value) {
  set_has_is_guild_leader();
  is_guild_leader_ = value;
}

// optional bool is_territory_leader = 60;
inline bool HeroProto::has_is_territory_leader() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void HeroProto::set_has_is_territory_leader() {
  _has_bits_[1] |= 0x00000020u;
}
inline void HeroProto::clear_has_is_territory_leader() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void HeroProto::clear_is_territory_leader() {
  is_territory_leader_ = false;
  clear_has_is_territory_leader();
}
inline bool HeroProto::is_territory_leader() const {
  return is_territory_leader_;
}
inline void HeroProto::set_is_territory_leader(bool value) {
  set_has_is_territory_leader();
  is_territory_leader_ = value;
}

// optional int64 accumulated_offline_time = 34;
inline bool HeroProto::has_accumulated_offline_time() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_accumulated_offline_time() {
  _has_bits_[1] |= 0x00000040u;
}
inline void HeroProto::clear_has_accumulated_offline_time() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void HeroProto::clear_accumulated_offline_time() {
  accumulated_offline_time_ = GOOGLE_LONGLONG(0);
  clear_has_accumulated_offline_time();
}
inline ::google::protobuf::int64 HeroProto::accumulated_offline_time() const {
  return accumulated_offline_time_;
}
inline void HeroProto::set_accumulated_offline_time(::google::protobuf::int64 value) {
  set_has_accumulated_offline_time();
  accumulated_offline_time_ = value;
}

// optional int32 vip_exp = 35;
inline bool HeroProto::has_vip_exp() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void HeroProto::set_has_vip_exp() {
  _has_bits_[1] |= 0x00000080u;
}
inline void HeroProto::clear_has_vip_exp() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void HeroProto::clear_vip_exp() {
  vip_exp_ = 0;
  clear_has_vip_exp();
}
inline ::google::protobuf::int32 HeroProto::vip_exp() const {
  return vip_exp_;
}
inline void HeroProto::set_vip_exp(::google::protobuf::int32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// repeated .app.message.StoryDungeonStatProto story_dungeon_proto = 36;
inline int HeroProto::story_dungeon_proto_size() const {
  return story_dungeon_proto_.size();
}
inline void HeroProto::clear_story_dungeon_proto() {
  story_dungeon_proto_.Clear();
}
inline const ::app::message::StoryDungeonStatProto& HeroProto::story_dungeon_proto(int index) const {
  return story_dungeon_proto_.Get(index);
}
inline ::app::message::StoryDungeonStatProto* HeroProto::mutable_story_dungeon_proto(int index) {
  return story_dungeon_proto_.Mutable(index);
}
inline ::app::message::StoryDungeonStatProto* HeroProto::add_story_dungeon_proto() {
  return story_dungeon_proto_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonStatProto >&
HeroProto::story_dungeon_proto() const {
  return story_dungeon_proto_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonStatProto >*
HeroProto::mutable_story_dungeon_proto() {
  return &story_dungeon_proto_;
}

// repeated .app.message.StoryDungeonCollectablePrizeProto story_dungeon_collectable_prize_proto = 37;
inline int HeroProto::story_dungeon_collectable_prize_proto_size() const {
  return story_dungeon_collectable_prize_proto_.size();
}
inline void HeroProto::clear_story_dungeon_collectable_prize_proto() {
  story_dungeon_collectable_prize_proto_.Clear();
}
inline const ::app::message::StoryDungeonCollectablePrizeProto& HeroProto::story_dungeon_collectable_prize_proto(int index) const {
  return story_dungeon_collectable_prize_proto_.Get(index);
}
inline ::app::message::StoryDungeonCollectablePrizeProto* HeroProto::mutable_story_dungeon_collectable_prize_proto(int index) {
  return story_dungeon_collectable_prize_proto_.Mutable(index);
}
inline ::app::message::StoryDungeonCollectablePrizeProto* HeroProto::add_story_dungeon_collectable_prize_proto() {
  return story_dungeon_collectable_prize_proto_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonCollectablePrizeProto >&
HeroProto::story_dungeon_collectable_prize_proto() const {
  return story_dungeon_collectable_prize_proto_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::StoryDungeonCollectablePrizeProto >*
HeroProto::mutable_story_dungeon_collectable_prize_proto() {
  return &story_dungeon_collectable_prize_proto_;
}

// optional int32 auto_finish_story_id = 38;
inline bool HeroProto::has_auto_finish_story_id() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void HeroProto::set_has_auto_finish_story_id() {
  _has_bits_[1] |= 0x00000400u;
}
inline void HeroProto::clear_has_auto_finish_story_id() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void HeroProto::clear_auto_finish_story_id() {
  auto_finish_story_id_ = 0;
  clear_has_auto_finish_story_id();
}
inline ::google::protobuf::int32 HeroProto::auto_finish_story_id() const {
  return auto_finish_story_id_;
}
inline void HeroProto::set_auto_finish_story_id(::google::protobuf::int32 value) {
  set_has_auto_finish_story_id();
  auto_finish_story_id_ = value;
}

// optional int64 auto_finish_story_complete_time = 39;
inline bool HeroProto::has_auto_finish_story_complete_time() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_auto_finish_story_complete_time() {
  _has_bits_[1] |= 0x00000800u;
}
inline void HeroProto::clear_has_auto_finish_story_complete_time() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void HeroProto::clear_auto_finish_story_complete_time() {
  auto_finish_story_complete_time_ = GOOGLE_LONGLONG(0);
  clear_has_auto_finish_story_complete_time();
}
inline ::google::protobuf::int64 HeroProto::auto_finish_story_complete_time() const {
  return auto_finish_story_complete_time_;
}
inline void HeroProto::set_auto_finish_story_complete_time(::google::protobuf::int64 value) {
  set_has_auto_finish_story_complete_time();
  auto_finish_story_complete_time_ = value;
}

// optional int32 finished_challenge_dungeon_sequence_id = 40;
inline bool HeroProto::has_finished_challenge_dungeon_sequence_id() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_finished_challenge_dungeon_sequence_id() {
  _has_bits_[1] |= 0x00001000u;
}
inline void HeroProto::clear_has_finished_challenge_dungeon_sequence_id() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void HeroProto::clear_finished_challenge_dungeon_sequence_id() {
  finished_challenge_dungeon_sequence_id_ = 0;
  clear_has_finished_challenge_dungeon_sequence_id();
}
inline ::google::protobuf::int32 HeroProto::finished_challenge_dungeon_sequence_id() const {
  return finished_challenge_dungeon_sequence_id_;
}
inline void HeroProto::set_finished_challenge_dungeon_sequence_id(::google::protobuf::int32 value) {
  set_has_finished_challenge_dungeon_sequence_id();
  finished_challenge_dungeon_sequence_id_ = value;
}

// repeated int32 finished_vip_dungeon_id = 46;
inline int HeroProto::finished_vip_dungeon_id_size() const {
  return finished_vip_dungeon_id_.size();
}
inline void HeroProto::clear_finished_vip_dungeon_id() {
  finished_vip_dungeon_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::finished_vip_dungeon_id(int index) const {
  return finished_vip_dungeon_id_.Get(index);
}
inline void HeroProto::set_finished_vip_dungeon_id(int index, ::google::protobuf::int32 value) {
  finished_vip_dungeon_id_.Set(index, value);
}
inline void HeroProto::add_finished_vip_dungeon_id(::google::protobuf::int32 value) {
  finished_vip_dungeon_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::finished_vip_dungeon_id() const {
  return finished_vip_dungeon_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_finished_vip_dungeon_id() {
  return &finished_vip_dungeon_id_;
}

// optional int32 defence_today_finished_batch = 41 [deprecated = true];
inline bool HeroProto::has_defence_today_finished_batch() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void HeroProto::set_has_defence_today_finished_batch() {
  _has_bits_[1] |= 0x00004000u;
}
inline void HeroProto::clear_has_defence_today_finished_batch() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void HeroProto::clear_defence_today_finished_batch() {
  defence_today_finished_batch_ = 0;
  clear_has_defence_today_finished_batch();
}
inline ::google::protobuf::int32 HeroProto::defence_today_finished_batch() const {
  return defence_today_finished_batch_;
}
inline void HeroProto::set_defence_today_finished_batch(::google::protobuf::int32 value) {
  set_has_defence_today_finished_batch();
  defence_today_finished_batch_ = value;
}

// optional int32 defence_history_max_batch = 42 [deprecated = true];
inline bool HeroProto::has_defence_history_max_batch() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void HeroProto::set_has_defence_history_max_batch() {
  _has_bits_[1] |= 0x00008000u;
}
inline void HeroProto::clear_has_defence_history_max_batch() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void HeroProto::clear_defence_history_max_batch() {
  defence_history_max_batch_ = 0;
  clear_has_defence_history_max_batch();
}
inline ::google::protobuf::int32 HeroProto::defence_history_max_batch() const {
  return defence_history_max_batch_;
}
inline void HeroProto::set_defence_history_max_batch(::google::protobuf::int32 value) {
  set_has_defence_history_max_batch();
  defence_history_max_batch_ = value;
}

// optional int32 defence_today_reset_count = 44;
inline bool HeroProto::has_defence_today_reset_count() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void HeroProto::set_has_defence_today_reset_count() {
  _has_bits_[1] |= 0x00010000u;
}
inline void HeroProto::clear_has_defence_today_reset_count() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void HeroProto::clear_defence_today_reset_count() {
  defence_today_reset_count_ = 0;
  clear_has_defence_today_reset_count();
}
inline ::google::protobuf::int32 HeroProto::defence_today_reset_count() const {
  return defence_today_reset_count_;
}
inline void HeroProto::set_defence_today_reset_count(::google::protobuf::int32 value) {
  set_has_defence_today_reset_count();
  defence_today_reset_count_ = value;
}

// optional int32 defence_collected_first_pass_prize = 45 [deprecated = true];
inline bool HeroProto::has_defence_collected_first_pass_prize() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void HeroProto::set_has_defence_collected_first_pass_prize() {
  _has_bits_[1] |= 0x00020000u;
}
inline void HeroProto::clear_has_defence_collected_first_pass_prize() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void HeroProto::clear_defence_collected_first_pass_prize() {
  defence_collected_first_pass_prize_ = 0;
  clear_has_defence_collected_first_pass_prize();
}
inline ::google::protobuf::int32 HeroProto::defence_collected_first_pass_prize() const {
  return defence_collected_first_pass_prize_;
}
inline void HeroProto::set_defence_collected_first_pass_prize(::google::protobuf::int32 value) {
  set_has_defence_collected_first_pass_prize();
  defence_collected_first_pass_prize_ = value;
}

// repeated bytes defence_collectable_prize = 47 [deprecated = true];
inline int HeroProto::defence_collectable_prize_size() const {
  return defence_collectable_prize_.size();
}
inline void HeroProto::clear_defence_collectable_prize() {
  defence_collectable_prize_.Clear();
}
inline const ::std::string& HeroProto::defence_collectable_prize(int index) const {
  return defence_collectable_prize_.Get(index);
}
inline ::std::string* HeroProto::mutable_defence_collectable_prize(int index) {
  return defence_collectable_prize_.Mutable(index);
}
inline void HeroProto::set_defence_collectable_prize(int index, const ::std::string& value) {
  defence_collectable_prize_.Mutable(index)->assign(value);
}
inline void HeroProto::set_defence_collectable_prize(int index, const char* value) {
  defence_collectable_prize_.Mutable(index)->assign(value);
}
inline void HeroProto::set_defence_collectable_prize(int index, const void* value, size_t size) {
  defence_collectable_prize_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::add_defence_collectable_prize() {
  return defence_collectable_prize_.Add();
}
inline void HeroProto::add_defence_collectable_prize(const ::std::string& value) {
  defence_collectable_prize_.Add()->assign(value);
}
inline void HeroProto::add_defence_collectable_prize(const char* value) {
  defence_collectable_prize_.Add()->assign(value);
}
inline void HeroProto::add_defence_collectable_prize(const void* value, size_t size) {
  defence_collectable_prize_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeroProto::defence_collectable_prize() const {
  return defence_collectable_prize_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeroProto::mutable_defence_collectable_prize() {
  return &defence_collectable_prize_;
}

// optional int32 sou_shen_point = 48;
inline bool HeroProto::has_sou_shen_point() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_sou_shen_point() {
  _has_bits_[1] |= 0x00080000u;
}
inline void HeroProto::clear_has_sou_shen_point() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void HeroProto::clear_sou_shen_point() {
  sou_shen_point_ = 0;
  clear_has_sou_shen_point();
}
inline ::google::protobuf::int32 HeroProto::sou_shen_point() const {
  return sou_shen_point_;
}
inline void HeroProto::set_sou_shen_point(::google::protobuf::int32 value) {
  set_has_sou_shen_point();
  sou_shen_point_ = value;
}

// repeated int32 sou_shen_today_passed_id = 49;
inline int HeroProto::sou_shen_today_passed_id_size() const {
  return sou_shen_today_passed_id_.size();
}
inline void HeroProto::clear_sou_shen_today_passed_id() {
  sou_shen_today_passed_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::sou_shen_today_passed_id(int index) const {
  return sou_shen_today_passed_id_.Get(index);
}
inline void HeroProto::set_sou_shen_today_passed_id(int index, ::google::protobuf::int32 value) {
  sou_shen_today_passed_id_.Set(index, value);
}
inline void HeroProto::add_sou_shen_today_passed_id(::google::protobuf::int32 value) {
  sou_shen_today_passed_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::sou_shen_today_passed_id() const {
  return sou_shen_today_passed_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_sou_shen_today_passed_id() {
  return &sou_shen_today_passed_id_;
}

// repeated int32 sou_shen_life_passed_id = 50;
inline int HeroProto::sou_shen_life_passed_id_size() const {
  return sou_shen_life_passed_id_.size();
}
inline void HeroProto::clear_sou_shen_life_passed_id() {
  sou_shen_life_passed_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::sou_shen_life_passed_id(int index) const {
  return sou_shen_life_passed_id_.Get(index);
}
inline void HeroProto::set_sou_shen_life_passed_id(int index, ::google::protobuf::int32 value) {
  sou_shen_life_passed_id_.Set(index, value);
}
inline void HeroProto::add_sou_shen_life_passed_id(::google::protobuf::int32 value) {
  sou_shen_life_passed_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::sou_shen_life_passed_id() const {
  return sou_shen_life_passed_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_sou_shen_life_passed_id() {
  return &sou_shen_life_passed_id_;
}

// optional int32 ling_yun_today_entered_times = 51;
inline bool HeroProto::has_ling_yun_today_entered_times() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void HeroProto::set_has_ling_yun_today_entered_times() {
  _has_bits_[1] |= 0x00400000u;
}
inline void HeroProto::clear_has_ling_yun_today_entered_times() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void HeroProto::clear_ling_yun_today_entered_times() {
  ling_yun_today_entered_times_ = 0;
  clear_has_ling_yun_today_entered_times();
}
inline ::google::protobuf::int32 HeroProto::ling_yun_today_entered_times() const {
  return ling_yun_today_entered_times_;
}
inline void HeroProto::set_ling_yun_today_entered_times(::google::protobuf::int32 value) {
  set_has_ling_yun_today_entered_times();
  ling_yun_today_entered_times_ = value;
}

// optional int32 ling_yun_today_finish_state = 130;
inline bool HeroProto::has_ling_yun_today_finish_state() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void HeroProto::set_has_ling_yun_today_finish_state() {
  _has_bits_[1] |= 0x00800000u;
}
inline void HeroProto::clear_has_ling_yun_today_finish_state() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void HeroProto::clear_ling_yun_today_finish_state() {
  ling_yun_today_finish_state_ = 0;
  clear_has_ling_yun_today_finish_state();
}
inline ::google::protobuf::int32 HeroProto::ling_yun_today_finish_state() const {
  return ling_yun_today_finish_state_;
}
inline void HeroProto::set_ling_yun_today_finish_state(::google::protobuf::int32 value) {
  set_has_ling_yun_today_finish_state();
  ling_yun_today_finish_state_ = value;
}

// repeated .app.message.GroupDungeonCollectablePrizeProto group_collectable_prize_proto = 52;
inline int HeroProto::group_collectable_prize_proto_size() const {
  return group_collectable_prize_proto_.size();
}
inline void HeroProto::clear_group_collectable_prize_proto() {
  group_collectable_prize_proto_.Clear();
}
inline const ::app::message::GroupDungeonCollectablePrizeProto& HeroProto::group_collectable_prize_proto(int index) const {
  return group_collectable_prize_proto_.Get(index);
}
inline ::app::message::GroupDungeonCollectablePrizeProto* HeroProto::mutable_group_collectable_prize_proto(int index) {
  return group_collectable_prize_proto_.Mutable(index);
}
inline ::app::message::GroupDungeonCollectablePrizeProto* HeroProto::add_group_collectable_prize_proto() {
  return group_collectable_prize_proto_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::GroupDungeonCollectablePrizeProto >&
HeroProto::group_collectable_prize_proto() const {
  return group_collectable_prize_proto_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::GroupDungeonCollectablePrizeProto >*
HeroProto::mutable_group_collectable_prize_proto() {
  return &group_collectable_prize_proto_;
}

// optional bool long_mai_today_first_passed = 53;
inline bool HeroProto::has_long_mai_today_first_passed() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void HeroProto::set_has_long_mai_today_first_passed() {
  _has_bits_[1] |= 0x02000000u;
}
inline void HeroProto::clear_has_long_mai_today_first_passed() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void HeroProto::clear_long_mai_today_first_passed() {
  long_mai_today_first_passed_ = false;
  clear_has_long_mai_today_first_passed();
}
inline bool HeroProto::long_mai_today_first_passed() const {
  return long_mai_today_first_passed_;
}
inline void HeroProto::set_long_mai_today_first_passed(bool value) {
  set_has_long_mai_today_first_passed();
  long_mai_today_first_passed_ = value;
}

// optional int32 wu_jue_today_entered_times = 54;
inline bool HeroProto::has_wu_jue_today_entered_times() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_wu_jue_today_entered_times() {
  _has_bits_[1] |= 0x04000000u;
}
inline void HeroProto::clear_has_wu_jue_today_entered_times() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void HeroProto::clear_wu_jue_today_entered_times() {
  wu_jue_today_entered_times_ = 0;
  clear_has_wu_jue_today_entered_times();
}
inline ::google::protobuf::int32 HeroProto::wu_jue_today_entered_times() const {
  return wu_jue_today_entered_times_;
}
inline void HeroProto::set_wu_jue_today_entered_times(::google::protobuf::int32 value) {
  set_has_wu_jue_today_entered_times();
  wu_jue_today_entered_times_ = value;
}

// optional int32 wu_jue_today_collected_first_try_transport_prize_times = 242;
inline bool HeroProto::has_wu_jue_today_collected_first_try_transport_prize_times() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_wu_jue_today_collected_first_try_transport_prize_times() {
  _has_bits_[1] |= 0x08000000u;
}
inline void HeroProto::clear_has_wu_jue_today_collected_first_try_transport_prize_times() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void HeroProto::clear_wu_jue_today_collected_first_try_transport_prize_times() {
  wu_jue_today_collected_first_try_transport_prize_times_ = 0;
  clear_has_wu_jue_today_collected_first_try_transport_prize_times();
}
inline ::google::protobuf::int32 HeroProto::wu_jue_today_collected_first_try_transport_prize_times() const {
  return wu_jue_today_collected_first_try_transport_prize_times_;
}
inline void HeroProto::set_wu_jue_today_collected_first_try_transport_prize_times(::google::protobuf::int32 value) {
  set_has_wu_jue_today_collected_first_try_transport_prize_times();
  wu_jue_today_collected_first_try_transport_prize_times_ = value;
}

// repeated int32 territory_today_collected_prize_scene_id = 55;
inline int HeroProto::territory_today_collected_prize_scene_id_size() const {
  return territory_today_collected_prize_scene_id_.size();
}
inline void HeroProto::clear_territory_today_collected_prize_scene_id() {
  territory_today_collected_prize_scene_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::territory_today_collected_prize_scene_id(int index) const {
  return territory_today_collected_prize_scene_id_.Get(index);
}
inline void HeroProto::set_territory_today_collected_prize_scene_id(int index, ::google::protobuf::int32 value) {
  territory_today_collected_prize_scene_id_.Set(index, value);
}
inline void HeroProto::add_territory_today_collected_prize_scene_id(::google::protobuf::int32 value) {
  territory_today_collected_prize_scene_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::territory_today_collected_prize_scene_id() const {
  return territory_today_collected_prize_scene_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_territory_today_collected_prize_scene_id() {
  return &territory_today_collected_prize_scene_id_;
}

// repeated int32 daily_activity_result = 68;
inline int HeroProto::daily_activity_result_size() const {
  return daily_activity_result_.size();
}
inline void HeroProto::clear_daily_activity_result() {
  daily_activity_result_.Clear();
}
inline ::google::protobuf::int32 HeroProto::daily_activity_result(int index) const {
  return daily_activity_result_.Get(index);
}
inline void HeroProto::set_daily_activity_result(int index, ::google::protobuf::int32 value) {
  daily_activity_result_.Set(index, value);
}
inline void HeroProto::add_daily_activity_result(::google::protobuf::int32 value) {
  daily_activity_result_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::daily_activity_result() const {
  return daily_activity_result_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_daily_activity_result() {
  return &daily_activity_result_;
}

// optional int32 sheng_wang = 69;
inline bool HeroProto::has_sheng_wang() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void HeroProto::set_has_sheng_wang() {
  _has_bits_[1] |= 0x40000000u;
}
inline void HeroProto::clear_has_sheng_wang() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void HeroProto::clear_sheng_wang() {
  sheng_wang_ = 0;
  clear_has_sheng_wang();
}
inline ::google::protobuf::int32 HeroProto::sheng_wang() const {
  return sheng_wang_;
}
inline void HeroProto::set_sheng_wang(::google::protobuf::int32 value) {
  set_has_sheng_wang();
  sheng_wang_ = value;
}

// repeated int32 sheng_wang_task = 70;
inline int HeroProto::sheng_wang_task_size() const {
  return sheng_wang_task_.size();
}
inline void HeroProto::clear_sheng_wang_task() {
  sheng_wang_task_.Clear();
}
inline ::google::protobuf::int32 HeroProto::sheng_wang_task(int index) const {
  return sheng_wang_task_.Get(index);
}
inline void HeroProto::set_sheng_wang_task(int index, ::google::protobuf::int32 value) {
  sheng_wang_task_.Set(index, value);
}
inline void HeroProto::add_sheng_wang_task(::google::protobuf::int32 value) {
  sheng_wang_task_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::sheng_wang_task() const {
  return sheng_wang_task_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_sheng_wang_task() {
  return &sheng_wang_task_;
}

// optional int32 use_free_chat_times = 71;
inline bool HeroProto::has_use_free_chat_times() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void HeroProto::set_has_use_free_chat_times() {
  _has_bits_[2] |= 0x00000001u;
}
inline void HeroProto::clear_has_use_free_chat_times() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void HeroProto::clear_use_free_chat_times() {
  use_free_chat_times_ = 0;
  clear_has_use_free_chat_times();
}
inline ::google::protobuf::int32 HeroProto::use_free_chat_times() const {
  return use_free_chat_times_;
}
inline void HeroProto::set_use_free_chat_times(::google::protobuf::int32 value) {
  set_has_use_free_chat_times();
  use_free_chat_times_ = value;
}

// repeated int32 gems = 72;
inline int HeroProto::gems_size() const {
  return gems_.size();
}
inline void HeroProto::clear_gems() {
  gems_.Clear();
}
inline ::google::protobuf::int32 HeroProto::gems(int index) const {
  return gems_.Get(index);
}
inline void HeroProto::set_gems(int index, ::google::protobuf::int32 value) {
  gems_.Set(index, value);
}
inline void HeroProto::add_gems(::google::protobuf::int32 value) {
  gems_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::gems() const {
  return gems_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_gems() {
  return &gems_;
}

// optional .app.message.BowProto bow = 73;
inline bool HeroProto::has_bow() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_bow() {
  _has_bits_[2] |= 0x00000004u;
}
inline void HeroProto::clear_has_bow() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void HeroProto::clear_bow() {
  if (bow_ != NULL) bow_->::app::message::BowProto::Clear();
  clear_has_bow();
}
inline const ::app::message::BowProto& HeroProto::bow() const {
  return bow_ != NULL ? *bow_ : *default_instance_->bow_;
}
inline ::app::message::BowProto* HeroProto::mutable_bow() {
  set_has_bow();
  if (bow_ == NULL) bow_ = new ::app::message::BowProto;
  return bow_;
}
inline ::app::message::BowProto* HeroProto::release_bow() {
  clear_has_bow();
  ::app::message::BowProto* temp = bow_;
  bow_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_bow(::app::message::BowProto* bow) {
  delete bow_;
  bow_ = bow;
  if (bow) {
    set_has_bow();
  } else {
    clear_has_bow();
  }
}

// repeated int64 admired_hero = 74;
inline int HeroProto::admired_hero_size() const {
  return admired_hero_.size();
}
inline void HeroProto::clear_admired_hero() {
  admired_hero_.Clear();
}
inline ::google::protobuf::int64 HeroProto::admired_hero(int index) const {
  return admired_hero_.Get(index);
}
inline void HeroProto::set_admired_hero(int index, ::google::protobuf::int64 value) {
  admired_hero_.Set(index, value);
}
inline void HeroProto::add_admired_hero(::google::protobuf::int64 value) {
  admired_hero_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HeroProto::admired_hero() const {
  return admired_hero_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HeroProto::mutable_admired_hero() {
  return &admired_hero_;
}

// optional int64 last_logout_time = 75;
inline bool HeroProto::has_last_logout_time() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void HeroProto::set_has_last_logout_time() {
  _has_bits_[2] |= 0x00000010u;
}
inline void HeroProto::clear_has_last_logout_time() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void HeroProto::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_logout_time();
}
inline ::google::protobuf::int64 HeroProto::last_logout_time() const {
  return last_logout_time_;
}
inline void HeroProto::set_last_logout_time(::google::protobuf::int64 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// optional int32 collected_vip_prize = 76;
inline bool HeroProto::has_collected_vip_prize() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void HeroProto::set_has_collected_vip_prize() {
  _has_bits_[2] |= 0x00000020u;
}
inline void HeroProto::clear_has_collected_vip_prize() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void HeroProto::clear_collected_vip_prize() {
  collected_vip_prize_ = 0;
  clear_has_collected_vip_prize();
}
inline ::google::protobuf::int32 HeroProto::collected_vip_prize() const {
  return collected_vip_prize_;
}
inline void HeroProto::set_collected_vip_prize(::google::protobuf::int32 value) {
  set_has_collected_vip_prize();
  collected_vip_prize_ = value;
}

// optional int64 next_collect_vip_weekly_prize_time = 77;
inline bool HeroProto::has_next_collect_vip_weekly_prize_time() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_next_collect_vip_weekly_prize_time() {
  _has_bits_[2] |= 0x00000040u;
}
inline void HeroProto::clear_has_next_collect_vip_weekly_prize_time() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void HeroProto::clear_next_collect_vip_weekly_prize_time() {
  next_collect_vip_weekly_prize_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_collect_vip_weekly_prize_time();
}
inline ::google::protobuf::int64 HeroProto::next_collect_vip_weekly_prize_time() const {
  return next_collect_vip_weekly_prize_time_;
}
inline void HeroProto::set_next_collect_vip_weekly_prize_time(::google::protobuf::int64 value) {
  set_has_next_collect_vip_weekly_prize_time();
  next_collect_vip_weekly_prize_time_ = value;
}

// optional int32 using_weapon = 78;
inline bool HeroProto::has_using_weapon() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void HeroProto::set_has_using_weapon() {
  _has_bits_[2] |= 0x00000080u;
}
inline void HeroProto::clear_has_using_weapon() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void HeroProto::clear_using_weapon() {
  using_weapon_ = 0;
  clear_has_using_weapon();
}
inline ::google::protobuf::int32 HeroProto::using_weapon() const {
  return using_weapon_;
}
inline void HeroProto::set_using_weapon(::google::protobuf::int32 value) {
  set_has_using_weapon();
  using_weapon_ = value;
}

// repeated .app.message.SuperWeaponProto super_weapon = 79;
inline int HeroProto::super_weapon_size() const {
  return super_weapon_.size();
}
inline void HeroProto::clear_super_weapon() {
  super_weapon_.Clear();
}
inline const ::app::message::SuperWeaponProto& HeroProto::super_weapon(int index) const {
  return super_weapon_.Get(index);
}
inline ::app::message::SuperWeaponProto* HeroProto::mutable_super_weapon(int index) {
  return super_weapon_.Mutable(index);
}
inline ::app::message::SuperWeaponProto* HeroProto::add_super_weapon() {
  return super_weapon_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SuperWeaponProto >&
HeroProto::super_weapon() const {
  return super_weapon_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SuperWeaponProto >*
HeroProto::mutable_super_weapon() {
  return &super_weapon_;
}

// optional .app.message.SpriteStatProto super_weapon_max_level_add_stat = 236;
inline bool HeroProto::has_super_weapon_max_level_add_stat() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void HeroProto::set_has_super_weapon_max_level_add_stat() {
  _has_bits_[2] |= 0x00000200u;
}
inline void HeroProto::clear_has_super_weapon_max_level_add_stat() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void HeroProto::clear_super_weapon_max_level_add_stat() {
  if (super_weapon_max_level_add_stat_ != NULL) super_weapon_max_level_add_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_super_weapon_max_level_add_stat();
}
inline const ::app::message::SpriteStatProto& HeroProto::super_weapon_max_level_add_stat() const {
  return super_weapon_max_level_add_stat_ != NULL ? *super_weapon_max_level_add_stat_ : *default_instance_->super_weapon_max_level_add_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::mutable_super_weapon_max_level_add_stat() {
  set_has_super_weapon_max_level_add_stat();
  if (super_weapon_max_level_add_stat_ == NULL) super_weapon_max_level_add_stat_ = new ::app::message::SpriteStatProto;
  return super_weapon_max_level_add_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::release_super_weapon_max_level_add_stat() {
  clear_has_super_weapon_max_level_add_stat();
  ::app::message::SpriteStatProto* temp = super_weapon_max_level_add_stat_;
  super_weapon_max_level_add_stat_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_super_weapon_max_level_add_stat(::app::message::SpriteStatProto* super_weapon_max_level_add_stat) {
  delete super_weapon_max_level_add_stat_;
  super_weapon_max_level_add_stat_ = super_weapon_max_level_add_stat;
  if (super_weapon_max_level_add_stat) {
    set_has_super_weapon_max_level_add_stat();
  } else {
    clear_has_super_weapon_max_level_add_stat();
  }
}

// optional bool has_magic_weapon = 298;
inline bool HeroProto::has_has_magic_weapon() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void HeroProto::set_has_has_magic_weapon() {
  _has_bits_[2] |= 0x00000400u;
}
inline void HeroProto::clear_has_has_magic_weapon() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void HeroProto::clear_has_magic_weapon() {
  has_magic_weapon_ = false;
  clear_has_has_magic_weapon();
}
inline bool HeroProto::has_magic_weapon() const {
  return has_magic_weapon_;
}
inline void HeroProto::set_has_magic_weapon(bool value) {
  set_has_has_magic_weapon();
  has_magic_weapon_ = value;
}

// optional .app.message.SpriteStatProto magic_added_stat = 237;
inline bool HeroProto::has_magic_added_stat() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_magic_added_stat() {
  _has_bits_[2] |= 0x00000800u;
}
inline void HeroProto::clear_has_magic_added_stat() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void HeroProto::clear_magic_added_stat() {
  if (magic_added_stat_ != NULL) magic_added_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_magic_added_stat();
}
inline const ::app::message::SpriteStatProto& HeroProto::magic_added_stat() const {
  return magic_added_stat_ != NULL ? *magic_added_stat_ : *default_instance_->magic_added_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::mutable_magic_added_stat() {
  set_has_magic_added_stat();
  if (magic_added_stat_ == NULL) magic_added_stat_ = new ::app::message::SpriteStatProto;
  return magic_added_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::release_magic_added_stat() {
  clear_has_magic_added_stat();
  ::app::message::SpriteStatProto* temp = magic_added_stat_;
  magic_added_stat_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_magic_added_stat(::app::message::SpriteStatProto* magic_added_stat) {
  delete magic_added_stat_;
  magic_added_stat_ = magic_added_stat;
  if (magic_added_stat) {
    set_has_magic_added_stat();
  } else {
    clear_has_magic_added_stat();
  }
}

// optional .app.message.SpriteStatProto magic_not_saved_added_stat = 238;
inline bool HeroProto::has_magic_not_saved_added_stat() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_magic_not_saved_added_stat() {
  _has_bits_[2] |= 0x00001000u;
}
inline void HeroProto::clear_has_magic_not_saved_added_stat() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void HeroProto::clear_magic_not_saved_added_stat() {
  if (magic_not_saved_added_stat_ != NULL) magic_not_saved_added_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_magic_not_saved_added_stat();
}
inline const ::app::message::SpriteStatProto& HeroProto::magic_not_saved_added_stat() const {
  return magic_not_saved_added_stat_ != NULL ? *magic_not_saved_added_stat_ : *default_instance_->magic_not_saved_added_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::mutable_magic_not_saved_added_stat() {
  set_has_magic_not_saved_added_stat();
  if (magic_not_saved_added_stat_ == NULL) magic_not_saved_added_stat_ = new ::app::message::SpriteStatProto;
  return magic_not_saved_added_stat_;
}
inline ::app::message::SpriteStatProto* HeroProto::release_magic_not_saved_added_stat() {
  clear_has_magic_not_saved_added_stat();
  ::app::message::SpriteStatProto* temp = magic_not_saved_added_stat_;
  magic_not_saved_added_stat_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_magic_not_saved_added_stat(::app::message::SpriteStatProto* magic_not_saved_added_stat) {
  delete magic_not_saved_added_stat_;
  magic_not_saved_added_stat_ = magic_not_saved_added_stat;
  if (magic_not_saved_added_stat) {
    set_has_magic_not_saved_added_stat();
  } else {
    clear_has_magic_not_saved_added_stat();
  }
}

// repeated bool has_unlock_magic_weapon_gem = 239;
inline int HeroProto::has_unlock_magic_weapon_gem_size() const {
  return has_unlock_magic_weapon_gem_.size();
}
inline void HeroProto::clear_has_unlock_magic_weapon_gem() {
  has_unlock_magic_weapon_gem_.Clear();
}
inline bool HeroProto::has_unlock_magic_weapon_gem(int index) const {
  return has_unlock_magic_weapon_gem_.Get(index);
}
inline void HeroProto::set_has_unlock_magic_weapon_gem(int index, bool value) {
  has_unlock_magic_weapon_gem_.Set(index, value);
}
inline void HeroProto::add_has_unlock_magic_weapon_gem(bool value) {
  has_unlock_magic_weapon_gem_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
HeroProto::has_unlock_magic_weapon_gem() const {
  return has_unlock_magic_weapon_gem_;
}
inline ::google::protobuf::RepeatedField< bool >*
HeroProto::mutable_has_unlock_magic_weapon_gem() {
  return &has_unlock_magic_weapon_gem_;
}

// repeated int32 magic_weapon_gem_level = 240;
inline int HeroProto::magic_weapon_gem_level_size() const {
  return magic_weapon_gem_level_.size();
}
inline void HeroProto::clear_magic_weapon_gem_level() {
  magic_weapon_gem_level_.Clear();
}
inline ::google::protobuf::int32 HeroProto::magic_weapon_gem_level(int index) const {
  return magic_weapon_gem_level_.Get(index);
}
inline void HeroProto::set_magic_weapon_gem_level(int index, ::google::protobuf::int32 value) {
  magic_weapon_gem_level_.Set(index, value);
}
inline void HeroProto::add_magic_weapon_gem_level(::google::protobuf::int32 value) {
  magic_weapon_gem_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::magic_weapon_gem_level() const {
  return magic_weapon_gem_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_magic_weapon_gem_level() {
  return &magic_weapon_gem_level_;
}

// repeated bool magic_weapon_gem_binded = 241;
inline int HeroProto::magic_weapon_gem_binded_size() const {
  return magic_weapon_gem_binded_.size();
}
inline void HeroProto::clear_magic_weapon_gem_binded() {
  magic_weapon_gem_binded_.Clear();
}
inline bool HeroProto::magic_weapon_gem_binded(int index) const {
  return magic_weapon_gem_binded_.Get(index);
}
inline void HeroProto::set_magic_weapon_gem_binded(int index, bool value) {
  magic_weapon_gem_binded_.Set(index, value);
}
inline void HeroProto::add_magic_weapon_gem_binded(bool value) {
  magic_weapon_gem_binded_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
HeroProto::magic_weapon_gem_binded() const {
  return magic_weapon_gem_binded_;
}
inline ::google::protobuf::RepeatedField< bool >*
HeroProto::mutable_magic_weapon_gem_binded() {
  return &magic_weapon_gem_binded_;
}

// optional int32 divine_times = 80;
inline bool HeroProto::has_divine_times() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void HeroProto::set_has_divine_times() {
  _has_bits_[2] |= 0x00010000u;
}
inline void HeroProto::clear_has_divine_times() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void HeroProto::clear_divine_times() {
  divine_times_ = 0;
  clear_has_divine_times();
}
inline ::google::protobuf::int32 HeroProto::divine_times() const {
  return divine_times_;
}
inline void HeroProto::set_divine_times(::google::protobuf::int32 value) {
  set_has_divine_times();
  divine_times_ = value;
}

// optional int32 divine_amount = 81 [deprecated = true];
inline bool HeroProto::has_divine_amount() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void HeroProto::set_has_divine_amount() {
  _has_bits_[2] |= 0x00020000u;
}
inline void HeroProto::clear_has_divine_amount() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void HeroProto::clear_divine_amount() {
  divine_amount_ = 0;
  clear_has_divine_amount();
}
inline ::google::protobuf::int32 HeroProto::divine_amount() const {
  return divine_amount_;
}
inline void HeroProto::set_divine_amount(::google::protobuf::int32 value) {
  set_has_divine_amount();
  divine_amount_ = value;
}

// optional int32 divine_storage_goods_count = 82;
inline bool HeroProto::has_divine_storage_goods_count() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void HeroProto::set_has_divine_storage_goods_count() {
  _has_bits_[2] |= 0x00040000u;
}
inline void HeroProto::clear_has_divine_storage_goods_count() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void HeroProto::clear_divine_storage_goods_count() {
  divine_storage_goods_count_ = 0;
  clear_has_divine_storage_goods_count();
}
inline ::google::protobuf::int32 HeroProto::divine_storage_goods_count() const {
  return divine_storage_goods_count_;
}
inline void HeroProto::set_divine_storage_goods_count(::google::protobuf::int32 value) {
  set_has_divine_storage_goods_count();
  divine_storage_goods_count_ = value;
}

// optional .app.message.MountProto mount = 83;
inline bool HeroProto::has_mount() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_mount() {
  _has_bits_[2] |= 0x00080000u;
}
inline void HeroProto::clear_has_mount() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void HeroProto::clear_mount() {
  if (mount_ != NULL) mount_->::app::message::MountProto::Clear();
  clear_has_mount();
}
inline const ::app::message::MountProto& HeroProto::mount() const {
  return mount_ != NULL ? *mount_ : *default_instance_->mount_;
}
inline ::app::message::MountProto* HeroProto::mutable_mount() {
  set_has_mount();
  if (mount_ == NULL) mount_ = new ::app::message::MountProto;
  return mount_;
}
inline ::app::message::MountProto* HeroProto::release_mount() {
  clear_has_mount();
  ::app::message::MountProto* temp = mount_;
  mount_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_mount(::app::message::MountProto* mount) {
  delete mount_;
  mount_ = mount;
  if (mount) {
    set_has_mount();
  } else {
    clear_has_mount();
  }
}

// optional int32 lottery = 84;
inline bool HeroProto::has_lottery() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void HeroProto::set_has_lottery() {
  _has_bits_[2] |= 0x00100000u;
}
inline void HeroProto::clear_has_lottery() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void HeroProto::clear_lottery() {
  lottery_ = 0;
  clear_has_lottery();
}
inline ::google::protobuf::int32 HeroProto::lottery() const {
  return lottery_;
}
inline void HeroProto::set_lottery(::google::protobuf::int32 value) {
  set_has_lottery();
  lottery_ = value;
}

// optional int64 daily_online_acc_time = 85;
inline bool HeroProto::has_daily_online_acc_time() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void HeroProto::set_has_daily_online_acc_time() {
  _has_bits_[2] |= 0x00200000u;
}
inline void HeroProto::clear_has_daily_online_acc_time() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void HeroProto::clear_daily_online_acc_time() {
  daily_online_acc_time_ = GOOGLE_LONGLONG(0);
  clear_has_daily_online_acc_time();
}
inline ::google::protobuf::int64 HeroProto::daily_online_acc_time() const {
  return daily_online_acc_time_;
}
inline void HeroProto::set_daily_online_acc_time(::google::protobuf::int64 value) {
  set_has_daily_online_acc_time();
  daily_online_acc_time_ = value;
}

// optional int32 sign = 86;
inline bool HeroProto::has_sign() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void HeroProto::set_has_sign() {
  _has_bits_[2] |= 0x00400000u;
}
inline void HeroProto::clear_has_sign() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void HeroProto::clear_sign() {
  sign_ = 0;
  clear_has_sign();
}
inline ::google::protobuf::int32 HeroProto::sign() const {
  return sign_;
}
inline void HeroProto::set_sign(::google::protobuf::int32 value) {
  set_has_sign();
  sign_ = value;
}

// optional int32 sign_prize = 87;
inline bool HeroProto::has_sign_prize() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void HeroProto::set_has_sign_prize() {
  _has_bits_[2] |= 0x00800000u;
}
inline void HeroProto::clear_has_sign_prize() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void HeroProto::clear_sign_prize() {
  sign_prize_ = 0;
  clear_has_sign_prize();
}
inline ::google::protobuf::int32 HeroProto::sign_prize() const {
  return sign_prize_;
}
inline void HeroProto::set_sign_prize(::google::protobuf::int32 value) {
  set_has_sign_prize();
  sign_prize_ = value;
}

// optional int32 replenish_sign_times = 88;
inline bool HeroProto::has_replenish_sign_times() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void HeroProto::set_has_replenish_sign_times() {
  _has_bits_[2] |= 0x01000000u;
}
inline void HeroProto::clear_has_replenish_sign_times() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void HeroProto::clear_replenish_sign_times() {
  replenish_sign_times_ = 0;
  clear_has_replenish_sign_times();
}
inline ::google::protobuf::int32 HeroProto::replenish_sign_times() const {
  return replenish_sign_times_;
}
inline void HeroProto::set_replenish_sign_times(::google::protobuf::int32 value) {
  set_has_replenish_sign_times();
  replenish_sign_times_ = value;
}

// optional int64 next_reduce_pk_amount_time = 89;
inline bool HeroProto::has_next_reduce_pk_amount_time() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void HeroProto::set_has_next_reduce_pk_amount_time() {
  _has_bits_[2] |= 0x02000000u;
}
inline void HeroProto::clear_has_next_reduce_pk_amount_time() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void HeroProto::clear_next_reduce_pk_amount_time() {
  next_reduce_pk_amount_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_reduce_pk_amount_time();
}
inline ::google::protobuf::int64 HeroProto::next_reduce_pk_amount_time() const {
  return next_reduce_pk_amount_time_;
}
inline void HeroProto::set_next_reduce_pk_amount_time(::google::protobuf::int64 value) {
  set_has_next_reduce_pk_amount_time();
  next_reduce_pk_amount_time_ = value;
}

// optional int32 pk_amount = 90;
inline bool HeroProto::has_pk_amount() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_pk_amount() {
  _has_bits_[2] |= 0x04000000u;
}
inline void HeroProto::clear_has_pk_amount() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void HeroProto::clear_pk_amount() {
  pk_amount_ = 0;
  clear_has_pk_amount();
}
inline ::google::protobuf::int32 HeroProto::pk_amount() const {
  return pk_amount_;
}
inline void HeroProto::set_pk_amount(::google::protobuf::int32 value) {
  set_has_pk_amount();
  pk_amount_ = value;
}

// optional int64 relive_protected_end_time = 91;
inline bool HeroProto::has_relive_protected_end_time() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_relive_protected_end_time() {
  _has_bits_[2] |= 0x08000000u;
}
inline void HeroProto::clear_has_relive_protected_end_time() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void HeroProto::clear_relive_protected_end_time() {
  relive_protected_end_time_ = GOOGLE_LONGLONG(0);
  clear_has_relive_protected_end_time();
}
inline ::google::protobuf::int64 HeroProto::relive_protected_end_time() const {
  return relive_protected_end_time_;
}
inline void HeroProto::set_relive_protected_end_time(::google::protobuf::int64 value) {
  set_has_relive_protected_end_time();
  relive_protected_end_time_ = value;
}

// optional int32 total_sign_times = 92;
inline bool HeroProto::has_total_sign_times() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void HeroProto::set_has_total_sign_times() {
  _has_bits_[2] |= 0x10000000u;
}
inline void HeroProto::clear_has_total_sign_times() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void HeroProto::clear_total_sign_times() {
  total_sign_times_ = 0;
  clear_has_total_sign_times();
}
inline ::google::protobuf::int32 HeroProto::total_sign_times() const {
  return total_sign_times_;
}
inline void HeroProto::set_total_sign_times(::google::protobuf::int32 value) {
  set_has_total_sign_times();
  total_sign_times_ = value;
}

// optional int32 total_recharge_yuanbao = 93;
inline bool HeroProto::has_total_recharge_yuanbao() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void HeroProto::set_has_total_recharge_yuanbao() {
  _has_bits_[2] |= 0x20000000u;
}
inline void HeroProto::clear_has_total_recharge_yuanbao() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void HeroProto::clear_total_recharge_yuanbao() {
  total_recharge_yuanbao_ = 0;
  clear_has_total_recharge_yuanbao();
}
inline ::google::protobuf::int32 HeroProto::total_recharge_yuanbao() const {
  return total_recharge_yuanbao_;
}
inline void HeroProto::set_total_recharge_yuanbao(::google::protobuf::int32 value) {
  set_has_total_recharge_yuanbao();
  total_recharge_yuanbao_ = value;
}

// repeated bytes lottery_goods_static_data = 94;
inline int HeroProto::lottery_goods_static_data_size() const {
  return lottery_goods_static_data_.size();
}
inline void HeroProto::clear_lottery_goods_static_data() {
  lottery_goods_static_data_.Clear();
}
inline const ::std::string& HeroProto::lottery_goods_static_data(int index) const {
  return lottery_goods_static_data_.Get(index);
}
inline ::std::string* HeroProto::mutable_lottery_goods_static_data(int index) {
  return lottery_goods_static_data_.Mutable(index);
}
inline void HeroProto::set_lottery_goods_static_data(int index, const ::std::string& value) {
  lottery_goods_static_data_.Mutable(index)->assign(value);
}
inline void HeroProto::set_lottery_goods_static_data(int index, const char* value) {
  lottery_goods_static_data_.Mutable(index)->assign(value);
}
inline void HeroProto::set_lottery_goods_static_data(int index, const void* value, size_t size) {
  lottery_goods_static_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::add_lottery_goods_static_data() {
  return lottery_goods_static_data_.Add();
}
inline void HeroProto::add_lottery_goods_static_data(const ::std::string& value) {
  lottery_goods_static_data_.Add()->assign(value);
}
inline void HeroProto::add_lottery_goods_static_data(const char* value) {
  lottery_goods_static_data_.Add()->assign(value);
}
inline void HeroProto::add_lottery_goods_static_data(const void* value, size_t size) {
  lottery_goods_static_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeroProto::lottery_goods_static_data() const {
  return lottery_goods_static_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeroProto::mutable_lottery_goods_static_data() {
  return &lottery_goods_static_data_;
}

// repeated bytes lottery_goods_dynamic_data = 95;
inline int HeroProto::lottery_goods_dynamic_data_size() const {
  return lottery_goods_dynamic_data_.size();
}
inline void HeroProto::clear_lottery_goods_dynamic_data() {
  lottery_goods_dynamic_data_.Clear();
}
inline const ::std::string& HeroProto::lottery_goods_dynamic_data(int index) const {
  return lottery_goods_dynamic_data_.Get(index);
}
inline ::std::string* HeroProto::mutable_lottery_goods_dynamic_data(int index) {
  return lottery_goods_dynamic_data_.Mutable(index);
}
inline void HeroProto::set_lottery_goods_dynamic_data(int index, const ::std::string& value) {
  lottery_goods_dynamic_data_.Mutable(index)->assign(value);
}
inline void HeroProto::set_lottery_goods_dynamic_data(int index, const char* value) {
  lottery_goods_dynamic_data_.Mutable(index)->assign(value);
}
inline void HeroProto::set_lottery_goods_dynamic_data(int index, const void* value, size_t size) {
  lottery_goods_dynamic_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::add_lottery_goods_dynamic_data() {
  return lottery_goods_dynamic_data_.Add();
}
inline void HeroProto::add_lottery_goods_dynamic_data(const ::std::string& value) {
  lottery_goods_dynamic_data_.Add()->assign(value);
}
inline void HeroProto::add_lottery_goods_dynamic_data(const char* value) {
  lottery_goods_dynamic_data_.Add()->assign(value);
}
inline void HeroProto::add_lottery_goods_dynamic_data(const void* value, size_t size) {
  lottery_goods_dynamic_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeroProto::lottery_goods_dynamic_data() const {
  return lottery_goods_dynamic_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeroProto::mutable_lottery_goods_dynamic_data() {
  return &lottery_goods_dynamic_data_;
}

// optional .app.message.PetProto pet = 96;
inline bool HeroProto::has_pet() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void HeroProto::set_has_pet() {
  _has_bits_[3] |= 0x00000001u;
}
inline void HeroProto::clear_has_pet() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void HeroProto::clear_pet() {
  if (pet_ != NULL) pet_->::app::message::PetProto::Clear();
  clear_has_pet();
}
inline const ::app::message::PetProto& HeroProto::pet() const {
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::app::message::PetProto* HeroProto::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::app::message::PetProto;
  return pet_;
}
inline ::app::message::PetProto* HeroProto::release_pet() {
  clear_has_pet();
  ::app::message::PetProto* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_pet(::app::message::PetProto* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
}

// optional bool has_recharge = 97;
inline bool HeroProto::has_has_recharge() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void HeroProto::set_has_has_recharge() {
  _has_bits_[3] |= 0x00000002u;
}
inline void HeroProto::clear_has_has_recharge() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void HeroProto::clear_has_recharge() {
  has_recharge_ = false;
  clear_has_has_recharge();
}
inline bool HeroProto::has_recharge() const {
  return has_recharge_;
}
inline void HeroProto::set_has_recharge(bool value) {
  set_has_has_recharge();
  has_recharge_ = value;
}

// optional int32 spell_added_upgrade_level = 144;
inline bool HeroProto::has_spell_added_upgrade_level() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_spell_added_upgrade_level() {
  _has_bits_[3] |= 0x00000004u;
}
inline void HeroProto::clear_has_spell_added_upgrade_level() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void HeroProto::clear_spell_added_upgrade_level() {
  spell_added_upgrade_level_ = 0;
  clear_has_spell_added_upgrade_level();
}
inline ::google::protobuf::int32 HeroProto::spell_added_upgrade_level() const {
  return spell_added_upgrade_level_;
}
inline void HeroProto::set_spell_added_upgrade_level(::google::protobuf::int32 value) {
  set_has_spell_added_upgrade_level();
  spell_added_upgrade_level_ = value;
}

// repeated .app.message.CombineXinfaSpellProto combine_spells = 98;
inline int HeroProto::combine_spells_size() const {
  return combine_spells_.size();
}
inline void HeroProto::clear_combine_spells() {
  combine_spells_.Clear();
}
inline const ::app::message::CombineXinfaSpellProto& HeroProto::combine_spells(int index) const {
  return combine_spells_.Get(index);
}
inline ::app::message::CombineXinfaSpellProto* HeroProto::mutable_combine_spells(int index) {
  return combine_spells_.Mutable(index);
}
inline ::app::message::CombineXinfaSpellProto* HeroProto::add_combine_spells() {
  return combine_spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::CombineXinfaSpellProto >&
HeroProto::combine_spells() const {
  return combine_spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::CombineXinfaSpellProto >*
HeroProto::mutable_combine_spells() {
  return &combine_spells_;
}

// repeated .app.message.ActiveSpell passive_spell = 99;
inline int HeroProto::passive_spell_size() const {
  return passive_spell_.size();
}
inline void HeroProto::clear_passive_spell() {
  passive_spell_.Clear();
}
inline const ::app::message::ActiveSpell& HeroProto::passive_spell(int index) const {
  return passive_spell_.Get(index);
}
inline ::app::message::ActiveSpell* HeroProto::mutable_passive_spell(int index) {
  return passive_spell_.Mutable(index);
}
inline ::app::message::ActiveSpell* HeroProto::add_passive_spell() {
  return passive_spell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
HeroProto::passive_spell() const {
  return passive_spell_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
HeroProto::mutable_passive_spell() {
  return &passive_spell_;
}

// repeated .app.message.ActiveSpell active_spell = 100 [deprecated = true];
inline int HeroProto::active_spell_size() const {
  return active_spell_.size();
}
inline void HeroProto::clear_active_spell() {
  active_spell_.Clear();
}
inline const ::app::message::ActiveSpell& HeroProto::active_spell(int index) const {
  return active_spell_.Get(index);
}
inline ::app::message::ActiveSpell* HeroProto::mutable_active_spell(int index) {
  return active_spell_.Mutable(index);
}
inline ::app::message::ActiveSpell* HeroProto::add_active_spell() {
  return active_spell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
HeroProto::active_spell() const {
  return active_spell_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
HeroProto::mutable_active_spell() {
  return &active_spell_;
}

// repeated int32 active_spell_used_times = 101 [deprecated = true];
inline int HeroProto::active_spell_used_times_size() const {
  return active_spell_used_times_.size();
}
inline void HeroProto::clear_active_spell_used_times() {
  active_spell_used_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::active_spell_used_times(int index) const {
  return active_spell_used_times_.Get(index);
}
inline void HeroProto::set_active_spell_used_times(int index, ::google::protobuf::int32 value) {
  active_spell_used_times_.Set(index, value);
}
inline void HeroProto::add_active_spell_used_times(::google::protobuf::int32 value) {
  active_spell_used_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::active_spell_used_times() const {
  return active_spell_used_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_active_spell_used_times() {
  return &active_spell_used_times_;
}

// repeated int32 shortcut_spell_type = 102;
inline int HeroProto::shortcut_spell_type_size() const {
  return shortcut_spell_type_.size();
}
inline void HeroProto::clear_shortcut_spell_type() {
  shortcut_spell_type_.Clear();
}
inline ::google::protobuf::int32 HeroProto::shortcut_spell_type(int index) const {
  return shortcut_spell_type_.Get(index);
}
inline void HeroProto::set_shortcut_spell_type(int index, ::google::protobuf::int32 value) {
  shortcut_spell_type_.Set(index, value);
}
inline void HeroProto::add_shortcut_spell_type(::google::protobuf::int32 value) {
  shortcut_spell_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::shortcut_spell_type() const {
  return shortcut_spell_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_shortcut_spell_type() {
  return &shortcut_spell_type_;
}

// repeated int32 shortcut_spell_pos = 103;
inline int HeroProto::shortcut_spell_pos_size() const {
  return shortcut_spell_pos_.size();
}
inline void HeroProto::clear_shortcut_spell_pos() {
  shortcut_spell_pos_.Clear();
}
inline ::google::protobuf::int32 HeroProto::shortcut_spell_pos(int index) const {
  return shortcut_spell_pos_.Get(index);
}
inline void HeroProto::set_shortcut_spell_pos(int index, ::google::protobuf::int32 value) {
  shortcut_spell_pos_.Set(index, value);
}
inline void HeroProto::add_shortcut_spell_pos(::google::protobuf::int32 value) {
  shortcut_spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::shortcut_spell_pos() const {
  return shortcut_spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_shortcut_spell_pos() {
  return &shortcut_spell_pos_;
}

// optional int32 default_spell_pos = 104;
inline bool HeroProto::has_default_spell_pos() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void HeroProto::set_has_default_spell_pos() {
  _has_bits_[3] |= 0x00000200u;
}
inline void HeroProto::clear_has_default_spell_pos() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void HeroProto::clear_default_spell_pos() {
  default_spell_pos_ = 0;
  clear_has_default_spell_pos();
}
inline ::google::protobuf::int32 HeroProto::default_spell_pos() const {
  return default_spell_pos_;
}
inline void HeroProto::set_default_spell_pos(::google::protobuf::int32 value) {
  set_has_default_spell_pos();
  default_spell_pos_ = value;
}

// optional int32 jump_shield = 105;
inline bool HeroProto::has_jump_shield() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void HeroProto::set_has_jump_shield() {
  _has_bits_[3] |= 0x00000400u;
}
inline void HeroProto::clear_has_jump_shield() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void HeroProto::clear_jump_shield() {
  jump_shield_ = 0;
  clear_has_jump_shield();
}
inline ::google::protobuf::int32 HeroProto::jump_shield() const {
  return jump_shield_;
}
inline void HeroProto::set_jump_shield(::google::protobuf::int32 value) {
  set_has_jump_shield();
  jump_shield_ = value;
}

// optional int32 stamina = 106;
inline bool HeroProto::has_stamina() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_stamina() {
  _has_bits_[3] |= 0x00000800u;
}
inline void HeroProto::clear_has_stamina() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void HeroProto::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline ::google::protobuf::int32 HeroProto::stamina() const {
  return stamina_;
}
inline void HeroProto::set_stamina(::google::protobuf::int32 value) {
  set_has_stamina();
  stamina_ = value;
}

// optional .app.message.ClientRelation client_relation = 107;
inline bool HeroProto::has_client_relation() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_client_relation() {
  _has_bits_[3] |= 0x00001000u;
}
inline void HeroProto::clear_has_client_relation() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void HeroProto::clear_client_relation() {
  if (client_relation_ != NULL) client_relation_->::app::message::ClientRelation::Clear();
  clear_has_client_relation();
}
inline const ::app::message::ClientRelation& HeroProto::client_relation() const {
  return client_relation_ != NULL ? *client_relation_ : *default_instance_->client_relation_;
}
inline ::app::message::ClientRelation* HeroProto::mutable_client_relation() {
  set_has_client_relation();
  if (client_relation_ == NULL) client_relation_ = new ::app::message::ClientRelation;
  return client_relation_;
}
inline ::app::message::ClientRelation* HeroProto::release_client_relation() {
  clear_has_client_relation();
  ::app::message::ClientRelation* temp = client_relation_;
  client_relation_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_client_relation(::app::message::ClientRelation* client_relation) {
  delete client_relation_;
  client_relation_ = client_relation;
  if (client_relation) {
    set_has_client_relation();
  } else {
    clear_has_client_relation();
  }
}

// repeated int32 func_bits = 108;
inline int HeroProto::func_bits_size() const {
  return func_bits_.size();
}
inline void HeroProto::clear_func_bits() {
  func_bits_.Clear();
}
inline ::google::protobuf::int32 HeroProto::func_bits(int index) const {
  return func_bits_.Get(index);
}
inline void HeroProto::set_func_bits(int index, ::google::protobuf::int32 value) {
  func_bits_.Set(index, value);
}
inline void HeroProto::add_func_bits(::google::protobuf::int32 value) {
  func_bits_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::func_bits() const {
  return func_bits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_func_bits() {
  return &func_bits_;
}

// optional int32 rage_amount = 109;
inline bool HeroProto::has_rage_amount() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void HeroProto::set_has_rage_amount() {
  _has_bits_[3] |= 0x00004000u;
}
inline void HeroProto::clear_has_rage_amount() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void HeroProto::clear_rage_amount() {
  rage_amount_ = 0;
  clear_has_rage_amount();
}
inline ::google::protobuf::int32 HeroProto::rage_amount() const {
  return rage_amount_;
}
inline void HeroProto::set_rage_amount(::google::protobuf::int32 value) {
  set_has_rage_amount();
  rage_amount_ = value;
}

// optional int64 create_time = 110;
inline bool HeroProto::has_create_time() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void HeroProto::set_has_create_time() {
  _has_bits_[3] |= 0x00008000u;
}
inline void HeroProto::clear_has_create_time() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void HeroProto::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 HeroProto::create_time() const {
  return create_time_;
}
inline void HeroProto::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional bool is_collect_local_login_first_prize = 111;
inline bool HeroProto::has_is_collect_local_login_first_prize() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void HeroProto::set_has_is_collect_local_login_first_prize() {
  _has_bits_[3] |= 0x00010000u;
}
inline void HeroProto::clear_has_is_collect_local_login_first_prize() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void HeroProto::clear_is_collect_local_login_first_prize() {
  is_collect_local_login_first_prize_ = false;
  clear_has_is_collect_local_login_first_prize();
}
inline bool HeroProto::is_collect_local_login_first_prize() const {
  return is_collect_local_login_first_prize_;
}
inline void HeroProto::set_is_collect_local_login_first_prize(bool value) {
  set_has_is_collect_local_login_first_prize();
  is_collect_local_login_first_prize_ = value;
}

// optional bool is_collect_local_login_daily_prize = 112;
inline bool HeroProto::has_is_collect_local_login_daily_prize() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline void HeroProto::set_has_is_collect_local_login_daily_prize() {
  _has_bits_[3] |= 0x00020000u;
}
inline void HeroProto::clear_has_is_collect_local_login_daily_prize() {
  _has_bits_[3] &= ~0x00020000u;
}
inline void HeroProto::clear_is_collect_local_login_daily_prize() {
  is_collect_local_login_daily_prize_ = false;
  clear_has_is_collect_local_login_daily_prize();
}
inline bool HeroProto::is_collect_local_login_daily_prize() const {
  return is_collect_local_login_daily_prize_;
}
inline void HeroProto::set_is_collect_local_login_daily_prize(bool value) {
  set_has_is_collect_local_login_daily_prize();
  is_collect_local_login_daily_prize_ = value;
}

// optional int32 phoenix_refine_times = 113 [deprecated = true];
inline bool HeroProto::has_phoenix_refine_times() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline void HeroProto::set_has_phoenix_refine_times() {
  _has_bits_[3] |= 0x00040000u;
}
inline void HeroProto::clear_has_phoenix_refine_times() {
  _has_bits_[3] &= ~0x00040000u;
}
inline void HeroProto::clear_phoenix_refine_times() {
  phoenix_refine_times_ = 0;
  clear_has_phoenix_refine_times();
}
inline ::google::protobuf::int32 HeroProto::phoenix_refine_times() const {
  return phoenix_refine_times_;
}
inline void HeroProto::set_phoenix_refine_times(::google::protobuf::int32 value) {
  set_has_phoenix_refine_times();
  phoenix_refine_times_ = value;
}

// optional bool is_cross_single_story = 114;
inline bool HeroProto::has_is_cross_single_story() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_is_cross_single_story() {
  _has_bits_[3] |= 0x00080000u;
}
inline void HeroProto::clear_has_is_cross_single_story() {
  _has_bits_[3] &= ~0x00080000u;
}
inline void HeroProto::clear_is_cross_single_story() {
  is_cross_single_story_ = false;
  clear_has_is_cross_single_story();
}
inline bool HeroProto::is_cross_single_story() const {
  return is_cross_single_story_;
}
inline void HeroProto::set_is_cross_single_story(bool value) {
  set_has_is_cross_single_story();
  is_cross_single_story_ = value;
}

// optional int32 phoenix_money_refine_times = 116;
inline bool HeroProto::has_phoenix_money_refine_times() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline void HeroProto::set_has_phoenix_money_refine_times() {
  _has_bits_[3] |= 0x00100000u;
}
inline void HeroProto::clear_has_phoenix_money_refine_times() {
  _has_bits_[3] &= ~0x00100000u;
}
inline void HeroProto::clear_phoenix_money_refine_times() {
  phoenix_money_refine_times_ = 0;
  clear_has_phoenix_money_refine_times();
}
inline ::google::protobuf::int32 HeroProto::phoenix_money_refine_times() const {
  return phoenix_money_refine_times_;
}
inline void HeroProto::set_phoenix_money_refine_times(::google::protobuf::int32 value) {
  set_has_phoenix_money_refine_times();
  phoenix_money_refine_times_ = value;
}

// optional int32 phoenix_lijin_refine_times = 117;
inline bool HeroProto::has_phoenix_lijin_refine_times() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void HeroProto::set_has_phoenix_lijin_refine_times() {
  _has_bits_[3] |= 0x00200000u;
}
inline void HeroProto::clear_has_phoenix_lijin_refine_times() {
  _has_bits_[3] &= ~0x00200000u;
}
inline void HeroProto::clear_phoenix_lijin_refine_times() {
  phoenix_lijin_refine_times_ = 0;
  clear_has_phoenix_lijin_refine_times();
}
inline ::google::protobuf::int32 HeroProto::phoenix_lijin_refine_times() const {
  return phoenix_lijin_refine_times_;
}
inline void HeroProto::set_phoenix_lijin_refine_times(::google::protobuf::int32 value) {
  set_has_phoenix_lijin_refine_times();
  phoenix_lijin_refine_times_ = value;
}

// optional int32 phoenix_yuanbao_refine_times = 118;
inline bool HeroProto::has_phoenix_yuanbao_refine_times() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline void HeroProto::set_has_phoenix_yuanbao_refine_times() {
  _has_bits_[3] |= 0x00400000u;
}
inline void HeroProto::clear_has_phoenix_yuanbao_refine_times() {
  _has_bits_[3] &= ~0x00400000u;
}
inline void HeroProto::clear_phoenix_yuanbao_refine_times() {
  phoenix_yuanbao_refine_times_ = 0;
  clear_has_phoenix_yuanbao_refine_times();
}
inline ::google::protobuf::int32 HeroProto::phoenix_yuanbao_refine_times() const {
  return phoenix_yuanbao_refine_times_;
}
inline void HeroProto::set_phoenix_yuanbao_refine_times(::google::protobuf::int32 value) {
  set_has_phoenix_yuanbao_refine_times();
  phoenix_yuanbao_refine_times_ = value;
}

// optional int32 login_day = 119;
inline bool HeroProto::has_login_day() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline void HeroProto::set_has_login_day() {
  _has_bits_[3] |= 0x00800000u;
}
inline void HeroProto::clear_has_login_day() {
  _has_bits_[3] &= ~0x00800000u;
}
inline void HeroProto::clear_login_day() {
  login_day_ = 0;
  clear_has_login_day();
}
inline ::google::protobuf::int32 HeroProto::login_day() const {
  return login_day_;
}
inline void HeroProto::set_login_day(::google::protobuf::int32 value) {
  set_has_login_day();
  login_day_ = value;
}

// optional int32 tu_long_today_entered_times = 120;
inline bool HeroProto::has_tu_long_today_entered_times() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline void HeroProto::set_has_tu_long_today_entered_times() {
  _has_bits_[3] |= 0x01000000u;
}
inline void HeroProto::clear_has_tu_long_today_entered_times() {
  _has_bits_[3] &= ~0x01000000u;
}
inline void HeroProto::clear_tu_long_today_entered_times() {
  tu_long_today_entered_times_ = 0;
  clear_has_tu_long_today_entered_times();
}
inline ::google::protobuf::int32 HeroProto::tu_long_today_entered_times() const {
  return tu_long_today_entered_times_;
}
inline void HeroProto::set_tu_long_today_entered_times(::google::protobuf::int32 value) {
  set_has_tu_long_today_entered_times();
  tu_long_today_entered_times_ = value;
}

// optional int32 melt_amount = 121;
inline bool HeroProto::has_melt_amount() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline void HeroProto::set_has_melt_amount() {
  _has_bits_[3] |= 0x02000000u;
}
inline void HeroProto::clear_has_melt_amount() {
  _has_bits_[3] &= ~0x02000000u;
}
inline void HeroProto::clear_melt_amount() {
  melt_amount_ = 0;
  clear_has_melt_amount();
}
inline ::google::protobuf::int32 HeroProto::melt_amount() const {
  return melt_amount_;
}
inline void HeroProto::set_melt_amount(::google::protobuf::int32 value) {
  set_has_melt_amount();
  melt_amount_ = value;
}

// optional int32 challenge_dungeon_daily_times = 122;
inline bool HeroProto::has_challenge_dungeon_daily_times() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_challenge_dungeon_daily_times() {
  _has_bits_[3] |= 0x04000000u;
}
inline void HeroProto::clear_has_challenge_dungeon_daily_times() {
  _has_bits_[3] &= ~0x04000000u;
}
inline void HeroProto::clear_challenge_dungeon_daily_times() {
  challenge_dungeon_daily_times_ = 0;
  clear_has_challenge_dungeon_daily_times();
}
inline ::google::protobuf::int32 HeroProto::challenge_dungeon_daily_times() const {
  return challenge_dungeon_daily_times_;
}
inline void HeroProto::set_challenge_dungeon_daily_times(::google::protobuf::int32 value) {
  set_has_challenge_dungeon_daily_times();
  challenge_dungeon_daily_times_ = value;
}

// optional int32 challenge_dungeon_assist_times = 123;
inline bool HeroProto::has_challenge_dungeon_assist_times() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_challenge_dungeon_assist_times() {
  _has_bits_[3] |= 0x08000000u;
}
inline void HeroProto::clear_has_challenge_dungeon_assist_times() {
  _has_bits_[3] &= ~0x08000000u;
}
inline void HeroProto::clear_challenge_dungeon_assist_times() {
  challenge_dungeon_assist_times_ = 0;
  clear_has_challenge_dungeon_assist_times();
}
inline ::google::protobuf::int32 HeroProto::challenge_dungeon_assist_times() const {
  return challenge_dungeon_assist_times_;
}
inline void HeroProto::set_challenge_dungeon_assist_times(::google::protobuf::int32 value) {
  set_has_challenge_dungeon_assist_times();
  challenge_dungeon_assist_times_ = value;
}

// repeated int32 challenge_dungeon_use_times = 124;
inline int HeroProto::challenge_dungeon_use_times_size() const {
  return challenge_dungeon_use_times_.size();
}
inline void HeroProto::clear_challenge_dungeon_use_times() {
  challenge_dungeon_use_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::challenge_dungeon_use_times(int index) const {
  return challenge_dungeon_use_times_.Get(index);
}
inline void HeroProto::set_challenge_dungeon_use_times(int index, ::google::protobuf::int32 value) {
  challenge_dungeon_use_times_.Set(index, value);
}
inline void HeroProto::add_challenge_dungeon_use_times(::google::protobuf::int32 value) {
  challenge_dungeon_use_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::challenge_dungeon_use_times() const {
  return challenge_dungeon_use_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_challenge_dungeon_use_times() {
  return &challenge_dungeon_use_times_;
}

// optional int32 honor = 125;
inline bool HeroProto::has_honor() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void HeroProto::set_has_honor() {
  _has_bits_[3] |= 0x20000000u;
}
inline void HeroProto::clear_has_honor() {
  _has_bits_[3] &= ~0x20000000u;
}
inline void HeroProto::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 HeroProto::honor() const {
  return honor_;
}
inline void HeroProto::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// optional .app.message.TianZuiProto tian_zui = 126;
inline bool HeroProto::has_tian_zui() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void HeroProto::set_has_tian_zui() {
  _has_bits_[3] |= 0x40000000u;
}
inline void HeroProto::clear_has_tian_zui() {
  _has_bits_[3] &= ~0x40000000u;
}
inline void HeroProto::clear_tian_zui() {
  if (tian_zui_ != NULL) tian_zui_->::app::message::TianZuiProto::Clear();
  clear_has_tian_zui();
}
inline const ::app::message::TianZuiProto& HeroProto::tian_zui() const {
  return tian_zui_ != NULL ? *tian_zui_ : *default_instance_->tian_zui_;
}
inline ::app::message::TianZuiProto* HeroProto::mutable_tian_zui() {
  set_has_tian_zui();
  if (tian_zui_ == NULL) tian_zui_ = new ::app::message::TianZuiProto;
  return tian_zui_;
}
inline ::app::message::TianZuiProto* HeroProto::release_tian_zui() {
  clear_has_tian_zui();
  ::app::message::TianZuiProto* temp = tian_zui_;
  tian_zui_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_tian_zui(::app::message::TianZuiProto* tian_zui) {
  delete tian_zui_;
  tian_zui_ = tian_zui;
  if (tian_zui) {
    set_has_tian_zui();
  } else {
    clear_has_tian_zui();
  }
}

// optional .app.message.TianJieProto tian_jie = 127;
inline bool HeroProto::has_tian_jie() const {
  return (_has_bits_[3] & 0x80000000u) != 0;
}
inline void HeroProto::set_has_tian_jie() {
  _has_bits_[3] |= 0x80000000u;
}
inline void HeroProto::clear_has_tian_jie() {
  _has_bits_[3] &= ~0x80000000u;
}
inline void HeroProto::clear_tian_jie() {
  if (tian_jie_ != NULL) tian_jie_->::app::message::TianJieProto::Clear();
  clear_has_tian_jie();
}
inline const ::app::message::TianJieProto& HeroProto::tian_jie() const {
  return tian_jie_ != NULL ? *tian_jie_ : *default_instance_->tian_jie_;
}
inline ::app::message::TianJieProto* HeroProto::mutable_tian_jie() {
  set_has_tian_jie();
  if (tian_jie_ == NULL) tian_jie_ = new ::app::message::TianJieProto;
  return tian_jie_;
}
inline ::app::message::TianJieProto* HeroProto::release_tian_jie() {
  clear_has_tian_jie();
  ::app::message::TianJieProto* temp = tian_jie_;
  tian_jie_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_tian_jie(::app::message::TianJieProto* tian_jie) {
  delete tian_jie_;
  tian_jie_ = tian_jie;
  if (tian_jie) {
    set_has_tian_jie();
  } else {
    clear_has_tian_jie();
  }
}

// optional int32 first_recharge_collect_index = 129;
inline bool HeroProto::has_first_recharge_collect_index() const {
  return (_has_bits_[4] & 0x00000001u) != 0;
}
inline void HeroProto::set_has_first_recharge_collect_index() {
  _has_bits_[4] |= 0x00000001u;
}
inline void HeroProto::clear_has_first_recharge_collect_index() {
  _has_bits_[4] &= ~0x00000001u;
}
inline void HeroProto::clear_first_recharge_collect_index() {
  first_recharge_collect_index_ = 0;
  clear_has_first_recharge_collect_index();
}
inline ::google::protobuf::int32 HeroProto::first_recharge_collect_index() const {
  return first_recharge_collect_index_;
}
inline void HeroProto::set_first_recharge_collect_index(::google::protobuf::int32 value) {
  set_has_first_recharge_collect_index();
  first_recharge_collect_index_ = value;
}

// optional int32 login_prize_info = 131;
inline bool HeroProto::has_login_prize_info() const {
  return (_has_bits_[4] & 0x00000002u) != 0;
}
inline void HeroProto::set_has_login_prize_info() {
  _has_bits_[4] |= 0x00000002u;
}
inline void HeroProto::clear_has_login_prize_info() {
  _has_bits_[4] &= ~0x00000002u;
}
inline void HeroProto::clear_login_prize_info() {
  login_prize_info_ = 0;
  clear_has_login_prize_info();
}
inline ::google::protobuf::int32 HeroProto::login_prize_info() const {
  return login_prize_info_;
}
inline void HeroProto::set_login_prize_info(::google::protobuf::int32 value) {
  set_has_login_prize_info();
  login_prize_info_ = value;
}

// optional int32 invest_upgrade_bank_money = 132;
inline bool HeroProto::has_invest_upgrade_bank_money() const {
  return (_has_bits_[4] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_invest_upgrade_bank_money() {
  _has_bits_[4] |= 0x00000004u;
}
inline void HeroProto::clear_has_invest_upgrade_bank_money() {
  _has_bits_[4] &= ~0x00000004u;
}
inline void HeroProto::clear_invest_upgrade_bank_money() {
  invest_upgrade_bank_money_ = 0;
  clear_has_invest_upgrade_bank_money();
}
inline ::google::protobuf::int32 HeroProto::invest_upgrade_bank_money() const {
  return invest_upgrade_bank_money_;
}
inline void HeroProto::set_invest_upgrade_bank_money(::google::protobuf::int32 value) {
  set_has_invest_upgrade_bank_money();
  invest_upgrade_bank_money_ = value;
}

// repeated int32 collect_upgrade_bank_level = 133;
inline int HeroProto::collect_upgrade_bank_level_size() const {
  return collect_upgrade_bank_level_.size();
}
inline void HeroProto::clear_collect_upgrade_bank_level() {
  collect_upgrade_bank_level_.Clear();
}
inline ::google::protobuf::int32 HeroProto::collect_upgrade_bank_level(int index) const {
  return collect_upgrade_bank_level_.Get(index);
}
inline void HeroProto::set_collect_upgrade_bank_level(int index, ::google::protobuf::int32 value) {
  collect_upgrade_bank_level_.Set(index, value);
}
inline void HeroProto::add_collect_upgrade_bank_level(::google::protobuf::int32 value) {
  collect_upgrade_bank_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::collect_upgrade_bank_level() const {
  return collect_upgrade_bank_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_collect_upgrade_bank_level() {
  return &collect_upgrade_bank_level_;
}

// repeated int32 collect_upgrade_bank_lijin = 134;
inline int HeroProto::collect_upgrade_bank_lijin_size() const {
  return collect_upgrade_bank_lijin_.size();
}
inline void HeroProto::clear_collect_upgrade_bank_lijin() {
  collect_upgrade_bank_lijin_.Clear();
}
inline ::google::protobuf::int32 HeroProto::collect_upgrade_bank_lijin(int index) const {
  return collect_upgrade_bank_lijin_.Get(index);
}
inline void HeroProto::set_collect_upgrade_bank_lijin(int index, ::google::protobuf::int32 value) {
  collect_upgrade_bank_lijin_.Set(index, value);
}
inline void HeroProto::add_collect_upgrade_bank_lijin(::google::protobuf::int32 value) {
  collect_upgrade_bank_lijin_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::collect_upgrade_bank_lijin() const {
  return collect_upgrade_bank_lijin_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_collect_upgrade_bank_lijin() {
  return &collect_upgrade_bank_lijin_;
}

// optional int32 invest_monthly_bank_money = 135;
inline bool HeroProto::has_invest_monthly_bank_money() const {
  return (_has_bits_[4] & 0x00000020u) != 0;
}
inline void HeroProto::set_has_invest_monthly_bank_money() {
  _has_bits_[4] |= 0x00000020u;
}
inline void HeroProto::clear_has_invest_monthly_bank_money() {
  _has_bits_[4] &= ~0x00000020u;
}
inline void HeroProto::clear_invest_monthly_bank_money() {
  invest_monthly_bank_money_ = 0;
  clear_has_invest_monthly_bank_money();
}
inline ::google::protobuf::int32 HeroProto::invest_monthly_bank_money() const {
  return invest_monthly_bank_money_;
}
inline void HeroProto::set_invest_monthly_bank_money(::google::protobuf::int32 value) {
  set_has_invest_monthly_bank_money();
  invest_monthly_bank_money_ = value;
}

// optional int64 invest_monthly_bank_time = 136;
inline bool HeroProto::has_invest_monthly_bank_time() const {
  return (_has_bits_[4] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_invest_monthly_bank_time() {
  _has_bits_[4] |= 0x00000040u;
}
inline void HeroProto::clear_has_invest_monthly_bank_time() {
  _has_bits_[4] &= ~0x00000040u;
}
inline void HeroProto::clear_invest_monthly_bank_time() {
  invest_monthly_bank_time_ = GOOGLE_LONGLONG(0);
  clear_has_invest_monthly_bank_time();
}
inline ::google::protobuf::int64 HeroProto::invest_monthly_bank_time() const {
  return invest_monthly_bank_time_;
}
inline void HeroProto::set_invest_monthly_bank_time(::google::protobuf::int64 value) {
  set_has_invest_monthly_bank_time();
  invest_monthly_bank_time_ = value;
}

// optional int64 monthly_bank_prev_collect_time = 137;
inline bool HeroProto::has_monthly_bank_prev_collect_time() const {
  return (_has_bits_[4] & 0x00000080u) != 0;
}
inline void HeroProto::set_has_monthly_bank_prev_collect_time() {
  _has_bits_[4] |= 0x00000080u;
}
inline void HeroProto::clear_has_monthly_bank_prev_collect_time() {
  _has_bits_[4] &= ~0x00000080u;
}
inline void HeroProto::clear_monthly_bank_prev_collect_time() {
  monthly_bank_prev_collect_time_ = GOOGLE_LONGLONG(0);
  clear_has_monthly_bank_prev_collect_time();
}
inline ::google::protobuf::int64 HeroProto::monthly_bank_prev_collect_time() const {
  return monthly_bank_prev_collect_time_;
}
inline void HeroProto::set_monthly_bank_prev_collect_time(::google::protobuf::int64 value) {
  set_has_monthly_bank_prev_collect_time();
  monthly_bank_prev_collect_time_ = value;
}

// optional int64 monthly_bank_prev_collect_time2 = 138;
inline bool HeroProto::has_monthly_bank_prev_collect_time2() const {
  return (_has_bits_[4] & 0x00000100u) != 0;
}
inline void HeroProto::set_has_monthly_bank_prev_collect_time2() {
  _has_bits_[4] |= 0x00000100u;
}
inline void HeroProto::clear_has_monthly_bank_prev_collect_time2() {
  _has_bits_[4] &= ~0x00000100u;
}
inline void HeroProto::clear_monthly_bank_prev_collect_time2() {
  monthly_bank_prev_collect_time2_ = GOOGLE_LONGLONG(0);
  clear_has_monthly_bank_prev_collect_time2();
}
inline ::google::protobuf::int64 HeroProto::monthly_bank_prev_collect_time2() const {
  return monthly_bank_prev_collect_time2_;
}
inline void HeroProto::set_monthly_bank_prev_collect_time2(::google::protobuf::int64 value) {
  set_has_monthly_bank_prev_collect_time2();
  monthly_bank_prev_collect_time2_ = value;
}

// optional int32 monthly_bank_online_lijin = 139;
inline bool HeroProto::has_monthly_bank_online_lijin() const {
  return (_has_bits_[4] & 0x00000200u) != 0;
}
inline void HeroProto::set_has_monthly_bank_online_lijin() {
  _has_bits_[4] |= 0x00000200u;
}
inline void HeroProto::clear_has_monthly_bank_online_lijin() {
  _has_bits_[4] &= ~0x00000200u;
}
inline void HeroProto::clear_monthly_bank_online_lijin() {
  monthly_bank_online_lijin_ = 0;
  clear_has_monthly_bank_online_lijin();
}
inline ::google::protobuf::int32 HeroProto::monthly_bank_online_lijin() const {
  return monthly_bank_online_lijin_;
}
inline void HeroProto::set_monthly_bank_online_lijin(::google::protobuf::int32 value) {
  set_has_monthly_bank_online_lijin();
  monthly_bank_online_lijin_ = value;
}

// optional int32 monthly_bank_base_lijin = 140;
inline bool HeroProto::has_monthly_bank_base_lijin() const {
  return (_has_bits_[4] & 0x00000400u) != 0;
}
inline void HeroProto::set_has_monthly_bank_base_lijin() {
  _has_bits_[4] |= 0x00000400u;
}
inline void HeroProto::clear_has_monthly_bank_base_lijin() {
  _has_bits_[4] &= ~0x00000400u;
}
inline void HeroProto::clear_monthly_bank_base_lijin() {
  monthly_bank_base_lijin_ = 0;
  clear_has_monthly_bank_base_lijin();
}
inline ::google::protobuf::int32 HeroProto::monthly_bank_base_lijin() const {
  return monthly_bank_base_lijin_;
}
inline void HeroProto::set_monthly_bank_base_lijin(::google::protobuf::int32 value) {
  set_has_monthly_bank_base_lijin();
  monthly_bank_base_lijin_ = value;
}

// optional int32 monthly_bank_online_hours = 141;
inline bool HeroProto::has_monthly_bank_online_hours() const {
  return (_has_bits_[4] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_monthly_bank_online_hours() {
  _has_bits_[4] |= 0x00000800u;
}
inline void HeroProto::clear_has_monthly_bank_online_hours() {
  _has_bits_[4] &= ~0x00000800u;
}
inline void HeroProto::clear_monthly_bank_online_hours() {
  monthly_bank_online_hours_ = 0;
  clear_has_monthly_bank_online_hours();
}
inline ::google::protobuf::int32 HeroProto::monthly_bank_online_hours() const {
  return monthly_bank_online_hours_;
}
inline void HeroProto::set_monthly_bank_online_hours(::google::protobuf::int32 value) {
  set_has_monthly_bank_online_hours();
  monthly_bank_online_hours_ = value;
}

// optional int64 total_online_time = 142;
inline bool HeroProto::has_total_online_time() const {
  return (_has_bits_[4] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_total_online_time() {
  _has_bits_[4] |= 0x00001000u;
}
inline void HeroProto::clear_has_total_online_time() {
  _has_bits_[4] &= ~0x00001000u;
}
inline void HeroProto::clear_total_online_time() {
  total_online_time_ = GOOGLE_LONGLONG(0);
  clear_has_total_online_time();
}
inline ::google::protobuf::int64 HeroProto::total_online_time() const {
  return total_online_time_;
}
inline void HeroProto::set_total_online_time(::google::protobuf::int64 value) {
  set_has_total_online_time();
  total_online_time_ = value;
}

// optional .app.message.AchievementInfoProto achievement = 143;
inline bool HeroProto::has_achievement() const {
  return (_has_bits_[4] & 0x00002000u) != 0;
}
inline void HeroProto::set_has_achievement() {
  _has_bits_[4] |= 0x00002000u;
}
inline void HeroProto::clear_has_achievement() {
  _has_bits_[4] &= ~0x00002000u;
}
inline void HeroProto::clear_achievement() {
  if (achievement_ != NULL) achievement_->::app::message::AchievementInfoProto::Clear();
  clear_has_achievement();
}
inline const ::app::message::AchievementInfoProto& HeroProto::achievement() const {
  return achievement_ != NULL ? *achievement_ : *default_instance_->achievement_;
}
inline ::app::message::AchievementInfoProto* HeroProto::mutable_achievement() {
  set_has_achievement();
  if (achievement_ == NULL) achievement_ = new ::app::message::AchievementInfoProto;
  return achievement_;
}
inline ::app::message::AchievementInfoProto* HeroProto::release_achievement() {
  clear_has_achievement();
  ::app::message::AchievementInfoProto* temp = achievement_;
  achievement_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_achievement(::app::message::AchievementInfoProto* achievement) {
  delete achievement_;
  achievement_ = achievement;
  if (achievement) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
}

// optional .app.message.ShouCangProto shou_cang = 200;
inline bool HeroProto::has_shou_cang() const {
  return (_has_bits_[4] & 0x00004000u) != 0;
}
inline void HeroProto::set_has_shou_cang() {
  _has_bits_[4] |= 0x00004000u;
}
inline void HeroProto::clear_has_shou_cang() {
  _has_bits_[4] &= ~0x00004000u;
}
inline void HeroProto::clear_shou_cang() {
  if (shou_cang_ != NULL) shou_cang_->::app::message::ShouCangProto::Clear();
  clear_has_shou_cang();
}
inline const ::app::message::ShouCangProto& HeroProto::shou_cang() const {
  return shou_cang_ != NULL ? *shou_cang_ : *default_instance_->shou_cang_;
}
inline ::app::message::ShouCangProto* HeroProto::mutable_shou_cang() {
  set_has_shou_cang();
  if (shou_cang_ == NULL) shou_cang_ = new ::app::message::ShouCangProto;
  return shou_cang_;
}
inline ::app::message::ShouCangProto* HeroProto::release_shou_cang() {
  clear_has_shou_cang();
  ::app::message::ShouCangProto* temp = shou_cang_;
  shou_cang_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_shou_cang(::app::message::ShouCangProto* shou_cang) {
  delete shou_cang_;
  shou_cang_ = shou_cang;
  if (shou_cang) {
    set_has_shou_cang();
  } else {
    clear_has_shou_cang();
  }
}

// optional bool zhong_hua_ge_today_first_passed = 201;
inline bool HeroProto::has_zhong_hua_ge_today_first_passed() const {
  return (_has_bits_[4] & 0x00008000u) != 0;
}
inline void HeroProto::set_has_zhong_hua_ge_today_first_passed() {
  _has_bits_[4] |= 0x00008000u;
}
inline void HeroProto::clear_has_zhong_hua_ge_today_first_passed() {
  _has_bits_[4] &= ~0x00008000u;
}
inline void HeroProto::clear_zhong_hua_ge_today_first_passed() {
  zhong_hua_ge_today_first_passed_ = false;
  clear_has_zhong_hua_ge_today_first_passed();
}
inline bool HeroProto::zhong_hua_ge_today_first_passed() const {
  return zhong_hua_ge_today_first_passed_;
}
inline void HeroProto::set_zhong_hua_ge_today_first_passed(bool value) {
  set_has_zhong_hua_ge_today_first_passed();
  zhong_hua_ge_today_first_passed_ = value;
}

// optional int32 gaoji_melt_amount = 202;
inline bool HeroProto::has_gaoji_melt_amount() const {
  return (_has_bits_[4] & 0x00010000u) != 0;
}
inline void HeroProto::set_has_gaoji_melt_amount() {
  _has_bits_[4] |= 0x00010000u;
}
inline void HeroProto::clear_has_gaoji_melt_amount() {
  _has_bits_[4] &= ~0x00010000u;
}
inline void HeroProto::clear_gaoji_melt_amount() {
  gaoji_melt_amount_ = 0;
  clear_has_gaoji_melt_amount();
}
inline ::google::protobuf::int32 HeroProto::gaoji_melt_amount() const {
  return gaoji_melt_amount_;
}
inline void HeroProto::set_gaoji_melt_amount(::google::protobuf::int32 value) {
  set_has_gaoji_melt_amount();
  gaoji_melt_amount_ = value;
}

// optional int32 left_ya_biao_times_today = 203;
inline bool HeroProto::has_left_ya_biao_times_today() const {
  return (_has_bits_[4] & 0x00020000u) != 0;
}
inline void HeroProto::set_has_left_ya_biao_times_today() {
  _has_bits_[4] |= 0x00020000u;
}
inline void HeroProto::clear_has_left_ya_biao_times_today() {
  _has_bits_[4] &= ~0x00020000u;
}
inline void HeroProto::clear_left_ya_biao_times_today() {
  left_ya_biao_times_today_ = 0;
  clear_has_left_ya_biao_times_today();
}
inline ::google::protobuf::int32 HeroProto::left_ya_biao_times_today() const {
  return left_ya_biao_times_today_;
}
inline void HeroProto::set_left_ya_biao_times_today(::google::protobuf::int32 value) {
  set_has_left_ya_biao_times_today();
  left_ya_biao_times_today_ = value;
}

// optional int32 left_jie_biao_times_today = 204;
inline bool HeroProto::has_left_jie_biao_times_today() const {
  return (_has_bits_[4] & 0x00040000u) != 0;
}
inline void HeroProto::set_has_left_jie_biao_times_today() {
  _has_bits_[4] |= 0x00040000u;
}
inline void HeroProto::clear_has_left_jie_biao_times_today() {
  _has_bits_[4] &= ~0x00040000u;
}
inline void HeroProto::clear_left_jie_biao_times_today() {
  left_jie_biao_times_today_ = 0;
  clear_has_left_jie_biao_times_today();
}
inline ::google::protobuf::int32 HeroProto::left_jie_biao_times_today() const {
  return left_jie_biao_times_today_;
}
inline void HeroProto::set_left_jie_biao_times_today(::google::protobuf::int32 value) {
  set_has_left_jie_biao_times_today();
  left_jie_biao_times_today_ = value;
}

// optional bool has_safe_code = 205;
inline bool HeroProto::has_has_safe_code() const {
  return (_has_bits_[4] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_has_safe_code() {
  _has_bits_[4] |= 0x00080000u;
}
inline void HeroProto::clear_has_has_safe_code() {
  _has_bits_[4] &= ~0x00080000u;
}
inline void HeroProto::clear_has_safe_code() {
  has_safe_code_ = false;
  clear_has_has_safe_code();
}
inline bool HeroProto::has_safe_code() const {
  return has_safe_code_;
}
inline void HeroProto::set_has_safe_code(bool value) {
  set_has_has_safe_code();
  has_safe_code_ = value;
}

// optional string safe_code_question = 206;
inline bool HeroProto::has_safe_code_question() const {
  return (_has_bits_[4] & 0x00100000u) != 0;
}
inline void HeroProto::set_has_safe_code_question() {
  _has_bits_[4] |= 0x00100000u;
}
inline void HeroProto::clear_has_safe_code_question() {
  _has_bits_[4] &= ~0x00100000u;
}
inline void HeroProto::clear_safe_code_question() {
  if (safe_code_question_ != &::google::protobuf::internal::kEmptyString) {
    safe_code_question_->clear();
  }
  clear_has_safe_code_question();
}
inline const ::std::string& HeroProto::safe_code_question() const {
  return *safe_code_question_;
}
inline void HeroProto::set_safe_code_question(const ::std::string& value) {
  set_has_safe_code_question();
  if (safe_code_question_ == &::google::protobuf::internal::kEmptyString) {
    safe_code_question_ = new ::std::string;
  }
  safe_code_question_->assign(value);
}
inline void HeroProto::set_safe_code_question(const char* value) {
  set_has_safe_code_question();
  if (safe_code_question_ == &::google::protobuf::internal::kEmptyString) {
    safe_code_question_ = new ::std::string;
  }
  safe_code_question_->assign(value);
}
inline void HeroProto::set_safe_code_question(const char* value, size_t size) {
  set_has_safe_code_question();
  if (safe_code_question_ == &::google::protobuf::internal::kEmptyString) {
    safe_code_question_ = new ::std::string;
  }
  safe_code_question_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::mutable_safe_code_question() {
  set_has_safe_code_question();
  if (safe_code_question_ == &::google::protobuf::internal::kEmptyString) {
    safe_code_question_ = new ::std::string;
  }
  return safe_code_question_;
}
inline ::std::string* HeroProto::release_safe_code_question() {
  clear_has_safe_code_question();
  if (safe_code_question_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = safe_code_question_;
    safe_code_question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeroProto::set_allocated_safe_code_question(::std::string* safe_code_question) {
  if (safe_code_question_ != &::google::protobuf::internal::kEmptyString) {
    delete safe_code_question_;
  }
  if (safe_code_question) {
    set_has_safe_code_question();
    safe_code_question_ = safe_code_question;
  } else {
    clear_has_safe_code_question();
    safe_code_question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 jin_jie_lucky_card_type = 207;
inline int HeroProto::jin_jie_lucky_card_type_size() const {
  return jin_jie_lucky_card_type_.size();
}
inline void HeroProto::clear_jin_jie_lucky_card_type() {
  jin_jie_lucky_card_type_.Clear();
}
inline ::google::protobuf::int32 HeroProto::jin_jie_lucky_card_type(int index) const {
  return jin_jie_lucky_card_type_.Get(index);
}
inline void HeroProto::set_jin_jie_lucky_card_type(int index, ::google::protobuf::int32 value) {
  jin_jie_lucky_card_type_.Set(index, value);
}
inline void HeroProto::add_jin_jie_lucky_card_type(::google::protobuf::int32 value) {
  jin_jie_lucky_card_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::jin_jie_lucky_card_type() const {
  return jin_jie_lucky_card_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_jin_jie_lucky_card_type() {
  return &jin_jie_lucky_card_type_;
}

// repeated int64 jin_jie_lucky_card_expire_time = 208;
inline int HeroProto::jin_jie_lucky_card_expire_time_size() const {
  return jin_jie_lucky_card_expire_time_.size();
}
inline void HeroProto::clear_jin_jie_lucky_card_expire_time() {
  jin_jie_lucky_card_expire_time_.Clear();
}
inline ::google::protobuf::int64 HeroProto::jin_jie_lucky_card_expire_time(int index) const {
  return jin_jie_lucky_card_expire_time_.Get(index);
}
inline void HeroProto::set_jin_jie_lucky_card_expire_time(int index, ::google::protobuf::int64 value) {
  jin_jie_lucky_card_expire_time_.Set(index, value);
}
inline void HeroProto::add_jin_jie_lucky_card_expire_time(::google::protobuf::int64 value) {
  jin_jie_lucky_card_expire_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HeroProto::jin_jie_lucky_card_expire_time() const {
  return jin_jie_lucky_card_expire_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HeroProto::mutable_jin_jie_lucky_card_expire_time() {
  return &jin_jie_lucky_card_expire_time_;
}

// repeated int32 jin_jie_lucky_card_rate = 209;
inline int HeroProto::jin_jie_lucky_card_rate_size() const {
  return jin_jie_lucky_card_rate_.size();
}
inline void HeroProto::clear_jin_jie_lucky_card_rate() {
  jin_jie_lucky_card_rate_.Clear();
}
inline ::google::protobuf::int32 HeroProto::jin_jie_lucky_card_rate(int index) const {
  return jin_jie_lucky_card_rate_.Get(index);
}
inline void HeroProto::set_jin_jie_lucky_card_rate(int index, ::google::protobuf::int32 value) {
  jin_jie_lucky_card_rate_.Set(index, value);
}
inline void HeroProto::add_jin_jie_lucky_card_rate(::google::protobuf::int32 value) {
  jin_jie_lucky_card_rate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::jin_jie_lucky_card_rate() const {
  return jin_jie_lucky_card_rate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_jin_jie_lucky_card_rate() {
  return &jin_jie_lucky_card_rate_;
}

// repeated int32 daily_card_use_stat_goods_id = 210;
inline int HeroProto::daily_card_use_stat_goods_id_size() const {
  return daily_card_use_stat_goods_id_.size();
}
inline void HeroProto::clear_daily_card_use_stat_goods_id() {
  daily_card_use_stat_goods_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::daily_card_use_stat_goods_id(int index) const {
  return daily_card_use_stat_goods_id_.Get(index);
}
inline void HeroProto::set_daily_card_use_stat_goods_id(int index, ::google::protobuf::int32 value) {
  daily_card_use_stat_goods_id_.Set(index, value);
}
inline void HeroProto::add_daily_card_use_stat_goods_id(::google::protobuf::int32 value) {
  daily_card_use_stat_goods_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::daily_card_use_stat_goods_id() const {
  return daily_card_use_stat_goods_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_daily_card_use_stat_goods_id() {
  return &daily_card_use_stat_goods_id_;
}

// repeated int32 daily_card_use_stat_use_count = 211;
inline int HeroProto::daily_card_use_stat_use_count_size() const {
  return daily_card_use_stat_use_count_.size();
}
inline void HeroProto::clear_daily_card_use_stat_use_count() {
  daily_card_use_stat_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::daily_card_use_stat_use_count(int index) const {
  return daily_card_use_stat_use_count_.Get(index);
}
inline void HeroProto::set_daily_card_use_stat_use_count(int index, ::google::protobuf::int32 value) {
  daily_card_use_stat_use_count_.Set(index, value);
}
inline void HeroProto::add_daily_card_use_stat_use_count(::google::protobuf::int32 value) {
  daily_card_use_stat_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::daily_card_use_stat_use_count() const {
  return daily_card_use_stat_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_daily_card_use_stat_use_count() {
  return &daily_card_use_stat_use_count_;
}

// repeated int32 mo_shi_type = 212;
inline int HeroProto::mo_shi_type_size() const {
  return mo_shi_type_.size();
}
inline void HeroProto::clear_mo_shi_type() {
  mo_shi_type_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_type(int index) const {
  return mo_shi_type_.Get(index);
}
inline void HeroProto::set_mo_shi_type(int index, ::google::protobuf::int32 value) {
  mo_shi_type_.Set(index, value);
}
inline void HeroProto::add_mo_shi_type(::google::protobuf::int32 value) {
  mo_shi_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_type() const {
  return mo_shi_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_type() {
  return &mo_shi_type_;
}

// repeated int32 mo_shi_level = 213;
inline int HeroProto::mo_shi_level_size() const {
  return mo_shi_level_.size();
}
inline void HeroProto::clear_mo_shi_level() {
  mo_shi_level_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_level(int index) const {
  return mo_shi_level_.Get(index);
}
inline void HeroProto::set_mo_shi_level(int index, ::google::protobuf::int32 value) {
  mo_shi_level_.Set(index, value);
}
inline void HeroProto::add_mo_shi_level(::google::protobuf::int32 value) {
  mo_shi_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_level() const {
  return mo_shi_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_level() {
  return &mo_shi_level_;
}

// repeated int32 mo_shi_bless_amount = 214;
inline int HeroProto::mo_shi_bless_amount_size() const {
  return mo_shi_bless_amount_.size();
}
inline void HeroProto::clear_mo_shi_bless_amount() {
  mo_shi_bless_amount_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_bless_amount(int index) const {
  return mo_shi_bless_amount_.Get(index);
}
inline void HeroProto::set_mo_shi_bless_amount(int index, ::google::protobuf::int32 value) {
  mo_shi_bless_amount_.Set(index, value);
}
inline void HeroProto::add_mo_shi_bless_amount(::google::protobuf::int32 value) {
  mo_shi_bless_amount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_bless_amount() const {
  return mo_shi_bless_amount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_bless_amount() {
  return &mo_shi_bless_amount_;
}

// repeated int64 mo_shi_bless_amount_clear_time = 215;
inline int HeroProto::mo_shi_bless_amount_clear_time_size() const {
  return mo_shi_bless_amount_clear_time_.size();
}
inline void HeroProto::clear_mo_shi_bless_amount_clear_time() {
  mo_shi_bless_amount_clear_time_.Clear();
}
inline ::google::protobuf::int64 HeroProto::mo_shi_bless_amount_clear_time(int index) const {
  return mo_shi_bless_amount_clear_time_.Get(index);
}
inline void HeroProto::set_mo_shi_bless_amount_clear_time(int index, ::google::protobuf::int64 value) {
  mo_shi_bless_amount_clear_time_.Set(index, value);
}
inline void HeroProto::add_mo_shi_bless_amount_clear_time(::google::protobuf::int64 value) {
  mo_shi_bless_amount_clear_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HeroProto::mo_shi_bless_amount_clear_time() const {
  return mo_shi_bless_amount_clear_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HeroProto::mutable_mo_shi_bless_amount_clear_time() {
  return &mo_shi_bless_amount_clear_time_;
}

// repeated int32 mo_shi_spell_id = 216;
inline int HeroProto::mo_shi_spell_id_size() const {
  return mo_shi_spell_id_.size();
}
inline void HeroProto::clear_mo_shi_spell_id() {
  mo_shi_spell_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_spell_id(int index) const {
  return mo_shi_spell_id_.Get(index);
}
inline void HeroProto::set_mo_shi_spell_id(int index, ::google::protobuf::int32 value) {
  mo_shi_spell_id_.Set(index, value);
}
inline void HeroProto::add_mo_shi_spell_id(::google::protobuf::int32 value) {
  mo_shi_spell_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_spell_id() const {
  return mo_shi_spell_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_spell_id() {
  return &mo_shi_spell_id_;
}

// optional bool mo_shi_is_hide = 510;
inline bool HeroProto::has_mo_shi_is_hide() const {
  return (_has_bits_[4] & 0x80000000u) != 0;
}
inline void HeroProto::set_has_mo_shi_is_hide() {
  _has_bits_[4] |= 0x80000000u;
}
inline void HeroProto::clear_has_mo_shi_is_hide() {
  _has_bits_[4] &= ~0x80000000u;
}
inline void HeroProto::clear_mo_shi_is_hide() {
  mo_shi_is_hide_ = false;
  clear_has_mo_shi_is_hide();
}
inline bool HeroProto::mo_shi_is_hide() const {
  return mo_shi_is_hide_;
}
inline void HeroProto::set_mo_shi_is_hide(bool value) {
  set_has_mo_shi_is_hide();
  mo_shi_is_hide_ = value;
}

// repeated int32 qian_qiu_da_jie_type = 217;
inline int HeroProto::qian_qiu_da_jie_type_size() const {
  return qian_qiu_da_jie_type_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_type() {
  qian_qiu_da_jie_type_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_type(int index) const {
  return qian_qiu_da_jie_type_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_type(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_type_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_type(::google::protobuf::int32 value) {
  qian_qiu_da_jie_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_type() const {
  return qian_qiu_da_jie_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_type() {
  return &qian_qiu_da_jie_type_;
}

// repeated int32 qian_qiu_da_jie_level = 218;
inline int HeroProto::qian_qiu_da_jie_level_size() const {
  return qian_qiu_da_jie_level_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_level() {
  qian_qiu_da_jie_level_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_level(int index) const {
  return qian_qiu_da_jie_level_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_level(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_level_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_level(::google::protobuf::int32 value) {
  qian_qiu_da_jie_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_level() const {
  return qian_qiu_da_jie_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_level() {
  return &qian_qiu_da_jie_level_;
}

// repeated int32 qian_qiu_da_jie_bless_amount = 219;
inline int HeroProto::qian_qiu_da_jie_bless_amount_size() const {
  return qian_qiu_da_jie_bless_amount_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_bless_amount() {
  qian_qiu_da_jie_bless_amount_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_bless_amount(int index) const {
  return qian_qiu_da_jie_bless_amount_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_bless_amount(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_bless_amount_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_bless_amount(::google::protobuf::int32 value) {
  qian_qiu_da_jie_bless_amount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_bless_amount() const {
  return qian_qiu_da_jie_bless_amount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_bless_amount() {
  return &qian_qiu_da_jie_bless_amount_;
}

// repeated int64 qian_qiu_da_jie_bless_amount_clear_time = 220;
inline int HeroProto::qian_qiu_da_jie_bless_amount_clear_time_size() const {
  return qian_qiu_da_jie_bless_amount_clear_time_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_bless_amount_clear_time() {
  qian_qiu_da_jie_bless_amount_clear_time_.Clear();
}
inline ::google::protobuf::int64 HeroProto::qian_qiu_da_jie_bless_amount_clear_time(int index) const {
  return qian_qiu_da_jie_bless_amount_clear_time_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_bless_amount_clear_time(int index, ::google::protobuf::int64 value) {
  qian_qiu_da_jie_bless_amount_clear_time_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_bless_amount_clear_time(::google::protobuf::int64 value) {
  qian_qiu_da_jie_bless_amount_clear_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HeroProto::qian_qiu_da_jie_bless_amount_clear_time() const {
  return qian_qiu_da_jie_bless_amount_clear_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HeroProto::mutable_qian_qiu_da_jie_bless_amount_clear_time() {
  return &qian_qiu_da_jie_bless_amount_clear_time_;
}

// repeated int32 qian_qiu_da_jie_qian_neng_use_count = 340;
inline int HeroProto::qian_qiu_da_jie_qian_neng_use_count_size() const {
  return qian_qiu_da_jie_qian_neng_use_count_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_qian_neng_use_count() {
  qian_qiu_da_jie_qian_neng_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_qian_neng_use_count(int index) const {
  return qian_qiu_da_jie_qian_neng_use_count_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_qian_neng_use_count(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_qian_neng_use_count_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_qian_neng_use_count(::google::protobuf::int32 value) {
  qian_qiu_da_jie_qian_neng_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_qian_neng_use_count() const {
  return qian_qiu_da_jie_qian_neng_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_qian_neng_use_count() {
  return &qian_qiu_da_jie_qian_neng_use_count_;
}

// repeated int32 qian_qiu_da_jie_huan_hua_use_count = 341;
inline int HeroProto::qian_qiu_da_jie_huan_hua_use_count_size() const {
  return qian_qiu_da_jie_huan_hua_use_count_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_huan_hua_use_count() {
  qian_qiu_da_jie_huan_hua_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_huan_hua_use_count(int index) const {
  return qian_qiu_da_jie_huan_hua_use_count_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_huan_hua_use_count(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_huan_hua_use_count_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_huan_hua_use_count(::google::protobuf::int32 value) {
  qian_qiu_da_jie_huan_hua_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_huan_hua_use_count() const {
  return qian_qiu_da_jie_huan_hua_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_huan_hua_use_count() {
  return &qian_qiu_da_jie_huan_hua_use_count_;
}

// optional bool qian_qiu_da_jie_is_hide = 508;
inline bool HeroProto::has_qian_qiu_da_jie_is_hide() const {
  return (_has_bits_[5] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_qian_qiu_da_jie_is_hide() {
  _has_bits_[5] |= 0x00000040u;
}
inline void HeroProto::clear_has_qian_qiu_da_jie_is_hide() {
  _has_bits_[5] &= ~0x00000040u;
}
inline void HeroProto::clear_qian_qiu_da_jie_is_hide() {
  qian_qiu_da_jie_is_hide_ = false;
  clear_has_qian_qiu_da_jie_is_hide();
}
inline bool HeroProto::qian_qiu_da_jie_is_hide() const {
  return qian_qiu_da_jie_is_hide_;
}
inline void HeroProto::set_qian_qiu_da_jie_is_hide(bool value) {
  set_has_qian_qiu_da_jie_is_hide();
  qian_qiu_da_jie_is_hide_ = value;
}

// repeated int32 qian_qiu_da_jie_qian_neng_extra_max_use_count = 384;
inline int HeroProto::qian_qiu_da_jie_qian_neng_extra_max_use_count_size() const {
  return qian_qiu_da_jie_qian_neng_extra_max_use_count_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_qian_neng_extra_max_use_count() {
  qian_qiu_da_jie_qian_neng_extra_max_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_qian_neng_extra_max_use_count(int index) const {
  return qian_qiu_da_jie_qian_neng_extra_max_use_count_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_qian_neng_extra_max_use_count(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_qian_neng_extra_max_use_count_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  qian_qiu_da_jie_qian_neng_extra_max_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_qian_neng_extra_max_use_count() const {
  return qian_qiu_da_jie_qian_neng_extra_max_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_qian_neng_extra_max_use_count() {
  return &qian_qiu_da_jie_qian_neng_extra_max_use_count_;
}

// repeated int32 qian_qiu_da_jie_huan_hua_extra_max_use_count = 385;
inline int HeroProto::qian_qiu_da_jie_huan_hua_extra_max_use_count_size() const {
  return qian_qiu_da_jie_huan_hua_extra_max_use_count_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_huan_hua_extra_max_use_count() {
  qian_qiu_da_jie_huan_hua_extra_max_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_huan_hua_extra_max_use_count(int index) const {
  return qian_qiu_da_jie_huan_hua_extra_max_use_count_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_huan_hua_extra_max_use_count(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_huan_hua_extra_max_use_count_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  qian_qiu_da_jie_huan_hua_extra_max_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_huan_hua_extra_max_use_count() const {
  return qian_qiu_da_jie_huan_hua_extra_max_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_huan_hua_extra_max_use_count() {
  return &qian_qiu_da_jie_huan_hua_extra_max_use_count_;
}

// repeated int32 qian_qiu_da_jie_qian_neng_max_use_count_extra_times = 386;
inline int HeroProto::qian_qiu_da_jie_qian_neng_max_use_count_extra_times_size() const {
  return qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_qian_neng_max_use_count_extra_times() {
  qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_qian_neng_max_use_count_extra_times(int index) const {
  return qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_qian_neng_max_use_count_extra_times(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  qian_qiu_da_jie_qian_neng_max_use_count_extra_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_qian_neng_max_use_count_extra_times() const {
  return qian_qiu_da_jie_qian_neng_max_use_count_extra_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_qian_neng_max_use_count_extra_times() {
  return &qian_qiu_da_jie_qian_neng_max_use_count_extra_times_;
}

// repeated int32 qian_qiu_da_jie_huan_hua_max_use_count_extra_times = 387;
inline int HeroProto::qian_qiu_da_jie_huan_hua_max_use_count_extra_times_size() const {
  return qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.size();
}
inline void HeroProto::clear_qian_qiu_da_jie_huan_hua_max_use_count_extra_times() {
  qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::qian_qiu_da_jie_huan_hua_max_use_count_extra_times(int index) const {
  return qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.Get(index);
}
inline void HeroProto::set_qian_qiu_da_jie_huan_hua_max_use_count_extra_times(int index, ::google::protobuf::int32 value) {
  qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.Set(index, value);
}
inline void HeroProto::add_qian_qiu_da_jie_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  qian_qiu_da_jie_huan_hua_max_use_count_extra_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::qian_qiu_da_jie_huan_hua_max_use_count_extra_times() const {
  return qian_qiu_da_jie_huan_hua_max_use_count_extra_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_qian_qiu_da_jie_huan_hua_max_use_count_extra_times() {
  return &qian_qiu_da_jie_huan_hua_max_use_count_extra_times_;
}

// optional int32 long_yuan = 221;
inline bool HeroProto::has_long_yuan() const {
  return (_has_bits_[5] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_long_yuan() {
  _has_bits_[5] |= 0x00000800u;
}
inline void HeroProto::clear_has_long_yuan() {
  _has_bits_[5] &= ~0x00000800u;
}
inline void HeroProto::clear_long_yuan() {
  long_yuan_ = 0;
  clear_has_long_yuan();
}
inline ::google::protobuf::int32 HeroProto::long_yuan() const {
  return long_yuan_;
}
inline void HeroProto::set_long_yuan(::google::protobuf::int32 value) {
  set_has_long_yuan();
  long_yuan_ = value;
}

// optional .app.message.HeroJingJieProto jing_jie = 222;
inline bool HeroProto::has_jing_jie() const {
  return (_has_bits_[5] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_jing_jie() {
  _has_bits_[5] |= 0x00001000u;
}
inline void HeroProto::clear_has_jing_jie() {
  _has_bits_[5] &= ~0x00001000u;
}
inline void HeroProto::clear_jing_jie() {
  if (jing_jie_ != NULL) jing_jie_->::app::message::HeroJingJieProto::Clear();
  clear_has_jing_jie();
}
inline const ::app::message::HeroJingJieProto& HeroProto::jing_jie() const {
  return jing_jie_ != NULL ? *jing_jie_ : *default_instance_->jing_jie_;
}
inline ::app::message::HeroJingJieProto* HeroProto::mutable_jing_jie() {
  set_has_jing_jie();
  if (jing_jie_ == NULL) jing_jie_ = new ::app::message::HeroJingJieProto;
  return jing_jie_;
}
inline ::app::message::HeroJingJieProto* HeroProto::release_jing_jie() {
  clear_has_jing_jie();
  ::app::message::HeroJingJieProto* temp = jing_jie_;
  jing_jie_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_jing_jie(::app::message::HeroJingJieProto* jing_jie) {
  delete jing_jie_;
  jing_jie_ = jing_jie;
  if (jing_jie) {
    set_has_jing_jie();
  } else {
    clear_has_jing_jie();
  }
}

// repeated int32 mo_shi_qian_neng_use_count = 223;
inline int HeroProto::mo_shi_qian_neng_use_count_size() const {
  return mo_shi_qian_neng_use_count_.size();
}
inline void HeroProto::clear_mo_shi_qian_neng_use_count() {
  mo_shi_qian_neng_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_qian_neng_use_count(int index) const {
  return mo_shi_qian_neng_use_count_.Get(index);
}
inline void HeroProto::set_mo_shi_qian_neng_use_count(int index, ::google::protobuf::int32 value) {
  mo_shi_qian_neng_use_count_.Set(index, value);
}
inline void HeroProto::add_mo_shi_qian_neng_use_count(::google::protobuf::int32 value) {
  mo_shi_qian_neng_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_qian_neng_use_count() const {
  return mo_shi_qian_neng_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_qian_neng_use_count() {
  return &mo_shi_qian_neng_use_count_;
}

// repeated int32 mo_shi_huan_hua_use_count = 224;
inline int HeroProto::mo_shi_huan_hua_use_count_size() const {
  return mo_shi_huan_hua_use_count_.size();
}
inline void HeroProto::clear_mo_shi_huan_hua_use_count() {
  mo_shi_huan_hua_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_huan_hua_use_count(int index) const {
  return mo_shi_huan_hua_use_count_.Get(index);
}
inline void HeroProto::set_mo_shi_huan_hua_use_count(int index, ::google::protobuf::int32 value) {
  mo_shi_huan_hua_use_count_.Set(index, value);
}
inline void HeroProto::add_mo_shi_huan_hua_use_count(::google::protobuf::int32 value) {
  mo_shi_huan_hua_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_huan_hua_use_count() const {
  return mo_shi_huan_hua_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_huan_hua_use_count() {
  return &mo_shi_huan_hua_use_count_;
}

// repeated int32 mo_shi_qian_neng_extra_max_use_count = 388;
inline int HeroProto::mo_shi_qian_neng_extra_max_use_count_size() const {
  return mo_shi_qian_neng_extra_max_use_count_.size();
}
inline void HeroProto::clear_mo_shi_qian_neng_extra_max_use_count() {
  mo_shi_qian_neng_extra_max_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_qian_neng_extra_max_use_count(int index) const {
  return mo_shi_qian_neng_extra_max_use_count_.Get(index);
}
inline void HeroProto::set_mo_shi_qian_neng_extra_max_use_count(int index, ::google::protobuf::int32 value) {
  mo_shi_qian_neng_extra_max_use_count_.Set(index, value);
}
inline void HeroProto::add_mo_shi_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  mo_shi_qian_neng_extra_max_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_qian_neng_extra_max_use_count() const {
  return mo_shi_qian_neng_extra_max_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_qian_neng_extra_max_use_count() {
  return &mo_shi_qian_neng_extra_max_use_count_;
}

// repeated int32 mo_shi_huan_hua_extra_max_use_count = 389;
inline int HeroProto::mo_shi_huan_hua_extra_max_use_count_size() const {
  return mo_shi_huan_hua_extra_max_use_count_.size();
}
inline void HeroProto::clear_mo_shi_huan_hua_extra_max_use_count() {
  mo_shi_huan_hua_extra_max_use_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_huan_hua_extra_max_use_count(int index) const {
  return mo_shi_huan_hua_extra_max_use_count_.Get(index);
}
inline void HeroProto::set_mo_shi_huan_hua_extra_max_use_count(int index, ::google::protobuf::int32 value) {
  mo_shi_huan_hua_extra_max_use_count_.Set(index, value);
}
inline void HeroProto::add_mo_shi_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  mo_shi_huan_hua_extra_max_use_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_huan_hua_extra_max_use_count() const {
  return mo_shi_huan_hua_extra_max_use_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_huan_hua_extra_max_use_count() {
  return &mo_shi_huan_hua_extra_max_use_count_;
}

// repeated int32 mo_shi_qian_neng_max_use_count_extra_times = 390;
inline int HeroProto::mo_shi_qian_neng_max_use_count_extra_times_size() const {
  return mo_shi_qian_neng_max_use_count_extra_times_.size();
}
inline void HeroProto::clear_mo_shi_qian_neng_max_use_count_extra_times() {
  mo_shi_qian_neng_max_use_count_extra_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_qian_neng_max_use_count_extra_times(int index) const {
  return mo_shi_qian_neng_max_use_count_extra_times_.Get(index);
}
inline void HeroProto::set_mo_shi_qian_neng_max_use_count_extra_times(int index, ::google::protobuf::int32 value) {
  mo_shi_qian_neng_max_use_count_extra_times_.Set(index, value);
}
inline void HeroProto::add_mo_shi_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  mo_shi_qian_neng_max_use_count_extra_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_qian_neng_max_use_count_extra_times() const {
  return mo_shi_qian_neng_max_use_count_extra_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_qian_neng_max_use_count_extra_times() {
  return &mo_shi_qian_neng_max_use_count_extra_times_;
}

// repeated int32 mo_shi_huan_hua_max_use_count_extra_times = 391;
inline int HeroProto::mo_shi_huan_hua_max_use_count_extra_times_size() const {
  return mo_shi_huan_hua_max_use_count_extra_times_.size();
}
inline void HeroProto::clear_mo_shi_huan_hua_max_use_count_extra_times() {
  mo_shi_huan_hua_max_use_count_extra_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mo_shi_huan_hua_max_use_count_extra_times(int index) const {
  return mo_shi_huan_hua_max_use_count_extra_times_.Get(index);
}
inline void HeroProto::set_mo_shi_huan_hua_max_use_count_extra_times(int index, ::google::protobuf::int32 value) {
  mo_shi_huan_hua_max_use_count_extra_times_.Set(index, value);
}
inline void HeroProto::add_mo_shi_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  mo_shi_huan_hua_max_use_count_extra_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mo_shi_huan_hua_max_use_count_extra_times() const {
  return mo_shi_huan_hua_max_use_count_extra_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mo_shi_huan_hua_max_use_count_extra_times() {
  return &mo_shi_huan_hua_max_use_count_extra_times_;
}

// optional int32 chi_huo_shen_gong_jie_shu = 225;
inline bool HeroProto::has_chi_huo_shen_gong_jie_shu() const {
  return (_has_bits_[5] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_jie_shu() {
  _has_bits_[5] |= 0x00080000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_jie_shu() {
  _has_bits_[5] &= ~0x00080000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_jie_shu() {
  chi_huo_shen_gong_jie_shu_ = 0;
  clear_has_chi_huo_shen_gong_jie_shu();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_jie_shu() const {
  return chi_huo_shen_gong_jie_shu_;
}
inline void HeroProto::set_chi_huo_shen_gong_jie_shu(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_jie_shu();
  chi_huo_shen_gong_jie_shu_ = value;
}

// optional int32 chi_huo_shen_gong_ceng_shu = 226;
inline bool HeroProto::has_chi_huo_shen_gong_ceng_shu() const {
  return (_has_bits_[5] & 0x00100000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_ceng_shu() {
  _has_bits_[5] |= 0x00100000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_ceng_shu() {
  _has_bits_[5] &= ~0x00100000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_ceng_shu() {
  chi_huo_shen_gong_ceng_shu_ = 0;
  clear_has_chi_huo_shen_gong_ceng_shu();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_ceng_shu() const {
  return chi_huo_shen_gong_ceng_shu_;
}
inline void HeroProto::set_chi_huo_shen_gong_ceng_shu(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_ceng_shu();
  chi_huo_shen_gong_ceng_shu_ = value;
}

// optional int32 chi_huo_shen_gong_bless_amount = 227;
inline bool HeroProto::has_chi_huo_shen_gong_bless_amount() const {
  return (_has_bits_[5] & 0x00200000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_bless_amount() {
  _has_bits_[5] |= 0x00200000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_bless_amount() {
  _has_bits_[5] &= ~0x00200000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_bless_amount() {
  chi_huo_shen_gong_bless_amount_ = 0;
  clear_has_chi_huo_shen_gong_bless_amount();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_bless_amount() const {
  return chi_huo_shen_gong_bless_amount_;
}
inline void HeroProto::set_chi_huo_shen_gong_bless_amount(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_bless_amount();
  chi_huo_shen_gong_bless_amount_ = value;
}

// optional int64 chi_huo_shen_gong_bless_amount_clear_time = 228;
inline bool HeroProto::has_chi_huo_shen_gong_bless_amount_clear_time() const {
  return (_has_bits_[5] & 0x00400000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_bless_amount_clear_time() {
  _has_bits_[5] |= 0x00400000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_bless_amount_clear_time() {
  _has_bits_[5] &= ~0x00400000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_bless_amount_clear_time() {
  chi_huo_shen_gong_bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_chi_huo_shen_gong_bless_amount_clear_time();
}
inline ::google::protobuf::int64 HeroProto::chi_huo_shen_gong_bless_amount_clear_time() const {
  return chi_huo_shen_gong_bless_amount_clear_time_;
}
inline void HeroProto::set_chi_huo_shen_gong_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_chi_huo_shen_gong_bless_amount_clear_time();
  chi_huo_shen_gong_bless_amount_clear_time_ = value;
}

// optional int32 chi_huo_shen_gong_qian_neng_use_count = 350;
inline bool HeroProto::has_chi_huo_shen_gong_qian_neng_use_count() const {
  return (_has_bits_[5] & 0x00800000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_qian_neng_use_count() {
  _has_bits_[5] |= 0x00800000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_qian_neng_use_count() {
  _has_bits_[5] &= ~0x00800000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_qian_neng_use_count() {
  chi_huo_shen_gong_qian_neng_use_count_ = 0;
  clear_has_chi_huo_shen_gong_qian_neng_use_count();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_qian_neng_use_count() const {
  return chi_huo_shen_gong_qian_neng_use_count_;
}
inline void HeroProto::set_chi_huo_shen_gong_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_qian_neng_use_count();
  chi_huo_shen_gong_qian_neng_use_count_ = value;
}

// optional int32 chi_huo_shen_gong_huan_hua_use_count = 351;
inline bool HeroProto::has_chi_huo_shen_gong_huan_hua_use_count() const {
  return (_has_bits_[5] & 0x01000000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_huan_hua_use_count() {
  _has_bits_[5] |= 0x01000000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_huan_hua_use_count() {
  _has_bits_[5] &= ~0x01000000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_huan_hua_use_count() {
  chi_huo_shen_gong_huan_hua_use_count_ = 0;
  clear_has_chi_huo_shen_gong_huan_hua_use_count();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_huan_hua_use_count() const {
  return chi_huo_shen_gong_huan_hua_use_count_;
}
inline void HeroProto::set_chi_huo_shen_gong_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_huan_hua_use_count();
  chi_huo_shen_gong_huan_hua_use_count_ = value;
}

// optional int32 chi_huo_shen_gong_qian_neng_extra_max_use_count = 392;
inline bool HeroProto::has_chi_huo_shen_gong_qian_neng_extra_max_use_count() const {
  return (_has_bits_[5] & 0x02000000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_qian_neng_extra_max_use_count() {
  _has_bits_[5] |= 0x02000000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_qian_neng_extra_max_use_count() {
  _has_bits_[5] &= ~0x02000000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_qian_neng_extra_max_use_count() {
  chi_huo_shen_gong_qian_neng_extra_max_use_count_ = 0;
  clear_has_chi_huo_shen_gong_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_qian_neng_extra_max_use_count() const {
  return chi_huo_shen_gong_qian_neng_extra_max_use_count_;
}
inline void HeroProto::set_chi_huo_shen_gong_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_qian_neng_extra_max_use_count();
  chi_huo_shen_gong_qian_neng_extra_max_use_count_ = value;
}

// optional int32 chi_huo_shen_gong_huan_hua_extra_max_use_count = 393;
inline bool HeroProto::has_chi_huo_shen_gong_huan_hua_extra_max_use_count() const {
  return (_has_bits_[5] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_huan_hua_extra_max_use_count() {
  _has_bits_[5] |= 0x04000000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_huan_hua_extra_max_use_count() {
  _has_bits_[5] &= ~0x04000000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_huan_hua_extra_max_use_count() {
  chi_huo_shen_gong_huan_hua_extra_max_use_count_ = 0;
  clear_has_chi_huo_shen_gong_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_huan_hua_extra_max_use_count() const {
  return chi_huo_shen_gong_huan_hua_extra_max_use_count_;
}
inline void HeroProto::set_chi_huo_shen_gong_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_huan_hua_extra_max_use_count();
  chi_huo_shen_gong_huan_hua_extra_max_use_count_ = value;
}

// optional int32 chi_huo_shen_gong_qian_neng_max_use_count_extra_times = 394;
inline bool HeroProto::has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[5] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times() {
  _has_bits_[5] |= 0x08000000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times() {
  _has_bits_[5] &= ~0x08000000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_qian_neng_max_use_count_extra_times() {
  chi_huo_shen_gong_qian_neng_max_use_count_extra_times_ = 0;
  clear_has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_qian_neng_max_use_count_extra_times() const {
  return chi_huo_shen_gong_qian_neng_max_use_count_extra_times_;
}
inline void HeroProto::set_chi_huo_shen_gong_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_qian_neng_max_use_count_extra_times();
  chi_huo_shen_gong_qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 chi_huo_shen_gong_huan_hua_max_use_count_extra_times = 395;
inline bool HeroProto::has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[5] & 0x10000000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times() {
  _has_bits_[5] |= 0x10000000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times() {
  _has_bits_[5] &= ~0x10000000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_huan_hua_max_use_count_extra_times() {
  chi_huo_shen_gong_huan_hua_max_use_count_extra_times_ = 0;
  clear_has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 HeroProto::chi_huo_shen_gong_huan_hua_max_use_count_extra_times() const {
  return chi_huo_shen_gong_huan_hua_max_use_count_extra_times_;
}
inline void HeroProto::set_chi_huo_shen_gong_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_huan_hua_max_use_count_extra_times();
  chi_huo_shen_gong_huan_hua_max_use_count_extra_times_ = value;
}

// optional bool chi_huo_shen_gong_is_hide = 509;
inline bool HeroProto::has_chi_huo_shen_gong_is_hide() const {
  return (_has_bits_[5] & 0x20000000u) != 0;
}
inline void HeroProto::set_has_chi_huo_shen_gong_is_hide() {
  _has_bits_[5] |= 0x20000000u;
}
inline void HeroProto::clear_has_chi_huo_shen_gong_is_hide() {
  _has_bits_[5] &= ~0x20000000u;
}
inline void HeroProto::clear_chi_huo_shen_gong_is_hide() {
  chi_huo_shen_gong_is_hide_ = false;
  clear_has_chi_huo_shen_gong_is_hide();
}
inline bool HeroProto::chi_huo_shen_gong_is_hide() const {
  return chi_huo_shen_gong_is_hide_;
}
inline void HeroProto::set_chi_huo_shen_gong_is_hide(bool value) {
  set_has_chi_huo_shen_gong_is_hide();
  chi_huo_shen_gong_is_hide_ = value;
}

// optional int32 draw_prize_point = 230;
inline bool HeroProto::has_draw_prize_point() const {
  return (_has_bits_[5] & 0x40000000u) != 0;
}
inline void HeroProto::set_has_draw_prize_point() {
  _has_bits_[5] |= 0x40000000u;
}
inline void HeroProto::clear_has_draw_prize_point() {
  _has_bits_[5] &= ~0x40000000u;
}
inline void HeroProto::clear_draw_prize_point() {
  draw_prize_point_ = 0;
  clear_has_draw_prize_point();
}
inline ::google::protobuf::int32 HeroProto::draw_prize_point() const {
  return draw_prize_point_;
}
inline void HeroProto::set_draw_prize_point(::google::protobuf::int32 value) {
  set_has_draw_prize_point();
  draw_prize_point_ = value;
}

// optional int32 draw_prize_storage_goods_count = 231;
inline bool HeroProto::has_draw_prize_storage_goods_count() const {
  return (_has_bits_[5] & 0x80000000u) != 0;
}
inline void HeroProto::set_has_draw_prize_storage_goods_count() {
  _has_bits_[5] |= 0x80000000u;
}
inline void HeroProto::clear_has_draw_prize_storage_goods_count() {
  _has_bits_[5] &= ~0x80000000u;
}
inline void HeroProto::clear_draw_prize_storage_goods_count() {
  draw_prize_storage_goods_count_ = 0;
  clear_has_draw_prize_storage_goods_count();
}
inline ::google::protobuf::int32 HeroProto::draw_prize_storage_goods_count() const {
  return draw_prize_storage_goods_count_;
}
inline void HeroProto::set_draw_prize_storage_goods_count(::google::protobuf::int32 value) {
  set_has_draw_prize_storage_goods_count();
  draw_prize_storage_goods_count_ = value;
}

// repeated int32 draw_prize_exchange_count = 232;
inline int HeroProto::draw_prize_exchange_count_size() const {
  return draw_prize_exchange_count_.size();
}
inline void HeroProto::clear_draw_prize_exchange_count() {
  draw_prize_exchange_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::draw_prize_exchange_count(int index) const {
  return draw_prize_exchange_count_.Get(index);
}
inline void HeroProto::set_draw_prize_exchange_count(int index, ::google::protobuf::int32 value) {
  draw_prize_exchange_count_.Set(index, value);
}
inline void HeroProto::add_draw_prize_exchange_count(::google::protobuf::int32 value) {
  draw_prize_exchange_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::draw_prize_exchange_count() const {
  return draw_prize_exchange_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_draw_prize_exchange_count() {
  return &draw_prize_exchange_count_;
}

// optional int32 lucky_draw_prize_point = 233;
inline bool HeroProto::has_lucky_draw_prize_point() const {
  return (_has_bits_[6] & 0x00000002u) != 0;
}
inline void HeroProto::set_has_lucky_draw_prize_point() {
  _has_bits_[6] |= 0x00000002u;
}
inline void HeroProto::clear_has_lucky_draw_prize_point() {
  _has_bits_[6] &= ~0x00000002u;
}
inline void HeroProto::clear_lucky_draw_prize_point() {
  lucky_draw_prize_point_ = 0;
  clear_has_lucky_draw_prize_point();
}
inline ::google::protobuf::int32 HeroProto::lucky_draw_prize_point() const {
  return lucky_draw_prize_point_;
}
inline void HeroProto::set_lucky_draw_prize_point(::google::protobuf::int32 value) {
  set_has_lucky_draw_prize_point();
  lucky_draw_prize_point_ = value;
}

// optional int32 lucky_draw_prize_storage_goods_count = 234;
inline bool HeroProto::has_lucky_draw_prize_storage_goods_count() const {
  return (_has_bits_[6] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_lucky_draw_prize_storage_goods_count() {
  _has_bits_[6] |= 0x00000004u;
}
inline void HeroProto::clear_has_lucky_draw_prize_storage_goods_count() {
  _has_bits_[6] &= ~0x00000004u;
}
inline void HeroProto::clear_lucky_draw_prize_storage_goods_count() {
  lucky_draw_prize_storage_goods_count_ = 0;
  clear_has_lucky_draw_prize_storage_goods_count();
}
inline ::google::protobuf::int32 HeroProto::lucky_draw_prize_storage_goods_count() const {
  return lucky_draw_prize_storage_goods_count_;
}
inline void HeroProto::set_lucky_draw_prize_storage_goods_count(::google::protobuf::int32 value) {
  set_has_lucky_draw_prize_storage_goods_count();
  lucky_draw_prize_storage_goods_count_ = value;
}

// optional int32 new_draw_prize_point = 333;
inline bool HeroProto::has_new_draw_prize_point() const {
  return (_has_bits_[6] & 0x00000008u) != 0;
}
inline void HeroProto::set_has_new_draw_prize_point() {
  _has_bits_[6] |= 0x00000008u;
}
inline void HeroProto::clear_has_new_draw_prize_point() {
  _has_bits_[6] &= ~0x00000008u;
}
inline void HeroProto::clear_new_draw_prize_point() {
  new_draw_prize_point_ = 0;
  clear_has_new_draw_prize_point();
}
inline ::google::protobuf::int32 HeroProto::new_draw_prize_point() const {
  return new_draw_prize_point_;
}
inline void HeroProto::set_new_draw_prize_point(::google::protobuf::int32 value) {
  set_has_new_draw_prize_point();
  new_draw_prize_point_ = value;
}

// optional int32 new_draw_prize_storage_goods_count = 334;
inline bool HeroProto::has_new_draw_prize_storage_goods_count() const {
  return (_has_bits_[6] & 0x00000010u) != 0;
}
inline void HeroProto::set_has_new_draw_prize_storage_goods_count() {
  _has_bits_[6] |= 0x00000010u;
}
inline void HeroProto::clear_has_new_draw_prize_storage_goods_count() {
  _has_bits_[6] &= ~0x00000010u;
}
inline void HeroProto::clear_new_draw_prize_storage_goods_count() {
  new_draw_prize_storage_goods_count_ = 0;
  clear_has_new_draw_prize_storage_goods_count();
}
inline ::google::protobuf::int32 HeroProto::new_draw_prize_storage_goods_count() const {
  return new_draw_prize_storage_goods_count_;
}
inline void HeroProto::set_new_draw_prize_storage_goods_count(::google::protobuf::int32 value) {
  set_has_new_draw_prize_storage_goods_count();
  new_draw_prize_storage_goods_count_ = value;
}

// optional .app.message.YitianshenjueProto yitianshenjue_info = 235;
inline bool HeroProto::has_yitianshenjue_info() const {
  return (_has_bits_[6] & 0x00000020u) != 0;
}
inline void HeroProto::set_has_yitianshenjue_info() {
  _has_bits_[6] |= 0x00000020u;
}
inline void HeroProto::clear_has_yitianshenjue_info() {
  _has_bits_[6] &= ~0x00000020u;
}
inline void HeroProto::clear_yitianshenjue_info() {
  if (yitianshenjue_info_ != NULL) yitianshenjue_info_->::app::message::YitianshenjueProto::Clear();
  clear_has_yitianshenjue_info();
}
inline const ::app::message::YitianshenjueProto& HeroProto::yitianshenjue_info() const {
  return yitianshenjue_info_ != NULL ? *yitianshenjue_info_ : *default_instance_->yitianshenjue_info_;
}
inline ::app::message::YitianshenjueProto* HeroProto::mutable_yitianshenjue_info() {
  set_has_yitianshenjue_info();
  if (yitianshenjue_info_ == NULL) yitianshenjue_info_ = new ::app::message::YitianshenjueProto;
  return yitianshenjue_info_;
}
inline ::app::message::YitianshenjueProto* HeroProto::release_yitianshenjue_info() {
  clear_has_yitianshenjue_info();
  ::app::message::YitianshenjueProto* temp = yitianshenjue_info_;
  yitianshenjue_info_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_yitianshenjue_info(::app::message::YitianshenjueProto* yitianshenjue_info) {
  delete yitianshenjue_info_;
  yitianshenjue_info_ = yitianshenjue_info;
  if (yitianshenjue_info) {
    set_has_yitianshenjue_info();
  } else {
    clear_has_yitianshenjue_info();
  }
}

// optional int32 daily_wheel_count = 270;
inline bool HeroProto::has_daily_wheel_count() const {
  return (_has_bits_[6] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_daily_wheel_count() {
  _has_bits_[6] |= 0x00000040u;
}
inline void HeroProto::clear_has_daily_wheel_count() {
  _has_bits_[6] &= ~0x00000040u;
}
inline void HeroProto::clear_daily_wheel_count() {
  daily_wheel_count_ = 0;
  clear_has_daily_wheel_count();
}
inline ::google::protobuf::int32 HeroProto::daily_wheel_count() const {
  return daily_wheel_count_;
}
inline void HeroProto::set_daily_wheel_count(::google::protobuf::int32 value) {
  set_has_daily_wheel_count();
  daily_wheel_count_ = value;
}

// repeated int32 finished_xin_mo_scene_id = 280;
inline int HeroProto::finished_xin_mo_scene_id_size() const {
  return finished_xin_mo_scene_id_.size();
}
inline void HeroProto::clear_finished_xin_mo_scene_id() {
  finished_xin_mo_scene_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::finished_xin_mo_scene_id(int index) const {
  return finished_xin_mo_scene_id_.Get(index);
}
inline void HeroProto::set_finished_xin_mo_scene_id(int index, ::google::protobuf::int32 value) {
  finished_xin_mo_scene_id_.Set(index, value);
}
inline void HeroProto::add_finished_xin_mo_scene_id(::google::protobuf::int32 value) {
  finished_xin_mo_scene_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::finished_xin_mo_scene_id() const {
  return finished_xin_mo_scene_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_finished_xin_mo_scene_id() {
  return &finished_xin_mo_scene_id_;
}

// repeated int64 collected_recharge_rank_promotion_prize = 299;
inline int HeroProto::collected_recharge_rank_promotion_prize_size() const {
  return collected_recharge_rank_promotion_prize_.size();
}
inline void HeroProto::clear_collected_recharge_rank_promotion_prize() {
  collected_recharge_rank_promotion_prize_.Clear();
}
inline ::google::protobuf::int64 HeroProto::collected_recharge_rank_promotion_prize(int index) const {
  return collected_recharge_rank_promotion_prize_.Get(index);
}
inline void HeroProto::set_collected_recharge_rank_promotion_prize(int index, ::google::protobuf::int64 value) {
  collected_recharge_rank_promotion_prize_.Set(index, value);
}
inline void HeroProto::add_collected_recharge_rank_promotion_prize(::google::protobuf::int64 value) {
  collected_recharge_rank_promotion_prize_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HeroProto::collected_recharge_rank_promotion_prize() const {
  return collected_recharge_rank_promotion_prize_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HeroProto::mutable_collected_recharge_rank_promotion_prize() {
  return &collected_recharge_rank_promotion_prize_;
}

// repeated int64 collected_rank_promotion_prize = 300;
inline int HeroProto::collected_rank_promotion_prize_size() const {
  return collected_rank_promotion_prize_.size();
}
inline void HeroProto::clear_collected_rank_promotion_prize() {
  collected_rank_promotion_prize_.Clear();
}
inline ::google::protobuf::int64 HeroProto::collected_rank_promotion_prize(int index) const {
  return collected_rank_promotion_prize_.Get(index);
}
inline void HeroProto::set_collected_rank_promotion_prize(int index, ::google::protobuf::int64 value) {
  collected_rank_promotion_prize_.Set(index, value);
}
inline void HeroProto::add_collected_rank_promotion_prize(::google::protobuf::int64 value) {
  collected_rank_promotion_prize_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HeroProto::collected_rank_promotion_prize() const {
  return collected_rank_promotion_prize_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HeroProto::mutable_collected_rank_promotion_prize() {
  return &collected_rank_promotion_prize_;
}

// optional int32 arena_pair_point = 301;
inline bool HeroProto::has_arena_pair_point() const {
  return (_has_bits_[6] & 0x00000400u) != 0;
}
inline void HeroProto::set_has_arena_pair_point() {
  _has_bits_[6] |= 0x00000400u;
}
inline void HeroProto::clear_has_arena_pair_point() {
  _has_bits_[6] &= ~0x00000400u;
}
inline void HeroProto::clear_arena_pair_point() {
  arena_pair_point_ = 0;
  clear_has_arena_pair_point();
}
inline ::google::protobuf::int32 HeroProto::arena_pair_point() const {
  return arena_pair_point_;
}
inline void HeroProto::set_arena_pair_point(::google::protobuf::int32 value) {
  set_has_arena_pair_point();
  arena_pair_point_ = value;
}

// optional int32 today_finished_arena_count = 302;
inline bool HeroProto::has_today_finished_arena_count() const {
  return (_has_bits_[6] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_today_finished_arena_count() {
  _has_bits_[6] |= 0x00000800u;
}
inline void HeroProto::clear_has_today_finished_arena_count() {
  _has_bits_[6] &= ~0x00000800u;
}
inline void HeroProto::clear_today_finished_arena_count() {
  today_finished_arena_count_ = 0;
  clear_has_today_finished_arena_count();
}
inline ::google::protobuf::int32 HeroProto::today_finished_arena_count() const {
  return today_finished_arena_count_;
}
inline void HeroProto::set_today_finished_arena_count(::google::protobuf::int32 value) {
  set_has_today_finished_arena_count();
  today_finished_arena_count_ = value;
}

// optional int32 arena_shop_point = 303;
inline bool HeroProto::has_arena_shop_point() const {
  return (_has_bits_[6] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_arena_shop_point() {
  _has_bits_[6] |= 0x00001000u;
}
inline void HeroProto::clear_has_arena_shop_point() {
  _has_bits_[6] &= ~0x00001000u;
}
inline void HeroProto::clear_arena_shop_point() {
  arena_shop_point_ = 0;
  clear_has_arena_shop_point();
}
inline ::google::protobuf::int32 HeroProto::arena_shop_point() const {
  return arena_shop_point_;
}
inline void HeroProto::set_arena_shop_point(::google::protobuf::int32 value) {
  set_has_arena_shop_point();
  arena_shop_point_ = value;
}

// optional int32 arena_collectable_shop_point = 304;
inline bool HeroProto::has_arena_collectable_shop_point() const {
  return (_has_bits_[6] & 0x00002000u) != 0;
}
inline void HeroProto::set_has_arena_collectable_shop_point() {
  _has_bits_[6] |= 0x00002000u;
}
inline void HeroProto::clear_has_arena_collectable_shop_point() {
  _has_bits_[6] &= ~0x00002000u;
}
inline void HeroProto::clear_arena_collectable_shop_point() {
  arena_collectable_shop_point_ = 0;
  clear_has_arena_collectable_shop_point();
}
inline ::google::protobuf::int32 HeroProto::arena_collectable_shop_point() const {
  return arena_collectable_shop_point_;
}
inline void HeroProto::set_arena_collectable_shop_point(::google::protobuf::int32 value) {
  set_has_arena_collectable_shop_point();
  arena_collectable_shop_point_ = value;
}

// optional int32 arena_yesterday_finish_count = 305;
inline bool HeroProto::has_arena_yesterday_finish_count() const {
  return (_has_bits_[6] & 0x00004000u) != 0;
}
inline void HeroProto::set_has_arena_yesterday_finish_count() {
  _has_bits_[6] |= 0x00004000u;
}
inline void HeroProto::clear_has_arena_yesterday_finish_count() {
  _has_bits_[6] &= ~0x00004000u;
}
inline void HeroProto::clear_arena_yesterday_finish_count() {
  arena_yesterday_finish_count_ = 0;
  clear_has_arena_yesterday_finish_count();
}
inline ::google::protobuf::int32 HeroProto::arena_yesterday_finish_count() const {
  return arena_yesterday_finish_count_;
}
inline void HeroProto::set_arena_yesterday_finish_count(::google::protobuf::int32 value) {
  set_has_arena_yesterday_finish_count();
  arena_yesterday_finish_count_ = value;
}

// optional int32 arena_yesterday_pair_point = 306;
inline bool HeroProto::has_arena_yesterday_pair_point() const {
  return (_has_bits_[6] & 0x00008000u) != 0;
}
inline void HeroProto::set_has_arena_yesterday_pair_point() {
  _has_bits_[6] |= 0x00008000u;
}
inline void HeroProto::clear_has_arena_yesterday_pair_point() {
  _has_bits_[6] &= ~0x00008000u;
}
inline void HeroProto::clear_arena_yesterday_pair_point() {
  arena_yesterday_pair_point_ = 0;
  clear_has_arena_yesterday_pair_point();
}
inline ::google::protobuf::int32 HeroProto::arena_yesterday_pair_point() const {
  return arena_yesterday_pair_point_;
}
inline void HeroProto::set_arena_yesterday_pair_point(::google::protobuf::int32 value) {
  set_has_arena_yesterday_pair_point();
  arena_yesterday_pair_point_ = value;
}

// optional int32 arena_yesterday_original_shop_point = 307;
inline bool HeroProto::has_arena_yesterday_original_shop_point() const {
  return (_has_bits_[6] & 0x00010000u) != 0;
}
inline void HeroProto::set_has_arena_yesterday_original_shop_point() {
  _has_bits_[6] |= 0x00010000u;
}
inline void HeroProto::clear_has_arena_yesterday_original_shop_point() {
  _has_bits_[6] &= ~0x00010000u;
}
inline void HeroProto::clear_arena_yesterday_original_shop_point() {
  arena_yesterday_original_shop_point_ = 0;
  clear_has_arena_yesterday_original_shop_point();
}
inline ::google::protobuf::int32 HeroProto::arena_yesterday_original_shop_point() const {
  return arena_yesterday_original_shop_point_;
}
inline void HeroProto::set_arena_yesterday_original_shop_point(::google::protobuf::int32 value) {
  set_has_arena_yesterday_original_shop_point();
  arena_yesterday_original_shop_point_ = value;
}

// optional int32 arena_shop_point_added_today_by_win = 308;
inline bool HeroProto::has_arena_shop_point_added_today_by_win() const {
  return (_has_bits_[6] & 0x00020000u) != 0;
}
inline void HeroProto::set_has_arena_shop_point_added_today_by_win() {
  _has_bits_[6] |= 0x00020000u;
}
inline void HeroProto::clear_has_arena_shop_point_added_today_by_win() {
  _has_bits_[6] &= ~0x00020000u;
}
inline void HeroProto::clear_arena_shop_point_added_today_by_win() {
  arena_shop_point_added_today_by_win_ = 0;
  clear_has_arena_shop_point_added_today_by_win();
}
inline ::google::protobuf::int32 HeroProto::arena_shop_point_added_today_by_win() const {
  return arena_shop_point_added_today_by_win_;
}
inline void HeroProto::set_arena_shop_point_added_today_by_win(::google::protobuf::int32 value) {
  set_has_arena_shop_point_added_today_by_win();
  arena_shop_point_added_today_by_win_ = value;
}

// optional int64 next_can_use_guild_lilian_time = 310;
inline bool HeroProto::has_next_can_use_guild_lilian_time() const {
  return (_has_bits_[6] & 0x00040000u) != 0;
}
inline void HeroProto::set_has_next_can_use_guild_lilian_time() {
  _has_bits_[6] |= 0x00040000u;
}
inline void HeroProto::clear_has_next_can_use_guild_lilian_time() {
  _has_bits_[6] &= ~0x00040000u;
}
inline void HeroProto::clear_next_can_use_guild_lilian_time() {
  next_can_use_guild_lilian_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_can_use_guild_lilian_time();
}
inline ::google::protobuf::int64 HeroProto::next_can_use_guild_lilian_time() const {
  return next_can_use_guild_lilian_time_;
}
inline void HeroProto::set_next_can_use_guild_lilian_time(::google::protobuf::int64 value) {
  set_has_next_can_use_guild_lilian_time();
  next_can_use_guild_lilian_time_ = value;
}

// optional .app.message.GuildDungeonCollectedPrizeProto guild_dungeon_collected_prize = 311;
inline bool HeroProto::has_guild_dungeon_collected_prize() const {
  return (_has_bits_[6] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_guild_dungeon_collected_prize() {
  _has_bits_[6] |= 0x00080000u;
}
inline void HeroProto::clear_has_guild_dungeon_collected_prize() {
  _has_bits_[6] &= ~0x00080000u;
}
inline void HeroProto::clear_guild_dungeon_collected_prize() {
  if (guild_dungeon_collected_prize_ != NULL) guild_dungeon_collected_prize_->::app::message::GuildDungeonCollectedPrizeProto::Clear();
  clear_has_guild_dungeon_collected_prize();
}
inline const ::app::message::GuildDungeonCollectedPrizeProto& HeroProto::guild_dungeon_collected_prize() const {
  return guild_dungeon_collected_prize_ != NULL ? *guild_dungeon_collected_prize_ : *default_instance_->guild_dungeon_collected_prize_;
}
inline ::app::message::GuildDungeonCollectedPrizeProto* HeroProto::mutable_guild_dungeon_collected_prize() {
  set_has_guild_dungeon_collected_prize();
  if (guild_dungeon_collected_prize_ == NULL) guild_dungeon_collected_prize_ = new ::app::message::GuildDungeonCollectedPrizeProto;
  return guild_dungeon_collected_prize_;
}
inline ::app::message::GuildDungeonCollectedPrizeProto* HeroProto::release_guild_dungeon_collected_prize() {
  clear_has_guild_dungeon_collected_prize();
  ::app::message::GuildDungeonCollectedPrizeProto* temp = guild_dungeon_collected_prize_;
  guild_dungeon_collected_prize_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_guild_dungeon_collected_prize(::app::message::GuildDungeonCollectedPrizeProto* guild_dungeon_collected_prize) {
  delete guild_dungeon_collected_prize_;
  guild_dungeon_collected_prize_ = guild_dungeon_collected_prize;
  if (guild_dungeon_collected_prize) {
    set_has_guild_dungeon_collected_prize();
  } else {
    clear_has_guild_dungeon_collected_prize();
  }
}

// optional .app.message.HeroSuperArmProto super_arm = 312;
inline bool HeroProto::has_super_arm() const {
  return (_has_bits_[6] & 0x00100000u) != 0;
}
inline void HeroProto::set_has_super_arm() {
  _has_bits_[6] |= 0x00100000u;
}
inline void HeroProto::clear_has_super_arm() {
  _has_bits_[6] &= ~0x00100000u;
}
inline void HeroProto::clear_super_arm() {
  if (super_arm_ != NULL) super_arm_->::app::message::HeroSuperArmProto::Clear();
  clear_has_super_arm();
}
inline const ::app::message::HeroSuperArmProto& HeroProto::super_arm() const {
  return super_arm_ != NULL ? *super_arm_ : *default_instance_->super_arm_;
}
inline ::app::message::HeroSuperArmProto* HeroProto::mutable_super_arm() {
  set_has_super_arm();
  if (super_arm_ == NULL) super_arm_ = new ::app::message::HeroSuperArmProto;
  return super_arm_;
}
inline ::app::message::HeroSuperArmProto* HeroProto::release_super_arm() {
  clear_has_super_arm();
  ::app::message::HeroSuperArmProto* temp = super_arm_;
  super_arm_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_super_arm(::app::message::HeroSuperArmProto* super_arm) {
  delete super_arm_;
  super_arm_ = super_arm;
  if (super_arm) {
    set_has_super_arm();
  } else {
    clear_has_super_arm();
  }
}

// optional .app.message.DemonProto demon = 313;
inline bool HeroProto::has_demon() const {
  return (_has_bits_[6] & 0x00200000u) != 0;
}
inline void HeroProto::set_has_demon() {
  _has_bits_[6] |= 0x00200000u;
}
inline void HeroProto::clear_has_demon() {
  _has_bits_[6] &= ~0x00200000u;
}
inline void HeroProto::clear_demon() {
  if (demon_ != NULL) demon_->::app::message::DemonProto::Clear();
  clear_has_demon();
}
inline const ::app::message::DemonProto& HeroProto::demon() const {
  return demon_ != NULL ? *demon_ : *default_instance_->demon_;
}
inline ::app::message::DemonProto* HeroProto::mutable_demon() {
  set_has_demon();
  if (demon_ == NULL) demon_ = new ::app::message::DemonProto;
  return demon_;
}
inline ::app::message::DemonProto* HeroProto::release_demon() {
  clear_has_demon();
  ::app::message::DemonProto* temp = demon_;
  demon_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_demon(::app::message::DemonProto* demon) {
  delete demon_;
  demon_ = demon;
  if (demon) {
    set_has_demon();
  } else {
    clear_has_demon();
  }
}

// optional .app.message.CloakProto cloak = 314;
inline bool HeroProto::has_cloak() const {
  return (_has_bits_[6] & 0x00400000u) != 0;
}
inline void HeroProto::set_has_cloak() {
  _has_bits_[6] |= 0x00400000u;
}
inline void HeroProto::clear_has_cloak() {
  _has_bits_[6] &= ~0x00400000u;
}
inline void HeroProto::clear_cloak() {
  if (cloak_ != NULL) cloak_->::app::message::CloakProto::Clear();
  clear_has_cloak();
}
inline const ::app::message::CloakProto& HeroProto::cloak() const {
  return cloak_ != NULL ? *cloak_ : *default_instance_->cloak_;
}
inline ::app::message::CloakProto* HeroProto::mutable_cloak() {
  set_has_cloak();
  if (cloak_ == NULL) cloak_ = new ::app::message::CloakProto;
  return cloak_;
}
inline ::app::message::CloakProto* HeroProto::release_cloak() {
  clear_has_cloak();
  ::app::message::CloakProto* temp = cloak_;
  cloak_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_cloak(::app::message::CloakProto* cloak) {
  delete cloak_;
  cloak_ = cloak;
  if (cloak) {
    set_has_cloak();
  } else {
    clear_has_cloak();
  }
}

// optional int64 pet_combine_added_life = 315;
inline bool HeroProto::has_pet_combine_added_life() const {
  return (_has_bits_[6] & 0x00800000u) != 0;
}
inline void HeroProto::set_has_pet_combine_added_life() {
  _has_bits_[6] |= 0x00800000u;
}
inline void HeroProto::clear_has_pet_combine_added_life() {
  _has_bits_[6] &= ~0x00800000u;
}
inline void HeroProto::clear_pet_combine_added_life() {
  pet_combine_added_life_ = GOOGLE_LONGLONG(0);
  clear_has_pet_combine_added_life();
}
inline ::google::protobuf::int64 HeroProto::pet_combine_added_life() const {
  return pet_combine_added_life_;
}
inline void HeroProto::set_pet_combine_added_life(::google::protobuf::int64 value) {
  set_has_pet_combine_added_life();
  pet_combine_added_life_ = value;
}

// optional int64 pet_next_can_combine_time = 316;
inline bool HeroProto::has_pet_next_can_combine_time() const {
  return (_has_bits_[6] & 0x01000000u) != 0;
}
inline void HeroProto::set_has_pet_next_can_combine_time() {
  _has_bits_[6] |= 0x01000000u;
}
inline void HeroProto::clear_has_pet_next_can_combine_time() {
  _has_bits_[6] &= ~0x01000000u;
}
inline void HeroProto::clear_pet_next_can_combine_time() {
  pet_next_can_combine_time_ = GOOGLE_LONGLONG(0);
  clear_has_pet_next_can_combine_time();
}
inline ::google::protobuf::int64 HeroProto::pet_next_can_combine_time() const {
  return pet_next_can_combine_time_;
}
inline void HeroProto::set_pet_next_can_combine_time(::google::protobuf::int64 value) {
  set_has_pet_next_can_combine_time();
  pet_next_can_combine_time_ = value;
}

// optional int32 gallup_answered_question_count = 317;
inline bool HeroProto::has_gallup_answered_question_count() const {
  return (_has_bits_[6] & 0x02000000u) != 0;
}
inline void HeroProto::set_has_gallup_answered_question_count() {
  _has_bits_[6] |= 0x02000000u;
}
inline void HeroProto::clear_has_gallup_answered_question_count() {
  _has_bits_[6] &= ~0x02000000u;
}
inline void HeroProto::clear_gallup_answered_question_count() {
  gallup_answered_question_count_ = 0;
  clear_has_gallup_answered_question_count();
}
inline ::google::protobuf::int32 HeroProto::gallup_answered_question_count() const {
  return gallup_answered_question_count_;
}
inline void HeroProto::set_gallup_answered_question_count(::google::protobuf::int32 value) {
  set_has_gallup_answered_question_count();
  gallup_answered_question_count_ = value;
}

// optional int32 gallup_today_answered_question_count = 318;
inline bool HeroProto::has_gallup_today_answered_question_count() const {
  return (_has_bits_[6] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_gallup_today_answered_question_count() {
  _has_bits_[6] |= 0x04000000u;
}
inline void HeroProto::clear_has_gallup_today_answered_question_count() {
  _has_bits_[6] &= ~0x04000000u;
}
inline void HeroProto::clear_gallup_today_answered_question_count() {
  gallup_today_answered_question_count_ = 0;
  clear_has_gallup_today_answered_question_count();
}
inline ::google::protobuf::int32 HeroProto::gallup_today_answered_question_count() const {
  return gallup_today_answered_question_count_;
}
inline void HeroProto::set_gallup_today_answered_question_count(::google::protobuf::int32 value) {
  set_has_gallup_today_answered_question_count();
  gallup_today_answered_question_count_ = value;
}

// optional .app.message.HeroMarriageProto marriage = 319;
inline bool HeroProto::has_marriage() const {
  return (_has_bits_[6] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_marriage() {
  _has_bits_[6] |= 0x08000000u;
}
inline void HeroProto::clear_has_marriage() {
  _has_bits_[6] &= ~0x08000000u;
}
inline void HeroProto::clear_marriage() {
  if (marriage_ != NULL) marriage_->::app::message::HeroMarriageProto::Clear();
  clear_has_marriage();
}
inline const ::app::message::HeroMarriageProto& HeroProto::marriage() const {
  return marriage_ != NULL ? *marriage_ : *default_instance_->marriage_;
}
inline ::app::message::HeroMarriageProto* HeroProto::mutable_marriage() {
  set_has_marriage();
  if (marriage_ == NULL) marriage_ = new ::app::message::HeroMarriageProto;
  return marriage_;
}
inline ::app::message::HeroMarriageProto* HeroProto::release_marriage() {
  clear_has_marriage();
  ::app::message::HeroMarriageProto* temp = marriage_;
  marriage_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_marriage(::app::message::HeroMarriageProto* marriage) {
  delete marriage_;
  marriage_ = marriage;
  if (marriage) {
    set_has_marriage();
  } else {
    clear_has_marriage();
  }
}

// optional int64 wash_super_weapon_bless_clear_time = 320;
inline bool HeroProto::has_wash_super_weapon_bless_clear_time() const {
  return (_has_bits_[6] & 0x10000000u) != 0;
}
inline void HeroProto::set_has_wash_super_weapon_bless_clear_time() {
  _has_bits_[6] |= 0x10000000u;
}
inline void HeroProto::clear_has_wash_super_weapon_bless_clear_time() {
  _has_bits_[6] &= ~0x10000000u;
}
inline void HeroProto::clear_wash_super_weapon_bless_clear_time() {
  wash_super_weapon_bless_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_wash_super_weapon_bless_clear_time();
}
inline ::google::protobuf::int64 HeroProto::wash_super_weapon_bless_clear_time() const {
  return wash_super_weapon_bless_clear_time_;
}
inline void HeroProto::set_wash_super_weapon_bless_clear_time(::google::protobuf::int64 value) {
  set_has_wash_super_weapon_bless_clear_time();
  wash_super_weapon_bless_clear_time_ = value;
}

// optional int32 tian_men_times = 321;
inline bool HeroProto::has_tian_men_times() const {
  return (_has_bits_[6] & 0x20000000u) != 0;
}
inline void HeroProto::set_has_tian_men_times() {
  _has_bits_[6] |= 0x20000000u;
}
inline void HeroProto::clear_has_tian_men_times() {
  _has_bits_[6] &= ~0x20000000u;
}
inline void HeroProto::clear_tian_men_times() {
  tian_men_times_ = 0;
  clear_has_tian_men_times();
}
inline ::google::protobuf::int32 HeroProto::tian_men_times() const {
  return tian_men_times_;
}
inline void HeroProto::set_tian_men_times(::google::protobuf::int32 value) {
  set_has_tian_men_times();
  tian_men_times_ = value;
}

// optional bool has_collect_guild_plant_prize = 322;
inline bool HeroProto::has_has_collect_guild_plant_prize() const {
  return (_has_bits_[6] & 0x40000000u) != 0;
}
inline void HeroProto::set_has_has_collect_guild_plant_prize() {
  _has_bits_[6] |= 0x40000000u;
}
inline void HeroProto::clear_has_has_collect_guild_plant_prize() {
  _has_bits_[6] &= ~0x40000000u;
}
inline void HeroProto::clear_has_collect_guild_plant_prize() {
  has_collect_guild_plant_prize_ = false;
  clear_has_has_collect_guild_plant_prize();
}
inline bool HeroProto::has_collect_guild_plant_prize() const {
  return has_collect_guild_plant_prize_;
}
inline void HeroProto::set_has_collect_guild_plant_prize(bool value) {
  set_has_has_collect_guild_plant_prize();
  has_collect_guild_plant_prize_ = value;
}

// optional bool hide_city_master = 323;
inline bool HeroProto::has_hide_city_master() const {
  return (_has_bits_[6] & 0x80000000u) != 0;
}
inline void HeroProto::set_has_hide_city_master() {
  _has_bits_[6] |= 0x80000000u;
}
inline void HeroProto::clear_has_hide_city_master() {
  _has_bits_[6] &= ~0x80000000u;
}
inline void HeroProto::clear_hide_city_master() {
  hide_city_master_ = false;
  clear_has_hide_city_master();
}
inline bool HeroProto::hide_city_master() const {
  return hide_city_master_;
}
inline void HeroProto::set_hide_city_master(bool value) {
  set_has_hide_city_master();
  hide_city_master_ = value;
}

// optional bool hide_long_city_master = 324;
inline bool HeroProto::has_hide_long_city_master() const {
  return (_has_bits_[7] & 0x00000001u) != 0;
}
inline void HeroProto::set_has_hide_long_city_master() {
  _has_bits_[7] |= 0x00000001u;
}
inline void HeroProto::clear_has_hide_long_city_master() {
  _has_bits_[7] &= ~0x00000001u;
}
inline void HeroProto::clear_hide_long_city_master() {
  hide_long_city_master_ = false;
  clear_has_hide_long_city_master();
}
inline bool HeroProto::hide_long_city_master() const {
  return hide_long_city_master_;
}
inline void HeroProto::set_hide_long_city_master(bool value) {
  set_has_hide_long_city_master();
  hide_long_city_master_ = value;
}

// optional int32 p37_vip_prize_count_flag = 325;
inline bool HeroProto::has_p37_vip_prize_count_flag() const {
  return (_has_bits_[7] & 0x00000002u) != 0;
}
inline void HeroProto::set_has_p37_vip_prize_count_flag() {
  _has_bits_[7] |= 0x00000002u;
}
inline void HeroProto::clear_has_p37_vip_prize_count_flag() {
  _has_bits_[7] &= ~0x00000002u;
}
inline void HeroProto::clear_p37_vip_prize_count_flag() {
  p37_vip_prize_count_flag_ = 0;
  clear_has_p37_vip_prize_count_flag();
}
inline ::google::protobuf::int32 HeroProto::p37_vip_prize_count_flag() const {
  return p37_vip_prize_count_flag_;
}
inline void HeroProto::set_p37_vip_prize_count_flag(::google::protobuf::int32 value) {
  set_has_p37_vip_prize_count_flag();
  p37_vip_prize_count_flag_ = value;
}

// optional int64 last_change_name_time = 326;
inline bool HeroProto::has_last_change_name_time() const {
  return (_has_bits_[7] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_last_change_name_time() {
  _has_bits_[7] |= 0x00000004u;
}
inline void HeroProto::clear_has_last_change_name_time() {
  _has_bits_[7] &= ~0x00000004u;
}
inline void HeroProto::clear_last_change_name_time() {
  last_change_name_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_change_name_time();
}
inline ::google::protobuf::int64 HeroProto::last_change_name_time() const {
  return last_change_name_time_;
}
inline void HeroProto::set_last_change_name_time(::google::protobuf::int64 value) {
  set_has_last_change_name_time();
  last_change_name_time_ = value;
}

// optional int64 next_can_change_race_time = 327;
inline bool HeroProto::has_next_can_change_race_time() const {
  return (_has_bits_[7] & 0x00000008u) != 0;
}
inline void HeroProto::set_has_next_can_change_race_time() {
  _has_bits_[7] |= 0x00000008u;
}
inline void HeroProto::clear_has_next_can_change_race_time() {
  _has_bits_[7] &= ~0x00000008u;
}
inline void HeroProto::clear_next_can_change_race_time() {
  next_can_change_race_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_can_change_race_time();
}
inline ::google::protobuf::int64 HeroProto::next_can_change_race_time() const {
  return next_can_change_race_time_;
}
inline void HeroProto::set_next_can_change_race_time(::google::protobuf::int64 value) {
  set_has_next_can_change_race_time();
  next_can_change_race_time_ = value;
}

// optional int32 htz_times = 328;
inline bool HeroProto::has_htz_times() const {
  return (_has_bits_[7] & 0x00000010u) != 0;
}
inline void HeroProto::set_has_htz_times() {
  _has_bits_[7] |= 0x00000010u;
}
inline void HeroProto::clear_has_htz_times() {
  _has_bits_[7] &= ~0x00000010u;
}
inline void HeroProto::clear_htz_times() {
  htz_times_ = 0;
  clear_has_htz_times();
}
inline ::google::protobuf::int32 HeroProto::htz_times() const {
  return htz_times_;
}
inline void HeroProto::set_htz_times(::google::protobuf::int32 value) {
  set_has_htz_times();
  htz_times_ = value;
}

// optional int32 htz_max_destroy_record = 329;
inline bool HeroProto::has_htz_max_destroy_record() const {
  return (_has_bits_[7] & 0x00000020u) != 0;
}
inline void HeroProto::set_has_htz_max_destroy_record() {
  _has_bits_[7] |= 0x00000020u;
}
inline void HeroProto::clear_has_htz_max_destroy_record() {
  _has_bits_[7] &= ~0x00000020u;
}
inline void HeroProto::clear_htz_max_destroy_record() {
  htz_max_destroy_record_ = 0;
  clear_has_htz_max_destroy_record();
}
inline ::google::protobuf::int32 HeroProto::htz_max_destroy_record() const {
  return htz_max_destroy_record_;
}
inline void HeroProto::set_htz_max_destroy_record(::google::protobuf::int32 value) {
  set_has_htz_max_destroy_record();
  htz_max_destroy_record_ = value;
}

// optional int32 htz_time_record = 330;
inline bool HeroProto::has_htz_time_record() const {
  return (_has_bits_[7] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_htz_time_record() {
  _has_bits_[7] |= 0x00000040u;
}
inline void HeroProto::clear_has_htz_time_record() {
  _has_bits_[7] &= ~0x00000040u;
}
inline void HeroProto::clear_htz_time_record() {
  htz_time_record_ = 0;
  clear_has_htz_time_record();
}
inline ::google::protobuf::int32 HeroProto::htz_time_record() const {
  return htz_time_record_;
}
inline void HeroProto::set_htz_time_record(::google::protobuf::int32 value) {
  set_has_htz_time_record();
  htz_time_record_ = value;
}

// repeated int32 limit_count_goods_id = 331;
inline int HeroProto::limit_count_goods_id_size() const {
  return limit_count_goods_id_.size();
}
inline void HeroProto::clear_limit_count_goods_id() {
  limit_count_goods_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::limit_count_goods_id(int index) const {
  return limit_count_goods_id_.Get(index);
}
inline void HeroProto::set_limit_count_goods_id(int index, ::google::protobuf::int32 value) {
  limit_count_goods_id_.Set(index, value);
}
inline void HeroProto::add_limit_count_goods_id(::google::protobuf::int32 value) {
  limit_count_goods_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::limit_count_goods_id() const {
  return limit_count_goods_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_limit_count_goods_id() {
  return &limit_count_goods_id_;
}

// repeated int32 limit_count_goods_use_times = 332;
inline int HeroProto::limit_count_goods_use_times_size() const {
  return limit_count_goods_use_times_.size();
}
inline void HeroProto::clear_limit_count_goods_use_times() {
  limit_count_goods_use_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::limit_count_goods_use_times(int index) const {
  return limit_count_goods_use_times_.Get(index);
}
inline void HeroProto::set_limit_count_goods_use_times(int index, ::google::protobuf::int32 value) {
  limit_count_goods_use_times_.Set(index, value);
}
inline void HeroProto::add_limit_count_goods_use_times(::google::protobuf::int32 value) {
  limit_count_goods_use_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::limit_count_goods_use_times() const {
  return limit_count_goods_use_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_limit_count_goods_use_times() {
  return &limit_count_goods_use_times_;
}

// repeated int64 single_wash_super_weapon_bless_clear_time = 335;
inline int HeroProto::single_wash_super_weapon_bless_clear_time_size() const {
  return single_wash_super_weapon_bless_clear_time_.size();
}
inline void HeroProto::clear_single_wash_super_weapon_bless_clear_time() {
  single_wash_super_weapon_bless_clear_time_.Clear();
}
inline ::google::protobuf::int64 HeroProto::single_wash_super_weapon_bless_clear_time(int index) const {
  return single_wash_super_weapon_bless_clear_time_.Get(index);
}
inline void HeroProto::set_single_wash_super_weapon_bless_clear_time(int index, ::google::protobuf::int64 value) {
  single_wash_super_weapon_bless_clear_time_.Set(index, value);
}
inline void HeroProto::add_single_wash_super_weapon_bless_clear_time(::google::protobuf::int64 value) {
  single_wash_super_weapon_bless_clear_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HeroProto::single_wash_super_weapon_bless_clear_time() const {
  return single_wash_super_weapon_bless_clear_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HeroProto::mutable_single_wash_super_weapon_bless_clear_time() {
  return &single_wash_super_weapon_bless_clear_time_;
}

// repeated int32 single_wash_super_weapon_bless_type = 336;
inline int HeroProto::single_wash_super_weapon_bless_type_size() const {
  return single_wash_super_weapon_bless_type_.size();
}
inline void HeroProto::clear_single_wash_super_weapon_bless_type() {
  single_wash_super_weapon_bless_type_.Clear();
}
inline ::google::protobuf::int32 HeroProto::single_wash_super_weapon_bless_type(int index) const {
  return single_wash_super_weapon_bless_type_.Get(index);
}
inline void HeroProto::set_single_wash_super_weapon_bless_type(int index, ::google::protobuf::int32 value) {
  single_wash_super_weapon_bless_type_.Set(index, value);
}
inline void HeroProto::add_single_wash_super_weapon_bless_type(::google::protobuf::int32 value) {
  single_wash_super_weapon_bless_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::single_wash_super_weapon_bless_type() const {
  return single_wash_super_weapon_bless_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_single_wash_super_weapon_bless_type() {
  return &single_wash_super_weapon_bless_type_;
}

// optional bytes arena_fighting_team_name_bytes = 337;
inline bool HeroProto::has_arena_fighting_team_name_bytes() const {
  return (_has_bits_[7] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_arena_fighting_team_name_bytes() {
  _has_bits_[7] |= 0x00000800u;
}
inline void HeroProto::clear_has_arena_fighting_team_name_bytes() {
  _has_bits_[7] &= ~0x00000800u;
}
inline void HeroProto::clear_arena_fighting_team_name_bytes() {
  if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_->clear();
  }
  clear_has_arena_fighting_team_name_bytes();
}
inline const ::std::string& HeroProto::arena_fighting_team_name_bytes() const {
  return *arena_fighting_team_name_bytes_;
}
inline void HeroProto::set_arena_fighting_team_name_bytes(const ::std::string& value) {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  arena_fighting_team_name_bytes_->assign(value);
}
inline void HeroProto::set_arena_fighting_team_name_bytes(const char* value) {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  arena_fighting_team_name_bytes_->assign(value);
}
inline void HeroProto::set_arena_fighting_team_name_bytes(const void* value, size_t size) {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  arena_fighting_team_name_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroProto::mutable_arena_fighting_team_name_bytes() {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  return arena_fighting_team_name_bytes_;
}
inline ::std::string* HeroProto::release_arena_fighting_team_name_bytes() {
  clear_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arena_fighting_team_name_bytes_;
    arena_fighting_team_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeroProto::set_allocated_arena_fighting_team_name_bytes(::std::string* arena_fighting_team_name_bytes) {
  if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete arena_fighting_team_name_bytes_;
  }
  if (arena_fighting_team_name_bytes) {
    set_has_arena_fighting_team_name_bytes();
    arena_fighting_team_name_bytes_ = arena_fighting_team_name_bytes;
  } else {
    clear_has_arena_fighting_team_name_bytes();
    arena_fighting_team_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 arena_fighting_team_shop_point = 338;
inline bool HeroProto::has_arena_fighting_team_shop_point() const {
  return (_has_bits_[7] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_arena_fighting_team_shop_point() {
  _has_bits_[7] |= 0x00001000u;
}
inline void HeroProto::clear_has_arena_fighting_team_shop_point() {
  _has_bits_[7] &= ~0x00001000u;
}
inline void HeroProto::clear_arena_fighting_team_shop_point() {
  arena_fighting_team_shop_point_ = 0;
  clear_has_arena_fighting_team_shop_point();
}
inline ::google::protobuf::int32 HeroProto::arena_fighting_team_shop_point() const {
  return arena_fighting_team_shop_point_;
}
inline void HeroProto::set_arena_fighting_team_shop_point(::google::protobuf::int32 value) {
  set_has_arena_fighting_team_shop_point();
  arena_fighting_team_shop_point_ = value;
}

// optional int32 arena_fighting_team_shop_point_added_today_by_win = 339;
inline bool HeroProto::has_arena_fighting_team_shop_point_added_today_by_win() const {
  return (_has_bits_[7] & 0x00002000u) != 0;
}
inline void HeroProto::set_has_arena_fighting_team_shop_point_added_today_by_win() {
  _has_bits_[7] |= 0x00002000u;
}
inline void HeroProto::clear_has_arena_fighting_team_shop_point_added_today_by_win() {
  _has_bits_[7] &= ~0x00002000u;
}
inline void HeroProto::clear_arena_fighting_team_shop_point_added_today_by_win() {
  arena_fighting_team_shop_point_added_today_by_win_ = 0;
  clear_has_arena_fighting_team_shop_point_added_today_by_win();
}
inline ::google::protobuf::int32 HeroProto::arena_fighting_team_shop_point_added_today_by_win() const {
  return arena_fighting_team_shop_point_added_today_by_win_;
}
inline void HeroProto::set_arena_fighting_team_shop_point_added_today_by_win(::google::protobuf::int32 value) {
  set_has_arena_fighting_team_shop_point_added_today_by_win();
  arena_fighting_team_shop_point_added_today_by_win_ = value;
}

// optional .app.message.MoBingProto mo_bing_proto = 342;
inline bool HeroProto::has_mo_bing_proto() const {
  return (_has_bits_[7] & 0x00004000u) != 0;
}
inline void HeroProto::set_has_mo_bing_proto() {
  _has_bits_[7] |= 0x00004000u;
}
inline void HeroProto::clear_has_mo_bing_proto() {
  _has_bits_[7] &= ~0x00004000u;
}
inline void HeroProto::clear_mo_bing_proto() {
  if (mo_bing_proto_ != NULL) mo_bing_proto_->::app::message::MoBingProto::Clear();
  clear_has_mo_bing_proto();
}
inline const ::app::message::MoBingProto& HeroProto::mo_bing_proto() const {
  return mo_bing_proto_ != NULL ? *mo_bing_proto_ : *default_instance_->mo_bing_proto_;
}
inline ::app::message::MoBingProto* HeroProto::mutable_mo_bing_proto() {
  set_has_mo_bing_proto();
  if (mo_bing_proto_ == NULL) mo_bing_proto_ = new ::app::message::MoBingProto;
  return mo_bing_proto_;
}
inline ::app::message::MoBingProto* HeroProto::release_mo_bing_proto() {
  clear_has_mo_bing_proto();
  ::app::message::MoBingProto* temp = mo_bing_proto_;
  mo_bing_proto_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_mo_bing_proto(::app::message::MoBingProto* mo_bing_proto) {
  delete mo_bing_proto_;
  mo_bing_proto_ = mo_bing_proto;
  if (mo_bing_proto) {
    set_has_mo_bing_proto();
  } else {
    clear_has_mo_bing_proto();
  }
}

// optional int32 use_mount_tongling_id = 343;
inline bool HeroProto::has_use_mount_tongling_id() const {
  return (_has_bits_[7] & 0x00008000u) != 0;
}
inline void HeroProto::set_has_use_mount_tongling_id() {
  _has_bits_[7] |= 0x00008000u;
}
inline void HeroProto::clear_has_use_mount_tongling_id() {
  _has_bits_[7] &= ~0x00008000u;
}
inline void HeroProto::clear_use_mount_tongling_id() {
  use_mount_tongling_id_ = 0;
  clear_has_use_mount_tongling_id();
}
inline ::google::protobuf::int32 HeroProto::use_mount_tongling_id() const {
  return use_mount_tongling_id_;
}
inline void HeroProto::set_use_mount_tongling_id(::google::protobuf::int32 value) {
  set_has_use_mount_tongling_id();
  use_mount_tongling_id_ = value;
}

// repeated int32 active_mount_tongling_ids = 344;
inline int HeroProto::active_mount_tongling_ids_size() const {
  return active_mount_tongling_ids_.size();
}
inline void HeroProto::clear_active_mount_tongling_ids() {
  active_mount_tongling_ids_.Clear();
}
inline ::google::protobuf::int32 HeroProto::active_mount_tongling_ids(int index) const {
  return active_mount_tongling_ids_.Get(index);
}
inline void HeroProto::set_active_mount_tongling_ids(int index, ::google::protobuf::int32 value) {
  active_mount_tongling_ids_.Set(index, value);
}
inline void HeroProto::add_active_mount_tongling_ids(::google::protobuf::int32 value) {
  active_mount_tongling_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::active_mount_tongling_ids() const {
  return active_mount_tongling_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_active_mount_tongling_ids() {
  return &active_mount_tongling_ids_;
}

// optional int64 change_use_mount_tongling_id_cd_time = 345;
inline bool HeroProto::has_change_use_mount_tongling_id_cd_time() const {
  return (_has_bits_[7] & 0x00020000u) != 0;
}
inline void HeroProto::set_has_change_use_mount_tongling_id_cd_time() {
  _has_bits_[7] |= 0x00020000u;
}
inline void HeroProto::clear_has_change_use_mount_tongling_id_cd_time() {
  _has_bits_[7] &= ~0x00020000u;
}
inline void HeroProto::clear_change_use_mount_tongling_id_cd_time() {
  change_use_mount_tongling_id_cd_time_ = GOOGLE_LONGLONG(0);
  clear_has_change_use_mount_tongling_id_cd_time();
}
inline ::google::protobuf::int64 HeroProto::change_use_mount_tongling_id_cd_time() const {
  return change_use_mount_tongling_id_cd_time_;
}
inline void HeroProto::set_change_use_mount_tongling_id_cd_time(::google::protobuf::int64 value) {
  set_has_change_use_mount_tongling_id_cd_time();
  change_use_mount_tongling_id_cd_time_ = value;
}

// repeated int32 mount_tongling_wake_value = 357;
inline int HeroProto::mount_tongling_wake_value_size() const {
  return mount_tongling_wake_value_.size();
}
inline void HeroProto::clear_mount_tongling_wake_value() {
  mount_tongling_wake_value_.Clear();
}
inline ::google::protobuf::int32 HeroProto::mount_tongling_wake_value(int index) const {
  return mount_tongling_wake_value_.Get(index);
}
inline void HeroProto::set_mount_tongling_wake_value(int index, ::google::protobuf::int32 value) {
  mount_tongling_wake_value_.Set(index, value);
}
inline void HeroProto::add_mount_tongling_wake_value(::google::protobuf::int32 value) {
  mount_tongling_wake_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::mount_tongling_wake_value() const {
  return mount_tongling_wake_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_mount_tongling_wake_value() {
  return &mount_tongling_wake_value_;
}

// repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat1 = 346;
inline int HeroProto::not_save_xun_zhang_random_stat1_size() const {
  return not_save_xun_zhang_random_stat1_.size();
}
inline void HeroProto::clear_not_save_xun_zhang_random_stat1() {
  not_save_xun_zhang_random_stat1_.Clear();
}
inline const ::app::message::SingleStatProto& HeroProto::not_save_xun_zhang_random_stat1(int index) const {
  return not_save_xun_zhang_random_stat1_.Get(index);
}
inline ::app::message::SingleStatProto* HeroProto::mutable_not_save_xun_zhang_random_stat1(int index) {
  return not_save_xun_zhang_random_stat1_.Mutable(index);
}
inline ::app::message::SingleStatProto* HeroProto::add_not_save_xun_zhang_random_stat1() {
  return not_save_xun_zhang_random_stat1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
HeroProto::not_save_xun_zhang_random_stat1() const {
  return not_save_xun_zhang_random_stat1_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
HeroProto::mutable_not_save_xun_zhang_random_stat1() {
  return &not_save_xun_zhang_random_stat1_;
}

// repeated .app.message.SingleStatProto not_save_xun_zhang_random_stat2 = 347;
inline int HeroProto::not_save_xun_zhang_random_stat2_size() const {
  return not_save_xun_zhang_random_stat2_.size();
}
inline void HeroProto::clear_not_save_xun_zhang_random_stat2() {
  not_save_xun_zhang_random_stat2_.Clear();
}
inline const ::app::message::SingleStatProto& HeroProto::not_save_xun_zhang_random_stat2(int index) const {
  return not_save_xun_zhang_random_stat2_.Get(index);
}
inline ::app::message::SingleStatProto* HeroProto::mutable_not_save_xun_zhang_random_stat2(int index) {
  return not_save_xun_zhang_random_stat2_.Mutable(index);
}
inline ::app::message::SingleStatProto* HeroProto::add_not_save_xun_zhang_random_stat2() {
  return not_save_xun_zhang_random_stat2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
HeroProto::not_save_xun_zhang_random_stat2() const {
  return not_save_xun_zhang_random_stat2_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
HeroProto::mutable_not_save_xun_zhang_random_stat2() {
  return &not_save_xun_zhang_random_stat2_;
}

// optional bool finished_collected_fight_amout_changed_value_rank_daily_prize = 348;
inline bool HeroProto::has_finished_collected_fight_amout_changed_value_rank_daily_prize() const {
  return (_has_bits_[7] & 0x00200000u) != 0;
}
inline void HeroProto::set_has_finished_collected_fight_amout_changed_value_rank_daily_prize() {
  _has_bits_[7] |= 0x00200000u;
}
inline void HeroProto::clear_has_finished_collected_fight_amout_changed_value_rank_daily_prize() {
  _has_bits_[7] &= ~0x00200000u;
}
inline void HeroProto::clear_finished_collected_fight_amout_changed_value_rank_daily_prize() {
  finished_collected_fight_amout_changed_value_rank_daily_prize_ = false;
  clear_has_finished_collected_fight_amout_changed_value_rank_daily_prize();
}
inline bool HeroProto::finished_collected_fight_amout_changed_value_rank_daily_prize() const {
  return finished_collected_fight_amout_changed_value_rank_daily_prize_;
}
inline void HeroProto::set_finished_collected_fight_amout_changed_value_rank_daily_prize(bool value) {
  set_has_finished_collected_fight_amout_changed_value_rank_daily_prize();
  finished_collected_fight_amout_changed_value_rank_daily_prize_ = value;
}

// repeated int32 finished_yy_purple_dungeon_count = 349;
inline int HeroProto::finished_yy_purple_dungeon_count_size() const {
  return finished_yy_purple_dungeon_count_.size();
}
inline void HeroProto::clear_finished_yy_purple_dungeon_count() {
  finished_yy_purple_dungeon_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::finished_yy_purple_dungeon_count(int index) const {
  return finished_yy_purple_dungeon_count_.Get(index);
}
inline void HeroProto::set_finished_yy_purple_dungeon_count(int index, ::google::protobuf::int32 value) {
  finished_yy_purple_dungeon_count_.Set(index, value);
}
inline void HeroProto::add_finished_yy_purple_dungeon_count(::google::protobuf::int32 value) {
  finished_yy_purple_dungeon_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::finished_yy_purple_dungeon_count() const {
  return finished_yy_purple_dungeon_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_finished_yy_purple_dungeon_count() {
  return &finished_yy_purple_dungeon_count_;
}

// repeated int32 he_cheng_goods_id = 353;
inline int HeroProto::he_cheng_goods_id_size() const {
  return he_cheng_goods_id_.size();
}
inline void HeroProto::clear_he_cheng_goods_id() {
  he_cheng_goods_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::he_cheng_goods_id(int index) const {
  return he_cheng_goods_id_.Get(index);
}
inline void HeroProto::set_he_cheng_goods_id(int index, ::google::protobuf::int32 value) {
  he_cheng_goods_id_.Set(index, value);
}
inline void HeroProto::add_he_cheng_goods_id(::google::protobuf::int32 value) {
  he_cheng_goods_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::he_cheng_goods_id() const {
  return he_cheng_goods_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_he_cheng_goods_id() {
  return &he_cheng_goods_id_;
}

// repeated int32 he_cheng_goods_count = 354;
inline int HeroProto::he_cheng_goods_count_size() const {
  return he_cheng_goods_count_.size();
}
inline void HeroProto::clear_he_cheng_goods_count() {
  he_cheng_goods_count_.Clear();
}
inline ::google::protobuf::int32 HeroProto::he_cheng_goods_count(int index) const {
  return he_cheng_goods_count_.Get(index);
}
inline void HeroProto::set_he_cheng_goods_count(int index, ::google::protobuf::int32 value) {
  he_cheng_goods_count_.Set(index, value);
}
inline void HeroProto::add_he_cheng_goods_count(::google::protobuf::int32 value) {
  he_cheng_goods_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::he_cheng_goods_count() const {
  return he_cheng_goods_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_he_cheng_goods_count() {
  return &he_cheng_goods_count_;
}

// optional int32 christmas_storage_goods_count = 355;
inline bool HeroProto::has_christmas_storage_goods_count() const {
  return (_has_bits_[7] & 0x02000000u) != 0;
}
inline void HeroProto::set_has_christmas_storage_goods_count() {
  _has_bits_[7] |= 0x02000000u;
}
inline void HeroProto::clear_has_christmas_storage_goods_count() {
  _has_bits_[7] &= ~0x02000000u;
}
inline void HeroProto::clear_christmas_storage_goods_count() {
  christmas_storage_goods_count_ = 0;
  clear_has_christmas_storage_goods_count();
}
inline ::google::protobuf::int32 HeroProto::christmas_storage_goods_count() const {
  return christmas_storage_goods_count_;
}
inline void HeroProto::set_christmas_storage_goods_count(::google::protobuf::int32 value) {
  set_has_christmas_storage_goods_count();
  christmas_storage_goods_count_ = value;
}

// optional int32 credits = 356;
inline bool HeroProto::has_credits() const {
  return (_has_bits_[7] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_credits() {
  _has_bits_[7] |= 0x04000000u;
}
inline void HeroProto::clear_has_credits() {
  _has_bits_[7] &= ~0x04000000u;
}
inline void HeroProto::clear_credits() {
  credits_ = 0;
  clear_has_credits();
}
inline ::google::protobuf::int32 HeroProto::credits() const {
  return credits_;
}
inline void HeroProto::set_credits(::google::protobuf::int32 value) {
  set_has_credits();
  credits_ = value;
}

// optional int32 monopoly_now_cell_id = 358;
inline bool HeroProto::has_monopoly_now_cell_id() const {
  return (_has_bits_[7] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_monopoly_now_cell_id() {
  _has_bits_[7] |= 0x08000000u;
}
inline void HeroProto::clear_has_monopoly_now_cell_id() {
  _has_bits_[7] &= ~0x08000000u;
}
inline void HeroProto::clear_monopoly_now_cell_id() {
  monopoly_now_cell_id_ = 0;
  clear_has_monopoly_now_cell_id();
}
inline ::google::protobuf::int32 HeroProto::monopoly_now_cell_id() const {
  return monopoly_now_cell_id_;
}
inline void HeroProto::set_monopoly_now_cell_id(::google::protobuf::int32 value) {
  set_has_monopoly_now_cell_id();
  monopoly_now_cell_id_ = value;
}

// optional int32 monopoly_now_roll_times_cost = 359;
inline bool HeroProto::has_monopoly_now_roll_times_cost() const {
  return (_has_bits_[7] & 0x10000000u) != 0;
}
inline void HeroProto::set_has_monopoly_now_roll_times_cost() {
  _has_bits_[7] |= 0x10000000u;
}
inline void HeroProto::clear_has_monopoly_now_roll_times_cost() {
  _has_bits_[7] &= ~0x10000000u;
}
inline void HeroProto::clear_monopoly_now_roll_times_cost() {
  monopoly_now_roll_times_cost_ = 0;
  clear_has_monopoly_now_roll_times_cost();
}
inline ::google::protobuf::int32 HeroProto::monopoly_now_roll_times_cost() const {
  return monopoly_now_roll_times_cost_;
}
inline void HeroProto::set_monopoly_now_roll_times_cost(::google::protobuf::int32 value) {
  set_has_monopoly_now_roll_times_cost();
  monopoly_now_roll_times_cost_ = value;
}

// optional int32 monopoly_roll_times = 360;
inline bool HeroProto::has_monopoly_roll_times() const {
  return (_has_bits_[7] & 0x20000000u) != 0;
}
inline void HeroProto::set_has_monopoly_roll_times() {
  _has_bits_[7] |= 0x20000000u;
}
inline void HeroProto::clear_has_monopoly_roll_times() {
  _has_bits_[7] &= ~0x20000000u;
}
inline void HeroProto::clear_monopoly_roll_times() {
  monopoly_roll_times_ = 0;
  clear_has_monopoly_roll_times();
}
inline ::google::protobuf::int32 HeroProto::monopoly_roll_times() const {
  return monopoly_roll_times_;
}
inline void HeroProto::set_monopoly_roll_times(::google::protobuf::int32 value) {
  set_has_monopoly_roll_times();
  monopoly_roll_times_ = value;
}

// optional int32 monopoly_buy_roll_times = 361;
inline bool HeroProto::has_monopoly_buy_roll_times() const {
  return (_has_bits_[7] & 0x40000000u) != 0;
}
inline void HeroProto::set_has_monopoly_buy_roll_times() {
  _has_bits_[7] |= 0x40000000u;
}
inline void HeroProto::clear_has_monopoly_buy_roll_times() {
  _has_bits_[7] &= ~0x40000000u;
}
inline void HeroProto::clear_monopoly_buy_roll_times() {
  monopoly_buy_roll_times_ = 0;
  clear_has_monopoly_buy_roll_times();
}
inline ::google::protobuf::int32 HeroProto::monopoly_buy_roll_times() const {
  return monopoly_buy_roll_times_;
}
inline void HeroProto::set_monopoly_buy_roll_times(::google::protobuf::int32 value) {
  set_has_monopoly_buy_roll_times();
  monopoly_buy_roll_times_ = value;
}

// optional int32 credits_draw_storage_goods_count = 362;
inline bool HeroProto::has_credits_draw_storage_goods_count() const {
  return (_has_bits_[7] & 0x80000000u) != 0;
}
inline void HeroProto::set_has_credits_draw_storage_goods_count() {
  _has_bits_[7] |= 0x80000000u;
}
inline void HeroProto::clear_has_credits_draw_storage_goods_count() {
  _has_bits_[7] &= ~0x80000000u;
}
inline void HeroProto::clear_credits_draw_storage_goods_count() {
  credits_draw_storage_goods_count_ = 0;
  clear_has_credits_draw_storage_goods_count();
}
inline ::google::protobuf::int32 HeroProto::credits_draw_storage_goods_count() const {
  return credits_draw_storage_goods_count_;
}
inline void HeroProto::set_credits_draw_storage_goods_count(::google::protobuf::int32 value) {
  set_has_credits_draw_storage_goods_count();
  credits_draw_storage_goods_count_ = value;
}

// optional .app.message.HeroLoveProto love = 363;
inline bool HeroProto::has_love() const {
  return (_has_bits_[8] & 0x00000001u) != 0;
}
inline void HeroProto::set_has_love() {
  _has_bits_[8] |= 0x00000001u;
}
inline void HeroProto::clear_has_love() {
  _has_bits_[8] &= ~0x00000001u;
}
inline void HeroProto::clear_love() {
  if (love_ != NULL) love_->::app::message::HeroLoveProto::Clear();
  clear_has_love();
}
inline const ::app::message::HeroLoveProto& HeroProto::love() const {
  return love_ != NULL ? *love_ : *default_instance_->love_;
}
inline ::app::message::HeroLoveProto* HeroProto::mutable_love() {
  set_has_love();
  if (love_ == NULL) love_ = new ::app::message::HeroLoveProto;
  return love_;
}
inline ::app::message::HeroLoveProto* HeroProto::release_love() {
  clear_has_love();
  ::app::message::HeroLoveProto* temp = love_;
  love_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_love(::app::message::HeroLoveProto* love) {
  delete love_;
  love_ = love;
  if (love) {
    set_has_love();
  } else {
    clear_has_love();
  }
}

// optional .app.message.WuDaoProto wu_dao = 364;
inline bool HeroProto::has_wu_dao() const {
  return (_has_bits_[8] & 0x00000002u) != 0;
}
inline void HeroProto::set_has_wu_dao() {
  _has_bits_[8] |= 0x00000002u;
}
inline void HeroProto::clear_has_wu_dao() {
  _has_bits_[8] &= ~0x00000002u;
}
inline void HeroProto::clear_wu_dao() {
  if (wu_dao_ != NULL) wu_dao_->::app::message::WuDaoProto::Clear();
  clear_has_wu_dao();
}
inline const ::app::message::WuDaoProto& HeroProto::wu_dao() const {
  return wu_dao_ != NULL ? *wu_dao_ : *default_instance_->wu_dao_;
}
inline ::app::message::WuDaoProto* HeroProto::mutable_wu_dao() {
  set_has_wu_dao();
  if (wu_dao_ == NULL) wu_dao_ = new ::app::message::WuDaoProto;
  return wu_dao_;
}
inline ::app::message::WuDaoProto* HeroProto::release_wu_dao() {
  clear_has_wu_dao();
  ::app::message::WuDaoProto* temp = wu_dao_;
  wu_dao_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_wu_dao(::app::message::WuDaoProto* wu_dao) {
  delete wu_dao_;
  wu_dao_ = wu_dao;
  if (wu_dao) {
    set_has_wu_dao();
  } else {
    clear_has_wu_dao();
  }
}

// optional .app.message.NiDaoQianKunClient ni_dao_qian_kun = 365;
inline bool HeroProto::has_ni_dao_qian_kun() const {
  return (_has_bits_[8] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_ni_dao_qian_kun() {
  _has_bits_[8] |= 0x00000004u;
}
inline void HeroProto::clear_has_ni_dao_qian_kun() {
  _has_bits_[8] &= ~0x00000004u;
}
inline void HeroProto::clear_ni_dao_qian_kun() {
  if (ni_dao_qian_kun_ != NULL) ni_dao_qian_kun_->::app::message::NiDaoQianKunClient::Clear();
  clear_has_ni_dao_qian_kun();
}
inline const ::app::message::NiDaoQianKunClient& HeroProto::ni_dao_qian_kun() const {
  return ni_dao_qian_kun_ != NULL ? *ni_dao_qian_kun_ : *default_instance_->ni_dao_qian_kun_;
}
inline ::app::message::NiDaoQianKunClient* HeroProto::mutable_ni_dao_qian_kun() {
  set_has_ni_dao_qian_kun();
  if (ni_dao_qian_kun_ == NULL) ni_dao_qian_kun_ = new ::app::message::NiDaoQianKunClient;
  return ni_dao_qian_kun_;
}
inline ::app::message::NiDaoQianKunClient* HeroProto::release_ni_dao_qian_kun() {
  clear_has_ni_dao_qian_kun();
  ::app::message::NiDaoQianKunClient* temp = ni_dao_qian_kun_;
  ni_dao_qian_kun_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_ni_dao_qian_kun(::app::message::NiDaoQianKunClient* ni_dao_qian_kun) {
  delete ni_dao_qian_kun_;
  ni_dao_qian_kun_ = ni_dao_qian_kun;
  if (ni_dao_qian_kun) {
    set_has_ni_dao_qian_kun();
  } else {
    clear_has_ni_dao_qian_kun();
  }
}

// optional int32 finished_tong_tian_ta_dungeon_sequence = 366;
inline bool HeroProto::has_finished_tong_tian_ta_dungeon_sequence() const {
  return (_has_bits_[8] & 0x00000008u) != 0;
}
inline void HeroProto::set_has_finished_tong_tian_ta_dungeon_sequence() {
  _has_bits_[8] |= 0x00000008u;
}
inline void HeroProto::clear_has_finished_tong_tian_ta_dungeon_sequence() {
  _has_bits_[8] &= ~0x00000008u;
}
inline void HeroProto::clear_finished_tong_tian_ta_dungeon_sequence() {
  finished_tong_tian_ta_dungeon_sequence_ = 0;
  clear_has_finished_tong_tian_ta_dungeon_sequence();
}
inline ::google::protobuf::int32 HeroProto::finished_tong_tian_ta_dungeon_sequence() const {
  return finished_tong_tian_ta_dungeon_sequence_;
}
inline void HeroProto::set_finished_tong_tian_ta_dungeon_sequence(::google::protobuf::int32 value) {
  set_has_finished_tong_tian_ta_dungeon_sequence();
  finished_tong_tian_ta_dungeon_sequence_ = value;
}

// optional int32 tong_tian_ta_dungeon_daily_times = 367;
inline bool HeroProto::has_tong_tian_ta_dungeon_daily_times() const {
  return (_has_bits_[8] & 0x00000010u) != 0;
}
inline void HeroProto::set_has_tong_tian_ta_dungeon_daily_times() {
  _has_bits_[8] |= 0x00000010u;
}
inline void HeroProto::clear_has_tong_tian_ta_dungeon_daily_times() {
  _has_bits_[8] &= ~0x00000010u;
}
inline void HeroProto::clear_tong_tian_ta_dungeon_daily_times() {
  tong_tian_ta_dungeon_daily_times_ = 0;
  clear_has_tong_tian_ta_dungeon_daily_times();
}
inline ::google::protobuf::int32 HeroProto::tong_tian_ta_dungeon_daily_times() const {
  return tong_tian_ta_dungeon_daily_times_;
}
inline void HeroProto::set_tong_tian_ta_dungeon_daily_times(::google::protobuf::int32 value) {
  set_has_tong_tian_ta_dungeon_daily_times();
  tong_tian_ta_dungeon_daily_times_ = value;
}

// repeated int32 tong_tian_ta_dungeon_use_times = 368;
inline int HeroProto::tong_tian_ta_dungeon_use_times_size() const {
  return tong_tian_ta_dungeon_use_times_.size();
}
inline void HeroProto::clear_tong_tian_ta_dungeon_use_times() {
  tong_tian_ta_dungeon_use_times_.Clear();
}
inline ::google::protobuf::int32 HeroProto::tong_tian_ta_dungeon_use_times(int index) const {
  return tong_tian_ta_dungeon_use_times_.Get(index);
}
inline void HeroProto::set_tong_tian_ta_dungeon_use_times(int index, ::google::protobuf::int32 value) {
  tong_tian_ta_dungeon_use_times_.Set(index, value);
}
inline void HeroProto::add_tong_tian_ta_dungeon_use_times(::google::protobuf::int32 value) {
  tong_tian_ta_dungeon_use_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::tong_tian_ta_dungeon_use_times() const {
  return tong_tian_ta_dungeon_use_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_tong_tian_ta_dungeon_use_times() {
  return &tong_tian_ta_dungeon_use_times_;
}

// optional int32 tong_tian_ta_dungeon_refresh_times = 369;
inline bool HeroProto::has_tong_tian_ta_dungeon_refresh_times() const {
  return (_has_bits_[8] & 0x00000040u) != 0;
}
inline void HeroProto::set_has_tong_tian_ta_dungeon_refresh_times() {
  _has_bits_[8] |= 0x00000040u;
}
inline void HeroProto::clear_has_tong_tian_ta_dungeon_refresh_times() {
  _has_bits_[8] &= ~0x00000040u;
}
inline void HeroProto::clear_tong_tian_ta_dungeon_refresh_times() {
  tong_tian_ta_dungeon_refresh_times_ = 0;
  clear_has_tong_tian_ta_dungeon_refresh_times();
}
inline ::google::protobuf::int32 HeroProto::tong_tian_ta_dungeon_refresh_times() const {
  return tong_tian_ta_dungeon_refresh_times_;
}
inline void HeroProto::set_tong_tian_ta_dungeon_refresh_times(::google::protobuf::int32 value) {
  set_has_tong_tian_ta_dungeon_refresh_times();
  tong_tian_ta_dungeon_refresh_times_ = value;
}

// optional .app.message.HeroAnniversaryProto anniversary = 370;
inline bool HeroProto::has_anniversary() const {
  return (_has_bits_[8] & 0x00000080u) != 0;
}
inline void HeroProto::set_has_anniversary() {
  _has_bits_[8] |= 0x00000080u;
}
inline void HeroProto::clear_has_anniversary() {
  _has_bits_[8] &= ~0x00000080u;
}
inline void HeroProto::clear_anniversary() {
  if (anniversary_ != NULL) anniversary_->::app::message::HeroAnniversaryProto::Clear();
  clear_has_anniversary();
}
inline const ::app::message::HeroAnniversaryProto& HeroProto::anniversary() const {
  return anniversary_ != NULL ? *anniversary_ : *default_instance_->anniversary_;
}
inline ::app::message::HeroAnniversaryProto* HeroProto::mutable_anniversary() {
  set_has_anniversary();
  if (anniversary_ == NULL) anniversary_ = new ::app::message::HeroAnniversaryProto;
  return anniversary_;
}
inline ::app::message::HeroAnniversaryProto* HeroProto::release_anniversary() {
  clear_has_anniversary();
  ::app::message::HeroAnniversaryProto* temp = anniversary_;
  anniversary_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_anniversary(::app::message::HeroAnniversaryProto* anniversary) {
  delete anniversary_;
  anniversary_ = anniversary;
  if (anniversary) {
    set_has_anniversary();
  } else {
    clear_has_anniversary();
  }
}

// repeated int32 firework_color_values = 371;
inline int HeroProto::firework_color_values_size() const {
  return firework_color_values_.size();
}
inline void HeroProto::clear_firework_color_values() {
  firework_color_values_.Clear();
}
inline ::google::protobuf::int32 HeroProto::firework_color_values(int index) const {
  return firework_color_values_.Get(index);
}
inline void HeroProto::set_firework_color_values(int index, ::google::protobuf::int32 value) {
  firework_color_values_.Set(index, value);
}
inline void HeroProto::add_firework_color_values(::google::protobuf::int32 value) {
  firework_color_values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::firework_color_values() const {
  return firework_color_values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_firework_color_values() {
  return &firework_color_values_;
}

// optional int64 firework_promotion_start_time = 372;
inline bool HeroProto::has_firework_promotion_start_time() const {
  return (_has_bits_[8] & 0x00000200u) != 0;
}
inline void HeroProto::set_has_firework_promotion_start_time() {
  _has_bits_[8] |= 0x00000200u;
}
inline void HeroProto::clear_has_firework_promotion_start_time() {
  _has_bits_[8] &= ~0x00000200u;
}
inline void HeroProto::clear_firework_promotion_start_time() {
  firework_promotion_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_firework_promotion_start_time();
}
inline ::google::protobuf::int64 HeroProto::firework_promotion_start_time() const {
  return firework_promotion_start_time_;
}
inline void HeroProto::set_firework_promotion_start_time(::google::protobuf::int64 value) {
  set_has_firework_promotion_start_time();
  firework_promotion_start_time_ = value;
}

// optional int64 firework_promotion_end_time = 373;
inline bool HeroProto::has_firework_promotion_end_time() const {
  return (_has_bits_[8] & 0x00000400u) != 0;
}
inline void HeroProto::set_has_firework_promotion_end_time() {
  _has_bits_[8] |= 0x00000400u;
}
inline void HeroProto::clear_has_firework_promotion_end_time() {
  _has_bits_[8] &= ~0x00000400u;
}
inline void HeroProto::clear_firework_promotion_end_time() {
  firework_promotion_end_time_ = GOOGLE_LONGLONG(0);
  clear_has_firework_promotion_end_time();
}
inline ::google::protobuf::int64 HeroProto::firework_promotion_end_time() const {
  return firework_promotion_end_time_;
}
inline void HeroProto::set_firework_promotion_end_time(::google::protobuf::int64 value) {
  set_has_firework_promotion_end_time();
  firework_promotion_end_time_ = value;
}

// optional .app.message.HeroAnniversaryTaskProto anniversary_task = 374;
inline bool HeroProto::has_anniversary_task() const {
  return (_has_bits_[8] & 0x00000800u) != 0;
}
inline void HeroProto::set_has_anniversary_task() {
  _has_bits_[8] |= 0x00000800u;
}
inline void HeroProto::clear_has_anniversary_task() {
  _has_bits_[8] &= ~0x00000800u;
}
inline void HeroProto::clear_anniversary_task() {
  if (anniversary_task_ != NULL) anniversary_task_->::app::message::HeroAnniversaryTaskProto::Clear();
  clear_has_anniversary_task();
}
inline const ::app::message::HeroAnniversaryTaskProto& HeroProto::anniversary_task() const {
  return anniversary_task_ != NULL ? *anniversary_task_ : *default_instance_->anniversary_task_;
}
inline ::app::message::HeroAnniversaryTaskProto* HeroProto::mutable_anniversary_task() {
  set_has_anniversary_task();
  if (anniversary_task_ == NULL) anniversary_task_ = new ::app::message::HeroAnniversaryTaskProto;
  return anniversary_task_;
}
inline ::app::message::HeroAnniversaryTaskProto* HeroProto::release_anniversary_task() {
  clear_has_anniversary_task();
  ::app::message::HeroAnniversaryTaskProto* temp = anniversary_task_;
  anniversary_task_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_anniversary_task(::app::message::HeroAnniversaryTaskProto* anniversary_task) {
  delete anniversary_task_;
  anniversary_task_ = anniversary_task;
  if (anniversary_task) {
    set_has_anniversary_task();
  } else {
    clear_has_anniversary_task();
  }
}

// optional bool is_gain_huege_data_prize = 375;
inline bool HeroProto::has_is_gain_huege_data_prize() const {
  return (_has_bits_[8] & 0x00001000u) != 0;
}
inline void HeroProto::set_has_is_gain_huege_data_prize() {
  _has_bits_[8] |= 0x00001000u;
}
inline void HeroProto::clear_has_is_gain_huege_data_prize() {
  _has_bits_[8] &= ~0x00001000u;
}
inline void HeroProto::clear_is_gain_huege_data_prize() {
  is_gain_huege_data_prize_ = false;
  clear_has_is_gain_huege_data_prize();
}
inline bool HeroProto::is_gain_huege_data_prize() const {
  return is_gain_huege_data_prize_;
}
inline void HeroProto::set_is_gain_huege_data_prize(bool value) {
  set_has_is_gain_huege_data_prize();
  is_gain_huege_data_prize_ = value;
}

// optional .app.message.ShieldProto shield = 376;
inline bool HeroProto::has_shield() const {
  return (_has_bits_[8] & 0x00002000u) != 0;
}
inline void HeroProto::set_has_shield() {
  _has_bits_[8] |= 0x00002000u;
}
inline void HeroProto::clear_has_shield() {
  _has_bits_[8] &= ~0x00002000u;
}
inline void HeroProto::clear_shield() {
  if (shield_ != NULL) shield_->::app::message::ShieldProto::Clear();
  clear_has_shield();
}
inline const ::app::message::ShieldProto& HeroProto::shield() const {
  return shield_ != NULL ? *shield_ : *default_instance_->shield_;
}
inline ::app::message::ShieldProto* HeroProto::mutable_shield() {
  set_has_shield();
  if (shield_ == NULL) shield_ = new ::app::message::ShieldProto;
  return shield_;
}
inline ::app::message::ShieldProto* HeroProto::release_shield() {
  clear_has_shield();
  ::app::message::ShieldProto* temp = shield_;
  shield_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_shield(::app::message::ShieldProto* shield) {
  delete shield_;
  shield_ = shield;
  if (shield) {
    set_has_shield();
  } else {
    clear_has_shield();
  }
}

// repeated int32 finished_ling_yun_id = 378;
inline int HeroProto::finished_ling_yun_id_size() const {
  return finished_ling_yun_id_.size();
}
inline void HeroProto::clear_finished_ling_yun_id() {
  finished_ling_yun_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::finished_ling_yun_id(int index) const {
  return finished_ling_yun_id_.Get(index);
}
inline void HeroProto::set_finished_ling_yun_id(int index, ::google::protobuf::int32 value) {
  finished_ling_yun_id_.Set(index, value);
}
inline void HeroProto::add_finished_ling_yun_id(::google::protobuf::int32 value) {
  finished_ling_yun_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::finished_ling_yun_id() const {
  return finished_ling_yun_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_finished_ling_yun_id() {
  return &finished_ling_yun_id_;
}

// repeated int32 finished_long_mai_id = 377;
inline int HeroProto::finished_long_mai_id_size() const {
  return finished_long_mai_id_.size();
}
inline void HeroProto::clear_finished_long_mai_id() {
  finished_long_mai_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::finished_long_mai_id(int index) const {
  return finished_long_mai_id_.Get(index);
}
inline void HeroProto::set_finished_long_mai_id(int index, ::google::protobuf::int32 value) {
  finished_long_mai_id_.Set(index, value);
}
inline void HeroProto::add_finished_long_mai_id(::google::protobuf::int32 value) {
  finished_long_mai_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::finished_long_mai_id() const {
  return finished_long_mai_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_finished_long_mai_id() {
  return &finished_long_mai_id_;
}

// repeated int32 finished_zhong_hua_ge_id = 379;
inline int HeroProto::finished_zhong_hua_ge_id_size() const {
  return finished_zhong_hua_ge_id_.size();
}
inline void HeroProto::clear_finished_zhong_hua_ge_id() {
  finished_zhong_hua_ge_id_.Clear();
}
inline ::google::protobuf::int32 HeroProto::finished_zhong_hua_ge_id(int index) const {
  return finished_zhong_hua_ge_id_.Get(index);
}
inline void HeroProto::set_finished_zhong_hua_ge_id(int index, ::google::protobuf::int32 value) {
  finished_zhong_hua_ge_id_.Set(index, value);
}
inline void HeroProto::add_finished_zhong_hua_ge_id(::google::protobuf::int32 value) {
  finished_zhong_hua_ge_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroProto::finished_zhong_hua_ge_id() const {
  return finished_zhong_hua_ge_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroProto::mutable_finished_zhong_hua_ge_id() {
  return &finished_zhong_hua_ge_id_;
}

// repeated .app.message.DefenceDungeonStateClientProto defence_dungeon_state = 380;
inline int HeroProto::defence_dungeon_state_size() const {
  return defence_dungeon_state_.size();
}
inline void HeroProto::clear_defence_dungeon_state() {
  defence_dungeon_state_.Clear();
}
inline const ::app::message::DefenceDungeonStateClientProto& HeroProto::defence_dungeon_state(int index) const {
  return defence_dungeon_state_.Get(index);
}
inline ::app::message::DefenceDungeonStateClientProto* HeroProto::mutable_defence_dungeon_state(int index) {
  return defence_dungeon_state_.Mutable(index);
}
inline ::app::message::DefenceDungeonStateClientProto* HeroProto::add_defence_dungeon_state() {
  return defence_dungeon_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::DefenceDungeonStateClientProto >&
HeroProto::defence_dungeon_state() const {
  return defence_dungeon_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::DefenceDungeonStateClientProto >*
HeroProto::mutable_defence_dungeon_state() {
  return &defence_dungeon_state_;
}

// optional int32 ling_guang = 381;
inline bool HeroProto::has_ling_guang() const {
  return (_has_bits_[8] & 0x00040000u) != 0;
}
inline void HeroProto::set_has_ling_guang() {
  _has_bits_[8] |= 0x00040000u;
}
inline void HeroProto::clear_has_ling_guang() {
  _has_bits_[8] &= ~0x00040000u;
}
inline void HeroProto::clear_ling_guang() {
  ling_guang_ = 0;
  clear_has_ling_guang();
}
inline ::google::protobuf::int32 HeroProto::ling_guang() const {
  return ling_guang_;
}
inline void HeroProto::set_ling_guang(::google::protobuf::int32 value) {
  set_has_ling_guang();
  ling_guang_ = value;
}

// optional int32 ling_guang_pick = 382;
inline bool HeroProto::has_ling_guang_pick() const {
  return (_has_bits_[8] & 0x00080000u) != 0;
}
inline void HeroProto::set_has_ling_guang_pick() {
  _has_bits_[8] |= 0x00080000u;
}
inline void HeroProto::clear_has_ling_guang_pick() {
  _has_bits_[8] &= ~0x00080000u;
}
inline void HeroProto::clear_ling_guang_pick() {
  ling_guang_pick_ = 0;
  clear_has_ling_guang_pick();
}
inline ::google::protobuf::int32 HeroProto::ling_guang_pick() const {
  return ling_guang_pick_;
}
inline void HeroProto::set_ling_guang_pick(::google::protobuf::int32 value) {
  set_has_ling_guang_pick();
  ling_guang_pick_ = value;
}

// optional int32 mystery_dungeon_use_time = 383;
inline bool HeroProto::has_mystery_dungeon_use_time() const {
  return (_has_bits_[8] & 0x00100000u) != 0;
}
inline void HeroProto::set_has_mystery_dungeon_use_time() {
  _has_bits_[8] |= 0x00100000u;
}
inline void HeroProto::clear_has_mystery_dungeon_use_time() {
  _has_bits_[8] &= ~0x00100000u;
}
inline void HeroProto::clear_mystery_dungeon_use_time() {
  mystery_dungeon_use_time_ = 0;
  clear_has_mystery_dungeon_use_time();
}
inline ::google::protobuf::int32 HeroProto::mystery_dungeon_use_time() const {
  return mystery_dungeon_use_time_;
}
inline void HeroProto::set_mystery_dungeon_use_time(::google::protobuf::int32 value) {
  set_has_mystery_dungeon_use_time();
  mystery_dungeon_use_time_ = value;
}

// optional .app.message.HeroBossCard boss_card = 396;
inline bool HeroProto::has_boss_card() const {
  return (_has_bits_[8] & 0x00200000u) != 0;
}
inline void HeroProto::set_has_boss_card() {
  _has_bits_[8] |= 0x00200000u;
}
inline void HeroProto::clear_has_boss_card() {
  _has_bits_[8] &= ~0x00200000u;
}
inline void HeroProto::clear_boss_card() {
  if (boss_card_ != NULL) boss_card_->::app::message::HeroBossCard::Clear();
  clear_has_boss_card();
}
inline const ::app::message::HeroBossCard& HeroProto::boss_card() const {
  return boss_card_ != NULL ? *boss_card_ : *default_instance_->boss_card_;
}
inline ::app::message::HeroBossCard* HeroProto::mutable_boss_card() {
  set_has_boss_card();
  if (boss_card_ == NULL) boss_card_ = new ::app::message::HeroBossCard;
  return boss_card_;
}
inline ::app::message::HeroBossCard* HeroProto::release_boss_card() {
  clear_has_boss_card();
  ::app::message::HeroBossCard* temp = boss_card_;
  boss_card_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_boss_card(::app::message::HeroBossCard* boss_card) {
  delete boss_card_;
  boss_card_ = boss_card;
  if (boss_card) {
    set_has_boss_card();
  } else {
    clear_has_boss_card();
  }
}

// optional .app.message.HaidiInfoProto haidi = 397;
inline bool HeroProto::has_haidi() const {
  return (_has_bits_[8] & 0x00400000u) != 0;
}
inline void HeroProto::set_has_haidi() {
  _has_bits_[8] |= 0x00400000u;
}
inline void HeroProto::clear_has_haidi() {
  _has_bits_[8] &= ~0x00400000u;
}
inline void HeroProto::clear_haidi() {
  if (haidi_ != NULL) haidi_->::app::message::HaidiInfoProto::Clear();
  clear_has_haidi();
}
inline const ::app::message::HaidiInfoProto& HeroProto::haidi() const {
  return haidi_ != NULL ? *haidi_ : *default_instance_->haidi_;
}
inline ::app::message::HaidiInfoProto* HeroProto::mutable_haidi() {
  set_has_haidi();
  if (haidi_ == NULL) haidi_ = new ::app::message::HaidiInfoProto;
  return haidi_;
}
inline ::app::message::HaidiInfoProto* HeroProto::release_haidi() {
  clear_has_haidi();
  ::app::message::HaidiInfoProto* temp = haidi_;
  haidi_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_haidi(::app::message::HaidiInfoProto* haidi) {
  delete haidi_;
  haidi_ = haidi;
  if (haidi) {
    set_has_haidi();
  } else {
    clear_has_haidi();
  }
}

// optional int32 bow_tong_ling_display_id = 398;
inline bool HeroProto::has_bow_tong_ling_display_id() const {
  return (_has_bits_[8] & 0x00800000u) != 0;
}
inline void HeroProto::set_has_bow_tong_ling_display_id() {
  _has_bits_[8] |= 0x00800000u;
}
inline void HeroProto::clear_has_bow_tong_ling_display_id() {
  _has_bits_[8] &= ~0x00800000u;
}
inline void HeroProto::clear_bow_tong_ling_display_id() {
  bow_tong_ling_display_id_ = 0;
  clear_has_bow_tong_ling_display_id();
}
inline ::google::protobuf::int32 HeroProto::bow_tong_ling_display_id() const {
  return bow_tong_ling_display_id_;
}
inline void HeroProto::set_bow_tong_ling_display_id(::google::protobuf::int32 value) {
  set_has_bow_tong_ling_display_id();
  bow_tong_ling_display_id_ = value;
}

// repeated .app.message.BowTongLingClientProto bow_tong_ling = 399;
inline int HeroProto::bow_tong_ling_size() const {
  return bow_tong_ling_.size();
}
inline void HeroProto::clear_bow_tong_ling() {
  bow_tong_ling_.Clear();
}
inline const ::app::message::BowTongLingClientProto& HeroProto::bow_tong_ling(int index) const {
  return bow_tong_ling_.Get(index);
}
inline ::app::message::BowTongLingClientProto* HeroProto::mutable_bow_tong_ling(int index) {
  return bow_tong_ling_.Mutable(index);
}
inline ::app::message::BowTongLingClientProto* HeroProto::add_bow_tong_ling() {
  return bow_tong_ling_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::BowTongLingClientProto >&
HeroProto::bow_tong_ling() const {
  return bow_tong_ling_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::BowTongLingClientProto >*
HeroProto::mutable_bow_tong_ling() {
  return &bow_tong_ling_;
}

// optional int64 sys_hong_bao_colleted_time = 400;
inline bool HeroProto::has_sys_hong_bao_colleted_time() const {
  return (_has_bits_[8] & 0x02000000u) != 0;
}
inline void HeroProto::set_has_sys_hong_bao_colleted_time() {
  _has_bits_[8] |= 0x02000000u;
}
inline void HeroProto::clear_has_sys_hong_bao_colleted_time() {
  _has_bits_[8] &= ~0x02000000u;
}
inline void HeroProto::clear_sys_hong_bao_colleted_time() {
  sys_hong_bao_colleted_time_ = GOOGLE_LONGLONG(0);
  clear_has_sys_hong_bao_colleted_time();
}
inline ::google::protobuf::int64 HeroProto::sys_hong_bao_colleted_time() const {
  return sys_hong_bao_colleted_time_;
}
inline void HeroProto::set_sys_hong_bao_colleted_time(::google::protobuf::int64 value) {
  set_has_sys_hong_bao_colleted_time();
  sys_hong_bao_colleted_time_ = value;
}

// optional .app.message.TianXieProto tian_xie = 500;
inline bool HeroProto::has_tian_xie() const {
  return (_has_bits_[8] & 0x04000000u) != 0;
}
inline void HeroProto::set_has_tian_xie() {
  _has_bits_[8] |= 0x04000000u;
}
inline void HeroProto::clear_has_tian_xie() {
  _has_bits_[8] &= ~0x04000000u;
}
inline void HeroProto::clear_tian_xie() {
  if (tian_xie_ != NULL) tian_xie_->::app::message::TianXieProto::Clear();
  clear_has_tian_xie();
}
inline const ::app::message::TianXieProto& HeroProto::tian_xie() const {
  return tian_xie_ != NULL ? *tian_xie_ : *default_instance_->tian_xie_;
}
inline ::app::message::TianXieProto* HeroProto::mutable_tian_xie() {
  set_has_tian_xie();
  if (tian_xie_ == NULL) tian_xie_ = new ::app::message::TianXieProto;
  return tian_xie_;
}
inline ::app::message::TianXieProto* HeroProto::release_tian_xie() {
  clear_has_tian_xie();
  ::app::message::TianXieProto* temp = tian_xie_;
  tian_xie_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_tian_xie(::app::message::TianXieProto* tian_xie) {
  delete tian_xie_;
  tian_xie_ = tian_xie;
  if (tian_xie) {
    set_has_tian_xie();
  } else {
    clear_has_tian_xie();
  }
}

// optional .app.message.JianDaoProto jianDao = 501;
inline bool HeroProto::has_jiandao() const {
  return (_has_bits_[8] & 0x08000000u) != 0;
}
inline void HeroProto::set_has_jiandao() {
  _has_bits_[8] |= 0x08000000u;
}
inline void HeroProto::clear_has_jiandao() {
  _has_bits_[8] &= ~0x08000000u;
}
inline void HeroProto::clear_jiandao() {
  if (jiandao_ != NULL) jiandao_->::app::message::JianDaoProto::Clear();
  clear_has_jiandao();
}
inline const ::app::message::JianDaoProto& HeroProto::jiandao() const {
  return jiandao_ != NULL ? *jiandao_ : *default_instance_->jiandao_;
}
inline ::app::message::JianDaoProto* HeroProto::mutable_jiandao() {
  set_has_jiandao();
  if (jiandao_ == NULL) jiandao_ = new ::app::message::JianDaoProto;
  return jiandao_;
}
inline ::app::message::JianDaoProto* HeroProto::release_jiandao() {
  clear_has_jiandao();
  ::app::message::JianDaoProto* temp = jiandao_;
  jiandao_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_jiandao(::app::message::JianDaoProto* jiandao) {
  delete jiandao_;
  jiandao_ = jiandao;
  if (jiandao) {
    set_has_jiandao();
  } else {
    clear_has_jiandao();
  }
}

// optional .app.message.LingYuProto lingYu = 502;
inline bool HeroProto::has_lingyu() const {
  return (_has_bits_[8] & 0x10000000u) != 0;
}
inline void HeroProto::set_has_lingyu() {
  _has_bits_[8] |= 0x10000000u;
}
inline void HeroProto::clear_has_lingyu() {
  _has_bits_[8] &= ~0x10000000u;
}
inline void HeroProto::clear_lingyu() {
  if (lingyu_ != NULL) lingyu_->::app::message::LingYuProto::Clear();
  clear_has_lingyu();
}
inline const ::app::message::LingYuProto& HeroProto::lingyu() const {
  return lingyu_ != NULL ? *lingyu_ : *default_instance_->lingyu_;
}
inline ::app::message::LingYuProto* HeroProto::mutable_lingyu() {
  set_has_lingyu();
  if (lingyu_ == NULL) lingyu_ = new ::app::message::LingYuProto;
  return lingyu_;
}
inline ::app::message::LingYuProto* HeroProto::release_lingyu() {
  clear_has_lingyu();
  ::app::message::LingYuProto* temp = lingyu_;
  lingyu_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_lingyu(::app::message::LingYuProto* lingyu) {
  delete lingyu_;
  lingyu_ = lingyu;
  if (lingyu) {
    set_has_lingyu();
  } else {
    clear_has_lingyu();
  }
}

// optional .app.message.FengYunDaoProto fengYunDao = 503;
inline bool HeroProto::has_fengyundao() const {
  return (_has_bits_[8] & 0x20000000u) != 0;
}
inline void HeroProto::set_has_fengyundao() {
  _has_bits_[8] |= 0x20000000u;
}
inline void HeroProto::clear_has_fengyundao() {
  _has_bits_[8] &= ~0x20000000u;
}
inline void HeroProto::clear_fengyundao() {
  if (fengyundao_ != NULL) fengyundao_->::app::message::FengYunDaoProto::Clear();
  clear_has_fengyundao();
}
inline const ::app::message::FengYunDaoProto& HeroProto::fengyundao() const {
  return fengyundao_ != NULL ? *fengyundao_ : *default_instance_->fengyundao_;
}
inline ::app::message::FengYunDaoProto* HeroProto::mutable_fengyundao() {
  set_has_fengyundao();
  if (fengyundao_ == NULL) fengyundao_ = new ::app::message::FengYunDaoProto;
  return fengyundao_;
}
inline ::app::message::FengYunDaoProto* HeroProto::release_fengyundao() {
  clear_has_fengyundao();
  ::app::message::FengYunDaoProto* temp = fengyundao_;
  fengyundao_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_fengyundao(::app::message::FengYunDaoProto* fengyundao) {
  delete fengyundao_;
  fengyundao_ = fengyundao;
  if (fengyundao) {
    set_has_fengyundao();
  } else {
    clear_has_fengyundao();
  }
}

// repeated .app.message.PetTongLingClientProto pet_tong_ling = 504;
inline int HeroProto::pet_tong_ling_size() const {
  return pet_tong_ling_.size();
}
inline void HeroProto::clear_pet_tong_ling() {
  pet_tong_ling_.Clear();
}
inline const ::app::message::PetTongLingClientProto& HeroProto::pet_tong_ling(int index) const {
  return pet_tong_ling_.Get(index);
}
inline ::app::message::PetTongLingClientProto* HeroProto::mutable_pet_tong_ling(int index) {
  return pet_tong_ling_.Mutable(index);
}
inline ::app::message::PetTongLingClientProto* HeroProto::add_pet_tong_ling() {
  return pet_tong_ling_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingClientProto >&
HeroProto::pet_tong_ling() const {
  return pet_tong_ling_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingClientProto >*
HeroProto::mutable_pet_tong_ling() {
  return &pet_tong_ling_;
}

// optional int32 pet_tong_ling_display_id = 505;
inline bool HeroProto::has_pet_tong_ling_display_id() const {
  return (_has_bits_[8] & 0x80000000u) != 0;
}
inline void HeroProto::set_has_pet_tong_ling_display_id() {
  _has_bits_[8] |= 0x80000000u;
}
inline void HeroProto::clear_has_pet_tong_ling_display_id() {
  _has_bits_[8] &= ~0x80000000u;
}
inline void HeroProto::clear_pet_tong_ling_display_id() {
  pet_tong_ling_display_id_ = 0;
  clear_has_pet_tong_ling_display_id();
}
inline ::google::protobuf::int32 HeroProto::pet_tong_ling_display_id() const {
  return pet_tong_ling_display_id_;
}
inline void HeroProto::set_pet_tong_ling_display_id(::google::protobuf::int32 value) {
  set_has_pet_tong_ling_display_id();
  pet_tong_ling_display_id_ = value;
}

// repeated .app.message.PetTongLingSingleSpellClientProto pet_tong_ling_single_spell = 506;
inline int HeroProto::pet_tong_ling_single_spell_size() const {
  return pet_tong_ling_single_spell_.size();
}
inline void HeroProto::clear_pet_tong_ling_single_spell() {
  pet_tong_ling_single_spell_.Clear();
}
inline const ::app::message::PetTongLingSingleSpellClientProto& HeroProto::pet_tong_ling_single_spell(int index) const {
  return pet_tong_ling_single_spell_.Get(index);
}
inline ::app::message::PetTongLingSingleSpellClientProto* HeroProto::mutable_pet_tong_ling_single_spell(int index) {
  return pet_tong_ling_single_spell_.Mutable(index);
}
inline ::app::message::PetTongLingSingleSpellClientProto* HeroProto::add_pet_tong_ling_single_spell() {
  return pet_tong_ling_single_spell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingSingleSpellClientProto >&
HeroProto::pet_tong_ling_single_spell() const {
  return pet_tong_ling_single_spell_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingSingleSpellClientProto >*
HeroProto::mutable_pet_tong_ling_single_spell() {
  return &pet_tong_ling_single_spell_;
}

// optional .app.message.MoFangClientProto mo_fang = 507;
inline bool HeroProto::has_mo_fang() const {
  return (_has_bits_[9] & 0x00000002u) != 0;
}
inline void HeroProto::set_has_mo_fang() {
  _has_bits_[9] |= 0x00000002u;
}
inline void HeroProto::clear_has_mo_fang() {
  _has_bits_[9] &= ~0x00000002u;
}
inline void HeroProto::clear_mo_fang() {
  if (mo_fang_ != NULL) mo_fang_->::app::message::MoFangClientProto::Clear();
  clear_has_mo_fang();
}
inline const ::app::message::MoFangClientProto& HeroProto::mo_fang() const {
  return mo_fang_ != NULL ? *mo_fang_ : *default_instance_->mo_fang_;
}
inline ::app::message::MoFangClientProto* HeroProto::mutable_mo_fang() {
  set_has_mo_fang();
  if (mo_fang_ == NULL) mo_fang_ = new ::app::message::MoFangClientProto;
  return mo_fang_;
}
inline ::app::message::MoFangClientProto* HeroProto::release_mo_fang() {
  clear_has_mo_fang();
  ::app::message::MoFangClientProto* temp = mo_fang_;
  mo_fang_ = NULL;
  return temp;
}
inline void HeroProto::set_allocated_mo_fang(::app::message::MoFangClientProto* mo_fang) {
  delete mo_fang_;
  mo_fang_ = mo_fang;
  if (mo_fang) {
    set_has_mo_fang();
  } else {
    clear_has_mo_fang();
  }
}

// optional int32 hell_dungeon_enter_count = 515;
inline bool HeroProto::has_hell_dungeon_enter_count() const {
  return (_has_bits_[9] & 0x00000004u) != 0;
}
inline void HeroProto::set_has_hell_dungeon_enter_count() {
  _has_bits_[9] |= 0x00000004u;
}
inline void HeroProto::clear_has_hell_dungeon_enter_count() {
  _has_bits_[9] &= ~0x00000004u;
}
inline void HeroProto::clear_hell_dungeon_enter_count() {
  hell_dungeon_enter_count_ = 0;
  clear_has_hell_dungeon_enter_count();
}
inline ::google::protobuf::int32 HeroProto::hell_dungeon_enter_count() const {
  return hell_dungeon_enter_count_;
}
inline void HeroProto::set_hell_dungeon_enter_count(::google::protobuf::int32 value) {
  set_has_hell_dungeon_enter_count();
  hell_dungeon_enter_count_ = value;
}

// -------------------------------------------------------------------

// MoFangClientProto

// optional int32 jie_shu = 1;
inline bool MoFangClientProto::has_jie_shu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoFangClientProto::set_has_jie_shu() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoFangClientProto::clear_has_jie_shu() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoFangClientProto::clear_jie_shu() {
  jie_shu_ = 0;
  clear_has_jie_shu();
}
inline ::google::protobuf::int32 MoFangClientProto::jie_shu() const {
  return jie_shu_;
}
inline void MoFangClientProto::set_jie_shu(::google::protobuf::int32 value) {
  set_has_jie_shu();
  jie_shu_ = value;
}

// optional int32 ceng_shu = 2;
inline bool MoFangClientProto::has_ceng_shu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoFangClientProto::set_has_ceng_shu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoFangClientProto::clear_has_ceng_shu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoFangClientProto::clear_ceng_shu() {
  ceng_shu_ = 0;
  clear_has_ceng_shu();
}
inline ::google::protobuf::int32 MoFangClientProto::ceng_shu() const {
  return ceng_shu_;
}
inline void MoFangClientProto::set_ceng_shu(::google::protobuf::int32 value) {
  set_has_ceng_shu();
  ceng_shu_ = value;
}

// optional int32 bless_amount = 3;
inline bool MoFangClientProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoFangClientProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoFangClientProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoFangClientProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 MoFangClientProto::bless_amount() const {
  return bless_amount_;
}
inline void MoFangClientProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 4;
inline bool MoFangClientProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoFangClientProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoFangClientProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoFangClientProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 MoFangClientProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void MoFangClientProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int32 qian_neng_use_count = 5;
inline bool MoFangClientProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoFangClientProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoFangClientProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoFangClientProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 MoFangClientProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void MoFangClientProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 6;
inline bool MoFangClientProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoFangClientProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoFangClientProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoFangClientProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 MoFangClientProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void MoFangClientProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 7;
inline bool MoFangClientProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MoFangClientProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MoFangClientProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MoFangClientProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 MoFangClientProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void MoFangClientProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 8;
inline bool MoFangClientProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MoFangClientProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MoFangClientProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MoFangClientProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 MoFangClientProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void MoFangClientProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 9;
inline bool MoFangClientProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MoFangClientProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MoFangClientProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MoFangClientProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 MoFangClientProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void MoFangClientProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 10;
inline bool MoFangClientProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MoFangClientProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MoFangClientProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MoFangClientProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 MoFangClientProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void MoFangClientProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// PetTongLingClientProto

// optional int32 id = 1;
inline bool PetTongLingClientProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetTongLingClientProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetTongLingClientProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetTongLingClientProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PetTongLingClientProto::id() const {
  return id_;
}
inline void PetTongLingClientProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .app.message.SpriteStatProto stat = 2;
inline bool PetTongLingClientProto::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetTongLingClientProto::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetTongLingClientProto::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetTongLingClientProto::clear_stat() {
  if (stat_ != NULL) stat_->::app::message::SpriteStatProto::Clear();
  clear_has_stat();
}
inline const ::app::message::SpriteStatProto& PetTongLingClientProto::stat() const {
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::app::message::SpriteStatProto* PetTongLingClientProto::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::app::message::SpriteStatProto;
  return stat_;
}
inline ::app::message::SpriteStatProto* PetTongLingClientProto::release_stat() {
  clear_has_stat();
  ::app::message::SpriteStatProto* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void PetTongLingClientProto::set_allocated_stat(::app::message::SpriteStatProto* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
}

// optional int32 fightAmount = 3;
inline bool PetTongLingClientProto::has_fightamount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetTongLingClientProto::set_has_fightamount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetTongLingClientProto::clear_has_fightamount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetTongLingClientProto::clear_fightamount() {
  fightamount_ = 0;
  clear_has_fightamount();
}
inline ::google::protobuf::int32 PetTongLingClientProto::fightamount() const {
  return fightamount_;
}
inline void PetTongLingClientProto::set_fightamount(::google::protobuf::int32 value) {
  set_has_fightamount();
  fightamount_ = value;
}

// optional int32 upgradeTimes = 4;
inline bool PetTongLingClientProto::has_upgradetimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetTongLingClientProto::set_has_upgradetimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetTongLingClientProto::clear_has_upgradetimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetTongLingClientProto::clear_upgradetimes() {
  upgradetimes_ = 0;
  clear_has_upgradetimes();
}
inline ::google::protobuf::int32 PetTongLingClientProto::upgradetimes() const {
  return upgradetimes_;
}
inline void PetTongLingClientProto::set_upgradetimes(::google::protobuf::int32 value) {
  set_has_upgradetimes();
  upgradetimes_ = value;
}

// repeated .app.message.PetTongLingGiftSpellClientProto gift_spell = 5;
inline int PetTongLingClientProto::gift_spell_size() const {
  return gift_spell_.size();
}
inline void PetTongLingClientProto::clear_gift_spell() {
  gift_spell_.Clear();
}
inline const ::app::message::PetTongLingGiftSpellClientProto& PetTongLingClientProto::gift_spell(int index) const {
  return gift_spell_.Get(index);
}
inline ::app::message::PetTongLingGiftSpellClientProto* PetTongLingClientProto::mutable_gift_spell(int index) {
  return gift_spell_.Mutable(index);
}
inline ::app::message::PetTongLingGiftSpellClientProto* PetTongLingClientProto::add_gift_spell() {
  return gift_spell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingGiftSpellClientProto >&
PetTongLingClientProto::gift_spell() const {
  return gift_spell_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::PetTongLingGiftSpellClientProto >*
PetTongLingClientProto::mutable_gift_spell() {
  return &gift_spell_;
}

// -------------------------------------------------------------------

// PetTongLingGiftSpellClientProto

// optional .app.message.ActiveSpell passive_spell = 1;
inline bool PetTongLingGiftSpellClientProto::has_passive_spell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetTongLingGiftSpellClientProto::set_has_passive_spell() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetTongLingGiftSpellClientProto::clear_has_passive_spell() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetTongLingGiftSpellClientProto::clear_passive_spell() {
  if (passive_spell_ != NULL) passive_spell_->::app::message::ActiveSpell::Clear();
  clear_has_passive_spell();
}
inline const ::app::message::ActiveSpell& PetTongLingGiftSpellClientProto::passive_spell() const {
  return passive_spell_ != NULL ? *passive_spell_ : *default_instance_->passive_spell_;
}
inline ::app::message::ActiveSpell* PetTongLingGiftSpellClientProto::mutable_passive_spell() {
  set_has_passive_spell();
  if (passive_spell_ == NULL) passive_spell_ = new ::app::message::ActiveSpell;
  return passive_spell_;
}
inline ::app::message::ActiveSpell* PetTongLingGiftSpellClientProto::release_passive_spell() {
  clear_has_passive_spell();
  ::app::message::ActiveSpell* temp = passive_spell_;
  passive_spell_ = NULL;
  return temp;
}
inline void PetTongLingGiftSpellClientProto::set_allocated_passive_spell(::app::message::ActiveSpell* passive_spell) {
  delete passive_spell_;
  passive_spell_ = passive_spell;
  if (passive_spell) {
    set_has_passive_spell();
  } else {
    clear_has_passive_spell();
  }
}

// optional int32 passive_spell_exp = 2;
inline bool PetTongLingGiftSpellClientProto::has_passive_spell_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetTongLingGiftSpellClientProto::set_has_passive_spell_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetTongLingGiftSpellClientProto::clear_has_passive_spell_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetTongLingGiftSpellClientProto::clear_passive_spell_exp() {
  passive_spell_exp_ = 0;
  clear_has_passive_spell_exp();
}
inline ::google::protobuf::int32 PetTongLingGiftSpellClientProto::passive_spell_exp() const {
  return passive_spell_exp_;
}
inline void PetTongLingGiftSpellClientProto::set_passive_spell_exp(::google::protobuf::int32 value) {
  set_has_passive_spell_exp();
  passive_spell_exp_ = value;
}

// -------------------------------------------------------------------

// PetTongLingSingleSpellClientProto

// optional .app.message.ActiveSpell spell = 1;
inline bool PetTongLingSingleSpellClientProto::has_spell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetTongLingSingleSpellClientProto::set_has_spell() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetTongLingSingleSpellClientProto::clear_has_spell() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetTongLingSingleSpellClientProto::clear_spell() {
  if (spell_ != NULL) spell_->::app::message::ActiveSpell::Clear();
  clear_has_spell();
}
inline const ::app::message::ActiveSpell& PetTongLingSingleSpellClientProto::spell() const {
  return spell_ != NULL ? *spell_ : *default_instance_->spell_;
}
inline ::app::message::ActiveSpell* PetTongLingSingleSpellClientProto::mutable_spell() {
  set_has_spell();
  if (spell_ == NULL) spell_ = new ::app::message::ActiveSpell;
  return spell_;
}
inline ::app::message::ActiveSpell* PetTongLingSingleSpellClientProto::release_spell() {
  clear_has_spell();
  ::app::message::ActiveSpell* temp = spell_;
  spell_ = NULL;
  return temp;
}
inline void PetTongLingSingleSpellClientProto::set_allocated_spell(::app::message::ActiveSpell* spell) {
  delete spell_;
  spell_ = spell;
  if (spell) {
    set_has_spell();
  } else {
    clear_has_spell();
  }
}

// optional int32 sequence = 2;
inline bool PetTongLingSingleSpellClientProto::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetTongLingSingleSpellClientProto::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetTongLingSingleSpellClientProto::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetTongLingSingleSpellClientProto::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 PetTongLingSingleSpellClientProto::sequence() const {
  return sequence_;
}
inline void PetTongLingSingleSpellClientProto::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
}

// -------------------------------------------------------------------

// BowTongLingClientProto

// optional int32 id = 1;
inline bool BowTongLingClientProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BowTongLingClientProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BowTongLingClientProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BowTongLingClientProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BowTongLingClientProto::id() const {
  return id_;
}
inline void BowTongLingClientProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .app.message.SpriteStatProto stat = 2;
inline bool BowTongLingClientProto::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BowTongLingClientProto::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BowTongLingClientProto::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BowTongLingClientProto::clear_stat() {
  if (stat_ != NULL) stat_->::app::message::SpriteStatProto::Clear();
  clear_has_stat();
}
inline const ::app::message::SpriteStatProto& BowTongLingClientProto::stat() const {
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::app::message::SpriteStatProto* BowTongLingClientProto::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::app::message::SpriteStatProto;
  return stat_;
}
inline ::app::message::SpriteStatProto* BowTongLingClientProto::release_stat() {
  clear_has_stat();
  ::app::message::SpriteStatProto* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void BowTongLingClientProto::set_allocated_stat(::app::message::SpriteStatProto* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
}

// optional int32 fightAmount = 3;
inline bool BowTongLingClientProto::has_fightamount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BowTongLingClientProto::set_has_fightamount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BowTongLingClientProto::clear_has_fightamount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BowTongLingClientProto::clear_fightamount() {
  fightamount_ = 0;
  clear_has_fightamount();
}
inline ::google::protobuf::int32 BowTongLingClientProto::fightamount() const {
  return fightamount_;
}
inline void BowTongLingClientProto::set_fightamount(::google::protobuf::int32 value) {
  set_has_fightamount();
  fightamount_ = value;
}

// optional int32 upgradeTimes = 4;
inline bool BowTongLingClientProto::has_upgradetimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BowTongLingClientProto::set_has_upgradetimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BowTongLingClientProto::clear_has_upgradetimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BowTongLingClientProto::clear_upgradetimes() {
  upgradetimes_ = 0;
  clear_has_upgradetimes();
}
inline ::google::protobuf::int32 BowTongLingClientProto::upgradetimes() const {
  return upgradetimes_;
}
inline void BowTongLingClientProto::set_upgradetimes(::google::protobuf::int32 value) {
  set_has_upgradetimes();
  upgradetimes_ = value;
}

// -------------------------------------------------------------------

// FengYunDaoRankProto_FengYunDaoRankData

// optional int64 id = 1;
inline bool FengYunDaoRankProto_FengYunDaoRankData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 FengYunDaoRankProto_FengYunDaoRankData::id() const {
  return id_;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool FengYunDaoRankProto_FengYunDaoRankData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FengYunDaoRankProto_FengYunDaoRankData::name() const {
  return *name_;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FengYunDaoRankProto_FengYunDaoRankData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FengYunDaoRankProto_FengYunDaoRankData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 pass = 3;
inline bool FengYunDaoRankProto_FengYunDaoRankData::has_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_has_pass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_has_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_pass() {
  pass_ = 0;
  clear_has_pass();
}
inline ::google::protobuf::int32 FengYunDaoRankProto_FengYunDaoRankData::pass() const {
  return pass_;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_pass(::google::protobuf::int32 value) {
  set_has_pass();
  pass_ = value;
}

// optional int32 useTime = 4;
inline bool FengYunDaoRankProto_FengYunDaoRankData::has_usetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_has_usetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::clear_usetime() {
  usetime_ = 0;
  clear_has_usetime();
}
inline ::google::protobuf::int32 FengYunDaoRankProto_FengYunDaoRankData::usetime() const {
  return usetime_;
}
inline void FengYunDaoRankProto_FengYunDaoRankData::set_usetime(::google::protobuf::int32 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// FengYunDaoRankProto

// repeated .app.message.FengYunDaoRankProto.FengYunDaoRankData rank = 1;
inline int FengYunDaoRankProto::rank_size() const {
  return rank_.size();
}
inline void FengYunDaoRankProto::clear_rank() {
  rank_.Clear();
}
inline const ::app::message::FengYunDaoRankProto_FengYunDaoRankData& FengYunDaoRankProto::rank(int index) const {
  return rank_.Get(index);
}
inline ::app::message::FengYunDaoRankProto_FengYunDaoRankData* FengYunDaoRankProto::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::app::message::FengYunDaoRankProto_FengYunDaoRankData* FengYunDaoRankProto::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::FengYunDaoRankProto_FengYunDaoRankData >&
FengYunDaoRankProto::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::FengYunDaoRankProto_FengYunDaoRankData >*
FengYunDaoRankProto::mutable_rank() {
  return &rank_;
}

// -------------------------------------------------------------------

// FengYunDaoProto

// optional int32 dailyTimes = 1;
inline bool FengYunDaoProto::has_dailytimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FengYunDaoProto::set_has_dailytimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FengYunDaoProto::clear_has_dailytimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FengYunDaoProto::clear_dailytimes() {
  dailytimes_ = 0;
  clear_has_dailytimes();
}
inline ::google::protobuf::int32 FengYunDaoProto::dailytimes() const {
  return dailytimes_;
}
inline void FengYunDaoProto::set_dailytimes(::google::protobuf::int32 value) {
  set_has_dailytimes();
  dailytimes_ = value;
}

// optional int32 dailyBuyTimes = 2;
inline bool FengYunDaoProto::has_dailybuytimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FengYunDaoProto::set_has_dailybuytimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FengYunDaoProto::clear_has_dailybuytimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FengYunDaoProto::clear_dailybuytimes() {
  dailybuytimes_ = 0;
  clear_has_dailybuytimes();
}
inline ::google::protobuf::int32 FengYunDaoProto::dailybuytimes() const {
  return dailybuytimes_;
}
inline void FengYunDaoProto::set_dailybuytimes(::google::protobuf::int32 value) {
  set_has_dailybuytimes();
  dailybuytimes_ = value;
}

// optional int32 firstIndex = 3;
inline bool FengYunDaoProto::has_firstindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FengYunDaoProto::set_has_firstindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FengYunDaoProto::clear_has_firstindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FengYunDaoProto::clear_firstindex() {
  firstindex_ = 0;
  clear_has_firstindex();
}
inline ::google::protobuf::int32 FengYunDaoProto::firstindex() const {
  return firstindex_;
}
inline void FengYunDaoProto::set_firstindex(::google::protobuf::int32 value) {
  set_has_firstindex();
  firstindex_ = value;
}

// optional int32 curIndex = 4;
inline bool FengYunDaoProto::has_curindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FengYunDaoProto::set_has_curindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FengYunDaoProto::clear_has_curindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FengYunDaoProto::clear_curindex() {
  curindex_ = 0;
  clear_has_curindex();
}
inline ::google::protobuf::int32 FengYunDaoProto::curindex() const {
  return curindex_;
}
inline void FengYunDaoProto::set_curindex(::google::protobuf::int32 value) {
  set_has_curindex();
  curindex_ = value;
}

// optional bool challengeKeep = 5;
inline bool FengYunDaoProto::has_challengekeep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FengYunDaoProto::set_has_challengekeep() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FengYunDaoProto::clear_has_challengekeep() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FengYunDaoProto::clear_challengekeep() {
  challengekeep_ = false;
  clear_has_challengekeep();
}
inline bool FengYunDaoProto::challengekeep() const {
  return challengekeep_;
}
inline void FengYunDaoProto::set_challengekeep(bool value) {
  set_has_challengekeep();
  challengekeep_ = value;
}

// -------------------------------------------------------------------

// HeroYuYiGeProtos

// optional int32 on_show_sequence = 1;
inline bool HeroYuYiGeProtos::has_on_show_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroYuYiGeProtos::set_has_on_show_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroYuYiGeProtos::clear_has_on_show_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroYuYiGeProtos::clear_on_show_sequence() {
  on_show_sequence_ = 0;
  clear_has_on_show_sequence();
}
inline ::google::protobuf::int32 HeroYuYiGeProtos::on_show_sequence() const {
  return on_show_sequence_;
}
inline void HeroYuYiGeProtos::set_on_show_sequence(::google::protobuf::int32 value) {
  set_has_on_show_sequence();
  on_show_sequence_ = value;
}

// repeated .app.message.HeroYuYiGeProto protos = 2;
inline int HeroYuYiGeProtos::protos_size() const {
  return protos_.size();
}
inline void HeroYuYiGeProtos::clear_protos() {
  protos_.Clear();
}
inline const ::app::message::HeroYuYiGeProto& HeroYuYiGeProtos::protos(int index) const {
  return protos_.Get(index);
}
inline ::app::message::HeroYuYiGeProto* HeroYuYiGeProtos::mutable_protos(int index) {
  return protos_.Mutable(index);
}
inline ::app::message::HeroYuYiGeProto* HeroYuYiGeProtos::add_protos() {
  return protos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::HeroYuYiGeProto >&
HeroYuYiGeProtos::protos() const {
  return protos_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::HeroYuYiGeProto >*
HeroYuYiGeProtos::mutable_protos() {
  return &protos_;
}

// optional bool is_hide = 3;
inline bool HeroYuYiGeProtos::has_is_hide() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroYuYiGeProtos::set_has_is_hide() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroYuYiGeProtos::clear_has_is_hide() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroYuYiGeProtos::clear_is_hide() {
  is_hide_ = false;
  clear_has_is_hide();
}
inline bool HeroYuYiGeProtos::is_hide() const {
  return is_hide_;
}
inline void HeroYuYiGeProtos::set_is_hide(bool value) {
  set_has_is_hide();
  is_hide_ = value;
}

// -------------------------------------------------------------------

// HeroYuYiGeProto

// optional int32 sequence = 1;
inline bool HeroYuYiGeProto::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroYuYiGeProto::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroYuYiGeProto::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroYuYiGeProto::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 HeroYuYiGeProto::sequence() const {
  return sequence_;
}
inline void HeroYuYiGeProto::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional .app.message.EquipmentProto fashion = 2;
inline bool HeroYuYiGeProto::has_fashion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroYuYiGeProto::set_has_fashion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroYuYiGeProto::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroYuYiGeProto::clear_fashion() {
  if (fashion_ != NULL) fashion_->::app::message::EquipmentProto::Clear();
  clear_has_fashion();
}
inline const ::app::message::EquipmentProto& HeroYuYiGeProto::fashion() const {
  return fashion_ != NULL ? *fashion_ : *default_instance_->fashion_;
}
inline ::app::message::EquipmentProto* HeroYuYiGeProto::mutable_fashion() {
  set_has_fashion();
  if (fashion_ == NULL) fashion_ = new ::app::message::EquipmentProto;
  return fashion_;
}
inline ::app::message::EquipmentProto* HeroYuYiGeProto::release_fashion() {
  clear_has_fashion();
  ::app::message::EquipmentProto* temp = fashion_;
  fashion_ = NULL;
  return temp;
}
inline void HeroYuYiGeProto::set_allocated_fashion(::app::message::EquipmentProto* fashion) {
  delete fashion_;
  fashion_ = fashion;
  if (fashion) {
    set_has_fashion();
  } else {
    clear_has_fashion();
  }
}

// optional .app.message.EquipmentDataProto fashion_data = 3;
inline bool HeroYuYiGeProto::has_fashion_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroYuYiGeProto::set_has_fashion_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroYuYiGeProto::clear_has_fashion_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroYuYiGeProto::clear_fashion_data() {
  if (fashion_data_ != NULL) fashion_data_->::app::message::EquipmentDataProto::Clear();
  clear_has_fashion_data();
}
inline const ::app::message::EquipmentDataProto& HeroYuYiGeProto::fashion_data() const {
  return fashion_data_ != NULL ? *fashion_data_ : *default_instance_->fashion_data_;
}
inline ::app::message::EquipmentDataProto* HeroYuYiGeProto::mutable_fashion_data() {
  set_has_fashion_data();
  if (fashion_data_ == NULL) fashion_data_ = new ::app::message::EquipmentDataProto;
  return fashion_data_;
}
inline ::app::message::EquipmentDataProto* HeroYuYiGeProto::release_fashion_data() {
  clear_has_fashion_data();
  ::app::message::EquipmentDataProto* temp = fashion_data_;
  fashion_data_ = NULL;
  return temp;
}
inline void HeroYuYiGeProto::set_allocated_fashion_data(::app::message::EquipmentDataProto* fashion_data) {
  delete fashion_data_;
  fashion_data_ = fashion_data;
  if (fashion_data) {
    set_has_fashion_data();
  } else {
    clear_has_fashion_data();
  }
}

// optional int32 level = 4;
inline bool HeroYuYiGeProto::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroYuYiGeProto::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroYuYiGeProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroYuYiGeProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 HeroYuYiGeProto::level() const {
  return level_;
}
inline void HeroYuYiGeProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool is_use_bless_amount = 5;
inline bool HeroYuYiGeProto::has_is_use_bless_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroYuYiGeProto::set_has_is_use_bless_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroYuYiGeProto::clear_has_is_use_bless_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroYuYiGeProto::clear_is_use_bless_amount() {
  is_use_bless_amount_ = false;
  clear_has_is_use_bless_amount();
}
inline bool HeroYuYiGeProto::is_use_bless_amount() const {
  return is_use_bless_amount_;
}
inline void HeroYuYiGeProto::set_is_use_bless_amount(bool value) {
  set_has_is_use_bless_amount();
  is_use_bless_amount_ = value;
}

// optional int32 bless_amount = 6;
inline bool HeroYuYiGeProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeroYuYiGeProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeroYuYiGeProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeroYuYiGeProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 HeroYuYiGeProto::bless_amount() const {
  return bless_amount_;
}
inline void HeroYuYiGeProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 7;
inline bool HeroYuYiGeProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeroYuYiGeProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeroYuYiGeProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeroYuYiGeProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 HeroYuYiGeProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void HeroYuYiGeProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int32 blessLv = 8;
inline bool HeroYuYiGeProto::has_blesslv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeroYuYiGeProto::set_has_blesslv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeroYuYiGeProto::clear_has_blesslv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeroYuYiGeProto::clear_blesslv() {
  blesslv_ = 0;
  clear_has_blesslv();
}
inline ::google::protobuf::int32 HeroYuYiGeProto::blesslv() const {
  return blesslv_;
}
inline void HeroYuYiGeProto::set_blesslv(::google::protobuf::int32 value) {
  set_has_blesslv();
  blesslv_ = value;
}

// -------------------------------------------------------------------

// HeroWelfareCompensationProto_WelfareCompensationProto

// optional int64 index = 1;
inline bool HeroWelfareCompensationProto_WelfareCompensationProto::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 HeroWelfareCompensationProto_WelfareCompensationProto::index() const {
  return index_;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
}

// optional string title = 2;
inline bool HeroWelfareCompensationProto_WelfareCompensationProto::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& HeroWelfareCompensationProto_WelfareCompensationProto::title() const {
  return *title_;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroWelfareCompensationProto_WelfareCompensationProto::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* HeroWelfareCompensationProto_WelfareCompensationProto::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 3;
inline bool HeroWelfareCompensationProto_WelfareCompensationProto::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& HeroWelfareCompensationProto_WelfareCompensationProto::content() const {
  return *content_;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroWelfareCompensationProto_WelfareCompensationProto::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* HeroWelfareCompensationProto_WelfareCompensationProto::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .app.message.PrizeProto prize = 4;
inline bool HeroWelfareCompensationProto_WelfareCompensationProto::has_prize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_has_prize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_has_prize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::clear_prize() {
  if (prize_ != NULL) prize_->::app::message::PrizeProto::Clear();
  clear_has_prize();
}
inline const ::app::message::PrizeProto& HeroWelfareCompensationProto_WelfareCompensationProto::prize() const {
  return prize_ != NULL ? *prize_ : *default_instance_->prize_;
}
inline ::app::message::PrizeProto* HeroWelfareCompensationProto_WelfareCompensationProto::mutable_prize() {
  set_has_prize();
  if (prize_ == NULL) prize_ = new ::app::message::PrizeProto;
  return prize_;
}
inline ::app::message::PrizeProto* HeroWelfareCompensationProto_WelfareCompensationProto::release_prize() {
  clear_has_prize();
  ::app::message::PrizeProto* temp = prize_;
  prize_ = NULL;
  return temp;
}
inline void HeroWelfareCompensationProto_WelfareCompensationProto::set_allocated_prize(::app::message::PrizeProto* prize) {
  delete prize_;
  prize_ = prize;
  if (prize) {
    set_has_prize();
  } else {
    clear_has_prize();
  }
}

// -------------------------------------------------------------------

// HeroWelfareCompensationProto

// optional .app.message.HeroWelfareCompensationProto.WelfareCompensationProto welfare = 1;
inline bool HeroWelfareCompensationProto::has_welfare() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroWelfareCompensationProto::set_has_welfare() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroWelfareCompensationProto::clear_has_welfare() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroWelfareCompensationProto::clear_welfare() {
  if (welfare_ != NULL) welfare_->::app::message::HeroWelfareCompensationProto_WelfareCompensationProto::Clear();
  clear_has_welfare();
}
inline const ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto& HeroWelfareCompensationProto::welfare() const {
  return welfare_ != NULL ? *welfare_ : *default_instance_->welfare_;
}
inline ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* HeroWelfareCompensationProto::mutable_welfare() {
  set_has_welfare();
  if (welfare_ == NULL) welfare_ = new ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto;
  return welfare_;
}
inline ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* HeroWelfareCompensationProto::release_welfare() {
  clear_has_welfare();
  ::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* temp = welfare_;
  welfare_ = NULL;
  return temp;
}
inline void HeroWelfareCompensationProto::set_allocated_welfare(::app::message::HeroWelfareCompensationProto_WelfareCompensationProto* welfare) {
  delete welfare_;
  welfare_ = welfare;
  if (welfare) {
    set_has_welfare();
  } else {
    clear_has_welfare();
  }
}

// optional int64 expireTime = 2;
inline bool HeroWelfareCompensationProto::has_expiretime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroWelfareCompensationProto::set_has_expiretime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroWelfareCompensationProto::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroWelfareCompensationProto::clear_expiretime() {
  expiretime_ = GOOGLE_LONGLONG(0);
  clear_has_expiretime();
}
inline ::google::protobuf::int64 HeroWelfareCompensationProto::expiretime() const {
  return expiretime_;
}
inline void HeroWelfareCompensationProto::set_expiretime(::google::protobuf::int64 value) {
  set_has_expiretime();
  expiretime_ = value;
}

// -------------------------------------------------------------------

// LingYuProto

// optional int32 index = 1;
inline bool LingYuProto::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LingYuProto::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LingYuProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LingYuProto::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 LingYuProto::index() const {
  return index_;
}
inline void LingYuProto::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated int32 typeLevel = 2;
inline int LingYuProto::typelevel_size() const {
  return typelevel_.size();
}
inline void LingYuProto::clear_typelevel() {
  typelevel_.Clear();
}
inline ::google::protobuf::int32 LingYuProto::typelevel(int index) const {
  return typelevel_.Get(index);
}
inline void LingYuProto::set_typelevel(int index, ::google::protobuf::int32 value) {
  typelevel_.Set(index, value);
}
inline void LingYuProto::add_typelevel(::google::protobuf::int32 value) {
  typelevel_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LingYuProto::typelevel() const {
  return typelevel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LingYuProto::mutable_typelevel() {
  return &typelevel_;
}

// optional int32 usingType = 3;
inline bool LingYuProto::has_usingtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LingYuProto::set_has_usingtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LingYuProto::clear_has_usingtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LingYuProto::clear_usingtype() {
  usingtype_ = 0;
  clear_has_usingtype();
}
inline ::google::protobuf::int32 LingYuProto::usingtype() const {
  return usingtype_;
}
inline void LingYuProto::set_usingtype(::google::protobuf::int32 value) {
  set_has_usingtype();
  usingtype_ = value;
}

// optional int32 bless_amount = 10;
inline bool LingYuProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LingYuProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LingYuProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LingYuProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 LingYuProto::bless_amount() const {
  return bless_amount_;
}
inline void LingYuProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 11;
inline bool LingYuProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LingYuProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LingYuProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LingYuProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 LingYuProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void LingYuProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int32 qian_neng_use_count = 12;
inline bool LingYuProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LingYuProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LingYuProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LingYuProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 LingYuProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void LingYuProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 13;
inline bool LingYuProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LingYuProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LingYuProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LingYuProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 LingYuProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void LingYuProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional int32 upgrade_times = 14;
inline bool LingYuProto::has_upgrade_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LingYuProto::set_has_upgrade_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LingYuProto::clear_has_upgrade_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LingYuProto::clear_upgrade_times() {
  upgrade_times_ = 0;
  clear_has_upgrade_times();
}
inline ::google::protobuf::int32 LingYuProto::upgrade_times() const {
  return upgrade_times_;
}
inline void LingYuProto::set_upgrade_times(::google::protobuf::int32 value) {
  set_has_upgrade_times();
  upgrade_times_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 15;
inline bool LingYuProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LingYuProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LingYuProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LingYuProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 LingYuProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void LingYuProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 16;
inline bool LingYuProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LingYuProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LingYuProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LingYuProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 LingYuProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void LingYuProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 17;
inline bool LingYuProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LingYuProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LingYuProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LingYuProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 LingYuProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void LingYuProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 18;
inline bool LingYuProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LingYuProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LingYuProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LingYuProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 LingYuProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void LingYuProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// TongTianBaoJianTaskProto

// optional int32 id = 1;
inline bool TongTianBaoJianTaskProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TongTianBaoJianTaskProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TongTianBaoJianTaskProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TongTianBaoJianTaskProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TongTianBaoJianTaskProto::id() const {
  return id_;
}
inline void TongTianBaoJianTaskProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string task_name = 2;
inline bool TongTianBaoJianTaskProto::has_task_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TongTianBaoJianTaskProto::set_has_task_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TongTianBaoJianTaskProto::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TongTianBaoJianTaskProto::clear_task_name() {
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    task_name_->clear();
  }
  clear_has_task_name();
}
inline const ::std::string& TongTianBaoJianTaskProto::task_name() const {
  return *task_name_;
}
inline void TongTianBaoJianTaskProto::set_task_name(const ::std::string& value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
}
inline void TongTianBaoJianTaskProto::set_task_name(const char* value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
}
inline void TongTianBaoJianTaskProto::set_task_name(const char* value, size_t size) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TongTianBaoJianTaskProto::mutable_task_name() {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  return task_name_;
}
inline ::std::string* TongTianBaoJianTaskProto::release_task_name() {
  clear_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_name_;
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TongTianBaoJianTaskProto::set_allocated_task_name(::std::string* task_name) {
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_;
  }
  if (task_name) {
    set_has_task_name();
    task_name_ = task_name;
  } else {
    clear_has_task_name();
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 goal_target = 3;
inline bool TongTianBaoJianTaskProto::has_goal_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TongTianBaoJianTaskProto::set_has_goal_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TongTianBaoJianTaskProto::clear_has_goal_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TongTianBaoJianTaskProto::clear_goal_target() {
  goal_target_ = 0;
  clear_has_goal_target();
}
inline ::google::protobuf::int32 TongTianBaoJianTaskProto::goal_target() const {
  return goal_target_;
}
inline void TongTianBaoJianTaskProto::set_goal_target(::google::protobuf::int32 value) {
  set_has_goal_target();
  goal_target_ = value;
}

// optional string desc = 4;
inline bool TongTianBaoJianTaskProto::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TongTianBaoJianTaskProto::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TongTianBaoJianTaskProto::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TongTianBaoJianTaskProto::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& TongTianBaoJianTaskProto::desc() const {
  return *desc_;
}
inline void TongTianBaoJianTaskProto::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void TongTianBaoJianTaskProto::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void TongTianBaoJianTaskProto::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TongTianBaoJianTaskProto::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* TongTianBaoJianTaskProto::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TongTianBaoJianTaskProto::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 5;
inline bool TongTianBaoJianTaskProto::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TongTianBaoJianTaskProto::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TongTianBaoJianTaskProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TongTianBaoJianTaskProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TongTianBaoJianTaskProto::type() const {
  return type_;
}
inline void TongTianBaoJianTaskProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// DefenceDungeonStateClientProto

// optional int32 dungeon_id = 1;
inline bool DefenceDungeonStateClientProto::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DefenceDungeonStateClientProto::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DefenceDungeonStateClientProto::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DefenceDungeonStateClientProto::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 DefenceDungeonStateClientProto::dungeon_id() const {
  return dungeon_id_;
}
inline void DefenceDungeonStateClientProto::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
}

// optional int32 defence_today_finished_batch = 2;
inline bool DefenceDungeonStateClientProto::has_defence_today_finished_batch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DefenceDungeonStateClientProto::set_has_defence_today_finished_batch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DefenceDungeonStateClientProto::clear_has_defence_today_finished_batch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DefenceDungeonStateClientProto::clear_defence_today_finished_batch() {
  defence_today_finished_batch_ = 0;
  clear_has_defence_today_finished_batch();
}
inline ::google::protobuf::int32 DefenceDungeonStateClientProto::defence_today_finished_batch() const {
  return defence_today_finished_batch_;
}
inline void DefenceDungeonStateClientProto::set_defence_today_finished_batch(::google::protobuf::int32 value) {
  set_has_defence_today_finished_batch();
  defence_today_finished_batch_ = value;
}

// optional int32 defence_history_max_batch = 3;
inline bool DefenceDungeonStateClientProto::has_defence_history_max_batch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DefenceDungeonStateClientProto::set_has_defence_history_max_batch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DefenceDungeonStateClientProto::clear_has_defence_history_max_batch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DefenceDungeonStateClientProto::clear_defence_history_max_batch() {
  defence_history_max_batch_ = 0;
  clear_has_defence_history_max_batch();
}
inline ::google::protobuf::int32 DefenceDungeonStateClientProto::defence_history_max_batch() const {
  return defence_history_max_batch_;
}
inline void DefenceDungeonStateClientProto::set_defence_history_max_batch(::google::protobuf::int32 value) {
  set_has_defence_history_max_batch();
  defence_history_max_batch_ = value;
}

// optional int32 defence_collected_first_pass_prize = 5;
inline bool DefenceDungeonStateClientProto::has_defence_collected_first_pass_prize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DefenceDungeonStateClientProto::set_has_defence_collected_first_pass_prize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DefenceDungeonStateClientProto::clear_has_defence_collected_first_pass_prize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DefenceDungeonStateClientProto::clear_defence_collected_first_pass_prize() {
  defence_collected_first_pass_prize_ = 0;
  clear_has_defence_collected_first_pass_prize();
}
inline ::google::protobuf::int32 DefenceDungeonStateClientProto::defence_collected_first_pass_prize() const {
  return defence_collected_first_pass_prize_;
}
inline void DefenceDungeonStateClientProto::set_defence_collected_first_pass_prize(::google::protobuf::int32 value) {
  set_has_defence_collected_first_pass_prize();
  defence_collected_first_pass_prize_ = value;
}

// repeated bytes defence_collectable_prize = 6;
inline int DefenceDungeonStateClientProto::defence_collectable_prize_size() const {
  return defence_collectable_prize_.size();
}
inline void DefenceDungeonStateClientProto::clear_defence_collectable_prize() {
  defence_collectable_prize_.Clear();
}
inline const ::std::string& DefenceDungeonStateClientProto::defence_collectable_prize(int index) const {
  return defence_collectable_prize_.Get(index);
}
inline ::std::string* DefenceDungeonStateClientProto::mutable_defence_collectable_prize(int index) {
  return defence_collectable_prize_.Mutable(index);
}
inline void DefenceDungeonStateClientProto::set_defence_collectable_prize(int index, const ::std::string& value) {
  defence_collectable_prize_.Mutable(index)->assign(value);
}
inline void DefenceDungeonStateClientProto::set_defence_collectable_prize(int index, const char* value) {
  defence_collectable_prize_.Mutable(index)->assign(value);
}
inline void DefenceDungeonStateClientProto::set_defence_collectable_prize(int index, const void* value, size_t size) {
  defence_collectable_prize_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DefenceDungeonStateClientProto::add_defence_collectable_prize() {
  return defence_collectable_prize_.Add();
}
inline void DefenceDungeonStateClientProto::add_defence_collectable_prize(const ::std::string& value) {
  defence_collectable_prize_.Add()->assign(value);
}
inline void DefenceDungeonStateClientProto::add_defence_collectable_prize(const char* value) {
  defence_collectable_prize_.Add()->assign(value);
}
inline void DefenceDungeonStateClientProto::add_defence_collectable_prize(const void* value, size_t size) {
  defence_collectable_prize_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DefenceDungeonStateClientProto::defence_collectable_prize() const {
  return defence_collectable_prize_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DefenceDungeonStateClientProto::mutable_defence_collectable_prize() {
  return &defence_collectable_prize_;
}

// -------------------------------------------------------------------

// HugeDataProto

// optional int32 total_login_day = 1;
inline bool HugeDataProto::has_total_login_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HugeDataProto::set_has_total_login_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HugeDataProto::clear_has_total_login_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HugeDataProto::clear_total_login_day() {
  total_login_day_ = 0;
  clear_has_total_login_day();
}
inline ::google::protobuf::int32 HugeDataProto::total_login_day() const {
  return total_login_day_;
}
inline void HugeDataProto::set_total_login_day(::google::protobuf::int32 value) {
  set_has_total_login_day();
  total_login_day_ = value;
}

// optional int32 total_login_time = 2;
inline bool HugeDataProto::has_total_login_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HugeDataProto::set_has_total_login_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HugeDataProto::clear_has_total_login_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HugeDataProto::clear_total_login_time() {
  total_login_time_ = 0;
  clear_has_total_login_time();
}
inline ::google::protobuf::int32 HugeDataProto::total_login_time() const {
  return total_login_time_;
}
inline void HugeDataProto::set_total_login_time(::google::protobuf::int32 value) {
  set_has_total_login_time();
  total_login_time_ = value;
}

// optional int32 fighting_amount = 3;
inline bool HugeDataProto::has_fighting_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HugeDataProto::set_has_fighting_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HugeDataProto::clear_has_fighting_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HugeDataProto::clear_fighting_amount() {
  fighting_amount_ = 0;
  clear_has_fighting_amount();
}
inline ::google::protobuf::int32 HugeDataProto::fighting_amount() const {
  return fighting_amount_;
}
inline void HugeDataProto::set_fighting_amount(::google::protobuf::int32 value) {
  set_has_fighting_amount();
  fighting_amount_ = value;
}

// optional int32 total_auction_yuanbao = 4;
inline bool HugeDataProto::has_total_auction_yuanbao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HugeDataProto::set_has_total_auction_yuanbao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HugeDataProto::clear_has_total_auction_yuanbao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HugeDataProto::clear_total_auction_yuanbao() {
  total_auction_yuanbao_ = 0;
  clear_has_total_auction_yuanbao();
}
inline ::google::protobuf::int32 HugeDataProto::total_auction_yuanbao() const {
  return total_auction_yuanbao_;
}
inline void HugeDataProto::set_total_auction_yuanbao(::google::protobuf::int32 value) {
  set_has_total_auction_yuanbao();
  total_auction_yuanbao_ = value;
}

// optional int32 total_long_cheng = 5;
inline bool HugeDataProto::has_total_long_cheng() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HugeDataProto::set_has_total_long_cheng() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HugeDataProto::clear_has_total_long_cheng() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HugeDataProto::clear_total_long_cheng() {
  total_long_cheng_ = 0;
  clear_has_total_long_cheng();
}
inline ::google::protobuf::int32 HugeDataProto::total_long_cheng() const {
  return total_long_cheng_;
}
inline void HugeDataProto::set_total_long_cheng(::google::protobuf::int32 value) {
  set_has_total_long_cheng();
  total_long_cheng_ = value;
}

// optional int32 total_wu_shuang = 6;
inline bool HugeDataProto::has_total_wu_shuang() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HugeDataProto::set_has_total_wu_shuang() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HugeDataProto::clear_has_total_wu_shuang() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HugeDataProto::clear_total_wu_shuang() {
  total_wu_shuang_ = 0;
  clear_has_total_wu_shuang();
}
inline ::google::protobuf::int32 HugeDataProto::total_wu_shuang() const {
  return total_wu_shuang_;
}
inline void HugeDataProto::set_total_wu_shuang(::google::protobuf::int32 value) {
  set_has_total_wu_shuang();
  total_wu_shuang_ = value;
}

// optional int32 level = 7;
inline bool HugeDataProto::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HugeDataProto::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HugeDataProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HugeDataProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 HugeDataProto::level() const {
  return level_;
}
inline void HugeDataProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 enemy_num = 8;
inline bool HugeDataProto::has_enemy_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HugeDataProto::set_has_enemy_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HugeDataProto::clear_has_enemy_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HugeDataProto::clear_enemy_num() {
  enemy_num_ = 0;
  clear_has_enemy_num();
}
inline ::google::protobuf::int32 HugeDataProto::enemy_num() const {
  return enemy_num_;
}
inline void HugeDataProto::set_enemy_num(::google::protobuf::int32 value) {
  set_has_enemy_num();
  enemy_num_ = value;
}

// optional int32 total_ling_di = 9;
inline bool HugeDataProto::has_total_ling_di() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HugeDataProto::set_has_total_ling_di() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HugeDataProto::clear_has_total_ling_di() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HugeDataProto::clear_total_ling_di() {
  total_ling_di_ = 0;
  clear_has_total_ling_di();
}
inline ::google::protobuf::int32 HugeDataProto::total_ling_di() const {
  return total_ling_di_;
}
inline void HugeDataProto::set_total_ling_di(::google::protobuf::int32 value) {
  set_has_total_ling_di();
  total_ling_di_ = value;
}

// optional int64 create_time = 10;
inline bool HugeDataProto::has_create_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HugeDataProto::set_has_create_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HugeDataProto::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HugeDataProto::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 HugeDataProto::create_time() const {
  return create_time_;
}
inline void HugeDataProto::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional .app.message.GoodsWrapperProto huge_data_prize = 11;
inline bool HugeDataProto::has_huge_data_prize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HugeDataProto::set_has_huge_data_prize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HugeDataProto::clear_has_huge_data_prize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HugeDataProto::clear_huge_data_prize() {
  if (huge_data_prize_ != NULL) huge_data_prize_->::app::message::GoodsWrapperProto::Clear();
  clear_has_huge_data_prize();
}
inline const ::app::message::GoodsWrapperProto& HugeDataProto::huge_data_prize() const {
  return huge_data_prize_ != NULL ? *huge_data_prize_ : *default_instance_->huge_data_prize_;
}
inline ::app::message::GoodsWrapperProto* HugeDataProto::mutable_huge_data_prize() {
  set_has_huge_data_prize();
  if (huge_data_prize_ == NULL) huge_data_prize_ = new ::app::message::GoodsWrapperProto;
  return huge_data_prize_;
}
inline ::app::message::GoodsWrapperProto* HugeDataProto::release_huge_data_prize() {
  clear_has_huge_data_prize();
  ::app::message::GoodsWrapperProto* temp = huge_data_prize_;
  huge_data_prize_ = NULL;
  return temp;
}
inline void HugeDataProto::set_allocated_huge_data_prize(::app::message::GoodsWrapperProto* huge_data_prize) {
  delete huge_data_prize_;
  huge_data_prize_ = huge_data_prize;
  if (huge_data_prize) {
    set_has_huge_data_prize();
  } else {
    clear_has_huge_data_prize();
  }
}

// -------------------------------------------------------------------

// NiDaoQianKunClient

// optional .app.message.SpriteStatProto sprite_stat = 1;
inline bool NiDaoQianKunClient::has_sprite_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NiDaoQianKunClient::set_has_sprite_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NiDaoQianKunClient::clear_has_sprite_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NiDaoQianKunClient::clear_sprite_stat() {
  if (sprite_stat_ != NULL) sprite_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_sprite_stat();
}
inline const ::app::message::SpriteStatProto& NiDaoQianKunClient::sprite_stat() const {
  return sprite_stat_ != NULL ? *sprite_stat_ : *default_instance_->sprite_stat_;
}
inline ::app::message::SpriteStatProto* NiDaoQianKunClient::mutable_sprite_stat() {
  set_has_sprite_stat();
  if (sprite_stat_ == NULL) sprite_stat_ = new ::app::message::SpriteStatProto;
  return sprite_stat_;
}
inline ::app::message::SpriteStatProto* NiDaoQianKunClient::release_sprite_stat() {
  clear_has_sprite_stat();
  ::app::message::SpriteStatProto* temp = sprite_stat_;
  sprite_stat_ = NULL;
  return temp;
}
inline void NiDaoQianKunClient::set_allocated_sprite_stat(::app::message::SpriteStatProto* sprite_stat) {
  delete sprite_stat_;
  sprite_stat_ = sprite_stat;
  if (sprite_stat) {
    set_has_sprite_stat();
  } else {
    clear_has_sprite_stat();
  }
}

// optional int32 total_use_count = 2;
inline bool NiDaoQianKunClient::has_total_use_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NiDaoQianKunClient::set_has_total_use_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NiDaoQianKunClient::clear_has_total_use_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NiDaoQianKunClient::clear_total_use_count() {
  total_use_count_ = 0;
  clear_has_total_use_count();
}
inline ::google::protobuf::int32 NiDaoQianKunClient::total_use_count() const {
  return total_use_count_;
}
inline void NiDaoQianKunClient::set_total_use_count(::google::protobuf::int32 value) {
  set_has_total_use_count();
  total_use_count_ = value;
}

// -------------------------------------------------------------------

// MoBingProto

// repeated .app.message.MoBingStatProto mo_bing_stat = 1;
inline int MoBingProto::mo_bing_stat_size() const {
  return mo_bing_stat_.size();
}
inline void MoBingProto::clear_mo_bing_stat() {
  mo_bing_stat_.Clear();
}
inline const ::app::message::MoBingStatProto& MoBingProto::mo_bing_stat(int index) const {
  return mo_bing_stat_.Get(index);
}
inline ::app::message::MoBingStatProto* MoBingProto::mutable_mo_bing_stat(int index) {
  return mo_bing_stat_.Mutable(index);
}
inline ::app::message::MoBingStatProto* MoBingProto::add_mo_bing_stat() {
  return mo_bing_stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::MoBingStatProto >&
MoBingProto::mo_bing_stat() const {
  return mo_bing_stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::MoBingStatProto >*
MoBingProto::mutable_mo_bing_stat() {
  return &mo_bing_stat_;
}

// repeated int32 mo_bing_equip_type = 2;
inline int MoBingProto::mo_bing_equip_type_size() const {
  return mo_bing_equip_type_.size();
}
inline void MoBingProto::clear_mo_bing_equip_type() {
  mo_bing_equip_type_.Clear();
}
inline ::google::protobuf::int32 MoBingProto::mo_bing_equip_type(int index) const {
  return mo_bing_equip_type_.Get(index);
}
inline void MoBingProto::set_mo_bing_equip_type(int index, ::google::protobuf::int32 value) {
  mo_bing_equip_type_.Set(index, value);
}
inline void MoBingProto::add_mo_bing_equip_type(::google::protobuf::int32 value) {
  mo_bing_equip_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MoBingProto::mo_bing_equip_type() const {
  return mo_bing_equip_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MoBingProto::mutable_mo_bing_equip_type() {
  return &mo_bing_equip_type_;
}

// optional int32 spell_point = 3;
inline bool MoBingProto::has_spell_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoBingProto::set_has_spell_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoBingProto::clear_has_spell_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoBingProto::clear_spell_point() {
  spell_point_ = 0;
  clear_has_spell_point();
}
inline ::google::protobuf::int32 MoBingProto::spell_point() const {
  return spell_point_;
}
inline void MoBingProto::set_spell_point(::google::protobuf::int32 value) {
  set_has_spell_point();
  spell_point_ = value;
}

// optional int64 start_time = 4;
inline bool MoBingProto::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoBingProto::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoBingProto::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoBingProto::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 MoBingProto::start_time() const {
  return start_time_;
}
inline void MoBingProto::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int64 end_time = 5;
inline bool MoBingProto::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoBingProto::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoBingProto::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoBingProto::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 MoBingProto::end_time() const {
  return end_time_;
}
inline void MoBingProto::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional bool has_collect_prize_today = 6;
inline bool MoBingProto::has_has_collect_prize_today() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoBingProto::set_has_has_collect_prize_today() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoBingProto::clear_has_has_collect_prize_today() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoBingProto::clear_has_collect_prize_today() {
  has_collect_prize_today_ = false;
  clear_has_has_collect_prize_today();
}
inline bool MoBingProto::has_collect_prize_today() const {
  return has_collect_prize_today_;
}
inline void MoBingProto::set_has_collect_prize_today(bool value) {
  set_has_has_collect_prize_today();
  has_collect_prize_today_ = value;
}

// -------------------------------------------------------------------

// MoBingStatProto

// optional int32 type = 1;
inline bool MoBingStatProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoBingStatProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoBingStatProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoBingStatProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MoBingStatProto::type() const {
  return type_;
}
inline void MoBingStatProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 level = 2;
inline bool MoBingStatProto::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoBingStatProto::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoBingStatProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoBingStatProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MoBingStatProto::level() const {
  return level_;
}
inline void MoBingStatProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 spell_type = 3;
inline int MoBingStatProto::spell_type_size() const {
  return spell_type_.size();
}
inline void MoBingStatProto::clear_spell_type() {
  spell_type_.Clear();
}
inline ::google::protobuf::int32 MoBingStatProto::spell_type(int index) const {
  return spell_type_.Get(index);
}
inline void MoBingStatProto::set_spell_type(int index, ::google::protobuf::int32 value) {
  spell_type_.Set(index, value);
}
inline void MoBingStatProto::add_spell_type(::google::protobuf::int32 value) {
  spell_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MoBingStatProto::spell_type() const {
  return spell_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MoBingStatProto::mutable_spell_type() {
  return &spell_type_;
}

// repeated int32 spell_level = 4;
inline int MoBingStatProto::spell_level_size() const {
  return spell_level_.size();
}
inline void MoBingStatProto::clear_spell_level() {
  spell_level_.Clear();
}
inline ::google::protobuf::int32 MoBingStatProto::spell_level(int index) const {
  return spell_level_.Get(index);
}
inline void MoBingStatProto::set_spell_level(int index, ::google::protobuf::int32 value) {
  spell_level_.Set(index, value);
}
inline void MoBingStatProto::add_spell_level(::google::protobuf::int32 value) {
  spell_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MoBingStatProto::spell_level() const {
  return spell_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MoBingStatProto::mutable_spell_level() {
  return &spell_level_;
}

// optional .app.message.MoBingBlessProto bless_proto = 5;
inline bool MoBingStatProto::has_bless_proto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoBingStatProto::set_has_bless_proto() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoBingStatProto::clear_has_bless_proto() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoBingStatProto::clear_bless_proto() {
  if (bless_proto_ != NULL) bless_proto_->::app::message::MoBingBlessProto::Clear();
  clear_has_bless_proto();
}
inline const ::app::message::MoBingBlessProto& MoBingStatProto::bless_proto() const {
  return bless_proto_ != NULL ? *bless_proto_ : *default_instance_->bless_proto_;
}
inline ::app::message::MoBingBlessProto* MoBingStatProto::mutable_bless_proto() {
  set_has_bless_proto();
  if (bless_proto_ == NULL) bless_proto_ = new ::app::message::MoBingBlessProto;
  return bless_proto_;
}
inline ::app::message::MoBingBlessProto* MoBingStatProto::release_bless_proto() {
  clear_has_bless_proto();
  ::app::message::MoBingBlessProto* temp = bless_proto_;
  bless_proto_ = NULL;
  return temp;
}
inline void MoBingStatProto::set_allocated_bless_proto(::app::message::MoBingBlessProto* bless_proto) {
  delete bless_proto_;
  bless_proto_ = bless_proto;
  if (bless_proto) {
    set_has_bless_proto();
  } else {
    clear_has_bless_proto();
  }
}

// -------------------------------------------------------------------

// MoBingBlessProto

// optional int32 upgrade_times = 1;
inline bool MoBingBlessProto::has_upgrade_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoBingBlessProto::set_has_upgrade_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoBingBlessProto::clear_has_upgrade_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoBingBlessProto::clear_upgrade_times() {
  upgrade_times_ = 0;
  clear_has_upgrade_times();
}
inline ::google::protobuf::int32 MoBingBlessProto::upgrade_times() const {
  return upgrade_times_;
}
inline void MoBingBlessProto::set_upgrade_times(::google::protobuf::int32 value) {
  set_has_upgrade_times();
  upgrade_times_ = value;
}

// optional int32 bless_amount = 2;
inline bool MoBingBlessProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoBingBlessProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoBingBlessProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoBingBlessProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 MoBingBlessProto::bless_amount() const {
  return bless_amount_;
}
inline void MoBingBlessProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 3;
inline bool MoBingBlessProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoBingBlessProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoBingBlessProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoBingBlessProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 MoBingBlessProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void MoBingBlessProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int32 bless_his_max_amount = 4;
inline bool MoBingBlessProto::has_bless_his_max_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoBingBlessProto::set_has_bless_his_max_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoBingBlessProto::clear_has_bless_his_max_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoBingBlessProto::clear_bless_his_max_amount() {
  bless_his_max_amount_ = 0;
  clear_has_bless_his_max_amount();
}
inline ::google::protobuf::int32 MoBingBlessProto::bless_his_max_amount() const {
  return bless_his_max_amount_;
}
inline void MoBingBlessProto::set_bless_his_max_amount(::google::protobuf::int32 value) {
  set_has_bless_his_max_amount();
  bless_his_max_amount_ = value;
}

// optional int32 add_bless_clear_time_count = 5;
inline bool MoBingBlessProto::has_add_bless_clear_time_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoBingBlessProto::set_has_add_bless_clear_time_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoBingBlessProto::clear_has_add_bless_clear_time_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoBingBlessProto::clear_add_bless_clear_time_count() {
  add_bless_clear_time_count_ = 0;
  clear_has_add_bless_clear_time_count();
}
inline ::google::protobuf::int32 MoBingBlessProto::add_bless_clear_time_count() const {
  return add_bless_clear_time_count_;
}
inline void MoBingBlessProto::set_add_bless_clear_time_count(::google::protobuf::int32 value) {
  set_has_add_bless_clear_time_count();
  add_bless_clear_time_count_ = value;
}

// -------------------------------------------------------------------

// DaoShiProto

// optional bytes redis_big_key = 1;
inline bool DaoShiProto::has_redis_big_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DaoShiProto::set_has_redis_big_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DaoShiProto::clear_has_redis_big_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DaoShiProto::clear_redis_big_key() {
  if (redis_big_key_ != &::google::protobuf::internal::kEmptyString) {
    redis_big_key_->clear();
  }
  clear_has_redis_big_key();
}
inline const ::std::string& DaoShiProto::redis_big_key() const {
  return *redis_big_key_;
}
inline void DaoShiProto::set_redis_big_key(const ::std::string& value) {
  set_has_redis_big_key();
  if (redis_big_key_ == &::google::protobuf::internal::kEmptyString) {
    redis_big_key_ = new ::std::string;
  }
  redis_big_key_->assign(value);
}
inline void DaoShiProto::set_redis_big_key(const char* value) {
  set_has_redis_big_key();
  if (redis_big_key_ == &::google::protobuf::internal::kEmptyString) {
    redis_big_key_ = new ::std::string;
  }
  redis_big_key_->assign(value);
}
inline void DaoShiProto::set_redis_big_key(const void* value, size_t size) {
  set_has_redis_big_key();
  if (redis_big_key_ == &::google::protobuf::internal::kEmptyString) {
    redis_big_key_ = new ::std::string;
  }
  redis_big_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DaoShiProto::mutable_redis_big_key() {
  set_has_redis_big_key();
  if (redis_big_key_ == &::google::protobuf::internal::kEmptyString) {
    redis_big_key_ = new ::std::string;
  }
  return redis_big_key_;
}
inline ::std::string* DaoShiProto::release_redis_big_key() {
  clear_has_redis_big_key();
  if (redis_big_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = redis_big_key_;
    redis_big_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DaoShiProto::set_allocated_redis_big_key(::std::string* redis_big_key) {
  if (redis_big_key_ != &::google::protobuf::internal::kEmptyString) {
    delete redis_big_key_;
  }
  if (redis_big_key) {
    set_has_redis_big_key();
    redis_big_key_ = redis_big_key;
  } else {
    clear_has_redis_big_key();
    redis_big_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool has_applied = 2;
inline bool DaoShiProto::has_has_applied() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DaoShiProto::set_has_has_applied() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DaoShiProto::clear_has_has_applied() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DaoShiProto::clear_has_applied() {
  has_applied_ = false;
  clear_has_has_applied();
}
inline bool DaoShiProto::has_applied() const {
  return has_applied_;
}
inline void DaoShiProto::set_has_applied(bool value) {
  set_has_has_applied();
  has_applied_ = value;
}

// optional bool is_dao_shi = 3;
inline bool DaoShiProto::has_is_dao_shi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DaoShiProto::set_has_is_dao_shi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DaoShiProto::clear_has_is_dao_shi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DaoShiProto::clear_is_dao_shi() {
  is_dao_shi_ = false;
  clear_has_is_dao_shi();
}
inline bool DaoShiProto::is_dao_shi() const {
  return is_dao_shi_;
}
inline void DaoShiProto::set_is_dao_shi(bool value) {
  set_has_is_dao_shi();
  is_dao_shi_ = value;
}

// optional int32 login_days = 4;
inline bool DaoShiProto::has_login_days() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DaoShiProto::set_has_login_days() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DaoShiProto::clear_has_login_days() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DaoShiProto::clear_login_days() {
  login_days_ = 0;
  clear_has_login_days();
}
inline ::google::protobuf::int32 DaoShiProto::login_days() const {
  return login_days_;
}
inline void DaoShiProto::set_login_days(::google::protobuf::int32 value) {
  set_has_login_days();
  login_days_ = value;
}

// optional bool has_collected_login_prize = 5;
inline bool DaoShiProto::has_has_collected_login_prize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DaoShiProto::set_has_has_collected_login_prize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DaoShiProto::clear_has_has_collected_login_prize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DaoShiProto::clear_has_collected_login_prize() {
  has_collected_login_prize_ = false;
  clear_has_has_collected_login_prize();
}
inline bool DaoShiProto::has_collected_login_prize() const {
  return has_collected_login_prize_;
}
inline void DaoShiProto::set_has_collected_login_prize(bool value) {
  set_has_has_collected_login_prize();
  has_collected_login_prize_ = value;
}

// optional bool can_collect_wu_shuang_city_prize = 6;
inline bool DaoShiProto::has_can_collect_wu_shuang_city_prize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DaoShiProto::set_has_can_collect_wu_shuang_city_prize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DaoShiProto::clear_has_can_collect_wu_shuang_city_prize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DaoShiProto::clear_can_collect_wu_shuang_city_prize() {
  can_collect_wu_shuang_city_prize_ = false;
  clear_has_can_collect_wu_shuang_city_prize();
}
inline bool DaoShiProto::can_collect_wu_shuang_city_prize() const {
  return can_collect_wu_shuang_city_prize_;
}
inline void DaoShiProto::set_can_collect_wu_shuang_city_prize(bool value) {
  set_has_can_collect_wu_shuang_city_prize();
  can_collect_wu_shuang_city_prize_ = value;
}

// optional bool has_collected_wu_shuang_city_prize = 7;
inline bool DaoShiProto::has_has_collected_wu_shuang_city_prize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DaoShiProto::set_has_has_collected_wu_shuang_city_prize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DaoShiProto::clear_has_has_collected_wu_shuang_city_prize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DaoShiProto::clear_has_collected_wu_shuang_city_prize() {
  has_collected_wu_shuang_city_prize_ = false;
  clear_has_has_collected_wu_shuang_city_prize();
}
inline bool DaoShiProto::has_collected_wu_shuang_city_prize() const {
  return has_collected_wu_shuang_city_prize_;
}
inline void DaoShiProto::set_has_collected_wu_shuang_city_prize(bool value) {
  set_has_has_collected_wu_shuang_city_prize();
  has_collected_wu_shuang_city_prize_ = value;
}

// optional bool can_collect_long_city_prize = 8;
inline bool DaoShiProto::has_can_collect_long_city_prize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DaoShiProto::set_has_can_collect_long_city_prize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DaoShiProto::clear_has_can_collect_long_city_prize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DaoShiProto::clear_can_collect_long_city_prize() {
  can_collect_long_city_prize_ = false;
  clear_has_can_collect_long_city_prize();
}
inline bool DaoShiProto::can_collect_long_city_prize() const {
  return can_collect_long_city_prize_;
}
inline void DaoShiProto::set_can_collect_long_city_prize(bool value) {
  set_has_can_collect_long_city_prize();
  can_collect_long_city_prize_ = value;
}

// optional bool has_collected_long_city_prize = 9;
inline bool DaoShiProto::has_has_collected_long_city_prize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DaoShiProto::set_has_has_collected_long_city_prize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DaoShiProto::clear_has_has_collected_long_city_prize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DaoShiProto::clear_has_collected_long_city_prize() {
  has_collected_long_city_prize_ = false;
  clear_has_has_collected_long_city_prize();
}
inline bool DaoShiProto::has_collected_long_city_prize() const {
  return has_collected_long_city_prize_;
}
inline void DaoShiProto::set_has_collected_long_city_prize(bool value) {
  set_has_has_collected_long_city_prize();
  has_collected_long_city_prize_ = value;
}

// -------------------------------------------------------------------

// HeroJingJieProto

// repeated .app.message.HeroJingJieDataProto jing_jie = 1;
inline int HeroJingJieProto::jing_jie_size() const {
  return jing_jie_.size();
}
inline void HeroJingJieProto::clear_jing_jie() {
  jing_jie_.Clear();
}
inline const ::app::message::HeroJingJieDataProto& HeroJingJieProto::jing_jie(int index) const {
  return jing_jie_.Get(index);
}
inline ::app::message::HeroJingJieDataProto* HeroJingJieProto::mutable_jing_jie(int index) {
  return jing_jie_.Mutable(index);
}
inline ::app::message::HeroJingJieDataProto* HeroJingJieProto::add_jing_jie() {
  return jing_jie_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::HeroJingJieDataProto >&
HeroJingJieProto::jing_jie() const {
  return jing_jie_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::HeroJingJieDataProto >*
HeroJingJieProto::mutable_jing_jie() {
  return &jing_jie_;
}

// -------------------------------------------------------------------

// HeroJingJieDataProto

// optional int32 jing_jie_id = 1;
inline bool HeroJingJieDataProto::has_jing_jie_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroJingJieDataProto::set_has_jing_jie_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroJingJieDataProto::clear_has_jing_jie_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroJingJieDataProto::clear_jing_jie_id() {
  jing_jie_id_ = 0;
  clear_has_jing_jie_id();
}
inline ::google::protobuf::int32 HeroJingJieDataProto::jing_jie_id() const {
  return jing_jie_id_;
}
inline void HeroJingJieDataProto::set_jing_jie_id(::google::protobuf::int32 value) {
  set_has_jing_jie_id();
  jing_jie_id_ = value;
}

// optional int32 jing_jie_big_level = 2;
inline bool HeroJingJieDataProto::has_jing_jie_big_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroJingJieDataProto::set_has_jing_jie_big_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroJingJieDataProto::clear_has_jing_jie_big_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroJingJieDataProto::clear_jing_jie_big_level() {
  jing_jie_big_level_ = 0;
  clear_has_jing_jie_big_level();
}
inline ::google::protobuf::int32 HeroJingJieDataProto::jing_jie_big_level() const {
  return jing_jie_big_level_;
}
inline void HeroJingJieDataProto::set_jing_jie_big_level(::google::protobuf::int32 value) {
  set_has_jing_jie_big_level();
  jing_jie_big_level_ = value;
}

// optional int32 jing_jie_small_level = 3;
inline bool HeroJingJieDataProto::has_jing_jie_small_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroJingJieDataProto::set_has_jing_jie_small_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroJingJieDataProto::clear_has_jing_jie_small_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroJingJieDataProto::clear_jing_jie_small_level() {
  jing_jie_small_level_ = 0;
  clear_has_jing_jie_small_level();
}
inline ::google::protobuf::int32 HeroJingJieDataProto::jing_jie_small_level() const {
  return jing_jie_small_level_;
}
inline void HeroJingJieDataProto::set_jing_jie_small_level(::google::protobuf::int32 value) {
  set_has_jing_jie_small_level();
  jing_jie_small_level_ = value;
}

// optional int32 today_collect_long_yuan_count = 4;
inline bool HeroJingJieDataProto::has_today_collect_long_yuan_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroJingJieDataProto::set_has_today_collect_long_yuan_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroJingJieDataProto::clear_has_today_collect_long_yuan_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroJingJieDataProto::clear_today_collect_long_yuan_count() {
  today_collect_long_yuan_count_ = 0;
  clear_has_today_collect_long_yuan_count();
}
inline ::google::protobuf::int32 HeroJingJieDataProto::today_collect_long_yuan_count() const {
  return today_collect_long_yuan_count_;
}
inline void HeroJingJieDataProto::set_today_collect_long_yuan_count(::google::protobuf::int32 value) {
  set_has_today_collect_long_yuan_count();
  today_collect_long_yuan_count_ = value;
}

// optional int64 next_collect_long_yuan_time = 5;
inline bool HeroJingJieDataProto::has_next_collect_long_yuan_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroJingJieDataProto::set_has_next_collect_long_yuan_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroJingJieDataProto::clear_has_next_collect_long_yuan_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroJingJieDataProto::clear_next_collect_long_yuan_time() {
  next_collect_long_yuan_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_collect_long_yuan_time();
}
inline ::google::protobuf::int64 HeroJingJieDataProto::next_collect_long_yuan_time() const {
  return next_collect_long_yuan_time_;
}
inline void HeroJingJieDataProto::set_next_collect_long_yuan_time(::google::protobuf::int64 value) {
  set_has_next_collect_long_yuan_time();
  next_collect_long_yuan_time_ = value;
}

// -------------------------------------------------------------------

// GuildDungeonCollectedPrizeProto

// optional int64 expire_time = 1;
inline bool GuildDungeonCollectedPrizeProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildDungeonCollectedPrizeProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildDungeonCollectedPrizeProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildDungeonCollectedPrizeProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 GuildDungeonCollectedPrizeProto::expire_time() const {
  return expire_time_;
}
inline void GuildDungeonCollectedPrizeProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// repeated int32 collected_prize = 2;
inline int GuildDungeonCollectedPrizeProto::collected_prize_size() const {
  return collected_prize_.size();
}
inline void GuildDungeonCollectedPrizeProto::clear_collected_prize() {
  collected_prize_.Clear();
}
inline ::google::protobuf::int32 GuildDungeonCollectedPrizeProto::collected_prize(int index) const {
  return collected_prize_.Get(index);
}
inline void GuildDungeonCollectedPrizeProto::set_collected_prize(int index, ::google::protobuf::int32 value) {
  collected_prize_.Set(index, value);
}
inline void GuildDungeonCollectedPrizeProto::add_collected_prize(::google::protobuf::int32 value) {
  collected_prize_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GuildDungeonCollectedPrizeProto::collected_prize() const {
  return collected_prize_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GuildDungeonCollectedPrizeProto::mutable_collected_prize() {
  return &collected_prize_;
}

// -------------------------------------------------------------------

// ShouCangProto

// repeated int32 type = 1;
inline int ShouCangProto::type_size() const {
  return type_.size();
}
inline void ShouCangProto::clear_type() {
  type_.Clear();
}
inline ::google::protobuf::int32 ShouCangProto::type(int index) const {
  return type_.Get(index);
}
inline void ShouCangProto::set_type(int index, ::google::protobuf::int32 value) {
  type_.Set(index, value);
}
inline void ShouCangProto::add_type(::google::protobuf::int32 value) {
  type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShouCangProto::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShouCangProto::mutable_type() {
  return &type_;
}

// repeated int32 level = 2;
inline int ShouCangProto::level_size() const {
  return level_.size();
}
inline void ShouCangProto::clear_level() {
  level_.Clear();
}
inline ::google::protobuf::int32 ShouCangProto::level(int index) const {
  return level_.Get(index);
}
inline void ShouCangProto::set_level(int index, ::google::protobuf::int32 value) {
  level_.Set(index, value);
}
inline void ShouCangProto::add_level(::google::protobuf::int32 value) {
  level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShouCangProto::level() const {
  return level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShouCangProto::mutable_level() {
  return &level_;
}

// -------------------------------------------------------------------

// AchievementProto

// optional int32 achieved_type = 1;
inline bool AchievementProto::has_achieved_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchievementProto::set_has_achieved_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchievementProto::clear_has_achieved_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchievementProto::clear_achieved_type() {
  achieved_type_ = 0;
  clear_has_achieved_type();
}
inline ::google::protobuf::int32 AchievementProto::achieved_type() const {
  return achieved_type_;
}
inline void AchievementProto::set_achieved_type(::google::protobuf::int32 value) {
  set_has_achieved_type();
  achieved_type_ = value;
}

// optional int32 achieved_id = 2;
inline bool AchievementProto::has_achieved_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchievementProto::set_has_achieved_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchievementProto::clear_has_achieved_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchievementProto::clear_achieved_id() {
  achieved_id_ = 0;
  clear_has_achieved_id();
}
inline ::google::protobuf::int32 AchievementProto::achieved_id() const {
  return achieved_id_;
}
inline void AchievementProto::set_achieved_id(::google::protobuf::int32 value) {
  set_has_achieved_id();
  achieved_id_ = value;
}

// optional int32 progress = 3;
inline bool AchievementProto::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchievementProto::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchievementProto::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchievementProto::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline ::google::protobuf::int32 AchievementProto::progress() const {
  return progress_;
}
inline void AchievementProto::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
}

// -------------------------------------------------------------------

// AchievementInfoProto

// repeated .app.message.AchievementProto achieved = 1;
inline int AchievementInfoProto::achieved_size() const {
  return achieved_.size();
}
inline void AchievementInfoProto::clear_achieved() {
  achieved_.Clear();
}
inline const ::app::message::AchievementProto& AchievementInfoProto::achieved(int index) const {
  return achieved_.Get(index);
}
inline ::app::message::AchievementProto* AchievementInfoProto::mutable_achieved(int index) {
  return achieved_.Mutable(index);
}
inline ::app::message::AchievementProto* AchievementInfoProto::add_achieved() {
  return achieved_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::AchievementProto >&
AchievementInfoProto::achieved() const {
  return achieved_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::AchievementProto >*
AchievementInfoProto::mutable_achieved() {
  return &achieved_;
}

// optional int32 achievement_points = 2;
inline bool AchievementInfoProto::has_achievement_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchievementInfoProto::set_has_achievement_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchievementInfoProto::clear_has_achievement_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchievementInfoProto::clear_achievement_points() {
  achievement_points_ = 0;
  clear_has_achievement_points();
}
inline ::google::protobuf::int32 AchievementInfoProto::achievement_points() const {
  return achievement_points_;
}
inline void AchievementInfoProto::set_achievement_points(::google::protobuf::int32 value) {
  set_has_achievement_points();
  achievement_points_ = value;
}

// repeated int32 nickname_id = 21;
inline int AchievementInfoProto::nickname_id_size() const {
  return nickname_id_.size();
}
inline void AchievementInfoProto::clear_nickname_id() {
  nickname_id_.Clear();
}
inline ::google::protobuf::int32 AchievementInfoProto::nickname_id(int index) const {
  return nickname_id_.Get(index);
}
inline void AchievementInfoProto::set_nickname_id(int index, ::google::protobuf::int32 value) {
  nickname_id_.Set(index, value);
}
inline void AchievementInfoProto::add_nickname_id(::google::protobuf::int32 value) {
  nickname_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AchievementInfoProto::nickname_id() const {
  return nickname_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AchievementInfoProto::mutable_nickname_id() {
  return &nickname_id_;
}

// optional int32 using_nickname = 22;
inline bool AchievementInfoProto::has_using_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AchievementInfoProto::set_has_using_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AchievementInfoProto::clear_has_using_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AchievementInfoProto::clear_using_nickname() {
  using_nickname_ = 0;
  clear_has_using_nickname();
}
inline ::google::protobuf::int32 AchievementInfoProto::using_nickname() const {
  return using_nickname_;
}
inline void AchievementInfoProto::set_using_nickname(::google::protobuf::int32 value) {
  set_has_using_nickname();
  using_nickname_ = value;
}

// -------------------------------------------------------------------

// HeroSuperArmProto

// optional int32 id = 1;
inline bool HeroSuperArmProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroSuperArmProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroSuperArmProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroSuperArmProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HeroSuperArmProto::id() const {
  return id_;
}
inline void HeroSuperArmProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 resource = 5;
inline bool HeroSuperArmProto::has_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroSuperArmProto::set_has_resource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroSuperArmProto::clear_has_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroSuperArmProto::clear_resource() {
  resource_ = 0;
  clear_has_resource();
}
inline ::google::protobuf::int32 HeroSuperArmProto::resource() const {
  return resource_;
}
inline void HeroSuperArmProto::set_resource(::google::protobuf::int32 value) {
  set_has_resource();
  resource_ = value;
}

// optional int32 bless_amount = 10;
inline bool HeroSuperArmProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroSuperArmProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroSuperArmProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroSuperArmProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 HeroSuperArmProto::bless_amount() const {
  return bless_amount_;
}
inline void HeroSuperArmProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 11;
inline bool HeroSuperArmProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroSuperArmProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroSuperArmProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroSuperArmProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 HeroSuperArmProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void HeroSuperArmProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// repeated int32 spell_pos = 12;
inline int HeroSuperArmProto::spell_pos_size() const {
  return spell_pos_.size();
}
inline void HeroSuperArmProto::clear_spell_pos() {
  spell_pos_.Clear();
}
inline ::google::protobuf::int32 HeroSuperArmProto::spell_pos(int index) const {
  return spell_pos_.Get(index);
}
inline void HeroSuperArmProto::set_spell_pos(int index, ::google::protobuf::int32 value) {
  spell_pos_.Set(index, value);
}
inline void HeroSuperArmProto::add_spell_pos(::google::protobuf::int32 value) {
  spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroSuperArmProto::spell_pos() const {
  return spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroSuperArmProto::mutable_spell_pos() {
  return &spell_pos_;
}

// repeated .app.message.ActiveSpell spells = 13;
inline int HeroSuperArmProto::spells_size() const {
  return spells_.size();
}
inline void HeroSuperArmProto::clear_spells() {
  spells_.Clear();
}
inline const ::app::message::ActiveSpell& HeroSuperArmProto::spells(int index) const {
  return spells_.Get(index);
}
inline ::app::message::ActiveSpell* HeroSuperArmProto::mutable_spells(int index) {
  return spells_.Mutable(index);
}
inline ::app::message::ActiveSpell* HeroSuperArmProto::add_spells() {
  return spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
HeroSuperArmProto::spells() const {
  return spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
HeroSuperArmProto::mutable_spells() {
  return &spells_;
}

// optional int32 qian_neng_use_count = 21;
inline bool HeroSuperArmProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeroSuperArmProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeroSuperArmProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeroSuperArmProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 HeroSuperArmProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void HeroSuperArmProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool HeroSuperArmProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeroSuperArmProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeroSuperArmProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeroSuperArmProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 HeroSuperArmProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void HeroSuperArmProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional bool is_hide_huan_hua = 24;
inline bool HeroSuperArmProto::has_is_hide_huan_hua() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeroSuperArmProto::set_has_is_hide_huan_hua() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HeroSuperArmProto::clear_has_is_hide_huan_hua() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HeroSuperArmProto::clear_is_hide_huan_hua() {
  is_hide_huan_hua_ = false;
  clear_has_is_hide_huan_hua();
}
inline bool HeroSuperArmProto::is_hide_huan_hua() const {
  return is_hide_huan_hua_;
}
inline void HeroSuperArmProto::set_is_hide_huan_hua(bool value) {
  set_has_is_hide_huan_hua();
  is_hide_huan_hua_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool HeroSuperArmProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeroSuperArmProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HeroSuperArmProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HeroSuperArmProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 HeroSuperArmProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void HeroSuperArmProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool HeroSuperArmProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HeroSuperArmProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HeroSuperArmProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HeroSuperArmProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 HeroSuperArmProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void HeroSuperArmProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool HeroSuperArmProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HeroSuperArmProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HeroSuperArmProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HeroSuperArmProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 HeroSuperArmProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void HeroSuperArmProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool HeroSuperArmProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HeroSuperArmProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HeroSuperArmProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HeroSuperArmProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 HeroSuperArmProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void HeroSuperArmProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// PetProto

// optional .app.message.PetLevelProto data = 1;
inline bool PetProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetProto::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetProto::clear_data() {
  if (data_ != NULL) data_->::app::message::PetLevelProto::Clear();
  clear_has_data();
}
inline const ::app::message::PetLevelProto& PetProto::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::app::message::PetLevelProto* PetProto::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::app::message::PetLevelProto;
  return data_;
}
inline ::app::message::PetLevelProto* PetProto::release_data() {
  clear_has_data();
  ::app::message::PetLevelProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PetProto::set_allocated_data(::app::message::PetLevelProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional int32 added_max_life = 2;
inline bool PetProto::has_added_max_life() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetProto::set_has_added_max_life() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetProto::clear_has_added_max_life() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetProto::clear_added_max_life() {
  added_max_life_ = 0;
  clear_has_added_max_life();
}
inline ::google::protobuf::int32 PetProto::added_max_life() const {
  return added_max_life_;
}
inline void PetProto::set_added_max_life(::google::protobuf::int32 value) {
  set_has_added_max_life();
  added_max_life_ = value;
}

// optional int32 added_attack = 3;
inline bool PetProto::has_added_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetProto::set_has_added_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetProto::clear_has_added_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetProto::clear_added_attack() {
  added_attack_ = 0;
  clear_has_added_attack();
}
inline ::google::protobuf::int32 PetProto::added_attack() const {
  return added_attack_;
}
inline void PetProto::set_added_attack(::google::protobuf::int32 value) {
  set_has_added_attack();
  added_attack_ = value;
}

// optional int32 added_defence = 4;
inline bool PetProto::has_added_defence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetProto::set_has_added_defence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetProto::clear_has_added_defence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetProto::clear_added_defence() {
  added_defence_ = 0;
  clear_has_added_defence();
}
inline ::google::protobuf::int32 PetProto::added_defence() const {
  return added_defence_;
}
inline void PetProto::set_added_defence(::google::protobuf::int32 value) {
  set_has_added_defence();
  added_defence_ = value;
}

// optional int64 expire_time = 5;
inline bool PetProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 PetProto::expire_time() const {
  return expire_time_;
}
inline void PetProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// repeated int32 equipment_pos = 6;
inline int PetProto::equipment_pos_size() const {
  return equipment_pos_.size();
}
inline void PetProto::clear_equipment_pos() {
  equipment_pos_.Clear();
}
inline ::google::protobuf::int32 PetProto::equipment_pos(int index) const {
  return equipment_pos_.Get(index);
}
inline void PetProto::set_equipment_pos(int index, ::google::protobuf::int32 value) {
  equipment_pos_.Set(index, value);
}
inline void PetProto::add_equipment_pos(::google::protobuf::int32 value) {
  equipment_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PetProto::equipment_pos() const {
  return equipment_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PetProto::mutable_equipment_pos() {
  return &equipment_pos_;
}

// repeated bytes equipment_static_data = 7;
inline int PetProto::equipment_static_data_size() const {
  return equipment_static_data_.size();
}
inline void PetProto::clear_equipment_static_data() {
  equipment_static_data_.Clear();
}
inline const ::std::string& PetProto::equipment_static_data(int index) const {
  return equipment_static_data_.Get(index);
}
inline ::std::string* PetProto::mutable_equipment_static_data(int index) {
  return equipment_static_data_.Mutable(index);
}
inline void PetProto::set_equipment_static_data(int index, const ::std::string& value) {
  equipment_static_data_.Mutable(index)->assign(value);
}
inline void PetProto::set_equipment_static_data(int index, const char* value) {
  equipment_static_data_.Mutable(index)->assign(value);
}
inline void PetProto::set_equipment_static_data(int index, const void* value, size_t size) {
  equipment_static_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetProto::add_equipment_static_data() {
  return equipment_static_data_.Add();
}
inline void PetProto::add_equipment_static_data(const ::std::string& value) {
  equipment_static_data_.Add()->assign(value);
}
inline void PetProto::add_equipment_static_data(const char* value) {
  equipment_static_data_.Add()->assign(value);
}
inline void PetProto::add_equipment_static_data(const void* value, size_t size) {
  equipment_static_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PetProto::equipment_static_data() const {
  return equipment_static_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PetProto::mutable_equipment_static_data() {
  return &equipment_static_data_;
}

// repeated bytes equipment_dynamic_data = 8;
inline int PetProto::equipment_dynamic_data_size() const {
  return equipment_dynamic_data_.size();
}
inline void PetProto::clear_equipment_dynamic_data() {
  equipment_dynamic_data_.Clear();
}
inline const ::std::string& PetProto::equipment_dynamic_data(int index) const {
  return equipment_dynamic_data_.Get(index);
}
inline ::std::string* PetProto::mutable_equipment_dynamic_data(int index) {
  return equipment_dynamic_data_.Mutable(index);
}
inline void PetProto::set_equipment_dynamic_data(int index, const ::std::string& value) {
  equipment_dynamic_data_.Mutable(index)->assign(value);
}
inline void PetProto::set_equipment_dynamic_data(int index, const char* value) {
  equipment_dynamic_data_.Mutable(index)->assign(value);
}
inline void PetProto::set_equipment_dynamic_data(int index, const void* value, size_t size) {
  equipment_dynamic_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetProto::add_equipment_dynamic_data() {
  return equipment_dynamic_data_.Add();
}
inline void PetProto::add_equipment_dynamic_data(const ::std::string& value) {
  equipment_dynamic_data_.Add()->assign(value);
}
inline void PetProto::add_equipment_dynamic_data(const char* value) {
  equipment_dynamic_data_.Add()->assign(value);
}
inline void PetProto::add_equipment_dynamic_data(const void* value, size_t size) {
  equipment_dynamic_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PetProto::equipment_dynamic_data() const {
  return equipment_dynamic_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PetProto::mutable_equipment_dynamic_data() {
  return &equipment_dynamic_data_;
}

// optional int32 monster = 20 [deprecated = true];
inline bool PetProto::has_monster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetProto::set_has_monster() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetProto::clear_has_monster() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetProto::clear_monster() {
  monster_ = 0;
  clear_has_monster();
}
inline ::google::protobuf::int32 PetProto::monster() const {
  return monster_;
}
inline void PetProto::set_monster(::google::protobuf::int32 value) {
  set_has_monster();
  monster_ = value;
}

// optional int64 relive_time = 21;
inline bool PetProto::has_relive_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetProto::set_has_relive_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetProto::clear_has_relive_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetProto::clear_relive_time() {
  relive_time_ = GOOGLE_LONGLONG(0);
  clear_has_relive_time();
}
inline ::google::protobuf::int64 PetProto::relive_time() const {
  return relive_time_;
}
inline void PetProto::set_relive_time(::google::protobuf::int64 value) {
  set_has_relive_time();
  relive_time_ = value;
}

// repeated int32 spell_pos = 30;
inline int PetProto::spell_pos_size() const {
  return spell_pos_.size();
}
inline void PetProto::clear_spell_pos() {
  spell_pos_.Clear();
}
inline ::google::protobuf::int32 PetProto::spell_pos(int index) const {
  return spell_pos_.Get(index);
}
inline void PetProto::set_spell_pos(int index, ::google::protobuf::int32 value) {
  spell_pos_.Set(index, value);
}
inline void PetProto::add_spell_pos(::google::protobuf::int32 value) {
  spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PetProto::spell_pos() const {
  return spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PetProto::mutable_spell_pos() {
  return &spell_pos_;
}

// repeated .app.message.ActiveSpell spells = 31;
inline int PetProto::spells_size() const {
  return spells_.size();
}
inline void PetProto::clear_spells() {
  spells_.Clear();
}
inline const ::app::message::ActiveSpell& PetProto::spells(int index) const {
  return spells_.Get(index);
}
inline ::app::message::ActiveSpell* PetProto::mutable_spells(int index) {
  return spells_.Mutable(index);
}
inline ::app::message::ActiveSpell* PetProto::add_spells() {
  return spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
PetProto::spells() const {
  return spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
PetProto::mutable_spells() {
  return &spells_;
}

// optional int32 use_zizhidan_count = 32;
inline bool PetProto::has_use_zizhidan_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PetProto::set_has_use_zizhidan_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PetProto::clear_has_use_zizhidan_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PetProto::clear_use_zizhidan_count() {
  use_zizhidan_count_ = 0;
  clear_has_use_zizhidan_count();
}
inline ::google::protobuf::int32 PetProto::use_zizhidan_count() const {
  return use_zizhidan_count_;
}
inline void PetProto::set_use_zizhidan_count(::google::protobuf::int32 value) {
  set_has_use_zizhidan_count();
  use_zizhidan_count_ = value;
}

// optional int32 use_meirenzhixin_count = 33;
inline bool PetProto::has_use_meirenzhixin_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PetProto::set_has_use_meirenzhixin_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PetProto::clear_has_use_meirenzhixin_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PetProto::clear_use_meirenzhixin_count() {
  use_meirenzhixin_count_ = 0;
  clear_has_use_meirenzhixin_count();
}
inline ::google::protobuf::int32 PetProto::use_meirenzhixin_count() const {
  return use_meirenzhixin_count_;
}
inline void PetProto::set_use_meirenzhixin_count(::google::protobuf::int32 value) {
  set_has_use_meirenzhixin_count();
  use_meirenzhixin_count_ = value;
}

// -------------------------------------------------------------------

// PetLevelProto

// optional int64 default_added_max_life = 2;
inline bool PetLevelProto::has_default_added_max_life() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetLevelProto::set_has_default_added_max_life() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetLevelProto::clear_has_default_added_max_life() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetLevelProto::clear_default_added_max_life() {
  default_added_max_life_ = GOOGLE_LONGLONG(0);
  clear_has_default_added_max_life();
}
inline ::google::protobuf::int64 PetLevelProto::default_added_max_life() const {
  return default_added_max_life_;
}
inline void PetLevelProto::set_default_added_max_life(::google::protobuf::int64 value) {
  set_has_default_added_max_life();
  default_added_max_life_ = value;
}

// optional int32 default_added_attack = 3;
inline bool PetLevelProto::has_default_added_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetLevelProto::set_has_default_added_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetLevelProto::clear_has_default_added_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetLevelProto::clear_default_added_attack() {
  default_added_attack_ = 0;
  clear_has_default_added_attack();
}
inline ::google::protobuf::int32 PetLevelProto::default_added_attack() const {
  return default_added_attack_;
}
inline void PetLevelProto::set_default_added_attack(::google::protobuf::int32 value) {
  set_has_default_added_attack();
  default_added_attack_ = value;
}

// optional int32 default_added_defence = 4;
inline bool PetLevelProto::has_default_added_defence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetLevelProto::set_has_default_added_defence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetLevelProto::clear_has_default_added_defence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetLevelProto::clear_default_added_defence() {
  default_added_defence_ = 0;
  clear_has_default_added_defence();
}
inline ::google::protobuf::int32 PetLevelProto::default_added_defence() const {
  return default_added_defence_;
}
inline void PetLevelProto::set_default_added_defence(::google::protobuf::int32 value) {
  set_has_default_added_defence();
  default_added_defence_ = value;
}

// optional int32 max_added_max_life = 5;
inline bool PetLevelProto::has_max_added_max_life() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetLevelProto::set_has_max_added_max_life() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetLevelProto::clear_has_max_added_max_life() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetLevelProto::clear_max_added_max_life() {
  max_added_max_life_ = 0;
  clear_has_max_added_max_life();
}
inline ::google::protobuf::int32 PetLevelProto::max_added_max_life() const {
  return max_added_max_life_;
}
inline void PetLevelProto::set_max_added_max_life(::google::protobuf::int32 value) {
  set_has_max_added_max_life();
  max_added_max_life_ = value;
}

// optional int32 max_added_max_attack = 6;
inline bool PetLevelProto::has_max_added_max_attack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetLevelProto::set_has_max_added_max_attack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetLevelProto::clear_has_max_added_max_attack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetLevelProto::clear_max_added_max_attack() {
  max_added_max_attack_ = 0;
  clear_has_max_added_max_attack();
}
inline ::google::protobuf::int32 PetLevelProto::max_added_max_attack() const {
  return max_added_max_attack_;
}
inline void PetLevelProto::set_max_added_max_attack(::google::protobuf::int32 value) {
  set_has_max_added_max_attack();
  max_added_max_attack_ = value;
}

// optional int32 max_added_max_defence = 7;
inline bool PetLevelProto::has_max_added_max_defence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetLevelProto::set_has_max_added_max_defence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetLevelProto::clear_has_max_added_max_defence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetLevelProto::clear_max_added_max_defence() {
  max_added_max_defence_ = 0;
  clear_has_max_added_max_defence();
}
inline ::google::protobuf::int32 PetLevelProto::max_added_max_defence() const {
  return max_added_max_defence_;
}
inline void PetLevelProto::set_max_added_max_defence(::google::protobuf::int32 value) {
  set_has_max_added_max_defence();
  max_added_max_defence_ = value;
}

// optional .app.message.SpriteStatProto fixed_stat = 8;
inline bool PetLevelProto::has_fixed_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetLevelProto::set_has_fixed_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetLevelProto::clear_has_fixed_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetLevelProto::clear_fixed_stat() {
  if (fixed_stat_ != NULL) fixed_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_fixed_stat();
}
inline const ::app::message::SpriteStatProto& PetLevelProto::fixed_stat() const {
  return fixed_stat_ != NULL ? *fixed_stat_ : *default_instance_->fixed_stat_;
}
inline ::app::message::SpriteStatProto* PetLevelProto::mutable_fixed_stat() {
  set_has_fixed_stat();
  if (fixed_stat_ == NULL) fixed_stat_ = new ::app::message::SpriteStatProto;
  return fixed_stat_;
}
inline ::app::message::SpriteStatProto* PetLevelProto::release_fixed_stat() {
  clear_has_fixed_stat();
  ::app::message::SpriteStatProto* temp = fixed_stat_;
  fixed_stat_ = NULL;
  return temp;
}
inline void PetLevelProto::set_allocated_fixed_stat(::app::message::SpriteStatProto* fixed_stat) {
  delete fixed_stat_;
  fixed_stat_ = fixed_stat;
  if (fixed_stat) {
    set_has_fixed_stat();
  } else {
    clear_has_fixed_stat();
  }
}

// optional .app.message.SpriteStatProto percent_stat = 9;
inline bool PetLevelProto::has_percent_stat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetLevelProto::set_has_percent_stat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetLevelProto::clear_has_percent_stat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetLevelProto::clear_percent_stat() {
  if (percent_stat_ != NULL) percent_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_percent_stat();
}
inline const ::app::message::SpriteStatProto& PetLevelProto::percent_stat() const {
  return percent_stat_ != NULL ? *percent_stat_ : *default_instance_->percent_stat_;
}
inline ::app::message::SpriteStatProto* PetLevelProto::mutable_percent_stat() {
  set_has_percent_stat();
  if (percent_stat_ == NULL) percent_stat_ = new ::app::message::SpriteStatProto;
  return percent_stat_;
}
inline ::app::message::SpriteStatProto* PetLevelProto::release_percent_stat() {
  clear_has_percent_stat();
  ::app::message::SpriteStatProto* temp = percent_stat_;
  percent_stat_ = NULL;
  return temp;
}
inline void PetLevelProto::set_allocated_percent_stat(::app::message::SpriteStatProto* percent_stat) {
  delete percent_stat_;
  percent_stat_ = percent_stat;
  if (percent_stat) {
    set_has_percent_stat();
  } else {
    clear_has_percent_stat();
  }
}

// optional int32 static_hurt = 10;
inline bool PetLevelProto::has_static_hurt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetLevelProto::set_has_static_hurt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetLevelProto::clear_has_static_hurt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetLevelProto::clear_static_hurt() {
  static_hurt_ = 0;
  clear_has_static_hurt();
}
inline ::google::protobuf::int32 PetLevelProto::static_hurt() const {
  return static_hurt_;
}
inline void PetLevelProto::set_static_hurt(::google::protobuf::int32 value) {
  set_has_static_hurt();
  static_hurt_ = value;
}

// -------------------------------------------------------------------

// DemonProto

// optional .app.message.DemonConfigProto demon = 1;
inline bool DemonProto::has_demon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DemonProto::set_has_demon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DemonProto::clear_has_demon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DemonProto::clear_demon() {
  if (demon_ != NULL) demon_->::app::message::DemonConfigProto::Clear();
  clear_has_demon();
}
inline const ::app::message::DemonConfigProto& DemonProto::demon() const {
  return demon_ != NULL ? *demon_ : *default_instance_->demon_;
}
inline ::app::message::DemonConfigProto* DemonProto::mutable_demon() {
  set_has_demon();
  if (demon_ == NULL) demon_ = new ::app::message::DemonConfigProto;
  return demon_;
}
inline ::app::message::DemonConfigProto* DemonProto::release_demon() {
  clear_has_demon();
  ::app::message::DemonConfigProto* temp = demon_;
  demon_ = NULL;
  return temp;
}
inline void DemonProto::set_allocated_demon(::app::message::DemonConfigProto* demon) {
  delete demon_;
  demon_ = demon;
  if (demon) {
    set_has_demon();
  } else {
    clear_has_demon();
  }
}

// optional int32 bless_amount = 10;
inline bool DemonProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DemonProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DemonProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DemonProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 DemonProto::bless_amount() const {
  return bless_amount_;
}
inline void DemonProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 11;
inline bool DemonProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DemonProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DemonProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DemonProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 DemonProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void DemonProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional bool is_in_demon_state = 12;
inline bool DemonProto::has_is_in_demon_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DemonProto::set_has_is_in_demon_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DemonProto::clear_has_is_in_demon_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DemonProto::clear_is_in_demon_state() {
  is_in_demon_state_ = false;
  clear_has_is_in_demon_state();
}
inline bool DemonProto::is_in_demon_state() const {
  return is_in_demon_state_;
}
inline void DemonProto::set_is_in_demon_state(bool value) {
  set_has_is_in_demon_state();
  is_in_demon_state_ = value;
}

// optional int64 next_can_turn_demon_time = 13;
inline bool DemonProto::has_next_can_turn_demon_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DemonProto::set_has_next_can_turn_demon_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DemonProto::clear_has_next_can_turn_demon_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DemonProto::clear_next_can_turn_demon_time() {
  next_can_turn_demon_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_can_turn_demon_time();
}
inline ::google::protobuf::int64 DemonProto::next_can_turn_demon_time() const {
  return next_can_turn_demon_time_;
}
inline void DemonProto::set_next_can_turn_demon_time(::google::protobuf::int64 value) {
  set_has_next_can_turn_demon_time();
  next_can_turn_demon_time_ = value;
}

// optional int32 qian_neng_use_count = 21;
inline bool DemonProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DemonProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DemonProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DemonProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 DemonProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void DemonProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool DemonProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DemonProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DemonProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DemonProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 DemonProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void DemonProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional bool is_hide = 23;
inline bool DemonProto::has_is_hide() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DemonProto::set_has_is_hide() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DemonProto::clear_has_is_hide() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DemonProto::clear_is_hide() {
  is_hide_ = false;
  clear_has_is_hide();
}
inline bool DemonProto::is_hide() const {
  return is_hide_;
}
inline void DemonProto::set_is_hide(bool value) {
  set_has_is_hide();
  is_hide_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool DemonProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DemonProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DemonProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DemonProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 DemonProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void DemonProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool DemonProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DemonProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DemonProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DemonProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 DemonProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void DemonProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool DemonProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DemonProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DemonProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DemonProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 DemonProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void DemonProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool DemonProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DemonProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DemonProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DemonProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 DemonProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void DemonProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// TianZuiProto

// optional int32 id = 1;
inline bool TianZuiProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TianZuiProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TianZuiProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TianZuiProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TianZuiProto::id() const {
  return id_;
}
inline void TianZuiProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 bless_amount = 10;
inline bool TianZuiProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TianZuiProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TianZuiProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TianZuiProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 TianZuiProto::bless_amount() const {
  return bless_amount_;
}
inline void TianZuiProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 11;
inline bool TianZuiProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TianZuiProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TianZuiProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TianZuiProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 TianZuiProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void TianZuiProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// repeated int32 spell_pos = 12;
inline int TianZuiProto::spell_pos_size() const {
  return spell_pos_.size();
}
inline void TianZuiProto::clear_spell_pos() {
  spell_pos_.Clear();
}
inline ::google::protobuf::int32 TianZuiProto::spell_pos(int index) const {
  return spell_pos_.Get(index);
}
inline void TianZuiProto::set_spell_pos(int index, ::google::protobuf::int32 value) {
  spell_pos_.Set(index, value);
}
inline void TianZuiProto::add_spell_pos(::google::protobuf::int32 value) {
  spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TianZuiProto::spell_pos() const {
  return spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TianZuiProto::mutable_spell_pos() {
  return &spell_pos_;
}

// repeated .app.message.ActiveSpell spells = 13;
inline int TianZuiProto::spells_size() const {
  return spells_.size();
}
inline void TianZuiProto::clear_spells() {
  spells_.Clear();
}
inline const ::app::message::ActiveSpell& TianZuiProto::spells(int index) const {
  return spells_.Get(index);
}
inline ::app::message::ActiveSpell* TianZuiProto::mutable_spells(int index) {
  return spells_.Mutable(index);
}
inline ::app::message::ActiveSpell* TianZuiProto::add_spells() {
  return spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
TianZuiProto::spells() const {
  return spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
TianZuiProto::mutable_spells() {
  return &spells_;
}

// optional int32 qian_neng_use_count = 21;
inline bool TianZuiProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TianZuiProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TianZuiProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TianZuiProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 TianZuiProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void TianZuiProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool TianZuiProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TianZuiProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TianZuiProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TianZuiProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 TianZuiProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void TianZuiProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional bool is_hide_huan_hua = 24;
inline bool TianZuiProto::has_is_hide_huan_hua() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TianZuiProto::set_has_is_hide_huan_hua() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TianZuiProto::clear_has_is_hide_huan_hua() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TianZuiProto::clear_is_hide_huan_hua() {
  is_hide_huan_hua_ = false;
  clear_has_is_hide_huan_hua();
}
inline bool TianZuiProto::is_hide_huan_hua() const {
  return is_hide_huan_hua_;
}
inline void TianZuiProto::set_is_hide_huan_hua(bool value) {
  set_has_is_hide_huan_hua();
  is_hide_huan_hua_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool TianZuiProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TianZuiProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TianZuiProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TianZuiProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 TianZuiProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void TianZuiProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool TianZuiProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TianZuiProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TianZuiProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TianZuiProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 TianZuiProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void TianZuiProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool TianZuiProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TianZuiProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TianZuiProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TianZuiProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 TianZuiProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void TianZuiProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool TianZuiProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TianZuiProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TianZuiProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TianZuiProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 TianZuiProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void TianZuiProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// TianJieProto

// optional int32 id = 1;
inline bool TianJieProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TianJieProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TianJieProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TianJieProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TianJieProto::id() const {
  return id_;
}
inline void TianJieProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 bless_amount = 10;
inline bool TianJieProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TianJieProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TianJieProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TianJieProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 TianJieProto::bless_amount() const {
  return bless_amount_;
}
inline void TianJieProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 11;
inline bool TianJieProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TianJieProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TianJieProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TianJieProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 TianJieProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void TianJieProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// repeated int32 spell_pos = 12;
inline int TianJieProto::spell_pos_size() const {
  return spell_pos_.size();
}
inline void TianJieProto::clear_spell_pos() {
  spell_pos_.Clear();
}
inline ::google::protobuf::int32 TianJieProto::spell_pos(int index) const {
  return spell_pos_.Get(index);
}
inline void TianJieProto::set_spell_pos(int index, ::google::protobuf::int32 value) {
  spell_pos_.Set(index, value);
}
inline void TianJieProto::add_spell_pos(::google::protobuf::int32 value) {
  spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TianJieProto::spell_pos() const {
  return spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TianJieProto::mutable_spell_pos() {
  return &spell_pos_;
}

// repeated .app.message.ActiveSpell spells = 13;
inline int TianJieProto::spells_size() const {
  return spells_.size();
}
inline void TianJieProto::clear_spells() {
  spells_.Clear();
}
inline const ::app::message::ActiveSpell& TianJieProto::spells(int index) const {
  return spells_.Get(index);
}
inline ::app::message::ActiveSpell* TianJieProto::mutable_spells(int index) {
  return spells_.Mutable(index);
}
inline ::app::message::ActiveSpell* TianJieProto::add_spells() {
  return spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
TianJieProto::spells() const {
  return spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
TianJieProto::mutable_spells() {
  return &spells_;
}

// optional int32 qian_neng_use_count = 21;
inline bool TianJieProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TianJieProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TianJieProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TianJieProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 TianJieProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void TianJieProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool TianJieProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TianJieProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TianJieProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TianJieProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 TianJieProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void TianJieProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional bool is_hide_huan_hua = 24;
inline bool TianJieProto::has_is_hide_huan_hua() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TianJieProto::set_has_is_hide_huan_hua() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TianJieProto::clear_has_is_hide_huan_hua() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TianJieProto::clear_is_hide_huan_hua() {
  is_hide_huan_hua_ = false;
  clear_has_is_hide_huan_hua();
}
inline bool TianJieProto::is_hide_huan_hua() const {
  return is_hide_huan_hua_;
}
inline void TianJieProto::set_is_hide_huan_hua(bool value) {
  set_has_is_hide_huan_hua();
  is_hide_huan_hua_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool TianJieProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TianJieProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TianJieProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TianJieProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 TianJieProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void TianJieProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool TianJieProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TianJieProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TianJieProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TianJieProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 TianJieProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void TianJieProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool TianJieProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TianJieProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TianJieProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TianJieProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 TianJieProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void TianJieProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool TianJieProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TianJieProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TianJieProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TianJieProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 TianJieProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void TianJieProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// BowProto

// optional int32 bow = 1;
inline bool BowProto::has_bow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BowProto::set_has_bow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BowProto::clear_has_bow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BowProto::clear_bow() {
  bow_ = 0;
  clear_has_bow();
}
inline ::google::protobuf::int32 BowProto::bow() const {
  return bow_;
}
inline void BowProto::set_bow(::google::protobuf::int32 value) {
  set_has_bow();
  bow_ = value;
}

// optional int32 arrow = 2;
inline bool BowProto::has_arrow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BowProto::set_has_arrow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BowProto::clear_has_arrow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BowProto::clear_arrow() {
  arrow_ = 0;
  clear_has_arrow();
}
inline ::google::protobuf::int32 BowProto::arrow() const {
  return arrow_;
}
inline void BowProto::set_arrow(::google::protobuf::int32 value) {
  set_has_arrow();
  arrow_ = value;
}

// optional int32 bless_amount = 3;
inline bool BowProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BowProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BowProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BowProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 BowProto::bless_amount() const {
  return bless_amount_;
}
inline void BowProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 4;
inline bool BowProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BowProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BowProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BowProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 BowProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void BowProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int32 resource = 5;
inline bool BowProto::has_resource() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BowProto::set_has_resource() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BowProto::clear_has_resource() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BowProto::clear_resource() {
  resource_ = 0;
  clear_has_resource();
}
inline ::google::protobuf::int32 BowProto::resource() const {
  return resource_;
}
inline void BowProto::set_resource(::google::protobuf::int32 value) {
  set_has_resource();
  resource_ = value;
}

// optional int32 arrow_star = 20 [deprecated = true];
inline bool BowProto::has_arrow_star() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BowProto::set_has_arrow_star() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BowProto::clear_has_arrow_star() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BowProto::clear_arrow_star() {
  arrow_star_ = 0;
  clear_has_arrow_star();
}
inline ::google::protobuf::int32 BowProto::arrow_star() const {
  return arrow_star_;
}
inline void BowProto::set_arrow_star(::google::protobuf::int32 value) {
  set_has_arrow_star();
  arrow_star_ = value;
}

// optional int32 arrow_exp = 21 [deprecated = true];
inline bool BowProto::has_arrow_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BowProto::set_has_arrow_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BowProto::clear_has_arrow_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BowProto::clear_arrow_exp() {
  arrow_exp_ = 0;
  clear_has_arrow_exp();
}
inline ::google::protobuf::int32 BowProto::arrow_exp() const {
  return arrow_exp_;
}
inline void BowProto::set_arrow_exp(::google::protobuf::int32 value) {
  set_has_arrow_exp();
  arrow_exp_ = value;
}

// optional bool is_hide_huan_hua = 24;
inline bool BowProto::has_is_hide_huan_hua() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BowProto::set_has_is_hide_huan_hua() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BowProto::clear_has_is_hide_huan_hua() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BowProto::clear_is_hide_huan_hua() {
  is_hide_huan_hua_ = false;
  clear_has_is_hide_huan_hua();
}
inline bool BowProto::is_hide_huan_hua() const {
  return is_hide_huan_hua_;
}
inline void BowProto::set_is_hide_huan_hua(bool value) {
  set_has_is_hide_huan_hua();
  is_hide_huan_hua_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool BowProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BowProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BowProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BowProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 BowProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void BowProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool BowProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BowProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BowProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BowProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 BowProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void BowProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool BowProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BowProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BowProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BowProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 BowProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void BowProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool BowProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BowProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BowProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BowProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 BowProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void BowProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// optional int32 qian_neng_use_count = 31;
inline bool BowProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BowProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BowProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BowProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 BowProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void BowProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 32;
inline bool BowProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BowProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BowProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BowProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 BowProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void BowProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// -------------------------------------------------------------------

// CombineXinfaSpellProto

// optional .app.message.ActiveSpell active_spell = 1;
inline bool CombineXinfaSpellProto::has_active_spell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CombineXinfaSpellProto::set_has_active_spell() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CombineXinfaSpellProto::clear_has_active_spell() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CombineXinfaSpellProto::clear_active_spell() {
  if (active_spell_ != NULL) active_spell_->::app::message::ActiveSpell::Clear();
  clear_has_active_spell();
}
inline const ::app::message::ActiveSpell& CombineXinfaSpellProto::active_spell() const {
  return active_spell_ != NULL ? *active_spell_ : *default_instance_->active_spell_;
}
inline ::app::message::ActiveSpell* CombineXinfaSpellProto::mutable_active_spell() {
  set_has_active_spell();
  if (active_spell_ == NULL) active_spell_ = new ::app::message::ActiveSpell;
  return active_spell_;
}
inline ::app::message::ActiveSpell* CombineXinfaSpellProto::release_active_spell() {
  clear_has_active_spell();
  ::app::message::ActiveSpell* temp = active_spell_;
  active_spell_ = NULL;
  return temp;
}
inline void CombineXinfaSpellProto::set_allocated_active_spell(::app::message::ActiveSpell* active_spell) {
  delete active_spell_;
  active_spell_ = active_spell;
  if (active_spell) {
    set_has_active_spell();
  } else {
    clear_has_active_spell();
  }
}

// optional int32 used_times = 2;
inline bool CombineXinfaSpellProto::has_used_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CombineXinfaSpellProto::set_has_used_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CombineXinfaSpellProto::clear_has_used_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CombineXinfaSpellProto::clear_used_times() {
  used_times_ = 0;
  clear_has_used_times();
}
inline ::google::protobuf::int32 CombineXinfaSpellProto::used_times() const {
  return used_times_;
}
inline void CombineXinfaSpellProto::set_used_times(::google::protobuf::int32 value) {
  set_has_used_times();
  used_times_ = value;
}

// optional bytes static_data = 3;
inline bool CombineXinfaSpellProto::has_static_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CombineXinfaSpellProto::set_has_static_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CombineXinfaSpellProto::clear_has_static_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CombineXinfaSpellProto::clear_static_data() {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    static_data_->clear();
  }
  clear_has_static_data();
}
inline const ::std::string& CombineXinfaSpellProto::static_data() const {
  return *static_data_;
}
inline void CombineXinfaSpellProto::set_static_data(const ::std::string& value) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(value);
}
inline void CombineXinfaSpellProto::set_static_data(const char* value) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(value);
}
inline void CombineXinfaSpellProto::set_static_data(const void* value, size_t size) {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  static_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CombineXinfaSpellProto::mutable_static_data() {
  set_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    static_data_ = new ::std::string;
  }
  return static_data_;
}
inline ::std::string* CombineXinfaSpellProto::release_static_data() {
  clear_has_static_data();
  if (static_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = static_data_;
    static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CombineXinfaSpellProto::set_allocated_static_data(::std::string* static_data) {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    delete static_data_;
  }
  if (static_data) {
    set_has_static_data();
    static_data_ = static_data;
  } else {
    clear_has_static_data();
    static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes dynamic_data = 4;
inline bool CombineXinfaSpellProto::has_dynamic_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CombineXinfaSpellProto::set_has_dynamic_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CombineXinfaSpellProto::clear_has_dynamic_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CombineXinfaSpellProto::clear_dynamic_data() {
  if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
    dynamic_data_->clear();
  }
  clear_has_dynamic_data();
}
inline const ::std::string& CombineXinfaSpellProto::dynamic_data() const {
  return *dynamic_data_;
}
inline void CombineXinfaSpellProto::set_dynamic_data(const ::std::string& value) {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  dynamic_data_->assign(value);
}
inline void CombineXinfaSpellProto::set_dynamic_data(const char* value) {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  dynamic_data_->assign(value);
}
inline void CombineXinfaSpellProto::set_dynamic_data(const void* value, size_t size) {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  dynamic_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CombineXinfaSpellProto::mutable_dynamic_data() {
  set_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_data_ = new ::std::string;
  }
  return dynamic_data_;
}
inline ::std::string* CombineXinfaSpellProto::release_dynamic_data() {
  clear_has_dynamic_data();
  if (dynamic_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dynamic_data_;
    dynamic_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CombineXinfaSpellProto::set_allocated_dynamic_data(::std::string* dynamic_data) {
  if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_data_;
  }
  if (dynamic_data) {
    set_has_dynamic_data();
    dynamic_data_ = dynamic_data;
  } else {
    clear_has_dynamic_data();
    dynamic_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FightingAmountProto

// optional int32 base_fighting_amount = 1;
inline bool FightingAmountProto::has_base_fighting_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightingAmountProto::set_has_base_fighting_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightingAmountProto::clear_has_base_fighting_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightingAmountProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void FightingAmountProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 equipment_fighting_amount = 2;
inline bool FightingAmountProto::has_equipment_fighting_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightingAmountProto::set_has_equipment_fighting_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightingAmountProto::clear_has_equipment_fighting_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightingAmountProto::clear_equipment_fighting_amount() {
  equipment_fighting_amount_ = 0;
  clear_has_equipment_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::equipment_fighting_amount() const {
  return equipment_fighting_amount_;
}
inline void FightingAmountProto::set_equipment_fighting_amount(::google::protobuf::int32 value) {
  set_has_equipment_fighting_amount();
  equipment_fighting_amount_ = value;
}

// optional int32 spell_fighting_amount = 3;
inline bool FightingAmountProto::has_spell_fighting_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightingAmountProto::set_has_spell_fighting_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightingAmountProto::clear_has_spell_fighting_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightingAmountProto::clear_spell_fighting_amount() {
  spell_fighting_amount_ = 0;
  clear_has_spell_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::spell_fighting_amount() const {
  return spell_fighting_amount_;
}
inline void FightingAmountProto::set_spell_fighting_amount(::google::protobuf::int32 value) {
  set_has_spell_fighting_amount();
  spell_fighting_amount_ = value;
}

// optional int32 gem_fighting_amount = 4 [deprecated = true];
inline bool FightingAmountProto::has_gem_fighting_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightingAmountProto::set_has_gem_fighting_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightingAmountProto::clear_has_gem_fighting_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightingAmountProto::clear_gem_fighting_amount() {
  gem_fighting_amount_ = 0;
  clear_has_gem_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::gem_fighting_amount() const {
  return gem_fighting_amount_;
}
inline void FightingAmountProto::set_gem_fighting_amount(::google::protobuf::int32 value) {
  set_has_gem_fighting_amount();
  gem_fighting_amount_ = value;
}

// optional int32 mount_fighting_amount = 5;
inline bool FightingAmountProto::has_mount_fighting_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightingAmountProto::set_has_mount_fighting_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightingAmountProto::clear_has_mount_fighting_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightingAmountProto::clear_mount_fighting_amount() {
  mount_fighting_amount_ = 0;
  clear_has_mount_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::mount_fighting_amount() const {
  return mount_fighting_amount_;
}
inline void FightingAmountProto::set_mount_fighting_amount(::google::protobuf::int32 value) {
  set_has_mount_fighting_amount();
  mount_fighting_amount_ = value;
}

// optional int32 bow_fighting_amount = 6;
inline bool FightingAmountProto::has_bow_fighting_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightingAmountProto::set_has_bow_fighting_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightingAmountProto::clear_has_bow_fighting_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightingAmountProto::clear_bow_fighting_amount() {
  bow_fighting_amount_ = 0;
  clear_has_bow_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::bow_fighting_amount() const {
  return bow_fighting_amount_;
}
inline void FightingAmountProto::set_bow_fighting_amount(::google::protobuf::int32 value) {
  set_has_bow_fighting_amount();
  bow_fighting_amount_ = value;
}

// optional int32 super_weapon_fighting_amount = 7;
inline bool FightingAmountProto::has_super_weapon_fighting_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightingAmountProto::set_has_super_weapon_fighting_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightingAmountProto::clear_has_super_weapon_fighting_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightingAmountProto::clear_super_weapon_fighting_amount() {
  super_weapon_fighting_amount_ = 0;
  clear_has_super_weapon_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::super_weapon_fighting_amount() const {
  return super_weapon_fighting_amount_;
}
inline void FightingAmountProto::set_super_weapon_fighting_amount(::google::protobuf::int32 value) {
  set_has_super_weapon_fighting_amount();
  super_weapon_fighting_amount_ = value;
}

// optional int32 super_arm_fighting_amount = 8;
inline bool FightingAmountProto::has_super_arm_fighting_amount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightingAmountProto::set_has_super_arm_fighting_amount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightingAmountProto::clear_has_super_arm_fighting_amount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightingAmountProto::clear_super_arm_fighting_amount() {
  super_arm_fighting_amount_ = 0;
  clear_has_super_arm_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::super_arm_fighting_amount() const {
  return super_arm_fighting_amount_;
}
inline void FightingAmountProto::set_super_arm_fighting_amount(::google::protobuf::int32 value) {
  set_has_super_arm_fighting_amount();
  super_arm_fighting_amount_ = value;
}

// optional int32 super_weapon_xinfa_fighting_amount = 9;
inline bool FightingAmountProto::has_super_weapon_xinfa_fighting_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightingAmountProto::set_has_super_weapon_xinfa_fighting_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightingAmountProto::clear_has_super_weapon_xinfa_fighting_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightingAmountProto::clear_super_weapon_xinfa_fighting_amount() {
  super_weapon_xinfa_fighting_amount_ = 0;
  clear_has_super_weapon_xinfa_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::super_weapon_xinfa_fighting_amount() const {
  return super_weapon_xinfa_fighting_amount_;
}
inline void FightingAmountProto::set_super_weapon_xinfa_fighting_amount(::google::protobuf::int32 value) {
  set_has_super_weapon_xinfa_fighting_amount();
  super_weapon_xinfa_fighting_amount_ = value;
}

// optional int32 tianjie_fighting_amount = 10;
inline bool FightingAmountProto::has_tianjie_fighting_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightingAmountProto::set_has_tianjie_fighting_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightingAmountProto::clear_has_tianjie_fighting_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightingAmountProto::clear_tianjie_fighting_amount() {
  tianjie_fighting_amount_ = 0;
  clear_has_tianjie_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::tianjie_fighting_amount() const {
  return tianjie_fighting_amount_;
}
inline void FightingAmountProto::set_tianjie_fighting_amount(::google::protobuf::int32 value) {
  set_has_tianjie_fighting_amount();
  tianjie_fighting_amount_ = value;
}

// optional int32 tianzui_fighting_amount = 11;
inline bool FightingAmountProto::has_tianzui_fighting_amount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightingAmountProto::set_has_tianzui_fighting_amount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightingAmountProto::clear_has_tianzui_fighting_amount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightingAmountProto::clear_tianzui_fighting_amount() {
  tianzui_fighting_amount_ = 0;
  clear_has_tianzui_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::tianzui_fighting_amount() const {
  return tianzui_fighting_amount_;
}
inline void FightingAmountProto::set_tianzui_fighting_amount(::google::protobuf::int32 value) {
  set_has_tianzui_fighting_amount();
  tianzui_fighting_amount_ = value;
}

// optional int32 shou_cang_fighting_amount = 12;
inline bool FightingAmountProto::has_shou_cang_fighting_amount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightingAmountProto::set_has_shou_cang_fighting_amount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FightingAmountProto::clear_has_shou_cang_fighting_amount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FightingAmountProto::clear_shou_cang_fighting_amount() {
  shou_cang_fighting_amount_ = 0;
  clear_has_shou_cang_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::shou_cang_fighting_amount() const {
  return shou_cang_fighting_amount_;
}
inline void FightingAmountProto::set_shou_cang_fighting_amount(::google::protobuf::int32 value) {
  set_has_shou_cang_fighting_amount();
  shou_cang_fighting_amount_ = value;
}

// optional int32 demon_fighting_amount = 13;
inline bool FightingAmountProto::has_demon_fighting_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightingAmountProto::set_has_demon_fighting_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightingAmountProto::clear_has_demon_fighting_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightingAmountProto::clear_demon_fighting_amount() {
  demon_fighting_amount_ = 0;
  clear_has_demon_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::demon_fighting_amount() const {
  return demon_fighting_amount_;
}
inline void FightingAmountProto::set_demon_fighting_amount(::google::protobuf::int32 value) {
  set_has_demon_fighting_amount();
  demon_fighting_amount_ = value;
}

// optional int32 cloak_fighting_amount = 14;
inline bool FightingAmountProto::has_cloak_fighting_amount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FightingAmountProto::set_has_cloak_fighting_amount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FightingAmountProto::clear_has_cloak_fighting_amount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FightingAmountProto::clear_cloak_fighting_amount() {
  cloak_fighting_amount_ = 0;
  clear_has_cloak_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::cloak_fighting_amount() const {
  return cloak_fighting_amount_;
}
inline void FightingAmountProto::set_cloak_fighting_amount(::google::protobuf::int32 value) {
  set_has_cloak_fighting_amount();
  cloak_fighting_amount_ = value;
}

// optional int32 pet_fighting_amount = 15;
inline bool FightingAmountProto::has_pet_fighting_amount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FightingAmountProto::set_has_pet_fighting_amount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FightingAmountProto::clear_has_pet_fighting_amount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FightingAmountProto::clear_pet_fighting_amount() {
  pet_fighting_amount_ = 0;
  clear_has_pet_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::pet_fighting_amount() const {
  return pet_fighting_amount_;
}
inline void FightingAmountProto::set_pet_fighting_amount(::google::protobuf::int32 value) {
  set_has_pet_fighting_amount();
  pet_fighting_amount_ = value;
}

// optional int32 yitianshenjue_fighting_amount = 16;
inline bool FightingAmountProto::has_yitianshenjue_fighting_amount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FightingAmountProto::set_has_yitianshenjue_fighting_amount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FightingAmountProto::clear_has_yitianshenjue_fighting_amount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FightingAmountProto::clear_yitianshenjue_fighting_amount() {
  yitianshenjue_fighting_amount_ = 0;
  clear_has_yitianshenjue_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::yitianshenjue_fighting_amount() const {
  return yitianshenjue_fighting_amount_;
}
inline void FightingAmountProto::set_yitianshenjue_fighting_amount(::google::protobuf::int32 value) {
  set_has_yitianshenjue_fighting_amount();
  yitianshenjue_fighting_amount_ = value;
}

// optional int32 moshi_fighting_amount = 17;
inline bool FightingAmountProto::has_moshi_fighting_amount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FightingAmountProto::set_has_moshi_fighting_amount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FightingAmountProto::clear_has_moshi_fighting_amount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FightingAmountProto::clear_moshi_fighting_amount() {
  moshi_fighting_amount_ = 0;
  clear_has_moshi_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::moshi_fighting_amount() const {
  return moshi_fighting_amount_;
}
inline void FightingAmountProto::set_moshi_fighting_amount(::google::protobuf::int32 value) {
  set_has_moshi_fighting_amount();
  moshi_fighting_amount_ = value;
}

// optional int32 qianqiudajie_fighting_amount = 18;
inline bool FightingAmountProto::has_qianqiudajie_fighting_amount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FightingAmountProto::set_has_qianqiudajie_fighting_amount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FightingAmountProto::clear_has_qianqiudajie_fighting_amount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FightingAmountProto::clear_qianqiudajie_fighting_amount() {
  qianqiudajie_fighting_amount_ = 0;
  clear_has_qianqiudajie_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::qianqiudajie_fighting_amount() const {
  return qianqiudajie_fighting_amount_;
}
inline void FightingAmountProto::set_qianqiudajie_fighting_amount(::google::protobuf::int32 value) {
  set_has_qianqiudajie_fighting_amount();
  qianqiudajie_fighting_amount_ = value;
}

// optional int32 jing_jie_fighting_amount = 19;
inline bool FightingAmountProto::has_jing_jie_fighting_amount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FightingAmountProto::set_has_jing_jie_fighting_amount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FightingAmountProto::clear_has_jing_jie_fighting_amount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FightingAmountProto::clear_jing_jie_fighting_amount() {
  jing_jie_fighting_amount_ = 0;
  clear_has_jing_jie_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::jing_jie_fighting_amount() const {
  return jing_jie_fighting_amount_;
}
inline void FightingAmountProto::set_jing_jie_fighting_amount(::google::protobuf::int32 value) {
  set_has_jing_jie_fighting_amount();
  jing_jie_fighting_amount_ = value;
}

// optional int32 marriage_weapon_amount = 20;
inline bool FightingAmountProto::has_marriage_weapon_amount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FightingAmountProto::set_has_marriage_weapon_amount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FightingAmountProto::clear_has_marriage_weapon_amount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FightingAmountProto::clear_marriage_weapon_amount() {
  marriage_weapon_amount_ = 0;
  clear_has_marriage_weapon_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::marriage_weapon_amount() const {
  return marriage_weapon_amount_;
}
inline void FightingAmountProto::set_marriage_weapon_amount(::google::protobuf::int32 value) {
  set_has_marriage_weapon_amount();
  marriage_weapon_amount_ = value;
}

// optional int32 marriage_goods_amount = 21;
inline bool FightingAmountProto::has_marriage_goods_amount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FightingAmountProto::set_has_marriage_goods_amount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FightingAmountProto::clear_has_marriage_goods_amount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FightingAmountProto::clear_marriage_goods_amount() {
  marriage_goods_amount_ = 0;
  clear_has_marriage_goods_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::marriage_goods_amount() const {
  return marriage_goods_amount_;
}
inline void FightingAmountProto::set_marriage_goods_amount(::google::protobuf::int32 value) {
  set_has_marriage_goods_amount();
  marriage_goods_amount_ = value;
}

// optional int32 chi_huo_shen_gong_fighting_amount = 22;
inline bool FightingAmountProto::has_chi_huo_shen_gong_fighting_amount() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FightingAmountProto::set_has_chi_huo_shen_gong_fighting_amount() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FightingAmountProto::clear_has_chi_huo_shen_gong_fighting_amount() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FightingAmountProto::clear_chi_huo_shen_gong_fighting_amount() {
  chi_huo_shen_gong_fighting_amount_ = 0;
  clear_has_chi_huo_shen_gong_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::chi_huo_shen_gong_fighting_amount() const {
  return chi_huo_shen_gong_fighting_amount_;
}
inline void FightingAmountProto::set_chi_huo_shen_gong_fighting_amount(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_fighting_amount();
  chi_huo_shen_gong_fighting_amount_ = value;
}

// optional int32 mo_bing_fighting_amount = 23;
inline bool FightingAmountProto::has_mo_bing_fighting_amount() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FightingAmountProto::set_has_mo_bing_fighting_amount() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FightingAmountProto::clear_has_mo_bing_fighting_amount() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FightingAmountProto::clear_mo_bing_fighting_amount() {
  mo_bing_fighting_amount_ = 0;
  clear_has_mo_bing_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::mo_bing_fighting_amount() const {
  return mo_bing_fighting_amount_;
}
inline void FightingAmountProto::set_mo_bing_fighting_amount(::google::protobuf::int32 value) {
  set_has_mo_bing_fighting_amount();
  mo_bing_fighting_amount_ = value;
}

// optional int32 tian_xie_fighting_amount = 24;
inline bool FightingAmountProto::has_tian_xie_fighting_amount() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FightingAmountProto::set_has_tian_xie_fighting_amount() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FightingAmountProto::clear_has_tian_xie_fighting_amount() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FightingAmountProto::clear_tian_xie_fighting_amount() {
  tian_xie_fighting_amount_ = 0;
  clear_has_tian_xie_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::tian_xie_fighting_amount() const {
  return tian_xie_fighting_amount_;
}
inline void FightingAmountProto::set_tian_xie_fighting_amount(::google::protobuf::int32 value) {
  set_has_tian_xie_fighting_amount();
  tian_xie_fighting_amount_ = value;
}

// optional int32 wu_dao_fighting_amount = 25;
inline bool FightingAmountProto::has_wu_dao_fighting_amount() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FightingAmountProto::set_has_wu_dao_fighting_amount() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FightingAmountProto::clear_has_wu_dao_fighting_amount() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FightingAmountProto::clear_wu_dao_fighting_amount() {
  wu_dao_fighting_amount_ = 0;
  clear_has_wu_dao_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::wu_dao_fighting_amount() const {
  return wu_dao_fighting_amount_;
}
inline void FightingAmountProto::set_wu_dao_fighting_amount(::google::protobuf::int32 value) {
  set_has_wu_dao_fighting_amount();
  wu_dao_fighting_amount_ = value;
}

// repeated int32 shield_fighting_amount = 26;
inline int FightingAmountProto::shield_fighting_amount_size() const {
  return shield_fighting_amount_.size();
}
inline void FightingAmountProto::clear_shield_fighting_amount() {
  shield_fighting_amount_.Clear();
}
inline ::google::protobuf::int32 FightingAmountProto::shield_fighting_amount(int index) const {
  return shield_fighting_amount_.Get(index);
}
inline void FightingAmountProto::set_shield_fighting_amount(int index, ::google::protobuf::int32 value) {
  shield_fighting_amount_.Set(index, value);
}
inline void FightingAmountProto::add_shield_fighting_amount(::google::protobuf::int32 value) {
  shield_fighting_amount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FightingAmountProto::shield_fighting_amount() const {
  return shield_fighting_amount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FightingAmountProto::mutable_shield_fighting_amount() {
  return &shield_fighting_amount_;
}

// optional int32 jiu_wei_hu_fighting_amount = 27;
inline bool FightingAmountProto::has_jiu_wei_hu_fighting_amount() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FightingAmountProto::set_has_jiu_wei_hu_fighting_amount() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FightingAmountProto::clear_has_jiu_wei_hu_fighting_amount() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FightingAmountProto::clear_jiu_wei_hu_fighting_amount() {
  jiu_wei_hu_fighting_amount_ = 0;
  clear_has_jiu_wei_hu_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::jiu_wei_hu_fighting_amount() const {
  return jiu_wei_hu_fighting_amount_;
}
inline void FightingAmountProto::set_jiu_wei_hu_fighting_amount(::google::protobuf::int32 value) {
  set_has_jiu_wei_hu_fighting_amount();
  jiu_wei_hu_fighting_amount_ = value;
}

// optional int32 ling_yu_fighting_amount = 28;
inline bool FightingAmountProto::has_ling_yu_fighting_amount() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void FightingAmountProto::set_has_ling_yu_fighting_amount() {
  _has_bits_[0] |= 0x08000000u;
}
inline void FightingAmountProto::clear_has_ling_yu_fighting_amount() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void FightingAmountProto::clear_ling_yu_fighting_amount() {
  ling_yu_fighting_amount_ = 0;
  clear_has_ling_yu_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::ling_yu_fighting_amount() const {
  return ling_yu_fighting_amount_;
}
inline void FightingAmountProto::set_ling_yu_fighting_amount(::google::protobuf::int32 value) {
  set_has_ling_yu_fighting_amount();
  ling_yu_fighting_amount_ = value;
}

// optional int32 yu_yi_ge_fighting_amount = 29;
inline bool FightingAmountProto::has_yu_yi_ge_fighting_amount() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void FightingAmountProto::set_has_yu_yi_ge_fighting_amount() {
  _has_bits_[0] |= 0x10000000u;
}
inline void FightingAmountProto::clear_has_yu_yi_ge_fighting_amount() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void FightingAmountProto::clear_yu_yi_ge_fighting_amount() {
  yu_yi_ge_fighting_amount_ = 0;
  clear_has_yu_yi_ge_fighting_amount();
}
inline ::google::protobuf::int32 FightingAmountProto::yu_yi_ge_fighting_amount() const {
  return yu_yi_ge_fighting_amount_;
}
inline void FightingAmountProto::set_yu_yi_ge_fighting_amount(::google::protobuf::int32 value) {
  set_has_yu_yi_ge_fighting_amount();
  yu_yi_ge_fighting_amount_ = value;
}

// -------------------------------------------------------------------

// GoodsContainerProto

// optional int32 size = 2;
inline bool GoodsContainerProto::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsContainerProto::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsContainerProto::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsContainerProto::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 GoodsContainerProto::size() const {
  return size_;
}
inline void GoodsContainerProto::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// repeated int32 pos_list = 3;
inline int GoodsContainerProto::pos_list_size() const {
  return pos_list_.size();
}
inline void GoodsContainerProto::clear_pos_list() {
  pos_list_.Clear();
}
inline ::google::protobuf::int32 GoodsContainerProto::pos_list(int index) const {
  return pos_list_.Get(index);
}
inline void GoodsContainerProto::set_pos_list(int index, ::google::protobuf::int32 value) {
  pos_list_.Set(index, value);
}
inline void GoodsContainerProto::add_pos_list(::google::protobuf::int32 value) {
  pos_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GoodsContainerProto::pos_list() const {
  return pos_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GoodsContainerProto::mutable_pos_list() {
  return &pos_list_;
}

// optional int64 next_open_slot_time = 5 [deprecated = true];
inline bool GoodsContainerProto::has_next_open_slot_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoodsContainerProto::set_has_next_open_slot_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoodsContainerProto::clear_has_next_open_slot_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoodsContainerProto::clear_next_open_slot_time() {
  next_open_slot_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_open_slot_time();
}
inline ::google::protobuf::int64 GoodsContainerProto::next_open_slot_time() const {
  return next_open_slot_time_;
}
inline void GoodsContainerProto::set_next_open_slot_time(::google::protobuf::int64 value) {
  set_has_next_open_slot_time();
  next_open_slot_time_ = value;
}

// repeated .app.message.GoodsContainerUnlockProto unlock_datas = 6;
inline int GoodsContainerProto::unlock_datas_size() const {
  return unlock_datas_.size();
}
inline void GoodsContainerProto::clear_unlock_datas() {
  unlock_datas_.Clear();
}
inline const ::app::message::GoodsContainerUnlockProto& GoodsContainerProto::unlock_datas(int index) const {
  return unlock_datas_.Get(index);
}
inline ::app::message::GoodsContainerUnlockProto* GoodsContainerProto::mutable_unlock_datas(int index) {
  return unlock_datas_.Mutable(index);
}
inline ::app::message::GoodsContainerUnlockProto* GoodsContainerProto::add_unlock_datas() {
  return unlock_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsContainerUnlockProto >&
GoodsContainerProto::unlock_datas() const {
  return unlock_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsContainerUnlockProto >*
GoodsContainerProto::mutable_unlock_datas() {
  return &unlock_datas_;
}

// repeated bytes goods_data_list = 7;
inline int GoodsContainerProto::goods_data_list_size() const {
  return goods_data_list_.size();
}
inline void GoodsContainerProto::clear_goods_data_list() {
  goods_data_list_.Clear();
}
inline const ::std::string& GoodsContainerProto::goods_data_list(int index) const {
  return goods_data_list_.Get(index);
}
inline ::std::string* GoodsContainerProto::mutable_goods_data_list(int index) {
  return goods_data_list_.Mutable(index);
}
inline void GoodsContainerProto::set_goods_data_list(int index, const ::std::string& value) {
  goods_data_list_.Mutable(index)->assign(value);
}
inline void GoodsContainerProto::set_goods_data_list(int index, const char* value) {
  goods_data_list_.Mutable(index)->assign(value);
}
inline void GoodsContainerProto::set_goods_data_list(int index, const void* value, size_t size) {
  goods_data_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsContainerProto::add_goods_data_list() {
  return goods_data_list_.Add();
}
inline void GoodsContainerProto::add_goods_data_list(const ::std::string& value) {
  goods_data_list_.Add()->assign(value);
}
inline void GoodsContainerProto::add_goods_data_list(const char* value) {
  goods_data_list_.Add()->assign(value);
}
inline void GoodsContainerProto::add_goods_data_list(const void* value, size_t size) {
  goods_data_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GoodsContainerProto::goods_data_list() const {
  return goods_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GoodsContainerProto::mutable_goods_data_list() {
  return &goods_data_list_;
}

// repeated bytes goods_list = 8;
inline int GoodsContainerProto::goods_list_size() const {
  return goods_list_.size();
}
inline void GoodsContainerProto::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::std::string& GoodsContainerProto::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::std::string* GoodsContainerProto::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline void GoodsContainerProto::set_goods_list(int index, const ::std::string& value) {
  goods_list_.Mutable(index)->assign(value);
}
inline void GoodsContainerProto::set_goods_list(int index, const char* value) {
  goods_list_.Mutable(index)->assign(value);
}
inline void GoodsContainerProto::set_goods_list(int index, const void* value, size_t size) {
  goods_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsContainerProto::add_goods_list() {
  return goods_list_.Add();
}
inline void GoodsContainerProto::add_goods_list(const ::std::string& value) {
  goods_list_.Add()->assign(value);
}
inline void GoodsContainerProto::add_goods_list(const char* value) {
  goods_list_.Add()->assign(value);
}
inline void GoodsContainerProto::add_goods_list(const void* value, size_t size) {
  goods_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GoodsContainerProto::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GoodsContainerProto::mutable_goods_list() {
  return &goods_list_;
}

// optional .app.message.SpriteStatProto acc_stat = 9;
inline bool GoodsContainerProto::has_acc_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GoodsContainerProto::set_has_acc_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GoodsContainerProto::clear_has_acc_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GoodsContainerProto::clear_acc_stat() {
  if (acc_stat_ != NULL) acc_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_acc_stat();
}
inline const ::app::message::SpriteStatProto& GoodsContainerProto::acc_stat() const {
  return acc_stat_ != NULL ? *acc_stat_ : *default_instance_->acc_stat_;
}
inline ::app::message::SpriteStatProto* GoodsContainerProto::mutable_acc_stat() {
  set_has_acc_stat();
  if (acc_stat_ == NULL) acc_stat_ = new ::app::message::SpriteStatProto;
  return acc_stat_;
}
inline ::app::message::SpriteStatProto* GoodsContainerProto::release_acc_stat() {
  clear_has_acc_stat();
  ::app::message::SpriteStatProto* temp = acc_stat_;
  acc_stat_ = NULL;
  return temp;
}
inline void GoodsContainerProto::set_allocated_acc_stat(::app::message::SpriteStatProto* acc_stat) {
  delete acc_stat_;
  acc_stat_ = acc_stat;
  if (acc_stat) {
    set_has_acc_stat();
  } else {
    clear_has_acc_stat();
  }
}

// optional int32 init_count = 10;
inline bool GoodsContainerProto::has_init_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GoodsContainerProto::set_has_init_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GoodsContainerProto::clear_has_init_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GoodsContainerProto::clear_init_count() {
  init_count_ = 0;
  clear_has_init_count();
}
inline ::google::protobuf::int32 GoodsContainerProto::init_count() const {
  return init_count_;
}
inline void GoodsContainerProto::set_init_count(::google::protobuf::int32 value) {
  set_has_init_count();
  init_count_ = value;
}

// optional int64 acc_start_time = 11;
inline bool GoodsContainerProto::has_acc_start_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GoodsContainerProto::set_has_acc_start_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GoodsContainerProto::clear_has_acc_start_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GoodsContainerProto::clear_acc_start_time() {
  acc_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_acc_start_time();
}
inline ::google::protobuf::int64 GoodsContainerProto::acc_start_time() const {
  return acc_start_time_;
}
inline void GoodsContainerProto::set_acc_start_time(::google::protobuf::int64 value) {
  set_has_acc_start_time();
  acc_start_time_ = value;
}

// -------------------------------------------------------------------

// GoodsContainerUnlockProto

// optional int32 pos = 1 [deprecated = true];
inline bool GoodsContainerUnlockProto::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsContainerUnlockProto::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsContainerUnlockProto::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsContainerUnlockProto::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 GoodsContainerUnlockProto::pos() const {
  return pos_;
}
inline void GoodsContainerUnlockProto::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int64 unlock_time = 2;
inline bool GoodsContainerUnlockProto::has_unlock_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsContainerUnlockProto::set_has_unlock_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsContainerUnlockProto::clear_has_unlock_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsContainerUnlockProto::clear_unlock_time() {
  unlock_time_ = GOOGLE_LONGLONG(0);
  clear_has_unlock_time();
}
inline ::google::protobuf::int64 GoodsContainerUnlockProto::unlock_time() const {
  return unlock_time_;
}
inline void GoodsContainerUnlockProto::set_unlock_time(::google::protobuf::int64 value) {
  set_has_unlock_time();
  unlock_time_ = value;
}

// optional int32 unlock_cost = 3;
inline bool GoodsContainerUnlockProto::has_unlock_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoodsContainerUnlockProto::set_has_unlock_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoodsContainerUnlockProto::clear_has_unlock_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoodsContainerUnlockProto::clear_unlock_cost() {
  unlock_cost_ = 0;
  clear_has_unlock_cost();
}
inline ::google::protobuf::int32 GoodsContainerUnlockProto::unlock_cost() const {
  return unlock_cost_;
}
inline void GoodsContainerUnlockProto::set_unlock_cost(::google::protobuf::int32 value) {
  set_has_unlock_cost();
  unlock_cost_ = value;
}

// optional int32 exp = 4;
inline bool GoodsContainerUnlockProto::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoodsContainerUnlockProto::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoodsContainerUnlockProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoodsContainerUnlockProto::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 GoodsContainerUnlockProto::exp() const {
  return exp_;
}
inline void GoodsContainerUnlockProto::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional .app.message.SpriteStatProto sprite_stat = 5;
inline bool GoodsContainerUnlockProto::has_sprite_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GoodsContainerUnlockProto::set_has_sprite_stat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GoodsContainerUnlockProto::clear_has_sprite_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GoodsContainerUnlockProto::clear_sprite_stat() {
  if (sprite_stat_ != NULL) sprite_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_sprite_stat();
}
inline const ::app::message::SpriteStatProto& GoodsContainerUnlockProto::sprite_stat() const {
  return sprite_stat_ != NULL ? *sprite_stat_ : *default_instance_->sprite_stat_;
}
inline ::app::message::SpriteStatProto* GoodsContainerUnlockProto::mutable_sprite_stat() {
  set_has_sprite_stat();
  if (sprite_stat_ == NULL) sprite_stat_ = new ::app::message::SpriteStatProto;
  return sprite_stat_;
}
inline ::app::message::SpriteStatProto* GoodsContainerUnlockProto::release_sprite_stat() {
  clear_has_sprite_stat();
  ::app::message::SpriteStatProto* temp = sprite_stat_;
  sprite_stat_ = NULL;
  return temp;
}
inline void GoodsContainerUnlockProto::set_allocated_sprite_stat(::app::message::SpriteStatProto* sprite_stat) {
  delete sprite_stat_;
  sprite_stat_ = sprite_stat;
  if (sprite_stat) {
    set_has_sprite_stat();
  } else {
    clear_has_sprite_stat();
  }
}

// optional int32 open_slot_count = 6;
inline bool GoodsContainerUnlockProto::has_open_slot_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GoodsContainerUnlockProto::set_has_open_slot_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GoodsContainerUnlockProto::clear_has_open_slot_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GoodsContainerUnlockProto::clear_open_slot_count() {
  open_slot_count_ = 0;
  clear_has_open_slot_count();
}
inline ::google::protobuf::int32 GoodsContainerUnlockProto::open_slot_count() const {
  return open_slot_count_;
}
inline void GoodsContainerUnlockProto::set_open_slot_count(::google::protobuf::int32 value) {
  set_has_open_slot_count();
  open_slot_count_ = value;
}

// -------------------------------------------------------------------

// HeroClearedProto

// optional .app.message.DailyTaskProto doing_daily_task = 1;
inline bool HeroClearedProto::has_doing_daily_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroClearedProto::set_has_doing_daily_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroClearedProto::clear_has_doing_daily_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroClearedProto::clear_doing_daily_task() {
  if (doing_daily_task_ != NULL) doing_daily_task_->::app::message::DailyTaskProto::Clear();
  clear_has_doing_daily_task();
}
inline const ::app::message::DailyTaskProto& HeroClearedProto::doing_daily_task() const {
  return doing_daily_task_ != NULL ? *doing_daily_task_ : *default_instance_->doing_daily_task_;
}
inline ::app::message::DailyTaskProto* HeroClearedProto::mutable_doing_daily_task() {
  set_has_doing_daily_task();
  if (doing_daily_task_ == NULL) doing_daily_task_ = new ::app::message::DailyTaskProto;
  return doing_daily_task_;
}
inline ::app::message::DailyTaskProto* HeroClearedProto::release_doing_daily_task() {
  clear_has_doing_daily_task();
  ::app::message::DailyTaskProto* temp = doing_daily_task_;
  doing_daily_task_ = NULL;
  return temp;
}
inline void HeroClearedProto::set_allocated_doing_daily_task(::app::message::DailyTaskProto* doing_daily_task) {
  delete doing_daily_task_;
  doing_daily_task_ = doing_daily_task;
  if (doing_daily_task) {
    set_has_doing_daily_task();
  } else {
    clear_has_doing_daily_task();
  }
}

// optional .app.message.GuildTaskProto doing_guild_task = 2;
inline bool HeroClearedProto::has_doing_guild_task() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroClearedProto::set_has_doing_guild_task() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroClearedProto::clear_has_doing_guild_task() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroClearedProto::clear_doing_guild_task() {
  if (doing_guild_task_ != NULL) doing_guild_task_->::app::message::GuildTaskProto::Clear();
  clear_has_doing_guild_task();
}
inline const ::app::message::GuildTaskProto& HeroClearedProto::doing_guild_task() const {
  return doing_guild_task_ != NULL ? *doing_guild_task_ : *default_instance_->doing_guild_task_;
}
inline ::app::message::GuildTaskProto* HeroClearedProto::mutable_doing_guild_task() {
  set_has_doing_guild_task();
  if (doing_guild_task_ == NULL) doing_guild_task_ = new ::app::message::GuildTaskProto;
  return doing_guild_task_;
}
inline ::app::message::GuildTaskProto* HeroClearedProto::release_doing_guild_task() {
  clear_has_doing_guild_task();
  ::app::message::GuildTaskProto* temp = doing_guild_task_;
  doing_guild_task_ = NULL;
  return temp;
}
inline void HeroClearedProto::set_allocated_doing_guild_task(::app::message::GuildTaskProto* doing_guild_task) {
  delete doing_guild_task_;
  doing_guild_task_ = doing_guild_task;
  if (doing_guild_task) {
    set_has_doing_guild_task();
  } else {
    clear_has_doing_guild_task();
  }
}

// -------------------------------------------------------------------

// ChallengeResultProto

// optional int32 result = 1;
inline bool ChallengeResultProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeResultProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeResultProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeResultProto::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ChallengeResultProto::result() const {
  return result_;
}
inline void ChallengeResultProto::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 id = 2;
inline bool ChallengeResultProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeResultProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChallengeResultProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChallengeResultProto::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ChallengeResultProto::id() const {
  return id_;
}
inline void ChallengeResultProto::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 3;
inline bool ChallengeResultProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeResultProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChallengeResultProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChallengeResultProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChallengeResultProto::name() const {
  return *name_;
}
inline void ChallengeResultProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChallengeResultProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChallengeResultProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChallengeResultProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChallengeResultProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChallengeResultProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 race = 4;
inline bool ChallengeResultProto::has_race() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeResultProto::set_has_race() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChallengeResultProto::clear_has_race() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChallengeResultProto::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 ChallengeResultProto::race() const {
  return race_;
}
inline void ChallengeResultProto::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int64 equipment_resource = 5;
inline bool ChallengeResultProto::has_equipment_resource() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChallengeResultProto::set_has_equipment_resource() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChallengeResultProto::clear_has_equipment_resource() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChallengeResultProto::clear_equipment_resource() {
  equipment_resource_ = GOOGLE_LONGLONG(0);
  clear_has_equipment_resource();
}
inline ::google::protobuf::int64 ChallengeResultProto::equipment_resource() const {
  return equipment_resource_;
}
inline void ChallengeResultProto::set_equipment_resource(::google::protobuf::int64 value) {
  set_has_equipment_resource();
  equipment_resource_ = value;
}

// optional .app.message.SpriteStatProto total_stat = 6;
inline bool ChallengeResultProto::has_total_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChallengeResultProto::set_has_total_stat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChallengeResultProto::clear_has_total_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChallengeResultProto::clear_total_stat() {
  if (total_stat_ != NULL) total_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_total_stat();
}
inline const ::app::message::SpriteStatProto& ChallengeResultProto::total_stat() const {
  return total_stat_ != NULL ? *total_stat_ : *default_instance_->total_stat_;
}
inline ::app::message::SpriteStatProto* ChallengeResultProto::mutable_total_stat() {
  set_has_total_stat();
  if (total_stat_ == NULL) total_stat_ = new ::app::message::SpriteStatProto;
  return total_stat_;
}
inline ::app::message::SpriteStatProto* ChallengeResultProto::release_total_stat() {
  clear_has_total_stat();
  ::app::message::SpriteStatProto* temp = total_stat_;
  total_stat_ = NULL;
  return temp;
}
inline void ChallengeResultProto::set_allocated_total_stat(::app::message::SpriteStatProto* total_stat) {
  delete total_stat_;
  total_stat_ = total_stat;
  if (total_stat) {
    set_has_total_stat();
  } else {
    clear_has_total_stat();
  }
}

// repeated int32 spell_types = 7;
inline int ChallengeResultProto::spell_types_size() const {
  return spell_types_.size();
}
inline void ChallengeResultProto::clear_spell_types() {
  spell_types_.Clear();
}
inline ::google::protobuf::int32 ChallengeResultProto::spell_types(int index) const {
  return spell_types_.Get(index);
}
inline void ChallengeResultProto::set_spell_types(int index, ::google::protobuf::int32 value) {
  spell_types_.Set(index, value);
}
inline void ChallengeResultProto::add_spell_types(::google::protobuf::int32 value) {
  spell_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChallengeResultProto::spell_types() const {
  return spell_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChallengeResultProto::mutable_spell_types() {
  return &spell_types_;
}

// optional int32 level = 8;
inline bool ChallengeResultProto::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChallengeResultProto::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChallengeResultProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChallengeResultProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ChallengeResultProto::level() const {
  return level_;
}
inline void ChallengeResultProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// OtherHeroProto

// optional int64 id = 1;
inline bool OtherHeroProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtherHeroProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtherHeroProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtherHeroProto::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 OtherHeroProto::id() const {
  return id_;
}
inline void OtherHeroProto::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool OtherHeroProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtherHeroProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtherHeroProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtherHeroProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OtherHeroProto::name() const {
  return *name_;
}
inline void OtherHeroProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OtherHeroProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OtherHeroProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherHeroProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OtherHeroProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherHeroProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool OtherHeroProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtherHeroProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtherHeroProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtherHeroProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 OtherHeroProto::level() const {
  return level_;
}
inline void OtherHeroProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 race = 4;
inline bool OtherHeroProto::has_race() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OtherHeroProto::set_has_race() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OtherHeroProto::clear_has_race() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OtherHeroProto::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 OtherHeroProto::race() const {
  return race_;
}
inline void OtherHeroProto::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 fighting_amount = 5;
inline bool OtherHeroProto::has_fighting_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OtherHeroProto::set_has_fighting_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OtherHeroProto::clear_has_fighting_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OtherHeroProto::clear_fighting_amount() {
  fighting_amount_ = 0;
  clear_has_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::fighting_amount() const {
  return fighting_amount_;
}
inline void OtherHeroProto::set_fighting_amount(::google::protobuf::int32 value) {
  set_has_fighting_amount();
  fighting_amount_ = value;
}

// optional .app.message.SpriteStatProto total_stat = 6;
inline bool OtherHeroProto::has_total_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OtherHeroProto::set_has_total_stat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OtherHeroProto::clear_has_total_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OtherHeroProto::clear_total_stat() {
  if (total_stat_ != NULL) total_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_total_stat();
}
inline const ::app::message::SpriteStatProto& OtherHeroProto::total_stat() const {
  return total_stat_ != NULL ? *total_stat_ : *default_instance_->total_stat_;
}
inline ::app::message::SpriteStatProto* OtherHeroProto::mutable_total_stat() {
  set_has_total_stat();
  if (total_stat_ == NULL) total_stat_ = new ::app::message::SpriteStatProto;
  return total_stat_;
}
inline ::app::message::SpriteStatProto* OtherHeroProto::release_total_stat() {
  clear_has_total_stat();
  ::app::message::SpriteStatProto* temp = total_stat_;
  total_stat_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_total_stat(::app::message::SpriteStatProto* total_stat) {
  delete total_stat_;
  total_stat_ = total_stat;
  if (total_stat) {
    set_has_total_stat();
  } else {
    clear_has_total_stat();
  }
}

// repeated int32 equiped_pos = 7;
inline int OtherHeroProto::equiped_pos_size() const {
  return equiped_pos_.size();
}
inline void OtherHeroProto::clear_equiped_pos() {
  equiped_pos_.Clear();
}
inline ::google::protobuf::int32 OtherHeroProto::equiped_pos(int index) const {
  return equiped_pos_.Get(index);
}
inline void OtherHeroProto::set_equiped_pos(int index, ::google::protobuf::int32 value) {
  equiped_pos_.Set(index, value);
}
inline void OtherHeroProto::add_equiped_pos(::google::protobuf::int32 value) {
  equiped_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OtherHeroProto::equiped_pos() const {
  return equiped_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OtherHeroProto::mutable_equiped_pos() {
  return &equiped_pos_;
}

// repeated .app.message.EquipmentDataProto equipment_datas = 8;
inline int OtherHeroProto::equipment_datas_size() const {
  return equipment_datas_.size();
}
inline void OtherHeroProto::clear_equipment_datas() {
  equipment_datas_.Clear();
}
inline const ::app::message::EquipmentDataProto& OtherHeroProto::equipment_datas(int index) const {
  return equipment_datas_.Get(index);
}
inline ::app::message::EquipmentDataProto* OtherHeroProto::mutable_equipment_datas(int index) {
  return equipment_datas_.Mutable(index);
}
inline ::app::message::EquipmentDataProto* OtherHeroProto::add_equipment_datas() {
  return equipment_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >&
OtherHeroProto::equipment_datas() const {
  return equipment_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentDataProto >*
OtherHeroProto::mutable_equipment_datas() {
  return &equipment_datas_;
}

// repeated .app.message.EquipmentProto equipments = 9;
inline int OtherHeroProto::equipments_size() const {
  return equipments_.size();
}
inline void OtherHeroProto::clear_equipments() {
  equipments_.Clear();
}
inline const ::app::message::EquipmentProto& OtherHeroProto::equipments(int index) const {
  return equipments_.Get(index);
}
inline ::app::message::EquipmentProto* OtherHeroProto::mutable_equipments(int index) {
  return equipments_.Mutable(index);
}
inline ::app::message::EquipmentProto* OtherHeroProto::add_equipments() {
  return equipments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >&
OtherHeroProto::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::EquipmentProto >*
OtherHeroProto::mutable_equipments() {
  return &equipments_;
}

// optional int64 equipment_resources = 10;
inline bool OtherHeroProto::has_equipment_resources() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OtherHeroProto::set_has_equipment_resources() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OtherHeroProto::clear_has_equipment_resources() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OtherHeroProto::clear_equipment_resources() {
  equipment_resources_ = GOOGLE_LONGLONG(0);
  clear_has_equipment_resources();
}
inline ::google::protobuf::int64 OtherHeroProto::equipment_resources() const {
  return equipment_resources_;
}
inline void OtherHeroProto::set_equipment_resources(::google::protobuf::int64 value) {
  set_has_equipment_resources();
  equipment_resources_ = value;
}

// optional int64 exp = 11;
inline bool OtherHeroProto::has_exp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OtherHeroProto::set_has_exp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OtherHeroProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OtherHeroProto::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 OtherHeroProto::exp() const {
  return exp_;
}
inline void OtherHeroProto::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 upgrade_exp = 12;
inline bool OtherHeroProto::has_upgrade_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OtherHeroProto::set_has_upgrade_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OtherHeroProto::clear_has_upgrade_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OtherHeroProto::clear_upgrade_exp() {
  upgrade_exp_ = GOOGLE_LONGLONG(0);
  clear_has_upgrade_exp();
}
inline ::google::protobuf::int64 OtherHeroProto::upgrade_exp() const {
  return upgrade_exp_;
}
inline void OtherHeroProto::set_upgrade_exp(::google::protobuf::int64 value) {
  set_has_upgrade_exp();
  upgrade_exp_ = value;
}

// optional int64 life = 13;
inline bool OtherHeroProto::has_life() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OtherHeroProto::set_has_life() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OtherHeroProto::clear_has_life() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OtherHeroProto::clear_life() {
  life_ = GOOGLE_LONGLONG(0);
  clear_has_life();
}
inline ::google::protobuf::int64 OtherHeroProto::life() const {
  return life_;
}
inline void OtherHeroProto::set_life(::google::protobuf::int64 value) {
  set_has_life();
  life_ = value;
}

// optional int64 max_life = 14;
inline bool OtherHeroProto::has_max_life() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OtherHeroProto::set_has_max_life() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OtherHeroProto::clear_has_max_life() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OtherHeroProto::clear_max_life() {
  max_life_ = GOOGLE_LONGLONG(0);
  clear_has_max_life();
}
inline ::google::protobuf::int64 OtherHeroProto::max_life() const {
  return max_life_;
}
inline void OtherHeroProto::set_max_life(::google::protobuf::int64 value) {
  set_has_max_life();
  max_life_ = value;
}

// optional int32 real_air = 15;
inline bool OtherHeroProto::has_real_air() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OtherHeroProto::set_has_real_air() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OtherHeroProto::clear_has_real_air() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OtherHeroProto::clear_real_air() {
  real_air_ = 0;
  clear_has_real_air();
}
inline ::google::protobuf::int32 OtherHeroProto::real_air() const {
  return real_air_;
}
inline void OtherHeroProto::set_real_air(::google::protobuf::int32 value) {
  set_has_real_air();
  real_air_ = value;
}

// optional int32 stamina = 16;
inline bool OtherHeroProto::has_stamina() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OtherHeroProto::set_has_stamina() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OtherHeroProto::clear_has_stamina() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OtherHeroProto::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline ::google::protobuf::int32 OtherHeroProto::stamina() const {
  return stamina_;
}
inline void OtherHeroProto::set_stamina(::google::protobuf::int32 value) {
  set_has_stamina();
  stamina_ = value;
}

// optional int32 max_stamina = 17;
inline bool OtherHeroProto::has_max_stamina() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OtherHeroProto::set_has_max_stamina() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OtherHeroProto::clear_has_max_stamina() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OtherHeroProto::clear_max_stamina() {
  max_stamina_ = 0;
  clear_has_max_stamina();
}
inline ::google::protobuf::int32 OtherHeroProto::max_stamina() const {
  return max_stamina_;
}
inline void OtherHeroProto::set_max_stamina(::google::protobuf::int32 value) {
  set_has_max_stamina();
  max_stamina_ = value;
}

// optional bytes guild_name = 18;
inline bool OtherHeroProto::has_guild_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OtherHeroProto::set_has_guild_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OtherHeroProto::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OtherHeroProto::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& OtherHeroProto::guild_name() const {
  return *guild_name_;
}
inline void OtherHeroProto::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void OtherHeroProto::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void OtherHeroProto::set_guild_name(const void* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherHeroProto::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* OtherHeroProto::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherHeroProto::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 vip_exp = 19;
inline bool OtherHeroProto::has_vip_exp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OtherHeroProto::set_has_vip_exp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OtherHeroProto::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OtherHeroProto::clear_vip_exp() {
  vip_exp_ = 0;
  clear_has_vip_exp();
}
inline ::google::protobuf::int32 OtherHeroProto::vip_exp() const {
  return vip_exp_;
}
inline void OtherHeroProto::set_vip_exp(::google::protobuf::int32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional int32 guild_li_lian = 30;
inline bool OtherHeroProto::has_guild_li_lian() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OtherHeroProto::set_has_guild_li_lian() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OtherHeroProto::clear_has_guild_li_lian() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OtherHeroProto::clear_guild_li_lian() {
  guild_li_lian_ = 0;
  clear_has_guild_li_lian();
}
inline ::google::protobuf::int32 OtherHeroProto::guild_li_lian() const {
  return guild_li_lian_;
}
inline void OtherHeroProto::set_guild_li_lian(::google::protobuf::int32 value) {
  set_has_guild_li_lian();
  guild_li_lian_ = value;
}

// optional .app.message.HeroSuperArmProto super_arm = 31;
inline bool OtherHeroProto::has_super_arm() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OtherHeroProto::set_has_super_arm() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OtherHeroProto::clear_has_super_arm() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OtherHeroProto::clear_super_arm() {
  if (super_arm_ != NULL) super_arm_->::app::message::HeroSuperArmProto::Clear();
  clear_has_super_arm();
}
inline const ::app::message::HeroSuperArmProto& OtherHeroProto::super_arm() const {
  return super_arm_ != NULL ? *super_arm_ : *default_instance_->super_arm_;
}
inline ::app::message::HeroSuperArmProto* OtherHeroProto::mutable_super_arm() {
  set_has_super_arm();
  if (super_arm_ == NULL) super_arm_ = new ::app::message::HeroSuperArmProto;
  return super_arm_;
}
inline ::app::message::HeroSuperArmProto* OtherHeroProto::release_super_arm() {
  clear_has_super_arm();
  ::app::message::HeroSuperArmProto* temp = super_arm_;
  super_arm_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_super_arm(::app::message::HeroSuperArmProto* super_arm) {
  delete super_arm_;
  super_arm_ = super_arm;
  if (super_arm) {
    set_has_super_arm();
  } else {
    clear_has_super_arm();
  }
}

// optional .app.message.CloakProto cloak = 32;
inline bool OtherHeroProto::has_cloak() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OtherHeroProto::set_has_cloak() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OtherHeroProto::clear_has_cloak() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OtherHeroProto::clear_cloak() {
  if (cloak_ != NULL) cloak_->::app::message::CloakProto::Clear();
  clear_has_cloak();
}
inline const ::app::message::CloakProto& OtherHeroProto::cloak() const {
  return cloak_ != NULL ? *cloak_ : *default_instance_->cloak_;
}
inline ::app::message::CloakProto* OtherHeroProto::mutable_cloak() {
  set_has_cloak();
  if (cloak_ == NULL) cloak_ = new ::app::message::CloakProto;
  return cloak_;
}
inline ::app::message::CloakProto* OtherHeroProto::release_cloak() {
  clear_has_cloak();
  ::app::message::CloakProto* temp = cloak_;
  cloak_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_cloak(::app::message::CloakProto* cloak) {
  delete cloak_;
  cloak_ = cloak;
  if (cloak) {
    set_has_cloak();
  } else {
    clear_has_cloak();
  }
}

// optional .app.message.AchievementInfoProto achievement = 80;
inline bool OtherHeroProto::has_achievement() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OtherHeroProto::set_has_achievement() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OtherHeroProto::clear_has_achievement() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OtherHeroProto::clear_achievement() {
  if (achievement_ != NULL) achievement_->::app::message::AchievementInfoProto::Clear();
  clear_has_achievement();
}
inline const ::app::message::AchievementInfoProto& OtherHeroProto::achievement() const {
  return achievement_ != NULL ? *achievement_ : *default_instance_->achievement_;
}
inline ::app::message::AchievementInfoProto* OtherHeroProto::mutable_achievement() {
  set_has_achievement();
  if (achievement_ == NULL) achievement_ = new ::app::message::AchievementInfoProto;
  return achievement_;
}
inline ::app::message::AchievementInfoProto* OtherHeroProto::release_achievement() {
  clear_has_achievement();
  ::app::message::AchievementInfoProto* temp = achievement_;
  achievement_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_achievement(::app::message::AchievementInfoProto* achievement) {
  delete achievement_;
  achievement_ = achievement;
  if (achievement) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
}

// optional .app.message.TianZuiProto tian_zui = 85;
inline bool OtherHeroProto::has_tian_zui() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OtherHeroProto::set_has_tian_zui() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OtherHeroProto::clear_has_tian_zui() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OtherHeroProto::clear_tian_zui() {
  if (tian_zui_ != NULL) tian_zui_->::app::message::TianZuiProto::Clear();
  clear_has_tian_zui();
}
inline const ::app::message::TianZuiProto& OtherHeroProto::tian_zui() const {
  return tian_zui_ != NULL ? *tian_zui_ : *default_instance_->tian_zui_;
}
inline ::app::message::TianZuiProto* OtherHeroProto::mutable_tian_zui() {
  set_has_tian_zui();
  if (tian_zui_ == NULL) tian_zui_ = new ::app::message::TianZuiProto;
  return tian_zui_;
}
inline ::app::message::TianZuiProto* OtherHeroProto::release_tian_zui() {
  clear_has_tian_zui();
  ::app::message::TianZuiProto* temp = tian_zui_;
  tian_zui_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_tian_zui(::app::message::TianZuiProto* tian_zui) {
  delete tian_zui_;
  tian_zui_ = tian_zui;
  if (tian_zui) {
    set_has_tian_zui();
  } else {
    clear_has_tian_zui();
  }
}

// optional .app.message.TianJieProto tian_jie = 86;
inline bool OtherHeroProto::has_tian_jie() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OtherHeroProto::set_has_tian_jie() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OtherHeroProto::clear_has_tian_jie() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OtherHeroProto::clear_tian_jie() {
  if (tian_jie_ != NULL) tian_jie_->::app::message::TianJieProto::Clear();
  clear_has_tian_jie();
}
inline const ::app::message::TianJieProto& OtherHeroProto::tian_jie() const {
  return tian_jie_ != NULL ? *tian_jie_ : *default_instance_->tian_jie_;
}
inline ::app::message::TianJieProto* OtherHeroProto::mutable_tian_jie() {
  set_has_tian_jie();
  if (tian_jie_ == NULL) tian_jie_ = new ::app::message::TianJieProto;
  return tian_jie_;
}
inline ::app::message::TianJieProto* OtherHeroProto::release_tian_jie() {
  clear_has_tian_jie();
  ::app::message::TianJieProto* temp = tian_jie_;
  tian_jie_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_tian_jie(::app::message::TianJieProto* tian_jie) {
  delete tian_jie_;
  tian_jie_ = tian_jie;
  if (tian_jie) {
    set_has_tian_jie();
  } else {
    clear_has_tian_jie();
  }
}

// optional .app.message.PetProto pet = 87;
inline bool OtherHeroProto::has_pet() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void OtherHeroProto::set_has_pet() {
  _has_bits_[0] |= 0x02000000u;
}
inline void OtherHeroProto::clear_has_pet() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void OtherHeroProto::clear_pet() {
  if (pet_ != NULL) pet_->::app::message::PetProto::Clear();
  clear_has_pet();
}
inline const ::app::message::PetProto& OtherHeroProto::pet() const {
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::app::message::PetProto* OtherHeroProto::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::app::message::PetProto;
  return pet_;
}
inline ::app::message::PetProto* OtherHeroProto::release_pet() {
  clear_has_pet();
  ::app::message::PetProto* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_pet(::app::message::PetProto* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
}

// repeated int32 gems = 88;
inline int OtherHeroProto::gems_size() const {
  return gems_.size();
}
inline void OtherHeroProto::clear_gems() {
  gems_.Clear();
}
inline ::google::protobuf::int32 OtherHeroProto::gems(int index) const {
  return gems_.Get(index);
}
inline void OtherHeroProto::set_gems(int index, ::google::protobuf::int32 value) {
  gems_.Set(index, value);
}
inline void OtherHeroProto::add_gems(::google::protobuf::int32 value) {
  gems_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OtherHeroProto::gems() const {
  return gems_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OtherHeroProto::mutable_gems() {
  return &gems_;
}

// optional .app.message.BowProto bow = 89;
inline bool OtherHeroProto::has_bow() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void OtherHeroProto::set_has_bow() {
  _has_bits_[0] |= 0x08000000u;
}
inline void OtherHeroProto::clear_has_bow() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void OtherHeroProto::clear_bow() {
  if (bow_ != NULL) bow_->::app::message::BowProto::Clear();
  clear_has_bow();
}
inline const ::app::message::BowProto& OtherHeroProto::bow() const {
  return bow_ != NULL ? *bow_ : *default_instance_->bow_;
}
inline ::app::message::BowProto* OtherHeroProto::mutable_bow() {
  set_has_bow();
  if (bow_ == NULL) bow_ = new ::app::message::BowProto;
  return bow_;
}
inline ::app::message::BowProto* OtherHeroProto::release_bow() {
  clear_has_bow();
  ::app::message::BowProto* temp = bow_;
  bow_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_bow(::app::message::BowProto* bow) {
  delete bow_;
  bow_ = bow;
  if (bow) {
    set_has_bow();
  } else {
    clear_has_bow();
  }
}

// optional int32 pk_amount = 90;
inline bool OtherHeroProto::has_pk_amount() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void OtherHeroProto::set_has_pk_amount() {
  _has_bits_[0] |= 0x10000000u;
}
inline void OtherHeroProto::clear_has_pk_amount() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void OtherHeroProto::clear_pk_amount() {
  pk_amount_ = 0;
  clear_has_pk_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::pk_amount() const {
  return pk_amount_;
}
inline void OtherHeroProto::set_pk_amount(::google::protobuf::int32 value) {
  set_has_pk_amount();
  pk_amount_ = value;
}

// optional .app.message.MountProto mount = 91;
inline bool OtherHeroProto::has_mount() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void OtherHeroProto::set_has_mount() {
  _has_bits_[0] |= 0x20000000u;
}
inline void OtherHeroProto::clear_has_mount() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void OtherHeroProto::clear_mount() {
  if (mount_ != NULL) mount_->::app::message::MountProto::Clear();
  clear_has_mount();
}
inline const ::app::message::MountProto& OtherHeroProto::mount() const {
  return mount_ != NULL ? *mount_ : *default_instance_->mount_;
}
inline ::app::message::MountProto* OtherHeroProto::mutable_mount() {
  set_has_mount();
  if (mount_ == NULL) mount_ = new ::app::message::MountProto;
  return mount_;
}
inline ::app::message::MountProto* OtherHeroProto::release_mount() {
  clear_has_mount();
  ::app::message::MountProto* temp = mount_;
  mount_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_mount(::app::message::MountProto* mount) {
  delete mount_;
  mount_ = mount;
  if (mount) {
    set_has_mount();
  } else {
    clear_has_mount();
  }
}

// optional int32 equipment_fighting_amount = 92;
inline bool OtherHeroProto::has_equipment_fighting_amount() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void OtherHeroProto::set_has_equipment_fighting_amount() {
  _has_bits_[0] |= 0x40000000u;
}
inline void OtherHeroProto::clear_has_equipment_fighting_amount() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void OtherHeroProto::clear_equipment_fighting_amount() {
  equipment_fighting_amount_ = 0;
  clear_has_equipment_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::equipment_fighting_amount() const {
  return equipment_fighting_amount_;
}
inline void OtherHeroProto::set_equipment_fighting_amount(::google::protobuf::int32 value) {
  set_has_equipment_fighting_amount();
  equipment_fighting_amount_ = value;
}

// optional int32 spell_fighting_amount = 93;
inline bool OtherHeroProto::has_spell_fighting_amount() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void OtherHeroProto::set_has_spell_fighting_amount() {
  _has_bits_[0] |= 0x80000000u;
}
inline void OtherHeroProto::clear_has_spell_fighting_amount() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void OtherHeroProto::clear_spell_fighting_amount() {
  spell_fighting_amount_ = 0;
  clear_has_spell_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::spell_fighting_amount() const {
  return spell_fighting_amount_;
}
inline void OtherHeroProto::set_spell_fighting_amount(::google::protobuf::int32 value) {
  set_has_spell_fighting_amount();
  spell_fighting_amount_ = value;
}

// optional int32 super_arm_fighting_amount = 94;
inline bool OtherHeroProto::has_super_arm_fighting_amount() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void OtherHeroProto::set_has_super_arm_fighting_amount() {
  _has_bits_[1] |= 0x00000001u;
}
inline void OtherHeroProto::clear_has_super_arm_fighting_amount() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void OtherHeroProto::clear_super_arm_fighting_amount() {
  super_arm_fighting_amount_ = 0;
  clear_has_super_arm_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::super_arm_fighting_amount() const {
  return super_arm_fighting_amount_;
}
inline void OtherHeroProto::set_super_arm_fighting_amount(::google::protobuf::int32 value) {
  set_has_super_arm_fighting_amount();
  super_arm_fighting_amount_ = value;
}

// optional int32 base_fighting_amount = 95;
inline bool OtherHeroProto::has_base_fighting_amount() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void OtherHeroProto::set_has_base_fighting_amount() {
  _has_bits_[1] |= 0x00000002u;
}
inline void OtherHeroProto::clear_has_base_fighting_amount() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void OtherHeroProto::clear_base_fighting_amount() {
  base_fighting_amount_ = 0;
  clear_has_base_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::base_fighting_amount() const {
  return base_fighting_amount_;
}
inline void OtherHeroProto::set_base_fighting_amount(::google::protobuf::int32 value) {
  set_has_base_fighting_amount();
  base_fighting_amount_ = value;
}

// optional int32 gem_fighting_amount = 96 [deprecated = true];
inline bool OtherHeroProto::has_gem_fighting_amount() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void OtherHeroProto::set_has_gem_fighting_amount() {
  _has_bits_[1] |= 0x00000004u;
}
inline void OtherHeroProto::clear_has_gem_fighting_amount() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void OtherHeroProto::clear_gem_fighting_amount() {
  gem_fighting_amount_ = 0;
  clear_has_gem_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::gem_fighting_amount() const {
  return gem_fighting_amount_;
}
inline void OtherHeroProto::set_gem_fighting_amount(::google::protobuf::int32 value) {
  set_has_gem_fighting_amount();
  gem_fighting_amount_ = value;
}

// optional int32 mount_fighting_amount = 97;
inline bool OtherHeroProto::has_mount_fighting_amount() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void OtherHeroProto::set_has_mount_fighting_amount() {
  _has_bits_[1] |= 0x00000008u;
}
inline void OtherHeroProto::clear_has_mount_fighting_amount() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void OtherHeroProto::clear_mount_fighting_amount() {
  mount_fighting_amount_ = 0;
  clear_has_mount_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::mount_fighting_amount() const {
  return mount_fighting_amount_;
}
inline void OtherHeroProto::set_mount_fighting_amount(::google::protobuf::int32 value) {
  set_has_mount_fighting_amount();
  mount_fighting_amount_ = value;
}

// optional int32 bow_fighting_amount = 98;
inline bool OtherHeroProto::has_bow_fighting_amount() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void OtherHeroProto::set_has_bow_fighting_amount() {
  _has_bits_[1] |= 0x00000010u;
}
inline void OtherHeroProto::clear_has_bow_fighting_amount() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void OtherHeroProto::clear_bow_fighting_amount() {
  bow_fighting_amount_ = 0;
  clear_has_bow_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::bow_fighting_amount() const {
  return bow_fighting_amount_;
}
inline void OtherHeroProto::set_bow_fighting_amount(::google::protobuf::int32 value) {
  set_has_bow_fighting_amount();
  bow_fighting_amount_ = value;
}

// optional int32 super_weapon_fighting_amount = 99;
inline bool OtherHeroProto::has_super_weapon_fighting_amount() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void OtherHeroProto::set_has_super_weapon_fighting_amount() {
  _has_bits_[1] |= 0x00000020u;
}
inline void OtherHeroProto::clear_has_super_weapon_fighting_amount() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void OtherHeroProto::clear_super_weapon_fighting_amount() {
  super_weapon_fighting_amount_ = 0;
  clear_has_super_weapon_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::super_weapon_fighting_amount() const {
  return super_weapon_fighting_amount_;
}
inline void OtherHeroProto::set_super_weapon_fighting_amount(::google::protobuf::int32 value) {
  set_has_super_weapon_fighting_amount();
  super_weapon_fighting_amount_ = value;
}

// optional int32 super_weapon_xinfa_fighting_amount = 100;
inline bool OtherHeroProto::has_super_weapon_xinfa_fighting_amount() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void OtherHeroProto::set_has_super_weapon_xinfa_fighting_amount() {
  _has_bits_[1] |= 0x00000040u;
}
inline void OtherHeroProto::clear_has_super_weapon_xinfa_fighting_amount() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void OtherHeroProto::clear_super_weapon_xinfa_fighting_amount() {
  super_weapon_xinfa_fighting_amount_ = 0;
  clear_has_super_weapon_xinfa_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::super_weapon_xinfa_fighting_amount() const {
  return super_weapon_xinfa_fighting_amount_;
}
inline void OtherHeroProto::set_super_weapon_xinfa_fighting_amount(::google::protobuf::int32 value) {
  set_has_super_weapon_xinfa_fighting_amount();
  super_weapon_xinfa_fighting_amount_ = value;
}

// optional int32 tianjie_fighting_amount = 101;
inline bool OtherHeroProto::has_tianjie_fighting_amount() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void OtherHeroProto::set_has_tianjie_fighting_amount() {
  _has_bits_[1] |= 0x00000080u;
}
inline void OtherHeroProto::clear_has_tianjie_fighting_amount() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void OtherHeroProto::clear_tianjie_fighting_amount() {
  tianjie_fighting_amount_ = 0;
  clear_has_tianjie_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::tianjie_fighting_amount() const {
  return tianjie_fighting_amount_;
}
inline void OtherHeroProto::set_tianjie_fighting_amount(::google::protobuf::int32 value) {
  set_has_tianjie_fighting_amount();
  tianjie_fighting_amount_ = value;
}

// optional int32 tianzui_fighting_amount = 102;
inline bool OtherHeroProto::has_tianzui_fighting_amount() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void OtherHeroProto::set_has_tianzui_fighting_amount() {
  _has_bits_[1] |= 0x00000100u;
}
inline void OtherHeroProto::clear_has_tianzui_fighting_amount() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void OtherHeroProto::clear_tianzui_fighting_amount() {
  tianzui_fighting_amount_ = 0;
  clear_has_tianzui_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::tianzui_fighting_amount() const {
  return tianzui_fighting_amount_;
}
inline void OtherHeroProto::set_tianzui_fighting_amount(::google::protobuf::int32 value) {
  set_has_tianzui_fighting_amount();
  tianzui_fighting_amount_ = value;
}

// optional int32 shou_cang_fighting_amount = 103;
inline bool OtherHeroProto::has_shou_cang_fighting_amount() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void OtherHeroProto::set_has_shou_cang_fighting_amount() {
  _has_bits_[1] |= 0x00000200u;
}
inline void OtherHeroProto::clear_has_shou_cang_fighting_amount() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void OtherHeroProto::clear_shou_cang_fighting_amount() {
  shou_cang_fighting_amount_ = 0;
  clear_has_shou_cang_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::shou_cang_fighting_amount() const {
  return shou_cang_fighting_amount_;
}
inline void OtherHeroProto::set_shou_cang_fighting_amount(::google::protobuf::int32 value) {
  set_has_shou_cang_fighting_amount();
  shou_cang_fighting_amount_ = value;
}

// optional int32 demon_fighting_amount = 104;
inline bool OtherHeroProto::has_demon_fighting_amount() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void OtherHeroProto::set_has_demon_fighting_amount() {
  _has_bits_[1] |= 0x00000400u;
}
inline void OtherHeroProto::clear_has_demon_fighting_amount() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void OtherHeroProto::clear_demon_fighting_amount() {
  demon_fighting_amount_ = 0;
  clear_has_demon_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::demon_fighting_amount() const {
  return demon_fighting_amount_;
}
inline void OtherHeroProto::set_demon_fighting_amount(::google::protobuf::int32 value) {
  set_has_demon_fighting_amount();
  demon_fighting_amount_ = value;
}

// optional int32 cloak_fighting_amount = 105;
inline bool OtherHeroProto::has_cloak_fighting_amount() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void OtherHeroProto::set_has_cloak_fighting_amount() {
  _has_bits_[1] |= 0x00000800u;
}
inline void OtherHeroProto::clear_has_cloak_fighting_amount() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void OtherHeroProto::clear_cloak_fighting_amount() {
  cloak_fighting_amount_ = 0;
  clear_has_cloak_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::cloak_fighting_amount() const {
  return cloak_fighting_amount_;
}
inline void OtherHeroProto::set_cloak_fighting_amount(::google::protobuf::int32 value) {
  set_has_cloak_fighting_amount();
  cloak_fighting_amount_ = value;
}

// optional int32 pet_fighting_amount = 106;
inline bool OtherHeroProto::has_pet_fighting_amount() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void OtherHeroProto::set_has_pet_fighting_amount() {
  _has_bits_[1] |= 0x00001000u;
}
inline void OtherHeroProto::clear_has_pet_fighting_amount() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void OtherHeroProto::clear_pet_fighting_amount() {
  pet_fighting_amount_ = 0;
  clear_has_pet_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::pet_fighting_amount() const {
  return pet_fighting_amount_;
}
inline void OtherHeroProto::set_pet_fighting_amount(::google::protobuf::int32 value) {
  set_has_pet_fighting_amount();
  pet_fighting_amount_ = value;
}

// optional int32 yitianshenjue_fighting_amount = 107;
inline bool OtherHeroProto::has_yitianshenjue_fighting_amount() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void OtherHeroProto::set_has_yitianshenjue_fighting_amount() {
  _has_bits_[1] |= 0x00002000u;
}
inline void OtherHeroProto::clear_has_yitianshenjue_fighting_amount() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void OtherHeroProto::clear_yitianshenjue_fighting_amount() {
  yitianshenjue_fighting_amount_ = 0;
  clear_has_yitianshenjue_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::yitianshenjue_fighting_amount() const {
  return yitianshenjue_fighting_amount_;
}
inline void OtherHeroProto::set_yitianshenjue_fighting_amount(::google::protobuf::int32 value) {
  set_has_yitianshenjue_fighting_amount();
  yitianshenjue_fighting_amount_ = value;
}

// optional int32 moshi_fighting_amount = 108;
inline bool OtherHeroProto::has_moshi_fighting_amount() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void OtherHeroProto::set_has_moshi_fighting_amount() {
  _has_bits_[1] |= 0x00004000u;
}
inline void OtherHeroProto::clear_has_moshi_fighting_amount() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void OtherHeroProto::clear_moshi_fighting_amount() {
  moshi_fighting_amount_ = 0;
  clear_has_moshi_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::moshi_fighting_amount() const {
  return moshi_fighting_amount_;
}
inline void OtherHeroProto::set_moshi_fighting_amount(::google::protobuf::int32 value) {
  set_has_moshi_fighting_amount();
  moshi_fighting_amount_ = value;
}

// optional int32 jing_jie_fighting_amount = 112;
inline bool OtherHeroProto::has_jing_jie_fighting_amount() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void OtherHeroProto::set_has_jing_jie_fighting_amount() {
  _has_bits_[1] |= 0x00008000u;
}
inline void OtherHeroProto::clear_has_jing_jie_fighting_amount() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void OtherHeroProto::clear_jing_jie_fighting_amount() {
  jing_jie_fighting_amount_ = 0;
  clear_has_jing_jie_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::jing_jie_fighting_amount() const {
  return jing_jie_fighting_amount_;
}
inline void OtherHeroProto::set_jing_jie_fighting_amount(::google::protobuf::int32 value) {
  set_has_jing_jie_fighting_amount();
  jing_jie_fighting_amount_ = value;
}

// optional int32 qianqiudajie_fighting_amount = 201;
inline bool OtherHeroProto::has_qianqiudajie_fighting_amount() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void OtherHeroProto::set_has_qianqiudajie_fighting_amount() {
  _has_bits_[1] |= 0x00010000u;
}
inline void OtherHeroProto::clear_has_qianqiudajie_fighting_amount() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void OtherHeroProto::clear_qianqiudajie_fighting_amount() {
  qianqiudajie_fighting_amount_ = 0;
  clear_has_qianqiudajie_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::qianqiudajie_fighting_amount() const {
  return qianqiudajie_fighting_amount_;
}
inline void OtherHeroProto::set_qianqiudajie_fighting_amount(::google::protobuf::int32 value) {
  set_has_qianqiudajie_fighting_amount();
  qianqiudajie_fighting_amount_ = value;
}

// optional int32 marriage_weapon_amount = 113;
inline bool OtherHeroProto::has_marriage_weapon_amount() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void OtherHeroProto::set_has_marriage_weapon_amount() {
  _has_bits_[1] |= 0x00020000u;
}
inline void OtherHeroProto::clear_has_marriage_weapon_amount() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void OtherHeroProto::clear_marriage_weapon_amount() {
  marriage_weapon_amount_ = 0;
  clear_has_marriage_weapon_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::marriage_weapon_amount() const {
  return marriage_weapon_amount_;
}
inline void OtherHeroProto::set_marriage_weapon_amount(::google::protobuf::int32 value) {
  set_has_marriage_weapon_amount();
  marriage_weapon_amount_ = value;
}

// optional int32 marriage_goods_amount = 114;
inline bool OtherHeroProto::has_marriage_goods_amount() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void OtherHeroProto::set_has_marriage_goods_amount() {
  _has_bits_[1] |= 0x00040000u;
}
inline void OtherHeroProto::clear_has_marriage_goods_amount() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void OtherHeroProto::clear_marriage_goods_amount() {
  marriage_goods_amount_ = 0;
  clear_has_marriage_goods_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::marriage_goods_amount() const {
  return marriage_goods_amount_;
}
inline void OtherHeroProto::set_marriage_goods_amount(::google::protobuf::int32 value) {
  set_has_marriage_goods_amount();
  marriage_goods_amount_ = value;
}

// optional int32 chi_huo_shen_gong_fighting_amount = 115;
inline bool OtherHeroProto::has_chi_huo_shen_gong_fighting_amount() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void OtherHeroProto::set_has_chi_huo_shen_gong_fighting_amount() {
  _has_bits_[1] |= 0x00080000u;
}
inline void OtherHeroProto::clear_has_chi_huo_shen_gong_fighting_amount() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void OtherHeroProto::clear_chi_huo_shen_gong_fighting_amount() {
  chi_huo_shen_gong_fighting_amount_ = 0;
  clear_has_chi_huo_shen_gong_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::chi_huo_shen_gong_fighting_amount() const {
  return chi_huo_shen_gong_fighting_amount_;
}
inline void OtherHeroProto::set_chi_huo_shen_gong_fighting_amount(::google::protobuf::int32 value) {
  set_has_chi_huo_shen_gong_fighting_amount();
  chi_huo_shen_gong_fighting_amount_ = value;
}

// optional int32 mo_bing_fighting_amount = 116;
inline bool OtherHeroProto::has_mo_bing_fighting_amount() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void OtherHeroProto::set_has_mo_bing_fighting_amount() {
  _has_bits_[1] |= 0x00100000u;
}
inline void OtherHeroProto::clear_has_mo_bing_fighting_amount() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void OtherHeroProto::clear_mo_bing_fighting_amount() {
  mo_bing_fighting_amount_ = 0;
  clear_has_mo_bing_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::mo_bing_fighting_amount() const {
  return mo_bing_fighting_amount_;
}
inline void OtherHeroProto::set_mo_bing_fighting_amount(::google::protobuf::int32 value) {
  set_has_mo_bing_fighting_amount();
  mo_bing_fighting_amount_ = value;
}

// optional int32 tian_xie_fighting_amount = 117;
inline bool OtherHeroProto::has_tian_xie_fighting_amount() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void OtherHeroProto::set_has_tian_xie_fighting_amount() {
  _has_bits_[1] |= 0x00200000u;
}
inline void OtherHeroProto::clear_has_tian_xie_fighting_amount() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void OtherHeroProto::clear_tian_xie_fighting_amount() {
  tian_xie_fighting_amount_ = 0;
  clear_has_tian_xie_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::tian_xie_fighting_amount() const {
  return tian_xie_fighting_amount_;
}
inline void OtherHeroProto::set_tian_xie_fighting_amount(::google::protobuf::int32 value) {
  set_has_tian_xie_fighting_amount();
  tian_xie_fighting_amount_ = value;
}

// optional int32 wu_dao_fighting_amount = 118;
inline bool OtherHeroProto::has_wu_dao_fighting_amount() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void OtherHeroProto::set_has_wu_dao_fighting_amount() {
  _has_bits_[1] |= 0x00400000u;
}
inline void OtherHeroProto::clear_has_wu_dao_fighting_amount() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void OtherHeroProto::clear_wu_dao_fighting_amount() {
  wu_dao_fighting_amount_ = 0;
  clear_has_wu_dao_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::wu_dao_fighting_amount() const {
  return wu_dao_fighting_amount_;
}
inline void OtherHeroProto::set_wu_dao_fighting_amount(::google::protobuf::int32 value) {
  set_has_wu_dao_fighting_amount();
  wu_dao_fighting_amount_ = value;
}

// optional int32 yu_yi_ge_fighting_amount = 119;
inline bool OtherHeroProto::has_yu_yi_ge_fighting_amount() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void OtherHeroProto::set_has_yu_yi_ge_fighting_amount() {
  _has_bits_[1] |= 0x00800000u;
}
inline void OtherHeroProto::clear_has_yu_yi_ge_fighting_amount() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void OtherHeroProto::clear_yu_yi_ge_fighting_amount() {
  yu_yi_ge_fighting_amount_ = 0;
  clear_has_yu_yi_ge_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::yu_yi_ge_fighting_amount() const {
  return yu_yi_ge_fighting_amount_;
}
inline void OtherHeroProto::set_yu_yi_ge_fighting_amount(::google::protobuf::int32 value) {
  set_has_yu_yi_ge_fighting_amount();
  yu_yi_ge_fighting_amount_ = value;
}

// optional int32 mo_fang_fighting_amount = 120;
inline bool OtherHeroProto::has_mo_fang_fighting_amount() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void OtherHeroProto::set_has_mo_fang_fighting_amount() {
  _has_bits_[1] |= 0x01000000u;
}
inline void OtherHeroProto::clear_has_mo_fang_fighting_amount() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void OtherHeroProto::clear_mo_fang_fighting_amount() {
  mo_fang_fighting_amount_ = 0;
  clear_has_mo_fang_fighting_amount();
}
inline ::google::protobuf::int32 OtherHeroProto::mo_fang_fighting_amount() const {
  return mo_fang_fighting_amount_;
}
inline void OtherHeroProto::set_mo_fang_fighting_amount(::google::protobuf::int32 value) {
  set_has_mo_fang_fighting_amount();
  mo_fang_fighting_amount_ = value;
}

// optional int32 qian_neng_use_count = 21;
inline bool OtherHeroProto::has_qian_neng_use_count() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void OtherHeroProto::set_has_qian_neng_use_count() {
  _has_bits_[1] |= 0x02000000u;
}
inline void OtherHeroProto::clear_has_qian_neng_use_count() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void OtherHeroProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 OtherHeroProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void OtherHeroProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool OtherHeroProto::has_huan_hua_use_count() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void OtherHeroProto::set_has_huan_hua_use_count() {
  _has_bits_[1] |= 0x04000000u;
}
inline void OtherHeroProto::clear_has_huan_hua_use_count() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void OtherHeroProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 OtherHeroProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void OtherHeroProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional int64 marriage_target_id = 109;
inline bool OtherHeroProto::has_marriage_target_id() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void OtherHeroProto::set_has_marriage_target_id() {
  _has_bits_[1] |= 0x08000000u;
}
inline void OtherHeroProto::clear_has_marriage_target_id() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void OtherHeroProto::clear_marriage_target_id() {
  marriage_target_id_ = GOOGLE_LONGLONG(0);
  clear_has_marriage_target_id();
}
inline ::google::protobuf::int64 OtherHeroProto::marriage_target_id() const {
  return marriage_target_id_;
}
inline void OtherHeroProto::set_marriage_target_id(::google::protobuf::int64 value) {
  set_has_marriage_target_id();
  marriage_target_id_ = value;
}

// optional bytes marriage_target_name = 110;
inline bool OtherHeroProto::has_marriage_target_name() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void OtherHeroProto::set_has_marriage_target_name() {
  _has_bits_[1] |= 0x10000000u;
}
inline void OtherHeroProto::clear_has_marriage_target_name() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void OtherHeroProto::clear_marriage_target_name() {
  if (marriage_target_name_ != &::google::protobuf::internal::kEmptyString) {
    marriage_target_name_->clear();
  }
  clear_has_marriage_target_name();
}
inline const ::std::string& OtherHeroProto::marriage_target_name() const {
  return *marriage_target_name_;
}
inline void OtherHeroProto::set_marriage_target_name(const ::std::string& value) {
  set_has_marriage_target_name();
  if (marriage_target_name_ == &::google::protobuf::internal::kEmptyString) {
    marriage_target_name_ = new ::std::string;
  }
  marriage_target_name_->assign(value);
}
inline void OtherHeroProto::set_marriage_target_name(const char* value) {
  set_has_marriage_target_name();
  if (marriage_target_name_ == &::google::protobuf::internal::kEmptyString) {
    marriage_target_name_ = new ::std::string;
  }
  marriage_target_name_->assign(value);
}
inline void OtherHeroProto::set_marriage_target_name(const void* value, size_t size) {
  set_has_marriage_target_name();
  if (marriage_target_name_ == &::google::protobuf::internal::kEmptyString) {
    marriage_target_name_ = new ::std::string;
  }
  marriage_target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherHeroProto::mutable_marriage_target_name() {
  set_has_marriage_target_name();
  if (marriage_target_name_ == &::google::protobuf::internal::kEmptyString) {
    marriage_target_name_ = new ::std::string;
  }
  return marriage_target_name_;
}
inline ::std::string* OtherHeroProto::release_marriage_target_name() {
  clear_has_marriage_target_name();
  if (marriage_target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = marriage_target_name_;
    marriage_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherHeroProto::set_allocated_marriage_target_name(::std::string* marriage_target_name) {
  if (marriage_target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete marriage_target_name_;
  }
  if (marriage_target_name) {
    set_has_marriage_target_name();
    marriage_target_name_ = marriage_target_name;
  } else {
    clear_has_marriage_target_name();
    marriage_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 marriage_goods_id = 111;
inline bool OtherHeroProto::has_marriage_goods_id() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void OtherHeroProto::set_has_marriage_goods_id() {
  _has_bits_[1] |= 0x20000000u;
}
inline void OtherHeroProto::clear_has_marriage_goods_id() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void OtherHeroProto::clear_marriage_goods_id() {
  marriage_goods_id_ = 0;
  clear_has_marriage_goods_id();
}
inline ::google::protobuf::int32 OtherHeroProto::marriage_goods_id() const {
  return marriage_goods_id_;
}
inline void OtherHeroProto::set_marriage_goods_id(::google::protobuf::int32 value) {
  set_has_marriage_goods_id();
  marriage_goods_id_ = value;
}

// optional .app.message.ShouCangProto shou_cang = 200;
inline bool OtherHeroProto::has_shou_cang() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void OtherHeroProto::set_has_shou_cang() {
  _has_bits_[1] |= 0x40000000u;
}
inline void OtherHeroProto::clear_has_shou_cang() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void OtherHeroProto::clear_shou_cang() {
  if (shou_cang_ != NULL) shou_cang_->::app::message::ShouCangProto::Clear();
  clear_has_shou_cang();
}
inline const ::app::message::ShouCangProto& OtherHeroProto::shou_cang() const {
  return shou_cang_ != NULL ? *shou_cang_ : *default_instance_->shou_cang_;
}
inline ::app::message::ShouCangProto* OtherHeroProto::mutable_shou_cang() {
  set_has_shou_cang();
  if (shou_cang_ == NULL) shou_cang_ = new ::app::message::ShouCangProto;
  return shou_cang_;
}
inline ::app::message::ShouCangProto* OtherHeroProto::release_shou_cang() {
  clear_has_shou_cang();
  ::app::message::ShouCangProto* temp = shou_cang_;
  shou_cang_ = NULL;
  return temp;
}
inline void OtherHeroProto::set_allocated_shou_cang(::app::message::ShouCangProto* shou_cang) {
  delete shou_cang_;
  shou_cang_ = shou_cang;
  if (shou_cang) {
    set_has_shou_cang();
  } else {
    clear_has_shou_cang();
  }
}

// optional bytes arena_fighting_team_name_bytes = 202;
inline bool OtherHeroProto::has_arena_fighting_team_name_bytes() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void OtherHeroProto::set_has_arena_fighting_team_name_bytes() {
  _has_bits_[1] |= 0x80000000u;
}
inline void OtherHeroProto::clear_has_arena_fighting_team_name_bytes() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void OtherHeroProto::clear_arena_fighting_team_name_bytes() {
  if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_->clear();
  }
  clear_has_arena_fighting_team_name_bytes();
}
inline const ::std::string& OtherHeroProto::arena_fighting_team_name_bytes() const {
  return *arena_fighting_team_name_bytes_;
}
inline void OtherHeroProto::set_arena_fighting_team_name_bytes(const ::std::string& value) {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  arena_fighting_team_name_bytes_->assign(value);
}
inline void OtherHeroProto::set_arena_fighting_team_name_bytes(const char* value) {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  arena_fighting_team_name_bytes_->assign(value);
}
inline void OtherHeroProto::set_arena_fighting_team_name_bytes(const void* value, size_t size) {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  arena_fighting_team_name_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherHeroProto::mutable_arena_fighting_team_name_bytes() {
  set_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    arena_fighting_team_name_bytes_ = new ::std::string;
  }
  return arena_fighting_team_name_bytes_;
}
inline ::std::string* OtherHeroProto::release_arena_fighting_team_name_bytes() {
  clear_has_arena_fighting_team_name_bytes();
  if (arena_fighting_team_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arena_fighting_team_name_bytes_;
    arena_fighting_team_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherHeroProto::set_allocated_arena_fighting_team_name_bytes(::std::string* arena_fighting_team_name_bytes) {
  if (arena_fighting_team_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete arena_fighting_team_name_bytes_;
  }
  if (arena_fighting_team_name_bytes) {
    set_has_arena_fighting_team_name_bytes();
    arena_fighting_team_name_bytes_ = arena_fighting_team_name_bytes;
  } else {
    clear_has_arena_fighting_team_name_bytes();
    arena_fighting_team_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 shield_fighting_amount = 203;
inline int OtherHeroProto::shield_fighting_amount_size() const {
  return shield_fighting_amount_.size();
}
inline void OtherHeroProto::clear_shield_fighting_amount() {
  shield_fighting_amount_.Clear();
}
inline ::google::protobuf::int32 OtherHeroProto::shield_fighting_amount(int index) const {
  return shield_fighting_amount_.Get(index);
}
inline void OtherHeroProto::set_shield_fighting_amount(int index, ::google::protobuf::int32 value) {
  shield_fighting_amount_.Set(index, value);
}
inline void OtherHeroProto::add_shield_fighting_amount(::google::protobuf::int32 value) {
  shield_fighting_amount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OtherHeroProto::shield_fighting_amount() const {
  return shield_fighting_amount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OtherHeroProto::mutable_shield_fighting_amount() {
  return &shield_fighting_amount_;
}

// optional int32 jian_dao = 204;
inline bool OtherHeroProto::has_jian_dao() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void OtherHeroProto::set_has_jian_dao() {
  _has_bits_[2] |= 0x00000002u;
}
inline void OtherHeroProto::clear_has_jian_dao() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void OtherHeroProto::clear_jian_dao() {
  jian_dao_ = 0;
  clear_has_jian_dao();
}
inline ::google::protobuf::int32 OtherHeroProto::jian_dao() const {
  return jian_dao_;
}
inline void OtherHeroProto::set_jian_dao(::google::protobuf::int32 value) {
  set_has_jian_dao();
  jian_dao_ = value;
}

// optional int32 bow_tong_ling_display_id = 205;
inline bool OtherHeroProto::has_bow_tong_ling_display_id() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void OtherHeroProto::set_has_bow_tong_ling_display_id() {
  _has_bits_[2] |= 0x00000004u;
}
inline void OtherHeroProto::clear_has_bow_tong_ling_display_id() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void OtherHeroProto::clear_bow_tong_ling_display_id() {
  bow_tong_ling_display_id_ = 0;
  clear_has_bow_tong_ling_display_id();
}
inline ::google::protobuf::int32 OtherHeroProto::bow_tong_ling_display_id() const {
  return bow_tong_ling_display_id_;
}
inline void OtherHeroProto::set_bow_tong_ling_display_id(::google::protobuf::int32 value) {
  set_has_bow_tong_ling_display_id();
  bow_tong_ling_display_id_ = value;
}

// optional int32 pet_tong_ling_display_id = 206;
inline bool OtherHeroProto::has_pet_tong_ling_display_id() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void OtherHeroProto::set_has_pet_tong_ling_display_id() {
  _has_bits_[2] |= 0x00000008u;
}
inline void OtherHeroProto::clear_has_pet_tong_ling_display_id() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void OtherHeroProto::clear_pet_tong_ling_display_id() {
  pet_tong_ling_display_id_ = 0;
  clear_has_pet_tong_ling_display_id();
}
inline ::google::protobuf::int32 OtherHeroProto::pet_tong_ling_display_id() const {
  return pet_tong_ling_display_id_;
}
inline void OtherHeroProto::set_pet_tong_ling_display_id(::google::protobuf::int32 value) {
  set_has_pet_tong_ling_display_id();
  pet_tong_ling_display_id_ = value;
}

// -------------------------------------------------------------------

// ClientRelation

// repeated int64 friend_id = 1;
inline int ClientRelation::friend_id_size() const {
  return friend_id_.size();
}
inline void ClientRelation::clear_friend_id() {
  friend_id_.Clear();
}
inline ::google::protobuf::int64 ClientRelation::friend_id(int index) const {
  return friend_id_.Get(index);
}
inline void ClientRelation::set_friend_id(int index, ::google::protobuf::int64 value) {
  friend_id_.Set(index, value);
}
inline void ClientRelation::add_friend_id(::google::protobuf::int64 value) {
  friend_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ClientRelation::friend_id() const {
  return friend_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ClientRelation::mutable_friend_id() {
  return &friend_id_;
}

// repeated int64 enemy_id = 2;
inline int ClientRelation::enemy_id_size() const {
  return enemy_id_.size();
}
inline void ClientRelation::clear_enemy_id() {
  enemy_id_.Clear();
}
inline ::google::protobuf::int64 ClientRelation::enemy_id(int index) const {
  return enemy_id_.Get(index);
}
inline void ClientRelation::set_enemy_id(int index, ::google::protobuf::int64 value) {
  enemy_id_.Set(index, value);
}
inline void ClientRelation::add_enemy_id(::google::protobuf::int64 value) {
  enemy_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ClientRelation::enemy_id() const {
  return enemy_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ClientRelation::mutable_enemy_id() {
  return &enemy_id_;
}

// repeated int64 enemy_kill_history = 3;
inline int ClientRelation::enemy_kill_history_size() const {
  return enemy_kill_history_.size();
}
inline void ClientRelation::clear_enemy_kill_history() {
  enemy_kill_history_.Clear();
}
inline ::google::protobuf::int64 ClientRelation::enemy_kill_history(int index) const {
  return enemy_kill_history_.Get(index);
}
inline void ClientRelation::set_enemy_kill_history(int index, ::google::protobuf::int64 value) {
  enemy_kill_history_.Set(index, value);
}
inline void ClientRelation::add_enemy_kill_history(::google::protobuf::int64 value) {
  enemy_kill_history_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ClientRelation::enemy_kill_history() const {
  return enemy_kill_history_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ClientRelation::mutable_enemy_kill_history() {
  return &enemy_kill_history_;
}

// repeated int64 black_list_id = 4;
inline int ClientRelation::black_list_id_size() const {
  return black_list_id_.size();
}
inline void ClientRelation::clear_black_list_id() {
  black_list_id_.Clear();
}
inline ::google::protobuf::int64 ClientRelation::black_list_id(int index) const {
  return black_list_id_.Get(index);
}
inline void ClientRelation::set_black_list_id(int index, ::google::protobuf::int64 value) {
  black_list_id_.Set(index, value);
}
inline void ClientRelation::add_black_list_id(::google::protobuf::int64 value) {
  black_list_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ClientRelation::black_list_id() const {
  return black_list_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ClientRelation::mutable_black_list_id() {
  return &black_list_id_;
}

// repeated int64 recent_id = 5;
inline int ClientRelation::recent_id_size() const {
  return recent_id_.size();
}
inline void ClientRelation::clear_recent_id() {
  recent_id_.Clear();
}
inline ::google::protobuf::int64 ClientRelation::recent_id(int index) const {
  return recent_id_.Get(index);
}
inline void ClientRelation::set_recent_id(int index, ::google::protobuf::int64 value) {
  recent_id_.Set(index, value);
}
inline void ClientRelation::add_recent_id(::google::protobuf::int64 value) {
  recent_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ClientRelation::recent_id() const {
  return recent_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ClientRelation::mutable_recent_id() {
  return &recent_id_;
}

// optional bool hide_my_location = 6;
inline bool ClientRelation::has_hide_my_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientRelation::set_has_hide_my_location() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientRelation::clear_has_hide_my_location() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientRelation::clear_hide_my_location() {
  hide_my_location_ = false;
  clear_has_hide_my_location();
}
inline bool ClientRelation::hide_my_location() const {
  return hide_my_location_;
}
inline void ClientRelation::set_hide_my_location(bool value) {
  set_has_hide_my_location();
  hide_my_location_ = value;
}

// optional bool hide_offline_relation = 7;
inline bool ClientRelation::has_hide_offline_relation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientRelation::set_has_hide_offline_relation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientRelation::clear_has_hide_offline_relation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientRelation::clear_hide_offline_relation() {
  hide_offline_relation_ = false;
  clear_has_hide_offline_relation();
}
inline bool ClientRelation::hide_offline_relation() const {
  return hide_offline_relation_;
}
inline void ClientRelation::set_hide_offline_relation(bool value) {
  set_has_hide_offline_relation();
  hide_offline_relation_ = value;
}

// optional bool hide_big_head = 8;
inline bool ClientRelation::has_hide_big_head() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientRelation::set_has_hide_big_head() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClientRelation::clear_has_hide_big_head() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClientRelation::clear_hide_big_head() {
  hide_big_head_ = false;
  clear_has_hide_big_head();
}
inline bool ClientRelation::hide_big_head() const {
  return hide_big_head_;
}
inline void ClientRelation::set_hide_big_head(bool value) {
  set_has_hide_big_head();
  hide_big_head_ = value;
}

// optional bool show_enemy_event = 9;
inline bool ClientRelation::has_show_enemy_event() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientRelation::set_has_show_enemy_event() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClientRelation::clear_has_show_enemy_event() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClientRelation::clear_show_enemy_event() {
  show_enemy_event_ = false;
  clear_has_show_enemy_event();
}
inline bool ClientRelation::show_enemy_event() const {
  return show_enemy_event_;
}
inline void ClientRelation::set_show_enemy_event(bool value) {
  set_has_show_enemy_event();
  show_enemy_event_ = value;
}

// optional bool forbid_been_added_as_friend = 10;
inline bool ClientRelation::has_forbid_been_added_as_friend() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClientRelation::set_has_forbid_been_added_as_friend() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClientRelation::clear_has_forbid_been_added_as_friend() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClientRelation::clear_forbid_been_added_as_friend() {
  forbid_been_added_as_friend_ = false;
  clear_has_forbid_been_added_as_friend();
}
inline bool ClientRelation::forbid_been_added_as_friend() const {
  return forbid_been_added_as_friend_;
}
inline void ClientRelation::set_forbid_been_added_as_friend(bool value) {
  set_has_forbid_been_added_as_friend();
  forbid_been_added_as_friend_ = value;
}

// -------------------------------------------------------------------

// SingleRelation

// optional int64 id = 1;
inline bool SingleRelation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleRelation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleRelation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleRelation::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 SingleRelation::id() const {
  return id_;
}
inline void SingleRelation::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool SingleRelation::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleRelation::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleRelation::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleRelation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SingleRelation::name() const {
  return *name_;
}
inline void SingleRelation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SingleRelation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SingleRelation::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleRelation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SingleRelation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SingleRelation::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes mood = 3;
inline bool SingleRelation::has_mood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleRelation::set_has_mood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleRelation::clear_has_mood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleRelation::clear_mood() {
  if (mood_ != &::google::protobuf::internal::kEmptyString) {
    mood_->clear();
  }
  clear_has_mood();
}
inline const ::std::string& SingleRelation::mood() const {
  return *mood_;
}
inline void SingleRelation::set_mood(const ::std::string& value) {
  set_has_mood();
  if (mood_ == &::google::protobuf::internal::kEmptyString) {
    mood_ = new ::std::string;
  }
  mood_->assign(value);
}
inline void SingleRelation::set_mood(const char* value) {
  set_has_mood();
  if (mood_ == &::google::protobuf::internal::kEmptyString) {
    mood_ = new ::std::string;
  }
  mood_->assign(value);
}
inline void SingleRelation::set_mood(const void* value, size_t size) {
  set_has_mood();
  if (mood_ == &::google::protobuf::internal::kEmptyString) {
    mood_ = new ::std::string;
  }
  mood_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleRelation::mutable_mood() {
  set_has_mood();
  if (mood_ == &::google::protobuf::internal::kEmptyString) {
    mood_ = new ::std::string;
  }
  return mood_;
}
inline ::std::string* SingleRelation::release_mood() {
  clear_has_mood();
  if (mood_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mood_;
    mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SingleRelation::set_allocated_mood(::std::string* mood) {
  if (mood_ != &::google::protobuf::internal::kEmptyString) {
    delete mood_;
  }
  if (mood) {
    set_has_mood();
    mood_ = mood;
  } else {
    clear_has_mood();
    mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 scene_id = 4;
inline bool SingleRelation::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleRelation::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleRelation::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleRelation::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 SingleRelation::scene_id() const {
  return scene_id_;
}
inline void SingleRelation::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional int32 level = 5;
inline bool SingleRelation::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleRelation::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleRelation::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleRelation::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SingleRelation::level() const {
  return level_;
}
inline void SingleRelation::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 line_number = 6;
inline bool SingleRelation::has_line_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SingleRelation::set_has_line_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SingleRelation::clear_has_line_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SingleRelation::clear_line_number() {
  line_number_ = 0;
  clear_has_line_number();
}
inline ::google::protobuf::int32 SingleRelation::line_number() const {
  return line_number_;
}
inline void SingleRelation::set_line_number(::google::protobuf::int32 value) {
  set_has_line_number();
  line_number_ = value;
}

// optional bool has_sell = 7;
inline bool SingleRelation::has_has_sell() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SingleRelation::set_has_has_sell() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SingleRelation::clear_has_has_sell() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SingleRelation::clear_has_sell() {
  has_sell_ = false;
  clear_has_has_sell();
}
inline bool SingleRelation::has_sell() const {
  return has_sell_;
}
inline void SingleRelation::set_has_sell(bool value) {
  set_has_has_sell();
  has_sell_ = value;
}

// optional int32 race = 8;
inline bool SingleRelation::has_race() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SingleRelation::set_has_race() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SingleRelation::clear_has_race() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SingleRelation::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 SingleRelation::race() const {
  return race_;
}
inline void SingleRelation::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional bool forbid_been_added_as_friend = 9;
inline bool SingleRelation::has_forbid_been_added_as_friend() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SingleRelation::set_has_forbid_been_added_as_friend() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SingleRelation::clear_has_forbid_been_added_as_friend() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SingleRelation::clear_forbid_been_added_as_friend() {
  forbid_been_added_as_friend_ = false;
  clear_has_forbid_been_added_as_friend();
}
inline bool SingleRelation::forbid_been_added_as_friend() const {
  return forbid_been_added_as_friend_;
}
inline void SingleRelation::set_forbid_been_added_as_friend(bool value) {
  set_has_forbid_been_added_as_friend();
  forbid_been_added_as_friend_ = value;
}

// -------------------------------------------------------------------

// ClientRelationDetail

// repeated .app.message.SingleRelation detail = 1;
inline int ClientRelationDetail::detail_size() const {
  return detail_.size();
}
inline void ClientRelationDetail::clear_detail() {
  detail_.Clear();
}
inline const ::app::message::SingleRelation& ClientRelationDetail::detail(int index) const {
  return detail_.Get(index);
}
inline ::app::message::SingleRelation* ClientRelationDetail::mutable_detail(int index) {
  return detail_.Mutable(index);
}
inline ::app::message::SingleRelation* ClientRelationDetail::add_detail() {
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleRelation >&
ClientRelationDetail::detail() const {
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleRelation >*
ClientRelationDetail::mutable_detail() {
  return &detail_;
}

// repeated bool is_online = 2;
inline int ClientRelationDetail::is_online_size() const {
  return is_online_.size();
}
inline void ClientRelationDetail::clear_is_online() {
  is_online_.Clear();
}
inline bool ClientRelationDetail::is_online(int index) const {
  return is_online_.Get(index);
}
inline void ClientRelationDetail::set_is_online(int index, bool value) {
  is_online_.Set(index, value);
}
inline void ClientRelationDetail::add_is_online(bool value) {
  is_online_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ClientRelationDetail::is_online() const {
  return is_online_;
}
inline ::google::protobuf::RepeatedField< bool >*
ClientRelationDetail::mutable_is_online() {
  return &is_online_;
}

// optional bytes self_mood = 3;
inline bool ClientRelationDetail::has_self_mood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientRelationDetail::set_has_self_mood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientRelationDetail::clear_has_self_mood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientRelationDetail::clear_self_mood() {
  if (self_mood_ != &::google::protobuf::internal::kEmptyString) {
    self_mood_->clear();
  }
  clear_has_self_mood();
}
inline const ::std::string& ClientRelationDetail::self_mood() const {
  return *self_mood_;
}
inline void ClientRelationDetail::set_self_mood(const ::std::string& value) {
  set_has_self_mood();
  if (self_mood_ == &::google::protobuf::internal::kEmptyString) {
    self_mood_ = new ::std::string;
  }
  self_mood_->assign(value);
}
inline void ClientRelationDetail::set_self_mood(const char* value) {
  set_has_self_mood();
  if (self_mood_ == &::google::protobuf::internal::kEmptyString) {
    self_mood_ = new ::std::string;
  }
  self_mood_->assign(value);
}
inline void ClientRelationDetail::set_self_mood(const void* value, size_t size) {
  set_has_self_mood();
  if (self_mood_ == &::google::protobuf::internal::kEmptyString) {
    self_mood_ = new ::std::string;
  }
  self_mood_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientRelationDetail::mutable_self_mood() {
  set_has_self_mood();
  if (self_mood_ == &::google::protobuf::internal::kEmptyString) {
    self_mood_ = new ::std::string;
  }
  return self_mood_;
}
inline ::std::string* ClientRelationDetail::release_self_mood() {
  clear_has_self_mood();
  if (self_mood_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = self_mood_;
    self_mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientRelationDetail::set_allocated_self_mood(::std::string* self_mood) {
  if (self_mood_ != &::google::protobuf::internal::kEmptyString) {
    delete self_mood_;
  }
  if (self_mood) {
    set_has_self_mood();
    self_mood_ = self_mood;
  } else {
    clear_has_self_mood();
    self_mood_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 been_added_friend_count = 4;
inline bool ClientRelationDetail::has_been_added_friend_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientRelationDetail::set_has_been_added_friend_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientRelationDetail::clear_has_been_added_friend_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientRelationDetail::clear_been_added_friend_count() {
  been_added_friend_count_ = 0;
  clear_has_been_added_friend_count();
}
inline ::google::protobuf::int32 ClientRelationDetail::been_added_friend_count() const {
  return been_added_friend_count_;
}
inline void ClientRelationDetail::set_been_added_friend_count(::google::protobuf::int32 value) {
  set_has_been_added_friend_count();
  been_added_friend_count_ = value;
}

// -------------------------------------------------------------------

// ChatMessage_ChatGoods

// optional int32 id = 1;
inline bool ChatMessage_ChatGoods::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage_ChatGoods::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage_ChatGoods::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage_ChatGoods::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChatMessage_ChatGoods::id() const {
  return id_;
}
inline void ChatMessage_ChatGoods::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool ChatMessage_ChatGoods::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage_ChatGoods::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage_ChatGoods::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage_ChatGoods::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatMessage_ChatGoods::name() const {
  return *name_;
}
inline void ChatMessage_ChatGoods::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatMessage_ChatGoods::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatMessage_ChatGoods::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage_ChatGoods::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChatMessage_ChatGoods::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage_ChatGoods::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 quality = 3;
inline bool ChatMessage_ChatGoods::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage_ChatGoods::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage_ChatGoods::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage_ChatGoods::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ChatMessage_ChatGoods::quality() const {
  return quality_;
}
inline void ChatMessage_ChatGoods::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional bytes dynamic_info = 4;
inline bool ChatMessage_ChatGoods::has_dynamic_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage_ChatGoods::set_has_dynamic_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage_ChatGoods::clear_has_dynamic_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage_ChatGoods::clear_dynamic_info() {
  if (dynamic_info_ != &::google::protobuf::internal::kEmptyString) {
    dynamic_info_->clear();
  }
  clear_has_dynamic_info();
}
inline const ::std::string& ChatMessage_ChatGoods::dynamic_info() const {
  return *dynamic_info_;
}
inline void ChatMessage_ChatGoods::set_dynamic_info(const ::std::string& value) {
  set_has_dynamic_info();
  if (dynamic_info_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_info_ = new ::std::string;
  }
  dynamic_info_->assign(value);
}
inline void ChatMessage_ChatGoods::set_dynamic_info(const char* value) {
  set_has_dynamic_info();
  if (dynamic_info_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_info_ = new ::std::string;
  }
  dynamic_info_->assign(value);
}
inline void ChatMessage_ChatGoods::set_dynamic_info(const void* value, size_t size) {
  set_has_dynamic_info();
  if (dynamic_info_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_info_ = new ::std::string;
  }
  dynamic_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage_ChatGoods::mutable_dynamic_info() {
  set_has_dynamic_info();
  if (dynamic_info_ == &::google::protobuf::internal::kEmptyString) {
    dynamic_info_ = new ::std::string;
  }
  return dynamic_info_;
}
inline ::std::string* ChatMessage_ChatGoods::release_dynamic_info() {
  clear_has_dynamic_info();
  if (dynamic_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dynamic_info_;
    dynamic_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage_ChatGoods::set_allocated_dynamic_info(::std::string* dynamic_info) {
  if (dynamic_info_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_info_;
  }
  if (dynamic_info) {
    set_has_dynamic_info();
    dynamic_info_ = dynamic_info;
  } else {
    clear_has_dynamic_info();
    dynamic_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChatMessage

// optional string speech = 1;
inline bool ChatMessage::has_speech() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_speech() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_speech() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_speech() {
  if (speech_ != &::google::protobuf::internal::kEmptyString) {
    speech_->clear();
  }
  clear_has_speech();
}
inline const ::std::string& ChatMessage::speech() const {
  return *speech_;
}
inline void ChatMessage::set_speech(const ::std::string& value) {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  speech_->assign(value);
}
inline void ChatMessage::set_speech(const char* value) {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  speech_->assign(value);
}
inline void ChatMessage::set_speech(const char* value, size_t size) {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  speech_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_speech() {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  return speech_;
}
inline ::std::string* ChatMessage::release_speech() {
  clear_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = speech_;
    speech_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_speech(::std::string* speech) {
  if (speech_ != &::google::protobuf::internal::kEmptyString) {
    delete speech_;
  }
  if (speech) {
    set_has_speech();
    speech_ = speech;
  } else {
    clear_has_speech();
    speech_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .app.message.ChatMessage.ChatGoods chat_goods = 2;
inline int ChatMessage::chat_goods_size() const {
  return chat_goods_.size();
}
inline void ChatMessage::clear_chat_goods() {
  chat_goods_.Clear();
}
inline const ::app::message::ChatMessage_ChatGoods& ChatMessage::chat_goods(int index) const {
  return chat_goods_.Get(index);
}
inline ::app::message::ChatMessage_ChatGoods* ChatMessage::mutable_chat_goods(int index) {
  return chat_goods_.Mutable(index);
}
inline ::app::message::ChatMessage_ChatGoods* ChatMessage::add_chat_goods() {
  return chat_goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ChatMessage_ChatGoods >&
ChatMessage::chat_goods() const {
  return chat_goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ChatMessage_ChatGoods >*
ChatMessage::mutable_chat_goods() {
  return &chat_goods_;
}

// optional int32 check_sum = 3;
inline bool ChatMessage::has_check_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_check_sum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_check_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_check_sum() {
  check_sum_ = 0;
  clear_has_check_sum();
}
inline ::google::protobuf::int32 ChatMessage::check_sum() const {
  return check_sum_;
}
inline void ChatMessage::set_check_sum(::google::protobuf::int32 value) {
  set_has_check_sum();
  check_sum_ = value;
}

// optional bool has_my_pos = 20;
inline bool ChatMessage::has_has_my_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_has_my_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_has_my_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_has_my_pos() {
  has_my_pos_ = false;
  clear_has_has_my_pos();
}
inline bool ChatMessage::has_my_pos() const {
  return has_my_pos_;
}
inline void ChatMessage::set_has_my_pos(bool value) {
  set_has_has_my_pos();
  has_my_pos_ = value;
}

// repeated int32 gem = 21;
inline int ChatMessage::gem_size() const {
  return gem_.size();
}
inline void ChatMessage::clear_gem() {
  gem_.Clear();
}
inline ::google::protobuf::int32 ChatMessage::gem(int index) const {
  return gem_.Get(index);
}
inline void ChatMessage::set_gem(int index, ::google::protobuf::int32 value) {
  gem_.Set(index, value);
}
inline void ChatMessage::add_gem(::google::protobuf::int32 value) {
  gem_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChatMessage::gem() const {
  return gem_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChatMessage::mutable_gem() {
  return &gem_;
}

// optional bytes hero_name = 4;
inline bool ChatMessage::has_hero_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatMessage::set_has_hero_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatMessage::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatMessage::clear_hero_name() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    hero_name_->clear();
  }
  clear_has_hero_name();
}
inline const ::std::string& ChatMessage::hero_name() const {
  return *hero_name_;
}
inline void ChatMessage::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(value);
}
inline void ChatMessage::set_hero_name(const char* value) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(value);
}
inline void ChatMessage::set_hero_name(const void* value, size_t size) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_hero_name() {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  return hero_name_;
}
inline ::std::string* ChatMessage::release_hero_name() {
  clear_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hero_name_;
    hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (hero_name) {
    set_has_hero_name();
    hero_name_ = hero_name;
  } else {
    clear_has_hero_name();
    hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 hero_id = 5;
inline bool ChatMessage::has_hero_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatMessage::set_has_hero_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatMessage::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatMessage::clear_hero_id() {
  hero_id_ = GOOGLE_LONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::int64 ChatMessage::hero_id() const {
  return hero_id_;
}
inline void ChatMessage::set_hero_id(::google::protobuf::int64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 level = 6;
inline bool ChatMessage::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatMessage::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatMessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatMessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ChatMessage::level() const {
  return level_;
}
inline void ChatMessage::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool is_vip = 7;
inline bool ChatMessage::has_is_vip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatMessage::set_has_is_vip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatMessage::clear_has_is_vip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatMessage::clear_is_vip() {
  is_vip_ = false;
  clear_has_is_vip();
}
inline bool ChatMessage::is_vip() const {
  return is_vip_;
}
inline void ChatMessage::set_is_vip(bool value) {
  set_has_is_vip();
  is_vip_ = value;
}

// optional int32 scene_id = 8;
inline bool ChatMessage::has_scene_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatMessage::set_has_scene_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatMessage::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatMessage::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ChatMessage::scene_id() const {
  return scene_id_;
}
inline void ChatMessage::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional int32 scene_x = 9;
inline bool ChatMessage::has_scene_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatMessage::set_has_scene_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatMessage::clear_has_scene_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatMessage::clear_scene_x() {
  scene_x_ = 0;
  clear_has_scene_x();
}
inline ::google::protobuf::int32 ChatMessage::scene_x() const {
  return scene_x_;
}
inline void ChatMessage::set_scene_x(::google::protobuf::int32 value) {
  set_has_scene_x();
  scene_x_ = value;
}

// optional int32 scene_y = 10;
inline bool ChatMessage::has_scene_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatMessage::set_has_scene_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatMessage::clear_has_scene_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatMessage::clear_scene_y() {
  scene_y_ = 0;
  clear_has_scene_y();
}
inline ::google::protobuf::int32 ChatMessage::scene_y() const {
  return scene_y_;
}
inline void ChatMessage::set_scene_y(::google::protobuf::int32 value) {
  set_has_scene_y();
  scene_y_ = value;
}

// optional int32 scene_line = 11;
inline bool ChatMessage::has_scene_line() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChatMessage::set_has_scene_line() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChatMessage::clear_has_scene_line() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChatMessage::clear_scene_line() {
  scene_line_ = 0;
  clear_has_scene_line();
}
inline ::google::protobuf::int32 ChatMessage::scene_line() const {
  return scene_line_;
}
inline void ChatMessage::set_scene_line(::google::protobuf::int32 value) {
  set_has_scene_line();
  scene_line_ = value;
}

// optional bool is_ws_city_master = 13;
inline bool ChatMessage::has_is_ws_city_master() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChatMessage::set_has_is_ws_city_master() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChatMessage::clear_has_is_ws_city_master() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChatMessage::clear_is_ws_city_master() {
  is_ws_city_master_ = false;
  clear_has_is_ws_city_master();
}
inline bool ChatMessage::is_ws_city_master() const {
  return is_ws_city_master_;
}
inline void ChatMessage::set_is_ws_city_master(bool value) {
  set_has_is_ws_city_master();
  is_ws_city_master_ = value;
}

// optional bool is_long_city_master = 14;
inline bool ChatMessage::has_is_long_city_master() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChatMessage::set_has_is_long_city_master() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChatMessage::clear_has_is_long_city_master() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChatMessage::clear_is_long_city_master() {
  is_long_city_master_ = false;
  clear_has_is_long_city_master();
}
inline bool ChatMessage::is_long_city_master() const {
  return is_long_city_master_;
}
inline void ChatMessage::set_is_long_city_master(bool value) {
  set_has_is_long_city_master();
  is_long_city_master_ = value;
}

// optional int32 city_master_type = 15;
inline bool ChatMessage::has_city_master_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChatMessage::set_has_city_master_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChatMessage::clear_has_city_master_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChatMessage::clear_city_master_type() {
  city_master_type_ = 0;
  clear_has_city_master_type();
}
inline ::google::protobuf::int32 ChatMessage::city_master_type() const {
  return city_master_type_;
}
inline void ChatMessage::set_city_master_type(::google::protobuf::int32 value) {
  set_has_city_master_type();
  city_master_type_ = value;
}

// optional bool is_gm = 18;
inline bool ChatMessage::has_is_gm() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChatMessage::set_has_is_gm() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChatMessage::clear_has_is_gm() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChatMessage::clear_is_gm() {
  is_gm_ = false;
  clear_has_is_gm();
}
inline bool ChatMessage::is_gm() const {
  return is_gm_;
}
inline void ChatMessage::set_is_gm(bool value) {
  set_has_is_gm();
  is_gm_ = value;
}

// optional int32 platform_vip = 19;
inline bool ChatMessage::has_platform_vip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChatMessage::set_has_platform_vip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChatMessage::clear_has_platform_vip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChatMessage::clear_platform_vip() {
  platform_vip_ = 0;
  clear_has_platform_vip();
}
inline ::google::protobuf::int32 ChatMessage::platform_vip() const {
  return platform_vip_;
}
inline void ChatMessage::set_platform_vip(::google::protobuf::int32 value) {
  set_has_platform_vip();
  platform_vip_ = value;
}

// -------------------------------------------------------------------

// JianDaoProto

// optional int64 storeExp = 1;
inline bool JianDaoProto::has_storeexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JianDaoProto::set_has_storeexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JianDaoProto::clear_has_storeexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JianDaoProto::clear_storeexp() {
  storeexp_ = GOOGLE_LONGLONG(0);
  clear_has_storeexp();
}
inline ::google::protobuf::int64 JianDaoProto::storeexp() const {
  return storeexp_;
}
inline void JianDaoProto::set_storeexp(::google::protobuf::int64 value) {
  set_has_storeexp();
  storeexp_ = value;
}

// optional int32 tianJianLv = 2;
inline bool JianDaoProto::has_tianjianlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JianDaoProto::set_has_tianjianlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JianDaoProto::clear_has_tianjianlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JianDaoProto::clear_tianjianlv() {
  tianjianlv_ = 0;
  clear_has_tianjianlv();
}
inline ::google::protobuf::int32 JianDaoProto::tianjianlv() const {
  return tianjianlv_;
}
inline void JianDaoProto::set_tianjianlv(::google::protobuf::int32 value) {
  set_has_tianjianlv();
  tianjianlv_ = value;
}

// optional int32 moJianLv = 3;
inline bool JianDaoProto::has_mojianlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JianDaoProto::set_has_mojianlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JianDaoProto::clear_has_mojianlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JianDaoProto::clear_mojianlv() {
  mojianlv_ = 0;
  clear_has_mojianlv();
}
inline ::google::protobuf::int32 JianDaoProto::mojianlv() const {
  return mojianlv_;
}
inline void JianDaoProto::set_mojianlv(::google::protobuf::int32 value) {
  set_has_mojianlv();
  mojianlv_ = value;
}

// optional int32 feiXianLv = 4;
inline bool JianDaoProto::has_feixianlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JianDaoProto::set_has_feixianlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JianDaoProto::clear_has_feixianlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JianDaoProto::clear_feixianlv() {
  feixianlv_ = 0;
  clear_has_feixianlv();
}
inline ::google::protobuf::int32 JianDaoProto::feixianlv() const {
  return feixianlv_;
}
inline void JianDaoProto::set_feixianlv(::google::protobuf::int32 value) {
  set_has_feixianlv();
  feixianlv_ = value;
}

// -------------------------------------------------------------------

// TianXieProto

// optional .app.message.TianXieConfigProto tian_xie = 1;
inline bool TianXieProto::has_tian_xie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TianXieProto::set_has_tian_xie() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TianXieProto::clear_has_tian_xie() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TianXieProto::clear_tian_xie() {
  if (tian_xie_ != NULL) tian_xie_->::app::message::TianXieConfigProto::Clear();
  clear_has_tian_xie();
}
inline const ::app::message::TianXieConfigProto& TianXieProto::tian_xie() const {
  return tian_xie_ != NULL ? *tian_xie_ : *default_instance_->tian_xie_;
}
inline ::app::message::TianXieConfigProto* TianXieProto::mutable_tian_xie() {
  set_has_tian_xie();
  if (tian_xie_ == NULL) tian_xie_ = new ::app::message::TianXieConfigProto;
  return tian_xie_;
}
inline ::app::message::TianXieConfigProto* TianXieProto::release_tian_xie() {
  clear_has_tian_xie();
  ::app::message::TianXieConfigProto* temp = tian_xie_;
  tian_xie_ = NULL;
  return temp;
}
inline void TianXieProto::set_allocated_tian_xie(::app::message::TianXieConfigProto* tian_xie) {
  delete tian_xie_;
  tian_xie_ = tian_xie;
  if (tian_xie) {
    set_has_tian_xie();
  } else {
    clear_has_tian_xie();
  }
}

// optional int32 bless_amount = 10;
inline bool TianXieProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TianXieProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TianXieProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TianXieProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 TianXieProto::bless_amount() const {
  return bless_amount_;
}
inline void TianXieProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 11;
inline bool TianXieProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TianXieProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TianXieProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TianXieProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 TianXieProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void TianXieProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int32 qian_neng_use_count = 21;
inline bool TianXieProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TianXieProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TianXieProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TianXieProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 TianXieProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void TianXieProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool TianXieProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TianXieProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TianXieProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TianXieProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 TianXieProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void TianXieProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// repeated int32 minor_slot_pos = 2;
inline int TianXieProto::minor_slot_pos_size() const {
  return minor_slot_pos_.size();
}
inline void TianXieProto::clear_minor_slot_pos() {
  minor_slot_pos_.Clear();
}
inline ::google::protobuf::int32 TianXieProto::minor_slot_pos(int index) const {
  return minor_slot_pos_.Get(index);
}
inline void TianXieProto::set_minor_slot_pos(int index, ::google::protobuf::int32 value) {
  minor_slot_pos_.Set(index, value);
}
inline void TianXieProto::add_minor_slot_pos(::google::protobuf::int32 value) {
  minor_slot_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TianXieProto::minor_slot_pos() const {
  return minor_slot_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TianXieProto::mutable_minor_slot_pos() {
  return &minor_slot_pos_;
}

// repeated int32 minor_slot_nickname = 3;
inline int TianXieProto::minor_slot_nickname_size() const {
  return minor_slot_nickname_.size();
}
inline void TianXieProto::clear_minor_slot_nickname() {
  minor_slot_nickname_.Clear();
}
inline ::google::protobuf::int32 TianXieProto::minor_slot_nickname(int index) const {
  return minor_slot_nickname_.Get(index);
}
inline void TianXieProto::set_minor_slot_nickname(int index, ::google::protobuf::int32 value) {
  minor_slot_nickname_.Set(index, value);
}
inline void TianXieProto::add_minor_slot_nickname(::google::protobuf::int32 value) {
  minor_slot_nickname_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TianXieProto::minor_slot_nickname() const {
  return minor_slot_nickname_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TianXieProto::mutable_minor_slot_nickname() {
  return &minor_slot_nickname_;
}

// repeated int32 major_slot_pos = 4;
inline int TianXieProto::major_slot_pos_size() const {
  return major_slot_pos_.size();
}
inline void TianXieProto::clear_major_slot_pos() {
  major_slot_pos_.Clear();
}
inline ::google::protobuf::int32 TianXieProto::major_slot_pos(int index) const {
  return major_slot_pos_.Get(index);
}
inline void TianXieProto::set_major_slot_pos(int index, ::google::protobuf::int32 value) {
  major_slot_pos_.Set(index, value);
}
inline void TianXieProto::add_major_slot_pos(::google::protobuf::int32 value) {
  major_slot_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TianXieProto::major_slot_pos() const {
  return major_slot_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TianXieProto::mutable_major_slot_pos() {
  return &major_slot_pos_;
}

// repeated int32 major_slot_nickname = 5;
inline int TianXieProto::major_slot_nickname_size() const {
  return major_slot_nickname_.size();
}
inline void TianXieProto::clear_major_slot_nickname() {
  major_slot_nickname_.Clear();
}
inline ::google::protobuf::int32 TianXieProto::major_slot_nickname(int index) const {
  return major_slot_nickname_.Get(index);
}
inline void TianXieProto::set_major_slot_nickname(int index, ::google::protobuf::int32 value) {
  major_slot_nickname_.Set(index, value);
}
inline void TianXieProto::add_major_slot_nickname(::google::protobuf::int32 value) {
  major_slot_nickname_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TianXieProto::major_slot_nickname() const {
  return major_slot_nickname_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TianXieProto::mutable_major_slot_nickname() {
  return &major_slot_nickname_;
}

// optional int32 upgrade_times = 6;
inline bool TianXieProto::has_upgrade_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TianXieProto::set_has_upgrade_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TianXieProto::clear_has_upgrade_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TianXieProto::clear_upgrade_times() {
  upgrade_times_ = 0;
  clear_has_upgrade_times();
}
inline ::google::protobuf::int32 TianXieProto::upgrade_times() const {
  return upgrade_times_;
}
inline void TianXieProto::set_upgrade_times(::google::protobuf::int32 value) {
  set_has_upgrade_times();
  upgrade_times_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool TianXieProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TianXieProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TianXieProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TianXieProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 TianXieProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void TianXieProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool TianXieProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TianXieProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TianXieProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TianXieProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 TianXieProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void TianXieProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool TianXieProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TianXieProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TianXieProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TianXieProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 TianXieProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void TianXieProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool TianXieProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TianXieProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TianXieProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TianXieProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 TianXieProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void TianXieProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// WuDaoProto

// optional .app.message.WuDaoConfigProto wu_dao = 1;
inline bool WuDaoProto::has_wu_dao() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WuDaoProto::set_has_wu_dao() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WuDaoProto::clear_has_wu_dao() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WuDaoProto::clear_wu_dao() {
  if (wu_dao_ != NULL) wu_dao_->::app::message::WuDaoConfigProto::Clear();
  clear_has_wu_dao();
}
inline const ::app::message::WuDaoConfigProto& WuDaoProto::wu_dao() const {
  return wu_dao_ != NULL ? *wu_dao_ : *default_instance_->wu_dao_;
}
inline ::app::message::WuDaoConfigProto* WuDaoProto::mutable_wu_dao() {
  set_has_wu_dao();
  if (wu_dao_ == NULL) wu_dao_ = new ::app::message::WuDaoConfigProto;
  return wu_dao_;
}
inline ::app::message::WuDaoConfigProto* WuDaoProto::release_wu_dao() {
  clear_has_wu_dao();
  ::app::message::WuDaoConfigProto* temp = wu_dao_;
  wu_dao_ = NULL;
  return temp;
}
inline void WuDaoProto::set_allocated_wu_dao(::app::message::WuDaoConfigProto* wu_dao) {
  delete wu_dao_;
  wu_dao_ = wu_dao;
  if (wu_dao) {
    set_has_wu_dao();
  } else {
    clear_has_wu_dao();
  }
}

// optional int32 bless_amount = 2;
inline bool WuDaoProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WuDaoProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WuDaoProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WuDaoProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 WuDaoProto::bless_amount() const {
  return bless_amount_;
}
inline void WuDaoProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 3;
inline bool WuDaoProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WuDaoProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WuDaoProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WuDaoProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 WuDaoProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void WuDaoProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int32 qian_neng_use_count = 21;
inline bool WuDaoProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WuDaoProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WuDaoProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WuDaoProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 WuDaoProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void WuDaoProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool WuDaoProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WuDaoProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WuDaoProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WuDaoProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 WuDaoProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void WuDaoProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// repeated int32 mo_bing_equip_type = 10;
inline int WuDaoProto::mo_bing_equip_type_size() const {
  return mo_bing_equip_type_.size();
}
inline void WuDaoProto::clear_mo_bing_equip_type() {
  mo_bing_equip_type_.Clear();
}
inline ::google::protobuf::int32 WuDaoProto::mo_bing_equip_type(int index) const {
  return mo_bing_equip_type_.Get(index);
}
inline void WuDaoProto::set_mo_bing_equip_type(int index, ::google::protobuf::int32 value) {
  mo_bing_equip_type_.Set(index, value);
}
inline void WuDaoProto::add_mo_bing_equip_type(::google::protobuf::int32 value) {
  mo_bing_equip_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WuDaoProto::mo_bing_equip_type() const {
  return mo_bing_equip_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WuDaoProto::mutable_mo_bing_equip_type() {
  return &mo_bing_equip_type_;
}

// optional int32 upgrade_times = 6;
inline bool WuDaoProto::has_upgrade_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WuDaoProto::set_has_upgrade_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WuDaoProto::clear_has_upgrade_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WuDaoProto::clear_upgrade_times() {
  upgrade_times_ = 0;
  clear_has_upgrade_times();
}
inline ::google::protobuf::int32 WuDaoProto::upgrade_times() const {
  return upgrade_times_;
}
inline void WuDaoProto::set_upgrade_times(::google::protobuf::int32 value) {
  set_has_upgrade_times();
  upgrade_times_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool WuDaoProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WuDaoProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WuDaoProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WuDaoProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 WuDaoProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void WuDaoProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool WuDaoProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WuDaoProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WuDaoProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WuDaoProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 WuDaoProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void WuDaoProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool WuDaoProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WuDaoProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WuDaoProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WuDaoProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 WuDaoProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void WuDaoProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool WuDaoProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WuDaoProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WuDaoProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WuDaoProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 WuDaoProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void WuDaoProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// CloakProto

// optional .app.message.CloakConfigProto cloak = 1;
inline bool CloakProto::has_cloak() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloakProto::set_has_cloak() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloakProto::clear_has_cloak() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloakProto::clear_cloak() {
  if (cloak_ != NULL) cloak_->::app::message::CloakConfigProto::Clear();
  clear_has_cloak();
}
inline const ::app::message::CloakConfigProto& CloakProto::cloak() const {
  return cloak_ != NULL ? *cloak_ : *default_instance_->cloak_;
}
inline ::app::message::CloakConfigProto* CloakProto::mutable_cloak() {
  set_has_cloak();
  if (cloak_ == NULL) cloak_ = new ::app::message::CloakConfigProto;
  return cloak_;
}
inline ::app::message::CloakConfigProto* CloakProto::release_cloak() {
  clear_has_cloak();
  ::app::message::CloakConfigProto* temp = cloak_;
  cloak_ = NULL;
  return temp;
}
inline void CloakProto::set_allocated_cloak(::app::message::CloakConfigProto* cloak) {
  delete cloak_;
  cloak_ = cloak;
  if (cloak) {
    set_has_cloak();
  } else {
    clear_has_cloak();
  }
}

// optional int32 bless_amount = 10;
inline bool CloakProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloakProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CloakProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CloakProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 CloakProto::bless_amount() const {
  return bless_amount_;
}
inline void CloakProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 11;
inline bool CloakProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloakProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CloakProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CloakProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 CloakProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void CloakProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// repeated int32 spell_pos = 12;
inline int CloakProto::spell_pos_size() const {
  return spell_pos_.size();
}
inline void CloakProto::clear_spell_pos() {
  spell_pos_.Clear();
}
inline ::google::protobuf::int32 CloakProto::spell_pos(int index) const {
  return spell_pos_.Get(index);
}
inline void CloakProto::set_spell_pos(int index, ::google::protobuf::int32 value) {
  spell_pos_.Set(index, value);
}
inline void CloakProto::add_spell_pos(::google::protobuf::int32 value) {
  spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CloakProto::spell_pos() const {
  return spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CloakProto::mutable_spell_pos() {
  return &spell_pos_;
}

// repeated .app.message.ActiveSpell spells = 13;
inline int CloakProto::spells_size() const {
  return spells_.size();
}
inline void CloakProto::clear_spells() {
  spells_.Clear();
}
inline const ::app::message::ActiveSpell& CloakProto::spells(int index) const {
  return spells_.Get(index);
}
inline ::app::message::ActiveSpell* CloakProto::mutable_spells(int index) {
  return spells_.Mutable(index);
}
inline ::app::message::ActiveSpell* CloakProto::add_spells() {
  return spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
CloakProto::spells() const {
  return spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
CloakProto::mutable_spells() {
  return &spells_;
}

// optional bool is_show = 14;
inline bool CloakProto::has_is_show() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CloakProto::set_has_is_show() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CloakProto::clear_has_is_show() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CloakProto::clear_is_show() {
  is_show_ = false;
  clear_has_is_show();
}
inline bool CloakProto::is_show() const {
  return is_show_;
}
inline void CloakProto::set_is_show(bool value) {
  set_has_is_show();
  is_show_ = value;
}

// optional int32 qian_neng_use_count = 21;
inline bool CloakProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CloakProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CloakProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CloakProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 CloakProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void CloakProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool CloakProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CloakProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CloakProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CloakProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 CloakProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void CloakProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool CloakProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CloakProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CloakProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CloakProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 CloakProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void CloakProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool CloakProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CloakProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CloakProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CloakProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 CloakProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void CloakProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool CloakProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CloakProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CloakProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CloakProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 CloakProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void CloakProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool CloakProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CloakProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CloakProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CloakProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 CloakProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void CloakProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// YitianshenjueProto

// optional .app.message.SpriteStatProto stat_info = 1;
inline bool YitianshenjueProto::has_stat_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YitianshenjueProto::set_has_stat_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YitianshenjueProto::clear_has_stat_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YitianshenjueProto::clear_stat_info() {
  if (stat_info_ != NULL) stat_info_->::app::message::SpriteStatProto::Clear();
  clear_has_stat_info();
}
inline const ::app::message::SpriteStatProto& YitianshenjueProto::stat_info() const {
  return stat_info_ != NULL ? *stat_info_ : *default_instance_->stat_info_;
}
inline ::app::message::SpriteStatProto* YitianshenjueProto::mutable_stat_info() {
  set_has_stat_info();
  if (stat_info_ == NULL) stat_info_ = new ::app::message::SpriteStatProto;
  return stat_info_;
}
inline ::app::message::SpriteStatProto* YitianshenjueProto::release_stat_info() {
  clear_has_stat_info();
  ::app::message::SpriteStatProto* temp = stat_info_;
  stat_info_ = NULL;
  return temp;
}
inline void YitianshenjueProto::set_allocated_stat_info(::app::message::SpriteStatProto* stat_info) {
  delete stat_info_;
  stat_info_ = stat_info;
  if (stat_info) {
    set_has_stat_info();
  } else {
    clear_has_stat_info();
  }
}

// repeated .app.message.SingleStatProto current_add_stat = 2;
inline int YitianshenjueProto::current_add_stat_size() const {
  return current_add_stat_.size();
}
inline void YitianshenjueProto::clear_current_add_stat() {
  current_add_stat_.Clear();
}
inline const ::app::message::SingleStatProto& YitianshenjueProto::current_add_stat(int index) const {
  return current_add_stat_.Get(index);
}
inline ::app::message::SingleStatProto* YitianshenjueProto::mutable_current_add_stat(int index) {
  return current_add_stat_.Mutable(index);
}
inline ::app::message::SingleStatProto* YitianshenjueProto::add_current_add_stat() {
  return current_add_stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
YitianshenjueProto::current_add_stat() const {
  return current_add_stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
YitianshenjueProto::mutable_current_add_stat() {
  return &current_add_stat_;
}

// repeated .app.message.SingleStatProto next_add_stat = 3;
inline int YitianshenjueProto::next_add_stat_size() const {
  return next_add_stat_.size();
}
inline void YitianshenjueProto::clear_next_add_stat() {
  next_add_stat_.Clear();
}
inline const ::app::message::SingleStatProto& YitianshenjueProto::next_add_stat(int index) const {
  return next_add_stat_.Get(index);
}
inline ::app::message::SingleStatProto* YitianshenjueProto::mutable_next_add_stat(int index) {
  return next_add_stat_.Mutable(index);
}
inline ::app::message::SingleStatProto* YitianshenjueProto::add_next_add_stat() {
  return next_add_stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >&
YitianshenjueProto::next_add_stat() const {
  return next_add_stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleStatProto >*
YitianshenjueProto::mutable_next_add_stat() {
  return &next_add_stat_;
}

// optional int32 current_cuilian_value = 4;
inline bool YitianshenjueProto::has_current_cuilian_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YitianshenjueProto::set_has_current_cuilian_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YitianshenjueProto::clear_has_current_cuilian_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YitianshenjueProto::clear_current_cuilian_value() {
  current_cuilian_value_ = 0;
  clear_has_current_cuilian_value();
}
inline ::google::protobuf::int32 YitianshenjueProto::current_cuilian_value() const {
  return current_cuilian_value_;
}
inline void YitianshenjueProto::set_current_cuilian_value(::google::protobuf::int32 value) {
  set_has_current_cuilian_value();
  current_cuilian_value_ = value;
}

// optional int32 equipment_cuilian_count = 5;
inline bool YitianshenjueProto::has_equipment_cuilian_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YitianshenjueProto::set_has_equipment_cuilian_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YitianshenjueProto::clear_has_equipment_cuilian_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YitianshenjueProto::clear_equipment_cuilian_count() {
  equipment_cuilian_count_ = 0;
  clear_has_equipment_cuilian_count();
}
inline ::google::protobuf::int32 YitianshenjueProto::equipment_cuilian_count() const {
  return equipment_cuilian_count_;
}
inline void YitianshenjueProto::set_equipment_cuilian_count(::google::protobuf::int32 value) {
  set_has_equipment_cuilian_count();
  equipment_cuilian_count_ = value;
}

// -------------------------------------------------------------------

// MountProto

// optional int32 best_mount = 1;
inline bool MountProto::has_best_mount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MountProto::set_has_best_mount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MountProto::clear_has_best_mount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MountProto::clear_best_mount() {
  best_mount_ = 0;
  clear_has_best_mount();
}
inline ::google::protobuf::int32 MountProto::best_mount() const {
  return best_mount_;
}
inline void MountProto::set_best_mount(::google::protobuf::int32 value) {
  set_has_best_mount();
  best_mount_ = value;
}

// optional int32 riding_mount = 2;
inline bool MountProto::has_riding_mount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MountProto::set_has_riding_mount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MountProto::clear_has_riding_mount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MountProto::clear_riding_mount() {
  riding_mount_ = 0;
  clear_has_riding_mount();
}
inline ::google::protobuf::int32 MountProto::riding_mount() const {
  return riding_mount_;
}
inline void MountProto::set_riding_mount(::google::protobuf::int32 value) {
  set_has_riding_mount();
  riding_mount_ = value;
}

// optional bool is_ride = 3;
inline bool MountProto::has_is_ride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MountProto::set_has_is_ride() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MountProto::clear_has_is_ride() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MountProto::clear_is_ride() {
  is_ride_ = false;
  clear_has_is_ride();
}
inline bool MountProto::is_ride() const {
  return is_ride_;
}
inline void MountProto::set_is_ride(bool value) {
  set_has_is_ride();
  is_ride_ = value;
}

// optional int64 buy_time = 5;
inline bool MountProto::has_buy_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MountProto::set_has_buy_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MountProto::clear_has_buy_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MountProto::clear_buy_time() {
  buy_time_ = GOOGLE_LONGLONG(0);
  clear_has_buy_time();
}
inline ::google::protobuf::int64 MountProto::buy_time() const {
  return buy_time_;
}
inline void MountProto::set_buy_time(::google::protobuf::int64 value) {
  set_has_buy_time();
  buy_time_ = value;
}

// optional int32 bless_amount = 6;
inline bool MountProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MountProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MountProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MountProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 MountProto::bless_amount() const {
  return bless_amount_;
}
inline void MountProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 7;
inline bool MountProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MountProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MountProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MountProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 MountProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void MountProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional .app.message.MountAddedDataProto added_data = 8;
inline bool MountProto::has_added_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MountProto::set_has_added_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MountProto::clear_has_added_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MountProto::clear_added_data() {
  if (added_data_ != NULL) added_data_->::app::message::MountAddedDataProto::Clear();
  clear_has_added_data();
}
inline const ::app::message::MountAddedDataProto& MountProto::added_data() const {
  return added_data_ != NULL ? *added_data_ : *default_instance_->added_data_;
}
inline ::app::message::MountAddedDataProto* MountProto::mutable_added_data() {
  set_has_added_data();
  if (added_data_ == NULL) added_data_ = new ::app::message::MountAddedDataProto;
  return added_data_;
}
inline ::app::message::MountAddedDataProto* MountProto::release_added_data() {
  clear_has_added_data();
  ::app::message::MountAddedDataProto* temp = added_data_;
  added_data_ = NULL;
  return temp;
}
inline void MountProto::set_allocated_added_data(::app::message::MountAddedDataProto* added_data) {
  delete added_data_;
  added_data_ = added_data;
  if (added_data) {
    set_has_added_data();
  } else {
    clear_has_added_data();
  }
}

// repeated int32 spell_pos = 12;
inline int MountProto::spell_pos_size() const {
  return spell_pos_.size();
}
inline void MountProto::clear_spell_pos() {
  spell_pos_.Clear();
}
inline ::google::protobuf::int32 MountProto::spell_pos(int index) const {
  return spell_pos_.Get(index);
}
inline void MountProto::set_spell_pos(int index, ::google::protobuf::int32 value) {
  spell_pos_.Set(index, value);
}
inline void MountProto::add_spell_pos(::google::protobuf::int32 value) {
  spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MountProto::spell_pos() const {
  return spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MountProto::mutable_spell_pos() {
  return &spell_pos_;
}

// repeated .app.message.ActiveSpell spells = 13;
inline int MountProto::spells_size() const {
  return spells_.size();
}
inline void MountProto::clear_spells() {
  spells_.Clear();
}
inline const ::app::message::ActiveSpell& MountProto::spells(int index) const {
  return spells_.Get(index);
}
inline ::app::message::ActiveSpell* MountProto::mutable_spells(int index) {
  return spells_.Mutable(index);
}
inline ::app::message::ActiveSpell* MountProto::add_spells() {
  return spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
MountProto::spells() const {
  return spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
MountProto::mutable_spells() {
  return &spells_;
}

// repeated int32 equipment_pos = 14;
inline int MountProto::equipment_pos_size() const {
  return equipment_pos_.size();
}
inline void MountProto::clear_equipment_pos() {
  equipment_pos_.Clear();
}
inline ::google::protobuf::int32 MountProto::equipment_pos(int index) const {
  return equipment_pos_.Get(index);
}
inline void MountProto::set_equipment_pos(int index, ::google::protobuf::int32 value) {
  equipment_pos_.Set(index, value);
}
inline void MountProto::add_equipment_pos(::google::protobuf::int32 value) {
  equipment_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MountProto::equipment_pos() const {
  return equipment_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MountProto::mutable_equipment_pos() {
  return &equipment_pos_;
}

// repeated bytes equipment_static_data = 15;
inline int MountProto::equipment_static_data_size() const {
  return equipment_static_data_.size();
}
inline void MountProto::clear_equipment_static_data() {
  equipment_static_data_.Clear();
}
inline const ::std::string& MountProto::equipment_static_data(int index) const {
  return equipment_static_data_.Get(index);
}
inline ::std::string* MountProto::mutable_equipment_static_data(int index) {
  return equipment_static_data_.Mutable(index);
}
inline void MountProto::set_equipment_static_data(int index, const ::std::string& value) {
  equipment_static_data_.Mutable(index)->assign(value);
}
inline void MountProto::set_equipment_static_data(int index, const char* value) {
  equipment_static_data_.Mutable(index)->assign(value);
}
inline void MountProto::set_equipment_static_data(int index, const void* value, size_t size) {
  equipment_static_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountProto::add_equipment_static_data() {
  return equipment_static_data_.Add();
}
inline void MountProto::add_equipment_static_data(const ::std::string& value) {
  equipment_static_data_.Add()->assign(value);
}
inline void MountProto::add_equipment_static_data(const char* value) {
  equipment_static_data_.Add()->assign(value);
}
inline void MountProto::add_equipment_static_data(const void* value, size_t size) {
  equipment_static_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MountProto::equipment_static_data() const {
  return equipment_static_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MountProto::mutable_equipment_static_data() {
  return &equipment_static_data_;
}

// repeated bytes equipment_dynamic_data = 16;
inline int MountProto::equipment_dynamic_data_size() const {
  return equipment_dynamic_data_.size();
}
inline void MountProto::clear_equipment_dynamic_data() {
  equipment_dynamic_data_.Clear();
}
inline const ::std::string& MountProto::equipment_dynamic_data(int index) const {
  return equipment_dynamic_data_.Get(index);
}
inline ::std::string* MountProto::mutable_equipment_dynamic_data(int index) {
  return equipment_dynamic_data_.Mutable(index);
}
inline void MountProto::set_equipment_dynamic_data(int index, const ::std::string& value) {
  equipment_dynamic_data_.Mutable(index)->assign(value);
}
inline void MountProto::set_equipment_dynamic_data(int index, const char* value) {
  equipment_dynamic_data_.Mutable(index)->assign(value);
}
inline void MountProto::set_equipment_dynamic_data(int index, const void* value, size_t size) {
  equipment_dynamic_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountProto::add_equipment_dynamic_data() {
  return equipment_dynamic_data_.Add();
}
inline void MountProto::add_equipment_dynamic_data(const ::std::string& value) {
  equipment_dynamic_data_.Add()->assign(value);
}
inline void MountProto::add_equipment_dynamic_data(const char* value) {
  equipment_dynamic_data_.Add()->assign(value);
}
inline void MountProto::add_equipment_dynamic_data(const void* value, size_t size) {
  equipment_dynamic_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MountProto::equipment_dynamic_data() const {
  return equipment_dynamic_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MountProto::mutable_equipment_dynamic_data() {
  return &equipment_dynamic_data_;
}

// optional int32 qian_neng_use_count = 21;
inline bool MountProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MountProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MountProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MountProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 MountProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void MountProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 22;
inline bool MountProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MountProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MountProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MountProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 MountProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void MountProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional bool is_hide_huan_hua = 24;
inline bool MountProto::has_is_hide_huan_hua() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MountProto::set_has_is_hide_huan_hua() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MountProto::clear_has_is_hide_huan_hua() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MountProto::clear_is_hide_huan_hua() {
  is_hide_huan_hua_ = false;
  clear_has_is_hide_huan_hua();
}
inline bool MountProto::is_hide_huan_hua() const {
  return is_hide_huan_hua_;
}
inline void MountProto::set_is_hide_huan_hua(bool value) {
  set_has_is_hide_huan_hua();
  is_hide_huan_hua_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool MountProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MountProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MountProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MountProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 MountProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void MountProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool MountProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MountProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MountProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MountProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 MountProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void MountProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool MountProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MountProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MountProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MountProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 MountProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void MountProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool MountProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MountProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MountProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MountProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 MountProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void MountProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// MountAddedDataProto

// repeated .app.message.SpriteStatProto added_stat = 2;
inline int MountAddedDataProto::added_stat_size() const {
  return added_stat_.size();
}
inline void MountAddedDataProto::clear_added_stat() {
  added_stat_.Clear();
}
inline const ::app::message::SpriteStatProto& MountAddedDataProto::added_stat(int index) const {
  return added_stat_.Get(index);
}
inline ::app::message::SpriteStatProto* MountAddedDataProto::mutable_added_stat(int index) {
  return added_stat_.Mutable(index);
}
inline ::app::message::SpriteStatProto* MountAddedDataProto::add_added_stat() {
  return added_stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SpriteStatProto >&
MountAddedDataProto::added_stat() const {
  return added_stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SpriteStatProto >*
MountAddedDataProto::mutable_added_stat() {
  return &added_stat_;
}

// repeated int32 added_fighting_amount = 3;
inline int MountAddedDataProto::added_fighting_amount_size() const {
  return added_fighting_amount_.size();
}
inline void MountAddedDataProto::clear_added_fighting_amount() {
  added_fighting_amount_.Clear();
}
inline ::google::protobuf::int32 MountAddedDataProto::added_fighting_amount(int index) const {
  return added_fighting_amount_.Get(index);
}
inline void MountAddedDataProto::set_added_fighting_amount(int index, ::google::protobuf::int32 value) {
  added_fighting_amount_.Set(index, value);
}
inline void MountAddedDataProto::add_added_fighting_amount(::google::protobuf::int32 value) {
  added_fighting_amount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MountAddedDataProto::added_fighting_amount() const {
  return added_fighting_amount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MountAddedDataProto::mutable_added_fighting_amount() {
  return &added_fighting_amount_;
}

// -------------------------------------------------------------------

// SuperWeaponProto

// optional int32 id = 1;
inline bool SuperWeaponProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuperWeaponProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuperWeaponProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuperWeaponProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SuperWeaponProto::id() const {
  return id_;
}
inline void SuperWeaponProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 upgrade_pos = 2;
inline bool SuperWeaponProto::has_upgrade_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuperWeaponProto::set_has_upgrade_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuperWeaponProto::clear_has_upgrade_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuperWeaponProto::clear_upgrade_pos() {
  upgrade_pos_ = 0;
  clear_has_upgrade_pos();
}
inline ::google::protobuf::int32 SuperWeaponProto::upgrade_pos() const {
  return upgrade_pos_;
}
inline void SuperWeaponProto::set_upgrade_pos(::google::protobuf::int32 value) {
  set_has_upgrade_pos();
  upgrade_pos_ = value;
}

// optional .app.message.UpgradeProto next_upgrade_data = 6;
inline bool SuperWeaponProto::has_next_upgrade_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuperWeaponProto::set_has_next_upgrade_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuperWeaponProto::clear_has_next_upgrade_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuperWeaponProto::clear_next_upgrade_data() {
  if (next_upgrade_data_ != NULL) next_upgrade_data_->::app::message::UpgradeProto::Clear();
  clear_has_next_upgrade_data();
}
inline const ::app::message::UpgradeProto& SuperWeaponProto::next_upgrade_data() const {
  return next_upgrade_data_ != NULL ? *next_upgrade_data_ : *default_instance_->next_upgrade_data_;
}
inline ::app::message::UpgradeProto* SuperWeaponProto::mutable_next_upgrade_data() {
  set_has_next_upgrade_data();
  if (next_upgrade_data_ == NULL) next_upgrade_data_ = new ::app::message::UpgradeProto;
  return next_upgrade_data_;
}
inline ::app::message::UpgradeProto* SuperWeaponProto::release_next_upgrade_data() {
  clear_has_next_upgrade_data();
  ::app::message::UpgradeProto* temp = next_upgrade_data_;
  next_upgrade_data_ = NULL;
  return temp;
}
inline void SuperWeaponProto::set_allocated_next_upgrade_data(::app::message::UpgradeProto* next_upgrade_data) {
  delete next_upgrade_data_;
  next_upgrade_data_ = next_upgrade_data;
  if (next_upgrade_data) {
    set_has_next_upgrade_data();
  } else {
    clear_has_next_upgrade_data();
  }
}

// optional bool has_unlock_soul = 7;
inline bool SuperWeaponProto::has_has_unlock_soul() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuperWeaponProto::set_has_has_unlock_soul() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuperWeaponProto::clear_has_has_unlock_soul() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuperWeaponProto::clear_has_unlock_soul() {
  has_unlock_soul_ = false;
  clear_has_has_unlock_soul();
}
inline bool SuperWeaponProto::has_unlock_soul() const {
  return has_unlock_soul_;
}
inline void SuperWeaponProto::set_has_unlock_soul(bool value) {
  set_has_has_unlock_soul();
  has_unlock_soul_ = value;
}

// optional bool has_unlock_weapon = 8;
inline bool SuperWeaponProto::has_has_unlock_weapon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuperWeaponProto::set_has_has_unlock_weapon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuperWeaponProto::clear_has_has_unlock_weapon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuperWeaponProto::clear_has_unlock_weapon() {
  has_unlock_weapon_ = false;
  clear_has_has_unlock_weapon();
}
inline bool SuperWeaponProto::has_unlock_weapon() const {
  return has_unlock_weapon_;
}
inline void SuperWeaponProto::set_has_unlock_weapon(bool value) {
  set_has_has_unlock_weapon();
  has_unlock_weapon_ = value;
}

// optional bool has_unlock_magic_spell = 9;
inline bool SuperWeaponProto::has_has_unlock_magic_spell() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SuperWeaponProto::set_has_has_unlock_magic_spell() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SuperWeaponProto::clear_has_has_unlock_magic_spell() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SuperWeaponProto::clear_has_unlock_magic_spell() {
  has_unlock_magic_spell_ = false;
  clear_has_has_unlock_magic_spell();
}
inline bool SuperWeaponProto::has_unlock_magic_spell() const {
  return has_unlock_magic_spell_;
}
inline void SuperWeaponProto::set_has_unlock_magic_spell(bool value) {
  set_has_has_unlock_magic_spell();
  has_unlock_magic_spell_ = value;
}

// optional .app.message.SpriteStatProto added_stat = 10;
inline bool SuperWeaponProto::has_added_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SuperWeaponProto::set_has_added_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SuperWeaponProto::clear_has_added_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SuperWeaponProto::clear_added_stat() {
  if (added_stat_ != NULL) added_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_added_stat();
}
inline const ::app::message::SpriteStatProto& SuperWeaponProto::added_stat() const {
  return added_stat_ != NULL ? *added_stat_ : *default_instance_->added_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponProto::mutable_added_stat() {
  set_has_added_stat();
  if (added_stat_ == NULL) added_stat_ = new ::app::message::SpriteStatProto;
  return added_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponProto::release_added_stat() {
  clear_has_added_stat();
  ::app::message::SpriteStatProto* temp = added_stat_;
  added_stat_ = NULL;
  return temp;
}
inline void SuperWeaponProto::set_allocated_added_stat(::app::message::SpriteStatProto* added_stat) {
  delete added_stat_;
  added_stat_ = added_stat;
  if (added_stat) {
    set_has_added_stat();
  } else {
    clear_has_added_stat();
  }
}

// optional .app.message.SpriteStatProto not_saved_added_stat = 11;
inline bool SuperWeaponProto::has_not_saved_added_stat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SuperWeaponProto::set_has_not_saved_added_stat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SuperWeaponProto::clear_has_not_saved_added_stat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SuperWeaponProto::clear_not_saved_added_stat() {
  if (not_saved_added_stat_ != NULL) not_saved_added_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_not_saved_added_stat();
}
inline const ::app::message::SpriteStatProto& SuperWeaponProto::not_saved_added_stat() const {
  return not_saved_added_stat_ != NULL ? *not_saved_added_stat_ : *default_instance_->not_saved_added_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponProto::mutable_not_saved_added_stat() {
  set_has_not_saved_added_stat();
  if (not_saved_added_stat_ == NULL) not_saved_added_stat_ = new ::app::message::SpriteStatProto;
  return not_saved_added_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponProto::release_not_saved_added_stat() {
  clear_has_not_saved_added_stat();
  ::app::message::SpriteStatProto* temp = not_saved_added_stat_;
  not_saved_added_stat_ = NULL;
  return temp;
}
inline void SuperWeaponProto::set_allocated_not_saved_added_stat(::app::message::SpriteStatProto* not_saved_added_stat) {
  delete not_saved_added_stat_;
  not_saved_added_stat_ = not_saved_added_stat;
  if (not_saved_added_stat) {
    set_has_not_saved_added_stat();
  } else {
    clear_has_not_saved_added_stat();
  }
}

// repeated bool has_unlock_weapon_gem = 12;
inline int SuperWeaponProto::has_unlock_weapon_gem_size() const {
  return has_unlock_weapon_gem_.size();
}
inline void SuperWeaponProto::clear_has_unlock_weapon_gem() {
  has_unlock_weapon_gem_.Clear();
}
inline bool SuperWeaponProto::has_unlock_weapon_gem(int index) const {
  return has_unlock_weapon_gem_.Get(index);
}
inline void SuperWeaponProto::set_has_unlock_weapon_gem(int index, bool value) {
  has_unlock_weapon_gem_.Set(index, value);
}
inline void SuperWeaponProto::add_has_unlock_weapon_gem(bool value) {
  has_unlock_weapon_gem_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
SuperWeaponProto::has_unlock_weapon_gem() const {
  return has_unlock_weapon_gem_;
}
inline ::google::protobuf::RepeatedField< bool >*
SuperWeaponProto::mutable_has_unlock_weapon_gem() {
  return &has_unlock_weapon_gem_;
}

// repeated int32 weapon_gem_level = 13;
inline int SuperWeaponProto::weapon_gem_level_size() const {
  return weapon_gem_level_.size();
}
inline void SuperWeaponProto::clear_weapon_gem_level() {
  weapon_gem_level_.Clear();
}
inline ::google::protobuf::int32 SuperWeaponProto::weapon_gem_level(int index) const {
  return weapon_gem_level_.Get(index);
}
inline void SuperWeaponProto::set_weapon_gem_level(int index, ::google::protobuf::int32 value) {
  weapon_gem_level_.Set(index, value);
}
inline void SuperWeaponProto::add_weapon_gem_level(::google::protobuf::int32 value) {
  weapon_gem_level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SuperWeaponProto::weapon_gem_level() const {
  return weapon_gem_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SuperWeaponProto::mutable_weapon_gem_level() {
  return &weapon_gem_level_;
}

// repeated bool weapon_gem_binded = 14;
inline int SuperWeaponProto::weapon_gem_binded_size() const {
  return weapon_gem_binded_.size();
}
inline void SuperWeaponProto::clear_weapon_gem_binded() {
  weapon_gem_binded_.Clear();
}
inline bool SuperWeaponProto::weapon_gem_binded(int index) const {
  return weapon_gem_binded_.Get(index);
}
inline void SuperWeaponProto::set_weapon_gem_binded(int index, bool value) {
  weapon_gem_binded_.Set(index, value);
}
inline void SuperWeaponProto::add_weapon_gem_binded(bool value) {
  weapon_gem_binded_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
SuperWeaponProto::weapon_gem_binded() const {
  return weapon_gem_binded_;
}
inline ::google::protobuf::RepeatedField< bool >*
SuperWeaponProto::mutable_weapon_gem_binded() {
  return &weapon_gem_binded_;
}

// repeated int32 super_upgrade_pos = 21;
inline int SuperWeaponProto::super_upgrade_pos_size() const {
  return super_upgrade_pos_.size();
}
inline void SuperWeaponProto::clear_super_upgrade_pos() {
  super_upgrade_pos_.Clear();
}
inline ::google::protobuf::int32 SuperWeaponProto::super_upgrade_pos(int index) const {
  return super_upgrade_pos_.Get(index);
}
inline void SuperWeaponProto::set_super_upgrade_pos(int index, ::google::protobuf::int32 value) {
  super_upgrade_pos_.Set(index, value);
}
inline void SuperWeaponProto::add_super_upgrade_pos(::google::protobuf::int32 value) {
  super_upgrade_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SuperWeaponProto::super_upgrade_pos() const {
  return super_upgrade_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SuperWeaponProto::mutable_super_upgrade_pos() {
  return &super_upgrade_pos_;
}

// optional .app.message.SpriteStatProto super_upgrade_stat = 22;
inline bool SuperWeaponProto::has_super_upgrade_stat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SuperWeaponProto::set_has_super_upgrade_stat() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SuperWeaponProto::clear_has_super_upgrade_stat() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SuperWeaponProto::clear_super_upgrade_stat() {
  if (super_upgrade_stat_ != NULL) super_upgrade_stat_->::app::message::SpriteStatProto::Clear();
  clear_has_super_upgrade_stat();
}
inline const ::app::message::SpriteStatProto& SuperWeaponProto::super_upgrade_stat() const {
  return super_upgrade_stat_ != NULL ? *super_upgrade_stat_ : *default_instance_->super_upgrade_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponProto::mutable_super_upgrade_stat() {
  set_has_super_upgrade_stat();
  if (super_upgrade_stat_ == NULL) super_upgrade_stat_ = new ::app::message::SpriteStatProto;
  return super_upgrade_stat_;
}
inline ::app::message::SpriteStatProto* SuperWeaponProto::release_super_upgrade_stat() {
  clear_has_super_upgrade_stat();
  ::app::message::SpriteStatProto* temp = super_upgrade_stat_;
  super_upgrade_stat_ = NULL;
  return temp;
}
inline void SuperWeaponProto::set_allocated_super_upgrade_stat(::app::message::SpriteStatProto* super_upgrade_stat) {
  delete super_upgrade_stat_;
  super_upgrade_stat_ = super_upgrade_stat;
  if (super_upgrade_stat) {
    set_has_super_upgrade_stat();
  } else {
    clear_has_super_upgrade_stat();
  }
}

// -------------------------------------------------------------------

// StoryDungeonStatProto

// optional int32 dungeon_id = 1;
inline bool StoryDungeonStatProto::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoryDungeonStatProto::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoryDungeonStatProto::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoryDungeonStatProto::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 StoryDungeonStatProto::dungeon_id() const {
  return dungeon_id_;
}
inline void StoryDungeonStatProto::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
}

// optional bool is_finished_today = 2;
inline bool StoryDungeonStatProto::has_is_finished_today() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoryDungeonStatProto::set_has_is_finished_today() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoryDungeonStatProto::clear_has_is_finished_today() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoryDungeonStatProto::clear_is_finished_today() {
  is_finished_today_ = false;
  clear_has_is_finished_today();
}
inline bool StoryDungeonStatProto::is_finished_today() const {
  return is_finished_today_;
}
inline void StoryDungeonStatProto::set_is_finished_today(bool value) {
  set_has_is_finished_today();
  is_finished_today_ = value;
}

// optional int32 fastest_record = 3;
inline bool StoryDungeonStatProto::has_fastest_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoryDungeonStatProto::set_has_fastest_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoryDungeonStatProto::clear_has_fastest_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoryDungeonStatProto::clear_fastest_record() {
  fastest_record_ = 0;
  clear_has_fastest_record();
}
inline ::google::protobuf::int32 StoryDungeonStatProto::fastest_record() const {
  return fastest_record_;
}
inline void StoryDungeonStatProto::set_fastest_record(::google::protobuf::int32 value) {
  set_has_fastest_record();
  fastest_record_ = value;
}

// optional bool can_not_enter_today = 4;
inline bool StoryDungeonStatProto::has_can_not_enter_today() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoryDungeonStatProto::set_has_can_not_enter_today() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoryDungeonStatProto::clear_has_can_not_enter_today() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoryDungeonStatProto::clear_can_not_enter_today() {
  can_not_enter_today_ = false;
  clear_has_can_not_enter_today();
}
inline bool StoryDungeonStatProto::can_not_enter_today() const {
  return can_not_enter_today_;
}
inline void StoryDungeonStatProto::set_can_not_enter_today(bool value) {
  set_has_can_not_enter_today();
  can_not_enter_today_ = value;
}

// -------------------------------------------------------------------

// StoryDungeonFinishStatProto

// optional int32 total_time = 1;
inline bool StoryDungeonFinishStatProto::has_total_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoryDungeonFinishStatProto::set_has_total_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoryDungeonFinishStatProto::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoryDungeonFinishStatProto::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline ::google::protobuf::int32 StoryDungeonFinishStatProto::total_time() const {
  return total_time_;
}
inline void StoryDungeonFinishStatProto::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
}

// optional int32 dead_count = 2;
inline bool StoryDungeonFinishStatProto::has_dead_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoryDungeonFinishStatProto::set_has_dead_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoryDungeonFinishStatProto::clear_has_dead_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoryDungeonFinishStatProto::clear_dead_count() {
  dead_count_ = 0;
  clear_has_dead_count();
}
inline ::google::protobuf::int32 StoryDungeonFinishStatProto::dead_count() const {
  return dead_count_;
}
inline void StoryDungeonFinishStatProto::set_dead_count(::google::protobuf::int32 value) {
  set_has_dead_count();
  dead_count_ = value;
}

// optional int32 monster_exp = 3;
inline bool StoryDungeonFinishStatProto::has_monster_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoryDungeonFinishStatProto::set_has_monster_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoryDungeonFinishStatProto::clear_has_monster_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoryDungeonFinishStatProto::clear_monster_exp() {
  monster_exp_ = 0;
  clear_has_monster_exp();
}
inline ::google::protobuf::int32 StoryDungeonFinishStatProto::monster_exp() const {
  return monster_exp_;
}
inline void StoryDungeonFinishStatProto::set_monster_exp(::google::protobuf::int32 value) {
  set_has_monster_exp();
  monster_exp_ = value;
}

// optional int32 score = 4;
inline bool StoryDungeonFinishStatProto::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoryDungeonFinishStatProto::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoryDungeonFinishStatProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoryDungeonFinishStatProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 StoryDungeonFinishStatProto::score() const {
  return score_;
}
inline void StoryDungeonFinishStatProto::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 total_time_faster = 7;
inline bool StoryDungeonFinishStatProto::has_total_time_faster() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoryDungeonFinishStatProto::set_has_total_time_faster() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoryDungeonFinishStatProto::clear_has_total_time_faster() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoryDungeonFinishStatProto::clear_total_time_faster() {
  total_time_faster_ = 0;
  clear_has_total_time_faster();
}
inline ::google::protobuf::int32 StoryDungeonFinishStatProto::total_time_faster() const {
  return total_time_faster_;
}
inline void StoryDungeonFinishStatProto::set_total_time_faster(::google::protobuf::int32 value) {
  set_has_total_time_faster();
  total_time_faster_ = value;
}

// repeated .app.message.GoodsWrapperProto score_s_prize = 5;
inline int StoryDungeonFinishStatProto::score_s_prize_size() const {
  return score_s_prize_.size();
}
inline void StoryDungeonFinishStatProto::clear_score_s_prize() {
  score_s_prize_.Clear();
}
inline const ::app::message::GoodsWrapperProto& StoryDungeonFinishStatProto::score_s_prize(int index) const {
  return score_s_prize_.Get(index);
}
inline ::app::message::GoodsWrapperProto* StoryDungeonFinishStatProto::mutable_score_s_prize(int index) {
  return score_s_prize_.Mutable(index);
}
inline ::app::message::GoodsWrapperProto* StoryDungeonFinishStatProto::add_score_s_prize() {
  return score_s_prize_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >&
StoryDungeonFinishStatProto::score_s_prize() const {
  return score_s_prize_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >*
StoryDungeonFinishStatProto::mutable_score_s_prize() {
  return &score_s_prize_;
}

// repeated .app.message.GoodsWrapperProto vip_prize = 6;
inline int StoryDungeonFinishStatProto::vip_prize_size() const {
  return vip_prize_.size();
}
inline void StoryDungeonFinishStatProto::clear_vip_prize() {
  vip_prize_.Clear();
}
inline const ::app::message::GoodsWrapperProto& StoryDungeonFinishStatProto::vip_prize(int index) const {
  return vip_prize_.Get(index);
}
inline ::app::message::GoodsWrapperProto* StoryDungeonFinishStatProto::mutable_vip_prize(int index) {
  return vip_prize_.Mutable(index);
}
inline ::app::message::GoodsWrapperProto* StoryDungeonFinishStatProto::add_vip_prize() {
  return vip_prize_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >&
StoryDungeonFinishStatProto::vip_prize() const {
  return vip_prize_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::GoodsWrapperProto >*
StoryDungeonFinishStatProto::mutable_vip_prize() {
  return &vip_prize_;
}

// -------------------------------------------------------------------

// StoryDungeonCollectablePrizeProto

// optional int32 dungeon_id = 1;
inline bool StoryDungeonCollectablePrizeProto::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoryDungeonCollectablePrizeProto::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoryDungeonCollectablePrizeProto::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoryDungeonCollectablePrizeProto::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 StoryDungeonCollectablePrizeProto::dungeon_id() const {
  return dungeon_id_;
}
inline void StoryDungeonCollectablePrizeProto::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
}

// optional bool no_score_s_prize = 2;
inline bool StoryDungeonCollectablePrizeProto::has_no_score_s_prize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoryDungeonCollectablePrizeProto::set_has_no_score_s_prize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoryDungeonCollectablePrizeProto::clear_has_no_score_s_prize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoryDungeonCollectablePrizeProto::clear_no_score_s_prize() {
  no_score_s_prize_ = false;
  clear_has_no_score_s_prize();
}
inline bool StoryDungeonCollectablePrizeProto::no_score_s_prize() const {
  return no_score_s_prize_;
}
inline void StoryDungeonCollectablePrizeProto::set_no_score_s_prize(bool value) {
  set_has_no_score_s_prize();
  no_score_s_prize_ = value;
}

// optional bool has_first_pass_prize = 3;
inline bool StoryDungeonCollectablePrizeProto::has_has_first_pass_prize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoryDungeonCollectablePrizeProto::set_has_has_first_pass_prize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoryDungeonCollectablePrizeProto::clear_has_has_first_pass_prize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoryDungeonCollectablePrizeProto::clear_has_first_pass_prize() {
  has_first_pass_prize_ = false;
  clear_has_has_first_pass_prize();
}
inline bool StoryDungeonCollectablePrizeProto::has_first_pass_prize() const {
  return has_first_pass_prize_;
}
inline void StoryDungeonCollectablePrizeProto::set_has_first_pass_prize(bool value) {
  set_has_has_first_pass_prize();
  has_first_pass_prize_ = value;
}

// optional int64 expire_time = 4;
inline bool StoryDungeonCollectablePrizeProto::has_expire_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoryDungeonCollectablePrizeProto::set_has_expire_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoryDungeonCollectablePrizeProto::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoryDungeonCollectablePrizeProto::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 StoryDungeonCollectablePrizeProto::expire_time() const {
  return expire_time_;
}
inline void StoryDungeonCollectablePrizeProto::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional bytes randomed_s_prize = 5;
inline bool StoryDungeonCollectablePrizeProto::has_randomed_s_prize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoryDungeonCollectablePrizeProto::set_has_randomed_s_prize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoryDungeonCollectablePrizeProto::clear_has_randomed_s_prize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoryDungeonCollectablePrizeProto::clear_randomed_s_prize() {
  if (randomed_s_prize_ != &::google::protobuf::internal::kEmptyString) {
    randomed_s_prize_->clear();
  }
  clear_has_randomed_s_prize();
}
inline const ::std::string& StoryDungeonCollectablePrizeProto::randomed_s_prize() const {
  return *randomed_s_prize_;
}
inline void StoryDungeonCollectablePrizeProto::set_randomed_s_prize(const ::std::string& value) {
  set_has_randomed_s_prize();
  if (randomed_s_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_s_prize_ = new ::std::string;
  }
  randomed_s_prize_->assign(value);
}
inline void StoryDungeonCollectablePrizeProto::set_randomed_s_prize(const char* value) {
  set_has_randomed_s_prize();
  if (randomed_s_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_s_prize_ = new ::std::string;
  }
  randomed_s_prize_->assign(value);
}
inline void StoryDungeonCollectablePrizeProto::set_randomed_s_prize(const void* value, size_t size) {
  set_has_randomed_s_prize();
  if (randomed_s_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_s_prize_ = new ::std::string;
  }
  randomed_s_prize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoryDungeonCollectablePrizeProto::mutable_randomed_s_prize() {
  set_has_randomed_s_prize();
  if (randomed_s_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_s_prize_ = new ::std::string;
  }
  return randomed_s_prize_;
}
inline ::std::string* StoryDungeonCollectablePrizeProto::release_randomed_s_prize() {
  clear_has_randomed_s_prize();
  if (randomed_s_prize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = randomed_s_prize_;
    randomed_s_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoryDungeonCollectablePrizeProto::set_allocated_randomed_s_prize(::std::string* randomed_s_prize) {
  if (randomed_s_prize_ != &::google::protobuf::internal::kEmptyString) {
    delete randomed_s_prize_;
  }
  if (randomed_s_prize) {
    set_has_randomed_s_prize();
    randomed_s_prize_ = randomed_s_prize;
  } else {
    clear_has_randomed_s_prize();
    randomed_s_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes randomed_vip_prize = 6;
inline bool StoryDungeonCollectablePrizeProto::has_randomed_vip_prize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoryDungeonCollectablePrizeProto::set_has_randomed_vip_prize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StoryDungeonCollectablePrizeProto::clear_has_randomed_vip_prize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StoryDungeonCollectablePrizeProto::clear_randomed_vip_prize() {
  if (randomed_vip_prize_ != &::google::protobuf::internal::kEmptyString) {
    randomed_vip_prize_->clear();
  }
  clear_has_randomed_vip_prize();
}
inline const ::std::string& StoryDungeonCollectablePrizeProto::randomed_vip_prize() const {
  return *randomed_vip_prize_;
}
inline void StoryDungeonCollectablePrizeProto::set_randomed_vip_prize(const ::std::string& value) {
  set_has_randomed_vip_prize();
  if (randomed_vip_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_vip_prize_ = new ::std::string;
  }
  randomed_vip_prize_->assign(value);
}
inline void StoryDungeonCollectablePrizeProto::set_randomed_vip_prize(const char* value) {
  set_has_randomed_vip_prize();
  if (randomed_vip_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_vip_prize_ = new ::std::string;
  }
  randomed_vip_prize_->assign(value);
}
inline void StoryDungeonCollectablePrizeProto::set_randomed_vip_prize(const void* value, size_t size) {
  set_has_randomed_vip_prize();
  if (randomed_vip_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_vip_prize_ = new ::std::string;
  }
  randomed_vip_prize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoryDungeonCollectablePrizeProto::mutable_randomed_vip_prize() {
  set_has_randomed_vip_prize();
  if (randomed_vip_prize_ == &::google::protobuf::internal::kEmptyString) {
    randomed_vip_prize_ = new ::std::string;
  }
  return randomed_vip_prize_;
}
inline ::std::string* StoryDungeonCollectablePrizeProto::release_randomed_vip_prize() {
  clear_has_randomed_vip_prize();
  if (randomed_vip_prize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = randomed_vip_prize_;
    randomed_vip_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoryDungeonCollectablePrizeProto::set_allocated_randomed_vip_prize(::std::string* randomed_vip_prize) {
  if (randomed_vip_prize_ != &::google::protobuf::internal::kEmptyString) {
    delete randomed_vip_prize_;
  }
  if (randomed_vip_prize) {
    set_has_randomed_vip_prize();
    randomed_vip_prize_ = randomed_vip_prize;
  } else {
    clear_has_randomed_vip_prize();
    randomed_vip_prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HeroMarriageProto

// optional int64 target_id = 1;
inline bool HeroMarriageProto::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroMarriageProto::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroMarriageProto::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroMarriageProto::clear_target_id() {
  target_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::int64 HeroMarriageProto::target_id() const {
  return target_id_;
}
inline void HeroMarriageProto::set_target_id(::google::protobuf::int64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional bytes target_name = 2;
inline bool HeroMarriageProto::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroMarriageProto::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroMarriageProto::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroMarriageProto::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& HeroMarriageProto::target_name() const {
  return *target_name_;
}
inline void HeroMarriageProto::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void HeroMarriageProto::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void HeroMarriageProto::set_target_name(const void* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeroMarriageProto::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* HeroMarriageProto::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeroMarriageProto::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 weapon_level = 3;
inline bool HeroMarriageProto::has_weapon_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroMarriageProto::set_has_weapon_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroMarriageProto::clear_has_weapon_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroMarriageProto::clear_weapon_level() {
  weapon_level_ = 0;
  clear_has_weapon_level();
}
inline ::google::protobuf::int32 HeroMarriageProto::weapon_level() const {
  return weapon_level_;
}
inline void HeroMarriageProto::set_weapon_level(::google::protobuf::int32 value) {
  set_has_weapon_level();
  weapon_level_ = value;
}

// optional int32 hao_gan = 4;
inline bool HeroMarriageProto::has_hao_gan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroMarriageProto::set_has_hao_gan() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroMarriageProto::clear_has_hao_gan() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroMarriageProto::clear_hao_gan() {
  hao_gan_ = 0;
  clear_has_hao_gan();
}
inline ::google::protobuf::int32 HeroMarriageProto::hao_gan() const {
  return hao_gan_;
}
inline void HeroMarriageProto::set_hao_gan(::google::protobuf::int32 value) {
  set_has_hao_gan();
  hao_gan_ = value;
}

// optional int32 marriage_goods_id = 5;
inline bool HeroMarriageProto::has_marriage_goods_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroMarriageProto::set_has_marriage_goods_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroMarriageProto::clear_has_marriage_goods_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroMarriageProto::clear_marriage_goods_id() {
  marriage_goods_id_ = 0;
  clear_has_marriage_goods_id();
}
inline ::google::protobuf::int32 HeroMarriageProto::marriage_goods_id() const {
  return marriage_goods_id_;
}
inline void HeroMarriageProto::set_marriage_goods_id(::google::protobuf::int32 value) {
  set_has_marriage_goods_id();
  marriage_goods_id_ = value;
}

// optional int64 marriage_time = 6;
inline bool HeroMarriageProto::has_marriage_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeroMarriageProto::set_has_marriage_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeroMarriageProto::clear_has_marriage_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeroMarriageProto::clear_marriage_time() {
  marriage_time_ = GOOGLE_LONGLONG(0);
  clear_has_marriage_time();
}
inline ::google::protobuf::int64 HeroMarriageProto::marriage_time() const {
  return marriage_time_;
}
inline void HeroMarriageProto::set_marriage_time(::google::protobuf::int64 value) {
  set_has_marriage_time();
  marriage_time_ = value;
}

// optional int32 hao_gan_today = 7;
inline bool HeroMarriageProto::has_hao_gan_today() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeroMarriageProto::set_has_hao_gan_today() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeroMarriageProto::clear_has_hao_gan_today() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeroMarriageProto::clear_hao_gan_today() {
  hao_gan_today_ = 0;
  clear_has_hao_gan_today();
}
inline ::google::protobuf::int32 HeroMarriageProto::hao_gan_today() const {
  return hao_gan_today_;
}
inline void HeroMarriageProto::set_hao_gan_today(::google::protobuf::int32 value) {
  set_has_hao_gan_today();
  hao_gan_today_ = value;
}

// optional int32 target_race = 8;
inline bool HeroMarriageProto::has_target_race() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeroMarriageProto::set_has_target_race() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeroMarriageProto::clear_has_target_race() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeroMarriageProto::clear_target_race() {
  target_race_ = 0;
  clear_has_target_race();
}
inline ::google::protobuf::int32 HeroMarriageProto::target_race() const {
  return target_race_;
}
inline void HeroMarriageProto::set_target_race(::google::protobuf::int32 value) {
  set_has_target_race();
  target_race_ = value;
}

// optional bool lao_chu_nv = 9;
inline bool HeroMarriageProto::has_lao_chu_nv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeroMarriageProto::set_has_lao_chu_nv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HeroMarriageProto::clear_has_lao_chu_nv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HeroMarriageProto::clear_lao_chu_nv() {
  lao_chu_nv_ = false;
  clear_has_lao_chu_nv();
}
inline bool HeroMarriageProto::lao_chu_nv() const {
  return lao_chu_nv_;
}
inline void HeroMarriageProto::set_lao_chu_nv(bool value) {
  set_has_lao_chu_nv();
  lao_chu_nv_ = value;
}

// optional int64 wedding_time = 10;
inline bool HeroMarriageProto::has_wedding_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeroMarriageProto::set_has_wedding_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HeroMarriageProto::clear_has_wedding_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HeroMarriageProto::clear_wedding_time() {
  wedding_time_ = GOOGLE_LONGLONG(0);
  clear_has_wedding_time();
}
inline ::google::protobuf::int64 HeroMarriageProto::wedding_time() const {
  return wedding_time_;
}
inline void HeroMarriageProto::set_wedding_time(::google::protobuf::int64 value) {
  set_has_wedding_time();
  wedding_time_ = value;
}

// optional int32 couple_dungeon_times = 11;
inline bool HeroMarriageProto::has_couple_dungeon_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HeroMarriageProto::set_has_couple_dungeon_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HeroMarriageProto::clear_has_couple_dungeon_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HeroMarriageProto::clear_couple_dungeon_times() {
  couple_dungeon_times_ = 0;
  clear_has_couple_dungeon_times();
}
inline ::google::protobuf::int32 HeroMarriageProto::couple_dungeon_times() const {
  return couple_dungeon_times_;
}
inline void HeroMarriageProto::set_couple_dungeon_times(::google::protobuf::int32 value) {
  set_has_couple_dungeon_times();
  couple_dungeon_times_ = value;
}

// optional int32 huanhua_count = 12;
inline bool HeroMarriageProto::has_huanhua_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HeroMarriageProto::set_has_huanhua_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HeroMarriageProto::clear_has_huanhua_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HeroMarriageProto::clear_huanhua_count() {
  huanhua_count_ = 0;
  clear_has_huanhua_count();
}
inline ::google::protobuf::int32 HeroMarriageProto::huanhua_count() const {
  return huanhua_count_;
}
inline void HeroMarriageProto::set_huanhua_count(::google::protobuf::int32 value) {
  set_has_huanhua_count();
  huanhua_count_ = value;
}

// optional bool is_hide_huan_hua = 13;
inline bool HeroMarriageProto::has_is_hide_huan_hua() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HeroMarriageProto::set_has_is_hide_huan_hua() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HeroMarriageProto::clear_has_is_hide_huan_hua() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HeroMarriageProto::clear_is_hide_huan_hua() {
  is_hide_huan_hua_ = false;
  clear_has_is_hide_huan_hua();
}
inline bool HeroMarriageProto::is_hide_huan_hua() const {
  return is_hide_huan_hua_;
}
inline void HeroMarriageProto::set_is_hide_huan_hua(bool value) {
  set_has_is_hide_huan_hua();
  is_hide_huan_hua_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 25;
inline bool HeroMarriageProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HeroMarriageProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HeroMarriageProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HeroMarriageProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 HeroMarriageProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void HeroMarriageProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 26;
inline bool HeroMarriageProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HeroMarriageProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HeroMarriageProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HeroMarriageProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 HeroMarriageProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void HeroMarriageProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// optional bool daily_prize_collected = 27;
inline bool HeroMarriageProto::has_daily_prize_collected() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HeroMarriageProto::set_has_daily_prize_collected() {
  _has_bits_[0] |= 0x00008000u;
}
inline void HeroMarriageProto::clear_has_daily_prize_collected() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void HeroMarriageProto::clear_daily_prize_collected() {
  daily_prize_collected_ = false;
  clear_has_daily_prize_collected();
}
inline bool HeroMarriageProto::daily_prize_collected() const {
  return daily_prize_collected_;
}
inline void HeroMarriageProto::set_daily_prize_collected(bool value) {
  set_has_daily_prize_collected();
  daily_prize_collected_ = value;
}

// repeated int32 collectable_gift_id = 21;
inline int HeroMarriageProto::collectable_gift_id_size() const {
  return collectable_gift_id_.size();
}
inline void HeroMarriageProto::clear_collectable_gift_id() {
  collectable_gift_id_.Clear();
}
inline ::google::protobuf::int32 HeroMarriageProto::collectable_gift_id(int index) const {
  return collectable_gift_id_.Get(index);
}
inline void HeroMarriageProto::set_collectable_gift_id(int index, ::google::protobuf::int32 value) {
  collectable_gift_id_.Set(index, value);
}
inline void HeroMarriageProto::add_collectable_gift_id(::google::protobuf::int32 value) {
  collectable_gift_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroMarriageProto::collectable_gift_id() const {
  return collectable_gift_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroMarriageProto::mutable_collectable_gift_id() {
  return &collectable_gift_id_;
}

// repeated int32 collectable_gift_count = 22;
inline int HeroMarriageProto::collectable_gift_count_size() const {
  return collectable_gift_count_.size();
}
inline void HeroMarriageProto::clear_collectable_gift_count() {
  collectable_gift_count_.Clear();
}
inline ::google::protobuf::int32 HeroMarriageProto::collectable_gift_count(int index) const {
  return collectable_gift_count_.Get(index);
}
inline void HeroMarriageProto::set_collectable_gift_count(int index, ::google::protobuf::int32 value) {
  collectable_gift_count_.Set(index, value);
}
inline void HeroMarriageProto::add_collectable_gift_count(::google::protobuf::int32 value) {
  collectable_gift_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroMarriageProto::collectable_gift_count() const {
  return collectable_gift_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroMarriageProto::mutable_collectable_gift_count() {
  return &collectable_gift_count_;
}

// optional int64 next_check_both_online_add_hao_gan_time = 23;
inline bool HeroMarriageProto::has_next_check_both_online_add_hao_gan_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void HeroMarriageProto::set_has_next_check_both_online_add_hao_gan_time() {
  _has_bits_[0] |= 0x00040000u;
}
inline void HeroMarriageProto::clear_has_next_check_both_online_add_hao_gan_time() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void HeroMarriageProto::clear_next_check_both_online_add_hao_gan_time() {
  next_check_both_online_add_hao_gan_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_check_both_online_add_hao_gan_time();
}
inline ::google::protobuf::int64 HeroMarriageProto::next_check_both_online_add_hao_gan_time() const {
  return next_check_both_online_add_hao_gan_time_;
}
inline void HeroMarriageProto::set_next_check_both_online_add_hao_gan_time(::google::protobuf::int64 value) {
  set_has_next_check_both_online_add_hao_gan_time();
  next_check_both_online_add_hao_gan_time_ = value;
}

// optional int32 total_hao_gan = 24;
inline bool HeroMarriageProto::has_total_hao_gan() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void HeroMarriageProto::set_has_total_hao_gan() {
  _has_bits_[0] |= 0x00080000u;
}
inline void HeroMarriageProto::clear_has_total_hao_gan() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void HeroMarriageProto::clear_total_hao_gan() {
  total_hao_gan_ = 0;
  clear_has_total_hao_gan();
}
inline ::google::protobuf::int32 HeroMarriageProto::total_hao_gan() const {
  return total_hao_gan_;
}
inline void HeroMarriageProto::set_total_hao_gan(::google::protobuf::int32 value) {
  set_has_total_hao_gan();
  total_hao_gan_ = value;
}

// -------------------------------------------------------------------

// MarriageStorageProto

// optional int32 size = 1;
inline bool MarriageStorageProto::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarriageStorageProto::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarriageStorageProto::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarriageStorageProto::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 MarriageStorageProto::size() const {
  return size_;
}
inline void MarriageStorageProto::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// repeated int32 pos_list = 2;
inline int MarriageStorageProto::pos_list_size() const {
  return pos_list_.size();
}
inline void MarriageStorageProto::clear_pos_list() {
  pos_list_.Clear();
}
inline ::google::protobuf::int32 MarriageStorageProto::pos_list(int index) const {
  return pos_list_.Get(index);
}
inline void MarriageStorageProto::set_pos_list(int index, ::google::protobuf::int32 value) {
  pos_list_.Set(index, value);
}
inline void MarriageStorageProto::add_pos_list(::google::protobuf::int32 value) {
  pos_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarriageStorageProto::pos_list() const {
  return pos_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarriageStorageProto::mutable_pos_list() {
  return &pos_list_;
}

// repeated bytes goods_data_list = 3;
inline int MarriageStorageProto::goods_data_list_size() const {
  return goods_data_list_.size();
}
inline void MarriageStorageProto::clear_goods_data_list() {
  goods_data_list_.Clear();
}
inline const ::std::string& MarriageStorageProto::goods_data_list(int index) const {
  return goods_data_list_.Get(index);
}
inline ::std::string* MarriageStorageProto::mutable_goods_data_list(int index) {
  return goods_data_list_.Mutable(index);
}
inline void MarriageStorageProto::set_goods_data_list(int index, const ::std::string& value) {
  goods_data_list_.Mutable(index)->assign(value);
}
inline void MarriageStorageProto::set_goods_data_list(int index, const char* value) {
  goods_data_list_.Mutable(index)->assign(value);
}
inline void MarriageStorageProto::set_goods_data_list(int index, const void* value, size_t size) {
  goods_data_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarriageStorageProto::add_goods_data_list() {
  return goods_data_list_.Add();
}
inline void MarriageStorageProto::add_goods_data_list(const ::std::string& value) {
  goods_data_list_.Add()->assign(value);
}
inline void MarriageStorageProto::add_goods_data_list(const char* value) {
  goods_data_list_.Add()->assign(value);
}
inline void MarriageStorageProto::add_goods_data_list(const void* value, size_t size) {
  goods_data_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MarriageStorageProto::goods_data_list() const {
  return goods_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MarriageStorageProto::mutable_goods_data_list() {
  return &goods_data_list_;
}

// repeated bytes goods_list = 4;
inline int MarriageStorageProto::goods_list_size() const {
  return goods_list_.size();
}
inline void MarriageStorageProto::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::std::string& MarriageStorageProto::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::std::string* MarriageStorageProto::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline void MarriageStorageProto::set_goods_list(int index, const ::std::string& value) {
  goods_list_.Mutable(index)->assign(value);
}
inline void MarriageStorageProto::set_goods_list(int index, const char* value) {
  goods_list_.Mutable(index)->assign(value);
}
inline void MarriageStorageProto::set_goods_list(int index, const void* value, size_t size) {
  goods_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarriageStorageProto::add_goods_list() {
  return goods_list_.Add();
}
inline void MarriageStorageProto::add_goods_list(const ::std::string& value) {
  goods_list_.Add()->assign(value);
}
inline void MarriageStorageProto::add_goods_list(const char* value) {
  goods_list_.Add()->assign(value);
}
inline void MarriageStorageProto::add_goods_list(const void* value, size_t size) {
  goods_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MarriageStorageProto::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MarriageStorageProto::mutable_goods_list() {
  return &goods_list_;
}

// repeated .app.message.MarriageStorageLogProto log = 5;
inline int MarriageStorageProto::log_size() const {
  return log_.size();
}
inline void MarriageStorageProto::clear_log() {
  log_.Clear();
}
inline const ::app::message::MarriageStorageLogProto& MarriageStorageProto::log(int index) const {
  return log_.Get(index);
}
inline ::app::message::MarriageStorageLogProto* MarriageStorageProto::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::app::message::MarriageStorageLogProto* MarriageStorageProto::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::MarriageStorageLogProto >&
MarriageStorageProto::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::MarriageStorageLogProto >*
MarriageStorageProto::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// MarriageStorageLogProto

// optional int64 time = 1;
inline bool MarriageStorageLogProto::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarriageStorageLogProto::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarriageStorageLogProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarriageStorageLogProto::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 MarriageStorageLogProto::time() const {
  return time_;
}
inline void MarriageStorageLogProto::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional bytes hero_name_bytes = 2;
inline bool MarriageStorageLogProto::has_hero_name_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarriageStorageLogProto::set_has_hero_name_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarriageStorageLogProto::clear_has_hero_name_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarriageStorageLogProto::clear_hero_name_bytes() {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_->clear();
  }
  clear_has_hero_name_bytes();
}
inline const ::std::string& MarriageStorageLogProto::hero_name_bytes() const {
  return *hero_name_bytes_;
}
inline void MarriageStorageLogProto::set_hero_name_bytes(const ::std::string& value) {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  hero_name_bytes_->assign(value);
}
inline void MarriageStorageLogProto::set_hero_name_bytes(const char* value) {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  hero_name_bytes_->assign(value);
}
inline void MarriageStorageLogProto::set_hero_name_bytes(const void* value, size_t size) {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  hero_name_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarriageStorageLogProto::mutable_hero_name_bytes() {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  return hero_name_bytes_;
}
inline ::std::string* MarriageStorageLogProto::release_hero_name_bytes() {
  clear_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hero_name_bytes_;
    hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarriageStorageLogProto::set_allocated_hero_name_bytes(::std::string* hero_name_bytes) {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_bytes_;
  }
  if (hero_name_bytes) {
    set_has_hero_name_bytes();
    hero_name_bytes_ = hero_name_bytes;
  } else {
    clear_has_hero_name_bytes();
    hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes goods_name_bytes = 3;
inline bool MarriageStorageLogProto::has_goods_name_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarriageStorageLogProto::set_has_goods_name_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarriageStorageLogProto::clear_has_goods_name_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarriageStorageLogProto::clear_goods_name_bytes() {
  if (goods_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    goods_name_bytes_->clear();
  }
  clear_has_goods_name_bytes();
}
inline const ::std::string& MarriageStorageLogProto::goods_name_bytes() const {
  return *goods_name_bytes_;
}
inline void MarriageStorageLogProto::set_goods_name_bytes(const ::std::string& value) {
  set_has_goods_name_bytes();
  if (goods_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_bytes_ = new ::std::string;
  }
  goods_name_bytes_->assign(value);
}
inline void MarriageStorageLogProto::set_goods_name_bytes(const char* value) {
  set_has_goods_name_bytes();
  if (goods_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_bytes_ = new ::std::string;
  }
  goods_name_bytes_->assign(value);
}
inline void MarriageStorageLogProto::set_goods_name_bytes(const void* value, size_t size) {
  set_has_goods_name_bytes();
  if (goods_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_bytes_ = new ::std::string;
  }
  goods_name_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarriageStorageLogProto::mutable_goods_name_bytes() {
  set_has_goods_name_bytes();
  if (goods_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_bytes_ = new ::std::string;
  }
  return goods_name_bytes_;
}
inline ::std::string* MarriageStorageLogProto::release_goods_name_bytes() {
  clear_has_goods_name_bytes();
  if (goods_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goods_name_bytes_;
    goods_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarriageStorageLogProto::set_allocated_goods_name_bytes(::std::string* goods_name_bytes) {
  if (goods_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete goods_name_bytes_;
  }
  if (goods_name_bytes) {
    set_has_goods_name_bytes();
    goods_name_bytes_ = goods_name_bytes;
  } else {
    clear_has_goods_name_bytes();
    goods_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 4;
inline bool MarriageStorageLogProto::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarriageStorageLogProto::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarriageStorageLogProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarriageStorageLogProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 MarriageStorageLogProto::count() const {
  return count_;
}
inline void MarriageStorageLogProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 type = 5;
inline bool MarriageStorageLogProto::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarriageStorageLogProto::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarriageStorageLogProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarriageStorageLogProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MarriageStorageLogProto::type() const {
  return type_;
}
inline void MarriageStorageLogProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// HeroLoveProto

// optional bool daily_collected = 1;
inline bool HeroLoveProto::has_daily_collected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroLoveProto::set_has_daily_collected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroLoveProto::clear_has_daily_collected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroLoveProto::clear_daily_collected() {
  daily_collected_ = false;
  clear_has_daily_collected();
}
inline bool HeroLoveProto::daily_collected() const {
  return daily_collected_;
}
inline void HeroLoveProto::set_daily_collected(bool value) {
  set_has_daily_collected();
  daily_collected_ = value;
}

// optional int32 exchange_point = 2;
inline bool HeroLoveProto::has_exchange_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroLoveProto::set_has_exchange_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroLoveProto::clear_has_exchange_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroLoveProto::clear_exchange_point() {
  exchange_point_ = 0;
  clear_has_exchange_point();
}
inline ::google::protobuf::int32 HeroLoveProto::exchange_point() const {
  return exchange_point_;
}
inline void HeroLoveProto::set_exchange_point(::google::protobuf::int32 value) {
  set_has_exchange_point();
  exchange_point_ = value;
}

// repeated int32 exchange_id = 3;
inline int HeroLoveProto::exchange_id_size() const {
  return exchange_id_.size();
}
inline void HeroLoveProto::clear_exchange_id() {
  exchange_id_.Clear();
}
inline ::google::protobuf::int32 HeroLoveProto::exchange_id(int index) const {
  return exchange_id_.Get(index);
}
inline void HeroLoveProto::set_exchange_id(int index, ::google::protobuf::int32 value) {
  exchange_id_.Set(index, value);
}
inline void HeroLoveProto::add_exchange_id(::google::protobuf::int32 value) {
  exchange_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroLoveProto::exchange_id() const {
  return exchange_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroLoveProto::mutable_exchange_id() {
  return &exchange_id_;
}

// repeated int32 exchange_today_count = 4;
inline int HeroLoveProto::exchange_today_count_size() const {
  return exchange_today_count_.size();
}
inline void HeroLoveProto::clear_exchange_today_count() {
  exchange_today_count_.Clear();
}
inline ::google::protobuf::int32 HeroLoveProto::exchange_today_count(int index) const {
  return exchange_today_count_.Get(index);
}
inline void HeroLoveProto::set_exchange_today_count(int index, ::google::protobuf::int32 value) {
  exchange_today_count_.Set(index, value);
}
inline void HeroLoveProto::add_exchange_today_count(::google::protobuf::int32 value) {
  exchange_today_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroLoveProto::exchange_today_count() const {
  return exchange_today_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroLoveProto::mutable_exchange_today_count() {
  return &exchange_today_count_;
}

// optional int32 online_collected_max_minutes = 5;
inline bool HeroLoveProto::has_online_collected_max_minutes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroLoveProto::set_has_online_collected_max_minutes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroLoveProto::clear_has_online_collected_max_minutes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroLoveProto::clear_online_collected_max_minutes() {
  online_collected_max_minutes_ = 0;
  clear_has_online_collected_max_minutes();
}
inline ::google::protobuf::int32 HeroLoveProto::online_collected_max_minutes() const {
  return online_collected_max_minutes_;
}
inline void HeroLoveProto::set_online_collected_max_minutes(::google::protobuf::int32 value) {
  set_has_online_collected_max_minutes();
  online_collected_max_minutes_ = value;
}

// optional int32 online_today_minutes = 6;
inline bool HeroLoveProto::has_online_today_minutes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeroLoveProto::set_has_online_today_minutes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeroLoveProto::clear_has_online_today_minutes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeroLoveProto::clear_online_today_minutes() {
  online_today_minutes_ = 0;
  clear_has_online_today_minutes();
}
inline ::google::protobuf::int32 HeroLoveProto::online_today_minutes() const {
  return online_today_minutes_;
}
inline void HeroLoveProto::set_online_today_minutes(::google::protobuf::int32 value) {
  set_has_online_today_minutes();
  online_today_minutes_ = value;
}

// optional int32 online_minutes = 7;
inline bool HeroLoveProto::has_online_minutes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeroLoveProto::set_has_online_minutes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeroLoveProto::clear_has_online_minutes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeroLoveProto::clear_online_minutes() {
  online_minutes_ = 0;
  clear_has_online_minutes();
}
inline ::google::protobuf::int32 HeroLoveProto::online_minutes() const {
  return online_minutes_;
}
inline void HeroLoveProto::set_online_minutes(::google::protobuf::int32 value) {
  set_has_online_minutes();
  online_minutes_ = value;
}

// -------------------------------------------------------------------

// HeroLoveExchangeProto

// optional int32 exchange_point = 1;
inline bool HeroLoveExchangeProto::has_exchange_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroLoveExchangeProto::set_has_exchange_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroLoveExchangeProto::clear_has_exchange_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroLoveExchangeProto::clear_exchange_point() {
  exchange_point_ = 0;
  clear_has_exchange_point();
}
inline ::google::protobuf::int32 HeroLoveExchangeProto::exchange_point() const {
  return exchange_point_;
}
inline void HeroLoveExchangeProto::set_exchange_point(::google::protobuf::int32 value) {
  set_has_exchange_point();
  exchange_point_ = value;
}

// repeated int32 exchange_id = 2;
inline int HeroLoveExchangeProto::exchange_id_size() const {
  return exchange_id_.size();
}
inline void HeroLoveExchangeProto::clear_exchange_id() {
  exchange_id_.Clear();
}
inline ::google::protobuf::int32 HeroLoveExchangeProto::exchange_id(int index) const {
  return exchange_id_.Get(index);
}
inline void HeroLoveExchangeProto::set_exchange_id(int index, ::google::protobuf::int32 value) {
  exchange_id_.Set(index, value);
}
inline void HeroLoveExchangeProto::add_exchange_id(::google::protobuf::int32 value) {
  exchange_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroLoveExchangeProto::exchange_id() const {
  return exchange_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroLoveExchangeProto::mutable_exchange_id() {
  return &exchange_id_;
}

// repeated int32 exchange_today_count = 3;
inline int HeroLoveExchangeProto::exchange_today_count_size() const {
  return exchange_today_count_.size();
}
inline void HeroLoveExchangeProto::clear_exchange_today_count() {
  exchange_today_count_.Clear();
}
inline ::google::protobuf::int32 HeroLoveExchangeProto::exchange_today_count(int index) const {
  return exchange_today_count_.Get(index);
}
inline void HeroLoveExchangeProto::set_exchange_today_count(int index, ::google::protobuf::int32 value) {
  exchange_today_count_.Set(index, value);
}
inline void HeroLoveExchangeProto::add_exchange_today_count(::google::protobuf::int32 value) {
  exchange_today_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HeroLoveExchangeProto::exchange_today_count() const {
  return exchange_today_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HeroLoveExchangeProto::mutable_exchange_today_count() {
  return &exchange_today_count_;
}

// -------------------------------------------------------------------

// ArenaFightingTeamRankTeamInfoProto

// repeated .app.message.ArenaFightingTeamRankMemberInfoProto member_info = 1;
inline int ArenaFightingTeamRankTeamInfoProto::member_info_size() const {
  return member_info_.size();
}
inline void ArenaFightingTeamRankTeamInfoProto::clear_member_info() {
  member_info_.Clear();
}
inline const ::app::message::ArenaFightingTeamRankMemberInfoProto& ArenaFightingTeamRankTeamInfoProto::member_info(int index) const {
  return member_info_.Get(index);
}
inline ::app::message::ArenaFightingTeamRankMemberInfoProto* ArenaFightingTeamRankTeamInfoProto::mutable_member_info(int index) {
  return member_info_.Mutable(index);
}
inline ::app::message::ArenaFightingTeamRankMemberInfoProto* ArenaFightingTeamRankTeamInfoProto::add_member_info() {
  return member_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ArenaFightingTeamRankMemberInfoProto >&
ArenaFightingTeamRankTeamInfoProto::member_info() const {
  return member_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ArenaFightingTeamRankMemberInfoProto >*
ArenaFightingTeamRankTeamInfoProto::mutable_member_info() {
  return &member_info_;
}

// -------------------------------------------------------------------

// ArenaFightingTeamRankMemberInfoProto

// optional int64 hero_id = 1;
inline bool ArenaFightingTeamRankMemberInfoProto::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_hero_id() {
  hero_id_ = GOOGLE_LONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::int64 ArenaFightingTeamRankMemberInfoProto::hero_id() const {
  return hero_id_;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_hero_id(::google::protobuf::int64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional bytes hero_name_bytes = 2;
inline bool ArenaFightingTeamRankMemberInfoProto::has_hero_name_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_has_hero_name_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_has_hero_name_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_hero_name_bytes() {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_->clear();
  }
  clear_has_hero_name_bytes();
}
inline const ::std::string& ArenaFightingTeamRankMemberInfoProto::hero_name_bytes() const {
  return *hero_name_bytes_;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_hero_name_bytes(const ::std::string& value) {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  hero_name_bytes_->assign(value);
}
inline void ArenaFightingTeamRankMemberInfoProto::set_hero_name_bytes(const char* value) {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  hero_name_bytes_->assign(value);
}
inline void ArenaFightingTeamRankMemberInfoProto::set_hero_name_bytes(const void* value, size_t size) {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  hero_name_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaFightingTeamRankMemberInfoProto::mutable_hero_name_bytes() {
  set_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_bytes_ = new ::std::string;
  }
  return hero_name_bytes_;
}
inline ::std::string* ArenaFightingTeamRankMemberInfoProto::release_hero_name_bytes() {
  clear_has_hero_name_bytes();
  if (hero_name_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hero_name_bytes_;
    hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaFightingTeamRankMemberInfoProto::set_allocated_hero_name_bytes(::std::string* hero_name_bytes) {
  if (hero_name_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_bytes_;
  }
  if (hero_name_bytes) {
    set_has_hero_name_bytes();
    hero_name_bytes_ = hero_name_bytes;
  } else {
    clear_has_hero_name_bytes();
    hero_name_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 hero_race = 3;
inline bool ArenaFightingTeamRankMemberInfoProto::has_hero_race() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_has_hero_race() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_has_hero_race() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_hero_race() {
  hero_race_ = 0;
  clear_has_hero_race();
}
inline ::google::protobuf::int32 ArenaFightingTeamRankMemberInfoProto::hero_race() const {
  return hero_race_;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_hero_race(::google::protobuf::int32 value) {
  set_has_hero_race();
  hero_race_ = value;
}

// optional int32 hero_fighting_amount = 4;
inline bool ArenaFightingTeamRankMemberInfoProto::has_hero_fighting_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_has_hero_fighting_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_has_hero_fighting_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaFightingTeamRankMemberInfoProto::clear_hero_fighting_amount() {
  hero_fighting_amount_ = 0;
  clear_has_hero_fighting_amount();
}
inline ::google::protobuf::int32 ArenaFightingTeamRankMemberInfoProto::hero_fighting_amount() const {
  return hero_fighting_amount_;
}
inline void ArenaFightingTeamRankMemberInfoProto::set_hero_fighting_amount(::google::protobuf::int32 value) {
  set_has_hero_fighting_amount();
  hero_fighting_amount_ = value;
}

// -------------------------------------------------------------------

// ClientYuanbaoCostLogProto

// repeated .app.message.ClientSingleYuanbaoCostLogProto single_yuanbao_cost_logs = 1;
inline int ClientYuanbaoCostLogProto::single_yuanbao_cost_logs_size() const {
  return single_yuanbao_cost_logs_.size();
}
inline void ClientYuanbaoCostLogProto::clear_single_yuanbao_cost_logs() {
  single_yuanbao_cost_logs_.Clear();
}
inline const ::app::message::ClientSingleYuanbaoCostLogProto& ClientYuanbaoCostLogProto::single_yuanbao_cost_logs(int index) const {
  return single_yuanbao_cost_logs_.Get(index);
}
inline ::app::message::ClientSingleYuanbaoCostLogProto* ClientYuanbaoCostLogProto::mutable_single_yuanbao_cost_logs(int index) {
  return single_yuanbao_cost_logs_.Mutable(index);
}
inline ::app::message::ClientSingleYuanbaoCostLogProto* ClientYuanbaoCostLogProto::add_single_yuanbao_cost_logs() {
  return single_yuanbao_cost_logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ClientSingleYuanbaoCostLogProto >&
ClientYuanbaoCostLogProto::single_yuanbao_cost_logs() const {
  return single_yuanbao_cost_logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ClientSingleYuanbaoCostLogProto >*
ClientYuanbaoCostLogProto::mutable_single_yuanbao_cost_logs() {
  return &single_yuanbao_cost_logs_;
}

// -------------------------------------------------------------------

// ClientSingleYuanbaoCostLogProto

// optional int64 time = 1;
inline bool ClientSingleYuanbaoCostLogProto::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSingleYuanbaoCostLogProto::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ClientSingleYuanbaoCostLogProto::time() const {
  return time_;
}
inline void ClientSingleYuanbaoCostLogProto::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 type = 2;
inline bool ClientSingleYuanbaoCostLogProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSingleYuanbaoCostLogProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ClientSingleYuanbaoCostLogProto::type() const {
  return type_;
}
inline void ClientSingleYuanbaoCostLogProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 yuanbao = 3;
inline bool ClientSingleYuanbaoCostLogProto::has_yuanbao() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientSingleYuanbaoCostLogProto::set_has_yuanbao() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_has_yuanbao() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_yuanbao() {
  yuanbao_ = 0;
  clear_has_yuanbao();
}
inline ::google::protobuf::int32 ClientSingleYuanbaoCostLogProto::yuanbao() const {
  return yuanbao_;
}
inline void ClientSingleYuanbaoCostLogProto::set_yuanbao(::google::protobuf::int32 value) {
  set_has_yuanbao();
  yuanbao_ = value;
}

// optional int32 bindYuanbao = 4;
inline bool ClientSingleYuanbaoCostLogProto::has_bindyuanbao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientSingleYuanbaoCostLogProto::set_has_bindyuanbao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_has_bindyuanbao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientSingleYuanbaoCostLogProto::clear_bindyuanbao() {
  bindyuanbao_ = 0;
  clear_has_bindyuanbao();
}
inline ::google::protobuf::int32 ClientSingleYuanbaoCostLogProto::bindyuanbao() const {
  return bindyuanbao_;
}
inline void ClientSingleYuanbaoCostLogProto::set_bindyuanbao(::google::protobuf::int32 value) {
  set_has_bindyuanbao();
  bindyuanbao_ = value;
}

// -------------------------------------------------------------------

// HeroAnniversaryProto

// optional bool cake_today_collected = 1;
inline bool HeroAnniversaryProto::has_cake_today_collected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroAnniversaryProto::set_has_cake_today_collected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroAnniversaryProto::clear_has_cake_today_collected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroAnniversaryProto::clear_cake_today_collected() {
  cake_today_collected_ = false;
  clear_has_cake_today_collected();
}
inline bool HeroAnniversaryProto::cake_today_collected() const {
  return cake_today_collected_;
}
inline void HeroAnniversaryProto::set_cake_today_collected(bool value) {
  set_has_cake_today_collected();
  cake_today_collected_ = value;
}

// optional bool daily_normal_collected = 2;
inline bool HeroAnniversaryProto::has_daily_normal_collected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroAnniversaryProto::set_has_daily_normal_collected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroAnniversaryProto::clear_has_daily_normal_collected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroAnniversaryProto::clear_daily_normal_collected() {
  daily_normal_collected_ = false;
  clear_has_daily_normal_collected();
}
inline bool HeroAnniversaryProto::daily_normal_collected() const {
  return daily_normal_collected_;
}
inline void HeroAnniversaryProto::set_daily_normal_collected(bool value) {
  set_has_daily_normal_collected();
  daily_normal_collected_ = value;
}

// optional bool daily_vip_collected = 3;
inline bool HeroAnniversaryProto::has_daily_vip_collected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroAnniversaryProto::set_has_daily_vip_collected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroAnniversaryProto::clear_has_daily_vip_collected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroAnniversaryProto::clear_daily_vip_collected() {
  daily_vip_collected_ = false;
  clear_has_daily_vip_collected();
}
inline bool HeroAnniversaryProto::daily_vip_collected() const {
  return daily_vip_collected_;
}
inline void HeroAnniversaryProto::set_daily_vip_collected(bool value) {
  set_has_daily_vip_collected();
  daily_vip_collected_ = value;
}

// optional int32 recharge_yuanbao = 4;
inline bool HeroAnniversaryProto::has_recharge_yuanbao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroAnniversaryProto::set_has_recharge_yuanbao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroAnniversaryProto::clear_has_recharge_yuanbao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroAnniversaryProto::clear_recharge_yuanbao() {
  recharge_yuanbao_ = 0;
  clear_has_recharge_yuanbao();
}
inline ::google::protobuf::int32 HeroAnniversaryProto::recharge_yuanbao() const {
  return recharge_yuanbao_;
}
inline void HeroAnniversaryProto::set_recharge_yuanbao(::google::protobuf::int32 value) {
  set_has_recharge_yuanbao();
  recharge_yuanbao_ = value;
}

// -------------------------------------------------------------------

// HeroAnniversaryTaskProto

// optional .app.message.SingleHeroAnniversaryDailyTaskProto current_task = 1;
inline bool HeroAnniversaryTaskProto::has_current_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroAnniversaryTaskProto::set_has_current_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroAnniversaryTaskProto::clear_has_current_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroAnniversaryTaskProto::clear_current_task() {
  if (current_task_ != NULL) current_task_->::app::message::SingleHeroAnniversaryDailyTaskProto::Clear();
  clear_has_current_task();
}
inline const ::app::message::SingleHeroAnniversaryDailyTaskProto& HeroAnniversaryTaskProto::current_task() const {
  return current_task_ != NULL ? *current_task_ : *default_instance_->current_task_;
}
inline ::app::message::SingleHeroAnniversaryDailyTaskProto* HeroAnniversaryTaskProto::mutable_current_task() {
  set_has_current_task();
  if (current_task_ == NULL) current_task_ = new ::app::message::SingleHeroAnniversaryDailyTaskProto;
  return current_task_;
}
inline ::app::message::SingleHeroAnniversaryDailyTaskProto* HeroAnniversaryTaskProto::release_current_task() {
  clear_has_current_task();
  ::app::message::SingleHeroAnniversaryDailyTaskProto* temp = current_task_;
  current_task_ = NULL;
  return temp;
}
inline void HeroAnniversaryTaskProto::set_allocated_current_task(::app::message::SingleHeroAnniversaryDailyTaskProto* current_task) {
  delete current_task_;
  current_task_ = current_task;
  if (current_task) {
    set_has_current_task();
  } else {
    clear_has_current_task();
  }
}

// optional int32 index = 2;
inline bool HeroAnniversaryTaskProto::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroAnniversaryTaskProto::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroAnniversaryTaskProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroAnniversaryTaskProto::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 HeroAnniversaryTaskProto::index() const {
  return index_;
}
inline void HeroAnniversaryTaskProto::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional bool final_prize_collected = 3 [default = false];
inline bool HeroAnniversaryTaskProto::has_final_prize_collected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroAnniversaryTaskProto::set_has_final_prize_collected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroAnniversaryTaskProto::clear_has_final_prize_collected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroAnniversaryTaskProto::clear_final_prize_collected() {
  final_prize_collected_ = false;
  clear_has_final_prize_collected();
}
inline bool HeroAnniversaryTaskProto::final_prize_collected() const {
  return final_prize_collected_;
}
inline void HeroAnniversaryTaskProto::set_final_prize_collected(bool value) {
  set_has_final_prize_collected();
  final_prize_collected_ = value;
}

// -------------------------------------------------------------------

// SingleHeroAnniversaryDailyTaskProto

// optional .app.message.SingleAnniversaryDailyTaskProto task = 1;
inline bool SingleHeroAnniversaryDailyTaskProto::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_task() {
  if (task_ != NULL) task_->::app::message::SingleAnniversaryDailyTaskProto::Clear();
  clear_has_task();
}
inline const ::app::message::SingleAnniversaryDailyTaskProto& SingleHeroAnniversaryDailyTaskProto::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::app::message::SingleAnniversaryDailyTaskProto* SingleHeroAnniversaryDailyTaskProto::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::app::message::SingleAnniversaryDailyTaskProto;
  return task_;
}
inline ::app::message::SingleAnniversaryDailyTaskProto* SingleHeroAnniversaryDailyTaskProto::release_task() {
  clear_has_task();
  ::app::message::SingleAnniversaryDailyTaskProto* temp = task_;
  task_ = NULL;
  return temp;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_allocated_task(::app::message::SingleAnniversaryDailyTaskProto* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// optional int32 count = 2;
inline bool SingleHeroAnniversaryDailyTaskProto::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SingleHeroAnniversaryDailyTaskProto::count() const {
  return count_;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional bool is_completed = 3;
inline bool SingleHeroAnniversaryDailyTaskProto::has_is_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_has_is_completed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_has_is_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_is_completed() {
  is_completed_ = false;
  clear_has_is_completed();
}
inline bool SingleHeroAnniversaryDailyTaskProto::is_completed() const {
  return is_completed_;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_is_completed(bool value) {
  set_has_is_completed();
  is_completed_ = value;
}

// optional bool prize_collected = 4;
inline bool SingleHeroAnniversaryDailyTaskProto::has_prize_collected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_has_prize_collected() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_has_prize_collected() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_prize_collected() {
  prize_collected_ = false;
  clear_has_prize_collected();
}
inline bool SingleHeroAnniversaryDailyTaskProto::prize_collected() const {
  return prize_collected_;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_prize_collected(bool value) {
  set_has_prize_collected();
  prize_collected_ = value;
}

// optional int32 refresh_times = 5;
inline bool SingleHeroAnniversaryDailyTaskProto::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleHeroAnniversaryDailyTaskProto::clear_refresh_times() {
  refresh_times_ = 0;
  clear_has_refresh_times();
}
inline ::google::protobuf::int32 SingleHeroAnniversaryDailyTaskProto::refresh_times() const {
  return refresh_times_;
}
inline void SingleHeroAnniversaryDailyTaskProto::set_refresh_times(::google::protobuf::int32 value) {
  set_has_refresh_times();
  refresh_times_ = value;
}

// -------------------------------------------------------------------

// ShieldProto

// repeated .app.message.SingleShieldProto shields = 1;
inline int ShieldProto::shields_size() const {
  return shields_.size();
}
inline void ShieldProto::clear_shields() {
  shields_.Clear();
}
inline const ::app::message::SingleShieldProto& ShieldProto::shields(int index) const {
  return shields_.Get(index);
}
inline ::app::message::SingleShieldProto* ShieldProto::mutable_shields(int index) {
  return shields_.Mutable(index);
}
inline ::app::message::SingleShieldProto* ShieldProto::add_shields() {
  return shields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::SingleShieldProto >&
ShieldProto::shields() const {
  return shields_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::SingleShieldProto >*
ShieldProto::mutable_shields() {
  return &shields_;
}

// optional int32 current_id = 3;
inline bool ShieldProto::has_current_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShieldProto::set_has_current_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShieldProto::clear_has_current_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShieldProto::clear_current_id() {
  current_id_ = 0;
  clear_has_current_id();
}
inline ::google::protobuf::int32 ShieldProto::current_id() const {
  return current_id_;
}
inline void ShieldProto::set_current_id(::google::protobuf::int32 value) {
  set_has_current_id();
  current_id_ = value;
}

// -------------------------------------------------------------------

// SingleShieldProto

// optional .app.message.ShieldDataProto data = 1;
inline bool SingleShieldProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleShieldProto::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleShieldProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleShieldProto::clear_data() {
  if (data_ != NULL) data_->::app::message::ShieldDataProto::Clear();
  clear_has_data();
}
inline const ::app::message::ShieldDataProto& SingleShieldProto::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::app::message::ShieldDataProto* SingleShieldProto::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::app::message::ShieldDataProto;
  return data_;
}
inline ::app::message::ShieldDataProto* SingleShieldProto::release_data() {
  clear_has_data();
  ::app::message::ShieldDataProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void SingleShieldProto::set_allocated_data(::app::message::ShieldDataProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .app.message.ShieldLevelDataProto level_data = 2;
inline bool SingleShieldProto::has_level_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleShieldProto::set_has_level_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleShieldProto::clear_has_level_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleShieldProto::clear_level_data() {
  if (level_data_ != NULL) level_data_->::app::message::ShieldLevelDataProto::Clear();
  clear_has_level_data();
}
inline const ::app::message::ShieldLevelDataProto& SingleShieldProto::level_data() const {
  return level_data_ != NULL ? *level_data_ : *default_instance_->level_data_;
}
inline ::app::message::ShieldLevelDataProto* SingleShieldProto::mutable_level_data() {
  set_has_level_data();
  if (level_data_ == NULL) level_data_ = new ::app::message::ShieldLevelDataProto;
  return level_data_;
}
inline ::app::message::ShieldLevelDataProto* SingleShieldProto::release_level_data() {
  clear_has_level_data();
  ::app::message::ShieldLevelDataProto* temp = level_data_;
  level_data_ = NULL;
  return temp;
}
inline void SingleShieldProto::set_allocated_level_data(::app::message::ShieldLevelDataProto* level_data) {
  delete level_data_;
  level_data_ = level_data;
  if (level_data) {
    set_has_level_data();
  } else {
    clear_has_level_data();
  }
}

// optional .app.message.ActiveSpell special_spell_1 = 3;
inline bool SingleShieldProto::has_special_spell_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleShieldProto::set_has_special_spell_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleShieldProto::clear_has_special_spell_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleShieldProto::clear_special_spell_1() {
  if (special_spell_1_ != NULL) special_spell_1_->::app::message::ActiveSpell::Clear();
  clear_has_special_spell_1();
}
inline const ::app::message::ActiveSpell& SingleShieldProto::special_spell_1() const {
  return special_spell_1_ != NULL ? *special_spell_1_ : *default_instance_->special_spell_1_;
}
inline ::app::message::ActiveSpell* SingleShieldProto::mutable_special_spell_1() {
  set_has_special_spell_1();
  if (special_spell_1_ == NULL) special_spell_1_ = new ::app::message::ActiveSpell;
  return special_spell_1_;
}
inline ::app::message::ActiveSpell* SingleShieldProto::release_special_spell_1() {
  clear_has_special_spell_1();
  ::app::message::ActiveSpell* temp = special_spell_1_;
  special_spell_1_ = NULL;
  return temp;
}
inline void SingleShieldProto::set_allocated_special_spell_1(::app::message::ActiveSpell* special_spell_1) {
  delete special_spell_1_;
  special_spell_1_ = special_spell_1;
  if (special_spell_1) {
    set_has_special_spell_1();
  } else {
    clear_has_special_spell_1();
  }
}

// optional .app.message.ActiveSpell special_spell_2 = 4;
inline bool SingleShieldProto::has_special_spell_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleShieldProto::set_has_special_spell_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleShieldProto::clear_has_special_spell_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleShieldProto::clear_special_spell_2() {
  if (special_spell_2_ != NULL) special_spell_2_->::app::message::ActiveSpell::Clear();
  clear_has_special_spell_2();
}
inline const ::app::message::ActiveSpell& SingleShieldProto::special_spell_2() const {
  return special_spell_2_ != NULL ? *special_spell_2_ : *default_instance_->special_spell_2_;
}
inline ::app::message::ActiveSpell* SingleShieldProto::mutable_special_spell_2() {
  set_has_special_spell_2();
  if (special_spell_2_ == NULL) special_spell_2_ = new ::app::message::ActiveSpell;
  return special_spell_2_;
}
inline ::app::message::ActiveSpell* SingleShieldProto::release_special_spell_2() {
  clear_has_special_spell_2();
  ::app::message::ActiveSpell* temp = special_spell_2_;
  special_spell_2_ = NULL;
  return temp;
}
inline void SingleShieldProto::set_allocated_special_spell_2(::app::message::ActiveSpell* special_spell_2) {
  delete special_spell_2_;
  special_spell_2_ = special_spell_2;
  if (special_spell_2) {
    set_has_special_spell_2();
  } else {
    clear_has_special_spell_2();
  }
}

// repeated int32 normal_spell_pos = 5;
inline int SingleShieldProto::normal_spell_pos_size() const {
  return normal_spell_pos_.size();
}
inline void SingleShieldProto::clear_normal_spell_pos() {
  normal_spell_pos_.Clear();
}
inline ::google::protobuf::int32 SingleShieldProto::normal_spell_pos(int index) const {
  return normal_spell_pos_.Get(index);
}
inline void SingleShieldProto::set_normal_spell_pos(int index, ::google::protobuf::int32 value) {
  normal_spell_pos_.Set(index, value);
}
inline void SingleShieldProto::add_normal_spell_pos(::google::protobuf::int32 value) {
  normal_spell_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SingleShieldProto::normal_spell_pos() const {
  return normal_spell_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SingleShieldProto::mutable_normal_spell_pos() {
  return &normal_spell_pos_;
}

// repeated .app.message.ActiveSpell normal_spells = 6;
inline int SingleShieldProto::normal_spells_size() const {
  return normal_spells_.size();
}
inline void SingleShieldProto::clear_normal_spells() {
  normal_spells_.Clear();
}
inline const ::app::message::ActiveSpell& SingleShieldProto::normal_spells(int index) const {
  return normal_spells_.Get(index);
}
inline ::app::message::ActiveSpell* SingleShieldProto::mutable_normal_spells(int index) {
  return normal_spells_.Mutable(index);
}
inline ::app::message::ActiveSpell* SingleShieldProto::add_normal_spells() {
  return normal_spells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >&
SingleShieldProto::normal_spells() const {
  return normal_spells_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::ActiveSpell >*
SingleShieldProto::mutable_normal_spells() {
  return &normal_spells_;
}

// repeated int32 equipment_pos = 7;
inline int SingleShieldProto::equipment_pos_size() const {
  return equipment_pos_.size();
}
inline void SingleShieldProto::clear_equipment_pos() {
  equipment_pos_.Clear();
}
inline ::google::protobuf::int32 SingleShieldProto::equipment_pos(int index) const {
  return equipment_pos_.Get(index);
}
inline void SingleShieldProto::set_equipment_pos(int index, ::google::protobuf::int32 value) {
  equipment_pos_.Set(index, value);
}
inline void SingleShieldProto::add_equipment_pos(::google::protobuf::int32 value) {
  equipment_pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SingleShieldProto::equipment_pos() const {
  return equipment_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SingleShieldProto::mutable_equipment_pos() {
  return &equipment_pos_;
}

// repeated bytes equipment_static_data = 8;
inline int SingleShieldProto::equipment_static_data_size() const {
  return equipment_static_data_.size();
}
inline void SingleShieldProto::clear_equipment_static_data() {
  equipment_static_data_.Clear();
}
inline const ::std::string& SingleShieldProto::equipment_static_data(int index) const {
  return equipment_static_data_.Get(index);
}
inline ::std::string* SingleShieldProto::mutable_equipment_static_data(int index) {
  return equipment_static_data_.Mutable(index);
}
inline void SingleShieldProto::set_equipment_static_data(int index, const ::std::string& value) {
  equipment_static_data_.Mutable(index)->assign(value);
}
inline void SingleShieldProto::set_equipment_static_data(int index, const char* value) {
  equipment_static_data_.Mutable(index)->assign(value);
}
inline void SingleShieldProto::set_equipment_static_data(int index, const void* value, size_t size) {
  equipment_static_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleShieldProto::add_equipment_static_data() {
  return equipment_static_data_.Add();
}
inline void SingleShieldProto::add_equipment_static_data(const ::std::string& value) {
  equipment_static_data_.Add()->assign(value);
}
inline void SingleShieldProto::add_equipment_static_data(const char* value) {
  equipment_static_data_.Add()->assign(value);
}
inline void SingleShieldProto::add_equipment_static_data(const void* value, size_t size) {
  equipment_static_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SingleShieldProto::equipment_static_data() const {
  return equipment_static_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SingleShieldProto::mutable_equipment_static_data() {
  return &equipment_static_data_;
}

// repeated bytes equipment_dynamic_data = 9;
inline int SingleShieldProto::equipment_dynamic_data_size() const {
  return equipment_dynamic_data_.size();
}
inline void SingleShieldProto::clear_equipment_dynamic_data() {
  equipment_dynamic_data_.Clear();
}
inline const ::std::string& SingleShieldProto::equipment_dynamic_data(int index) const {
  return equipment_dynamic_data_.Get(index);
}
inline ::std::string* SingleShieldProto::mutable_equipment_dynamic_data(int index) {
  return equipment_dynamic_data_.Mutable(index);
}
inline void SingleShieldProto::set_equipment_dynamic_data(int index, const ::std::string& value) {
  equipment_dynamic_data_.Mutable(index)->assign(value);
}
inline void SingleShieldProto::set_equipment_dynamic_data(int index, const char* value) {
  equipment_dynamic_data_.Mutable(index)->assign(value);
}
inline void SingleShieldProto::set_equipment_dynamic_data(int index, const void* value, size_t size) {
  equipment_dynamic_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleShieldProto::add_equipment_dynamic_data() {
  return equipment_dynamic_data_.Add();
}
inline void SingleShieldProto::add_equipment_dynamic_data(const ::std::string& value) {
  equipment_dynamic_data_.Add()->assign(value);
}
inline void SingleShieldProto::add_equipment_dynamic_data(const char* value) {
  equipment_dynamic_data_.Add()->assign(value);
}
inline void SingleShieldProto::add_equipment_dynamic_data(const void* value, size_t size) {
  equipment_dynamic_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SingleShieldProto::equipment_dynamic_data() const {
  return equipment_dynamic_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SingleShieldProto::mutable_equipment_dynamic_data() {
  return &equipment_dynamic_data_;
}

// optional int32 qian_neng_use_count = 10;
inline bool SingleShieldProto::has_qian_neng_use_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SingleShieldProto::set_has_qian_neng_use_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SingleShieldProto::clear_has_qian_neng_use_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SingleShieldProto::clear_qian_neng_use_count() {
  qian_neng_use_count_ = 0;
  clear_has_qian_neng_use_count();
}
inline ::google::protobuf::int32 SingleShieldProto::qian_neng_use_count() const {
  return qian_neng_use_count_;
}
inline void SingleShieldProto::set_qian_neng_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_use_count();
  qian_neng_use_count_ = value;
}

// optional int32 huan_hua_use_count = 11;
inline bool SingleShieldProto::has_huan_hua_use_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SingleShieldProto::set_has_huan_hua_use_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SingleShieldProto::clear_has_huan_hua_use_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SingleShieldProto::clear_huan_hua_use_count() {
  huan_hua_use_count_ = 0;
  clear_has_huan_hua_use_count();
}
inline ::google::protobuf::int32 SingleShieldProto::huan_hua_use_count() const {
  return huan_hua_use_count_;
}
inline void SingleShieldProto::set_huan_hua_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_use_count();
  huan_hua_use_count_ = value;
}

// optional int32 bless_amount = 12;
inline bool SingleShieldProto::has_bless_amount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SingleShieldProto::set_has_bless_amount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SingleShieldProto::clear_has_bless_amount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SingleShieldProto::clear_bless_amount() {
  bless_amount_ = 0;
  clear_has_bless_amount();
}
inline ::google::protobuf::int32 SingleShieldProto::bless_amount() const {
  return bless_amount_;
}
inline void SingleShieldProto::set_bless_amount(::google::protobuf::int32 value) {
  set_has_bless_amount();
  bless_amount_ = value;
}

// optional int64 bless_amount_clear_time = 13;
inline bool SingleShieldProto::has_bless_amount_clear_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SingleShieldProto::set_has_bless_amount_clear_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SingleShieldProto::clear_has_bless_amount_clear_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SingleShieldProto::clear_bless_amount_clear_time() {
  bless_amount_clear_time_ = GOOGLE_LONGLONG(0);
  clear_has_bless_amount_clear_time();
}
inline ::google::protobuf::int64 SingleShieldProto::bless_amount_clear_time() const {
  return bless_amount_clear_time_;
}
inline void SingleShieldProto::set_bless_amount_clear_time(::google::protobuf::int64 value) {
  set_has_bless_amount_clear_time();
  bless_amount_clear_time_ = value;
}

// optional int64 exp = 14;
inline bool SingleShieldProto::has_exp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SingleShieldProto::set_has_exp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SingleShieldProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SingleShieldProto::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 SingleShieldProto::exp() const {
  return exp_;
}
inline void SingleShieldProto::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional bool is_super_model = 15;
inline bool SingleShieldProto::has_is_super_model() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SingleShieldProto::set_has_is_super_model() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SingleShieldProto::clear_has_is_super_model() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SingleShieldProto::clear_is_super_model() {
  is_super_model_ = false;
  clear_has_is_super_model();
}
inline bool SingleShieldProto::is_super_model() const {
  return is_super_model_;
}
inline void SingleShieldProto::set_is_super_model(bool value) {
  set_has_is_super_model();
  is_super_model_ = value;
}

// optional bool is_super_model_2 = 17;
inline bool SingleShieldProto::has_is_super_model_2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SingleShieldProto::set_has_is_super_model_2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SingleShieldProto::clear_has_is_super_model_2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SingleShieldProto::clear_is_super_model_2() {
  is_super_model_2_ = false;
  clear_has_is_super_model_2();
}
inline bool SingleShieldProto::is_super_model_2() const {
  return is_super_model_2_;
}
inline void SingleShieldProto::set_is_super_model_2(bool value) {
  set_has_is_super_model_2();
  is_super_model_2_ = value;
}

// optional int32 nickname_id = 18;
inline bool SingleShieldProto::has_nickname_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SingleShieldProto::set_has_nickname_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SingleShieldProto::clear_has_nickname_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SingleShieldProto::clear_nickname_id() {
  nickname_id_ = 0;
  clear_has_nickname_id();
}
inline ::google::protobuf::int32 SingleShieldProto::nickname_id() const {
  return nickname_id_;
}
inline void SingleShieldProto::set_nickname_id(::google::protobuf::int32 value) {
  set_has_nickname_id();
  nickname_id_ = value;
}

// optional int32 upgrade_times = 16;
inline bool SingleShieldProto::has_upgrade_times() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SingleShieldProto::set_has_upgrade_times() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SingleShieldProto::clear_has_upgrade_times() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SingleShieldProto::clear_upgrade_times() {
  upgrade_times_ = 0;
  clear_has_upgrade_times();
}
inline ::google::protobuf::int32 SingleShieldProto::upgrade_times() const {
  return upgrade_times_;
}
inline void SingleShieldProto::set_upgrade_times(::google::protobuf::int32 value) {
  set_has_upgrade_times();
  upgrade_times_ = value;
}

// optional int32 qian_neng_extra_max_use_count = 25;
inline bool SingleShieldProto::has_qian_neng_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SingleShieldProto::set_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SingleShieldProto::clear_has_qian_neng_extra_max_use_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SingleShieldProto::clear_qian_neng_extra_max_use_count() {
  qian_neng_extra_max_use_count_ = 0;
  clear_has_qian_neng_extra_max_use_count();
}
inline ::google::protobuf::int32 SingleShieldProto::qian_neng_extra_max_use_count() const {
  return qian_neng_extra_max_use_count_;
}
inline void SingleShieldProto::set_qian_neng_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_qian_neng_extra_max_use_count();
  qian_neng_extra_max_use_count_ = value;
}

// optional int32 huan_hua_extra_max_use_count = 26;
inline bool SingleShieldProto::has_huan_hua_extra_max_use_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SingleShieldProto::set_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SingleShieldProto::clear_has_huan_hua_extra_max_use_count() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SingleShieldProto::clear_huan_hua_extra_max_use_count() {
  huan_hua_extra_max_use_count_ = 0;
  clear_has_huan_hua_extra_max_use_count();
}
inline ::google::protobuf::int32 SingleShieldProto::huan_hua_extra_max_use_count() const {
  return huan_hua_extra_max_use_count_;
}
inline void SingleShieldProto::set_huan_hua_extra_max_use_count(::google::protobuf::int32 value) {
  set_has_huan_hua_extra_max_use_count();
  huan_hua_extra_max_use_count_ = value;
}

// optional int32 qian_neng_max_use_count_extra_times = 27;
inline bool SingleShieldProto::has_qian_neng_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SingleShieldProto::set_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SingleShieldProto::clear_has_qian_neng_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SingleShieldProto::clear_qian_neng_max_use_count_extra_times() {
  qian_neng_max_use_count_extra_times_ = 0;
  clear_has_qian_neng_max_use_count_extra_times();
}
inline ::google::protobuf::int32 SingleShieldProto::qian_neng_max_use_count_extra_times() const {
  return qian_neng_max_use_count_extra_times_;
}
inline void SingleShieldProto::set_qian_neng_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_qian_neng_max_use_count_extra_times();
  qian_neng_max_use_count_extra_times_ = value;
}

// optional int32 huan_hua_max_use_count_extra_times = 28;
inline bool SingleShieldProto::has_huan_hua_max_use_count_extra_times() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SingleShieldProto::set_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SingleShieldProto::clear_has_huan_hua_max_use_count_extra_times() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SingleShieldProto::clear_huan_hua_max_use_count_extra_times() {
  huan_hua_max_use_count_extra_times_ = 0;
  clear_has_huan_hua_max_use_count_extra_times();
}
inline ::google::protobuf::int32 SingleShieldProto::huan_hua_max_use_count_extra_times() const {
  return huan_hua_max_use_count_extra_times_;
}
inline void SingleShieldProto::set_huan_hua_max_use_count_extra_times(::google::protobuf::int32 value) {
  set_has_huan_hua_max_use_count_extra_times();
  huan_hua_max_use_count_extra_times_ = value;
}

// -------------------------------------------------------------------

// HeroBossCard

// optional int32 today_call_count = 1;
inline bool HeroBossCard::has_today_call_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroBossCard::set_has_today_call_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroBossCard::clear_has_today_call_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroBossCard::clear_today_call_count() {
  today_call_count_ = 0;
  clear_has_today_call_count();
}
inline ::google::protobuf::int32 HeroBossCard::today_call_count() const {
  return today_call_count_;
}
inline void HeroBossCard::set_today_call_count(::google::protobuf::int32 value) {
  set_has_today_call_count();
  today_call_count_ = value;
}

// optional int32 current_card_id = 2;
inline bool HeroBossCard::has_current_card_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroBossCard::set_has_current_card_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroBossCard::clear_has_current_card_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroBossCard::clear_current_card_id() {
  current_card_id_ = 0;
  clear_has_current_card_id();
}
inline ::google::protobuf::int32 HeroBossCard::current_card_id() const {
  return current_card_id_;
}
inline void HeroBossCard::set_current_card_id(::google::protobuf::int32 value) {
  set_has_current_card_id();
  current_card_id_ = value;
}

// optional int32 current_calling_card_id = 3;
inline bool HeroBossCard::has_current_calling_card_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroBossCard::set_has_current_calling_card_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroBossCard::clear_has_current_calling_card_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroBossCard::clear_current_calling_card_id() {
  current_calling_card_id_ = 0;
  clear_has_current_calling_card_id();
}
inline ::google::protobuf::int32 HeroBossCard::current_calling_card_id() const {
  return current_calling_card_id_;
}
inline void HeroBossCard::set_current_calling_card_id(::google::protobuf::int32 value) {
  set_has_current_calling_card_id();
  current_calling_card_id_ = value;
}

// optional int64 dungeon_expired_time = 4;
inline bool HeroBossCard::has_dungeon_expired_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroBossCard::set_has_dungeon_expired_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroBossCard::clear_has_dungeon_expired_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroBossCard::clear_dungeon_expired_time() {
  dungeon_expired_time_ = GOOGLE_LONGLONG(0);
  clear_has_dungeon_expired_time();
}
inline ::google::protobuf::int64 HeroBossCard::dungeon_expired_time() const {
  return dungeon_expired_time_;
}
inline void HeroBossCard::set_dungeon_expired_time(::google::protobuf::int64 value) {
  set_has_dungeon_expired_time();
  dungeon_expired_time_ = value;
}

// optional int32 guild_boss_card_kill_prize_count = 5;
inline bool HeroBossCard::has_guild_boss_card_kill_prize_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroBossCard::set_has_guild_boss_card_kill_prize_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroBossCard::clear_has_guild_boss_card_kill_prize_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroBossCard::clear_guild_boss_card_kill_prize_count() {
  guild_boss_card_kill_prize_count_ = 0;
  clear_has_guild_boss_card_kill_prize_count();
}
inline ::google::protobuf::int32 HeroBossCard::guild_boss_card_kill_prize_count() const {
  return guild_boss_card_kill_prize_count_;
}
inline void HeroBossCard::set_guild_boss_card_kill_prize_count(::google::protobuf::int32 value) {
  set_has_guild_boss_card_kill_prize_count();
  guild_boss_card_kill_prize_count_ = value;
}

// optional int32 guild_boss_card_call_prize_count = 7;
inline bool HeroBossCard::has_guild_boss_card_call_prize_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeroBossCard::set_has_guild_boss_card_call_prize_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeroBossCard::clear_has_guild_boss_card_call_prize_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeroBossCard::clear_guild_boss_card_call_prize_count() {
  guild_boss_card_call_prize_count_ = 0;
  clear_has_guild_boss_card_call_prize_count();
}
inline ::google::protobuf::int32 HeroBossCard::guild_boss_card_call_prize_count() const {
  return guild_boss_card_call_prize_count_;
}
inline void HeroBossCard::set_guild_boss_card_call_prize_count(::google::protobuf::int32 value) {
  set_has_guild_boss_card_call_prize_count();
  guild_boss_card_call_prize_count_ = value;
}

// optional int32 reset_week_of_year = 6;
inline bool HeroBossCard::has_reset_week_of_year() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeroBossCard::set_has_reset_week_of_year() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeroBossCard::clear_has_reset_week_of_year() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeroBossCard::clear_reset_week_of_year() {
  reset_week_of_year_ = 0;
  clear_has_reset_week_of_year();
}
inline ::google::protobuf::int32 HeroBossCard::reset_week_of_year() const {
  return reset_week_of_year_;
}
inline void HeroBossCard::set_reset_week_of_year(::google::protobuf::int32 value) {
  set_has_reset_week_of_year();
  reset_week_of_year_ = value;
}

// -------------------------------------------------------------------

// HaidiProto_HaidiLeftTime

// required int32 haidilevel = 1;
inline bool HaidiProto_HaidiLeftTime::has_haidilevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HaidiProto_HaidiLeftTime::set_has_haidilevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HaidiProto_HaidiLeftTime::clear_has_haidilevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HaidiProto_HaidiLeftTime::clear_haidilevel() {
  haidilevel_ = 0;
  clear_has_haidilevel();
}
inline ::google::protobuf::int32 HaidiProto_HaidiLeftTime::haidilevel() const {
  return haidilevel_;
}
inline void HaidiProto_HaidiLeftTime::set_haidilevel(::google::protobuf::int32 value) {
  set_has_haidilevel();
  haidilevel_ = value;
}

// required int32 leftTime = 2;
inline bool HaidiProto_HaidiLeftTime::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HaidiProto_HaidiLeftTime::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HaidiProto_HaidiLeftTime::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HaidiProto_HaidiLeftTime::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 HaidiProto_HaidiLeftTime::lefttime() const {
  return lefttime_;
}
inline void HaidiProto_HaidiLeftTime::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// HaidiProto

// optional bool today_free_ticket_collected = 1;
inline bool HaidiProto::has_today_free_ticket_collected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HaidiProto::set_has_today_free_ticket_collected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HaidiProto::clear_has_today_free_ticket_collected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HaidiProto::clear_today_free_ticket_collected() {
  today_free_ticket_collected_ = false;
  clear_has_today_free_ticket_collected();
}
inline bool HaidiProto::today_free_ticket_collected() const {
  return today_free_ticket_collected_;
}
inline void HaidiProto::set_today_free_ticket_collected(bool value) {
  set_has_today_free_ticket_collected();
  today_free_ticket_collected_ = value;
}

// optional bool bishuidan_used = 2;
inline bool HaidiProto::has_bishuidan_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HaidiProto::set_has_bishuidan_used() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HaidiProto::clear_has_bishuidan_used() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HaidiProto::clear_bishuidan_used() {
  bishuidan_used_ = false;
  clear_has_bishuidan_used();
}
inline bool HaidiProto::bishuidan_used() const {
  return bishuidan_used_;
}
inline void HaidiProto::set_bishuidan_used(bool value) {
  set_has_bishuidan_used();
  bishuidan_used_ = value;
}

// repeated .app.message.HaidiProto.HaidiLeftTime leftTime = 3;
inline int HaidiProto::lefttime_size() const {
  return lefttime_.size();
}
inline void HaidiProto::clear_lefttime() {
  lefttime_.Clear();
}
inline const ::app::message::HaidiProto_HaidiLeftTime& HaidiProto::lefttime(int index) const {
  return lefttime_.Get(index);
}
inline ::app::message::HaidiProto_HaidiLeftTime* HaidiProto::mutable_lefttime(int index) {
  return lefttime_.Mutable(index);
}
inline ::app::message::HaidiProto_HaidiLeftTime* HaidiProto::add_lefttime() {
  return lefttime_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::HaidiProto_HaidiLeftTime >&
HaidiProto::lefttime() const {
  return lefttime_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::HaidiProto_HaidiLeftTime >*
HaidiProto::mutable_lefttime() {
  return &lefttime_;
}

// optional int32 is_new_version = 4;
inline bool HaidiProto::has_is_new_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HaidiProto::set_has_is_new_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HaidiProto::clear_has_is_new_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HaidiProto::clear_is_new_version() {
  is_new_version_ = 0;
  clear_has_is_new_version();
}
inline ::google::protobuf::int32 HaidiProto::is_new_version() const {
  return is_new_version_;
}
inline void HaidiProto::set_is_new_version(::google::protobuf::int32 value) {
  set_has_is_new_version();
  is_new_version_ = value;
}

// -------------------------------------------------------------------

// HaidiInfoProto_HaidiOverTime

// required int32 haidilevel = 1;
inline bool HaidiInfoProto_HaidiOverTime::has_haidilevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HaidiInfoProto_HaidiOverTime::set_has_haidilevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HaidiInfoProto_HaidiOverTime::clear_has_haidilevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HaidiInfoProto_HaidiOverTime::clear_haidilevel() {
  haidilevel_ = 0;
  clear_has_haidilevel();
}
inline ::google::protobuf::int32 HaidiInfoProto_HaidiOverTime::haidilevel() const {
  return haidilevel_;
}
inline void HaidiInfoProto_HaidiOverTime::set_haidilevel(::google::protobuf::int32 value) {
  set_has_haidilevel();
  haidilevel_ = value;
}

// required int64 overTime = 2;
inline bool HaidiInfoProto_HaidiOverTime::has_overtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HaidiInfoProto_HaidiOverTime::set_has_overtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HaidiInfoProto_HaidiOverTime::clear_has_overtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HaidiInfoProto_HaidiOverTime::clear_overtime() {
  overtime_ = GOOGLE_LONGLONG(0);
  clear_has_overtime();
}
inline ::google::protobuf::int64 HaidiInfoProto_HaidiOverTime::overtime() const {
  return overtime_;
}
inline void HaidiInfoProto_HaidiOverTime::set_overtime(::google::protobuf::int64 value) {
  set_has_overtime();
  overtime_ = value;
}

// -------------------------------------------------------------------

// HaidiInfoProto

// optional bool today_free_ticket_collected = 1;
inline bool HaidiInfoProto::has_today_free_ticket_collected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HaidiInfoProto::set_has_today_free_ticket_collected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HaidiInfoProto::clear_has_today_free_ticket_collected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HaidiInfoProto::clear_today_free_ticket_collected() {
  today_free_ticket_collected_ = false;
  clear_has_today_free_ticket_collected();
}
inline bool HaidiInfoProto::today_free_ticket_collected() const {
  return today_free_ticket_collected_;
}
inline void HaidiInfoProto::set_today_free_ticket_collected(bool value) {
  set_has_today_free_ticket_collected();
  today_free_ticket_collected_ = value;
}

// optional bool bishuidan_used = 2;
inline bool HaidiInfoProto::has_bishuidan_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HaidiInfoProto::set_has_bishuidan_used() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HaidiInfoProto::clear_has_bishuidan_used() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HaidiInfoProto::clear_bishuidan_used() {
  bishuidan_used_ = false;
  clear_has_bishuidan_used();
}
inline bool HaidiInfoProto::bishuidan_used() const {
  return bishuidan_used_;
}
inline void HaidiInfoProto::set_bishuidan_used(bool value) {
  set_has_bishuidan_used();
  bishuidan_used_ = value;
}

// repeated .app.message.HaidiInfoProto.HaidiOverTime overTime = 3;
inline int HaidiInfoProto::overtime_size() const {
  return overtime_.size();
}
inline void HaidiInfoProto::clear_overtime() {
  overtime_.Clear();
}
inline const ::app::message::HaidiInfoProto_HaidiOverTime& HaidiInfoProto::overtime(int index) const {
  return overtime_.Get(index);
}
inline ::app::message::HaidiInfoProto_HaidiOverTime* HaidiInfoProto::mutable_overtime(int index) {
  return overtime_.Mutable(index);
}
inline ::app::message::HaidiInfoProto_HaidiOverTime* HaidiInfoProto::add_overtime() {
  return overtime_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::app::message::HaidiInfoProto_HaidiOverTime >&
HaidiInfoProto::overtime() const {
  return overtime_;
}
inline ::google::protobuf::RepeatedPtrField< ::app::message::HaidiInfoProto_HaidiOverTime >*
HaidiInfoProto::mutable_overtime() {
  return &overtime_;
}

// -------------------------------------------------------------------

// HeroComebackProto

// optional bool is_collected = 1;
inline bool HeroComebackProto::has_is_collected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroComebackProto::set_has_is_collected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroComebackProto::clear_has_is_collected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroComebackProto::clear_is_collected() {
  is_collected_ = false;
  clear_has_is_collected();
}
inline bool HeroComebackProto::is_collected() const {
  return is_collected_;
}
inline void HeroComebackProto::set_is_collected(bool value) {
  set_has_is_collected();
  is_collected_ = value;
}

// optional bool is_vip_collected = 2;
inline bool HeroComebackProto::has_is_vip_collected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroComebackProto::set_has_is_vip_collected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroComebackProto::clear_has_is_vip_collected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroComebackProto::clear_is_vip_collected() {
  is_vip_collected_ = false;
  clear_has_is_vip_collected();
}
inline bool HeroComebackProto::is_vip_collected() const {
  return is_vip_collected_;
}
inline void HeroComebackProto::set_is_vip_collected(bool value) {
  set_has_is_vip_collected();
  is_vip_collected_ = value;
}

// optional int64 start_time = 3;
inline bool HeroComebackProto::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroComebackProto::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroComebackProto::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroComebackProto::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 HeroComebackProto::start_time() const {
  return start_time_;
}
inline void HeroComebackProto::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int64 end_time = 4;
inline bool HeroComebackProto::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroComebackProto::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroComebackProto::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroComebackProto::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 HeroComebackProto::end_time() const {
  return end_time_;
}
inline void HeroComebackProto::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int64 last_logout_time_before_start = 5;
inline bool HeroComebackProto::has_last_logout_time_before_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroComebackProto::set_has_last_logout_time_before_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroComebackProto::clear_has_last_logout_time_before_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroComebackProto::clear_last_logout_time_before_start() {
  last_logout_time_before_start_ = GOOGLE_LONGLONG(0);
  clear_has_last_logout_time_before_start();
}
inline ::google::protobuf::int64 HeroComebackProto::last_logout_time_before_start() const {
  return last_logout_time_before_start_;
}
inline void HeroComebackProto::set_last_logout_time_before_start(::google::protobuf::int64 value) {
  set_has_last_logout_time_before_start();
  last_logout_time_before_start_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::app::message::LoginType>() {
  return ::app::message::LoginType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hero_2eproto__INCLUDED
