// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goods.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "goods.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace app {
namespace message {

namespace {

const ::google::protobuf::Descriptor* GoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountEquipmentDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountEquipmentDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEquipmentDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEquipmentDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShieldEquipmentDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShieldEquipmentDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicineDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicineDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiPrizeOnLimitedTimeGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiPrizeOnLimitedTimeGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyCardDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyCardDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* JinJieDanDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JinJieDanDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* JinJieLuckyCardDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JinJieLuckyCardDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChristmasGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChristmasGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarriageGiftDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarriageGiftDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NiDaoQianKunDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NiDaoQianKunDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FireworkDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FireworkDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QianNengHuanHuaLimitUpProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QianNengHuanHuaLimitUpProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportationDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportationDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaoShiDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaoShiDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChipsGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChipsGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpellBookDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpellBookDataProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpellBookDataProto_SpellType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PetTongLingGiftSpellExpDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetTongLingGiftSpellExpDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScriptGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScriptGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PanelGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PanelGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PanelGoodsDataProto_PanelType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SpellXinfaDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpellXinfaDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* YuanbaoPackageDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YuanbaoPackageDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefinedStatGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefinedStatGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlessGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlessGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpellPracticeGoodsDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpellPracticeGoodsDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentBaoShiProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentBaoShiProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountEquipmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountEquipmentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShieldEquipmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShieldEquipmentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEquipmentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEquipmentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaoShiProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaoShiProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperWeaponGemDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperWeaponGemDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsWrapperProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsWrapperProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeGoodsWrapperProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeGoodsWrapperProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XinfaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GoodsBornType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_goods_2eproto() {
  protobuf_AddDesc_goods_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "goods.proto");
  GOOGLE_CHECK(file != NULL);
  GoodsDataProto_descriptor_ = file->message_type(0);
  static const int GoodsDataProto_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, sell_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, require_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, require_max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, dropable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, verify_sell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, verify_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, cd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, useable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, bulk_useable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, can_set_shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, is_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, yitianshenjue_cuilian_value_),
  };
  GoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsDataProto_descriptor_,
      GoodsDataProto::default_instance_,
      GoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsDataProto));
  EquipmentDataProto_descriptor_ = file->message_type(1);
  static const int EquipmentDataProto_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, base_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, added_stat_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, best_refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, can_refined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, next_level_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, taoz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, hecheng_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, hecheng_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, normal_refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, fashion_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, hecheng_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, yu_yi_ge_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, yu_yi_ge_bless_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, inlay_hole_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, spell_),
  };
  EquipmentDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentDataProto_descriptor_,
      EquipmentDataProto::default_instance_,
      EquipmentDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentDataProto));
  MountEquipmentDataProto_descriptor_ = file->message_type(2);
  static const int MountEquipmentDataProto_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, base_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, added_stat_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, best_refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, require_mount_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, can_refined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, next_level_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, normal_refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, hecheng_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, hecheng_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, hecheng_limit_),
  };
  MountEquipmentDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountEquipmentDataProto_descriptor_,
      MountEquipmentDataProto::default_instance_,
      MountEquipmentDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountEquipmentDataProto));
  PetEquipmentDataProto_descriptor_ = file->message_type(3);
  static const int PetEquipmentDataProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, added_stat_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, can_refined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, next_level_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, normal_refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, hecheng_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, hecheng_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, hecheng_limit_),
  };
  PetEquipmentDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEquipmentDataProto_descriptor_,
      PetEquipmentDataProto::default_instance_,
      PetEquipmentDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEquipmentDataProto));
  ShieldEquipmentDataProto_descriptor_ = file->message_type(4);
  static const int ShieldEquipmentDataProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, base_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, added_stat_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, best_refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, require_shield_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, can_refined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, next_level_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, normal_refined_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, hecheng_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, hecheng_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, hecheng_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, shield_type_),
  };
  ShieldEquipmentDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShieldEquipmentDataProto_descriptor_,
      ShieldEquipmentDataProto::default_instance_,
      ShieldEquipmentDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShieldEquipmentDataProto));
  MedicineDataProto_descriptor_ = file->message_type(5);
  static const int MedicineDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicineDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicineDataProto, efficacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicineDataProto, max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicineDataProto, exp_multiple_10_),
  };
  MedicineDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicineDataProto_descriptor_,
      MedicineDataProto::default_instance_,
      MedicineDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicineDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicineDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicineDataProto));
  MultiPrizeOnLimitedTimeGoodsDataProto_descriptor_ = file->message_type(6);
  static const int MultiPrizeOnLimitedTimeGoodsDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPrizeOnLimitedTimeGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPrizeOnLimitedTimeGoodsDataProto, multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPrizeOnLimitedTimeGoodsDataProto, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPrizeOnLimitedTimeGoodsDataProto, end_time_),
  };
  MultiPrizeOnLimitedTimeGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiPrizeOnLimitedTimeGoodsDataProto_descriptor_,
      MultiPrizeOnLimitedTimeGoodsDataProto::default_instance_,
      MultiPrizeOnLimitedTimeGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPrizeOnLimitedTimeGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPrizeOnLimitedTimeGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiPrizeOnLimitedTimeGoodsDataProto));
  UpgradeGoodsDataProto_descriptor_ = file->message_type(7);
  static const int UpgradeGoodsDataProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGoodsDataProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGoodsDataProto, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGoodsDataProto, big_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGoodsDataProto, small_level_),
  };
  UpgradeGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeGoodsDataProto_descriptor_,
      UpgradeGoodsDataProto::default_instance_,
      UpgradeGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeGoodsDataProto));
  DailyCardDataProto_descriptor_ = file->message_type(8);
  static const int DailyCardDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCardDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCardDataProto, max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCardDataProto, free_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCardDataProto, yuanbao_),
  };
  DailyCardDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyCardDataProto_descriptor_,
      DailyCardDataProto::default_instance_,
      DailyCardDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCardDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCardDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyCardDataProto));
  JinJieDanDataProto_descriptor_ = file->message_type(9);
  static const int JinJieDanDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieDanDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieDanDataProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieDanDataProto, level1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieDanDataProto, level2_),
  };
  JinJieDanDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JinJieDanDataProto_descriptor_,
      JinJieDanDataProto::default_instance_,
      JinJieDanDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieDanDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieDanDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JinJieDanDataProto));
  JinJieLuckyCardDataProto_descriptor_ = file->message_type(10);
  static const int JinJieLuckyCardDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieLuckyCardDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieLuckyCardDataProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieLuckyCardDataProto, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieLuckyCardDataProto, rate_),
  };
  JinJieLuckyCardDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JinJieLuckyCardDataProto_descriptor_,
      JinJieLuckyCardDataProto::default_instance_,
      JinJieLuckyCardDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieLuckyCardDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinJieLuckyCardDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JinJieLuckyCardDataProto));
  ChristmasGoodsDataProto_descriptor_ = file->message_type(11);
  static const int ChristmasGoodsDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasGoodsDataProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasGoodsDataProto, shop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasGoodsDataProto, tree_point_),
  };
  ChristmasGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChristmasGoodsDataProto_descriptor_,
      ChristmasGoodsDataProto::default_instance_,
      ChristmasGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChristmasGoodsDataProto));
  MarriageGiftDataProto_descriptor_ = file->message_type(12);
  static const int MarriageGiftDataProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, add_hao_gan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, add_real_air_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, price_),
  };
  MarriageGiftDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarriageGiftDataProto_descriptor_,
      MarriageGiftDataProto::default_instance_,
      MarriageGiftDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageGiftDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarriageGiftDataProto));
  NiDaoQianKunDataProto_descriptor_ = file->message_type(13);
  static const int NiDaoQianKunDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunDataProto, sprite_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunDataProto, fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunDataProto, hao_gan_),
  };
  NiDaoQianKunDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NiDaoQianKunDataProto_descriptor_,
      NiDaoQianKunDataProto::default_instance_,
      NiDaoQianKunDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NiDaoQianKunDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NiDaoQianKunDataProto));
  FireworkDataProto_descriptor_ = file->message_type(14);
  static const int FireworkDataProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireworkDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireworkDataProto, color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireworkDataProto, value_),
  };
  FireworkDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FireworkDataProto_descriptor_,
      FireworkDataProto::default_instance_,
      FireworkDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireworkDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireworkDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FireworkDataProto));
  QianNengHuanHuaLimitUpProto_descriptor_ = file->message_type(15);
  static const int QianNengHuanHuaLimitUpProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QianNengHuanHuaLimitUpProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QianNengHuanHuaLimitUpProto, main_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QianNengHuanHuaLimitUpProto, required_object_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QianNengHuanHuaLimitUpProto, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QianNengHuanHuaLimitUpProto, amount_),
  };
  QianNengHuanHuaLimitUpProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QianNengHuanHuaLimitUpProto_descriptor_,
      QianNengHuanHuaLimitUpProto::default_instance_,
      QianNengHuanHuaLimitUpProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QianNengHuanHuaLimitUpProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QianNengHuanHuaLimitUpProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QianNengHuanHuaLimitUpProto));
  GemDataProto_descriptor_ = file->message_type(16);
  static const int GemDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemDataProto, gem_level_),
  };
  GemDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemDataProto_descriptor_,
      GemDataProto::default_instance_,
      GemDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemDataProto));
  TransportationDataProto_descriptor_ = file->message_type(17);
  static const int TransportationDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationDataProto, trans_type_),
  };
  TransportationDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportationDataProto_descriptor_,
      TransportationDataProto::default_instance_,
      TransportationDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportationDataProto));
  BaoShiDataProto_descriptor_ = file->message_type(18);
  static const int BaoShiDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiDataProto, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiDataProto, panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiDataProto, is_can_he_cheng_),
  };
  BaoShiDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaoShiDataProto_descriptor_,
      BaoShiDataProto::default_instance_,
      BaoShiDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaoShiDataProto));
  ChipsGoodsDataProto_descriptor_ = file->message_type(19);
  static const int ChipsGoodsDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChipsGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChipsGoodsDataProto, chips_),
  };
  ChipsGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChipsGoodsDataProto_descriptor_,
      ChipsGoodsDataProto::default_instance_,
      ChipsGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChipsGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChipsGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChipsGoodsDataProto));
  SpellBookDataProto_descriptor_ = file->message_type(20);
  static const int SpellBookDataProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellBookDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellBookDataProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellBookDataProto, required_mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellBookDataProto, required_object_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellBookDataProto, output_desc_),
  };
  SpellBookDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpellBookDataProto_descriptor_,
      SpellBookDataProto::default_instance_,
      SpellBookDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellBookDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellBookDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpellBookDataProto));
  SpellBookDataProto_SpellType_descriptor_ = SpellBookDataProto_descriptor_->enum_type(0);
  PetTongLingGiftSpellExpDataProto_descriptor_ = file->message_type(21);
  static const int PetTongLingGiftSpellExpDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellExpDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellExpDataProto, add_exp_),
  };
  PetTongLingGiftSpellExpDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetTongLingGiftSpellExpDataProto_descriptor_,
      PetTongLingGiftSpellExpDataProto::default_instance_,
      PetTongLingGiftSpellExpDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellExpDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTongLingGiftSpellExpDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetTongLingGiftSpellExpDataProto));
  ScriptGoodsDataProto_descriptor_ = file->message_type(22);
  static const int ScriptGoodsDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScriptGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScriptGoodsDataProto, script_),
  };
  ScriptGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScriptGoodsDataProto_descriptor_,
      ScriptGoodsDataProto::default_instance_,
      ScriptGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScriptGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScriptGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScriptGoodsDataProto));
  PanelGoodsDataProto_descriptor_ = file->message_type(23);
  static const int PanelGoodsDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanelGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanelGoodsDataProto, panel_),
  };
  PanelGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PanelGoodsDataProto_descriptor_,
      PanelGoodsDataProto::default_instance_,
      PanelGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanelGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanelGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PanelGoodsDataProto));
  PanelGoodsDataProto_PanelType_descriptor_ = PanelGoodsDataProto_descriptor_->enum_type(0);
  SpellXinfaDataProto_descriptor_ = file->message_type(24);
  static const int SpellXinfaDataProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellXinfaDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellXinfaDataProto, require_spell_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellXinfaDataProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellXinfaDataProto, release_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellXinfaDataProto, hurt_range_),
  };
  SpellXinfaDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpellXinfaDataProto_descriptor_,
      SpellXinfaDataProto::default_instance_,
      SpellXinfaDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellXinfaDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellXinfaDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpellXinfaDataProto));
  YuanbaoPackageDataProto_descriptor_ = file->message_type(25);
  static const int YuanbaoPackageDataProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YuanbaoPackageDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YuanbaoPackageDataProto, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YuanbaoPackageDataProto, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YuanbaoPackageDataProto, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YuanbaoPackageDataProto, show_price_),
  };
  YuanbaoPackageDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YuanbaoPackageDataProto_descriptor_,
      YuanbaoPackageDataProto::default_instance_,
      YuanbaoPackageDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YuanbaoPackageDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YuanbaoPackageDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YuanbaoPackageDataProto));
  RefinedStatGoodsDataProto_descriptor_ = file->message_type(26);
  static const int RefinedStatGoodsDataProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinedStatGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinedStatGoodsDataProto, refined_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinedStatGoodsDataProto, required_object_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinedStatGoodsDataProto, sub_type_),
  };
  RefinedStatGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefinedStatGoodsDataProto_descriptor_,
      RefinedStatGoodsDataProto::default_instance_,
      RefinedStatGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinedStatGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinedStatGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefinedStatGoodsDataProto));
  BlessGoodsDataProto_descriptor_ = file->message_type(27);
  static const int BlessGoodsDataProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, add_belss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, add_bless_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, add_bless_fix_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, add_bless_clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, add_bless_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, max_level_),
  };
  BlessGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlessGoodsDataProto_descriptor_,
      BlessGoodsDataProto::default_instance_,
      BlessGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlessGoodsDataProto));
  SpellPracticeGoodsDataProto_descriptor_ = file->message_type(28);
  static const int SpellPracticeGoodsDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellPracticeGoodsDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellPracticeGoodsDataProto, upgrade_level_),
  };
  SpellPracticeGoodsDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpellPracticeGoodsDataProto_descriptor_,
      SpellPracticeGoodsDataProto::default_instance_,
      SpellPracticeGoodsDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellPracticeGoodsDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellPracticeGoodsDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpellPracticeGoodsDataProto));
  GoodsProto_descriptor_ = file->message_type(29);
  static const int GoodsProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsProto, can_force_remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsProto, can_use_time_),
  };
  GoodsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsProto_descriptor_,
      GoodsProto::default_instance_,
      GoodsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsProto));
  EquipmentProto_descriptor_ = file->message_type(30);
  static const int EquipmentProto_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, base_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, best_refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, best_refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, added_stat_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, added_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, is_unmeltable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, ti_pin_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, xun_zhang_random_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, xun_zhang_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, fashion_random_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, fashion_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, fashion_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, bao_shi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, bao_shi_version_),
  };
  EquipmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentProto_descriptor_,
      EquipmentProto::default_instance_,
      EquipmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentProto));
  EquipmentBaoShiProto_descriptor_ = file->message_type(31);
  static const int EquipmentBaoShiProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, basestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, attachstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, hole_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, base_stat_min_and_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, attch_stat_min_and_max_),
  };
  EquipmentBaoShiProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentBaoShiProto_descriptor_,
      EquipmentBaoShiProto::default_instance_,
      EquipmentBaoShiProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBaoShiProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentBaoShiProto));
  MountEquipmentProto_descriptor_ = file->message_type(32);
  static const int MountEquipmentProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, base_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, best_refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, best_refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, added_stat_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, added_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, ti_pin_val_),
  };
  MountEquipmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountEquipmentProto_descriptor_,
      MountEquipmentProto::default_instance_,
      MountEquipmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountEquipmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountEquipmentProto));
  ShieldEquipmentProto_descriptor_ = file->message_type(33);
  static const int ShieldEquipmentProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, base_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, best_refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, best_refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, added_stat_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, added_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, ti_pin_val_),
  };
  ShieldEquipmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShieldEquipmentProto_descriptor_,
      ShieldEquipmentProto::default_instance_,
      ShieldEquipmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldEquipmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShieldEquipmentProto));
  PetEquipmentProto_descriptor_ = file->message_type(34);
  static const int PetEquipmentProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, base_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, base_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, best_refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, best_refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, refined_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, refined_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, refined_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, added_stat_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, added_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, added_fighting_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, added_stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, ti_pin_val_),
  };
  PetEquipmentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEquipmentProto_descriptor_,
      PetEquipmentProto::default_instance_,
      PetEquipmentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipmentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEquipmentProto));
  BaoShiProto_descriptor_ = file->message_type(35);
  static const int BaoShiProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, basestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, attachstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, fightingamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, bao_shi_version_),
  };
  BaoShiProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaoShiProto_descriptor_,
      BaoShiProto::default_instance_,
      BaoShiProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoShiProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaoShiProto));
  SuperWeaponGemDataProto_descriptor_ = file->message_type(36);
  static const int SuperWeaponGemDataProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponGemDataProto, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponGemDataProto, add_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponGemDataProto, level_),
  };
  SuperWeaponGemDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperWeaponGemDataProto_descriptor_,
      SuperWeaponGemDataProto::default_instance_,
      SuperWeaponGemDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponGemDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperWeaponGemDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperWeaponGemDataProto));
  GoodsWrapperProto_descriptor_ = file->message_type(37);
  static const int GoodsWrapperProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, static_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, dynamic_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, binded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, tab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, can_use_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, can_use_after_millis_),
  };
  GoodsWrapperProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsWrapperProto_descriptor_,
      GoodsWrapperProto::default_instance_,
      GoodsWrapperProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsWrapperProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsWrapperProto));
  ExchangeGoodsWrapperProto_descriptor_ = file->message_type(38);
  static const int ExchangeGoodsWrapperProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeGoodsWrapperProto, static_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeGoodsWrapperProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeGoodsWrapperProto, canusebinded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeGoodsWrapperProto, tab_),
  };
  ExchangeGoodsWrapperProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeGoodsWrapperProto_descriptor_,
      ExchangeGoodsWrapperProto::default_instance_,
      ExchangeGoodsWrapperProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeGoodsWrapperProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeGoodsWrapperProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeGoodsWrapperProto));
  XinfaType_descriptor_ = file->enum_type(0);
  GoodsBornType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_goods_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsDataProto_descriptor_, &GoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentDataProto_descriptor_, &EquipmentDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountEquipmentDataProto_descriptor_, &MountEquipmentDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEquipmentDataProto_descriptor_, &PetEquipmentDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShieldEquipmentDataProto_descriptor_, &ShieldEquipmentDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicineDataProto_descriptor_, &MedicineDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiPrizeOnLimitedTimeGoodsDataProto_descriptor_, &MultiPrizeOnLimitedTimeGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeGoodsDataProto_descriptor_, &UpgradeGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyCardDataProto_descriptor_, &DailyCardDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JinJieDanDataProto_descriptor_, &JinJieDanDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JinJieLuckyCardDataProto_descriptor_, &JinJieLuckyCardDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChristmasGoodsDataProto_descriptor_, &ChristmasGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarriageGiftDataProto_descriptor_, &MarriageGiftDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NiDaoQianKunDataProto_descriptor_, &NiDaoQianKunDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FireworkDataProto_descriptor_, &FireworkDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QianNengHuanHuaLimitUpProto_descriptor_, &QianNengHuanHuaLimitUpProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemDataProto_descriptor_, &GemDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportationDataProto_descriptor_, &TransportationDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaoShiDataProto_descriptor_, &BaoShiDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChipsGoodsDataProto_descriptor_, &ChipsGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpellBookDataProto_descriptor_, &SpellBookDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetTongLingGiftSpellExpDataProto_descriptor_, &PetTongLingGiftSpellExpDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScriptGoodsDataProto_descriptor_, &ScriptGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PanelGoodsDataProto_descriptor_, &PanelGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpellXinfaDataProto_descriptor_, &SpellXinfaDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YuanbaoPackageDataProto_descriptor_, &YuanbaoPackageDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefinedStatGoodsDataProto_descriptor_, &RefinedStatGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlessGoodsDataProto_descriptor_, &BlessGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpellPracticeGoodsDataProto_descriptor_, &SpellPracticeGoodsDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsProto_descriptor_, &GoodsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentProto_descriptor_, &EquipmentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentBaoShiProto_descriptor_, &EquipmentBaoShiProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountEquipmentProto_descriptor_, &MountEquipmentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShieldEquipmentProto_descriptor_, &ShieldEquipmentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEquipmentProto_descriptor_, &PetEquipmentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaoShiProto_descriptor_, &BaoShiProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperWeaponGemDataProto_descriptor_, &SuperWeaponGemDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsWrapperProto_descriptor_, &GoodsWrapperProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeGoodsWrapperProto_descriptor_, &ExchangeGoodsWrapperProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_goods_2eproto() {
  delete GoodsDataProto::default_instance_;
  delete GoodsDataProto_reflection_;
  delete EquipmentDataProto::default_instance_;
  delete EquipmentDataProto_reflection_;
  delete MountEquipmentDataProto::default_instance_;
  delete MountEquipmentDataProto_reflection_;
  delete PetEquipmentDataProto::default_instance_;
  delete PetEquipmentDataProto_reflection_;
  delete ShieldEquipmentDataProto::default_instance_;
  delete ShieldEquipmentDataProto_reflection_;
  delete MedicineDataProto::default_instance_;
  delete MedicineDataProto_reflection_;
  delete MultiPrizeOnLimitedTimeGoodsDataProto::default_instance_;
  delete MultiPrizeOnLimitedTimeGoodsDataProto_reflection_;
  delete UpgradeGoodsDataProto::default_instance_;
  delete UpgradeGoodsDataProto_reflection_;
  delete DailyCardDataProto::default_instance_;
  delete DailyCardDataProto_reflection_;
  delete JinJieDanDataProto::default_instance_;
  delete JinJieDanDataProto_reflection_;
  delete JinJieLuckyCardDataProto::default_instance_;
  delete JinJieLuckyCardDataProto_reflection_;
  delete ChristmasGoodsDataProto::default_instance_;
  delete ChristmasGoodsDataProto_reflection_;
  delete MarriageGiftDataProto::default_instance_;
  delete MarriageGiftDataProto_reflection_;
  delete NiDaoQianKunDataProto::default_instance_;
  delete NiDaoQianKunDataProto_reflection_;
  delete FireworkDataProto::default_instance_;
  delete FireworkDataProto_reflection_;
  delete QianNengHuanHuaLimitUpProto::default_instance_;
  delete QianNengHuanHuaLimitUpProto_reflection_;
  delete GemDataProto::default_instance_;
  delete GemDataProto_reflection_;
  delete TransportationDataProto::default_instance_;
  delete TransportationDataProto_reflection_;
  delete BaoShiDataProto::default_instance_;
  delete BaoShiDataProto_reflection_;
  delete ChipsGoodsDataProto::default_instance_;
  delete ChipsGoodsDataProto_reflection_;
  delete SpellBookDataProto::default_instance_;
  delete SpellBookDataProto_reflection_;
  delete PetTongLingGiftSpellExpDataProto::default_instance_;
  delete PetTongLingGiftSpellExpDataProto_reflection_;
  delete ScriptGoodsDataProto::default_instance_;
  delete ScriptGoodsDataProto_reflection_;
  delete PanelGoodsDataProto::default_instance_;
  delete PanelGoodsDataProto_reflection_;
  delete SpellXinfaDataProto::default_instance_;
  delete SpellXinfaDataProto_reflection_;
  delete YuanbaoPackageDataProto::default_instance_;
  delete YuanbaoPackageDataProto_reflection_;
  delete RefinedStatGoodsDataProto::default_instance_;
  delete RefinedStatGoodsDataProto_reflection_;
  delete BlessGoodsDataProto::default_instance_;
  delete BlessGoodsDataProto_reflection_;
  delete SpellPracticeGoodsDataProto::default_instance_;
  delete SpellPracticeGoodsDataProto_reflection_;
  delete GoodsProto::default_instance_;
  delete GoodsProto_reflection_;
  delete EquipmentProto::default_instance_;
  delete EquipmentProto_reflection_;
  delete EquipmentBaoShiProto::default_instance_;
  delete EquipmentBaoShiProto_reflection_;
  delete MountEquipmentProto::default_instance_;
  delete MountEquipmentProto_reflection_;
  delete ShieldEquipmentProto::default_instance_;
  delete ShieldEquipmentProto_reflection_;
  delete PetEquipmentProto::default_instance_;
  delete PetEquipmentProto_reflection_;
  delete BaoShiProto::default_instance_;
  delete BaoShiProto_reflection_;
  delete SuperWeaponGemDataProto::default_instance_;
  delete SuperWeaponGemDataProto_reflection_;
  delete GoodsWrapperProto::default_instance_;
  delete GoodsWrapperProto_reflection_;
  delete ExchangeGoodsWrapperProto::default_instance_;
  delete ExchangeGoodsWrapperProto_reflection_;
}

void protobuf_AddDesc_goods_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::app::message::protobuf_AddDesc_spritestat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013goods.proto\022\013app.message\032\020spritestat.p"
    "roto\"\206\003\n\016GoodsDataProto\022\n\n\002id\030\001 \001(\r\022\014\n\004n"
    "ame\030\002 \001(\014\022\014\n\004desc\030\003 \001(\014\022\024\n\tmax_count\030\005 \001"
    "(\005:\0011\022\022\n\nsell_price\030\007 \001(\005\022\017\n\007quality\030\t \001"
    "(\005\022\030\n\rrequire_level\030\n \001(\005:\0011\022\031\n\021require_"
    "max_level\030\030 \001(\005\022\014\n\004icon\030\013 \001(\t\022\026\n\010dropabl"
    "e\030\017 \001(\010:\004true\022\023\n\013verify_sell\030\020 \001(\010\022\023\n\013ve"
    "rify_drop\030\021 \001(\010\022\017\n\007cd_type\030\022 \001(\005\022\017\n\007usea"
    "ble\030\023 \001(\010\022\024\n\014bulk_useable\030\024 \001(\010\022\030\n\020can_s"
    "et_shortcut\030\025 \001(\010\022\025\n\ris_suggestion\030\026 \001(\010"
    "\022#\n\033yitianshenjue_cuilian_value\030\027 \001(\005\"\374\004"
    "\n\022EquipmentDataProto\022.\n\tbase_data\030\001 \001(\0132"
    "\033.app.message.GoodsDataProto\022\026\n\nequip_ty"
    "pe\030\002 \001(\005B\002\030\001\0223\n\tbase_stat\030\004 \001(\0132\034.app.me"
    "ssage.SingleStatProtoB\002\030\001\022\031\n\021refined_max"
    "_times\030\005 \001(\005\022\034\n\024added_stat_max_count\030\006 \001"
    "(\005\022\014\n\004race\030\007 \001(\005\022\020\n\004type\030\010 \001(\005B\002\030\001\022\013\n\003po"
    "s\030\t \001(\005\022 \n\024base_fighting_amount\030\n \001(\005B\002\030"
    "\001\022(\n\034best_refined_fighting_amount\030\013 \001(\005B"
    "\002\030\001\022\023\n\013can_refined\030\014 \001(\010\022\034\n\024next_level_e"
    "quipment\030\016 \001(\005\022\014\n\004taoz\030\017 \001(\005\022\031\n\021hecheng_"
    "equipment\030\020 \001(\005\022\024\n\014hecheng_type\030\021 \001(\005\022 \n"
    "\030normal_refined_max_times\030\027 \001(\005\022\020\n\010resou"
    "rce\030\030 \001(\005\022\033\n\023fashion_expire_time\030\031 \001(\003\022\025"
    "\n\rhecheng_limit\030\032 \001(\005\022\025\n\ryu_yi_ge_type\030\033"
    " \001(\005\022\035\n\025yu_yi_ge_bless_amount\030\034 \001(\005\022\030\n\020i"
    "nlay_hole_count\030\035 \001(\005\022\r\n\005spell\030\036 \001(\005\"\312\003\n"
    "\027MountEquipmentDataProto\022.\n\tbase_data\030\001 "
    "\001(\0132\033.app.message.GoodsDataProto\022\013\n\003pos\030"
    "\002 \001(\005\0223\n\tbase_stat\030\003 \001(\0132\034.app.message.S"
    "ingleStatProtoB\002\030\001\022 \n\024base_fighting_amou"
    "nt\030\004 \001(\005B\002\030\001\022\031\n\021refined_max_times\030\005 \001(\005\022"
    "\034\n\024added_stat_max_count\030\006 \001(\005\022(\n\034best_re"
    "fined_fighting_amount\030\013 \001(\005B\002\030\001\022\033\n\023requi"
    "re_mount_level\030\024 \001(\005\022\023\n\013can_refined\030\025 \001("
    "\010\022\034\n\024next_level_equipment\030\026 \001(\005\022 \n\030norma"
    "l_refined_max_times\030\027 \001(\005\022\031\n\021hecheng_equ"
    "ipment\030\030 \001(\005\022\024\n\014hecheng_type\030\031 \001(\005\022\025\n\rhe"
    "cheng_limit\030\032 \001(\005\"\252\002\n\025PetEquipmentDataPr"
    "oto\022.\n\tbase_data\030\001 \001(\0132\033.app.message.Goo"
    "dsDataProto\022\013\n\003pos\030\002 \001(\005\022\031\n\021refined_max_"
    "times\030\003 \001(\005\022\034\n\024added_stat_max_count\030\004 \001("
    "\005\022\023\n\013can_refined\030\005 \001(\010\022\034\n\024next_level_equ"
    "ipment\030\006 \001(\005\022 \n\030normal_refined_max_times"
    "\030\007 \001(\005\022\031\n\021hecheng_equipment\030\010 \001(\005\022\024\n\014hec"
    "heng_type\030\t \001(\005\022\025\n\rhecheng_limit\030\n \001(\005\"\341"
    "\003\n\030ShieldEquipmentDataProto\022.\n\tbase_data"
    "\030\001 \001(\0132\033.app.message.GoodsDataProto\022\013\n\003p"
    "os\030\002 \001(\005\0223\n\tbase_stat\030\003 \001(\0132\034.app.messag"
    "e.SingleStatProtoB\002\030\001\022 \n\024base_fighting_a"
    "mount\030\004 \001(\005B\002\030\001\022\031\n\021refined_max_times\030\005 \001"
    "(\005\022\034\n\024added_stat_max_count\030\006 \001(\005\022(\n\034best"
    "_refined_fighting_amount\030\013 \001(\005B\002\030\001\022\034\n\024re"
    "quire_shield_level\030\024 \001(\005\022\023\n\013can_refined\030"
    "\025 \001(\010\022\034\n\024next_level_equipment\030\026 \001(\005\022 \n\030n"
    "ormal_refined_max_times\030\027 \001(\005\022\031\n\021hecheng"
    "_equipment\030\030 \001(\005\022\024\n\014hecheng_type\030\031 \001(\005\022\025"
    "\n\rhecheng_limit\030\032 \001(\005\022\023\n\013shield_type\030\033 \001"
    "(\005\"\205\001\n\021MedicineDataProto\022.\n\tbase_data\030\001 "
    "\001(\0132\033.app.message.GoodsDataProto\022\020\n\010effi"
    "cacy\030\002 \001(\005\022\025\n\rmax_use_count\030\003 \001(\005\022\027\n\017exp"
    "_multiple_10\030\004 \001(\005\"\214\001\n%MultiPrizeOnLimit"
    "edTimeGoodsDataProto\022.\n\tbase_data\030\001 \001(\0132"
    "\033.app.message.GoodsDataProto\022\r\n\005multi\030\002 "
    "\001(\005\022\022\n\nstart_time\030\003 \001(\003\022\020\n\010end_time\030\004 \001("
    "\003\"\217\001\n\025UpgradeGoodsDataProto\022.\n\tbase_data"
    "\030\001 \001(\0132\033.app.message.GoodsDataProto\022\014\n\004t"
    "ype\030\002 \001(\005\022\020\n\010sub_type\030\004 \001(\005\022\021\n\tbig_level"
    "\030\005 \001(\005\022\023\n\013small_level\030\006 \001(\005\"\204\001\n\022DailyCar"
    "dDataProto\022.\n\tbase_data\030\001 \001(\0132\033.app.mess"
    "age.GoodsDataProto\022\025\n\rmax_use_count\030\002 \001("
    "\005\022\026\n\016free_use_count\030\003 \001(\005\022\017\n\007yuanbao\030\004 \001"
    "(\005\"r\n\022JinJieDanDataProto\022.\n\tbase_data\030\001 "
    "\001(\0132\033.app.message.GoodsDataProto\022\014\n\004type"
    "\030\002 \001(\005\022\016\n\006level1\030\003 \001(\005\022\016\n\006level2\030\004 \001(\005\"x"
    "\n\030JinJieLuckyCardDataProto\022.\n\tbase_data\030"
    "\001 \001(\0132\033.app.message.GoodsDataProto\022\014\n\004ty"
    "pe\030\002 \001(\005\022\020\n\010duration\030\003 \001(\005\022\014\n\004rate\030\004 \001(\005"
    "\"\177\n\027ChristmasGoodsDataProto\022.\n\tbase_data"
    "\030\001 \001(\0132\033.app.message.GoodsDataProto\022\014\n\004t"
    "ype\030\002 \001(\005\022\022\n\nshop_point\030\003 \001(\005\022\022\n\ntree_po"
    "int\030\004 \001(\005\"\246\001\n\025MarriageGiftDataProto\022.\n\tb"
    "ase_data\030\001 \001(\0132\033.app.message.GoodsDataPr"
    "oto\022\023\n\013add_hao_gan\030\002 \001(\005\022\017\n\007add_exp\030\003 \001("
    "\005\022\024\n\014add_real_air\030\004 \001(\005\022\022\n\nprice_type\030\005 "
    "\001(\005\022\r\n\005price\030\006 \001(\005\"\244\001\n\025NiDaoQianKunDataP"
    "roto\022.\n\tbase_data\030\001 \001(\0132\033.app.message.Go"
    "odsDataProto\0221\n\013sprite_stat\030\002 \001(\0132\034.app."
    "message.SpriteStatProto\022\027\n\017fighting_amou"
    "nt\030\003 \001(\005\022\017\n\007hao_gan\030\004 \001(\005\"f\n\021FireworkDat"
    "aProto\022.\n\tbase_data\030\001 \001(\0132\033.app.message."
    "GoodsDataProto\022\022\n\ncolor_type\030\002 \001(\005\022\r\n\005va"
    "lue\030\003 \001(\005\"\241\001\n\033QianNengHuanHuaLimitUpProt"
    "o\022.\n\tbase_data\030\001 \001(\0132\033.app.message.Goods"
    "DataProto\022\021\n\tmain_type\030\002 \001(\005\022\035\n\025required"
    "_object_level\030\003 \001(\005\022\020\n\010sub_type\030\004 \001(\005\022\016\n"
    "\006amount\030\005 \001(\005\"Q\n\014GemDataProto\022.\n\tbase_da"
    "ta\030\001 \001(\0132\033.app.message.GoodsDataProto\022\021\n"
    "\tgem_level\030\002 \001(\005\"]\n\027TransportationDataPr"
    "oto\022.\n\tbase_data\030\001 \001(\0132\033.app.message.Goo"
    "dsDataProto\022\022\n\ntrans_type\030\003 \001(\005\"\251\001\n\017BaoS"
    "hiDataProto\022.\n\tbase_data\030\001 \001(\0132\033.app.mes"
    "sage.GoodsDataProto\022\022\n\nequip_type\030\002 \003(\005\022"
    "9\n\005panel\030\003 \001(\0162*.app.message.PanelGoodsD"
    "ataProto.PanelType\022\027\n\017is_can_he_cheng\030\004 "
    "\001(\010\"T\n\023ChipsGoodsDataProto\022.\n\tbase_data\030"
    "\001 \001(\0132\033.app.message.GoodsDataProto\022\r\n\005ch"
    "ips\030\002 \001(\005\"\372\002\n\022SpellBookDataProto\022.\n\tbase"
    "_data\030\001 \001(\0132\033.app.message.GoodsDataProto"
    "\0227\n\004type\030\002 \001(\0162).app.message.SpellBookDa"
    "taProto.SpellType\022\032\n\016required_mount\030\003 \001("
    "\005B\002\030\001\022\035\n\025required_object_level\030\004 \001(\005\022\023\n\013"
    "output_desc\030\005 \001(\t\"\252\001\n\tSpellType\022\010\n\004HERO\020"
    "\001\022\t\n\005MOUNT\020\002\022\020\n\014SUPER_WEAPON\020\003\022\r\n\tSUPER_"
    "ARM\020\004\022\007\n\003BOW\020\005\022\007\n\003PET\020\006\022\014\n\010TIAN_JIE\020\007\022\014\n"
    "\010TIAN_ZUI\020\010\022\t\n\005CLOAK\020\t\022\n\n\006SHIELD\020\n\022\013\n\007LI"
    "NG_YU\020\013\022\025\n\021MEI_REN_TONG_LING\020\014\"c\n PetTon"
    "gLingGiftSpellExpDataProto\022.\n\tbase_data\030"
    "\001 \001(\0132\033.app.message.GoodsDataProto\022\017\n\007ad"
    "d_exp\030\002 \001(\005\"V\n\024ScriptGoodsDataProto\022.\n\tb"
    "ase_data\030\001 \001(\0132\033.app.message.GoodsDataPr"
    "oto\022\016\n\006script\030\002 \001(\005\"\235\r\n\023PanelGoodsDataPr"
    "oto\022.\n\tbase_data\030\001 \001(\0132\033.app.message.Goo"
    "dsDataProto\0229\n\005panel\030\002 \001(\0162*.app.message"
    ".PanelGoodsDataProto.PanelType\"\232\014\n\tPanel"
    "Type\022\t\n\005MOUNT\020\001\022\016\n\nBLACKSMITH\020\002\022\020\n\014SUPER"
    "_WEAPON\020\003\022\r\n\tSUPER_ARM\020\004\022\007\n\003BOW\020\005\022\t\n\005SPE"
    "LL\020\006\022\r\n\tGEM_PANEL\020\007\022\n\n\006DIVINE\020\010\022\023\n\017EQUIP"
    "MENT_LEVEL\020\t\022\007\n\003PET\020\n\022\014\n\010TIAN_ZUI\020\013\022\014\n\010T"
    "IAN_JIE\020\014\022\024\n\020SUPER_BLACKSMITH\020\r\022\020\n\014WEAPO"
    "N_XINFA\020\016\022\020\n\014EQUIP_TI_PIN\020\017\022\t\n\005DEMON\020\020\022\t"
    "\n\005CLOAK\020\021\022\014\n\010TRANSFER\020\022\022\r\n\tQI_ZHEN_1\020\023\022\r"
    "\n\tQI_ZHEN_2\020\024\022\r\n\tQI_ZHEN_3\020\025\022\r\n\tQI_ZHEN_"
    "4\020\026\022\r\n\tQI_ZHEN_5\020\027\022\r\n\tQI_ZHEN_6\020\030\022\r\n\tQI_"
    "ZHEN_7\020\031\022\r\n\tQI_ZHEN_8\020\032\022\r\n\tQI_ZHEN_9\020\033\022\016"
    "\n\nQI_ZHEN_10\020\034\022\016\n\nQI_ZHEN_11\020K\022\016\n\nQI_ZHE"
    "N_12\020L\022\016\n\nQI_ZHEN_13\020N\022\016\n\nQI_ZHEN_14\020O\022\016"
    "\n\nQI_ZHEN_15\020P\022\016\n\nQI_ZHEN_16\020Q\022\016\n\nQI_ZHE"
    "N_17\020R\022\016\n\nQI_ZHEN_18\020S\022\016\n\nQI_ZHEN_19\020T\022\016"
    "\n\nQI_ZHEN_20\020U\022\n\n\006MO_SHI\020\036\022\014\n\010MO_SHI_0\020\037"
    "\022\014\n\010MO_SHI_1\020 \022\014\n\010MO_SHI_2\020!\022\014\n\010MO_SHI_3"
    "\020\"\022\025\n\021QIAN_QIU_DA_JIE_0\020#\022\025\n\021QIAN_QIU_DA"
    "_JIE_1\020$\022\023\n\017QIAN_QIU_DA_JIE\020%\022\025\n\021CHI_HUO"
    "_SHEN_GONG\020&\022\017\n\013CHANGE_NAME\020\'\022\024\n\020CHANGE_"
    "RACE_CARD\020(\022\022\n\016NEW_DRAW_PRIZE\020)\022\024\n\020MOUNT"
    "_TONGLING_1\020*\022\024\n\020MOUNT_TONGLING_2\020+\022\024\n\020M"
    "OUNT_TONGLING_3\020,\022\024\n\020MOUNT_TONGLING_4\020-\022"
    "\024\n\020MOUNT_TONGLING_5\020.\022\024\n\020MOUNT_TONGLING_"
    "6\020/\022\024\n\020MOUNT_TONGLING_7\0200\022\024\n\020MOUNT_TONGL"
    "ING_8\0201\022\024\n\020MOUNT_TONGLING_9\0202\022\025\n\021MOUNT_T"
    "ONGLING_10\0203\022\013\n\007MO_BING\0204\022\r\n\tMO_BING_0\0205"
    "\022\r\n\tMO_BING_1\0206\022\r\n\tMO_BING_2\0207\022\r\n\tMO_BIN"
    "G_3\0208\022\r\n\tMO_BING_4\0209\022\r\n\tMO_BING_5\020:\022\r\n\tM"
    "O_BING_6\020;\022\r\n\tMO_BING_7\020<\022\r\n\tMO_BING_8\020="
    "\022\r\n\tMO_BING_9\020>\022\016\n\nMO_BING_10\020\?\022\016\n\nMO_BI"
    "NG_11\020@\022\021\n\rWASH_XUNZHANF\020F\022\014\n\010TIAN_XIE\020G"
    "\022\014\n\010MONOPOLY\020H\022\010\n\004LOVE\020I\022\n\n\006WU_DAO\020J\022\n\n\006"
    "SHIELD\020V\022\014\n\010SHIELD_1\020Y\022\014\n\010SHIELD_2\020Z\022\014\n\010"
    "SHIELD_3\020[\022\014\n\010SHIELD_4\020\\\022\014\n\010SHIELD_5\020]\022\022"
    "\n\016HERO_BOSS_CARD\020W\022\023\n\017GUILD_BOSS_CARD\020X\022"
    "\013\n\007LING_YU\020c\022\r\n\tMOON_CAKE\020d\022\021\n\rBOW_TONG_"
    "LING\020e\022\023\n\017BOW_TONG_LING_2\020f\022\023\n\017BOW_TONG_"
    "LING_3\020g\022\021\n\rPET_TONG_LING\020o\022\021\n\rINLAY_BAO"
    "_SHI\020y\022\014\n\007MO_FANG\020\203\001\022\r\n\010JIAN_DAO\020\204\001\"\263\001\n\023"
    "SpellXinfaDataProto\022.\n\tbase_data\030\001 \001(\0132\033"
    ".app.message.GoodsDataProto\022\033\n\023require_s"
    "pell_level\030\002 \001(\005\022$\n\004type\030\003 \001(\0162\026.app.mes"
    "sage.XinfaType\022\025\n\rrelease_range\030\013 \001(\005\022\022\n"
    "\nhurt_range\030\014 \001(\005\"\217\001\n\027YuanbaoPackageData"
    "Proto\022.\n\tbase_data\030\001 \001(\0132\033.app.message.G"
    "oodsDataProto\022\014\n\004cost\030\002 \001(\005\022\r\n\005title\030\003 \001"
    "(\t\022\023\n\007content\030\004 \001(\tB\002\030\001\022\022\n\nshow_price\030\005 "
    "\001(\005\"\222\001\n\031RefinedStatGoodsDataProto\022.\n\tbas"
    "e_data\030\001 \001(\0132\033.app.message.GoodsDataProt"
    "o\022\024\n\014refined_type\030\002 \001(\005\022\035\n\025required_obje"
    "ct_level\030\003 \001(\005\022\020\n\010sub_type\030\004 \001(\005\"\362\001\n\023Ble"
    "ssGoodsDataProto\022.\n\tbase_data\030\001 \001(\0132\033.ap"
    "p.message.GoodsDataProto\022\026\n\016add_belss_ty"
    "pe\030\002 \001(\005\022\031\n\021add_bless_percent\030\003 \001(\005\022\034\n\024a"
    "dd_bless_fix_amount\030\004 \001(\005\022\r\n\005level\030\005 \001(\005"
    "\022\034\n\024add_bless_clear_time\030\006 \001(\005\022\032\n\022add_bl"
    "ess_sub_type\030\007 \001(\005\022\021\n\tmax_level\030\010 \001(\005\"d\n"
    "\033SpellPracticeGoodsDataProto\022.\n\tbase_dat"
    "a\030\001 \001(\0132\033.app.message.GoodsDataProto\022\025\n\r"
    "upgrade_level\030\002 \001(\005\"p\n\nGoodsProto\022\r\n\005cou"
    "nt\030\001 \001(\005\022\016\n\006binded\030\002 \001(\010\022\023\n\013expire_time\030"
    "\003 \001(\003\022\030\n\020can_force_remove\030\004 \001(\010\022\024\n\014can_u"
    "se_time\030\005 \001(\003\"\265\006\n\016EquipmentProto\022\016\n\006bind"
    "ed\030\002 \001(\010\022\023\n\013expire_time\030\003 \001(\003\022\017\n\007quality"
    "\030\004 \001(\005\022/\n\tbase_stat\0302 \001(\0132\034.app.message."
    "SingleStatProto\022\034\n\024base_fighting_amount\030"
    "3 \001(\005\022$\n\034best_refined_fighting_amount\0304 "
    "\001(\005\0227\n\021best_refined_stat\0305 \001(\0132\034.app.mes"
    "sage.SingleStatProto\022\025\n\rrefined_times\030= "
    "\001(\005\0222\n\014refined_stat\030> \001(\0132\034.app.message."
    "SingleStatProto\022\037\n\027refined_fighting_amou"
    "nt\030\? \001(\005\022\030\n\020added_stat_count\030@ \001(\005\0220\n\nad"
    "ded_stat\030A \001(\0132\034.app.message.SingleStatP"
    "roto\022\035\n\025added_fighting_amount\030B \001(\005\022\027\n\017a"
    "dded_stat_type\030C \001(\005\022\025\n\ris_unmeltable\030D "
    "\001(\010\022\022\n\nti_pin_val\030E \001(\005\022;\n\025xun_zhang_ran"
    "dom_stat\030F \003(\0132\034.app.message.SingleStatP"
    "roto\022!\n\031xun_zhang_fighting_amount\030G \001(\005\022"
    "9\n\023fashion_random_stat\030H \003(\0132\034.app.messa"
    "ge.SingleStatProto\022\037\n\027fashion_fighting_a"
    "mount\030I \001(\005\022\033\n\023fashion_expire_time\030J \001(\003"
    "\0222\n\007bao_shi\030K \003(\0132!.app.message.Equipmen"
    "tBaoShiProto\022\027\n\017bao_shi_version\030L \001(\003\"\217\002"
    "\n\024EquipmentBaoShiProto\022\014\n\004icon\030\001 \001(\t\022\014\n\004"
    "name\030\002 \001(\t\022.\n\010baseStat\030\003 \003(\0132\034.app.messa"
    "ge.SingleStatProto\0220\n\nattachStat\030\004 \001(\0132\034"
    ".app.message.SingleStatProto\022\020\n\010hole_num"
    "\030\005 \001(\005\022\017\n\007quality\030\006 \001(\005\022\027\n\017fighting_amou"
    "nt\030\007 \001(\005\022\035\n\025base_stat_min_and_max\030\010 \003(\005\022"
    "\036\n\026attch_stat_min_and_max\030\t \003(\005\"\375\003\n\023Moun"
    "tEquipmentProto\022\016\n\006binded\030\002 \001(\010\022\023\n\013expir"
    "e_time\030\003 \001(\003\022\017\n\007quality\030\004 \001(\005\022/\n\tbase_st"
    "at\0302 \001(\0132\034.app.message.SingleStatProto\022\034"
    "\n\024base_fighting_amount\0303 \001(\005\022$\n\034best_ref"
    "ined_fighting_amount\0304 \001(\005\0227\n\021best_refin"
    "ed_stat\0305 \001(\0132\034.app.message.SingleStatPr"
    "oto\022\025\n\rrefined_times\030= \001(\005\0222\n\014refined_st"
    "at\030> \001(\0132\034.app.message.SingleStatProto\022\037"
    "\n\027refined_fighting_amount\030\? \001(\005\022\030\n\020added"
    "_stat_count\030@ \001(\005\0220\n\nadded_stat\030A \001(\0132\034."
    "app.message.SingleStatProto\022\035\n\025added_fig"
    "hting_amount\030B \001(\005\022\027\n\017added_stat_type\030C "
    "\001(\005\022\022\n\nti_pin_val\030E \001(\005\"\376\003\n\024ShieldEquipm"
    "entProto\022\016\n\006binded\030\002 \001(\010\022\023\n\013expire_time\030"
    "\003 \001(\003\022\017\n\007quality\030\004 \001(\005\022/\n\tbase_stat\0302 \001("
    "\0132\034.app.message.SingleStatProto\022\034\n\024base_"
    "fighting_amount\0303 \001(\005\022$\n\034best_refined_fi"
    "ghting_amount\0304 \001(\005\0227\n\021best_refined_stat"
    "\0305 \001(\0132\034.app.message.SingleStatProto\022\025\n\r"
    "refined_times\030= \001(\005\0222\n\014refined_stat\030> \001("
    "\0132\034.app.message.SingleStatProto\022\037\n\027refin"
    "ed_fighting_amount\030\? \001(\005\022\030\n\020added_stat_c"
    "ount\030@ \001(\005\0220\n\nadded_stat\030A \001(\0132\034.app.mes"
    "sage.SingleStatProto\022\035\n\025added_fighting_a"
    "mount\030B \001(\005\022\027\n\017added_stat_type\030C \001(\005\022\022\n\n"
    "ti_pin_val\030E \001(\005\"\373\003\n\021PetEquipmentProto\022\016"
    "\n\006binded\030\002 \001(\010\022\023\n\013expire_time\030\003 \001(\003\022\017\n\007q"
    "uality\030\004 \001(\005\022/\n\tbase_stat\0302 \001(\0132\034.app.me"
    "ssage.SingleStatProto\022\034\n\024base_fighting_a"
    "mount\0303 \001(\005\022$\n\034best_refined_fighting_amo"
    "unt\0304 \001(\005\0227\n\021best_refined_stat\0305 \001(\0132\034.a"
    "pp.message.SingleStatProto\022\025\n\rrefined_ti"
    "mes\030= \001(\005\0222\n\014refined_stat\030> \001(\0132\034.app.me"
    "ssage.SingleStatProto\022\037\n\027refined_fightin"
    "g_amount\030\? \001(\005\022\030\n\020added_stat_count\030@ \001(\005"
    "\0220\n\nadded_stat\030A \001(\0132\034.app.message.Singl"
    "eStatProto\022\035\n\025added_fighting_amount\030B \001("
    "\005\022\027\n\017added_stat_type\030C \001(\005\022\022\n\nti_pin_val"
    "\030E \001(\005\"\305\001\n\013BaoShiProto\022\016\n\006binded\030\002 \001(\010\022\023"
    "\n\013expire_time\030\003 \001(\003\022.\n\010baseStat\030\005 \003(\0132\034."
    "app.message.SingleStatProto\0220\n\nattachSta"
    "t\030\006 \001(\0132\034.app.message.SingleStatProto\022\026\n"
    "\016fightingAmount\030\007 \001(\005\022\027\n\017bao_shi_version"
    "\030\010 \001(\003\"\210\001\n\027SuperWeaponGemDataProto\022.\n\tba"
    "se_data\030\001 \001(\0132\033.app.message.GoodsDataPro"
    "to\022.\n\010add_stat\030\002 \001(\0132\034.app.message.Sprit"
    "eStatProto\022\r\n\005level\030\003 \001(\005\"\310\001\n\021GoodsWrapp"
    "erProto\022\023\n\013static_data\030\001 \001(\014\022\024\n\014dynamic_"
    "data\030\002 \001(\014\022\020\n\005count\030\n \001(\005:\0011\022\016\n\006binded\030\013"
    " \001(\010\022\023\n\013expire_time\030\014 \001(\003\022\020\n\010duration\030\r "
    "\001(\005\022\013\n\003tab\030\016 \001(\005\022\024\n\014can_use_time\030\017 \001(\003\022\034"
    "\n\024can_use_after_millis\030\020 \001(\003\"b\n\031Exchange"
    "GoodsWrapperProto\022\023\n\013static_data\030\001 \001(\014\022\r"
    "\n\005count\030\002 \001(\005\022\024\n\014canUsebinded\030\003 \001(\010\022\013\n\003t"
    "ab\030\004 \001(\005*4\n\tXinfaType\022\n\n\006CIRCLE\020\001\022\r\n\tREC"
    "TANGLE\020\002\022\014\n\010TRIANGLE\020\003*\327\001\n\rGoodsBornType"
    "\022\n\n\006DIVINE\020\001\022\024\n\020EQUIP_GAOJI_MELT\020\002\022\016\n\nDR"
    "AW_PRIZE\020\003\022\024\n\020LUCKY_DRAW_PRIZE\020\004\022\030\n\024LUCK"
    "Y_POINT_EXCHANGE\020\005\022\025\n\021DAILY_LUCKY_WHEEL\020"
    "\006\022\022\n\016NEW_DRAW_PRIZE\020\007\022\026\n\022NEW_POINT_EXCHA"
    "NGE\020\010\022\020\n\014CREDITS_DRAW\020\t\022\017\n\013SECRET_SHOP\020\n"
    "B\036\n\014app.protobufB\014GoodsContentH\001", 11072);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goods.proto", &protobuf_RegisterTypes);
  GoodsDataProto::default_instance_ = new GoodsDataProto();
  EquipmentDataProto::default_instance_ = new EquipmentDataProto();
  MountEquipmentDataProto::default_instance_ = new MountEquipmentDataProto();
  PetEquipmentDataProto::default_instance_ = new PetEquipmentDataProto();
  ShieldEquipmentDataProto::default_instance_ = new ShieldEquipmentDataProto();
  MedicineDataProto::default_instance_ = new MedicineDataProto();
  MultiPrizeOnLimitedTimeGoodsDataProto::default_instance_ = new MultiPrizeOnLimitedTimeGoodsDataProto();
  UpgradeGoodsDataProto::default_instance_ = new UpgradeGoodsDataProto();
  DailyCardDataProto::default_instance_ = new DailyCardDataProto();
  JinJieDanDataProto::default_instance_ = new JinJieDanDataProto();
  JinJieLuckyCardDataProto::default_instance_ = new JinJieLuckyCardDataProto();
  ChristmasGoodsDataProto::default_instance_ = new ChristmasGoodsDataProto();
  MarriageGiftDataProto::default_instance_ = new MarriageGiftDataProto();
  NiDaoQianKunDataProto::default_instance_ = new NiDaoQianKunDataProto();
  FireworkDataProto::default_instance_ = new FireworkDataProto();
  QianNengHuanHuaLimitUpProto::default_instance_ = new QianNengHuanHuaLimitUpProto();
  GemDataProto::default_instance_ = new GemDataProto();
  TransportationDataProto::default_instance_ = new TransportationDataProto();
  BaoShiDataProto::default_instance_ = new BaoShiDataProto();
  ChipsGoodsDataProto::default_instance_ = new ChipsGoodsDataProto();
  SpellBookDataProto::default_instance_ = new SpellBookDataProto();
  PetTongLingGiftSpellExpDataProto::default_instance_ = new PetTongLingGiftSpellExpDataProto();
  ScriptGoodsDataProto::default_instance_ = new ScriptGoodsDataProto();
  PanelGoodsDataProto::default_instance_ = new PanelGoodsDataProto();
  SpellXinfaDataProto::default_instance_ = new SpellXinfaDataProto();
  YuanbaoPackageDataProto::default_instance_ = new YuanbaoPackageDataProto();
  RefinedStatGoodsDataProto::default_instance_ = new RefinedStatGoodsDataProto();
  BlessGoodsDataProto::default_instance_ = new BlessGoodsDataProto();
  SpellPracticeGoodsDataProto::default_instance_ = new SpellPracticeGoodsDataProto();
  GoodsProto::default_instance_ = new GoodsProto();
  EquipmentProto::default_instance_ = new EquipmentProto();
  EquipmentBaoShiProto::default_instance_ = new EquipmentBaoShiProto();
  MountEquipmentProto::default_instance_ = new MountEquipmentProto();
  ShieldEquipmentProto::default_instance_ = new ShieldEquipmentProto();
  PetEquipmentProto::default_instance_ = new PetEquipmentProto();
  BaoShiProto::default_instance_ = new BaoShiProto();
  SuperWeaponGemDataProto::default_instance_ = new SuperWeaponGemDataProto();
  GoodsWrapperProto::default_instance_ = new GoodsWrapperProto();
  ExchangeGoodsWrapperProto::default_instance_ = new ExchangeGoodsWrapperProto();
  GoodsDataProto::default_instance_->InitAsDefaultInstance();
  EquipmentDataProto::default_instance_->InitAsDefaultInstance();
  MountEquipmentDataProto::default_instance_->InitAsDefaultInstance();
  PetEquipmentDataProto::default_instance_->InitAsDefaultInstance();
  ShieldEquipmentDataProto::default_instance_->InitAsDefaultInstance();
  MedicineDataProto::default_instance_->InitAsDefaultInstance();
  MultiPrizeOnLimitedTimeGoodsDataProto::default_instance_->InitAsDefaultInstance();
  UpgradeGoodsDataProto::default_instance_->InitAsDefaultInstance();
  DailyCardDataProto::default_instance_->InitAsDefaultInstance();
  JinJieDanDataProto::default_instance_->InitAsDefaultInstance();
  JinJieLuckyCardDataProto::default_instance_->InitAsDefaultInstance();
  ChristmasGoodsDataProto::default_instance_->InitAsDefaultInstance();
  MarriageGiftDataProto::default_instance_->InitAsDefaultInstance();
  NiDaoQianKunDataProto::default_instance_->InitAsDefaultInstance();
  FireworkDataProto::default_instance_->InitAsDefaultInstance();
  QianNengHuanHuaLimitUpProto::default_instance_->InitAsDefaultInstance();
  GemDataProto::default_instance_->InitAsDefaultInstance();
  TransportationDataProto::default_instance_->InitAsDefaultInstance();
  BaoShiDataProto::default_instance_->InitAsDefaultInstance();
  ChipsGoodsDataProto::default_instance_->InitAsDefaultInstance();
  SpellBookDataProto::default_instance_->InitAsDefaultInstance();
  PetTongLingGiftSpellExpDataProto::default_instance_->InitAsDefaultInstance();
  ScriptGoodsDataProto::default_instance_->InitAsDefaultInstance();
  PanelGoodsDataProto::default_instance_->InitAsDefaultInstance();
  SpellXinfaDataProto::default_instance_->InitAsDefaultInstance();
  YuanbaoPackageDataProto::default_instance_->InitAsDefaultInstance();
  RefinedStatGoodsDataProto::default_instance_->InitAsDefaultInstance();
  BlessGoodsDataProto::default_instance_->InitAsDefaultInstance();
  SpellPracticeGoodsDataProto::default_instance_->InitAsDefaultInstance();
  GoodsProto::default_instance_->InitAsDefaultInstance();
  EquipmentProto::default_instance_->InitAsDefaultInstance();
  EquipmentBaoShiProto::default_instance_->InitAsDefaultInstance();
  MountEquipmentProto::default_instance_->InitAsDefaultInstance();
  ShieldEquipmentProto::default_instance_->InitAsDefaultInstance();
  PetEquipmentProto::default_instance_->InitAsDefaultInstance();
  BaoShiProto::default_instance_->InitAsDefaultInstance();
  SuperWeaponGemDataProto::default_instance_->InitAsDefaultInstance();
  GoodsWrapperProto::default_instance_->InitAsDefaultInstance();
  ExchangeGoodsWrapperProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_goods_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_goods_2eproto {
  StaticDescriptorInitializer_goods_2eproto() {
    protobuf_AddDesc_goods_2eproto();
  }
} static_descriptor_initializer_goods_2eproto_;
const ::google::protobuf::EnumDescriptor* XinfaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XinfaType_descriptor_;
}
bool XinfaType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GoodsBornType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsBornType_descriptor_;
}
bool GoodsBornType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsDataProto::kIdFieldNumber;
const int GoodsDataProto::kNameFieldNumber;
const int GoodsDataProto::kDescFieldNumber;
const int GoodsDataProto::kMaxCountFieldNumber;
const int GoodsDataProto::kSellPriceFieldNumber;
const int GoodsDataProto::kQualityFieldNumber;
const int GoodsDataProto::kRequireLevelFieldNumber;
const int GoodsDataProto::kRequireMaxLevelFieldNumber;
const int GoodsDataProto::kIconFieldNumber;
const int GoodsDataProto::kDropableFieldNumber;
const int GoodsDataProto::kVerifySellFieldNumber;
const int GoodsDataProto::kVerifyDropFieldNumber;
const int GoodsDataProto::kCdTypeFieldNumber;
const int GoodsDataProto::kUseableFieldNumber;
const int GoodsDataProto::kBulkUseableFieldNumber;
const int GoodsDataProto::kCanSetShortcutFieldNumber;
const int GoodsDataProto::kIsSuggestionFieldNumber;
const int GoodsDataProto::kYitianshenjueCuilianValueFieldNumber;
#endif  // !_MSC_VER

GoodsDataProto::GoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsDataProto::InitAsDefaultInstance() {
}

GoodsDataProto::GoodsDataProto(const GoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_count_ = 1;
  sell_price_ = 0;
  quality_ = 0;
  require_level_ = 1;
  require_max_level_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dropable_ = true;
  verify_sell_ = false;
  verify_drop_ = false;
  cd_type_ = 0;
  useable_ = false;
  bulk_useable_ = false;
  can_set_shortcut_ = false;
  is_suggestion_ = false;
  yitianshenjue_cuilian_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsDataProto::~GoodsDataProto() {
  SharedDtor();
}

void GoodsDataProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void GoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsDataProto_descriptor_;
}

const GoodsDataProto& GoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

GoodsDataProto* GoodsDataProto::default_instance_ = NULL;

GoodsDataProto* GoodsDataProto::New() const {
  return new GoodsDataProto;
}

void GoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    max_count_ = 1;
    sell_price_ = 0;
    quality_ = 0;
    require_level_ = 1;
    require_max_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    dropable_ = true;
    verify_sell_ = false;
    verify_drop_ = false;
    cd_type_ = 0;
    useable_ = false;
    bulk_useable_ = false;
    can_set_shortcut_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_suggestion_ = false;
    yitianshenjue_cuilian_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional bytes desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_count;
        break;
      }

      // optional int32 max_count = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sell_price;
        break;
      }

      // optional int32 sell_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_price_)));
          set_has_sell_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_quality;
        break;
      }

      // optional int32 quality = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_require_level;
        break;
      }

      // optional int32 require_level = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_level_)));
          set_has_require_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_icon;
        break;
      }

      // optional string icon = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dropable;
        break;
      }

      // optional bool dropable = 15 [default = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dropable_)));
          set_has_dropable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_verify_sell;
        break;
      }

      // optional bool verify_sell = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verify_sell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verify_sell_)));
          set_has_verify_sell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_verify_drop;
        break;
      }

      // optional bool verify_drop = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verify_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verify_drop_)));
          set_has_verify_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cd_type;
        break;
      }

      // optional int32 cd_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_type_)));
          set_has_cd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_useable;
        break;
      }

      // optional bool useable = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useable_)));
          set_has_useable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bulk_useable;
        break;
      }

      // optional bool bulk_useable = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulk_useable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bulk_useable_)));
          set_has_bulk_useable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_can_set_shortcut;
        break;
      }

      // optional bool can_set_shortcut = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_set_shortcut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_shortcut_)));
          set_has_can_set_shortcut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_is_suggestion;
        break;
      }

      // optional bool is_suggestion = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suggestion_)));
          set_has_is_suggestion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_yitianshenjue_cuilian_value;
        break;
      }

      // optional int32 yitianshenjue_cuilian_value = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yitianshenjue_cuilian_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yitianshenjue_cuilian_value_)));
          set_has_yitianshenjue_cuilian_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_require_max_level;
        break;
      }

      // optional int32 require_max_level = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_max_level_)));
          set_has_require_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->desc(), output);
  }

  // optional int32 max_count = 5 [default = 1];
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_count(), output);
  }

  // optional int32 sell_price = 7;
  if (has_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sell_price(), output);
  }

  // optional int32 quality = 9;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality(), output);
  }

  // optional int32 require_level = 10 [default = 1];
  if (has_require_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->require_level(), output);
  }

  // optional string icon = 11;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->icon(), output);
  }

  // optional bool dropable = 15 [default = true];
  if (has_dropable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->dropable(), output);
  }

  // optional bool verify_sell = 16;
  if (has_verify_sell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->verify_sell(), output);
  }

  // optional bool verify_drop = 17;
  if (has_verify_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->verify_drop(), output);
  }

  // optional int32 cd_type = 18;
  if (has_cd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->cd_type(), output);
  }

  // optional bool useable = 19;
  if (has_useable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->useable(), output);
  }

  // optional bool bulk_useable = 20;
  if (has_bulk_useable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->bulk_useable(), output);
  }

  // optional bool can_set_shortcut = 21;
  if (has_can_set_shortcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->can_set_shortcut(), output);
  }

  // optional bool is_suggestion = 22;
  if (has_is_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_suggestion(), output);
  }

  // optional int32 yitianshenjue_cuilian_value = 23;
  if (has_yitianshenjue_cuilian_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->yitianshenjue_cuilian_value(), output);
  }

  // optional int32 require_max_level = 24;
  if (has_require_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->require_max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes desc = 3;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->desc(), target);
  }

  // optional int32 max_count = 5 [default = 1];
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_count(), target);
  }

  // optional int32 sell_price = 7;
  if (has_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sell_price(), target);
  }

  // optional int32 quality = 9;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality(), target);
  }

  // optional int32 require_level = 10 [default = 1];
  if (has_require_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->require_level(), target);
  }

  // optional string icon = 11;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->icon(), target);
  }

  // optional bool dropable = 15 [default = true];
  if (has_dropable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->dropable(), target);
  }

  // optional bool verify_sell = 16;
  if (has_verify_sell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->verify_sell(), target);
  }

  // optional bool verify_drop = 17;
  if (has_verify_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->verify_drop(), target);
  }

  // optional int32 cd_type = 18;
  if (has_cd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->cd_type(), target);
  }

  // optional bool useable = 19;
  if (has_useable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->useable(), target);
  }

  // optional bool bulk_useable = 20;
  if (has_bulk_useable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->bulk_useable(), target);
  }

  // optional bool can_set_shortcut = 21;
  if (has_can_set_shortcut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->can_set_shortcut(), target);
  }

  // optional bool is_suggestion = 22;
  if (has_is_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_suggestion(), target);
  }

  // optional int32 yitianshenjue_cuilian_value = 23;
  if (has_yitianshenjue_cuilian_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->yitianshenjue_cuilian_value(), target);
  }

  // optional int32 require_max_level = 24;
  if (has_require_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->require_max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional int32 max_count = 5 [default = 1];
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

    // optional int32 sell_price = 7;
    if (has_sell_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_price());
    }

    // optional int32 quality = 9;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 require_level = 10 [default = 1];
    if (has_require_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_level());
    }

    // optional int32 require_max_level = 24;
    if (has_require_max_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_max_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string icon = 11;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional bool dropable = 15 [default = true];
    if (has_dropable()) {
      total_size += 1 + 1;
    }

    // optional bool verify_sell = 16;
    if (has_verify_sell()) {
      total_size += 2 + 1;
    }

    // optional bool verify_drop = 17;
    if (has_verify_drop()) {
      total_size += 2 + 1;
    }

    // optional int32 cd_type = 18;
    if (has_cd_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_type());
    }

    // optional bool useable = 19;
    if (has_useable()) {
      total_size += 2 + 1;
    }

    // optional bool bulk_useable = 20;
    if (has_bulk_useable()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_shortcut = 21;
    if (has_can_set_shortcut()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool is_suggestion = 22;
    if (has_is_suggestion()) {
      total_size += 2 + 1;
    }

    // optional int32 yitianshenjue_cuilian_value = 23;
    if (has_yitianshenjue_cuilian_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yitianshenjue_cuilian_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsDataProto::MergeFrom(const GoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_sell_price()) {
      set_sell_price(from.sell_price());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_require_level()) {
      set_require_level(from.require_level());
    }
    if (from.has_require_max_level()) {
      set_require_max_level(from.require_max_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_dropable()) {
      set_dropable(from.dropable());
    }
    if (from.has_verify_sell()) {
      set_verify_sell(from.verify_sell());
    }
    if (from.has_verify_drop()) {
      set_verify_drop(from.verify_drop());
    }
    if (from.has_cd_type()) {
      set_cd_type(from.cd_type());
    }
    if (from.has_useable()) {
      set_useable(from.useable());
    }
    if (from.has_bulk_useable()) {
      set_bulk_useable(from.bulk_useable());
    }
    if (from.has_can_set_shortcut()) {
      set_can_set_shortcut(from.can_set_shortcut());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_suggestion()) {
      set_is_suggestion(from.is_suggestion());
    }
    if (from.has_yitianshenjue_cuilian_value()) {
      set_yitianshenjue_cuilian_value(from.yitianshenjue_cuilian_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsDataProto::CopyFrom(const GoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsDataProto::IsInitialized() const {

  return true;
}

void GoodsDataProto::Swap(GoodsDataProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(max_count_, other->max_count_);
    std::swap(sell_price_, other->sell_price_);
    std::swap(quality_, other->quality_);
    std::swap(require_level_, other->require_level_);
    std::swap(require_max_level_, other->require_max_level_);
    std::swap(icon_, other->icon_);
    std::swap(dropable_, other->dropable_);
    std::swap(verify_sell_, other->verify_sell_);
    std::swap(verify_drop_, other->verify_drop_);
    std::swap(cd_type_, other->cd_type_);
    std::swap(useable_, other->useable_);
    std::swap(bulk_useable_, other->bulk_useable_);
    std::swap(can_set_shortcut_, other->can_set_shortcut_);
    std::swap(is_suggestion_, other->is_suggestion_);
    std::swap(yitianshenjue_cuilian_value_, other->yitianshenjue_cuilian_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsDataProto_descriptor_;
  metadata.reflection = GoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentDataProto::kBaseDataFieldNumber;
const int EquipmentDataProto::kEquipTypeFieldNumber;
const int EquipmentDataProto::kBaseStatFieldNumber;
const int EquipmentDataProto::kRefinedMaxTimesFieldNumber;
const int EquipmentDataProto::kAddedStatMaxCountFieldNumber;
const int EquipmentDataProto::kRaceFieldNumber;
const int EquipmentDataProto::kTypeFieldNumber;
const int EquipmentDataProto::kPosFieldNumber;
const int EquipmentDataProto::kBaseFightingAmountFieldNumber;
const int EquipmentDataProto::kBestRefinedFightingAmountFieldNumber;
const int EquipmentDataProto::kCanRefinedFieldNumber;
const int EquipmentDataProto::kNextLevelEquipmentFieldNumber;
const int EquipmentDataProto::kTaozFieldNumber;
const int EquipmentDataProto::kHechengEquipmentFieldNumber;
const int EquipmentDataProto::kHechengTypeFieldNumber;
const int EquipmentDataProto::kNormalRefinedMaxTimesFieldNumber;
const int EquipmentDataProto::kResourceFieldNumber;
const int EquipmentDataProto::kFashionExpireTimeFieldNumber;
const int EquipmentDataProto::kHechengLimitFieldNumber;
const int EquipmentDataProto::kYuYiGeTypeFieldNumber;
const int EquipmentDataProto::kYuYiGeBlessAmountFieldNumber;
const int EquipmentDataProto::kInlayHoleCountFieldNumber;
const int EquipmentDataProto::kSpellFieldNumber;
#endif  // !_MSC_VER

EquipmentDataProto::EquipmentDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
  base_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

EquipmentDataProto::EquipmentDataProto(const EquipmentDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  equip_type_ = 0;
  base_stat_ = NULL;
  refined_max_times_ = 0;
  added_stat_max_count_ = 0;
  race_ = 0;
  type_ = 0;
  pos_ = 0;
  base_fighting_amount_ = 0;
  best_refined_fighting_amount_ = 0;
  can_refined_ = false;
  next_level_equipment_ = 0;
  taoz_ = 0;
  hecheng_equipment_ = 0;
  hecheng_type_ = 0;
  normal_refined_max_times_ = 0;
  resource_ = 0;
  fashion_expire_time_ = GOOGLE_LONGLONG(0);
  hecheng_limit_ = 0;
  yu_yi_ge_type_ = 0;
  yu_yi_ge_bless_amount_ = 0;
  inlay_hole_count_ = 0;
  spell_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentDataProto::~EquipmentDataProto() {
  SharedDtor();
}

void EquipmentDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete base_stat_;
  }
}

void EquipmentDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentDataProto_descriptor_;
}

const EquipmentDataProto& EquipmentDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

EquipmentDataProto* EquipmentDataProto::default_instance_ = NULL;

EquipmentDataProto* EquipmentDataProto::New() const {
  return new EquipmentDataProto;
}

void EquipmentDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    equip_type_ = 0;
    if (has_base_stat()) {
      if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_max_times_ = 0;
    added_stat_max_count_ = 0;
    race_ = 0;
    type_ = 0;
    pos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    base_fighting_amount_ = 0;
    best_refined_fighting_amount_ = 0;
    can_refined_ = false;
    next_level_equipment_ = 0;
    taoz_ = 0;
    hecheng_equipment_ = 0;
    hecheng_type_ = 0;
    normal_refined_max_times_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    resource_ = 0;
    fashion_expire_time_ = GOOGLE_LONGLONG(0);
    hecheng_limit_ = 0;
    yu_yi_ge_type_ = 0;
    yu_yi_ge_bless_amount_ = 0;
    inlay_hole_count_ = 0;
    spell_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_type;
        break;
      }

      // optional int32 equip_type = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base_stat;
        break;
      }

      // optional .app.message.SingleStatProto base_stat = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refined_max_times;
        break;
      }

      // optional int32 refined_max_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_max_times_)));
          set_has_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_added_stat_max_count;
        break;
      }

      // optional int32 added_stat_max_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_max_count_)));
          set_has_added_stat_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_race;
        break;
      }

      // optional int32 race = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional int32 type = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional int32 pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 10 [deprecated = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_best_refined_fighting_amount;
        break;
      }

      // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_refined_fighting_amount_)));
          set_has_best_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_can_refined;
        break;
      }

      // optional bool can_refined = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_refined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_refined_)));
          set_has_can_refined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_next_level_equipment;
        break;
      }

      // optional int32 next_level_equipment = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_level_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_level_equipment_)));
          set_has_next_level_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_taoz;
        break;
      }

      // optional int32 taoz = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taoz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taoz_)));
          set_has_taoz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hecheng_equipment;
        break;
      }

      // optional int32 hecheng_equipment = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_equipment_)));
          set_has_hecheng_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hecheng_type;
        break;
      }

      // optional int32 hecheng_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_type_)));
          set_has_hecheng_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_normal_refined_max_times;
        break;
      }

      // optional int32 normal_refined_max_times = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_refined_max_times_)));
          set_has_normal_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_resource;
        break;
      }

      // optional int32 resource = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_fashion_expire_time;
        break;
      }

      // optional int64 fashion_expire_time = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fashion_expire_time_)));
          set_has_fashion_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_hecheng_limit;
        break;
      }

      // optional int32 hecheng_limit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_limit_)));
          set_has_hecheng_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_yu_yi_ge_type;
        break;
      }

      // optional int32 yu_yi_ge_type = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yu_yi_ge_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yu_yi_ge_type_)));
          set_has_yu_yi_ge_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_yu_yi_ge_bless_amount;
        break;
      }

      // optional int32 yu_yi_ge_bless_amount = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yu_yi_ge_bless_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yu_yi_ge_bless_amount_)));
          set_has_yu_yi_ge_bless_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_inlay_hole_count;
        break;
      }

      // optional int32 inlay_hole_count = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlay_hole_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inlay_hole_count_)));
          set_has_inlay_hole_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_spell;
        break;
      }

      // optional int32 spell = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spell_)));
          set_has_spell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 equip_type = 2 [deprecated = true];
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_type(), output);
  }

  // optional .app.message.SingleStatProto base_stat = 4 [deprecated = true];
  if (has_base_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base_stat(), output);
  }

  // optional int32 refined_max_times = 5;
  if (has_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refined_max_times(), output);
  }

  // optional int32 added_stat_max_count = 6;
  if (has_added_stat_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->added_stat_max_count(), output);
  }

  // optional int32 race = 7;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->race(), output);
  }

  // optional int32 type = 8 [deprecated = true];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pos(), output);
  }

  // optional int32 base_fighting_amount = 10 [deprecated = true];
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->base_fighting_amount(), output);
  }

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  if (has_best_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->best_refined_fighting_amount(), output);
  }

  // optional bool can_refined = 12;
  if (has_can_refined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_refined(), output);
  }

  // optional int32 next_level_equipment = 14;
  if (has_next_level_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->next_level_equipment(), output);
  }

  // optional int32 taoz = 15;
  if (has_taoz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->taoz(), output);
  }

  // optional int32 hecheng_equipment = 16;
  if (has_hecheng_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hecheng_equipment(), output);
  }

  // optional int32 hecheng_type = 17;
  if (has_hecheng_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hecheng_type(), output);
  }

  // optional int32 normal_refined_max_times = 23;
  if (has_normal_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->normal_refined_max_times(), output);
  }

  // optional int32 resource = 24;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->resource(), output);
  }

  // optional int64 fashion_expire_time = 25;
  if (has_fashion_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->fashion_expire_time(), output);
  }

  // optional int32 hecheng_limit = 26;
  if (has_hecheng_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hecheng_limit(), output);
  }

  // optional int32 yu_yi_ge_type = 27;
  if (has_yu_yi_ge_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->yu_yi_ge_type(), output);
  }

  // optional int32 yu_yi_ge_bless_amount = 28;
  if (has_yu_yi_ge_bless_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->yu_yi_ge_bless_amount(), output);
  }

  // optional int32 inlay_hole_count = 29;
  if (has_inlay_hole_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->inlay_hole_count(), output);
  }

  // optional int32 spell = 30;
  if (has_spell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->spell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 equip_type = 2 [deprecated = true];
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_type(), target);
  }

  // optional .app.message.SingleStatProto base_stat = 4 [deprecated = true];
  if (has_base_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base_stat(), target);
  }

  // optional int32 refined_max_times = 5;
  if (has_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refined_max_times(), target);
  }

  // optional int32 added_stat_max_count = 6;
  if (has_added_stat_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->added_stat_max_count(), target);
  }

  // optional int32 race = 7;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->race(), target);
  }

  // optional int32 type = 8 [deprecated = true];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pos(), target);
  }

  // optional int32 base_fighting_amount = 10 [deprecated = true];
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->base_fighting_amount(), target);
  }

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  if (has_best_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->best_refined_fighting_amount(), target);
  }

  // optional bool can_refined = 12;
  if (has_can_refined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_refined(), target);
  }

  // optional int32 next_level_equipment = 14;
  if (has_next_level_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->next_level_equipment(), target);
  }

  // optional int32 taoz = 15;
  if (has_taoz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->taoz(), target);
  }

  // optional int32 hecheng_equipment = 16;
  if (has_hecheng_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hecheng_equipment(), target);
  }

  // optional int32 hecheng_type = 17;
  if (has_hecheng_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hecheng_type(), target);
  }

  // optional int32 normal_refined_max_times = 23;
  if (has_normal_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->normal_refined_max_times(), target);
  }

  // optional int32 resource = 24;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->resource(), target);
  }

  // optional int64 fashion_expire_time = 25;
  if (has_fashion_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->fashion_expire_time(), target);
  }

  // optional int32 hecheng_limit = 26;
  if (has_hecheng_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hecheng_limit(), target);
  }

  // optional int32 yu_yi_ge_type = 27;
  if (has_yu_yi_ge_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->yu_yi_ge_type(), target);
  }

  // optional int32 yu_yi_ge_bless_amount = 28;
  if (has_yu_yi_ge_bless_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->yu_yi_ge_bless_amount(), target);
  }

  // optional int32 inlay_hole_count = 29;
  if (has_inlay_hole_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->inlay_hole_count(), target);
  }

  // optional int32 spell = 30;
  if (has_spell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->spell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 equip_type = 2 [deprecated = true];
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // optional .app.message.SingleStatProto base_stat = 4 [deprecated = true];
    if (has_base_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_stat());
    }

    // optional int32 refined_max_times = 5;
    if (has_refined_max_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_max_times());
    }

    // optional int32 added_stat_max_count = 6;
    if (has_added_stat_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_max_count());
    }

    // optional int32 race = 7;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 type = 8 [deprecated = true];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 base_fighting_amount = 10 [deprecated = true];
    if (has_base_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
    if (has_best_refined_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_refined_fighting_amount());
    }

    // optional bool can_refined = 12;
    if (has_can_refined()) {
      total_size += 1 + 1;
    }

    // optional int32 next_level_equipment = 14;
    if (has_next_level_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_level_equipment());
    }

    // optional int32 taoz = 15;
    if (has_taoz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taoz());
    }

    // optional int32 hecheng_equipment = 16;
    if (has_hecheng_equipment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_equipment());
    }

    // optional int32 hecheng_type = 17;
    if (has_hecheng_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_type());
    }

    // optional int32 normal_refined_max_times = 23;
    if (has_normal_refined_max_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_refined_max_times());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 resource = 24;
    if (has_resource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // optional int64 fashion_expire_time = 25;
    if (has_fashion_expire_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fashion_expire_time());
    }

    // optional int32 hecheng_limit = 26;
    if (has_hecheng_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_limit());
    }

    // optional int32 yu_yi_ge_type = 27;
    if (has_yu_yi_ge_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yu_yi_ge_type());
    }

    // optional int32 yu_yi_ge_bless_amount = 28;
    if (has_yu_yi_ge_bless_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yu_yi_ge_bless_amount());
    }

    // optional int32 inlay_hole_count = 29;
    if (has_inlay_hole_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inlay_hole_count());
    }

    // optional int32 spell = 30;
    if (has_spell()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentDataProto::MergeFrom(const EquipmentDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_base_stat()) {
      mutable_base_stat()->::app::message::SingleStatProto::MergeFrom(from.base_stat());
    }
    if (from.has_refined_max_times()) {
      set_refined_max_times(from.refined_max_times());
    }
    if (from.has_added_stat_max_count()) {
      set_added_stat_max_count(from.added_stat_max_count());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_best_refined_fighting_amount()) {
      set_best_refined_fighting_amount(from.best_refined_fighting_amount());
    }
    if (from.has_can_refined()) {
      set_can_refined(from.can_refined());
    }
    if (from.has_next_level_equipment()) {
      set_next_level_equipment(from.next_level_equipment());
    }
    if (from.has_taoz()) {
      set_taoz(from.taoz());
    }
    if (from.has_hecheng_equipment()) {
      set_hecheng_equipment(from.hecheng_equipment());
    }
    if (from.has_hecheng_type()) {
      set_hecheng_type(from.hecheng_type());
    }
    if (from.has_normal_refined_max_times()) {
      set_normal_refined_max_times(from.normal_refined_max_times());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_fashion_expire_time()) {
      set_fashion_expire_time(from.fashion_expire_time());
    }
    if (from.has_hecheng_limit()) {
      set_hecheng_limit(from.hecheng_limit());
    }
    if (from.has_yu_yi_ge_type()) {
      set_yu_yi_ge_type(from.yu_yi_ge_type());
    }
    if (from.has_yu_yi_ge_bless_amount()) {
      set_yu_yi_ge_bless_amount(from.yu_yi_ge_bless_amount());
    }
    if (from.has_inlay_hole_count()) {
      set_inlay_hole_count(from.inlay_hole_count());
    }
    if (from.has_spell()) {
      set_spell(from.spell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentDataProto::CopyFrom(const EquipmentDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentDataProto::IsInitialized() const {

  return true;
}

void EquipmentDataProto::Swap(EquipmentDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(equip_type_, other->equip_type_);
    std::swap(base_stat_, other->base_stat_);
    std::swap(refined_max_times_, other->refined_max_times_);
    std::swap(added_stat_max_count_, other->added_stat_max_count_);
    std::swap(race_, other->race_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(best_refined_fighting_amount_, other->best_refined_fighting_amount_);
    std::swap(can_refined_, other->can_refined_);
    std::swap(next_level_equipment_, other->next_level_equipment_);
    std::swap(taoz_, other->taoz_);
    std::swap(hecheng_equipment_, other->hecheng_equipment_);
    std::swap(hecheng_type_, other->hecheng_type_);
    std::swap(normal_refined_max_times_, other->normal_refined_max_times_);
    std::swap(resource_, other->resource_);
    std::swap(fashion_expire_time_, other->fashion_expire_time_);
    std::swap(hecheng_limit_, other->hecheng_limit_);
    std::swap(yu_yi_ge_type_, other->yu_yi_ge_type_);
    std::swap(yu_yi_ge_bless_amount_, other->yu_yi_ge_bless_amount_);
    std::swap(inlay_hole_count_, other->inlay_hole_count_);
    std::swap(spell_, other->spell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentDataProto_descriptor_;
  metadata.reflection = EquipmentDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountEquipmentDataProto::kBaseDataFieldNumber;
const int MountEquipmentDataProto::kPosFieldNumber;
const int MountEquipmentDataProto::kBaseStatFieldNumber;
const int MountEquipmentDataProto::kBaseFightingAmountFieldNumber;
const int MountEquipmentDataProto::kRefinedMaxTimesFieldNumber;
const int MountEquipmentDataProto::kAddedStatMaxCountFieldNumber;
const int MountEquipmentDataProto::kBestRefinedFightingAmountFieldNumber;
const int MountEquipmentDataProto::kRequireMountLevelFieldNumber;
const int MountEquipmentDataProto::kCanRefinedFieldNumber;
const int MountEquipmentDataProto::kNextLevelEquipmentFieldNumber;
const int MountEquipmentDataProto::kNormalRefinedMaxTimesFieldNumber;
const int MountEquipmentDataProto::kHechengEquipmentFieldNumber;
const int MountEquipmentDataProto::kHechengTypeFieldNumber;
const int MountEquipmentDataProto::kHechengLimitFieldNumber;
#endif  // !_MSC_VER

MountEquipmentDataProto::MountEquipmentDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountEquipmentDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
  base_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

MountEquipmentDataProto::MountEquipmentDataProto(const MountEquipmentDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountEquipmentDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  pos_ = 0;
  base_stat_ = NULL;
  base_fighting_amount_ = 0;
  refined_max_times_ = 0;
  added_stat_max_count_ = 0;
  best_refined_fighting_amount_ = 0;
  require_mount_level_ = 0;
  can_refined_ = false;
  next_level_equipment_ = 0;
  normal_refined_max_times_ = 0;
  hecheng_equipment_ = 0;
  hecheng_type_ = 0;
  hecheng_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountEquipmentDataProto::~MountEquipmentDataProto() {
  SharedDtor();
}

void MountEquipmentDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete base_stat_;
  }
}

void MountEquipmentDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountEquipmentDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountEquipmentDataProto_descriptor_;
}

const MountEquipmentDataProto& MountEquipmentDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

MountEquipmentDataProto* MountEquipmentDataProto::default_instance_ = NULL;

MountEquipmentDataProto* MountEquipmentDataProto::New() const {
  return new MountEquipmentDataProto;
}

void MountEquipmentDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    pos_ = 0;
    if (has_base_stat()) {
      if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
    }
    base_fighting_amount_ = 0;
    refined_max_times_ = 0;
    added_stat_max_count_ = 0;
    best_refined_fighting_amount_ = 0;
    require_mount_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    can_refined_ = false;
    next_level_equipment_ = 0;
    normal_refined_max_times_ = 0;
    hecheng_equipment_ = 0;
    hecheng_type_ = 0;
    hecheng_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountEquipmentDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_stat;
        break;
      }

      // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refined_max_times;
        break;
      }

      // optional int32 refined_max_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_max_times_)));
          set_has_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_added_stat_max_count;
        break;
      }

      // optional int32 added_stat_max_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_max_count_)));
          set_has_added_stat_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_best_refined_fighting_amount;
        break;
      }

      // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_refined_fighting_amount_)));
          set_has_best_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_require_mount_level;
        break;
      }

      // optional int32 require_mount_level = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_mount_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_mount_level_)));
          set_has_require_mount_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_can_refined;
        break;
      }

      // optional bool can_refined = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_refined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_refined_)));
          set_has_can_refined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_next_level_equipment;
        break;
      }

      // optional int32 next_level_equipment = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_level_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_level_equipment_)));
          set_has_next_level_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_normal_refined_max_times;
        break;
      }

      // optional int32 normal_refined_max_times = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_refined_max_times_)));
          set_has_normal_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_hecheng_equipment;
        break;
      }

      // optional int32 hecheng_equipment = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_equipment_)));
          set_has_hecheng_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_hecheng_type;
        break;
      }

      // optional int32 hecheng_type = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_type_)));
          set_has_hecheng_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_hecheng_limit;
        break;
      }

      // optional int32 hecheng_limit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_limit_)));
          set_has_hecheng_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountEquipmentDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
  if (has_base_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_stat(), output);
  }

  // optional int32 base_fighting_amount = 4 [deprecated = true];
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_fighting_amount(), output);
  }

  // optional int32 refined_max_times = 5;
  if (has_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refined_max_times(), output);
  }

  // optional int32 added_stat_max_count = 6;
  if (has_added_stat_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->added_stat_max_count(), output);
  }

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  if (has_best_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->best_refined_fighting_amount(), output);
  }

  // optional int32 require_mount_level = 20;
  if (has_require_mount_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->require_mount_level(), output);
  }

  // optional bool can_refined = 21;
  if (has_can_refined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->can_refined(), output);
  }

  // optional int32 next_level_equipment = 22;
  if (has_next_level_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->next_level_equipment(), output);
  }

  // optional int32 normal_refined_max_times = 23;
  if (has_normal_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->normal_refined_max_times(), output);
  }

  // optional int32 hecheng_equipment = 24;
  if (has_hecheng_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->hecheng_equipment(), output);
  }

  // optional int32 hecheng_type = 25;
  if (has_hecheng_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->hecheng_type(), output);
  }

  // optional int32 hecheng_limit = 26;
  if (has_hecheng_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hecheng_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountEquipmentDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
  if (has_base_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_stat(), target);
  }

  // optional int32 base_fighting_amount = 4 [deprecated = true];
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_fighting_amount(), target);
  }

  // optional int32 refined_max_times = 5;
  if (has_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refined_max_times(), target);
  }

  // optional int32 added_stat_max_count = 6;
  if (has_added_stat_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->added_stat_max_count(), target);
  }

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  if (has_best_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->best_refined_fighting_amount(), target);
  }

  // optional int32 require_mount_level = 20;
  if (has_require_mount_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->require_mount_level(), target);
  }

  // optional bool can_refined = 21;
  if (has_can_refined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->can_refined(), target);
  }

  // optional int32 next_level_equipment = 22;
  if (has_next_level_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->next_level_equipment(), target);
  }

  // optional int32 normal_refined_max_times = 23;
  if (has_normal_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->normal_refined_max_times(), target);
  }

  // optional int32 hecheng_equipment = 24;
  if (has_hecheng_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->hecheng_equipment(), target);
  }

  // optional int32 hecheng_type = 25;
  if (has_hecheng_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->hecheng_type(), target);
  }

  // optional int32 hecheng_limit = 26;
  if (has_hecheng_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hecheng_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountEquipmentDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
    if (has_base_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_stat());
    }

    // optional int32 base_fighting_amount = 4 [deprecated = true];
    if (has_base_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 refined_max_times = 5;
    if (has_refined_max_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_max_times());
    }

    // optional int32 added_stat_max_count = 6;
    if (has_added_stat_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_max_count());
    }

    // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
    if (has_best_refined_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_refined_fighting_amount());
    }

    // optional int32 require_mount_level = 20;
    if (has_require_mount_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_mount_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool can_refined = 21;
    if (has_can_refined()) {
      total_size += 2 + 1;
    }

    // optional int32 next_level_equipment = 22;
    if (has_next_level_equipment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_level_equipment());
    }

    // optional int32 normal_refined_max_times = 23;
    if (has_normal_refined_max_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_refined_max_times());
    }

    // optional int32 hecheng_equipment = 24;
    if (has_hecheng_equipment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_equipment());
    }

    // optional int32 hecheng_type = 25;
    if (has_hecheng_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_type());
    }

    // optional int32 hecheng_limit = 26;
    if (has_hecheng_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountEquipmentDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountEquipmentDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountEquipmentDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountEquipmentDataProto::MergeFrom(const MountEquipmentDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_base_stat()) {
      mutable_base_stat()->::app::message::SingleStatProto::MergeFrom(from.base_stat());
    }
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_refined_max_times()) {
      set_refined_max_times(from.refined_max_times());
    }
    if (from.has_added_stat_max_count()) {
      set_added_stat_max_count(from.added_stat_max_count());
    }
    if (from.has_best_refined_fighting_amount()) {
      set_best_refined_fighting_amount(from.best_refined_fighting_amount());
    }
    if (from.has_require_mount_level()) {
      set_require_mount_level(from.require_mount_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_can_refined()) {
      set_can_refined(from.can_refined());
    }
    if (from.has_next_level_equipment()) {
      set_next_level_equipment(from.next_level_equipment());
    }
    if (from.has_normal_refined_max_times()) {
      set_normal_refined_max_times(from.normal_refined_max_times());
    }
    if (from.has_hecheng_equipment()) {
      set_hecheng_equipment(from.hecheng_equipment());
    }
    if (from.has_hecheng_type()) {
      set_hecheng_type(from.hecheng_type());
    }
    if (from.has_hecheng_limit()) {
      set_hecheng_limit(from.hecheng_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountEquipmentDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountEquipmentDataProto::CopyFrom(const MountEquipmentDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountEquipmentDataProto::IsInitialized() const {

  return true;
}

void MountEquipmentDataProto::Swap(MountEquipmentDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(pos_, other->pos_);
    std::swap(base_stat_, other->base_stat_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(refined_max_times_, other->refined_max_times_);
    std::swap(added_stat_max_count_, other->added_stat_max_count_);
    std::swap(best_refined_fighting_amount_, other->best_refined_fighting_amount_);
    std::swap(require_mount_level_, other->require_mount_level_);
    std::swap(can_refined_, other->can_refined_);
    std::swap(next_level_equipment_, other->next_level_equipment_);
    std::swap(normal_refined_max_times_, other->normal_refined_max_times_);
    std::swap(hecheng_equipment_, other->hecheng_equipment_);
    std::swap(hecheng_type_, other->hecheng_type_);
    std::swap(hecheng_limit_, other->hecheng_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountEquipmentDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountEquipmentDataProto_descriptor_;
  metadata.reflection = MountEquipmentDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEquipmentDataProto::kBaseDataFieldNumber;
const int PetEquipmentDataProto::kPosFieldNumber;
const int PetEquipmentDataProto::kRefinedMaxTimesFieldNumber;
const int PetEquipmentDataProto::kAddedStatMaxCountFieldNumber;
const int PetEquipmentDataProto::kCanRefinedFieldNumber;
const int PetEquipmentDataProto::kNextLevelEquipmentFieldNumber;
const int PetEquipmentDataProto::kNormalRefinedMaxTimesFieldNumber;
const int PetEquipmentDataProto::kHechengEquipmentFieldNumber;
const int PetEquipmentDataProto::kHechengTypeFieldNumber;
const int PetEquipmentDataProto::kHechengLimitFieldNumber;
#endif  // !_MSC_VER

PetEquipmentDataProto::PetEquipmentDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetEquipmentDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

PetEquipmentDataProto::PetEquipmentDataProto(const PetEquipmentDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetEquipmentDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  pos_ = 0;
  refined_max_times_ = 0;
  added_stat_max_count_ = 0;
  can_refined_ = false;
  next_level_equipment_ = 0;
  normal_refined_max_times_ = 0;
  hecheng_equipment_ = 0;
  hecheng_type_ = 0;
  hecheng_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEquipmentDataProto::~PetEquipmentDataProto() {
  SharedDtor();
}

void PetEquipmentDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void PetEquipmentDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEquipmentDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEquipmentDataProto_descriptor_;
}

const PetEquipmentDataProto& PetEquipmentDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

PetEquipmentDataProto* PetEquipmentDataProto::default_instance_ = NULL;

PetEquipmentDataProto* PetEquipmentDataProto::New() const {
  return new PetEquipmentDataProto;
}

void PetEquipmentDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    pos_ = 0;
    refined_max_times_ = 0;
    added_stat_max_count_ = 0;
    can_refined_ = false;
    next_level_equipment_ = 0;
    normal_refined_max_times_ = 0;
    hecheng_equipment_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hecheng_type_ = 0;
    hecheng_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEquipmentDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refined_max_times;
        break;
      }

      // optional int32 refined_max_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_max_times_)));
          set_has_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_added_stat_max_count;
        break;
      }

      // optional int32 added_stat_max_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_max_count_)));
          set_has_added_stat_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_can_refined;
        break;
      }

      // optional bool can_refined = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_refined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_refined_)));
          set_has_can_refined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_next_level_equipment;
        break;
      }

      // optional int32 next_level_equipment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_level_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_level_equipment_)));
          set_has_next_level_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_normal_refined_max_times;
        break;
      }

      // optional int32 normal_refined_max_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_refined_max_times_)));
          set_has_normal_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hecheng_equipment;
        break;
      }

      // optional int32 hecheng_equipment = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_equipment_)));
          set_has_hecheng_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hecheng_type;
        break;
      }

      // optional int32 hecheng_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_type_)));
          set_has_hecheng_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hecheng_limit;
        break;
      }

      // optional int32 hecheng_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_limit_)));
          set_has_hecheng_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetEquipmentDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional int32 refined_max_times = 3;
  if (has_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refined_max_times(), output);
  }

  // optional int32 added_stat_max_count = 4;
  if (has_added_stat_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->added_stat_max_count(), output);
  }

  // optional bool can_refined = 5;
  if (has_can_refined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->can_refined(), output);
  }

  // optional int32 next_level_equipment = 6;
  if (has_next_level_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->next_level_equipment(), output);
  }

  // optional int32 normal_refined_max_times = 7;
  if (has_normal_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->normal_refined_max_times(), output);
  }

  // optional int32 hecheng_equipment = 8;
  if (has_hecheng_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hecheng_equipment(), output);
  }

  // optional int32 hecheng_type = 9;
  if (has_hecheng_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hecheng_type(), output);
  }

  // optional int32 hecheng_limit = 10;
  if (has_hecheng_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hecheng_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetEquipmentDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional int32 refined_max_times = 3;
  if (has_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refined_max_times(), target);
  }

  // optional int32 added_stat_max_count = 4;
  if (has_added_stat_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->added_stat_max_count(), target);
  }

  // optional bool can_refined = 5;
  if (has_can_refined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->can_refined(), target);
  }

  // optional int32 next_level_equipment = 6;
  if (has_next_level_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->next_level_equipment(), target);
  }

  // optional int32 normal_refined_max_times = 7;
  if (has_normal_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->normal_refined_max_times(), target);
  }

  // optional int32 hecheng_equipment = 8;
  if (has_hecheng_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hecheng_equipment(), target);
  }

  // optional int32 hecheng_type = 9;
  if (has_hecheng_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hecheng_type(), target);
  }

  // optional int32 hecheng_limit = 10;
  if (has_hecheng_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hecheng_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetEquipmentDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 refined_max_times = 3;
    if (has_refined_max_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_max_times());
    }

    // optional int32 added_stat_max_count = 4;
    if (has_added_stat_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_max_count());
    }

    // optional bool can_refined = 5;
    if (has_can_refined()) {
      total_size += 1 + 1;
    }

    // optional int32 next_level_equipment = 6;
    if (has_next_level_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_level_equipment());
    }

    // optional int32 normal_refined_max_times = 7;
    if (has_normal_refined_max_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_refined_max_times());
    }

    // optional int32 hecheng_equipment = 8;
    if (has_hecheng_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_equipment());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hecheng_type = 9;
    if (has_hecheng_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_type());
    }

    // optional int32 hecheng_limit = 10;
    if (has_hecheng_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEquipmentDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEquipmentDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEquipmentDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEquipmentDataProto::MergeFrom(const PetEquipmentDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_refined_max_times()) {
      set_refined_max_times(from.refined_max_times());
    }
    if (from.has_added_stat_max_count()) {
      set_added_stat_max_count(from.added_stat_max_count());
    }
    if (from.has_can_refined()) {
      set_can_refined(from.can_refined());
    }
    if (from.has_next_level_equipment()) {
      set_next_level_equipment(from.next_level_equipment());
    }
    if (from.has_normal_refined_max_times()) {
      set_normal_refined_max_times(from.normal_refined_max_times());
    }
    if (from.has_hecheng_equipment()) {
      set_hecheng_equipment(from.hecheng_equipment());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hecheng_type()) {
      set_hecheng_type(from.hecheng_type());
    }
    if (from.has_hecheng_limit()) {
      set_hecheng_limit(from.hecheng_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEquipmentDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEquipmentDataProto::CopyFrom(const PetEquipmentDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEquipmentDataProto::IsInitialized() const {

  return true;
}

void PetEquipmentDataProto::Swap(PetEquipmentDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(pos_, other->pos_);
    std::swap(refined_max_times_, other->refined_max_times_);
    std::swap(added_stat_max_count_, other->added_stat_max_count_);
    std::swap(can_refined_, other->can_refined_);
    std::swap(next_level_equipment_, other->next_level_equipment_);
    std::swap(normal_refined_max_times_, other->normal_refined_max_times_);
    std::swap(hecheng_equipment_, other->hecheng_equipment_);
    std::swap(hecheng_type_, other->hecheng_type_);
    std::swap(hecheng_limit_, other->hecheng_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEquipmentDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEquipmentDataProto_descriptor_;
  metadata.reflection = PetEquipmentDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShieldEquipmentDataProto::kBaseDataFieldNumber;
const int ShieldEquipmentDataProto::kPosFieldNumber;
const int ShieldEquipmentDataProto::kBaseStatFieldNumber;
const int ShieldEquipmentDataProto::kBaseFightingAmountFieldNumber;
const int ShieldEquipmentDataProto::kRefinedMaxTimesFieldNumber;
const int ShieldEquipmentDataProto::kAddedStatMaxCountFieldNumber;
const int ShieldEquipmentDataProto::kBestRefinedFightingAmountFieldNumber;
const int ShieldEquipmentDataProto::kRequireShieldLevelFieldNumber;
const int ShieldEquipmentDataProto::kCanRefinedFieldNumber;
const int ShieldEquipmentDataProto::kNextLevelEquipmentFieldNumber;
const int ShieldEquipmentDataProto::kNormalRefinedMaxTimesFieldNumber;
const int ShieldEquipmentDataProto::kHechengEquipmentFieldNumber;
const int ShieldEquipmentDataProto::kHechengTypeFieldNumber;
const int ShieldEquipmentDataProto::kHechengLimitFieldNumber;
const int ShieldEquipmentDataProto::kShieldTypeFieldNumber;
#endif  // !_MSC_VER

ShieldEquipmentDataProto::ShieldEquipmentDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShieldEquipmentDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
  base_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

ShieldEquipmentDataProto::ShieldEquipmentDataProto(const ShieldEquipmentDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShieldEquipmentDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  pos_ = 0;
  base_stat_ = NULL;
  base_fighting_amount_ = 0;
  refined_max_times_ = 0;
  added_stat_max_count_ = 0;
  best_refined_fighting_amount_ = 0;
  require_shield_level_ = 0;
  can_refined_ = false;
  next_level_equipment_ = 0;
  normal_refined_max_times_ = 0;
  hecheng_equipment_ = 0;
  hecheng_type_ = 0;
  hecheng_limit_ = 0;
  shield_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShieldEquipmentDataProto::~ShieldEquipmentDataProto() {
  SharedDtor();
}

void ShieldEquipmentDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete base_stat_;
  }
}

void ShieldEquipmentDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShieldEquipmentDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShieldEquipmentDataProto_descriptor_;
}

const ShieldEquipmentDataProto& ShieldEquipmentDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

ShieldEquipmentDataProto* ShieldEquipmentDataProto::default_instance_ = NULL;

ShieldEquipmentDataProto* ShieldEquipmentDataProto::New() const {
  return new ShieldEquipmentDataProto;
}

void ShieldEquipmentDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    pos_ = 0;
    if (has_base_stat()) {
      if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
    }
    base_fighting_amount_ = 0;
    refined_max_times_ = 0;
    added_stat_max_count_ = 0;
    best_refined_fighting_amount_ = 0;
    require_shield_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    can_refined_ = false;
    next_level_equipment_ = 0;
    normal_refined_max_times_ = 0;
    hecheng_equipment_ = 0;
    hecheng_type_ = 0;
    hecheng_limit_ = 0;
    shield_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShieldEquipmentDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_stat;
        break;
      }

      // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refined_max_times;
        break;
      }

      // optional int32 refined_max_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_max_times_)));
          set_has_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_added_stat_max_count;
        break;
      }

      // optional int32 added_stat_max_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_max_count_)));
          set_has_added_stat_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_best_refined_fighting_amount;
        break;
      }

      // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_refined_fighting_amount_)));
          set_has_best_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_require_shield_level;
        break;
      }

      // optional int32 require_shield_level = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_shield_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_shield_level_)));
          set_has_require_shield_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_can_refined;
        break;
      }

      // optional bool can_refined = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_refined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_refined_)));
          set_has_can_refined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_next_level_equipment;
        break;
      }

      // optional int32 next_level_equipment = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_level_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_level_equipment_)));
          set_has_next_level_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_normal_refined_max_times;
        break;
      }

      // optional int32 normal_refined_max_times = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_refined_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_refined_max_times_)));
          set_has_normal_refined_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_hecheng_equipment;
        break;
      }

      // optional int32 hecheng_equipment = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_equipment_)));
          set_has_hecheng_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_hecheng_type;
        break;
      }

      // optional int32 hecheng_type = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_type_)));
          set_has_hecheng_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_hecheng_limit;
        break;
      }

      // optional int32 hecheng_limit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hecheng_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hecheng_limit_)));
          set_has_hecheng_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_shield_type;
        break;
      }

      // optional int32 shield_type = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shield_type_)));
          set_has_shield_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShieldEquipmentDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
  if (has_base_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_stat(), output);
  }

  // optional int32 base_fighting_amount = 4 [deprecated = true];
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_fighting_amount(), output);
  }

  // optional int32 refined_max_times = 5;
  if (has_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refined_max_times(), output);
  }

  // optional int32 added_stat_max_count = 6;
  if (has_added_stat_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->added_stat_max_count(), output);
  }

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  if (has_best_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->best_refined_fighting_amount(), output);
  }

  // optional int32 require_shield_level = 20;
  if (has_require_shield_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->require_shield_level(), output);
  }

  // optional bool can_refined = 21;
  if (has_can_refined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->can_refined(), output);
  }

  // optional int32 next_level_equipment = 22;
  if (has_next_level_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->next_level_equipment(), output);
  }

  // optional int32 normal_refined_max_times = 23;
  if (has_normal_refined_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->normal_refined_max_times(), output);
  }

  // optional int32 hecheng_equipment = 24;
  if (has_hecheng_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->hecheng_equipment(), output);
  }

  // optional int32 hecheng_type = 25;
  if (has_hecheng_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->hecheng_type(), output);
  }

  // optional int32 hecheng_limit = 26;
  if (has_hecheng_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hecheng_limit(), output);
  }

  // optional int32 shield_type = 27;
  if (has_shield_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->shield_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShieldEquipmentDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
  if (has_base_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_stat(), target);
  }

  // optional int32 base_fighting_amount = 4 [deprecated = true];
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_fighting_amount(), target);
  }

  // optional int32 refined_max_times = 5;
  if (has_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refined_max_times(), target);
  }

  // optional int32 added_stat_max_count = 6;
  if (has_added_stat_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->added_stat_max_count(), target);
  }

  // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
  if (has_best_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->best_refined_fighting_amount(), target);
  }

  // optional int32 require_shield_level = 20;
  if (has_require_shield_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->require_shield_level(), target);
  }

  // optional bool can_refined = 21;
  if (has_can_refined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->can_refined(), target);
  }

  // optional int32 next_level_equipment = 22;
  if (has_next_level_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->next_level_equipment(), target);
  }

  // optional int32 normal_refined_max_times = 23;
  if (has_normal_refined_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->normal_refined_max_times(), target);
  }

  // optional int32 hecheng_equipment = 24;
  if (has_hecheng_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->hecheng_equipment(), target);
  }

  // optional int32 hecheng_type = 25;
  if (has_hecheng_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->hecheng_type(), target);
  }

  // optional int32 hecheng_limit = 26;
  if (has_hecheng_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hecheng_limit(), target);
  }

  // optional int32 shield_type = 27;
  if (has_shield_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->shield_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShieldEquipmentDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional .app.message.SingleStatProto base_stat = 3 [deprecated = true];
    if (has_base_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_stat());
    }

    // optional int32 base_fighting_amount = 4 [deprecated = true];
    if (has_base_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 refined_max_times = 5;
    if (has_refined_max_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_max_times());
    }

    // optional int32 added_stat_max_count = 6;
    if (has_added_stat_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_max_count());
    }

    // optional int32 best_refined_fighting_amount = 11 [deprecated = true];
    if (has_best_refined_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_refined_fighting_amount());
    }

    // optional int32 require_shield_level = 20;
    if (has_require_shield_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_shield_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool can_refined = 21;
    if (has_can_refined()) {
      total_size += 2 + 1;
    }

    // optional int32 next_level_equipment = 22;
    if (has_next_level_equipment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_level_equipment());
    }

    // optional int32 normal_refined_max_times = 23;
    if (has_normal_refined_max_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_refined_max_times());
    }

    // optional int32 hecheng_equipment = 24;
    if (has_hecheng_equipment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_equipment());
    }

    // optional int32 hecheng_type = 25;
    if (has_hecheng_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_type());
    }

    // optional int32 hecheng_limit = 26;
    if (has_hecheng_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hecheng_limit());
    }

    // optional int32 shield_type = 27;
    if (has_shield_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shield_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldEquipmentDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShieldEquipmentDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShieldEquipmentDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShieldEquipmentDataProto::MergeFrom(const ShieldEquipmentDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_base_stat()) {
      mutable_base_stat()->::app::message::SingleStatProto::MergeFrom(from.base_stat());
    }
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_refined_max_times()) {
      set_refined_max_times(from.refined_max_times());
    }
    if (from.has_added_stat_max_count()) {
      set_added_stat_max_count(from.added_stat_max_count());
    }
    if (from.has_best_refined_fighting_amount()) {
      set_best_refined_fighting_amount(from.best_refined_fighting_amount());
    }
    if (from.has_require_shield_level()) {
      set_require_shield_level(from.require_shield_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_can_refined()) {
      set_can_refined(from.can_refined());
    }
    if (from.has_next_level_equipment()) {
      set_next_level_equipment(from.next_level_equipment());
    }
    if (from.has_normal_refined_max_times()) {
      set_normal_refined_max_times(from.normal_refined_max_times());
    }
    if (from.has_hecheng_equipment()) {
      set_hecheng_equipment(from.hecheng_equipment());
    }
    if (from.has_hecheng_type()) {
      set_hecheng_type(from.hecheng_type());
    }
    if (from.has_hecheng_limit()) {
      set_hecheng_limit(from.hecheng_limit());
    }
    if (from.has_shield_type()) {
      set_shield_type(from.shield_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShieldEquipmentDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShieldEquipmentDataProto::CopyFrom(const ShieldEquipmentDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldEquipmentDataProto::IsInitialized() const {

  return true;
}

void ShieldEquipmentDataProto::Swap(ShieldEquipmentDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(pos_, other->pos_);
    std::swap(base_stat_, other->base_stat_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(refined_max_times_, other->refined_max_times_);
    std::swap(added_stat_max_count_, other->added_stat_max_count_);
    std::swap(best_refined_fighting_amount_, other->best_refined_fighting_amount_);
    std::swap(require_shield_level_, other->require_shield_level_);
    std::swap(can_refined_, other->can_refined_);
    std::swap(next_level_equipment_, other->next_level_equipment_);
    std::swap(normal_refined_max_times_, other->normal_refined_max_times_);
    std::swap(hecheng_equipment_, other->hecheng_equipment_);
    std::swap(hecheng_type_, other->hecheng_type_);
    std::swap(hecheng_limit_, other->hecheng_limit_);
    std::swap(shield_type_, other->shield_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShieldEquipmentDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShieldEquipmentDataProto_descriptor_;
  metadata.reflection = ShieldEquipmentDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicineDataProto::kBaseDataFieldNumber;
const int MedicineDataProto::kEfficacyFieldNumber;
const int MedicineDataProto::kMaxUseCountFieldNumber;
const int MedicineDataProto::kExpMultiple10FieldNumber;
#endif  // !_MSC_VER

MedicineDataProto::MedicineDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicineDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

MedicineDataProto::MedicineDataProto(const MedicineDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicineDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  efficacy_ = 0;
  max_use_count_ = 0;
  exp_multiple_10_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicineDataProto::~MedicineDataProto() {
  SharedDtor();
}

void MedicineDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void MedicineDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicineDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicineDataProto_descriptor_;
}

const MedicineDataProto& MedicineDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

MedicineDataProto* MedicineDataProto::default_instance_ = NULL;

MedicineDataProto* MedicineDataProto::New() const {
  return new MedicineDataProto;
}

void MedicineDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    efficacy_ = 0;
    max_use_count_ = 0;
    exp_multiple_10_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicineDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_efficacy;
        break;
      }

      // optional int32 efficacy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_efficacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &efficacy_)));
          set_has_efficacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_use_count;
        break;
      }

      // optional int32 max_use_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_use_count_)));
          set_has_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp_multiple_10;
        break;
      }

      // optional int32 exp_multiple_10 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_multiple_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_multiple_10_)));
          set_has_exp_multiple_10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicineDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 efficacy = 2;
  if (has_efficacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->efficacy(), output);
  }

  // optional int32 max_use_count = 3;
  if (has_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_use_count(), output);
  }

  // optional int32 exp_multiple_10 = 4;
  if (has_exp_multiple_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp_multiple_10(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicineDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 efficacy = 2;
  if (has_efficacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->efficacy(), target);
  }

  // optional int32 max_use_count = 3;
  if (has_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_use_count(), target);
  }

  // optional int32 exp_multiple_10 = 4;
  if (has_exp_multiple_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp_multiple_10(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicineDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 efficacy = 2;
    if (has_efficacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->efficacy());
    }

    // optional int32 max_use_count = 3;
    if (has_max_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_use_count());
    }

    // optional int32 exp_multiple_10 = 4;
    if (has_exp_multiple_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_multiple_10());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicineDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicineDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicineDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicineDataProto::MergeFrom(const MedicineDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_efficacy()) {
      set_efficacy(from.efficacy());
    }
    if (from.has_max_use_count()) {
      set_max_use_count(from.max_use_count());
    }
    if (from.has_exp_multiple_10()) {
      set_exp_multiple_10(from.exp_multiple_10());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicineDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicineDataProto::CopyFrom(const MedicineDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicineDataProto::IsInitialized() const {

  return true;
}

void MedicineDataProto::Swap(MedicineDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(efficacy_, other->efficacy_);
    std::swap(max_use_count_, other->max_use_count_);
    std::swap(exp_multiple_10_, other->exp_multiple_10_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicineDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicineDataProto_descriptor_;
  metadata.reflection = MedicineDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiPrizeOnLimitedTimeGoodsDataProto::kBaseDataFieldNumber;
const int MultiPrizeOnLimitedTimeGoodsDataProto::kMultiFieldNumber;
const int MultiPrizeOnLimitedTimeGoodsDataProto::kStartTimeFieldNumber;
const int MultiPrizeOnLimitedTimeGoodsDataProto::kEndTimeFieldNumber;
#endif  // !_MSC_VER

MultiPrizeOnLimitedTimeGoodsDataProto::MultiPrizeOnLimitedTimeGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiPrizeOnLimitedTimeGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

MultiPrizeOnLimitedTimeGoodsDataProto::MultiPrizeOnLimitedTimeGoodsDataProto(const MultiPrizeOnLimitedTimeGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiPrizeOnLimitedTimeGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  multi_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiPrizeOnLimitedTimeGoodsDataProto::~MultiPrizeOnLimitedTimeGoodsDataProto() {
  SharedDtor();
}

void MultiPrizeOnLimitedTimeGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void MultiPrizeOnLimitedTimeGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiPrizeOnLimitedTimeGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiPrizeOnLimitedTimeGoodsDataProto_descriptor_;
}

const MultiPrizeOnLimitedTimeGoodsDataProto& MultiPrizeOnLimitedTimeGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

MultiPrizeOnLimitedTimeGoodsDataProto* MultiPrizeOnLimitedTimeGoodsDataProto::default_instance_ = NULL;

MultiPrizeOnLimitedTimeGoodsDataProto* MultiPrizeOnLimitedTimeGoodsDataProto::New() const {
  return new MultiPrizeOnLimitedTimeGoodsDataProto;
}

void MultiPrizeOnLimitedTimeGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    multi_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiPrizeOnLimitedTimeGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_multi;
        break;
      }

      // optional int32 multi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multi_)));
          set_has_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiPrizeOnLimitedTimeGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 multi = 2;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->multi(), output);
  }

  // optional int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // optional int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiPrizeOnLimitedTimeGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 multi = 2;
  if (has_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->multi(), target);
  }

  // optional int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // optional int64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiPrizeOnLimitedTimeGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 multi = 2;
    if (has_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multi());
    }

    // optional int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiPrizeOnLimitedTimeGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiPrizeOnLimitedTimeGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiPrizeOnLimitedTimeGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiPrizeOnLimitedTimeGoodsDataProto::MergeFrom(const MultiPrizeOnLimitedTimeGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_multi()) {
      set_multi(from.multi());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiPrizeOnLimitedTimeGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiPrizeOnLimitedTimeGoodsDataProto::CopyFrom(const MultiPrizeOnLimitedTimeGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPrizeOnLimitedTimeGoodsDataProto::IsInitialized() const {

  return true;
}

void MultiPrizeOnLimitedTimeGoodsDataProto::Swap(MultiPrizeOnLimitedTimeGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(multi_, other->multi_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiPrizeOnLimitedTimeGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiPrizeOnLimitedTimeGoodsDataProto_descriptor_;
  metadata.reflection = MultiPrizeOnLimitedTimeGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeGoodsDataProto::kBaseDataFieldNumber;
const int UpgradeGoodsDataProto::kTypeFieldNumber;
const int UpgradeGoodsDataProto::kSubTypeFieldNumber;
const int UpgradeGoodsDataProto::kBigLevelFieldNumber;
const int UpgradeGoodsDataProto::kSmallLevelFieldNumber;
#endif  // !_MSC_VER

UpgradeGoodsDataProto::UpgradeGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

UpgradeGoodsDataProto::UpgradeGoodsDataProto(const UpgradeGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  type_ = 0;
  sub_type_ = 0;
  big_level_ = 0;
  small_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeGoodsDataProto::~UpgradeGoodsDataProto() {
  SharedDtor();
}

void UpgradeGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void UpgradeGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeGoodsDataProto_descriptor_;
}

const UpgradeGoodsDataProto& UpgradeGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

UpgradeGoodsDataProto* UpgradeGoodsDataProto::default_instance_ = NULL;

UpgradeGoodsDataProto* UpgradeGoodsDataProto::New() const {
  return new UpgradeGoodsDataProto;
}

void UpgradeGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    type_ = 0;
    sub_type_ = 0;
    big_level_ = 0;
    small_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_type;
        break;
      }

      // optional int32 sub_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_big_level;
        break;
      }

      // optional int32 big_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_big_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &big_level_)));
          set_has_big_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_small_level;
        break;
      }

      // optional int32 small_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_small_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &small_level_)));
          set_has_small_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 sub_type = 4;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_type(), output);
  }

  // optional int32 big_level = 5;
  if (has_big_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->big_level(), output);
  }

  // optional int32 small_level = 6;
  if (has_small_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->small_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 sub_type = 4;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_type(), target);
  }

  // optional int32 big_level = 5;
  if (has_big_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->big_level(), target);
  }

  // optional int32 small_level = 6;
  if (has_small_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->small_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 sub_type = 4;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_type());
    }

    // optional int32 big_level = 5;
    if (has_big_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->big_level());
    }

    // optional int32 small_level = 6;
    if (has_small_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->small_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeGoodsDataProto::MergeFrom(const UpgradeGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_big_level()) {
      set_big_level(from.big_level());
    }
    if (from.has_small_level()) {
      set_small_level(from.small_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeGoodsDataProto::CopyFrom(const UpgradeGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeGoodsDataProto::IsInitialized() const {

  return true;
}

void UpgradeGoodsDataProto::Swap(UpgradeGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(type_, other->type_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(big_level_, other->big_level_);
    std::swap(small_level_, other->small_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeGoodsDataProto_descriptor_;
  metadata.reflection = UpgradeGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyCardDataProto::kBaseDataFieldNumber;
const int DailyCardDataProto::kMaxUseCountFieldNumber;
const int DailyCardDataProto::kFreeUseCountFieldNumber;
const int DailyCardDataProto::kYuanbaoFieldNumber;
#endif  // !_MSC_VER

DailyCardDataProto::DailyCardDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyCardDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

DailyCardDataProto::DailyCardDataProto(const DailyCardDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyCardDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  max_use_count_ = 0;
  free_use_count_ = 0;
  yuanbao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyCardDataProto::~DailyCardDataProto() {
  SharedDtor();
}

void DailyCardDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void DailyCardDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyCardDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyCardDataProto_descriptor_;
}

const DailyCardDataProto& DailyCardDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

DailyCardDataProto* DailyCardDataProto::default_instance_ = NULL;

DailyCardDataProto* DailyCardDataProto::New() const {
  return new DailyCardDataProto;
}

void DailyCardDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    max_use_count_ = 0;
    free_use_count_ = 0;
    yuanbao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyCardDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_use_count;
        break;
      }

      // optional int32 max_use_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_use_count_)));
          set_has_max_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_use_count;
        break;
      }

      // optional int32 free_use_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_use_count_)));
          set_has_free_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yuanbao;
        break;
      }

      // optional int32 yuanbao = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbao_)));
          set_has_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyCardDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 max_use_count = 2;
  if (has_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_use_count(), output);
  }

  // optional int32 free_use_count = 3;
  if (has_free_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->free_use_count(), output);
  }

  // optional int32 yuanbao = 4;
  if (has_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->yuanbao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyCardDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 max_use_count = 2;
  if (has_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_use_count(), target);
  }

  // optional int32 free_use_count = 3;
  if (has_free_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->free_use_count(), target);
  }

  // optional int32 yuanbao = 4;
  if (has_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->yuanbao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyCardDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 max_use_count = 2;
    if (has_max_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_use_count());
    }

    // optional int32 free_use_count = 3;
    if (has_free_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_use_count());
    }

    // optional int32 yuanbao = 4;
    if (has_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyCardDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyCardDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyCardDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyCardDataProto::MergeFrom(const DailyCardDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_max_use_count()) {
      set_max_use_count(from.max_use_count());
    }
    if (from.has_free_use_count()) {
      set_free_use_count(from.free_use_count());
    }
    if (from.has_yuanbao()) {
      set_yuanbao(from.yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyCardDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyCardDataProto::CopyFrom(const DailyCardDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyCardDataProto::IsInitialized() const {

  return true;
}

void DailyCardDataProto::Swap(DailyCardDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(max_use_count_, other->max_use_count_);
    std::swap(free_use_count_, other->free_use_count_);
    std::swap(yuanbao_, other->yuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyCardDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyCardDataProto_descriptor_;
  metadata.reflection = DailyCardDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JinJieDanDataProto::kBaseDataFieldNumber;
const int JinJieDanDataProto::kTypeFieldNumber;
const int JinJieDanDataProto::kLevel1FieldNumber;
const int JinJieDanDataProto::kLevel2FieldNumber;
#endif  // !_MSC_VER

JinJieDanDataProto::JinJieDanDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JinJieDanDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

JinJieDanDataProto::JinJieDanDataProto(const JinJieDanDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JinJieDanDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  type_ = 0;
  level1_ = 0;
  level2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JinJieDanDataProto::~JinJieDanDataProto() {
  SharedDtor();
}

void JinJieDanDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void JinJieDanDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JinJieDanDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JinJieDanDataProto_descriptor_;
}

const JinJieDanDataProto& JinJieDanDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

JinJieDanDataProto* JinJieDanDataProto::default_instance_ = NULL;

JinJieDanDataProto* JinJieDanDataProto::New() const {
  return new JinJieDanDataProto;
}

void JinJieDanDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    type_ = 0;
    level1_ = 0;
    level2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JinJieDanDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level1;
        break;
      }

      // optional int32 level1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level1_)));
          set_has_level1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level2;
        break;
      }

      // optional int32 level2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level2_)));
          set_has_level2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JinJieDanDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 level1 = 3;
  if (has_level1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level1(), output);
  }

  // optional int32 level2 = 4;
  if (has_level2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JinJieDanDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 level1 = 3;
  if (has_level1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level1(), target);
  }

  // optional int32 level2 = 4;
  if (has_level2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JinJieDanDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level1 = 3;
    if (has_level1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level1());
    }

    // optional int32 level2 = 4;
    if (has_level2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JinJieDanDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JinJieDanDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JinJieDanDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JinJieDanDataProto::MergeFrom(const JinJieDanDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level1()) {
      set_level1(from.level1());
    }
    if (from.has_level2()) {
      set_level2(from.level2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JinJieDanDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JinJieDanDataProto::CopyFrom(const JinJieDanDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JinJieDanDataProto::IsInitialized() const {

  return true;
}

void JinJieDanDataProto::Swap(JinJieDanDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(type_, other->type_);
    std::swap(level1_, other->level1_);
    std::swap(level2_, other->level2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JinJieDanDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JinJieDanDataProto_descriptor_;
  metadata.reflection = JinJieDanDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JinJieLuckyCardDataProto::kBaseDataFieldNumber;
const int JinJieLuckyCardDataProto::kTypeFieldNumber;
const int JinJieLuckyCardDataProto::kDurationFieldNumber;
const int JinJieLuckyCardDataProto::kRateFieldNumber;
#endif  // !_MSC_VER

JinJieLuckyCardDataProto::JinJieLuckyCardDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JinJieLuckyCardDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

JinJieLuckyCardDataProto::JinJieLuckyCardDataProto(const JinJieLuckyCardDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JinJieLuckyCardDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  type_ = 0;
  duration_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JinJieLuckyCardDataProto::~JinJieLuckyCardDataProto() {
  SharedDtor();
}

void JinJieLuckyCardDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void JinJieLuckyCardDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JinJieLuckyCardDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JinJieLuckyCardDataProto_descriptor_;
}

const JinJieLuckyCardDataProto& JinJieLuckyCardDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

JinJieLuckyCardDataProto* JinJieLuckyCardDataProto::default_instance_ = NULL;

JinJieLuckyCardDataProto* JinJieLuckyCardDataProto::New() const {
  return new JinJieLuckyCardDataProto;
}

void JinJieLuckyCardDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    type_ = 0;
    duration_ = 0;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JinJieLuckyCardDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional int32 duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rate;
        break;
      }

      // optional int32 rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JinJieLuckyCardDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JinJieLuckyCardDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JinJieLuckyCardDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 rate = 4;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JinJieLuckyCardDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JinJieLuckyCardDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JinJieLuckyCardDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JinJieLuckyCardDataProto::MergeFrom(const JinJieLuckyCardDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JinJieLuckyCardDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JinJieLuckyCardDataProto::CopyFrom(const JinJieLuckyCardDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JinJieLuckyCardDataProto::IsInitialized() const {

  return true;
}

void JinJieLuckyCardDataProto::Swap(JinJieLuckyCardDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(type_, other->type_);
    std::swap(duration_, other->duration_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JinJieLuckyCardDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JinJieLuckyCardDataProto_descriptor_;
  metadata.reflection = JinJieLuckyCardDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChristmasGoodsDataProto::kBaseDataFieldNumber;
const int ChristmasGoodsDataProto::kTypeFieldNumber;
const int ChristmasGoodsDataProto::kShopPointFieldNumber;
const int ChristmasGoodsDataProto::kTreePointFieldNumber;
#endif  // !_MSC_VER

ChristmasGoodsDataProto::ChristmasGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChristmasGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

ChristmasGoodsDataProto::ChristmasGoodsDataProto(const ChristmasGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChristmasGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  type_ = 0;
  shop_point_ = 0;
  tree_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChristmasGoodsDataProto::~ChristmasGoodsDataProto() {
  SharedDtor();
}

void ChristmasGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void ChristmasGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChristmasGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChristmasGoodsDataProto_descriptor_;
}

const ChristmasGoodsDataProto& ChristmasGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

ChristmasGoodsDataProto* ChristmasGoodsDataProto::default_instance_ = NULL;

ChristmasGoodsDataProto* ChristmasGoodsDataProto::New() const {
  return new ChristmasGoodsDataProto;
}

void ChristmasGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    type_ = 0;
    shop_point_ = 0;
    tree_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChristmasGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shop_point;
        break;
      }

      // optional int32 shop_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_point_)));
          set_has_shop_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tree_point;
        break;
      }

      // optional int32 tree_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tree_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tree_point_)));
          set_has_tree_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChristmasGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 shop_point = 3;
  if (has_shop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shop_point(), output);
  }

  // optional int32 tree_point = 4;
  if (has_tree_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tree_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChristmasGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 shop_point = 3;
  if (has_shop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shop_point(), target);
  }

  // optional int32 tree_point = 4;
  if (has_tree_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tree_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChristmasGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 shop_point = 3;
    if (has_shop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_point());
    }

    // optional int32 tree_point = 4;
    if (has_tree_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tree_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChristmasGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChristmasGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChristmasGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChristmasGoodsDataProto::MergeFrom(const ChristmasGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_shop_point()) {
      set_shop_point(from.shop_point());
    }
    if (from.has_tree_point()) {
      set_tree_point(from.tree_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChristmasGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChristmasGoodsDataProto::CopyFrom(const ChristmasGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChristmasGoodsDataProto::IsInitialized() const {

  return true;
}

void ChristmasGoodsDataProto::Swap(ChristmasGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(type_, other->type_);
    std::swap(shop_point_, other->shop_point_);
    std::swap(tree_point_, other->tree_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChristmasGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChristmasGoodsDataProto_descriptor_;
  metadata.reflection = ChristmasGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarriageGiftDataProto::kBaseDataFieldNumber;
const int MarriageGiftDataProto::kAddHaoGanFieldNumber;
const int MarriageGiftDataProto::kAddExpFieldNumber;
const int MarriageGiftDataProto::kAddRealAirFieldNumber;
const int MarriageGiftDataProto::kPriceTypeFieldNumber;
const int MarriageGiftDataProto::kPriceFieldNumber;
#endif  // !_MSC_VER

MarriageGiftDataProto::MarriageGiftDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarriageGiftDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

MarriageGiftDataProto::MarriageGiftDataProto(const MarriageGiftDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarriageGiftDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  add_hao_gan_ = 0;
  add_exp_ = 0;
  add_real_air_ = 0;
  price_type_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarriageGiftDataProto::~MarriageGiftDataProto() {
  SharedDtor();
}

void MarriageGiftDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void MarriageGiftDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarriageGiftDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarriageGiftDataProto_descriptor_;
}

const MarriageGiftDataProto& MarriageGiftDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

MarriageGiftDataProto* MarriageGiftDataProto::default_instance_ = NULL;

MarriageGiftDataProto* MarriageGiftDataProto::New() const {
  return new MarriageGiftDataProto;
}

void MarriageGiftDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    add_hao_gan_ = 0;
    add_exp_ = 0;
    add_real_air_ = 0;
    price_type_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarriageGiftDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_hao_gan;
        break;
      }

      // optional int32 add_hao_gan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_hao_gan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_hao_gan_)));
          set_has_add_hao_gan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_exp;
        break;
      }

      // optional int32 add_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_real_air;
        break;
      }

      // optional int32 add_real_air = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_real_air:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_real_air_)));
          set_has_add_real_air();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price_type;
        break;
      }

      // optional int32 price_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_price;
        break;
      }

      // optional int32 price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarriageGiftDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 add_hao_gan = 2;
  if (has_add_hao_gan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add_hao_gan(), output);
  }

  // optional int32 add_exp = 3;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_exp(), output);
  }

  // optional int32 add_real_air = 4;
  if (has_add_real_air()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->add_real_air(), output);
  }

  // optional int32 price_type = 5;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price_type(), output);
  }

  // optional int32 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarriageGiftDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 add_hao_gan = 2;
  if (has_add_hao_gan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add_hao_gan(), target);
  }

  // optional int32 add_exp = 3;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_exp(), target);
  }

  // optional int32 add_real_air = 4;
  if (has_add_real_air()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->add_real_air(), target);
  }

  // optional int32 price_type = 5;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price_type(), target);
  }

  // optional int32 price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarriageGiftDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 add_hao_gan = 2;
    if (has_add_hao_gan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_hao_gan());
    }

    // optional int32 add_exp = 3;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_exp());
    }

    // optional int32 add_real_air = 4;
    if (has_add_real_air()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_real_air());
    }

    // optional int32 price_type = 5;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // optional int32 price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarriageGiftDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarriageGiftDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarriageGiftDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarriageGiftDataProto::MergeFrom(const MarriageGiftDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_add_hao_gan()) {
      set_add_hao_gan(from.add_hao_gan());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_add_real_air()) {
      set_add_real_air(from.add_real_air());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarriageGiftDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarriageGiftDataProto::CopyFrom(const MarriageGiftDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarriageGiftDataProto::IsInitialized() const {

  return true;
}

void MarriageGiftDataProto::Swap(MarriageGiftDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(add_hao_gan_, other->add_hao_gan_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(add_real_air_, other->add_real_air_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarriageGiftDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarriageGiftDataProto_descriptor_;
  metadata.reflection = MarriageGiftDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NiDaoQianKunDataProto::kBaseDataFieldNumber;
const int NiDaoQianKunDataProto::kSpriteStatFieldNumber;
const int NiDaoQianKunDataProto::kFightingAmountFieldNumber;
const int NiDaoQianKunDataProto::kHaoGanFieldNumber;
#endif  // !_MSC_VER

NiDaoQianKunDataProto::NiDaoQianKunDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NiDaoQianKunDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
  sprite_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

NiDaoQianKunDataProto::NiDaoQianKunDataProto(const NiDaoQianKunDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NiDaoQianKunDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  sprite_stat_ = NULL;
  fighting_amount_ = 0;
  hao_gan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NiDaoQianKunDataProto::~NiDaoQianKunDataProto() {
  SharedDtor();
}

void NiDaoQianKunDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete sprite_stat_;
  }
}

void NiDaoQianKunDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NiDaoQianKunDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NiDaoQianKunDataProto_descriptor_;
}

const NiDaoQianKunDataProto& NiDaoQianKunDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

NiDaoQianKunDataProto* NiDaoQianKunDataProto::default_instance_ = NULL;

NiDaoQianKunDataProto* NiDaoQianKunDataProto::New() const {
  return new NiDaoQianKunDataProto;
}

void NiDaoQianKunDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    if (has_sprite_stat()) {
      if (sprite_stat_ != NULL) sprite_stat_->::app::message::SpriteStatProto::Clear();
    }
    fighting_amount_ = 0;
    hao_gan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NiDaoQianKunDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sprite_stat;
        break;
      }

      // optional .app.message.SpriteStatProto sprite_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprite_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fighting_amount;
        break;
      }

      // optional int32 fighting_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_amount_)));
          set_has_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hao_gan;
        break;
      }

      // optional int32 hao_gan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hao_gan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hao_gan_)));
          set_has_hao_gan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NiDaoQianKunDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional .app.message.SpriteStatProto sprite_stat = 2;
  if (has_sprite_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sprite_stat(), output);
  }

  // optional int32 fighting_amount = 3;
  if (has_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fighting_amount(), output);
  }

  // optional int32 hao_gan = 4;
  if (has_hao_gan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hao_gan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NiDaoQianKunDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional .app.message.SpriteStatProto sprite_stat = 2;
  if (has_sprite_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sprite_stat(), target);
  }

  // optional int32 fighting_amount = 3;
  if (has_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fighting_amount(), target);
  }

  // optional int32 hao_gan = 4;
  if (has_hao_gan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hao_gan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NiDaoQianKunDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .app.message.SpriteStatProto sprite_stat = 2;
    if (has_sprite_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sprite_stat());
    }

    // optional int32 fighting_amount = 3;
    if (has_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting_amount());
    }

    // optional int32 hao_gan = 4;
    if (has_hao_gan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hao_gan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NiDaoQianKunDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NiDaoQianKunDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NiDaoQianKunDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NiDaoQianKunDataProto::MergeFrom(const NiDaoQianKunDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_sprite_stat()) {
      mutable_sprite_stat()->::app::message::SpriteStatProto::MergeFrom(from.sprite_stat());
    }
    if (from.has_fighting_amount()) {
      set_fighting_amount(from.fighting_amount());
    }
    if (from.has_hao_gan()) {
      set_hao_gan(from.hao_gan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NiDaoQianKunDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NiDaoQianKunDataProto::CopyFrom(const NiDaoQianKunDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NiDaoQianKunDataProto::IsInitialized() const {

  return true;
}

void NiDaoQianKunDataProto::Swap(NiDaoQianKunDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(sprite_stat_, other->sprite_stat_);
    std::swap(fighting_amount_, other->fighting_amount_);
    std::swap(hao_gan_, other->hao_gan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NiDaoQianKunDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NiDaoQianKunDataProto_descriptor_;
  metadata.reflection = NiDaoQianKunDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FireworkDataProto::kBaseDataFieldNumber;
const int FireworkDataProto::kColorTypeFieldNumber;
const int FireworkDataProto::kValueFieldNumber;
#endif  // !_MSC_VER

FireworkDataProto::FireworkDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FireworkDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

FireworkDataProto::FireworkDataProto(const FireworkDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FireworkDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  color_type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FireworkDataProto::~FireworkDataProto() {
  SharedDtor();
}

void FireworkDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void FireworkDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FireworkDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FireworkDataProto_descriptor_;
}

const FireworkDataProto& FireworkDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

FireworkDataProto* FireworkDataProto::default_instance_ = NULL;

FireworkDataProto* FireworkDataProto::New() const {
  return new FireworkDataProto;
}

void FireworkDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    color_type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FireworkDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color_type;
        break;
      }

      // optional int32 color_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_type_)));
          set_has_color_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FireworkDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 color_type = 2;
  if (has_color_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_type(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FireworkDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 color_type = 2;
  if (has_color_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_type(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FireworkDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 color_type = 2;
    if (has_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_type());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FireworkDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FireworkDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FireworkDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FireworkDataProto::MergeFrom(const FireworkDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_color_type()) {
      set_color_type(from.color_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FireworkDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireworkDataProto::CopyFrom(const FireworkDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireworkDataProto::IsInitialized() const {

  return true;
}

void FireworkDataProto::Swap(FireworkDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(color_type_, other->color_type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FireworkDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FireworkDataProto_descriptor_;
  metadata.reflection = FireworkDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QianNengHuanHuaLimitUpProto::kBaseDataFieldNumber;
const int QianNengHuanHuaLimitUpProto::kMainTypeFieldNumber;
const int QianNengHuanHuaLimitUpProto::kRequiredObjectLevelFieldNumber;
const int QianNengHuanHuaLimitUpProto::kSubTypeFieldNumber;
const int QianNengHuanHuaLimitUpProto::kAmountFieldNumber;
#endif  // !_MSC_VER

QianNengHuanHuaLimitUpProto::QianNengHuanHuaLimitUpProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QianNengHuanHuaLimitUpProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

QianNengHuanHuaLimitUpProto::QianNengHuanHuaLimitUpProto(const QianNengHuanHuaLimitUpProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QianNengHuanHuaLimitUpProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  main_type_ = 0;
  required_object_level_ = 0;
  sub_type_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QianNengHuanHuaLimitUpProto::~QianNengHuanHuaLimitUpProto() {
  SharedDtor();
}

void QianNengHuanHuaLimitUpProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void QianNengHuanHuaLimitUpProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QianNengHuanHuaLimitUpProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QianNengHuanHuaLimitUpProto_descriptor_;
}

const QianNengHuanHuaLimitUpProto& QianNengHuanHuaLimitUpProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

QianNengHuanHuaLimitUpProto* QianNengHuanHuaLimitUpProto::default_instance_ = NULL;

QianNengHuanHuaLimitUpProto* QianNengHuanHuaLimitUpProto::New() const {
  return new QianNengHuanHuaLimitUpProto;
}

void QianNengHuanHuaLimitUpProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    main_type_ = 0;
    required_object_level_ = 0;
    sub_type_ = 0;
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QianNengHuanHuaLimitUpProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_main_type;
        break;
      }

      // optional int32 main_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_type_)));
          set_has_main_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required_object_level;
        break;
      }

      // optional int32 required_object_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_object_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_object_level_)));
          set_has_required_object_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_type;
        break;
      }

      // optional int32 sub_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // optional int32 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QianNengHuanHuaLimitUpProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 main_type = 2;
  if (has_main_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->main_type(), output);
  }

  // optional int32 required_object_level = 3;
  if (has_required_object_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->required_object_level(), output);
  }

  // optional int32 sub_type = 4;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_type(), output);
  }

  // optional int32 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QianNengHuanHuaLimitUpProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 main_type = 2;
  if (has_main_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->main_type(), target);
  }

  // optional int32 required_object_level = 3;
  if (has_required_object_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->required_object_level(), target);
  }

  // optional int32 sub_type = 4;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_type(), target);
  }

  // optional int32 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QianNengHuanHuaLimitUpProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 main_type = 2;
    if (has_main_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_type());
    }

    // optional int32 required_object_level = 3;
    if (has_required_object_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->required_object_level());
    }

    // optional int32 sub_type = 4;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_type());
    }

    // optional int32 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QianNengHuanHuaLimitUpProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QianNengHuanHuaLimitUpProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QianNengHuanHuaLimitUpProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QianNengHuanHuaLimitUpProto::MergeFrom(const QianNengHuanHuaLimitUpProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_main_type()) {
      set_main_type(from.main_type());
    }
    if (from.has_required_object_level()) {
      set_required_object_level(from.required_object_level());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QianNengHuanHuaLimitUpProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QianNengHuanHuaLimitUpProto::CopyFrom(const QianNengHuanHuaLimitUpProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QianNengHuanHuaLimitUpProto::IsInitialized() const {

  return true;
}

void QianNengHuanHuaLimitUpProto::Swap(QianNengHuanHuaLimitUpProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(main_type_, other->main_type_);
    std::swap(required_object_level_, other->required_object_level_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QianNengHuanHuaLimitUpProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QianNengHuanHuaLimitUpProto_descriptor_;
  metadata.reflection = QianNengHuanHuaLimitUpProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemDataProto::kBaseDataFieldNumber;
const int GemDataProto::kGemLevelFieldNumber;
#endif  // !_MSC_VER

GemDataProto::GemDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

GemDataProto::GemDataProto(const GemDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  gem_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemDataProto::~GemDataProto() {
  SharedDtor();
}

void GemDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void GemDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemDataProto_descriptor_;
}

const GemDataProto& GemDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

GemDataProto* GemDataProto::default_instance_ = NULL;

GemDataProto* GemDataProto::New() const {
  return new GemDataProto;
}

void GemDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    gem_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_level;
        break;
      }

      // optional int32 gem_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_level_)));
          set_has_gem_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 gem_level = 2;
  if (has_gem_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 gem_level = 2;
  if (has_gem_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 gem_level = 2;
    if (has_gem_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemDataProto::MergeFrom(const GemDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_gem_level()) {
      set_gem_level(from.gem_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemDataProto::CopyFrom(const GemDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemDataProto::IsInitialized() const {

  return true;
}

void GemDataProto::Swap(GemDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(gem_level_, other->gem_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemDataProto_descriptor_;
  metadata.reflection = GemDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportationDataProto::kBaseDataFieldNumber;
const int TransportationDataProto::kTransTypeFieldNumber;
#endif  // !_MSC_VER

TransportationDataProto::TransportationDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportationDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

TransportationDataProto::TransportationDataProto(const TransportationDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportationDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  trans_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportationDataProto::~TransportationDataProto() {
  SharedDtor();
}

void TransportationDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void TransportationDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportationDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportationDataProto_descriptor_;
}

const TransportationDataProto& TransportationDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

TransportationDataProto* TransportationDataProto::default_instance_ = NULL;

TransportationDataProto* TransportationDataProto::New() const {
  return new TransportationDataProto;
}

void TransportationDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    trans_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportationDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trans_type;
        break;
      }

      // optional int32 trans_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_type_)));
          set_has_trans_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportationDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 trans_type = 3;
  if (has_trans_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trans_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportationDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 trans_type = 3;
  if (has_trans_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trans_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportationDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 trans_type = 3;
    if (has_trans_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportationDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportationDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportationDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportationDataProto::MergeFrom(const TransportationDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_trans_type()) {
      set_trans_type(from.trans_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportationDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportationDataProto::CopyFrom(const TransportationDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportationDataProto::IsInitialized() const {

  return true;
}

void TransportationDataProto::Swap(TransportationDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(trans_type_, other->trans_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportationDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportationDataProto_descriptor_;
  metadata.reflection = TransportationDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaoShiDataProto::kBaseDataFieldNumber;
const int BaoShiDataProto::kEquipTypeFieldNumber;
const int BaoShiDataProto::kPanelFieldNumber;
const int BaoShiDataProto::kIsCanHeChengFieldNumber;
#endif  // !_MSC_VER

BaoShiDataProto::BaoShiDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaoShiDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

BaoShiDataProto::BaoShiDataProto(const BaoShiDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaoShiDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  panel_ = 1;
  is_can_he_cheng_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaoShiDataProto::~BaoShiDataProto() {
  SharedDtor();
}

void BaoShiDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void BaoShiDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaoShiDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaoShiDataProto_descriptor_;
}

const BaoShiDataProto& BaoShiDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

BaoShiDataProto* BaoShiDataProto::default_instance_ = NULL;

BaoShiDataProto* BaoShiDataProto::New() const {
  return new BaoShiDataProto;
}

void BaoShiDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    panel_ = 1;
    is_can_he_cheng_ = false;
  }
  equip_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaoShiDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_type;
        break;
      }

      // repeated int32 equip_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_equip_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_type;
        if (input->ExpectTag(24)) goto parse_panel;
        break;
      }

      // optional .app.message.PanelGoodsDataProto.PanelType panel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_panel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::PanelGoodsDataProto_PanelType_IsValid(value)) {
            set_panel(static_cast< ::app::message::PanelGoodsDataProto_PanelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_can_he_cheng;
        break;
      }

      // optional bool is_can_he_cheng = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_can_he_cheng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_can_he_cheng_)));
          set_has_is_can_he_cheng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaoShiDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // repeated int32 equip_type = 2;
  for (int i = 0; i < this->equip_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->equip_type(i), output);
  }

  // optional .app.message.PanelGoodsDataProto.PanelType panel = 3;
  if (has_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->panel(), output);
  }

  // optional bool is_can_he_cheng = 4;
  if (has_is_can_he_cheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_can_he_cheng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaoShiDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // repeated int32 equip_type = 2;
  for (int i = 0; i < this->equip_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->equip_type(i), target);
  }

  // optional .app.message.PanelGoodsDataProto.PanelType panel = 3;
  if (has_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->panel(), target);
  }

  // optional bool is_can_he_cheng = 4;
  if (has_is_can_he_cheng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_can_he_cheng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaoShiDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .app.message.PanelGoodsDataProto.PanelType panel = 3;
    if (has_panel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->panel());
    }

    // optional bool is_can_he_cheng = 4;
    if (has_is_can_he_cheng()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 equip_type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip_type(i));
    }
    total_size += 1 * this->equip_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaoShiDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaoShiDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaoShiDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaoShiDataProto::MergeFrom(const BaoShiDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_type_.MergeFrom(from.equip_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_panel()) {
      set_panel(from.panel());
    }
    if (from.has_is_can_he_cheng()) {
      set_is_can_he_cheng(from.is_can_he_cheng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaoShiDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaoShiDataProto::CopyFrom(const BaoShiDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaoShiDataProto::IsInitialized() const {

  return true;
}

void BaoShiDataProto::Swap(BaoShiDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    equip_type_.Swap(&other->equip_type_);
    std::swap(panel_, other->panel_);
    std::swap(is_can_he_cheng_, other->is_can_he_cheng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaoShiDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaoShiDataProto_descriptor_;
  metadata.reflection = BaoShiDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChipsGoodsDataProto::kBaseDataFieldNumber;
const int ChipsGoodsDataProto::kChipsFieldNumber;
#endif  // !_MSC_VER

ChipsGoodsDataProto::ChipsGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChipsGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

ChipsGoodsDataProto::ChipsGoodsDataProto(const ChipsGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChipsGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  chips_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChipsGoodsDataProto::~ChipsGoodsDataProto() {
  SharedDtor();
}

void ChipsGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void ChipsGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChipsGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChipsGoodsDataProto_descriptor_;
}

const ChipsGoodsDataProto& ChipsGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

ChipsGoodsDataProto* ChipsGoodsDataProto::default_instance_ = NULL;

ChipsGoodsDataProto* ChipsGoodsDataProto::New() const {
  return new ChipsGoodsDataProto;
}

void ChipsGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    chips_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChipsGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chips;
        break;
      }

      // optional int32 chips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChipsGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 chips = 2;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChipsGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 chips = 2;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChipsGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 chips = 2;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChipsGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChipsGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChipsGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChipsGoodsDataProto::MergeFrom(const ChipsGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChipsGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChipsGoodsDataProto::CopyFrom(const ChipsGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChipsGoodsDataProto::IsInitialized() const {

  return true;
}

void ChipsGoodsDataProto::Swap(ChipsGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(chips_, other->chips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChipsGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChipsGoodsDataProto_descriptor_;
  metadata.reflection = ChipsGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SpellBookDataProto_SpellType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpellBookDataProto_SpellType_descriptor_;
}
bool SpellBookDataProto_SpellType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SpellBookDataProto_SpellType SpellBookDataProto::HERO;
const SpellBookDataProto_SpellType SpellBookDataProto::MOUNT;
const SpellBookDataProto_SpellType SpellBookDataProto::SUPER_WEAPON;
const SpellBookDataProto_SpellType SpellBookDataProto::SUPER_ARM;
const SpellBookDataProto_SpellType SpellBookDataProto::BOW;
const SpellBookDataProto_SpellType SpellBookDataProto::PET;
const SpellBookDataProto_SpellType SpellBookDataProto::TIAN_JIE;
const SpellBookDataProto_SpellType SpellBookDataProto::TIAN_ZUI;
const SpellBookDataProto_SpellType SpellBookDataProto::CLOAK;
const SpellBookDataProto_SpellType SpellBookDataProto::SHIELD;
const SpellBookDataProto_SpellType SpellBookDataProto::LING_YU;
const SpellBookDataProto_SpellType SpellBookDataProto::MEI_REN_TONG_LING;
const SpellBookDataProto_SpellType SpellBookDataProto::SpellType_MIN;
const SpellBookDataProto_SpellType SpellBookDataProto::SpellType_MAX;
const int SpellBookDataProto::SpellType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SpellBookDataProto::kBaseDataFieldNumber;
const int SpellBookDataProto::kTypeFieldNumber;
const int SpellBookDataProto::kRequiredMountFieldNumber;
const int SpellBookDataProto::kRequiredObjectLevelFieldNumber;
const int SpellBookDataProto::kOutputDescFieldNumber;
#endif  // !_MSC_VER

SpellBookDataProto::SpellBookDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpellBookDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

SpellBookDataProto::SpellBookDataProto(const SpellBookDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpellBookDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  type_ = 1;
  required_mount_ = 0;
  required_object_level_ = 0;
  output_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpellBookDataProto::~SpellBookDataProto() {
  SharedDtor();
}

void SpellBookDataProto::SharedDtor() {
  if (output_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete output_desc_;
  }
  if (this != default_instance_) {
    delete base_data_;
  }
}

void SpellBookDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellBookDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpellBookDataProto_descriptor_;
}

const SpellBookDataProto& SpellBookDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

SpellBookDataProto* SpellBookDataProto::default_instance_ = NULL;

SpellBookDataProto* SpellBookDataProto::New() const {
  return new SpellBookDataProto;
}

void SpellBookDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    type_ = 1;
    required_mount_ = 0;
    required_object_level_ = 0;
    if (has_output_desc()) {
      if (output_desc_ != &::google::protobuf::internal::kEmptyString) {
        output_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpellBookDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .app.message.SpellBookDataProto.SpellType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::SpellBookDataProto_SpellType_IsValid(value)) {
            set_type(static_cast< ::app::message::SpellBookDataProto_SpellType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required_mount;
        break;
      }

      // optional int32 required_mount = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_mount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_mount_)));
          set_has_required_mount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_required_object_level;
        break;
      }

      // optional int32 required_object_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_object_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_object_level_)));
          set_has_required_object_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output_desc;
        break;
      }

      // optional string output_desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output_desc().data(), this->output_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpellBookDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional .app.message.SpellBookDataProto.SpellType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 required_mount = 3 [deprecated = true];
  if (has_required_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->required_mount(), output);
  }

  // optional int32 required_object_level = 4;
  if (has_required_object_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->required_object_level(), output);
  }

  // optional string output_desc = 5;
  if (has_output_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_desc().data(), this->output_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->output_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpellBookDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional .app.message.SpellBookDataProto.SpellType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 required_mount = 3 [deprecated = true];
  if (has_required_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->required_mount(), target);
  }

  // optional int32 required_object_level = 4;
  if (has_required_object_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->required_object_level(), target);
  }

  // optional string output_desc = 5;
  if (has_output_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_desc().data(), this->output_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->output_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpellBookDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .app.message.SpellBookDataProto.SpellType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 required_mount = 3 [deprecated = true];
    if (has_required_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->required_mount());
    }

    // optional int32 required_object_level = 4;
    if (has_required_object_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->required_object_level());
    }

    // optional string output_desc = 5;
    if (has_output_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellBookDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpellBookDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpellBookDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpellBookDataProto::MergeFrom(const SpellBookDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_required_mount()) {
      set_required_mount(from.required_mount());
    }
    if (from.has_required_object_level()) {
      set_required_object_level(from.required_object_level());
    }
    if (from.has_output_desc()) {
      set_output_desc(from.output_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpellBookDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellBookDataProto::CopyFrom(const SpellBookDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellBookDataProto::IsInitialized() const {

  return true;
}

void SpellBookDataProto::Swap(SpellBookDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(type_, other->type_);
    std::swap(required_mount_, other->required_mount_);
    std::swap(required_object_level_, other->required_object_level_);
    std::swap(output_desc_, other->output_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpellBookDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpellBookDataProto_descriptor_;
  metadata.reflection = SpellBookDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetTongLingGiftSpellExpDataProto::kBaseDataFieldNumber;
const int PetTongLingGiftSpellExpDataProto::kAddExpFieldNumber;
#endif  // !_MSC_VER

PetTongLingGiftSpellExpDataProto::PetTongLingGiftSpellExpDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetTongLingGiftSpellExpDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

PetTongLingGiftSpellExpDataProto::PetTongLingGiftSpellExpDataProto(const PetTongLingGiftSpellExpDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetTongLingGiftSpellExpDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  add_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetTongLingGiftSpellExpDataProto::~PetTongLingGiftSpellExpDataProto() {
  SharedDtor();
}

void PetTongLingGiftSpellExpDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void PetTongLingGiftSpellExpDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetTongLingGiftSpellExpDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetTongLingGiftSpellExpDataProto_descriptor_;
}

const PetTongLingGiftSpellExpDataProto& PetTongLingGiftSpellExpDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

PetTongLingGiftSpellExpDataProto* PetTongLingGiftSpellExpDataProto::default_instance_ = NULL;

PetTongLingGiftSpellExpDataProto* PetTongLingGiftSpellExpDataProto::New() const {
  return new PetTongLingGiftSpellExpDataProto;
}

void PetTongLingGiftSpellExpDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    add_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetTongLingGiftSpellExpDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_exp;
        break;
      }

      // optional int32 add_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetTongLingGiftSpellExpDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 add_exp = 2;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetTongLingGiftSpellExpDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 add_exp = 2;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetTongLingGiftSpellExpDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 add_exp = 2;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetTongLingGiftSpellExpDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetTongLingGiftSpellExpDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetTongLingGiftSpellExpDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetTongLingGiftSpellExpDataProto::MergeFrom(const PetTongLingGiftSpellExpDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetTongLingGiftSpellExpDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetTongLingGiftSpellExpDataProto::CopyFrom(const PetTongLingGiftSpellExpDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetTongLingGiftSpellExpDataProto::IsInitialized() const {

  return true;
}

void PetTongLingGiftSpellExpDataProto::Swap(PetTongLingGiftSpellExpDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetTongLingGiftSpellExpDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetTongLingGiftSpellExpDataProto_descriptor_;
  metadata.reflection = PetTongLingGiftSpellExpDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScriptGoodsDataProto::kBaseDataFieldNumber;
const int ScriptGoodsDataProto::kScriptFieldNumber;
#endif  // !_MSC_VER

ScriptGoodsDataProto::ScriptGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScriptGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

ScriptGoodsDataProto::ScriptGoodsDataProto(const ScriptGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScriptGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  script_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScriptGoodsDataProto::~ScriptGoodsDataProto() {
  SharedDtor();
}

void ScriptGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void ScriptGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScriptGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScriptGoodsDataProto_descriptor_;
}

const ScriptGoodsDataProto& ScriptGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

ScriptGoodsDataProto* ScriptGoodsDataProto::default_instance_ = NULL;

ScriptGoodsDataProto* ScriptGoodsDataProto::New() const {
  return new ScriptGoodsDataProto;
}

void ScriptGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    script_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScriptGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_script;
        break;
      }

      // optional int32 script = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_)));
          set_has_script();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScriptGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 script = 2;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->script(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScriptGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 script = 2;
  if (has_script()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->script(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScriptGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 script = 2;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScriptGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScriptGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScriptGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScriptGoodsDataProto::MergeFrom(const ScriptGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScriptGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScriptGoodsDataProto::CopyFrom(const ScriptGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptGoodsDataProto::IsInitialized() const {

  return true;
}

void ScriptGoodsDataProto::Swap(ScriptGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(script_, other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScriptGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScriptGoodsDataProto_descriptor_;
  metadata.reflection = ScriptGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PanelGoodsDataProto_PanelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PanelGoodsDataProto_PanelType_descriptor_;
}
bool PanelGoodsDataProto_PanelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 111:
    case 121:
    case 131:
    case 132:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::BLACKSMITH;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SUPER_WEAPON;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SUPER_ARM;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::BOW;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SPELL;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::GEM_PANEL;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::DIVINE;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::EQUIPMENT_LEVEL;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::PET;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::TIAN_ZUI;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::TIAN_JIE;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SUPER_BLACKSMITH;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::WEAPON_XINFA;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::EQUIP_TI_PIN;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::DEMON;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::CLOAK;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::TRANSFER;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_1;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_2;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_3;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_4;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_5;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_6;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_7;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_8;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_9;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_10;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_11;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_12;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_13;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_14;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_15;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_16;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_17;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_18;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_19;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QI_ZHEN_20;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_SHI;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_SHI_0;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_SHI_1;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_SHI_2;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_SHI_3;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QIAN_QIU_DA_JIE_0;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QIAN_QIU_DA_JIE_1;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::QIAN_QIU_DA_JIE;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::CHI_HUO_SHEN_GONG;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::CHANGE_NAME;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::CHANGE_RACE_CARD;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::NEW_DRAW_PRIZE;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_1;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_2;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_3;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_4;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_5;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_6;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_7;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_8;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_9;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOUNT_TONGLING_10;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_0;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_1;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_2;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_3;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_4;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_5;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_6;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_7;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_8;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_9;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_10;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_BING_11;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::WASH_XUNZHANF;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::TIAN_XIE;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MONOPOLY;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::LOVE;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::WU_DAO;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SHIELD;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SHIELD_1;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SHIELD_2;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SHIELD_3;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SHIELD_4;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::SHIELD_5;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::HERO_BOSS_CARD;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::GUILD_BOSS_CARD;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::LING_YU;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MOON_CAKE;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::BOW_TONG_LING;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::BOW_TONG_LING_2;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::BOW_TONG_LING_3;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::PET_TONG_LING;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::INLAY_BAO_SHI;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::MO_FANG;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::JIAN_DAO;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::PanelType_MIN;
const PanelGoodsDataProto_PanelType PanelGoodsDataProto::PanelType_MAX;
const int PanelGoodsDataProto::PanelType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PanelGoodsDataProto::kBaseDataFieldNumber;
const int PanelGoodsDataProto::kPanelFieldNumber;
#endif  // !_MSC_VER

PanelGoodsDataProto::PanelGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PanelGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

PanelGoodsDataProto::PanelGoodsDataProto(const PanelGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PanelGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  panel_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PanelGoodsDataProto::~PanelGoodsDataProto() {
  SharedDtor();
}

void PanelGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void PanelGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PanelGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PanelGoodsDataProto_descriptor_;
}

const PanelGoodsDataProto& PanelGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

PanelGoodsDataProto* PanelGoodsDataProto::default_instance_ = NULL;

PanelGoodsDataProto* PanelGoodsDataProto::New() const {
  return new PanelGoodsDataProto;
}

void PanelGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    panel_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PanelGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_panel;
        break;
      }

      // optional .app.message.PanelGoodsDataProto.PanelType panel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_panel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::PanelGoodsDataProto_PanelType_IsValid(value)) {
            set_panel(static_cast< ::app::message::PanelGoodsDataProto_PanelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PanelGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional .app.message.PanelGoodsDataProto.PanelType panel = 2;
  if (has_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->panel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PanelGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional .app.message.PanelGoodsDataProto.PanelType panel = 2;
  if (has_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->panel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PanelGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .app.message.PanelGoodsDataProto.PanelType panel = 2;
    if (has_panel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->panel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PanelGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PanelGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PanelGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PanelGoodsDataProto::MergeFrom(const PanelGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_panel()) {
      set_panel(from.panel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PanelGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanelGoodsDataProto::CopyFrom(const PanelGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanelGoodsDataProto::IsInitialized() const {

  return true;
}

void PanelGoodsDataProto::Swap(PanelGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(panel_, other->panel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PanelGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PanelGoodsDataProto_descriptor_;
  metadata.reflection = PanelGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpellXinfaDataProto::kBaseDataFieldNumber;
const int SpellXinfaDataProto::kRequireSpellLevelFieldNumber;
const int SpellXinfaDataProto::kTypeFieldNumber;
const int SpellXinfaDataProto::kReleaseRangeFieldNumber;
const int SpellXinfaDataProto::kHurtRangeFieldNumber;
#endif  // !_MSC_VER

SpellXinfaDataProto::SpellXinfaDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpellXinfaDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

SpellXinfaDataProto::SpellXinfaDataProto(const SpellXinfaDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpellXinfaDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  require_spell_level_ = 0;
  type_ = 1;
  release_range_ = 0;
  hurt_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpellXinfaDataProto::~SpellXinfaDataProto() {
  SharedDtor();
}

void SpellXinfaDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void SpellXinfaDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellXinfaDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpellXinfaDataProto_descriptor_;
}

const SpellXinfaDataProto& SpellXinfaDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

SpellXinfaDataProto* SpellXinfaDataProto::default_instance_ = NULL;

SpellXinfaDataProto* SpellXinfaDataProto::New() const {
  return new SpellXinfaDataProto;
}

void SpellXinfaDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    require_spell_level_ = 0;
    type_ = 1;
    release_range_ = 0;
    hurt_range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpellXinfaDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_require_spell_level;
        break;
      }

      // optional int32 require_spell_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_spell_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_spell_level_)));
          set_has_require_spell_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .app.message.XinfaType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::app::message::XinfaType_IsValid(value)) {
            set_type(static_cast< ::app::message::XinfaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_release_range;
        break;
      }

      // optional int32 release_range = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_release_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &release_range_)));
          set_has_release_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hurt_range;
        break;
      }

      // optional int32 hurt_range = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_range_)));
          set_has_hurt_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpellXinfaDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 require_spell_level = 2;
  if (has_require_spell_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->require_spell_level(), output);
  }

  // optional .app.message.XinfaType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 release_range = 11;
  if (has_release_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->release_range(), output);
  }

  // optional int32 hurt_range = 12;
  if (has_hurt_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hurt_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpellXinfaDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 require_spell_level = 2;
  if (has_require_spell_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->require_spell_level(), target);
  }

  // optional .app.message.XinfaType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 release_range = 11;
  if (has_release_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->release_range(), target);
  }

  // optional int32 hurt_range = 12;
  if (has_hurt_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hurt_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpellXinfaDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 require_spell_level = 2;
    if (has_require_spell_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_spell_level());
    }

    // optional .app.message.XinfaType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 release_range = 11;
    if (has_release_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->release_range());
    }

    // optional int32 hurt_range = 12;
    if (has_hurt_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellXinfaDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpellXinfaDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpellXinfaDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpellXinfaDataProto::MergeFrom(const SpellXinfaDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_require_spell_level()) {
      set_require_spell_level(from.require_spell_level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_release_range()) {
      set_release_range(from.release_range());
    }
    if (from.has_hurt_range()) {
      set_hurt_range(from.hurt_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpellXinfaDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellXinfaDataProto::CopyFrom(const SpellXinfaDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellXinfaDataProto::IsInitialized() const {

  return true;
}

void SpellXinfaDataProto::Swap(SpellXinfaDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(require_spell_level_, other->require_spell_level_);
    std::swap(type_, other->type_);
    std::swap(release_range_, other->release_range_);
    std::swap(hurt_range_, other->hurt_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpellXinfaDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpellXinfaDataProto_descriptor_;
  metadata.reflection = SpellXinfaDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YuanbaoPackageDataProto::kBaseDataFieldNumber;
const int YuanbaoPackageDataProto::kCostFieldNumber;
const int YuanbaoPackageDataProto::kTitleFieldNumber;
const int YuanbaoPackageDataProto::kContentFieldNumber;
const int YuanbaoPackageDataProto::kShowPriceFieldNumber;
#endif  // !_MSC_VER

YuanbaoPackageDataProto::YuanbaoPackageDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YuanbaoPackageDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

YuanbaoPackageDataProto::YuanbaoPackageDataProto(const YuanbaoPackageDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YuanbaoPackageDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  cost_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YuanbaoPackageDataProto::~YuanbaoPackageDataProto() {
  SharedDtor();
}

void YuanbaoPackageDataProto::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete base_data_;
  }
}

void YuanbaoPackageDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YuanbaoPackageDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YuanbaoPackageDataProto_descriptor_;
}

const YuanbaoPackageDataProto& YuanbaoPackageDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

YuanbaoPackageDataProto* YuanbaoPackageDataProto::default_instance_ = NULL;

YuanbaoPackageDataProto* YuanbaoPackageDataProto::New() const {
  return new YuanbaoPackageDataProto;
}

void YuanbaoPackageDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    cost_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    show_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YuanbaoPackageDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // optional int32 cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_price;
        break;
      }

      // optional int32 show_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_price_)));
          set_has_show_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YuanbaoPackageDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cost(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string content = 4 [deprecated = true];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional int32 show_price = 5;
  if (has_show_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->show_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YuanbaoPackageDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cost(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string content = 4 [deprecated = true];
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional int32 show_price = 5;
  if (has_show_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->show_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YuanbaoPackageDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 4 [deprecated = true];
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 show_price = 5;
    if (has_show_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YuanbaoPackageDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YuanbaoPackageDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YuanbaoPackageDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YuanbaoPackageDataProto::MergeFrom(const YuanbaoPackageDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_show_price()) {
      set_show_price(from.show_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YuanbaoPackageDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YuanbaoPackageDataProto::CopyFrom(const YuanbaoPackageDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YuanbaoPackageDataProto::IsInitialized() const {

  return true;
}

void YuanbaoPackageDataProto::Swap(YuanbaoPackageDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(cost_, other->cost_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(show_price_, other->show_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YuanbaoPackageDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YuanbaoPackageDataProto_descriptor_;
  metadata.reflection = YuanbaoPackageDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefinedStatGoodsDataProto::kBaseDataFieldNumber;
const int RefinedStatGoodsDataProto::kRefinedTypeFieldNumber;
const int RefinedStatGoodsDataProto::kRequiredObjectLevelFieldNumber;
const int RefinedStatGoodsDataProto::kSubTypeFieldNumber;
#endif  // !_MSC_VER

RefinedStatGoodsDataProto::RefinedStatGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefinedStatGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

RefinedStatGoodsDataProto::RefinedStatGoodsDataProto(const RefinedStatGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefinedStatGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  refined_type_ = 0;
  required_object_level_ = 0;
  sub_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefinedStatGoodsDataProto::~RefinedStatGoodsDataProto() {
  SharedDtor();
}

void RefinedStatGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void RefinedStatGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefinedStatGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefinedStatGoodsDataProto_descriptor_;
}

const RefinedStatGoodsDataProto& RefinedStatGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

RefinedStatGoodsDataProto* RefinedStatGoodsDataProto::default_instance_ = NULL;

RefinedStatGoodsDataProto* RefinedStatGoodsDataProto::New() const {
  return new RefinedStatGoodsDataProto;
}

void RefinedStatGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    refined_type_ = 0;
    required_object_level_ = 0;
    sub_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefinedStatGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refined_type;
        break;
      }

      // optional int32 refined_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_type_)));
          set_has_refined_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required_object_level;
        break;
      }

      // optional int32 required_object_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_object_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_object_level_)));
          set_has_required_object_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_type;
        break;
      }

      // optional int32 sub_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefinedStatGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 refined_type = 2;
  if (has_refined_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refined_type(), output);
  }

  // optional int32 required_object_level = 3;
  if (has_required_object_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->required_object_level(), output);
  }

  // optional int32 sub_type = 4;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefinedStatGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 refined_type = 2;
  if (has_refined_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refined_type(), target);
  }

  // optional int32 required_object_level = 3;
  if (has_required_object_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->required_object_level(), target);
  }

  // optional int32 sub_type = 4;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefinedStatGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 refined_type = 2;
    if (has_refined_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_type());
    }

    // optional int32 required_object_level = 3;
    if (has_required_object_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->required_object_level());
    }

    // optional int32 sub_type = 4;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefinedStatGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefinedStatGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefinedStatGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefinedStatGoodsDataProto::MergeFrom(const RefinedStatGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_refined_type()) {
      set_refined_type(from.refined_type());
    }
    if (from.has_required_object_level()) {
      set_required_object_level(from.required_object_level());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefinedStatGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefinedStatGoodsDataProto::CopyFrom(const RefinedStatGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefinedStatGoodsDataProto::IsInitialized() const {

  return true;
}

void RefinedStatGoodsDataProto::Swap(RefinedStatGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(refined_type_, other->refined_type_);
    std::swap(required_object_level_, other->required_object_level_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefinedStatGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefinedStatGoodsDataProto_descriptor_;
  metadata.reflection = RefinedStatGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlessGoodsDataProto::kBaseDataFieldNumber;
const int BlessGoodsDataProto::kAddBelssTypeFieldNumber;
const int BlessGoodsDataProto::kAddBlessPercentFieldNumber;
const int BlessGoodsDataProto::kAddBlessFixAmountFieldNumber;
const int BlessGoodsDataProto::kLevelFieldNumber;
const int BlessGoodsDataProto::kAddBlessClearTimeFieldNumber;
const int BlessGoodsDataProto::kAddBlessSubTypeFieldNumber;
const int BlessGoodsDataProto::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

BlessGoodsDataProto::BlessGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlessGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

BlessGoodsDataProto::BlessGoodsDataProto(const BlessGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlessGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  add_belss_type_ = 0;
  add_bless_percent_ = 0;
  add_bless_fix_amount_ = 0;
  level_ = 0;
  add_bless_clear_time_ = 0;
  add_bless_sub_type_ = 0;
  max_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlessGoodsDataProto::~BlessGoodsDataProto() {
  SharedDtor();
}

void BlessGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void BlessGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlessGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlessGoodsDataProto_descriptor_;
}

const BlessGoodsDataProto& BlessGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

BlessGoodsDataProto* BlessGoodsDataProto::default_instance_ = NULL;

BlessGoodsDataProto* BlessGoodsDataProto::New() const {
  return new BlessGoodsDataProto;
}

void BlessGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    add_belss_type_ = 0;
    add_bless_percent_ = 0;
    add_bless_fix_amount_ = 0;
    level_ = 0;
    add_bless_clear_time_ = 0;
    add_bless_sub_type_ = 0;
    max_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlessGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_belss_type;
        break;
      }

      // optional int32 add_belss_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_belss_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_belss_type_)));
          set_has_add_belss_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_bless_percent;
        break;
      }

      // optional int32 add_bless_percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_bless_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_bless_percent_)));
          set_has_add_bless_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_bless_fix_amount;
        break;
      }

      // optional int32 add_bless_fix_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_bless_fix_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_bless_fix_amount_)));
          set_has_add_bless_fix_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_bless_clear_time;
        break;
      }

      // optional int32 add_bless_clear_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_bless_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_bless_clear_time_)));
          set_has_add_bless_clear_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_add_bless_sub_type;
        break;
      }

      // optional int32 add_bless_sub_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_bless_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_bless_sub_type_)));
          set_has_add_bless_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlessGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 add_belss_type = 2;
  if (has_add_belss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add_belss_type(), output);
  }

  // optional int32 add_bless_percent = 3;
  if (has_add_bless_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_bless_percent(), output);
  }

  // optional int32 add_bless_fix_amount = 4;
  if (has_add_bless_fix_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->add_bless_fix_amount(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 add_bless_clear_time = 6;
  if (has_add_bless_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->add_bless_clear_time(), output);
  }

  // optional int32 add_bless_sub_type = 7;
  if (has_add_bless_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->add_bless_sub_type(), output);
  }

  // optional int32 max_level = 8;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlessGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 add_belss_type = 2;
  if (has_add_belss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add_belss_type(), target);
  }

  // optional int32 add_bless_percent = 3;
  if (has_add_bless_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_bless_percent(), target);
  }

  // optional int32 add_bless_fix_amount = 4;
  if (has_add_bless_fix_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->add_bless_fix_amount(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 add_bless_clear_time = 6;
  if (has_add_bless_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->add_bless_clear_time(), target);
  }

  // optional int32 add_bless_sub_type = 7;
  if (has_add_bless_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->add_bless_sub_type(), target);
  }

  // optional int32 max_level = 8;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlessGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 add_belss_type = 2;
    if (has_add_belss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_belss_type());
    }

    // optional int32 add_bless_percent = 3;
    if (has_add_bless_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_bless_percent());
    }

    // optional int32 add_bless_fix_amount = 4;
    if (has_add_bless_fix_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_bless_fix_amount());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 add_bless_clear_time = 6;
    if (has_add_bless_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_bless_clear_time());
    }

    // optional int32 add_bless_sub_type = 7;
    if (has_add_bless_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_bless_sub_type());
    }

    // optional int32 max_level = 8;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlessGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlessGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlessGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlessGoodsDataProto::MergeFrom(const BlessGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_add_belss_type()) {
      set_add_belss_type(from.add_belss_type());
    }
    if (from.has_add_bless_percent()) {
      set_add_bless_percent(from.add_bless_percent());
    }
    if (from.has_add_bless_fix_amount()) {
      set_add_bless_fix_amount(from.add_bless_fix_amount());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_add_bless_clear_time()) {
      set_add_bless_clear_time(from.add_bless_clear_time());
    }
    if (from.has_add_bless_sub_type()) {
      set_add_bless_sub_type(from.add_bless_sub_type());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlessGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlessGoodsDataProto::CopyFrom(const BlessGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlessGoodsDataProto::IsInitialized() const {

  return true;
}

void BlessGoodsDataProto::Swap(BlessGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(add_belss_type_, other->add_belss_type_);
    std::swap(add_bless_percent_, other->add_bless_percent_);
    std::swap(add_bless_fix_amount_, other->add_bless_fix_amount_);
    std::swap(level_, other->level_);
    std::swap(add_bless_clear_time_, other->add_bless_clear_time_);
    std::swap(add_bless_sub_type_, other->add_bless_sub_type_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlessGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlessGoodsDataProto_descriptor_;
  metadata.reflection = BlessGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpellPracticeGoodsDataProto::kBaseDataFieldNumber;
const int SpellPracticeGoodsDataProto::kUpgradeLevelFieldNumber;
#endif  // !_MSC_VER

SpellPracticeGoodsDataProto::SpellPracticeGoodsDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpellPracticeGoodsDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
}

SpellPracticeGoodsDataProto::SpellPracticeGoodsDataProto(const SpellPracticeGoodsDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpellPracticeGoodsDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  upgrade_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpellPracticeGoodsDataProto::~SpellPracticeGoodsDataProto() {
  SharedDtor();
}

void SpellPracticeGoodsDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void SpellPracticeGoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellPracticeGoodsDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpellPracticeGoodsDataProto_descriptor_;
}

const SpellPracticeGoodsDataProto& SpellPracticeGoodsDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

SpellPracticeGoodsDataProto* SpellPracticeGoodsDataProto::default_instance_ = NULL;

SpellPracticeGoodsDataProto* SpellPracticeGoodsDataProto::New() const {
  return new SpellPracticeGoodsDataProto;
}

void SpellPracticeGoodsDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    upgrade_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpellPracticeGoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgrade_level;
        break;
      }

      // optional int32 upgrade_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_level_)));
          set_has_upgrade_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpellPracticeGoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional int32 upgrade_level = 2;
  if (has_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgrade_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpellPracticeGoodsDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional int32 upgrade_level = 2;
  if (has_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgrade_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpellPracticeGoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional int32 upgrade_level = 2;
    if (has_upgrade_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellPracticeGoodsDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpellPracticeGoodsDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpellPracticeGoodsDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpellPracticeGoodsDataProto::MergeFrom(const SpellPracticeGoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_upgrade_level()) {
      set_upgrade_level(from.upgrade_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpellPracticeGoodsDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellPracticeGoodsDataProto::CopyFrom(const SpellPracticeGoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellPracticeGoodsDataProto::IsInitialized() const {

  return true;
}

void SpellPracticeGoodsDataProto::Swap(SpellPracticeGoodsDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(upgrade_level_, other->upgrade_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpellPracticeGoodsDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpellPracticeGoodsDataProto_descriptor_;
  metadata.reflection = SpellPracticeGoodsDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsProto::kCountFieldNumber;
const int GoodsProto::kBindedFieldNumber;
const int GoodsProto::kExpireTimeFieldNumber;
const int GoodsProto::kCanForceRemoveFieldNumber;
const int GoodsProto::kCanUseTimeFieldNumber;
#endif  // !_MSC_VER

GoodsProto::GoodsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsProto::InitAsDefaultInstance() {
}

GoodsProto::GoodsProto(const GoodsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsProto::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  can_force_remove_ = false;
  can_use_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsProto::~GoodsProto() {
  SharedDtor();
}

void GoodsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsProto_descriptor_;
}

const GoodsProto& GoodsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

GoodsProto* GoodsProto::default_instance_ = NULL;

GoodsProto* GoodsProto::New() const {
  return new GoodsProto;
}

void GoodsProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    can_force_remove_ = false;
    can_use_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_binded;
        break;
      }

      // optional bool binded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_force_remove;
        break;
      }

      // optional bool can_force_remove = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_force_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_force_remove_)));
          set_has_can_force_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_can_use_time;
        break;
      }

      // optional int64 can_use_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_use_time_)));
          set_has_can_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional bool binded = 2;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binded(), output);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire_time(), output);
  }

  // optional bool can_force_remove = 4;
  if (has_can_force_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_force_remove(), output);
  }

  // optional int64 can_use_time = 5;
  if (has_can_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->can_use_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional bool binded = 2;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binded(), target);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire_time(), target);
  }

  // optional bool can_force_remove = 4;
  if (has_can_force_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_force_remove(), target);
  }

  // optional int64 can_use_time = 5;
  if (has_can_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->can_use_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool binded = 2;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional bool can_force_remove = 4;
    if (has_can_force_remove()) {
      total_size += 1 + 1;
    }

    // optional int64 can_use_time = 5;
    if (has_can_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_use_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsProto::MergeFrom(const GoodsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_can_force_remove()) {
      set_can_force_remove(from.can_force_remove());
    }
    if (from.has_can_use_time()) {
      set_can_use_time(from.can_use_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsProto::CopyFrom(const GoodsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsProto::IsInitialized() const {

  return true;
}

void GoodsProto::Swap(GoodsProto* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(can_force_remove_, other->can_force_remove_);
    std::swap(can_use_time_, other->can_use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsProto_descriptor_;
  metadata.reflection = GoodsProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentProto::kBindedFieldNumber;
const int EquipmentProto::kExpireTimeFieldNumber;
const int EquipmentProto::kQualityFieldNumber;
const int EquipmentProto::kBaseStatFieldNumber;
const int EquipmentProto::kBaseFightingAmountFieldNumber;
const int EquipmentProto::kBestRefinedFightingAmountFieldNumber;
const int EquipmentProto::kBestRefinedStatFieldNumber;
const int EquipmentProto::kRefinedTimesFieldNumber;
const int EquipmentProto::kRefinedStatFieldNumber;
const int EquipmentProto::kRefinedFightingAmountFieldNumber;
const int EquipmentProto::kAddedStatCountFieldNumber;
const int EquipmentProto::kAddedStatFieldNumber;
const int EquipmentProto::kAddedFightingAmountFieldNumber;
const int EquipmentProto::kAddedStatTypeFieldNumber;
const int EquipmentProto::kIsUnmeltableFieldNumber;
const int EquipmentProto::kTiPinValFieldNumber;
const int EquipmentProto::kXunZhangRandomStatFieldNumber;
const int EquipmentProto::kXunZhangFightingAmountFieldNumber;
const int EquipmentProto::kFashionRandomStatFieldNumber;
const int EquipmentProto::kFashionFightingAmountFieldNumber;
const int EquipmentProto::kFashionExpireTimeFieldNumber;
const int EquipmentProto::kBaoShiFieldNumber;
const int EquipmentProto::kBaoShiVersionFieldNumber;
#endif  // !_MSC_VER

EquipmentProto::EquipmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentProto::InitAsDefaultInstance() {
  base_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  best_refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  added_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

EquipmentProto::EquipmentProto(const EquipmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentProto::SharedCtor() {
  _cached_size_ = 0;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  base_stat_ = NULL;
  base_fighting_amount_ = 0;
  best_refined_fighting_amount_ = 0;
  best_refined_stat_ = NULL;
  refined_times_ = 0;
  refined_stat_ = NULL;
  refined_fighting_amount_ = 0;
  added_stat_count_ = 0;
  added_stat_ = NULL;
  added_fighting_amount_ = 0;
  added_stat_type_ = 0;
  is_unmeltable_ = false;
  ti_pin_val_ = 0;
  xun_zhang_fighting_amount_ = 0;
  fashion_fighting_amount_ = 0;
  fashion_expire_time_ = GOOGLE_LONGLONG(0);
  bao_shi_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentProto::~EquipmentProto() {
  SharedDtor();
}

void EquipmentProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_stat_;
    delete best_refined_stat_;
    delete refined_stat_;
    delete added_stat_;
  }
}

void EquipmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentProto_descriptor_;
}

const EquipmentProto& EquipmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

EquipmentProto* EquipmentProto::default_instance_ = NULL;

EquipmentProto* EquipmentProto::New() const {
  return new EquipmentProto;
}

void EquipmentProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    quality_ = 0;
    if (has_base_stat()) {
      if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
    }
    base_fighting_amount_ = 0;
    best_refined_fighting_amount_ = 0;
    if (has_best_refined_stat()) {
      if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_refined_stat()) {
      if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_fighting_amount_ = 0;
    added_stat_count_ = 0;
    if (has_added_stat()) {
      if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
    }
    added_fighting_amount_ = 0;
    added_stat_type_ = 0;
    is_unmeltable_ = false;
    ti_pin_val_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    xun_zhang_fighting_amount_ = 0;
    fashion_fighting_amount_ = 0;
    fashion_expire_time_ = GOOGLE_LONGLONG(0);
    bao_shi_version_ = GOOGLE_LONGLONG(0);
  }
  xun_zhang_random_stat_.Clear();
  fashion_random_stat_.Clear();
  bao_shi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool binded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_base_stat;
        break;
      }

      // optional .app.message.SingleStatProto base_stat = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_best_refined_fighting_amount;
        break;
      }

      // optional int32 best_refined_fighting_amount = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_refined_fighting_amount_)));
          set_has_best_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_best_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto best_refined_stat = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_best_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_refined_times;
        break;
      }

      // optional int32 refined_times = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto refined_stat = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_refined_fighting_amount;
        break;
      }

      // optional int32 refined_fighting_amount = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_fighting_amount_)));
          set_has_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_added_stat_count;
        break;
      }

      // optional int32 added_stat_count = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_count_)));
          set_has_added_stat_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_added_stat;
        break;
      }

      // optional .app.message.SingleStatProto added_stat = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_added_fighting_amount;
        break;
      }

      // optional int32 added_fighting_amount = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_fighting_amount_)));
          set_has_added_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_is_unmeltable;
        break;
      }

      // optional bool is_unmeltable = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_unmeltable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unmeltable_)));
          set_has_is_unmeltable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_xun_zhang_random_stat;
        break;
      }

      // repeated .app.message.SingleStatProto xun_zhang_random_stat = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xun_zhang_random_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xun_zhang_random_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_xun_zhang_random_stat;
        if (input->ExpectTag(568)) goto parse_xun_zhang_fighting_amount;
        break;
      }

      // optional int32 xun_zhang_fighting_amount = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xun_zhang_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xun_zhang_fighting_amount_)));
          set_has_xun_zhang_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_fashion_random_stat;
        break;
      }

      // repeated .app.message.SingleStatProto fashion_random_stat = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion_random_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashion_random_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_fashion_random_stat;
        if (input->ExpectTag(584)) goto parse_fashion_fighting_amount;
        break;
      }

      // optional int32 fashion_fighting_amount = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_fighting_amount_)));
          set_has_fashion_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_fashion_expire_time;
        break;
      }

      // optional int64 fashion_expire_time = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fashion_expire_time_)));
          set_has_fashion_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_bao_shi;
        break;
      }

      // repeated .app.message.EquipmentBaoShiProto bao_shi = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bao_shi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bao_shi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_bao_shi;
        if (input->ExpectTag(608)) goto parse_bao_shi_version;
        break;
      }

      // optional int64 bao_shi_version = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bao_shi_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bao_shi_version_)));
          set_has_bao_shi_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool binded = 2;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binded(), output);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire_time(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->base_stat(), output);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->base_fighting_amount(), output);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->best_refined_fighting_amount(), output);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->best_refined_stat(), output);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->refined_times(), output);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->refined_stat(), output);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->refined_fighting_amount(), output);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->added_stat_count(), output);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->added_stat(), output);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->added_fighting_amount(), output);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->added_stat_type(), output);
  }

  // optional bool is_unmeltable = 68;
  if (has_is_unmeltable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->is_unmeltable(), output);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->ti_pin_val(), output);
  }

  // repeated .app.message.SingleStatProto xun_zhang_random_stat = 70;
  for (int i = 0; i < this->xun_zhang_random_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->xun_zhang_random_stat(i), output);
  }

  // optional int32 xun_zhang_fighting_amount = 71;
  if (has_xun_zhang_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->xun_zhang_fighting_amount(), output);
  }

  // repeated .app.message.SingleStatProto fashion_random_stat = 72;
  for (int i = 0; i < this->fashion_random_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->fashion_random_stat(i), output);
  }

  // optional int32 fashion_fighting_amount = 73;
  if (has_fashion_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->fashion_fighting_amount(), output);
  }

  // optional int64 fashion_expire_time = 74;
  if (has_fashion_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(74, this->fashion_expire_time(), output);
  }

  // repeated .app.message.EquipmentBaoShiProto bao_shi = 75;
  for (int i = 0; i < this->bao_shi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->bao_shi(i), output);
  }

  // optional int64 bao_shi_version = 76;
  if (has_bao_shi_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(76, this->bao_shi_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool binded = 2;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binded(), target);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire_time(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->base_stat(), target);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->base_fighting_amount(), target);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->best_refined_fighting_amount(), target);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->best_refined_stat(), target);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->refined_times(), target);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->refined_stat(), target);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->refined_fighting_amount(), target);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->added_stat_count(), target);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->added_stat(), target);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->added_fighting_amount(), target);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->added_stat_type(), target);
  }

  // optional bool is_unmeltable = 68;
  if (has_is_unmeltable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->is_unmeltable(), target);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->ti_pin_val(), target);
  }

  // repeated .app.message.SingleStatProto xun_zhang_random_stat = 70;
  for (int i = 0; i < this->xun_zhang_random_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->xun_zhang_random_stat(i), target);
  }

  // optional int32 xun_zhang_fighting_amount = 71;
  if (has_xun_zhang_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->xun_zhang_fighting_amount(), target);
  }

  // repeated .app.message.SingleStatProto fashion_random_stat = 72;
  for (int i = 0; i < this->fashion_random_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->fashion_random_stat(i), target);
  }

  // optional int32 fashion_fighting_amount = 73;
  if (has_fashion_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->fashion_fighting_amount(), target);
  }

  // optional int64 fashion_expire_time = 74;
  if (has_fashion_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(74, this->fashion_expire_time(), target);
  }

  // repeated .app.message.EquipmentBaoShiProto bao_shi = 75;
  for (int i = 0; i < this->bao_shi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->bao_shi(i), target);
  }

  // optional int64 bao_shi_version = 76;
  if (has_bao_shi_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(76, this->bao_shi_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool binded = 2;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional .app.message.SingleStatProto base_stat = 50;
    if (has_base_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_stat());
    }

    // optional int32 base_fighting_amount = 51;
    if (has_base_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 best_refined_fighting_amount = 52;
    if (has_best_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_refined_fighting_amount());
    }

    // optional .app.message.SingleStatProto best_refined_stat = 53;
    if (has_best_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->best_refined_stat());
    }

    // optional int32 refined_times = 61;
    if (has_refined_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.message.SingleStatProto refined_stat = 62;
    if (has_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refined_stat());
    }

    // optional int32 refined_fighting_amount = 63;
    if (has_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_fighting_amount());
    }

    // optional int32 added_stat_count = 64;
    if (has_added_stat_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_count());
    }

    // optional .app.message.SingleStatProto added_stat = 65;
    if (has_added_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->added_stat());
    }

    // optional int32 added_fighting_amount = 66;
    if (has_added_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_fighting_amount());
    }

    // optional int32 added_stat_type = 67;
    if (has_added_stat_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional bool is_unmeltable = 68;
    if (has_is_unmeltable()) {
      total_size += 2 + 1;
    }

    // optional int32 ti_pin_val = 69;
    if (has_ti_pin_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 xun_zhang_fighting_amount = 71;
    if (has_xun_zhang_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xun_zhang_fighting_amount());
    }

    // optional int32 fashion_fighting_amount = 73;
    if (has_fashion_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_fighting_amount());
    }

    // optional int64 fashion_expire_time = 74;
    if (has_fashion_expire_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fashion_expire_time());
    }

    // optional int64 bao_shi_version = 76;
    if (has_bao_shi_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bao_shi_version());
    }

  }
  // repeated .app.message.SingleStatProto xun_zhang_random_stat = 70;
  total_size += 2 * this->xun_zhang_random_stat_size();
  for (int i = 0; i < this->xun_zhang_random_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xun_zhang_random_stat(i));
  }

  // repeated .app.message.SingleStatProto fashion_random_stat = 72;
  total_size += 2 * this->fashion_random_stat_size();
  for (int i = 0; i < this->fashion_random_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashion_random_stat(i));
  }

  // repeated .app.message.EquipmentBaoShiProto bao_shi = 75;
  total_size += 2 * this->bao_shi_size();
  for (int i = 0; i < this->bao_shi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bao_shi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentProto::MergeFrom(const EquipmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  xun_zhang_random_stat_.MergeFrom(from.xun_zhang_random_stat_);
  fashion_random_stat_.MergeFrom(from.fashion_random_stat_);
  bao_shi_.MergeFrom(from.bao_shi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_base_stat()) {
      mutable_base_stat()->::app::message::SingleStatProto::MergeFrom(from.base_stat());
    }
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_best_refined_fighting_amount()) {
      set_best_refined_fighting_amount(from.best_refined_fighting_amount());
    }
    if (from.has_best_refined_stat()) {
      mutable_best_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.best_refined_stat());
    }
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refined_stat()) {
      mutable_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.refined_stat());
    }
    if (from.has_refined_fighting_amount()) {
      set_refined_fighting_amount(from.refined_fighting_amount());
    }
    if (from.has_added_stat_count()) {
      set_added_stat_count(from.added_stat_count());
    }
    if (from.has_added_stat()) {
      mutable_added_stat()->::app::message::SingleStatProto::MergeFrom(from.added_stat());
    }
    if (from.has_added_fighting_amount()) {
      set_added_fighting_amount(from.added_fighting_amount());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_is_unmeltable()) {
      set_is_unmeltable(from.is_unmeltable());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_xun_zhang_fighting_amount()) {
      set_xun_zhang_fighting_amount(from.xun_zhang_fighting_amount());
    }
    if (from.has_fashion_fighting_amount()) {
      set_fashion_fighting_amount(from.fashion_fighting_amount());
    }
    if (from.has_fashion_expire_time()) {
      set_fashion_expire_time(from.fashion_expire_time());
    }
    if (from.has_bao_shi_version()) {
      set_bao_shi_version(from.bao_shi_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentProto::CopyFrom(const EquipmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentProto::IsInitialized() const {

  return true;
}

void EquipmentProto::Swap(EquipmentProto* other) {
  if (other != this) {
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(quality_, other->quality_);
    std::swap(base_stat_, other->base_stat_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(best_refined_fighting_amount_, other->best_refined_fighting_amount_);
    std::swap(best_refined_stat_, other->best_refined_stat_);
    std::swap(refined_times_, other->refined_times_);
    std::swap(refined_stat_, other->refined_stat_);
    std::swap(refined_fighting_amount_, other->refined_fighting_amount_);
    std::swap(added_stat_count_, other->added_stat_count_);
    std::swap(added_stat_, other->added_stat_);
    std::swap(added_fighting_amount_, other->added_fighting_amount_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(is_unmeltable_, other->is_unmeltable_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    xun_zhang_random_stat_.Swap(&other->xun_zhang_random_stat_);
    std::swap(xun_zhang_fighting_amount_, other->xun_zhang_fighting_amount_);
    fashion_random_stat_.Swap(&other->fashion_random_stat_);
    std::swap(fashion_fighting_amount_, other->fashion_fighting_amount_);
    std::swap(fashion_expire_time_, other->fashion_expire_time_);
    bao_shi_.Swap(&other->bao_shi_);
    std::swap(bao_shi_version_, other->bao_shi_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentProto_descriptor_;
  metadata.reflection = EquipmentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentBaoShiProto::kIconFieldNumber;
const int EquipmentBaoShiProto::kNameFieldNumber;
const int EquipmentBaoShiProto::kBaseStatFieldNumber;
const int EquipmentBaoShiProto::kAttachStatFieldNumber;
const int EquipmentBaoShiProto::kHoleNumFieldNumber;
const int EquipmentBaoShiProto::kQualityFieldNumber;
const int EquipmentBaoShiProto::kFightingAmountFieldNumber;
const int EquipmentBaoShiProto::kBaseStatMinAndMaxFieldNumber;
const int EquipmentBaoShiProto::kAttchStatMinAndMaxFieldNumber;
#endif  // !_MSC_VER

EquipmentBaoShiProto::EquipmentBaoShiProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentBaoShiProto::InitAsDefaultInstance() {
  attachstat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

EquipmentBaoShiProto::EquipmentBaoShiProto(const EquipmentBaoShiProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentBaoShiProto::SharedCtor() {
  _cached_size_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attachstat_ = NULL;
  hole_num_ = 0;
  quality_ = 0;
  fighting_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentBaoShiProto::~EquipmentBaoShiProto() {
  SharedDtor();
}

void EquipmentBaoShiProto::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete attachstat_;
  }
}

void EquipmentBaoShiProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentBaoShiProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentBaoShiProto_descriptor_;
}

const EquipmentBaoShiProto& EquipmentBaoShiProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

EquipmentBaoShiProto* EquipmentBaoShiProto::default_instance_ = NULL;

EquipmentBaoShiProto* EquipmentBaoShiProto::New() const {
  return new EquipmentBaoShiProto;
}

void EquipmentBaoShiProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_attachstat()) {
      if (attachstat_ != NULL) attachstat_->::app::message::SingleStatProto::Clear();
    }
    hole_num_ = 0;
    quality_ = 0;
    fighting_amount_ = 0;
  }
  basestat_.Clear();
  base_stat_min_and_max_.Clear();
  attch_stat_min_and_max_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentBaoShiProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseStat;
        break;
      }

      // repeated .app.message.SingleStatProto baseStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basestat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseStat;
        if (input->ExpectTag(34)) goto parse_attachStat;
        break;
      }

      // optional .app.message.SingleStatProto attachStat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hole_num;
        break;
      }

      // optional int32 hole_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_num_)));
          set_has_hole_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional int32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fighting_amount;
        break;
      }

      // optional int32 fighting_amount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_amount_)));
          set_has_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_base_stat_min_and_max;
        break;
      }

      // repeated int32 base_stat_min_and_max = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_stat_min_and_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_base_stat_min_and_max())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_base_stat_min_and_max())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_base_stat_min_and_max;
        if (input->ExpectTag(72)) goto parse_attch_stat_min_and_max;
        break;
      }

      // repeated int32 attch_stat_min_and_max = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attch_stat_min_and_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_attch_stat_min_and_max())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attch_stat_min_and_max())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attch_stat_min_and_max;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentBaoShiProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->icon(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .app.message.SingleStatProto baseStat = 3;
  for (int i = 0; i < this->basestat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basestat(i), output);
  }

  // optional .app.message.SingleStatProto attachStat = 4;
  if (has_attachstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attachstat(), output);
  }

  // optional int32 hole_num = 5;
  if (has_hole_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hole_num(), output);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quality(), output);
  }

  // optional int32 fighting_amount = 7;
  if (has_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fighting_amount(), output);
  }

  // repeated int32 base_stat_min_and_max = 8;
  for (int i = 0; i < this->base_stat_min_and_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->base_stat_min_and_max(i), output);
  }

  // repeated int32 attch_stat_min_and_max = 9;
  for (int i = 0; i < this->attch_stat_min_and_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->attch_stat_min_and_max(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentBaoShiProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->icon(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .app.message.SingleStatProto baseStat = 3;
  for (int i = 0; i < this->basestat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basestat(i), target);
  }

  // optional .app.message.SingleStatProto attachStat = 4;
  if (has_attachstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attachstat(), target);
  }

  // optional int32 hole_num = 5;
  if (has_hole_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hole_num(), target);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quality(), target);
  }

  // optional int32 fighting_amount = 7;
  if (has_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fighting_amount(), target);
  }

  // repeated int32 base_stat_min_and_max = 8;
  for (int i = 0; i < this->base_stat_min_and_max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->base_stat_min_and_max(i), target);
  }

  // repeated int32 attch_stat_min_and_max = 9;
  for (int i = 0; i < this->attch_stat_min_and_max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->attch_stat_min_and_max(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentBaoShiProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .app.message.SingleStatProto attachStat = 4;
    if (has_attachstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachstat());
    }

    // optional int32 hole_num = 5;
    if (has_hole_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_num());
    }

    // optional int32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 fighting_amount = 7;
    if (has_fighting_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting_amount());
    }

  }
  // repeated .app.message.SingleStatProto baseStat = 3;
  total_size += 1 * this->basestat_size();
  for (int i = 0; i < this->basestat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basestat(i));
  }

  // repeated int32 base_stat_min_and_max = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->base_stat_min_and_max_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->base_stat_min_and_max(i));
    }
    total_size += 1 * this->base_stat_min_and_max_size() + data_size;
  }

  // repeated int32 attch_stat_min_and_max = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->attch_stat_min_and_max_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attch_stat_min_and_max(i));
    }
    total_size += 1 * this->attch_stat_min_and_max_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentBaoShiProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentBaoShiProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentBaoShiProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentBaoShiProto::MergeFrom(const EquipmentBaoShiProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  basestat_.MergeFrom(from.basestat_);
  base_stat_min_and_max_.MergeFrom(from.base_stat_min_and_max_);
  attch_stat_min_and_max_.MergeFrom(from.attch_stat_min_and_max_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_attachstat()) {
      mutable_attachstat()->::app::message::SingleStatProto::MergeFrom(from.attachstat());
    }
    if (from.has_hole_num()) {
      set_hole_num(from.hole_num());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_fighting_amount()) {
      set_fighting_amount(from.fighting_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentBaoShiProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentBaoShiProto::CopyFrom(const EquipmentBaoShiProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentBaoShiProto::IsInitialized() const {

  return true;
}

void EquipmentBaoShiProto::Swap(EquipmentBaoShiProto* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(name_, other->name_);
    basestat_.Swap(&other->basestat_);
    std::swap(attachstat_, other->attachstat_);
    std::swap(hole_num_, other->hole_num_);
    std::swap(quality_, other->quality_);
    std::swap(fighting_amount_, other->fighting_amount_);
    base_stat_min_and_max_.Swap(&other->base_stat_min_and_max_);
    attch_stat_min_and_max_.Swap(&other->attch_stat_min_and_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentBaoShiProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentBaoShiProto_descriptor_;
  metadata.reflection = EquipmentBaoShiProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountEquipmentProto::kBindedFieldNumber;
const int MountEquipmentProto::kExpireTimeFieldNumber;
const int MountEquipmentProto::kQualityFieldNumber;
const int MountEquipmentProto::kBaseStatFieldNumber;
const int MountEquipmentProto::kBaseFightingAmountFieldNumber;
const int MountEquipmentProto::kBestRefinedFightingAmountFieldNumber;
const int MountEquipmentProto::kBestRefinedStatFieldNumber;
const int MountEquipmentProto::kRefinedTimesFieldNumber;
const int MountEquipmentProto::kRefinedStatFieldNumber;
const int MountEquipmentProto::kRefinedFightingAmountFieldNumber;
const int MountEquipmentProto::kAddedStatCountFieldNumber;
const int MountEquipmentProto::kAddedStatFieldNumber;
const int MountEquipmentProto::kAddedFightingAmountFieldNumber;
const int MountEquipmentProto::kAddedStatTypeFieldNumber;
const int MountEquipmentProto::kTiPinValFieldNumber;
#endif  // !_MSC_VER

MountEquipmentProto::MountEquipmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountEquipmentProto::InitAsDefaultInstance() {
  base_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  best_refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  added_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

MountEquipmentProto::MountEquipmentProto(const MountEquipmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountEquipmentProto::SharedCtor() {
  _cached_size_ = 0;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  base_stat_ = NULL;
  base_fighting_amount_ = 0;
  best_refined_fighting_amount_ = 0;
  best_refined_stat_ = NULL;
  refined_times_ = 0;
  refined_stat_ = NULL;
  refined_fighting_amount_ = 0;
  added_stat_count_ = 0;
  added_stat_ = NULL;
  added_fighting_amount_ = 0;
  added_stat_type_ = 0;
  ti_pin_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountEquipmentProto::~MountEquipmentProto() {
  SharedDtor();
}

void MountEquipmentProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_stat_;
    delete best_refined_stat_;
    delete refined_stat_;
    delete added_stat_;
  }
}

void MountEquipmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountEquipmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountEquipmentProto_descriptor_;
}

const MountEquipmentProto& MountEquipmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

MountEquipmentProto* MountEquipmentProto::default_instance_ = NULL;

MountEquipmentProto* MountEquipmentProto::New() const {
  return new MountEquipmentProto;
}

void MountEquipmentProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    quality_ = 0;
    if (has_base_stat()) {
      if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
    }
    base_fighting_amount_ = 0;
    best_refined_fighting_amount_ = 0;
    if (has_best_refined_stat()) {
      if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_refined_stat()) {
      if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_fighting_amount_ = 0;
    added_stat_count_ = 0;
    if (has_added_stat()) {
      if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
    }
    added_fighting_amount_ = 0;
    added_stat_type_ = 0;
    ti_pin_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountEquipmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool binded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_base_stat;
        break;
      }

      // optional .app.message.SingleStatProto base_stat = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_best_refined_fighting_amount;
        break;
      }

      // optional int32 best_refined_fighting_amount = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_refined_fighting_amount_)));
          set_has_best_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_best_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto best_refined_stat = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_best_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_refined_times;
        break;
      }

      // optional int32 refined_times = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto refined_stat = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_refined_fighting_amount;
        break;
      }

      // optional int32 refined_fighting_amount = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_fighting_amount_)));
          set_has_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_added_stat_count;
        break;
      }

      // optional int32 added_stat_count = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_count_)));
          set_has_added_stat_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_added_stat;
        break;
      }

      // optional .app.message.SingleStatProto added_stat = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_added_fighting_amount;
        break;
      }

      // optional int32 added_fighting_amount = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_fighting_amount_)));
          set_has_added_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountEquipmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool binded = 2;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binded(), output);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire_time(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->base_stat(), output);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->base_fighting_amount(), output);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->best_refined_fighting_amount(), output);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->best_refined_stat(), output);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->refined_times(), output);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->refined_stat(), output);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->refined_fighting_amount(), output);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->added_stat_count(), output);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->added_stat(), output);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->added_fighting_amount(), output);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->added_stat_type(), output);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->ti_pin_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountEquipmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool binded = 2;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binded(), target);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire_time(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->base_stat(), target);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->base_fighting_amount(), target);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->best_refined_fighting_amount(), target);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->best_refined_stat(), target);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->refined_times(), target);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->refined_stat(), target);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->refined_fighting_amount(), target);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->added_stat_count(), target);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->added_stat(), target);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->added_fighting_amount(), target);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->added_stat_type(), target);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->ti_pin_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountEquipmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool binded = 2;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional .app.message.SingleStatProto base_stat = 50;
    if (has_base_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_stat());
    }

    // optional int32 base_fighting_amount = 51;
    if (has_base_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 best_refined_fighting_amount = 52;
    if (has_best_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_refined_fighting_amount());
    }

    // optional .app.message.SingleStatProto best_refined_stat = 53;
    if (has_best_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->best_refined_stat());
    }

    // optional int32 refined_times = 61;
    if (has_refined_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.message.SingleStatProto refined_stat = 62;
    if (has_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refined_stat());
    }

    // optional int32 refined_fighting_amount = 63;
    if (has_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_fighting_amount());
    }

    // optional int32 added_stat_count = 64;
    if (has_added_stat_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_count());
    }

    // optional .app.message.SingleStatProto added_stat = 65;
    if (has_added_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->added_stat());
    }

    // optional int32 added_fighting_amount = 66;
    if (has_added_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_fighting_amount());
    }

    // optional int32 added_stat_type = 67;
    if (has_added_stat_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional int32 ti_pin_val = 69;
    if (has_ti_pin_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountEquipmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountEquipmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountEquipmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountEquipmentProto::MergeFrom(const MountEquipmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_base_stat()) {
      mutable_base_stat()->::app::message::SingleStatProto::MergeFrom(from.base_stat());
    }
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_best_refined_fighting_amount()) {
      set_best_refined_fighting_amount(from.best_refined_fighting_amount());
    }
    if (from.has_best_refined_stat()) {
      mutable_best_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.best_refined_stat());
    }
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refined_stat()) {
      mutable_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.refined_stat());
    }
    if (from.has_refined_fighting_amount()) {
      set_refined_fighting_amount(from.refined_fighting_amount());
    }
    if (from.has_added_stat_count()) {
      set_added_stat_count(from.added_stat_count());
    }
    if (from.has_added_stat()) {
      mutable_added_stat()->::app::message::SingleStatProto::MergeFrom(from.added_stat());
    }
    if (from.has_added_fighting_amount()) {
      set_added_fighting_amount(from.added_fighting_amount());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountEquipmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountEquipmentProto::CopyFrom(const MountEquipmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountEquipmentProto::IsInitialized() const {

  return true;
}

void MountEquipmentProto::Swap(MountEquipmentProto* other) {
  if (other != this) {
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(quality_, other->quality_);
    std::swap(base_stat_, other->base_stat_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(best_refined_fighting_amount_, other->best_refined_fighting_amount_);
    std::swap(best_refined_stat_, other->best_refined_stat_);
    std::swap(refined_times_, other->refined_times_);
    std::swap(refined_stat_, other->refined_stat_);
    std::swap(refined_fighting_amount_, other->refined_fighting_amount_);
    std::swap(added_stat_count_, other->added_stat_count_);
    std::swap(added_stat_, other->added_stat_);
    std::swap(added_fighting_amount_, other->added_fighting_amount_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountEquipmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountEquipmentProto_descriptor_;
  metadata.reflection = MountEquipmentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShieldEquipmentProto::kBindedFieldNumber;
const int ShieldEquipmentProto::kExpireTimeFieldNumber;
const int ShieldEquipmentProto::kQualityFieldNumber;
const int ShieldEquipmentProto::kBaseStatFieldNumber;
const int ShieldEquipmentProto::kBaseFightingAmountFieldNumber;
const int ShieldEquipmentProto::kBestRefinedFightingAmountFieldNumber;
const int ShieldEquipmentProto::kBestRefinedStatFieldNumber;
const int ShieldEquipmentProto::kRefinedTimesFieldNumber;
const int ShieldEquipmentProto::kRefinedStatFieldNumber;
const int ShieldEquipmentProto::kRefinedFightingAmountFieldNumber;
const int ShieldEquipmentProto::kAddedStatCountFieldNumber;
const int ShieldEquipmentProto::kAddedStatFieldNumber;
const int ShieldEquipmentProto::kAddedFightingAmountFieldNumber;
const int ShieldEquipmentProto::kAddedStatTypeFieldNumber;
const int ShieldEquipmentProto::kTiPinValFieldNumber;
#endif  // !_MSC_VER

ShieldEquipmentProto::ShieldEquipmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShieldEquipmentProto::InitAsDefaultInstance() {
  base_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  best_refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  added_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

ShieldEquipmentProto::ShieldEquipmentProto(const ShieldEquipmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShieldEquipmentProto::SharedCtor() {
  _cached_size_ = 0;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  base_stat_ = NULL;
  base_fighting_amount_ = 0;
  best_refined_fighting_amount_ = 0;
  best_refined_stat_ = NULL;
  refined_times_ = 0;
  refined_stat_ = NULL;
  refined_fighting_amount_ = 0;
  added_stat_count_ = 0;
  added_stat_ = NULL;
  added_fighting_amount_ = 0;
  added_stat_type_ = 0;
  ti_pin_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShieldEquipmentProto::~ShieldEquipmentProto() {
  SharedDtor();
}

void ShieldEquipmentProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_stat_;
    delete best_refined_stat_;
    delete refined_stat_;
    delete added_stat_;
  }
}

void ShieldEquipmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShieldEquipmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShieldEquipmentProto_descriptor_;
}

const ShieldEquipmentProto& ShieldEquipmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

ShieldEquipmentProto* ShieldEquipmentProto::default_instance_ = NULL;

ShieldEquipmentProto* ShieldEquipmentProto::New() const {
  return new ShieldEquipmentProto;
}

void ShieldEquipmentProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    quality_ = 0;
    if (has_base_stat()) {
      if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
    }
    base_fighting_amount_ = 0;
    best_refined_fighting_amount_ = 0;
    if (has_best_refined_stat()) {
      if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_refined_stat()) {
      if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_fighting_amount_ = 0;
    added_stat_count_ = 0;
    if (has_added_stat()) {
      if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
    }
    added_fighting_amount_ = 0;
    added_stat_type_ = 0;
    ti_pin_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShieldEquipmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool binded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_base_stat;
        break;
      }

      // optional .app.message.SingleStatProto base_stat = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_best_refined_fighting_amount;
        break;
      }

      // optional int32 best_refined_fighting_amount = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_refined_fighting_amount_)));
          set_has_best_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_best_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto best_refined_stat = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_best_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_refined_times;
        break;
      }

      // optional int32 refined_times = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto refined_stat = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_refined_fighting_amount;
        break;
      }

      // optional int32 refined_fighting_amount = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_fighting_amount_)));
          set_has_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_added_stat_count;
        break;
      }

      // optional int32 added_stat_count = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_count_)));
          set_has_added_stat_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_added_stat;
        break;
      }

      // optional .app.message.SingleStatProto added_stat = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_added_fighting_amount;
        break;
      }

      // optional int32 added_fighting_amount = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_fighting_amount_)));
          set_has_added_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShieldEquipmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool binded = 2;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binded(), output);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire_time(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->base_stat(), output);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->base_fighting_amount(), output);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->best_refined_fighting_amount(), output);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->best_refined_stat(), output);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->refined_times(), output);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->refined_stat(), output);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->refined_fighting_amount(), output);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->added_stat_count(), output);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->added_stat(), output);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->added_fighting_amount(), output);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->added_stat_type(), output);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->ti_pin_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShieldEquipmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool binded = 2;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binded(), target);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire_time(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->base_stat(), target);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->base_fighting_amount(), target);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->best_refined_fighting_amount(), target);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->best_refined_stat(), target);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->refined_times(), target);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->refined_stat(), target);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->refined_fighting_amount(), target);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->added_stat_count(), target);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->added_stat(), target);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->added_fighting_amount(), target);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->added_stat_type(), target);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->ti_pin_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShieldEquipmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool binded = 2;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional .app.message.SingleStatProto base_stat = 50;
    if (has_base_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_stat());
    }

    // optional int32 base_fighting_amount = 51;
    if (has_base_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 best_refined_fighting_amount = 52;
    if (has_best_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_refined_fighting_amount());
    }

    // optional .app.message.SingleStatProto best_refined_stat = 53;
    if (has_best_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->best_refined_stat());
    }

    // optional int32 refined_times = 61;
    if (has_refined_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.message.SingleStatProto refined_stat = 62;
    if (has_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refined_stat());
    }

    // optional int32 refined_fighting_amount = 63;
    if (has_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_fighting_amount());
    }

    // optional int32 added_stat_count = 64;
    if (has_added_stat_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_count());
    }

    // optional .app.message.SingleStatProto added_stat = 65;
    if (has_added_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->added_stat());
    }

    // optional int32 added_fighting_amount = 66;
    if (has_added_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_fighting_amount());
    }

    // optional int32 added_stat_type = 67;
    if (has_added_stat_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional int32 ti_pin_val = 69;
    if (has_ti_pin_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldEquipmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShieldEquipmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShieldEquipmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShieldEquipmentProto::MergeFrom(const ShieldEquipmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_base_stat()) {
      mutable_base_stat()->::app::message::SingleStatProto::MergeFrom(from.base_stat());
    }
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_best_refined_fighting_amount()) {
      set_best_refined_fighting_amount(from.best_refined_fighting_amount());
    }
    if (from.has_best_refined_stat()) {
      mutable_best_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.best_refined_stat());
    }
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refined_stat()) {
      mutable_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.refined_stat());
    }
    if (from.has_refined_fighting_amount()) {
      set_refined_fighting_amount(from.refined_fighting_amount());
    }
    if (from.has_added_stat_count()) {
      set_added_stat_count(from.added_stat_count());
    }
    if (from.has_added_stat()) {
      mutable_added_stat()->::app::message::SingleStatProto::MergeFrom(from.added_stat());
    }
    if (from.has_added_fighting_amount()) {
      set_added_fighting_amount(from.added_fighting_amount());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShieldEquipmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShieldEquipmentProto::CopyFrom(const ShieldEquipmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldEquipmentProto::IsInitialized() const {

  return true;
}

void ShieldEquipmentProto::Swap(ShieldEquipmentProto* other) {
  if (other != this) {
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(quality_, other->quality_);
    std::swap(base_stat_, other->base_stat_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(best_refined_fighting_amount_, other->best_refined_fighting_amount_);
    std::swap(best_refined_stat_, other->best_refined_stat_);
    std::swap(refined_times_, other->refined_times_);
    std::swap(refined_stat_, other->refined_stat_);
    std::swap(refined_fighting_amount_, other->refined_fighting_amount_);
    std::swap(added_stat_count_, other->added_stat_count_);
    std::swap(added_stat_, other->added_stat_);
    std::swap(added_fighting_amount_, other->added_fighting_amount_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShieldEquipmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShieldEquipmentProto_descriptor_;
  metadata.reflection = ShieldEquipmentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEquipmentProto::kBindedFieldNumber;
const int PetEquipmentProto::kExpireTimeFieldNumber;
const int PetEquipmentProto::kQualityFieldNumber;
const int PetEquipmentProto::kBaseStatFieldNumber;
const int PetEquipmentProto::kBaseFightingAmountFieldNumber;
const int PetEquipmentProto::kBestRefinedFightingAmountFieldNumber;
const int PetEquipmentProto::kBestRefinedStatFieldNumber;
const int PetEquipmentProto::kRefinedTimesFieldNumber;
const int PetEquipmentProto::kRefinedStatFieldNumber;
const int PetEquipmentProto::kRefinedFightingAmountFieldNumber;
const int PetEquipmentProto::kAddedStatCountFieldNumber;
const int PetEquipmentProto::kAddedStatFieldNumber;
const int PetEquipmentProto::kAddedFightingAmountFieldNumber;
const int PetEquipmentProto::kAddedStatTypeFieldNumber;
const int PetEquipmentProto::kTiPinValFieldNumber;
#endif  // !_MSC_VER

PetEquipmentProto::PetEquipmentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetEquipmentProto::InitAsDefaultInstance() {
  base_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  best_refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  refined_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
  added_stat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

PetEquipmentProto::PetEquipmentProto(const PetEquipmentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetEquipmentProto::SharedCtor() {
  _cached_size_ = 0;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  base_stat_ = NULL;
  base_fighting_amount_ = 0;
  best_refined_fighting_amount_ = 0;
  best_refined_stat_ = NULL;
  refined_times_ = 0;
  refined_stat_ = NULL;
  refined_fighting_amount_ = 0;
  added_stat_count_ = 0;
  added_stat_ = NULL;
  added_fighting_amount_ = 0;
  added_stat_type_ = 0;
  ti_pin_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEquipmentProto::~PetEquipmentProto() {
  SharedDtor();
}

void PetEquipmentProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_stat_;
    delete best_refined_stat_;
    delete refined_stat_;
    delete added_stat_;
  }
}

void PetEquipmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEquipmentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEquipmentProto_descriptor_;
}

const PetEquipmentProto& PetEquipmentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

PetEquipmentProto* PetEquipmentProto::default_instance_ = NULL;

PetEquipmentProto* PetEquipmentProto::New() const {
  return new PetEquipmentProto;
}

void PetEquipmentProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    quality_ = 0;
    if (has_base_stat()) {
      if (base_stat_ != NULL) base_stat_->::app::message::SingleStatProto::Clear();
    }
    base_fighting_amount_ = 0;
    best_refined_fighting_amount_ = 0;
    if (has_best_refined_stat()) {
      if (best_refined_stat_ != NULL) best_refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_refined_stat()) {
      if (refined_stat_ != NULL) refined_stat_->::app::message::SingleStatProto::Clear();
    }
    refined_fighting_amount_ = 0;
    added_stat_count_ = 0;
    if (has_added_stat()) {
      if (added_stat_ != NULL) added_stat_->::app::message::SingleStatProto::Clear();
    }
    added_fighting_amount_ = 0;
    added_stat_type_ = 0;
    ti_pin_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEquipmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool binded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_base_stat;
        break;
      }

      // optional .app.message.SingleStatProto base_stat = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_base_fighting_amount;
        break;
      }

      // optional int32 base_fighting_amount = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_fighting_amount_)));
          set_has_base_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_best_refined_fighting_amount;
        break;
      }

      // optional int32 best_refined_fighting_amount = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_refined_fighting_amount_)));
          set_has_best_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_best_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto best_refined_stat = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_best_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_refined_times;
        break;
      }

      // optional int32 refined_times = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_times_)));
          set_has_refined_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_refined_stat;
        break;
      }

      // optional .app.message.SingleStatProto refined_stat = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refined_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refined_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_refined_fighting_amount;
        break;
      }

      // optional int32 refined_fighting_amount = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refined_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refined_fighting_amount_)));
          set_has_refined_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_added_stat_count;
        break;
      }

      // optional int32 added_stat_count = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_count_)));
          set_has_added_stat_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_added_stat;
        break;
      }

      // optional .app.message.SingleStatProto added_stat = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_added_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_added_fighting_amount;
        break;
      }

      // optional int32 added_fighting_amount = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_fighting_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_fighting_amount_)));
          set_has_added_fighting_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_added_stat_type;
        break;
      }

      // optional int32 added_stat_type = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_stat_type_)));
          set_has_added_stat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_ti_pin_val;
        break;
      }

      // optional int32 ti_pin_val = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_pin_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ti_pin_val_)));
          set_has_ti_pin_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetEquipmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool binded = 2;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binded(), output);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire_time(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->base_stat(), output);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->base_fighting_amount(), output);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->best_refined_fighting_amount(), output);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->best_refined_stat(), output);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->refined_times(), output);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->refined_stat(), output);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->refined_fighting_amount(), output);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->added_stat_count(), output);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->added_stat(), output);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->added_fighting_amount(), output);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->added_stat_type(), output);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->ti_pin_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetEquipmentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool binded = 2;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binded(), target);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire_time(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional .app.message.SingleStatProto base_stat = 50;
  if (has_base_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->base_stat(), target);
  }

  // optional int32 base_fighting_amount = 51;
  if (has_base_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->base_fighting_amount(), target);
  }

  // optional int32 best_refined_fighting_amount = 52;
  if (has_best_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->best_refined_fighting_amount(), target);
  }

  // optional .app.message.SingleStatProto best_refined_stat = 53;
  if (has_best_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->best_refined_stat(), target);
  }

  // optional int32 refined_times = 61;
  if (has_refined_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->refined_times(), target);
  }

  // optional .app.message.SingleStatProto refined_stat = 62;
  if (has_refined_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->refined_stat(), target);
  }

  // optional int32 refined_fighting_amount = 63;
  if (has_refined_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->refined_fighting_amount(), target);
  }

  // optional int32 added_stat_count = 64;
  if (has_added_stat_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->added_stat_count(), target);
  }

  // optional .app.message.SingleStatProto added_stat = 65;
  if (has_added_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->added_stat(), target);
  }

  // optional int32 added_fighting_amount = 66;
  if (has_added_fighting_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->added_fighting_amount(), target);
  }

  // optional int32 added_stat_type = 67;
  if (has_added_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->added_stat_type(), target);
  }

  // optional int32 ti_pin_val = 69;
  if (has_ti_pin_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->ti_pin_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetEquipmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool binded = 2;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional .app.message.SingleStatProto base_stat = 50;
    if (has_base_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_stat());
    }

    // optional int32 base_fighting_amount = 51;
    if (has_base_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_fighting_amount());
    }

    // optional int32 best_refined_fighting_amount = 52;
    if (has_best_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_refined_fighting_amount());
    }

    // optional .app.message.SingleStatProto best_refined_stat = 53;
    if (has_best_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->best_refined_stat());
    }

    // optional int32 refined_times = 61;
    if (has_refined_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .app.message.SingleStatProto refined_stat = 62;
    if (has_refined_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refined_stat());
    }

    // optional int32 refined_fighting_amount = 63;
    if (has_refined_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refined_fighting_amount());
    }

    // optional int32 added_stat_count = 64;
    if (has_added_stat_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_count());
    }

    // optional .app.message.SingleStatProto added_stat = 65;
    if (has_added_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->added_stat());
    }

    // optional int32 added_fighting_amount = 66;
    if (has_added_fighting_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_fighting_amount());
    }

    // optional int32 added_stat_type = 67;
    if (has_added_stat_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_stat_type());
    }

    // optional int32 ti_pin_val = 69;
    if (has_ti_pin_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ti_pin_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEquipmentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEquipmentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEquipmentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEquipmentProto::MergeFrom(const PetEquipmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_base_stat()) {
      mutable_base_stat()->::app::message::SingleStatProto::MergeFrom(from.base_stat());
    }
    if (from.has_base_fighting_amount()) {
      set_base_fighting_amount(from.base_fighting_amount());
    }
    if (from.has_best_refined_fighting_amount()) {
      set_best_refined_fighting_amount(from.best_refined_fighting_amount());
    }
    if (from.has_best_refined_stat()) {
      mutable_best_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.best_refined_stat());
    }
    if (from.has_refined_times()) {
      set_refined_times(from.refined_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refined_stat()) {
      mutable_refined_stat()->::app::message::SingleStatProto::MergeFrom(from.refined_stat());
    }
    if (from.has_refined_fighting_amount()) {
      set_refined_fighting_amount(from.refined_fighting_amount());
    }
    if (from.has_added_stat_count()) {
      set_added_stat_count(from.added_stat_count());
    }
    if (from.has_added_stat()) {
      mutable_added_stat()->::app::message::SingleStatProto::MergeFrom(from.added_stat());
    }
    if (from.has_added_fighting_amount()) {
      set_added_fighting_amount(from.added_fighting_amount());
    }
    if (from.has_added_stat_type()) {
      set_added_stat_type(from.added_stat_type());
    }
    if (from.has_ti_pin_val()) {
      set_ti_pin_val(from.ti_pin_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEquipmentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEquipmentProto::CopyFrom(const PetEquipmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEquipmentProto::IsInitialized() const {

  return true;
}

void PetEquipmentProto::Swap(PetEquipmentProto* other) {
  if (other != this) {
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(quality_, other->quality_);
    std::swap(base_stat_, other->base_stat_);
    std::swap(base_fighting_amount_, other->base_fighting_amount_);
    std::swap(best_refined_fighting_amount_, other->best_refined_fighting_amount_);
    std::swap(best_refined_stat_, other->best_refined_stat_);
    std::swap(refined_times_, other->refined_times_);
    std::swap(refined_stat_, other->refined_stat_);
    std::swap(refined_fighting_amount_, other->refined_fighting_amount_);
    std::swap(added_stat_count_, other->added_stat_count_);
    std::swap(added_stat_, other->added_stat_);
    std::swap(added_fighting_amount_, other->added_fighting_amount_);
    std::swap(added_stat_type_, other->added_stat_type_);
    std::swap(ti_pin_val_, other->ti_pin_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEquipmentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEquipmentProto_descriptor_;
  metadata.reflection = PetEquipmentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaoShiProto::kBindedFieldNumber;
const int BaoShiProto::kExpireTimeFieldNumber;
const int BaoShiProto::kBaseStatFieldNumber;
const int BaoShiProto::kAttachStatFieldNumber;
const int BaoShiProto::kFightingAmountFieldNumber;
const int BaoShiProto::kBaoShiVersionFieldNumber;
#endif  // !_MSC_VER

BaoShiProto::BaoShiProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaoShiProto::InitAsDefaultInstance() {
  attachstat_ = const_cast< ::app::message::SingleStatProto*>(&::app::message::SingleStatProto::default_instance());
}

BaoShiProto::BaoShiProto(const BaoShiProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaoShiProto::SharedCtor() {
  _cached_size_ = 0;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  attachstat_ = NULL;
  fightingamount_ = 0;
  bao_shi_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaoShiProto::~BaoShiProto() {
  SharedDtor();
}

void BaoShiProto::SharedDtor() {
  if (this != default_instance_) {
    delete attachstat_;
  }
}

void BaoShiProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaoShiProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaoShiProto_descriptor_;
}

const BaoShiProto& BaoShiProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

BaoShiProto* BaoShiProto::default_instance_ = NULL;

BaoShiProto* BaoShiProto::New() const {
  return new BaoShiProto;
}

void BaoShiProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    if (has_attachstat()) {
      if (attachstat_ != NULL) attachstat_->::app::message::SingleStatProto::Clear();
    }
    fightingamount_ = 0;
    bao_shi_version_ = GOOGLE_LONGLONG(0);
  }
  basestat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaoShiProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool binded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_baseStat;
        break;
      }

      // repeated .app.message.SingleStatProto baseStat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basestat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_baseStat;
        if (input->ExpectTag(50)) goto parse_attachStat;
        break;
      }

      // optional .app.message.SingleStatProto attachStat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fightingAmount;
        break;
      }

      // optional int32 fightingAmount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightingAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightingamount_)));
          set_has_fightingamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bao_shi_version;
        break;
      }

      // optional int64 bao_shi_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bao_shi_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bao_shi_version_)));
          set_has_bao_shi_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaoShiProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool binded = 2;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binded(), output);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire_time(), output);
  }

  // repeated .app.message.SingleStatProto baseStat = 5;
  for (int i = 0; i < this->basestat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->basestat(i), output);
  }

  // optional .app.message.SingleStatProto attachStat = 6;
  if (has_attachstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attachstat(), output);
  }

  // optional int32 fightingAmount = 7;
  if (has_fightingamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fightingamount(), output);
  }

  // optional int64 bao_shi_version = 8;
  if (has_bao_shi_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->bao_shi_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaoShiProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool binded = 2;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binded(), target);
  }

  // optional int64 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire_time(), target);
  }

  // repeated .app.message.SingleStatProto baseStat = 5;
  for (int i = 0; i < this->basestat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->basestat(i), target);
  }

  // optional .app.message.SingleStatProto attachStat = 6;
  if (has_attachstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attachstat(), target);
  }

  // optional int32 fightingAmount = 7;
  if (has_fightingamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fightingamount(), target);
  }

  // optional int64 bao_shi_version = 8;
  if (has_bao_shi_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->bao_shi_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaoShiProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool binded = 2;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional .app.message.SingleStatProto attachStat = 6;
    if (has_attachstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachstat());
    }

    // optional int32 fightingAmount = 7;
    if (has_fightingamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightingamount());
    }

    // optional int64 bao_shi_version = 8;
    if (has_bao_shi_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bao_shi_version());
    }

  }
  // repeated .app.message.SingleStatProto baseStat = 5;
  total_size += 1 * this->basestat_size();
  for (int i = 0; i < this->basestat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basestat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaoShiProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaoShiProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaoShiProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaoShiProto::MergeFrom(const BaoShiProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  basestat_.MergeFrom(from.basestat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_attachstat()) {
      mutable_attachstat()->::app::message::SingleStatProto::MergeFrom(from.attachstat());
    }
    if (from.has_fightingamount()) {
      set_fightingamount(from.fightingamount());
    }
    if (from.has_bao_shi_version()) {
      set_bao_shi_version(from.bao_shi_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaoShiProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaoShiProto::CopyFrom(const BaoShiProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaoShiProto::IsInitialized() const {

  return true;
}

void BaoShiProto::Swap(BaoShiProto* other) {
  if (other != this) {
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    basestat_.Swap(&other->basestat_);
    std::swap(attachstat_, other->attachstat_);
    std::swap(fightingamount_, other->fightingamount_);
    std::swap(bao_shi_version_, other->bao_shi_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaoShiProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaoShiProto_descriptor_;
  metadata.reflection = BaoShiProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperWeaponGemDataProto::kBaseDataFieldNumber;
const int SuperWeaponGemDataProto::kAddStatFieldNumber;
const int SuperWeaponGemDataProto::kLevelFieldNumber;
#endif  // !_MSC_VER

SuperWeaponGemDataProto::SuperWeaponGemDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuperWeaponGemDataProto::InitAsDefaultInstance() {
  base_data_ = const_cast< ::app::message::GoodsDataProto*>(&::app::message::GoodsDataProto::default_instance());
  add_stat_ = const_cast< ::app::message::SpriteStatProto*>(&::app::message::SpriteStatProto::default_instance());
}

SuperWeaponGemDataProto::SuperWeaponGemDataProto(const SuperWeaponGemDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuperWeaponGemDataProto::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  add_stat_ = NULL;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperWeaponGemDataProto::~SuperWeaponGemDataProto() {
  SharedDtor();
}

void SuperWeaponGemDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete add_stat_;
  }
}

void SuperWeaponGemDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperWeaponGemDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperWeaponGemDataProto_descriptor_;
}

const SuperWeaponGemDataProto& SuperWeaponGemDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

SuperWeaponGemDataProto* SuperWeaponGemDataProto::default_instance_ = NULL;

SuperWeaponGemDataProto* SuperWeaponGemDataProto::New() const {
  return new SuperWeaponGemDataProto;
}

void SuperWeaponGemDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::app::message::GoodsDataProto::Clear();
    }
    if (has_add_stat()) {
      if (add_stat_ != NULL) add_stat_->::app::message::SpriteStatProto::Clear();
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperWeaponGemDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .app.message.GoodsDataProto base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add_stat;
        break;
      }

      // optional .app.message.SpriteStatProto add_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuperWeaponGemDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional .app.message.SpriteStatProto add_stat = 2;
  if (has_add_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add_stat(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuperWeaponGemDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .app.message.GoodsDataProto base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional .app.message.SpriteStatProto add_stat = 2;
  if (has_add_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->add_stat(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuperWeaponGemDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .app.message.GoodsDataProto base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .app.message.SpriteStatProto add_stat = 2;
    if (has_add_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_stat());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperWeaponGemDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperWeaponGemDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperWeaponGemDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperWeaponGemDataProto::MergeFrom(const SuperWeaponGemDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::app::message::GoodsDataProto::MergeFrom(from.base_data());
    }
    if (from.has_add_stat()) {
      mutable_add_stat()->::app::message::SpriteStatProto::MergeFrom(from.add_stat());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperWeaponGemDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperWeaponGemDataProto::CopyFrom(const SuperWeaponGemDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperWeaponGemDataProto::IsInitialized() const {

  return true;
}

void SuperWeaponGemDataProto::Swap(SuperWeaponGemDataProto* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(add_stat_, other->add_stat_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperWeaponGemDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperWeaponGemDataProto_descriptor_;
  metadata.reflection = SuperWeaponGemDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsWrapperProto::kStaticDataFieldNumber;
const int GoodsWrapperProto::kDynamicDataFieldNumber;
const int GoodsWrapperProto::kCountFieldNumber;
const int GoodsWrapperProto::kBindedFieldNumber;
const int GoodsWrapperProto::kExpireTimeFieldNumber;
const int GoodsWrapperProto::kDurationFieldNumber;
const int GoodsWrapperProto::kTabFieldNumber;
const int GoodsWrapperProto::kCanUseTimeFieldNumber;
const int GoodsWrapperProto::kCanUseAfterMillisFieldNumber;
#endif  // !_MSC_VER

GoodsWrapperProto::GoodsWrapperProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsWrapperProto::InitAsDefaultInstance() {
}

GoodsWrapperProto::GoodsWrapperProto(const GoodsWrapperProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsWrapperProto::SharedCtor() {
  _cached_size_ = 0;
  static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dynamic_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 1;
  binded_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  duration_ = 0;
  tab_ = 0;
  can_use_time_ = GOOGLE_LONGLONG(0);
  can_use_after_millis_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsWrapperProto::~GoodsWrapperProto() {
  SharedDtor();
}

void GoodsWrapperProto::SharedDtor() {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    delete static_data_;
  }
  if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_data_;
  }
  if (this != default_instance_) {
  }
}

void GoodsWrapperProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsWrapperProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsWrapperProto_descriptor_;
}

const GoodsWrapperProto& GoodsWrapperProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

GoodsWrapperProto* GoodsWrapperProto::default_instance_ = NULL;

GoodsWrapperProto* GoodsWrapperProto::New() const {
  return new GoodsWrapperProto;
}

void GoodsWrapperProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_static_data()) {
      if (static_data_ != &::google::protobuf::internal::kEmptyString) {
        static_data_->clear();
      }
    }
    if (has_dynamic_data()) {
      if (dynamic_data_ != &::google::protobuf::internal::kEmptyString) {
        dynamic_data_->clear();
      }
    }
    count_ = 1;
    binded_ = false;
    expire_time_ = GOOGLE_LONGLONG(0);
    duration_ = 0;
    tab_ = 0;
    can_use_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    can_use_after_millis_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsWrapperProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes static_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_static_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dynamic_data;
        break;
      }

      // optional bytes dynamic_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamic_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dynamic_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }

      // optional int32 count = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_binded;
        break;
      }

      // optional bool binded = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
          set_has_binded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_expire_time;
        break;
      }

      // optional int64 expire_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_duration;
        break;
      }

      // optional int32 duration = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tab;
        break;
      }

      // optional int32 tab = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tab:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_)));
          set_has_tab();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_can_use_time;
        break;
      }

      // optional int64 can_use_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_use_time_)));
          set_has_can_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_can_use_after_millis;
        break;
      }

      // optional int64 can_use_after_millis = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_use_after_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_use_after_millis_)));
          set_has_can_use_after_millis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsWrapperProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes static_data = 1;
  if (has_static_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->static_data(), output);
  }

  // optional bytes dynamic_data = 2;
  if (has_dynamic_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->dynamic_data(), output);
  }

  // optional int32 count = 10 [default = 1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->count(), output);
  }

  // optional bool binded = 11;
  if (has_binded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->binded(), output);
  }

  // optional int64 expire_time = 12;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->expire_time(), output);
  }

  // optional int32 duration = 13;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->duration(), output);
  }

  // optional int32 tab = 14;
  if (has_tab()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tab(), output);
  }

  // optional int64 can_use_time = 15;
  if (has_can_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->can_use_time(), output);
  }

  // optional int64 can_use_after_millis = 16;
  if (has_can_use_after_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->can_use_after_millis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsWrapperProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes static_data = 1;
  if (has_static_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->static_data(), target);
  }

  // optional bytes dynamic_data = 2;
  if (has_dynamic_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dynamic_data(), target);
  }

  // optional int32 count = 10 [default = 1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->count(), target);
  }

  // optional bool binded = 11;
  if (has_binded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->binded(), target);
  }

  // optional int64 expire_time = 12;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->expire_time(), target);
  }

  // optional int32 duration = 13;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->duration(), target);
  }

  // optional int32 tab = 14;
  if (has_tab()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tab(), target);
  }

  // optional int64 can_use_time = 15;
  if (has_can_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->can_use_time(), target);
  }

  // optional int64 can_use_after_millis = 16;
  if (has_can_use_after_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->can_use_after_millis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsWrapperProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes static_data = 1;
    if (has_static_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->static_data());
    }

    // optional bytes dynamic_data = 2;
    if (has_dynamic_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dynamic_data());
    }

    // optional int32 count = 10 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool binded = 11;
    if (has_binded()) {
      total_size += 1 + 1;
    }

    // optional int64 expire_time = 12;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional int32 duration = 13;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 tab = 14;
    if (has_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab());
    }

    // optional int64 can_use_time = 15;
    if (has_can_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_use_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 can_use_after_millis = 16;
    if (has_can_use_after_millis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_use_after_millis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsWrapperProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsWrapperProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsWrapperProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsWrapperProto::MergeFrom(const GoodsWrapperProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_static_data()) {
      set_static_data(from.static_data());
    }
    if (from.has_dynamic_data()) {
      set_dynamic_data(from.dynamic_data());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_binded()) {
      set_binded(from.binded());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_tab()) {
      set_tab(from.tab());
    }
    if (from.has_can_use_time()) {
      set_can_use_time(from.can_use_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_can_use_after_millis()) {
      set_can_use_after_millis(from.can_use_after_millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsWrapperProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsWrapperProto::CopyFrom(const GoodsWrapperProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsWrapperProto::IsInitialized() const {

  return true;
}

void GoodsWrapperProto::Swap(GoodsWrapperProto* other) {
  if (other != this) {
    std::swap(static_data_, other->static_data_);
    std::swap(dynamic_data_, other->dynamic_data_);
    std::swap(count_, other->count_);
    std::swap(binded_, other->binded_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(duration_, other->duration_);
    std::swap(tab_, other->tab_);
    std::swap(can_use_time_, other->can_use_time_);
    std::swap(can_use_after_millis_, other->can_use_after_millis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsWrapperProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsWrapperProto_descriptor_;
  metadata.reflection = GoodsWrapperProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeGoodsWrapperProto::kStaticDataFieldNumber;
const int ExchangeGoodsWrapperProto::kCountFieldNumber;
const int ExchangeGoodsWrapperProto::kCanUsebindedFieldNumber;
const int ExchangeGoodsWrapperProto::kTabFieldNumber;
#endif  // !_MSC_VER

ExchangeGoodsWrapperProto::ExchangeGoodsWrapperProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeGoodsWrapperProto::InitAsDefaultInstance() {
}

ExchangeGoodsWrapperProto::ExchangeGoodsWrapperProto(const ExchangeGoodsWrapperProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeGoodsWrapperProto::SharedCtor() {
  _cached_size_ = 0;
  static_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  canusebinded_ = false;
  tab_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeGoodsWrapperProto::~ExchangeGoodsWrapperProto() {
  SharedDtor();
}

void ExchangeGoodsWrapperProto::SharedDtor() {
  if (static_data_ != &::google::protobuf::internal::kEmptyString) {
    delete static_data_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeGoodsWrapperProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeGoodsWrapperProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeGoodsWrapperProto_descriptor_;
}

const ExchangeGoodsWrapperProto& ExchangeGoodsWrapperProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_goods_2eproto();
  return *default_instance_;
}

ExchangeGoodsWrapperProto* ExchangeGoodsWrapperProto::default_instance_ = NULL;

ExchangeGoodsWrapperProto* ExchangeGoodsWrapperProto::New() const {
  return new ExchangeGoodsWrapperProto;
}

void ExchangeGoodsWrapperProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_static_data()) {
      if (static_data_ != &::google::protobuf::internal::kEmptyString) {
        static_data_->clear();
      }
    }
    count_ = 0;
    canusebinded_ = false;
    tab_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeGoodsWrapperProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes static_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_static_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_canUsebinded;
        break;
      }

      // optional bool canUsebinded = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canUsebinded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canusebinded_)));
          set_has_canusebinded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tab;
        break;
      }

      // optional int32 tab = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tab:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_)));
          set_has_tab();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeGoodsWrapperProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes static_data = 1;
  if (has_static_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->static_data(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional bool canUsebinded = 3;
  if (has_canusebinded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->canusebinded(), output);
  }

  // optional int32 tab = 4;
  if (has_tab()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tab(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeGoodsWrapperProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes static_data = 1;
  if (has_static_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->static_data(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional bool canUsebinded = 3;
  if (has_canusebinded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->canusebinded(), target);
  }

  // optional int32 tab = 4;
  if (has_tab()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tab(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeGoodsWrapperProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes static_data = 1;
    if (has_static_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->static_data());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool canUsebinded = 3;
    if (has_canusebinded()) {
      total_size += 1 + 1;
    }

    // optional int32 tab = 4;
    if (has_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeGoodsWrapperProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeGoodsWrapperProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeGoodsWrapperProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeGoodsWrapperProto::MergeFrom(const ExchangeGoodsWrapperProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_static_data()) {
      set_static_data(from.static_data());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_canusebinded()) {
      set_canusebinded(from.canusebinded());
    }
    if (from.has_tab()) {
      set_tab(from.tab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeGoodsWrapperProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeGoodsWrapperProto::CopyFrom(const ExchangeGoodsWrapperProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeGoodsWrapperProto::IsInitialized() const {

  return true;
}

void ExchangeGoodsWrapperProto::Swap(ExchangeGoodsWrapperProto* other) {
  if (other != this) {
    std::swap(static_data_, other->static_data_);
    std::swap(count_, other->count_);
    std::swap(canusebinded_, other->canusebinded_);
    std::swap(tab_, other->tab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeGoodsWrapperProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeGoodsWrapperProto_descriptor_;
  metadata.reflection = ExchangeGoodsWrapperProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace app

// @@protoc_insertion_point(global_scope)
